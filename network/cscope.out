cscope 15 $HOME/ali/container/container_network -q 0000020932 0002646690
	@code/iptable.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/sockë.h
>

15 
	~<√töë/ö.h
>

16 
	~"ùèbÀ.h
"

17 
	#DEFAULT_CMD_SIZE
 128

	)

19 *
	$d«t_make_cmd
(
d«t_ruÀ
 *
ruÀ
)

21 *
cmd
;

22 *
cù
;

23 
cù
 = 
	`öë_¡ﬂ
(
ruÀ
->
addr
);

24 if(!
cù
)

25  
NULL
;

26 
cmd
 = (*)
	`ˇŒoc
(
DEFAULT_CMD_SIZE
, ());

27 if(!
cmd
)

28  
NULL
;

29 if(
ruÀ
->
¥Ÿo
 =
PROTO_TCP
)

30 
	`•rötf
(
cmd
," PREROUTING -pÅcp --dport %d -j DNAT --to-destination %s:%d",

31 
ruÀ
->
dp‹t
, 
cù
,ÑuÀ->
˝‹t
);

32 if(
ruÀ
->
¥Ÿo
 =
PROTO_UDP
)

33 
	`•rötf
(
cmd
," PREROUTING -p udp --dport %d -j DNAT --to-destination %s:%d",

34 
ruÀ
->
dp‹t
, 
cù
,ÑuÀ->
˝‹t
);

36  
cmd
;

37 
	}
}

39 *
	$¢©_make_cmd
(
¢©_ruÀ
 *
ruÀ
)

41 *
cmd
;

42 *
sù
;

45 if(!
ruÀ
->
öãrÁ˚
 || (ruÀ->
¥efix
 < 0 ||Ñule->prefix > 32))

46  
NULL
;

47 
cmd
 = (*)
	`ˇŒoc
(
DEFAULT_CMD_SIZE
, ());

48 if(!
cmd
)

49  
NULL
;

50 
sù
 = 
	`öë_¡ﬂ
(
ruÀ
->
addr
);

51 
	`•rötf
(
cmd
," POSTROUTING -s %s/%d -o %s -j MASQUERADE",

52 
sù
, 
ruÀ
->
¥efix
,ÑuÀ->
öãrÁ˚
);

53  
cmd
;

54 
	}
}

57 
	$d«t_ruÀ_£t
(
d«t_ruÀ
 *
ruÀ
)

59 
ªt
;

60 *
d©a
;

61 
cmd
[
DEFAULT_CMD_SIZE
]={0};

62 if(!
ruÀ
)

64 
d©a
 = 
	`d«t_make_cmd
(
ruÀ
);

65 if(!
d©a
)

67 
	`•rötf
(
cmd
,"ùèbÀ†-à«à-A %s", 
d©a
);

68 
ªt
 = 
	`sy°em
(
cmd
);

69 if(
ªt
 > 0)

71 
ruÀ
->
cmd
 = 
d©a
;

72 
ruÀ
->
cmd_Àn
 = 
	`°æí
(
d©a
);

76 
	}
}

78 
	$¢©_ruÀ_£t
(
¢©_ruÀ
 * 
ruÀ
)

80 
ªt
;

81 *
d©a
;

82 
cmd
[
DEFAULT_CMD_SIZE
]={0};

83 if(!
ruÀ
)

85 
d©a
 = 
	`¢©_make_cmd
(
ruÀ
);

86 if(!
d©a
)

88 
	`•rötf
(
cmd
,"ùèbÀ†-à«à-A %s", 
d©a
);

89 
ªt
 = 
	`sy°em
(
cmd
);

90 if(
ªt
 > 0)

92 
ruÀ
->
cmd
 = 
d©a
;

93 
ruÀ
->
cmd_Àn
 = 
	`°æí
(
d©a
);

97 
	}
}

99 
	$«t_ruÀ_dñ
(c⁄° * 
cmd_d©a
)

101 
ªt
;

102 
cmd
[
DEFAULT_CMD_SIZE
]={0};

103 if(!
cmd_d©a
)

105 
	`•rötf
(
cmd
, "ùèbÀ†-à«à-D %s",
cmd_d©a
);

106 
ªt
 = 
	`sy°em
(
cmd
);

107  
ªt
;

108 
	}
}

	@code/iptable.h

7 #i‚de‡
MATRIX_INTERFACE_H


8 
	#MATRIX_INTERFACE_H


	)

9 
	~<¨∑/öë.h
>

10 
	e√t_¥Ÿo


12 
	mPROTO_TCP
 =0,

13 
	mPROTO_UDP


14 }
	t√t_¥Ÿo
;

15 
	sd«t_ruÀ


17 
√t_¥Ÿo
 
	m¥Ÿo
;

18 
	mdp‹t
;

19 
ö_addr
 
	maddr
;

20 
	m˝‹t
;

21 *
	mcmd
;

22 
	mcmd_Àn
;

23 }
	td«t_ruÀ
;

25 
	s¢©_ruÀ


27 c⁄° * 
	möãrÁ˚
;

28 
	m¥efix
;

29 
ö_addr
 
	maddr
;

30 *
	mcmd
;

31 
	mcmd_Àn
;

32 }
	t¢©_ruÀ
;

34 
d«t_ruÀ_£t
(
d«t_ruÀ
 *
ruÀ
);

35 
¢©_ruÀ_£t
(
¢©_ruÀ
 * 
ruÀ
);

36 
«t_ruÀ_dñ
(c⁄° * 
cmd_d©a
);

	@code/main.c

7 
	#_GNU_SOURCE


	)

8 
	~<sys/ty≥s.h
>

9 
	~<sys/waô.h
>

10 
	~<sys/mou¡.h
>

11 
	~<sched.h
>

12 
	~<sig«l.h
>

13 
	~<î∫o.h
>

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<sys/sockë.h
>

18 
	~<√töë/ö.h
>

19 
	~<uni°d.h
>

20 
	~<¨∑/öë.h
>

21 
	~"√tw‹k.h
"

22 
	~"ùèbÀ.h
"

23 
	#STACK_SIZE
 (1024 * 10240)

	)

26 
	gcheckpoöt
[2];

28 
	gchûd_°ack
[
STACK_SIZE
];

31 
	s√tw‹k_∑øm


33 
	msockë
;

34 
	m¥efix
;

35 
ö_addr
 
	maddr
;

36 
ö_addr
 
	mbˇ°
;

37 
ö_addr
 
	mg©eway
;

38 c⁄° * 
	mëh_«me
;

39 }
	t√tw‹k_∑øm
;

41 
	sm©_br


43 * 
	m«me
;

44 
	m¥efix
;

45 
ö_addr
 
	maddr
;

46 
ö_addr
 
	mbˇ°
;

47 }
	tm©_br
;

49 
	$chûd_maö
(* 
¨g
)

51 
buf
[10]= {0};

52 
pid
;

53 
√tw‹k_∑øm
 * 
∑øm
 = (√tw‹k_∑øm *)
¨g
;

55 
	`ªad
(
∑øm
->
sockë
,
buf
,(buf));

56 if(
	`°∫cmp
(
buf
, "network", 7) != 0)

58 
	`¥ötf
("get cmdÉrror\r\n");

59 
	`exô
(0);

61 
	`√tw‹k_dev_up
("lo");

63 
	`ùv4_addr_add
(
∑øm
->
ëh_«me
, &∑øm->
addr
, &∑øm->
bˇ°
,Ö¨am->
¥efix
);

64 
	`√tw‹k_dev_up
(
∑øm
->
ëh_«me
);

67 
	`add_deÁu…_rouã
(&
∑øm
->
g©eway
);

69 
	`sy°em
("ifconfig");

70 
	`sy°em
("route");

71 
	`¥ötf
("childÖrocessÑun......\r\n");

72 
pid
 = 
	`f‹k
();

73 if(
pid
 < 0)

77 if(
pid
 == 0)

80 
	`exe˛
("/bö/£rvî","£rvî", 
NULL
);

86 
	`ªad
(
∑øm
->
sockë
,
buf
,(buf));

87 if(
	`°∫cmp
(
buf
, "stop", 4) != 0)

89 
	`¥ötf
("getÉxitÉrror\r\n");

90 
	`exô
(0);

96 
	}
}

98 
	$maö
(
¨gc
, * 
¨gv
[])

100 
pid
 = 0;

101 
buf
[10];

103 
sockës
[2];

104 
d«t_ruÀ
 
d«t
;

105 
¢©_ruÀ
 
¢©
;

108 
√tw‹k_∑øm
 
∑øm
;

109 
m©_br
 
br
;

111 
br
.
«me
 = "test";

112 c⁄° * 
ëh
 = "e_i", * 
vëh
 = "v_i";

114 
	`br_öô
();

115 
	`br_add_bridge
(
br
.
«me
);

118 if(
	`öë_©⁄
("172.16.0.1", &
br
.
addr
) == 0)

120 
	`¥ötf
("inet_atonÉrror\r\n");

122 if(
	`öë_©⁄
("172.16.0.255", &
br
.
bˇ°
) == 0)

124 
	`¥ötf
("inet_atonÉrror\r\n");

126 
br
.
¥efix
 = 24;

127 
	`ùv4_addr_add
(
br
.
«me
, &br.
addr
, &br.
bˇ°
, br.
¥efix
);

128 
	`√tw‹k_dev_up
(
br
.
«me
);

131 
	`mem£t
(&
¢©
, 0, (snat));

132 
¢©
.
öãrÁ˚
 = "eth0";

133 
¢©
.
addr
 = 
br
.addr;

134 
¢©
.
¥efix
 = 
br
.prefix;

135 
	`¢©_ruÀ_£t
(&
¢©
);

138 if(
	`√tw‹k_vëh_¸óã
(
ëh
, 
vëh
) != 0)

141 
	`¥ötf
("create vethÉrror \r\n");

142 
îr‹1
;

145 
	`√tw‹k_dev_up
(
ëh
);

148 
	`br_add_öãrÁ˚
(
br
.
«me
, 
ëh
);

152 
∑øm
.
ëh_«me
 = 
vëh
;

153 
∑øm
.
g©eway
 = 
br
.
addr
;

154 
∑øm
.
bˇ°
 = 
br
.bcast;

155 
∑øm
.
¥efix
 = 
br
.prefix;

157 
	`öë_©⁄
("172.16.0.2",&
∑øm
.
addr
);

158 i‡(
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
sockës
) < 0) {

159 
	`¥ötf
("îr‹ %d o¿sockë∑ú:%†", 
î∫o
, 
	`°ªº‹
(errno));

160 
îr‹2
;

162 
∑øm
.
sockë
 = 
sockës
[1];

164 
pid
 = 
	`˛⁄e
(
chûd_maö
, 
chûd_°ack
+
STACK_SIZE
, 
CLONE_NEWUTS
 | 
CLONE_NEWIPC
 | 
CLONE_NEWPID
 | 
CLONE_NEWNS
 | 
CLONE_NEWNET
 | 
SIGCHLD
, &
∑øm
);

165 if(
pid
 == -1)

167 
	`¥ötf
("create childÖrocessÉrror\r\n");

168 
îr‹2
;

172 
	`√tdev_move_to_«me•a˚
(
vëh
, 
pid
);

176 
	`mem£t
(&
d«t
, 0, (dnat));

177 
d«t
.
¥Ÿo
 = 
PROTO_TCP
;

179 
d«t
.
dp‹t
 = 7777;

180 
d«t
.
addr
 = 
∑øm
.addr;

182 
d«t
.
˝‹t
 = 9999;

183 
	`d«t_ruÀ_£t
(&
d«t
);

187 
	`wrôe
(
sockës
[0], "network", 7);

190 
	`ªad
(0,
buf
, 10);

191 if(
	`°∫cmp
(
buf
, "exit", 4) == 0)

193 
	`¥ötf
("end!!\r\n");

194 
	`wrôe
(
sockës
[0], "stop", 4);

195 
	`kûl
(
pid
, 9);

199 
îr‹2
:

200 if(
d«t
.
cmd
)

202 
	`«t_ruÀ_dñ
(
d«t
.
cmd
);

203 
	`‰ì
(
d«t
.
cmd
);

205 if(
¢©
.
cmd
)

207 
	`«t_ruÀ_dñ
(
¢©
.
cmd
);

208 
	`‰ì
(
¢©
.
cmd
);

210 
	`√tw‹k_dev_down
(
ëh
);

211 
	`√tdev_dñëe_by_«me
(
ëh
);

212 
îr‹1
:

214 
	`√tw‹k_dev_down
(
br
.
«me
);

216 
	`br_dñ_bridge
(
br
.
«me
);

218 if(
	`°rcmp
(
¨gv
[1], "cre") == 0)

219 
	`br_add_bridge
("test");

220 if(
	`°rcmp
(
¨gv
[1], "del") == 0)

221 
	`br_dñ_bridge
("test");

222 if(
	`°rcmp
(
¨gv
[1], "addr") == 0)

224 
ö_addr
 
addr
, 
mask
;

225 if(
	`öë_©⁄
("172.16.0.1", &
addr
) == 0)

227 
	`¥ötf
("inet_atonÉrror\r\n");

229 if(
	`öë_©⁄
("255.255.0.0", &
mask
) == 0)

231 
	`¥ötf
("inet_atonÉrror\r\n");

233 
	`ùv4_addr_add
("ã°", &
addr
, &
mask
, 0);

234 
	`√tw‹k_dev_up
("test");

236 if(
	`°rcmp
(
¨gv
[1], "veth") == 0)

238 
	`¥ötf
("create veth\r\n");

239 if(
	`√tw‹k_vëh_¸óã
("e_mar", "v_mar") != 0)

240 
	`¥ötf
("create vethÉrror \r\n");

241 
	`√tw‹k_dev_up
("e_mar");

250 
	}
}

	@code/network.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<î∫o.h
>

12 
	~<°rög.h
>

13 
	~<dúít.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<sys/°©.h
>

16 
	~<√t/if.h
>

17 
	~<sys/sockë.h
>

18 
	~<√töë/ö.h
>

19 
	~<löux/if_bridge.h
>

20 
	~<sys/io˘l.h
>

21 
	~<√t/if_¨p.h
>

22 
	~<√t/ëhî√t.h
>

23 
	~<√töë/ö.h
>

24 
	~<löux/√éök.h
>

25 
	~<löux/π√éök.h
>

26 
	~<löux/sockios.h
>

27 
	~<√t/rouã.h
>

28 
	~<√t/if.h
>

29 
	~<sys/io˘l.h
>

31 
	~<¨∑/öë.h
>

32 
	~"∆.h
"

34 
	#mask_ö_addr
(
x
Ë(((
sockaddr_ö
 *)&((x).
π_gímask
))->
sö_addr
.
s_addr
)

	)

35 
	#fuŒ_mask
(
x
Ë(x)

	)

37 #i‚de‡
VETH_INFO_PEER


38 
	#VETH_INFO_PEER
 1

	)

41 
	gbr_sockë_fd
 = -1;

43 
	$br_öô
()

45 i‡((
br_sockë_fd
 = 
	`sockë
(
AF_LOCAL
, 
SOCK_STREAM
, 0)) < 0)

46  
î∫o
;

48 
	}
}

50 
	$br_shutdown
()

52 
	`˛o£
(
br_sockë_fd
);

53 
br_sockë_fd
 = -1;

54 
	}
}

57 
	$br_add_bridge
(c⁄° *
b∫ame
)

59 
ªt
;

61 #ifde‡
SIOCBRADDBR


62 
ªt
 = 
	`io˘l
(
br_sockë_fd
, 
SIOCBRADDBR
, 
b∫ame
);

63 i‡(
ªt
 < 0)

66 
_br
[
IFNAMSIZ
];

67 
¨g
[3] = { 
BRCTL_ADD_BRIDGE
, (Ë
_br
 };

69 
	`°∫˝y
(
_br
, 
b∫ame
, 
IFNAMSIZ
);

70 
ªt
 = 
	`io˘l
(
br_sockë_fd
, 
SIOCSIFBR
, 
¨g
);

73  
ªt
 < 0 ? 
î∫o
 : 0;

74 
	}
}

76 
	$br_dñ_bridge
(c⁄° *
b∫ame
)

78 
ªt
;

80 #ifde‡
SIOCBRDELBR


81 
ªt
 = 
	`io˘l
(
br_sockë_fd
, 
SIOCBRDELBR
, 
b∫ame
);

82 i‡(
ªt
 < 0)

85 
_br
[
IFNAMSIZ
];

86 
¨g
[3] = { 
BRCTL_DEL_BRIDGE
, (Ë
_br
 };

88 
	`°∫˝y
(
_br
, 
b∫ame
, 
IFNAMSIZ
);

89 
ªt
 = 
	`io˘l
(
br_sockë_fd
, 
SIOCSIFBR
, 
¨g
);

91  
ªt
 < 0 ? 
î∫o
 : 0;

92 
	}
}

94 
	$br_add_öãrÁ˚
(c⁄° *
bridge
, c⁄° *
dev
)

96 
i‰eq
 
i‰
;

97 
îr
;

98 
ifödex
 = 
	`if_«mëoödex
(
dev
);

100 i‡(
ifödex
 == 0)

101  
ENODEV
;

103 
	`°∫˝y
(
i‰
.
i‰_«me
, 
bridge
, 
IFNAMSIZ
);

104 #ifde‡
SIOCBRADDIF


105 
i‰
.
i‰_ifödex
 = 
ifödex
;

106 
îr
 = 
	`io˘l
(
br_sockë_fd
, 
SIOCBRADDIF
, &
i‰
);

107 i‡(
îr
 < 0)

110 
¨gs
[4] = { 
BRCTL_ADD_IF
, 
ifödex
, 0, 0 };

112 
i‰
.
i‰_d©a
 = (*Ë
¨gs
;

113 
îr
 = 
	`io˘l
(
br_sockë_fd
, 
SIOCDEVPRIVATE
, &
i‰
);

116  
îr
 < 0 ? 
î∫o
 : 0;

117 
	}
}

119 
	$br_dñ_öãrÁ˚
(c⁄° *
bridge
, c⁄° *
dev
)

121 
i‰eq
 
i‰
;

122 
îr
;

123 
ifödex
 = 
	`if_«mëoödex
(
dev
);

125 i‡(
ifödex
 == 0)

126  
ENODEV
;

128 
	`°∫˝y
(
i‰
.
i‰_«me
, 
bridge
, 
IFNAMSIZ
);

129 #ifde‡
SIOCBRDELIF


130 
i‰
.
i‰_ifödex
 = 
ifödex
;

131 
îr
 = 
	`io˘l
(
br_sockë_fd
, 
SIOCBRDELIF
, &
i‰
);

132 i‡(
îr
 < 0)

135 
¨gs
[4] = { 
BRCTL_DEL_IF
, 
ifödex
, 0, 0 };

137 
i‰
.
i‰_d©a
 = (*Ë
¨gs
;

138 
îr
 = 
	`io˘l
(
br_sockë_fd
, 
SIOCDEVPRIVATE
, &
i‰
);

141  
îr
 < 0 ? 
î∫o
 : 0;

142 
	}
}

144 
	$add_deÁu…_rouã
(
ö_addr
 *
addr
)

146 
ªt
;

147 
skfd
;

148 
sockaddr_ö
 * 
π_addr
;

149 
π_buf
[(
πíåy
)];

150 
πíåy
 *c⁄° 
π
 = (πíåy *)
π_buf
;

151 
	`mem£t
(
π
, 0, (*rt));

154 
π_addr
 = (
sockaddr_ö
 *)&
π
->
π_d°
;

156 
π_addr
->
sö_Ámûy
 = 
AF_INET
;

157 
π_addr
->
sö_p‹t
 = 0;

158 
π_addr
->
sö_addr
.
s_addr
 = 
INADDR_ANY
;

160 
π_addr
 = (
sockaddr_ö
 *)&
π
->
π_g©eway
;

162 
π_addr
->
sö_Ámûy
 = 
AF_INET
;

163 
π_addr
->
sö_p‹t
 = 0;

164 
π_addr
->
sö_addr
 = *
addr
;

168 
π
->
π_Êags
 |
RTF_GATEWAY
;

171 
π_addr
 = (
sockaddr_ö
 *)&
π
->
π_gímask
;

180 
¥efix_Àn
 = 0;

181 
	`mask_ö_addr
(*
π
Ë
	`ht⁄l
–~(0xffffffffUL >> 
¥efix_Àn
));

186 
skfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

187 
ªt
 = 
	`io˘l
(
skfd
, 
SIOCADDRT
, 
π
);

188 if(
ªt
 != 0)

189 
	`¥ötf
("£∏îr‹:%s\r\n", 
	`°ªº‹
(
î∫o
));

190 
	`˛o£
(
skfd
);

191 
	}
}

193 
	$√tdev_£t_Êag
(c⁄° *
«me
, 
Êag
)

195 
∆_h™dÀr
 
∆h
;

196 
∆msg
 *∆msg = 
NULL
, *
™swî
 = NULL;

197 
iföfomsg
 *
ifi
;

198 
ödex
, 
Àn
, 
îr
;

200 
îr
 = 
	`√éök_›í
(&
∆h
, 
NETLINK_ROUTE
);

201 i‡(
îr
)

202  
îr
;

204 
îr
 = -
EINVAL
;

205 
Àn
 = 
	`°æí
(
«me
);

206 i‡(
Àn
 =1 ||Üí >
IFNAMSIZ
)

207 
out
;

209 
îr
 = -
ENOMEM
;

210 
∆msg
 = 
	`∆msg_Æloc
(
NLMSG_GOOD_SIZE
);

211 i‡(!
∆msg
)

212 
out
;

214 
™swî
 = 
	`∆msg_Æloc_ª£rve
(
NLMSG_GOOD_SIZE
);

215 i‡(!
™swî
)

216 
out
;

218 
îr
 = -
EINVAL
;

219 
ödex
 = 
	`if_«mëoödex
(
«me
);

220 i‡(!
ödex
)

221 
out
;

223 
∆msg
->
∆msghdr
->
∆msg_Êags
 = 
NLM_F_REQUEST
|
NLM_F_ACK
;

224 
∆msg
->
∆msghdr
->
∆msg_ty≥
 = 
RTM_NEWLINK
;

226 
ifi
 = 
	`∆msg_ª£rve
(
∆msg
, (
iföfomsg
));

227 
ifi
->
ifi_Ámûy
 = 
AF_UNSPEC
;

228 
ifi
->
ifi_ödex
 = 
ödex
;

229 
ifi
->
ifi_ch™ge
 |
IFF_UP
;

230 
ifi
->
ifi_Êags
 |
Êag
;

232 
îr
 = 
	`√éök_å™ß˘i⁄
(&
∆h
, 
∆msg
, 
™swî
);

233 
out
:

234 
	`√éök_˛o£
(&
∆h
);

235 
	`∆msg_‰ì
(
∆msg
);

236 
	`∆msg_‰ì
(
™swî
);

237  
îr
;

238 
	}
}

242 
	$√tw‹k_dev_up
(c⁄° *
«me
)

244  
	`√tdev_£t_Êag
(
«me
, 
IFF_UP
);

245 
	}
}

247 
	$√tw‹k_dev_down
(c⁄° *
«me
)

249  
	`√tdev_£t_Êag
(
«me
, 0);

250 
	}
}

254 
	$√tdev_dñëe_by_ödex
(
ifödex
)

256 
∆_h™dÀr
 
∆h
;

257 
∆msg
 *∆msg = 
NULL
, *
™swî
 = NULL;

258 
iföfomsg
 *
ifi
;

259 
îr
;

261 
îr
 = 
	`√éök_›í
(&
∆h
, 
NETLINK_ROUTE
);

262 i‡(
îr
)

263  
îr
;

265 
îr
 = -
ENOMEM
;

266 
∆msg
 = 
	`∆msg_Æloc
(
NLMSG_GOOD_SIZE
);

267 i‡(!
∆msg
)

268 
out
;

270 
™swî
 = 
	`∆msg_Æloc_ª£rve
(
NLMSG_GOOD_SIZE
);

271 i‡(!
™swî
)

272 
out
;

274 
∆msg
->
∆msghdr
->
∆msg_Êags
 = 
NLM_F_ACK
|
NLM_F_REQUEST
;

275 
∆msg
->
∆msghdr
->
∆msg_ty≥
 = 
RTM_DELLINK
;

277 
ifi
 = 
	`∆msg_ª£rve
(
∆msg
, (
iföfomsg
));

278 
ifi
->
ifi_Ámûy
 = 
AF_UNSPEC
;

279 
ifi
->
ifi_ödex
 = 
ifödex
;

281 
îr
 = 
	`√éök_å™ß˘i⁄
(&
∆h
, 
∆msg
, 
™swî
);

282 
out
:

283 
	`√éök_˛o£
(&
∆h
);

284 
	`∆msg_‰ì
(
™swî
);

285 
	`∆msg_‰ì
(
∆msg
);

286  
îr
;

287 
	}
}

289 
	$√tdev_dñëe_by_«me
(c⁄° *
«me
)

291 
ödex
;

293 
ödex
 = 
	`if_«mëoödex
(
«me
);

294 i‡(!
ödex
)

295  -
EINVAL
;

297  
	`√tdev_dñëe_by_ödex
(
ödex
);

298 
	}
}

301 
	$√tdev_move_to_«me•a˚
(c⁄° * 
i‚ame
, 
pid_t
 
pid
)

303 
∆_h™dÀr
 
∆h
;

304 
∆msg
 *∆msg = 
NULL
;

305 
iföfomsg
 *
ifi
;

306 
îr
;

308 if(!
i‚ame
)

311 
ifödex
;

312 
ifödex
 = 
	`if_«mëoödex
(
i‚ame
);

313 if(
ifödex
 == 0)

316 
îr
 = 
	`√éök_›í
(&
∆h
, 
NETLINK_ROUTE
);

317 i‡(
îr
)

318  
îr
;

320 
îr
 = -
ENOMEM
;

321 
∆msg
 = 
	`∆msg_Æloc
(
NLMSG_GOOD_SIZE
);

322 i‡(!
∆msg
)

323 
out
;

325 
∆msg
->
∆msghdr
->
∆msg_Êags
 = 
NLM_F_REQUEST
|
NLM_F_ACK
;

326 
∆msg
->
∆msghdr
->
∆msg_ty≥
 = 
RTM_NEWLINK
;

328 
ifi
 = 
	`∆msg_ª£rve
(
∆msg
, (
iföfomsg
));

329 
ifi
->
ifi_Ámûy
 = 
AF_UNSPEC
;

330 
ifi
->
ifi_ödex
 = 
ifödex
;

332 i‡(
	`∆a_put_u32
(
∆msg
, 
IFLA_NET_NS_PID
, 
pid
))

333 
out
;

335 i‡(
i‚ame
 !
NULL
) {

336 i‡(
	`∆a_put_°rög
(
∆msg
, 
IFLA_IFNAME
, 
i‚ame
))

337 
out
;

340 
îr
 = 
	`√éök_å™ß˘i⁄
(&
∆h
, 
∆msg
,Çlmsg);

341 
out
:

342 
	`√éök_˛o£
(&
∆h
);

343 
	`∆msg_‰ì
(
∆msg
);

344  
îr
;

345 
	}
}

349 
	$√tw‹k_vëh_¸óã
(c⁄° *
«me1
, c⁄° *
«me2
)

351 
∆_h™dÀr
 
∆h
;

352 
∆msg
 *∆msg = 
NULL
, *
™swî
 = NULL;

353 
iföfomsg
 *
ifi
;

354 
π©å
 *
√°1
, *
√°2
, *
√°3
;

355 
Àn
, 
îr
;

357 
îr
 = 
	`√éök_›í
(&
∆h
, 
NETLINK_ROUTE
);

358 i‡(
îr
)

359  
îr
;

361 
îr
 = -
EINVAL
;

362 
Àn
 = 
	`°æí
(
«me1
);

363 i‡(
Àn
 =1 ||Üí >
IFNAMSIZ
)

364 
out
;

366 
Àn
 = 
	`°æí
(
«me2
);

367 i‡(
Àn
 =1 ||Üí >
IFNAMSIZ
)

368 
out
;

370 
îr
 = -
ENOMEM
;

371 
∆msg
 = 
	`∆msg_Æloc
(
NLMSG_GOOD_SIZE
);

372 i‡(!
∆msg
)

373 
out
;

375 
™swî
 = 
	`∆msg_Æloc_ª£rve
(
NLMSG_GOOD_SIZE
);

376 i‡(!
™swî
)

377 
out
;

379 
∆msg
->
∆msghdr
->
∆msg_Êags
 =

380 
NLM_F_REQUEST
|
NLM_F_CREATE
|
NLM_F_EXCL
|
NLM_F_ACK
;

381 
∆msg
->
∆msghdr
->
∆msg_ty≥
 = 
RTM_NEWLINK
;

383 
ifi
 = 
	`∆msg_ª£rve
(
∆msg
, (
iföfomsg
));

384 
ifi
->
ifi_Ámûy
 = 
AF_UNSPEC
;

386 
îr
 = -
EINVAL
;

387 
√°1
 = 
	`∆a_begö_√°ed
(
∆msg
, 
IFLA_LINKINFO
);

388 i‡(!
√°1
)

389 
out
;

391 i‡(
	`∆a_put_°rög
(
∆msg
, 
IFLA_INFO_KIND
, "veth"))

392 
out
;

394 
√°2
 = 
	`∆a_begö_√°ed
(
∆msg
, 
IFLA_INFO_DATA
);

395 i‡(!
√°2
)

396 
out
;

398 
√°3
 = 
	`∆a_begö_√°ed
(
∆msg
, 
VETH_INFO_PEER
);

399 i‡(!
√°3
)

400 
out
;

402 
ifi
 = 
	`∆msg_ª£rve
(
∆msg
, (
iföfomsg
));

403 i‡(!
ifi
)

404 
out
;

406 i‡(
	`∆a_put_°rög
(
∆msg
, 
IFLA_IFNAME
, 
«me2
))

407 
out
;

409 
	`∆a_íd_√°ed
(
∆msg
, 
√°3
);

411 
	`∆a_íd_√°ed
(
∆msg
, 
√°2
);

413 
	`∆a_íd_√°ed
(
∆msg
, 
√°1
);

415 i‡(
	`∆a_put_°rög
(
∆msg
, 
IFLA_IFNAME
, 
«me1
))

416 
out
;

418 
îr
 = 
	`√éök_å™ß˘i⁄
(&
∆h
, 
∆msg
, 
™swî
);

419 
out
:

420 
	`√éök_˛o£
(&
∆h
);

421 
	`∆msg_‰ì
(
™swî
);

422 
	`∆msg_‰ì
(
∆msg
);

423  
îr
;

424 
	}
}

428 
	$ù_addr_add
(
Ámûy
, 
ifödex
,

429 *
addr
, *
bˇ°
, *
aˇ°
, 
¥efix
)

431 
∆_h™dÀr
 
∆h
;

432 
∆msg
 *∆msg = 
NULL
, *
™swî
 = NULL;

433 
iÁddrmsg
 *
iÁ
;

434 
addæí
;

435 
îr
;

437 
addæí
 = 
Ámûy
 =
AF_INET
 ? (
ö_addr
) :

438 (
ö6_addr
);

440 
îr
 = 
	`√éök_›í
(&
∆h
, 
NETLINK_ROUTE
);

441 i‡(
îr
)

442  
îr
;

444 
îr
 = -
ENOMEM
;

445 
∆msg
 = 
	`∆msg_Æloc
(
NLMSG_GOOD_SIZE
);

446 i‡(!
∆msg
)

447 
out
;

449 
™swî
 = 
	`∆msg_Æloc_ª£rve
(
NLMSG_GOOD_SIZE
);

450 i‡(!
™swî
)

451 
out
;

453 
∆msg
->
∆msghdr
->
∆msg_Êags
 =

454 
NLM_F_ACK
|
NLM_F_REQUEST
|
NLM_F_CREATE
|
NLM_F_EXCL
;

455 
∆msg
->
∆msghdr
->
∆msg_ty≥
 = 
RTM_NEWADDR
;

457 
iÁ
 = 
	`∆msg_ª£rve
(
∆msg
, (
iÁddrmsg
));

458 
iÁ
->
iÁ_¥efixÀn
 = 
¥efix
;

459 
iÁ
->
iÁ_ödex
 = 
ifödex
;

460 
iÁ
->
iÁ_Ámûy
 = 
Ámûy
;

461 
iÁ
->
iÁ_sc›e
 = 0;

463 
îr
 = -
EINVAL
;

464 i‡(
	`∆a_put_buf„r
(
∆msg
, 
IFA_LOCAL
, 
addr
, 
addæí
))

465 
out
;

467 i‡(
	`∆a_put_buf„r
(
∆msg
, 
IFA_ADDRESS
, 
addr
, 
addæí
))

468 
out
;

470 i‡(
	`∆a_put_buf„r
(
∆msg
, 
IFA_BROADCAST
, 
bˇ°
, 
addæí
))

471 
out
;

474 
îr
 = -
EPROTONOSUPPORT
;

475 i‡(
Ámûy
 =
AF_INET6
 &&

476 (
	`memcmp
(
bˇ°
, &
ö6addr_™y
, (in6addr_any)) ||

477 
	`memcmp
(
aˇ°
, &
ö6addr_™y
, (in6addr_any))))

478 
out
;

480 
îr
 = 
	`√éök_å™ß˘i⁄
(&
∆h
, 
∆msg
, 
™swî
);

481 
out
:

482 
	`√éök_˛o£
(&
∆h
);

483 
	`∆msg_‰ì
(
™swî
);

484 
	`∆msg_‰ì
(
∆msg
);

485  
îr
;

486 
	}
}

489 
	$ùv4_addr_add
(c⁄° * 
«me
, 
ö_addr
 *
addr
, ö_add∏*
bˇ°
, 
¥efix
)

491 
ifödex
;

492 
ifödex
 = 
	`if_«mëoödex
(
«me
);

493 if(
ifödex
 == 0)

495  
	`ù_addr_add
(
AF_INET
, 
ifödex
, 
addr
, 
bˇ°
, 
NULL
, 
¥efix
);

496 
	}
}

	@code/network.h

7 #i‚de‡
MATRIX_NETWORK_H


8 
	#MATRIX_NETWORK_H


	)

10 
	~<¨∑/öë.h
>

11 
	s√tw‹k_c⁄f


13 
	m¥Ÿo
;

14 
	mp‹t
;

15 
√tw‹k_c⁄f
 * 
	m√xt
;

16 }
	t√tw‹k_c⁄f
;

18 
	smrx_√tw‹k


20 * 
	mb∫ame
;

21 * 
	mr_ëh
;

22 * 
	mv_ëh
;

23 
	m¥Ÿ
;

24 
	mr_p‹t
;

25 
	mv_p‹t
;

26 
ö_addr
 
	mv_addr
;

27 
ö_addr
 
	mb_addr
;

28 }
	tmrx_√tw‹k
;

29 
br_öô
();

30 
br_shutdown
();

31 
br_add_bridge
(c⁄° *
b∫ame
);

32 
br_dñ_bridge
(c⁄° *
b∫ame
);

33 
br_add_öãrÁ˚
(c⁄° *
bridge
, c⁄° *
dev
);

34 
br_dñ_öãrÁ˚
(c⁄° *
bridge
, c⁄° *
dev
);

36 
√tw‹k_vëh_¸óã
(c⁄° *
«me1
, c⁄° *
«me2
);

39 
√tdev_dñëe_by_«me
(c⁄° *
«me
);

41 
ùv4_addr_add
(c⁄° * 
«me
, 
ö_addr
 *
addr
,ö_add∏*
bˇ°
, 
¥efix
);

43 
√tw‹k_dev_up
(c⁄° *
«me
);

44 
√tw‹k_dev_down
(c⁄° *
«me
);

48 
add_deÁu…_rouã
(
ö_addr
 *
addr
);

50 
√tdev_move_to_«me•a˚
(c⁄° * 
i‚ame
, 
pid_t
 
pid
);

	@code/nl.c

23 
	~<sys/sockë.h
>

24 
	~<°rög.h
>

25 
	~<°dio.h
>

26 
	~<time.h
>

27 
	~<uni°d.h
>

28 
	~<î∫o.h
>

29 
	~<°dlib.h
>

30 
	~<löux/√éök.h
>

31 
	~<löux/π√éök.h
>

33 
	~"∆.h
"

35 
	#NLMSG_TAIL
(
nmsg
) \

36 ((
π©å
 *Ë(((*Ë(
nmsg
)Ë+ 
	`NLMSG_ALIGN
(“msg)->
∆msg_Àn
)))

	)

38 
size_t
 
	$∆msg_Àn
(c⁄° 
∆msg
 *nlmsg)

40  
∆msg
->
∆msghdr
->
∆msg_Àn
 - 
NLMSG_HDRLEN
;

41 
	}
}

43 *
	$∆msg_d©a
(
∆msg
 *nlmsg)

45 *
d©a
 = ((*)
∆msg
Ë+ 
NLMSG_HDRLEN
;

46 i‡(!
	`∆msg_Àn
(
∆msg
))

47  
NULL
;

48  
d©a
;

49 
	}
}

51 
	$∆a_put
(
∆msg
 *∆msg, 
©å
,

52 c⁄° *
d©a
, 
size_t
 
Àn
)

54 
π©å
 *
πa
;

55 
size_t
 
πÆí
 = 
	`RTA_LENGTH
(
Àn
);

56 
size_t
 
éí
 = 
	`NLMSG_ALIGN
(
∆msg
->
∆msghdr
->
∆msg_Àn
Ë+ 
	`RTA_ALIGN
(
πÆí
);

58 i‡(
éí
 > 
∆msg
->
ˇp
)

59  -
ENOMEM
;

61 
πa
 = 
	`NLMSG_TAIL
(
∆msg
->
∆msghdr
);

62 
πa
->
πa_ty≥
 = 
©å
;

63 
πa
->
πa_Àn
 = 
πÆí
;

64 
	`mem˝y
(
	`RTA_DATA
(
πa
), 
d©a
, 
Àn
);

65 
∆msg
->
∆msghdr
->
∆msg_Àn
 = 
éí
;

67 
	}
}

69 
	$∆a_put_buf„r
(
∆msg
 *∆msg, 
©å
,

70 c⁄° *
d©a
, 
size_t
 
size
)

72  
	`∆a_put
(
∆msg
, 
©å
, 
d©a
, 
size
);

73 
	}
}

75 
	$∆a_put_°rög
(
∆msg
 *∆msg, 
©å
, c⁄° *
°rög
)

77  
	`∆a_put
(
∆msg
, 
©å
, 
°rög
, 
	`°æí
(string) + 1);

78 
	}
}

80 
	$∆a_put_u32
(
∆msg
 *∆msg, 
©å
, 
vÆue
)

82  
	`∆a_put
(
∆msg
, 
©å
, &
vÆue
, (value));

83 
	}
}

85 
	$∆a_put_u16
(
∆msg
 *∆msg, 
©å
, 
vÆue
)

87  
	`∆a_put
(
∆msg
, 
©å
, &
vÆue
, 2);

88 
	}
}

90 
	$∆a_put_©å
(
∆msg
 *∆msg, 
©å
)

92  
	`∆a_put
(
∆msg
, 
©å
, 
NULL
, 0);

93 
	}
}

95 
π©å
 *
	$∆a_begö_√°ed
(
∆msg
 *∆msg, 
©å
)

97 
π©å
 *π©å = 
	`NLMSG_TAIL
(
∆msg
->
∆msghdr
);

99 i‡(
	`∆a_put_©å
(
∆msg
, 
©å
))

100  
NULL
;

102  
π©å
;

103 
	}
}

105 
	$∆a_íd_√°ed
(
∆msg
 *∆msg, 
π©å
 *
©å
)

107 
©å
->
πa_Àn
 = (*)
	`NLMSG_TAIL
(
∆msg
->
∆msghdr
) - (*)attr;

108 
	}
}

110 
∆msg
 *
	$∆msg_Æloc
(
size_t
 
size
)

112 
∆msg
 *nlmsg;

113 
size_t
 
Àn
 = 
NLMSG_HDRLEN
 + 
	`NLMSG_ALIGN
(
size
);

115 
∆msg
 = (∆msg *)
	`mÆloc
((nlmsg));

116 i‡(!
∆msg
)

117  
NULL
;

119 
∆msg
->
∆msghdr
 = (∆msghd∏*)
	`mÆloc
(
Àn
);

120 i‡(!
∆msg
->
∆msghdr
)

121 
îrout
;

123 
	`mem£t
(
∆msg
->
∆msghdr
, 0, 
Àn
);

124 
∆msg
->
ˇp
 = 
Àn
;

125 
∆msg
->
∆msghdr
->
∆msg_Àn
 = 
NLMSG_HDRLEN
;

127  
∆msg
;

128 
îrout
:

129 
	`‰ì
(
∆msg
);

130  
NULL
;

131 
	}
}

133 *
	$∆msg_ª£rve
(
∆msg
 *∆msg, 
size_t
 
Àn
)

135 *
buf
;

136 
size_t
 
∆msg_Àn
 = 
∆msg
->
∆msghdr
->nlmsg_len;

137 
size_t
 
éí
 = 
	`NLMSG_ALIGN
(
Àn
);

139 i‡(
∆msg_Àn
 + 
éí
 > 
∆msg
->
ˇp
)

140  
NULL
;

142 
buf
 = ((*)(
∆msg
->
∆msghdr
)Ë+ 
∆msg_Àn
;

143 
∆msg
->
∆msghdr
->
∆msg_Àn
 +
éí
;

145 i‡(
éí
 > 
Àn
)

146 
	`mem£t
(
buf
 + 
Àn
, 0, 
éí
 -Üen);

148  
buf
;

149 
	}
}

151 
∆msg
 *
	$∆msg_Æloc_ª£rve
(
size_t
 
size
)

153 
∆msg
 *nlmsg;

155 
∆msg
 = 
	`∆msg_Æloc
(
size
);

156 i‡(!
∆msg
)

157  
NULL
;

160 
∆msg
->
∆msghdr
->
∆msg_Àn
 =Çlmsg->
ˇp
;

161  
∆msg
;

162 
	}
}

164 
	$∆msg_‰ì
(
∆msg
 *nlmsg)

166 i‡(!
∆msg
)

169 
	`‰ì
(
∆msg
->
∆msghdr
);

170 
	`‰ì
(
∆msg
);

171 
	}
}

173 
	$√éök_rcv
(
∆_h™dÀr
 *
h™dÀr
, 
∆msg
 *
™swî
)

175 
ªt
;

176 
sockaddr_∆
 
∆addr
;

177 
iovec
 
iov
 = {

178 .
iov_ba£
 = 
™swî
->
∆msghdr
,

179 .
iov_Àn
 = 
™swî
->
∆msghdr
->
∆msg_Àn
,

182 
msghdr
 
msg
 = {

183 .
msg_«me
 = &
∆addr
,

184 .
msg_«mñí
 = (
∆addr
),

185 .
msg_iov
 = &
iov
,

186 .
msg_iovÀn
 = 1,

189 
	`mem£t
(&
∆addr
, 0, (nladdr));

190 
∆addr
.
∆_Ámûy
 = 
AF_NETLINK
;

191 
∆addr
.
∆_pid
 = 0;

192 
∆addr
.
∆_groups
 = 0;

194 
agaö
:

195 
ªt
 = 
	`ªcvmsg
(
h™dÀr
->
fd
, &
msg
, 0);

196 i‡(
ªt
 < 0) {

197 i‡(
î∫o
 =
EINTR
)

198 
agaö
;

199  -
î∫o
;

202 i‡(!
ªt
)

205 i‡(
msg
.
msg_Êags
 & 
MSG_TRUNC
 &&

206 
ªt
 =
™swî
->
∆msghdr
->
∆msg_Àn
)

207  -
EMSGSIZE
;

209  
ªt
;

210 
	}
}

212 
	$√éök_£nd
(
∆_h™dÀr
 *
h™dÀr
, 
∆msg
 *nlmsg)

214 
sockaddr_∆
 
∆addr
;

215 
iovec
 
iov
 = {

216 .
iov_ba£
 = 
∆msg
->
∆msghdr
,

217 .
iov_Àn
 = 
∆msg
->
∆msghdr
->
∆msg_Àn
,

219 
msghdr
 
msg
 = {

220 .
msg_«me
 = &
∆addr
,

221 .
msg_«mñí
 = (
∆addr
),

222 .
msg_iov
 = &
iov
,

223 .
msg_iovÀn
 = 1,

225 
ªt
;

227 
	`mem£t
(&
∆addr
, 0, (nladdr));

228 
∆addr
.
∆_Ámûy
 = 
AF_NETLINK
;

229 
∆addr
.
∆_pid
 = 0;

230 
∆addr
.
∆_groups
 = 0;

232 
ªt
 = 
	`£ndmsg
(
h™dÀr
->
fd
, &
msg
, 0);

233 i‡(
ªt
 < 0)

234  -
î∫o
;

236  
ªt
;

237 
	}
}

239 #i‚de‡
NLMSG_ERROR


240 
	#NLMSG_ERROR
 0x2

	)

242 
	$√éök_å™ß˘i⁄
(
∆_h™dÀr
 *
h™dÀr
,

243 
∆msg
 *
ªque°
, ∆msg *
™swî
)

245 
ªt
;

247 
ªt
 = 
	`√éök_£nd
(
h™dÀr
, 
ªque°
);

248 i‡(
ªt
 < 0)

249  
ªt
;

251 
ªt
 = 
	`√éök_rcv
(
h™dÀr
, 
™swî
);

252 i‡(
ªt
 < 0)

253  
ªt
;

255 i‡(
™swî
->
∆msghdr
->
∆msg_ty≥
 =
NLMSG_ERROR
) {

256 
∆msgîr
 *
îr
 = (∆msgîr*)
	`NLMSG_DATA
(
™swî
->
∆msghdr
);

257  
îr
->
îr‹
;

261 
	}
}

263 
	$√éök_›í
(
∆_h™dÀr
 *
h™dÀr
, 
¥Ÿocﬁ
)

265 
sockÀn_t
 
sockÀn
;

266 
¢dbuf
 = 32768;

267 
rcvbuf
 = 32768;

269 
	`mem£t
(
h™dÀr
, 0, (*handler));

271 
h™dÀr
->
fd
 = 
	`sockë
(
AF_NETLINK
, 
SOCK_RAW
, 
¥Ÿocﬁ
);

272 i‡(
h™dÀr
->
fd
 < 0)

273  -
î∫o
;

275 i‡(
	`£tsock›t
(
h™dÀr
->
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
,

276 &
¢dbuf
, (sndbuf)) < 0)

277  -
î∫o
;

279 i‡(
	`£tsock›t
(
h™dÀr
->
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
,

280 &
rcvbuf
,(rcvbuf)) < 0)

281  -
î∫o
;

283 
	`mem£t
(&
h™dÀr
->
loˇl
, 0, (handler->local));

284 
h™dÀr
->
loˇl
.
∆_Ámûy
 = 
AF_NETLINK
;

285 
h™dÀr
->
loˇl
.
∆_groups
 = 0;

287 i‡(
	`böd
(
h™dÀr
->
fd
, (
sockaddr
*)&h™dÀr->
loˇl
,

288 (
h™dÀr
->
loˇl
)) < 0)

289  -
î∫o
;

291 
sockÀn
 = (
h™dÀr
->
loˇl
);

292 i‡(
	`gësock«me
(
h™dÀr
->
fd
, (
sockaddr
*)&h™dÀr->
loˇl
,

293 &
sockÀn
) < 0)

294  -
î∫o
;

296 i‡(
sockÀn
 !(
h™dÀr
->
loˇl
))

297  -
EINVAL
;

299 i‡(
h™dÀr
->
loˇl
.
∆_Ámûy
 !
AF_NETLINK
)

300  -
EINVAL
;

302 
h™dÀr
->
£q
 = 
	`time
(
NULL
);

305 
	}
}

307 
	$√éök_˛o£
(
∆_h™dÀr
 *
h™dÀr
)

309 
	`˛o£
(
h™dÀr
->
fd
);

310 
h™dÀr
->
fd
 = -1;

312 
	}
}

	@code/nl.h

23 #i‚de‡
__LXC_NL_H


24 
	#__LXC_NL_H


	)

28 
	~<°ddef.h
>

32 #i‚de‡
PAGE_SIZE


33 
	#PAGE_SIZE
 4096

	)

35 
	#NLMSG_GOOD_SIZE
 (2*
PAGE_SIZE
)

	)

36 
	#NLMSG_TAIL
(
nmsg
) \

37 ((
π©å
 *Ë(((*Ë(
nmsg
)Ë+ 
	`NLMSG_ALIGN
(“msg)->
∆msg_Àn
)))

	)

38 
	#NLA_DATA
(
«
Ë((*)((*)“aË+ 
NLA_HDRLEN
))

	)

39 
	#NLA_NEXT_ATTR
(
©å
Ë((*)((*ÔârË+ 
	`NLA_ALIGN
◊âr->
∆a_Àn
))

	)

51 
	s∆_h™dÀr
 {

52 
	mfd
;

53 
	m£q
;

54 
sockaddr_∆
 
	mloˇl
;

55 
sockaddr_∆
 
	m≥î
;

66 
	s∆msg
 {

67 
∆msghdr
 *
	m∆msghdr
;

68 
ssize_t
 
	mˇp
;

82 
√éök_›í
(
∆_h™dÀr
 *
h™dÀr
, 
¥Ÿocﬁ
);

92 
√éök_˛o£
(
∆_h™dÀr
 *
h™dÀr
);

104 
√éök_rcv
(
∆_h™dÀr
 *
h™dÀr
, 
∆msg
 *nlmsg);

115 
√éök_£nd
(
∆_h™dÀr
 *
h™dÀr
, 
∆msg
 *nlmsg);

128 
√éök_å™ß˘i⁄
(
∆_h™dÀr
 *
h™dÀr
,

129 
∆msg
 *
ªque°
, ∆msg *
™w£r
);

141 
∆a_put_°rög
(
∆msg
 *∆msg, 
©å
, c⁄° *
°rög
);

154 
∆a_put_buf„r
(
∆msg
 *∆msg, 
©å
,

155 c⁄° *
d©a
, 
size_t
 
size
);

166 
∆a_put_u32
(
∆msg
 *∆msg, 
©å
, 
vÆue
);

177 
∆a_put_u16
(
∆msg
 *∆msg, 
©å
, 
vÆue
);

187 
∆a_put_©å
(
∆msg
 *∆msg, 
©å
);

198 
π©å
 *
∆a_begö_√°ed
(
∆msg
 *∆msg, 
©å
);

208 
∆a_íd_√°ed
(
∆msg
 *∆msg, 
π©å
 *
©å
);

225 
∆msg
 *
∆msg_Æloc
(
size_t
 
size
);

234 
∆msg
 *
∆msg_Æloc_ª£rve
(
size_t
 
size
);

244 *
∆msg_ª£rve
(
∆msg
 *∆msg, 
size_t
 
Àn
);

251 
∆msg_‰ì
(
∆msg
 *nlmsg);

260 *
∆msg_d©a
(
∆msg
 *nlmsg);

	@get_eth0/interface.c

8 
	~<°dio.h
>

9 
	~<°rög.h
>

10 
	~<√t/if.h
>

11 
	~<sys/io˘l.h
>

12 
	~<¨∑/öë.h
>

13 
	~<î∫o.h
>

14 
	~<uni°d.h
>

15 
	~<°dlib.h
>

16 
	$gëLoˇlInfo
()

18 
fd
;

19 
öãrÁ˚Num
 = 0;

20 
i‰eq
 
buf
[16];

21 
ifc⁄f
 
ifc
;

22 
i‰eq
 
i‰c›y
;

23 
mac
[16] = {0};

24 
ù
[32] = {0};

25 
brﬂdAddr
[32] = {0};

26 
sub√tMask
[32] = {0};

28 i‡((
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0)

30 
	`≥º‹
("socket");

31 
	`˛o£
(
fd
);

35 
ifc
.
ifc_Àn
 = (
buf
);

36 
ifc
.
ifc_buf
 = (
ˇddr_t
)
buf
;

37 i‡(!
	`io˘l
(
fd
, 
SIOCGIFCONF
, (*)&
ifc
))

39 
öãrÁ˚Num
 = 
ifc
.
ifc_Àn
 / (
i‰eq
);

40 
	`¥ötf
("öãrÁ˚Çum = %d\n", 
öãrÁ˚Num
);

41 
öãrÁ˚Num
-- > 0)

43 
	`¥ötf
("\ndevi˚Çame: %s\n", 
buf
[
öãrÁ˚Num
].
i‰_«me
);

46 
i‰c›y
 = 
buf
[
öãrÁ˚Num
];

47 i‡(
	`io˘l
(
fd
, 
SIOCGIFFLAGS
, &
i‰c›y
))

49 
	`¥ötf
("io˘l: %†[%s:%d]\n", 
	`°ªº‹
(
î∫o
), 
__FILE__
, 
__LINE__
);

50 
	`˛o£
(
fd
);

55 i‡(!
	`io˘l
(
fd
, 
SIOCGIFHWADDR
, (*)(&
buf
[
öãrÁ˚Num
])))

57 
	`mem£t
(
mac
, 0, (mac));

58 
	`¢¥ötf
(
mac
, (mac), "%02x%02x%02x%02x%02x%02x",

59 ()
buf
[
öãrÁ˚Num
].
i‰_hwaddr
.
ß_d©a
[0],

60 ()
buf
[
öãrÁ˚Num
].
i‰_hwaddr
.
ß_d©a
[1],

61 ()
buf
[
öãrÁ˚Num
].
i‰_hwaddr
.
ß_d©a
[2],

62 ()
buf
[
öãrÁ˚Num
].
i‰_hwaddr
.
ß_d©a
[3],

63 ()
buf
[
öãrÁ˚Num
].
i‰_hwaddr
.
ß_d©a
[4],

64 ()
buf
[
öãrÁ˚Num
].
i‰_hwaddr
.
ß_d©a
[5]);

65 
	`¥ötf
("devi˚ mac: %s\n", 
mac
);

69 
	`¥ötf
("io˘l: %†[%s:%d]\n", 
	`°ªº‹
(
î∫o
), 
__FILE__
, 
__LINE__
);

70 
	`˛o£
(
fd
);

75 i‡(!
	`io˘l
(
fd
, 
SIOCGIFADDR
, (*)&
buf
[
öãrÁ˚Num
]))

77 
	`¢¥ötf
(
ù
, (ip), "%s",

78 (*)
	`öë_¡ﬂ
(((
sockaddr_ö
 *)&(
buf
[
öãrÁ˚Num
].
i‰_addr
))->
sö_addr
));

79 
	`¥ötf
("devi˚ ip: %s\n", 
ù
);

83 
	`¥ötf
("io˘l: %†[%s:%d]\n", 
	`°ªº‹
(
î∫o
), 
__FILE__
, 
__LINE__
);

84 
	`˛o£
(
fd
);

89 i‡(!
	`io˘l
(
fd
, 
SIOCGIFBRDADDR
, &
buf
[
öãrÁ˚Num
]))

91 
	`¢¥ötf
(
brﬂdAddr
, (broadAddr), "%s",

92 (*)
	`öë_¡ﬂ
(((
sockaddr_ö
 *)&(
buf
[
öãrÁ˚Num
].
i‰_brﬂdaddr
))->
sö_addr
));

93 
	`¥ötf
("devi˚ brﬂdAddr: %s\n", 
brﬂdAddr
);

97 
	`¥ötf
("io˘l: %†[%s:%d]\n", 
	`°ªº‹
(
î∫o
), 
__FILE__
, 
__LINE__
);

98 
	`˛o£
(
fd
);

103 i‡(!
	`io˘l
(
fd
, 
SIOCGIFNETMASK
, &
buf
[
öãrÁ˚Num
]))

105 
	`¢¥ötf
(
sub√tMask
, (subnetMask), "%s",

106 (*)
	`öë_¡ﬂ
(((
sockaddr_ö
 *)&(
buf
[
öãrÁ˚Num
].
i‰_√tmask
))->
sö_addr
));

107 
	`¥ötf
("devi˚ sub√tMask: %s\n", 
sub√tMask
);

111 
	`¥ötf
("io˘l: %†[%s:%d]\n", 
	`°ªº‹
(
î∫o
), 
__FILE__
, 
__LINE__
);

112 
	`˛o£
(
fd
);

119 
	`¥ötf
("io˘l: %†[%s:%d]\n", 
	`°ªº‹
(
î∫o
), 
__FILE__
, 
__LINE__
);

120 
	`˛o£
(
fd
);

124 
	`˛o£
(
fd
);

127 
	}
}

129 
	$gë_ëh0
()

131 
sockaddr_ö
 *
addr
;

132 
i‰eq
 
i‰
;

133 *
addªss
;

134 
sockfd
;

137 
	`mem£t
(&
i‰
, 0, (ifr));

138 
sockfd
 = 
	`sockë
(
AF_INET
,
SOCK_DGRAM
,0);

139 
	`°r˝y
(
i‰
.
i‰_«me
,"wlan0");

141 if(
	`io˘l
(
sockfd
,
SIOCGIFADDR
, &
i‰
) < 0) {

142 
	`≥º‹
("ioctlÉrror");

143 
	`exô
(1);

145 
addr
 = (
sockaddr_ö
 *)&(
i‰
.
i‰_addr
);

146 
addªss
 = 
	`öë_¡ﬂ
(
addr
->
sö_addr
);

147 
	`¥ötf
("öëáddr: %†",
addªss
);

149 
	}
}

150 
	$maö
()

152 
	`gëLoˇlInfo
();

153 
	`gë_ëh0
();

155 
	}
}

	@get_eth0/interface2.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<°dio.h
>

12 
	~<iÁddrs.h
>

13 
	~<¨∑/öë.h
>

14 
	$gëSub√tMask
()

16 
sockaddr_ö
 *
sö
 = 
NULL
;

17 
iÁddrs
 *
iÁ
 = 
NULL
, *
ifLi°
;

18 i‡(
	`gëiÁddrs
(&
ifLi°
) < 0)  -1;

19 
iÁ
 = 
ifLi°
; iÁ !
NULL
; iÁ = iÁ->
iÁ_√xt
)

21 if(
iÁ
->
iÁ_addr
->
ß_Ámûy
 =
AF_INET
)

23 
	`¥ötf
("\n>>> i¡îÁ˚Name: %s\n", 
iÁ
->
iÁ_«me
);

24 
sö
 = (
sockaddr_ö
 *)
iÁ
->
iÁ_addr
;

25 
	`¥ötf
(">>> ipAddªss: %s\n", 
	`öë_¡ﬂ
(
sö
->
sö_addr
));

26 
sö
 = (
sockaddr_ö
 *)
iÁ
->
iÁ_d°addr
;

27 
	`¥ötf
(">>> brﬂdˇ°: %s\n", 
	`öë_¡ﬂ
(
sö
->
sö_addr
));

28 
sö
 = (
sockaddr_ö
 *)
iÁ
->
iÁ_√tmask
;

29 
	`¥ötf
(">>> sub√tMask: %s\n", 
	`öë_¡ﬂ
(
sö
->
sö_addr
));

32 
	`‰ìiÁddrs
(
ifLi°
);

34 
	}
}

35 
	$maö
()

37 
	`gëSub√tMask
();

39 
	}
}

	@get_eth0/interface3.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<√t/if.h
>

12 
	~<sys/io˘l.h
>

13 
	~<¨∑/öë.h
>

14 
	~<î∫o.h
>

15 
	~<uni°d.h
>

16 * 
	$gë_loˇl_mac_by_«me
(c⁄° *
«me
)

18 
i‰eq
 ifreq;

19 
sock
;

20 * 
mac_addr
;

21 if((
sock
=
	`sockë
(
AF_INET
,
SOCK_STREAM
,0)) <0) {

22  
NULL
;

24 
	`°r˝y
(
i‰eq
.
i‰_«me
, 
«me
);

25 if(
	`io˘l
(
sock
,
SIOCGIFHWADDR
,&
i‰eq
) <0) {

26  
NULL
;

28 
mac_addr
 = (*)
	`ˇŒoc
(32, ());

29 if(
mac_addr
) {

30 
	`•rötf
(
mac_addr
, "%02X-%02X-%02X-%02X-%02X-%02X",

31 ()
i‰eq
.
i‰_hwaddr
.
ß_d©a
[0],

32 ()
i‰eq
.
i‰_hwaddr
.
ß_d©a
[1],

33 ()
i‰eq
.
i‰_hwaddr
.
ß_d©a
[2],

34 ()
i‰eq
.
i‰_hwaddr
.
ß_d©a
[3],

35 ()
i‰eq
.
i‰_hwaddr
.
ß_d©a
[4],

36 ()
i‰eq
.
i‰_hwaddr
.
ß_d©a
[5]);

38  
mac_addr
;

39 
	}
}

40 
	$maö
()

42 
buf
[218] = {0};

43 
FILE
 *
pf
 = 
	`p›í
("ifconfig -a", "r");

45 i‡(!
pf
){

46 
	`¥ötf
("popen failed\r\n");

50 
	`fgës
(
buf
, (buf), 
pf
Ë!
NULL
 ){

51 i‡(
	`°r°r
(
buf
, "LinkÉncap:Ethernet")){

52 
	`¥ötf
("buf=%s\r\n", 
buf
);

53 *
p

buf
;

54 
i
 = 0;

55  
i
=0; i < 
	`°æí
(
buf
); i++) {

56 i‡(
buf
[
i
] == ' ') {

57 
buf
[
i
] = '\0';

64 * 
«me
 = 
	`°rdup
(
buf
);

65 
	`¥ötf
("«mêi†%s\r\n", 
«me
);

66 * 
mac
 = 
	`gë_loˇl_mac_by_«me
(
«me
);

67 
	`¥ötf
("ma¯add = %s\r\n", 
mac
);

68 i‡(
mac
Ë
	`‰ì
(mac);

69 
	`‰ì
(
«me
);

70 
	`p˛o£
(
pf
);

72 
	}
}

	@get_interface/interface.c

8 
	~<löux/ty≥s.h
>

9 
	~<asm/ty≥s.h
>

10 
	~<öây≥s.h
>

11 
	~<sys/fûe.h
>

12 
	~<sys/u£r.h
>

13 
	~<sys/sockë.h
>

14 
	~<löux/√éök.h
>

15 
	~<löux/π√éök.h
>

16 
	~<löux/if.h
>

17 
	~<uni°d.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

20 
	~<°dio.h
>

21 
	~<°dboﬁ.h
>

22 
	~<î∫o.h
>

24 
uöt32_t
 
	tu32
;

25 
uöt16_t
 
	tu16
;

27 
	s∆sock
 {

28 
	msock
;

29 
	m£q
;

30 
sockaddr_∆
 
	m¢l
;

31 *
	m«me
;

32 } 
	g∆_cmd
 = { -1, 0, {0}, "netlink-cmd" };

34 
	gödex_oif
 = 0;

35 
	s∆_if_öfo
 {

36 
u32
 
	maddr
;

37 *
	m«me
;

39 
	$∆_sockë
 ( 
∆sock
 *
∆
, 
groups
 )

41 
ªt
;

42 
sockaddr_∆
 
¢l
;

43 
sock
;

44 
«mñí
;

46 
sock
 = 
	`sockë
 ( 
AF_NETLINK
, 
SOCK_RAW
, 
NETLINK_ROUTE
 );

47 i‡–
sock
 < 0 ) {

48 
	`Ârötf
 ( 
°dîr
, "C™'à›í %†sockë: %s", 
∆
->
«me
,

49 
	`°ªº‹
 ( 
î∫o
 ) );

53 
ªt
 = 
	`f˙é
 ( 
sock
, 
F_SETFL
, 
O_NONBLOCK
 );

54 i‡–
ªt
 < 0 ) {

55 
	`Ârötf
 ( 
°dîr
, "C™'à£à%†sockë fœgs: %s", 
∆
->
«me
,

56 
	`°ªº‹
 ( 
î∫o
 ) );

57 
	`˛o£
 ( 
sock
 );

61 
	`mem£t
 ( &
¢l
, 0,  snl );

62 
¢l
.
∆_Ámûy
 = 
AF_NETLINK
;

63 
¢l
.
∆_groups
 = 
groups
;

66 
ªt
 = 
	`böd
 ( 
sock
, ( 
sockaddr
 * ) &
¢l
,  snl );

67 i‡–
ªt
 < 0 ) {

68 
	`Ârötf
 ( 
°dîr
, "Can't bind %s socketÅo group 0x%x: %s",

69 
∆
->
«me
, 
¢l
.
∆_groups
, 
	`°ªº‹
 ( 
î∫o
 ) );

70 
	`˛o£
 ( 
sock
 );

75 
«mñí
 =  
¢l
;

76 
ªt
 = 
	`gësock«me
 ( 
sock
, ( 
sockaddr
 * ) &
¢l
, &
«mñí
 );

77 i‡–
ªt
 < 0 || 
«mñí
 ! 
¢l
 ) {

78 
	`Ârötf
 ( 
°dîr
, "C™'àgë %†sockëÇame: %s", 
∆
->
«me
,

79 
	`°ªº‹
 ( 
î∫o
 ) );

80 
	`˛o£
 ( 
sock
 );

84 
∆
->
¢l
 = snl;

85 
∆
->
sock
 = sock;

86  
ªt
;

87 
	}
}

89 
	$∆_ªque°
 ( 
Ámûy
, 
ty≥
, 
∆sock
 *
∆
 )

91 
ªt
;

92 
sockaddr_∆
 
¢l
;

95 
∆msghdr
 
∆h
;

96 
πgímsg
 
g
;

97 } 
ªq
;

101 i‡–
∆
->
sock
 < 0 ) {

102 
	`Ârötf
 ( 
°dîr
, "%†sockë i¢'àa˘ive.", 
∆
->
«me
 );

106 
	`mem£t
 ( &
¢l
, 0,  snl );

107 
¢l
.
∆_Ámûy
 = 
AF_NETLINK
;

109 
ªq
.
∆h
.
∆msg_Àn
 = Ñeq;

110 
ªq
.
∆h
.
∆msg_ty≥
 = 
ty≥
;

111 
ªq
.
∆h
.
∆msg_Êags
 = 
NLM_F_ROOT
 | 
NLM_F_MATCH
 | 
NLM_F_REQUEST
;

112 
ªq
.
∆h
.
∆msg_pid
 = 0;

113 
ªq
.
∆h
.
∆msg_£q
 = ++
∆
->
£q
;

114 
ªq
.
g
.
πgí_Ámûy
 = 
Ámûy
;

116 
ªt
 = 
	`£ndto
 ( 
∆
->
sock
, ( * ) &
ªq
, Ñeq, 0,

117 –
sockaddr
* ) &
¢l
,  snl );

118 i‡–
ªt
 < 0 ) {

119 
	`Ârötf
 ( 
°dîr
, "%†£ndtÿÁûed: %s", 
∆
->
«me
, 
	`°ªº‹
 ( 
î∫o
 ) );

123 
	}
}

131 
	$∆_∑r£_π©å
 ( 
π©å
 **
tb
, 
max
, π©å *
πa
, 
Àn
 )

133  
	`RTA_OK
 ( 
πa
, 
Àn
 ) ) {

134 i‡–
πa
->
πa_ty≥
 <
max
 )

135 
tb
[
πa
->
πa_ty≥
] =Ñta;

136 
πa
 = 
	`RTA_NEXT
 (Ñè,
Àn
 );

138 
	}
}

140 
	$∆_gë_oif
 ( 
sockaddr_∆
 *
¢l
, 
∆msghdr
 *
h
, *
¨g
 )

142 
Àn
;

143 
πmsg
 *
πm
;

144 
π©å
 *
tb
 [
RTA_MAX
 + 1];

145 
u_ch¨
 
Êags
 = 0;

147 
™yaddr
[16] = {0};

149 
ödex
;

150 
èbÀ
;

151 *
de°
;

152 *
g©e
;

154 
πm
 = 
	`NLMSG_DATA
 ( 
h
 );

156 i‡–
h
->
∆msg_ty≥
 !
RTM_NEWROUTE
 )

158 i‡–
πm
->
πm_ty≥
 !
RTN_UNICAST
 )

161 
èbÀ
 = 
πm
->
πm_èbÀ
;

163 
Àn
 = 
h
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
 (  ( 
πmsg
 ) );

164 i‡–
Àn
 < 0 )

167 
	`mem£t
 ( 
tb
, 0, Åb );

168 
	`∆_∑r£_π©å
 ( 
tb
, 
RTA_MAX
, 
	`RTM_RTA
 ( 
πm
 ), 
Àn
 );

170 i‡–
πm
->
πm_Êags
 & 
RTM_F_CLONED
 )

172 i‡–
πm
->
πm_¥Ÿocﬁ
 =
RTPROT_REDIRECT
 )

174 i‡–
πm
->
πm_¥Ÿocﬁ
 =
RTPROT_KERNEL
 )

177 i‡–
πm
->
πm_§c_Àn
 != 0 )

188 i‡–
tb
[
RTA_OIF
] ) {

189 
ödex
 = * ( * ) 
	`RTA_DATA
 ( 
tb
[
RTA_OIF
] );

192 i‡–
tb
[
RTA_DST
] )

193 
de°
 = 
	`RTA_DATA
 ( 
tb
[
RTA_DST
] );

195 
de°
 = 
™yaddr
;

198 i‡–
tb
[
RTA_GATEWAY
] )

199 
g©e
 = 
	`RTA_DATA
 ( 
tb
[
RTA_GATEWAY
] );

205 i‡–
de°
 =
™yaddr
 && 
g©e
 ) {

206 i‡–
¨g
 !
NULL
 ) {

207 * ( * ) 
¨g
 = 
ödex
;

212 
	}
}

214 
	$∆_gë_if_addr
 ( 
sockaddr_∆
 *
¢l
, 
∆msghdr
 *
h
, *
¨g
 )

216 
Àn
;

217 
iÁddrmsg
 *
iÁ
;

218 
π©å
 *
tb
 [
IFA_MAX
 + 1];

219 *
addr
 = 
NULL
;

220 *
brﬂd
 = 
NULL
;

221 
u_ch¨
 
Êags
 = 0;

222 *
œbñ
 = 
NULL
;

223 
u32
 
iÁ_addr
, 
iÁ_loˇl
;

224 
iÁ_œbñ
[
IFNAMSIZ
 + 1];

226 
iÁ
 = 
	`NLMSG_DATA
 ( 
h
 );

227 i‡–
iÁ
->
iÁ_Ámûy
 !
AF_INET
 )

230 i‡–
h
->
∆msg_ty≥
 !
RTM_NEWADDR
 && h->∆msg_ty≥ !
RTM_DELADDR
 )

233 
Àn
 = 
h
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
 (  ( 
iÁddrmsg
 ) );

234 i‡–
Àn
 < 0 )

237 
	`mem£t
 ( 
tb
, 0, Åb );

239 
	`∆_∑r£_π©å
 ( 
tb
, 
IFA_MAX
, 
	`IFA_RTA
 ( 
iÁ
 ), 
Àn
 );

241 i‡(
tb
[
IFA_ADDRESS
] =
NULL
)

242 
tb
[
IFA_ADDRESS
] =Åb[
IFA_LOCAL
];

244 i‡–
tb
[
IFA_ADDRESS
] )

245 
iÁ_addr
 = *(
u32
 *Ë
	`RTA_DATA
 ( 
tb
[
IFA_ADDRESS
] );

247 i‡–
tb
[
IFA_LOCAL
] )

248 
iÁ_loˇl
 = *(
u32
 *Ë
	`RTA_DATA
 ( 
tb
[
IFA_LOCAL
] );

250 i‡–
tb
[
IFA_LABEL
] )

251 
	`°∫˝y
–
iÁ_œbñ
, 
	`RTA_DATA
 ( 
tb
[
IFA_LABEL
] ), 
IFNAMSIZ
 );

255 
	`¥ötf
–"addr=%08xÜﬂl=%08xÇame=%s\r\n", 
iÁ_addr
, 
iÁ_loˇl
, 
iÁ_œbñ
 );

257 
	}
}

258 
	$∆_gë_lök
(
sockaddr_∆
 *
¢l
, 
∆msghdr
 *
h
, *
¨g
 )

260 
Àn
;

261 
iföfomsg
 *
iÁ
;

262 
π©å
 *
tb
[
IFA_MAX
 + 1];

263 *
addr
 = 
NULL
;

264 *
brﬂd
 = 
NULL
;

265 
u_ch¨
 
Êags
 = 0;

266 *
œbñ
 = 
NULL
;

267 
u32
 
iÁ_addr
, 
iÁ_loˇl
;

268 
iÁ_œbñ
[
IFNAMSIZ
 + 1];

270 
öãr_addr
[128] = {0};

271 
loˇl_addr
[128] = {0};

273 
iÁ
 = (
iföfomsg
 *)
	`NLMSG_DATA
(
h
);

274 i‡(
iÁ
->
ifi_Ámûy
 !
AF_UNSPEC
 ) {

275 
	`¥ötf
("faimilyÉrror\r\n");

279 
	`if_ödext⁄ame
(
iÁ
->
ifi_ödex
, 
iÁ_œbñ
);

280 
	`¥ötf
("«mêi†%s\r\n", 
iÁ_œbñ
);

282 i‡(
h
->
∆msg_ty≥
 !
RTM_NEWADDR
 && h->∆msg_ty≥ !
RTM_DELADDR
 )

285 
Àn
 = 
h
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
((
iföfomsg
));

286 i‡–
Àn
 < 0 )

290 
	`mem£t
(
tb
, 0, (tb));

292 
	`∆_∑r£_π©å
(
tb
, 
IFA_MAX
, 
	`IFA_RTA
(
iÁ
), 
Àn
 );

296 if(
tb
[
IFLA_IFNAME
])

297 
	`°∫˝y
(
iÁ_œbñ
, 
	`RTA_DATA
(
tb
[
IFLA_IFNAME
]), 
IFNAMSIZ
);

298 
	`¥ötf
("«mêi†%s\r\n", 
iÁ_œbñ
);

300 if(
tb
[
IFA_ADDRESS
] =
NULL
)

302 
tb
[
IFA_ADDRESS
] =Åb[
IFA_LOCAL
];

303 
	`¥ötf
("ifa_addres isÇull\r\n");

306 if(
tb
[
IFA_ADDRESS
])

307 
iÁ_addr
 = *(
u32
 *)
	`RTA_DATA
(
tb
[
IFA_ADDRESS
]);

310 if(
tb
[
IFA_LOCAL
])

311 
iÁ_loˇl
 = *(
u32
 *)
	`RTA_DATA
(
tb
[
IFA_LOCAL
]);

314 if(
tb
[
IFA_LABEL
])

315 
	`°∫˝y
(
iÁ_œbñ
, 
	`RTA_DATA
(
tb
[
IFA_LABEL
]), 
IFNAMSIZ
);

316 
	`π_addr_n2a
(
iÁ
->
iÁ_Ámûy
,

317 
	`RTA_PAYLOAD
(
tb
[
IFA_ADDRESS
]),

318 
	`RTA_DATA
(
tb
[
IFA_ADDRESS
]),

319 
öãr_addr
, (inter_addr));

321 
	`π_addr_n2a
(
iÁ
->
iÁ_Ámûy
,

322 
	`RTA_PAYLOAD
(
tb
[
IFA_LOCAL
]),

323 
	`RTA_DATA
(
tb
[
IFA_LOCAL
]),

324 
loˇl_addr
, (local_addr));

326 
	`¥ötf
("addr=%08xÜﬂl=%08xÇame=%†\r\n", 
iÁ_addr
, 
iÁ_loˇl
, 
iÁ_œbñ
);

327 
	`¥ötf
("addr=%s/%dÜﬂl=%†«me=%†\r\n", 
öãr_addr
, ()
iÁ
->
iÁ_¥efixÀn
, 
loˇl_addr
, 
iÁ_œbñ
);

329 
	`¥ötf
("end\r\n");

331 
	}
}

334 
	$maö
()

336 
ªt
;

337 
if_«me
[
PAGE_SIZE
];

338 *
p
;

339 
∆_if_öfo
 
if_öfo
 = { -1, "eth0" };

341 
ªt
 = 
	`∆_sockë
 ( &
∆_cmd
, 0 );

342 i‡–
ªt
 < 0 ) {

343  
ªt
;

346 
ªt
 = 
	`∆_ªque°
 ( 
AF_INET
, 
RTM_GETROUTE
, &
∆_cmd
 );

347 i‡–
ªt
 < 0 ) {

348  
ªt
;

350 
ªt
 = 
	`∆_∑r£_öfo
 ( 
∆_gë_oif
, &
∆_cmd
, &
ödex_oif
 );

351 i‡–
ªt
 < 0 )

352  
ªt
;

354 
	`¥ötf
 ( "oif=%08x /n", 
ödex_oif
 );

355 i‡–
ödex_oif
 > 0 ) {

356 
p
 = 
	`if_ödext⁄ame
 ( 
ödex_oif
, 
if_«me
 );

357 i‡–
p
 ) {

358 
	`¥ötf
 ( "öãrÁ˚=%s/n", 
p
 );

363 
ªt
 = 
	`∆_ªque°
 ( 
AF_INET
, 
RTM_GETADDR
, &
∆_cmd
 );

364 i‡–
ªt
 < 0 )

365  
ªt
;

367 
ªt
 = 
	`∆_∑r£_öfo
 ( 
∆_gë_if_addr
, &
∆_cmd
, &
if_öfo
 );

368 i‡–
ªt
 < 0 )

369  
ªt
;

371 
ªt
 = 
	`∆_ªque°
 ( 
AF_INET
, 
RTM_GETLINK
, &
∆_cmd
 );

372 i‡–
ªt
 < 0 )

373  
ªt
;

375 
ªt
 = 
	`∆_∑r£_öfo
 ( 
∆_gë_lök
, &
∆_cmd
, &
if_öfo
 );

376 i‡–
ªt
 < 0 )

377  
ªt
;

380 
	}
}

	@get_interface2/interface.c

8 
	~<°dio.h
>

9 
	~<°rög.h
>

10 
	~<√t/if.h
>

11 
	~<sys/io˘l.h
>

12 
	~<¨∑/öë.h
>

13 
	~<î∫o.h
>

14 
	~<uni°d.h
>

15 
	$gëLoˇlInfo
()

17 
fd
;

18 
öãrÁ˚Num
 = 0;

19 
i‰eq
 
buf
[16];

20 
ifc⁄f
 
ifc
;

21 
i‰eq
 
i‰c›y
;

22 
mac
[16] = {0};

23 
ù
[32] = {0};

24 
brﬂdAddr
[32] = {0};

25 
sub√tMask
[32] = {0};

27 i‡((
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0)

29 
	`≥º‹
("socket");

30 
	`˛o£
(
fd
);

34 
ifc
.
ifc_Àn
 = (
buf
);

35 
ifc
.
ifc_buf
 = (
ˇddr_t
)
buf
;

36 i‡(!
	`io˘l
(
fd
, 
SIOCGIFCONF
, (*)&
ifc
))

38 
öãrÁ˚Num
 = 
ifc
.
ifc_Àn
 / (
i‰eq
);

39 
	`¥ötf
("öãrÁ˚Çum = %d\n", 
öãrÁ˚Num
);

40 
öãrÁ˚Num
-- > 0)

42 
	`¥ötf
("\ndevi˚Çame: %s\n", 
buf
[
öãrÁ˚Num
].
i‰_«me
);

45 
i‰c›y
 = 
buf
[
öãrÁ˚Num
];

46 i‡(
	`io˘l
(
fd
, 
SIOCGIFFLAGS
, &
i‰c›y
))

48 
	`¥ötf
("io˘l: %†[%s:%d]\n", 
	`°ªº‹
(
î∫o
), 
__FILE__
, 
__LINE__
);

49 
	`˛o£
(
fd
);

54 i‡(!
	`io˘l
(
fd
, 
SIOCGIFHWADDR
, (*)(&
buf
[
öãrÁ˚Num
])))

56 
	`mem£t
(
mac
, 0, (mac));

57 
	`¢¥ötf
(
mac
, (mac), "%02x%02x%02x%02x%02x%02x",

58 ()
buf
[
öãrÁ˚Num
].
i‰_hwaddr
.
ß_d©a
[0],

59 ()
buf
[
öãrÁ˚Num
].
i‰_hwaddr
.
ß_d©a
[1],

60 ()
buf
[
öãrÁ˚Num
].
i‰_hwaddr
.
ß_d©a
[2],

61 ()
buf
[
öãrÁ˚Num
].
i‰_hwaddr
.
ß_d©a
[3],

62 ()
buf
[
öãrÁ˚Num
].
i‰_hwaddr
.
ß_d©a
[4],

63 ()
buf
[
öãrÁ˚Num
].
i‰_hwaddr
.
ß_d©a
[5]);

64 
	`¥ötf
("devi˚ mac: %s\n", 
mac
);

68 
	`¥ötf
("io˘l: %†[%s:%d]\n", 
	`°ªº‹
(
î∫o
), 
__FILE__
, 
__LINE__
);

69 
	`˛o£
(
fd
);

74 i‡(!
	`io˘l
(
fd
, 
SIOCGIFADDR
, (*)&
buf
[
öãrÁ˚Num
]))

76 
	`¢¥ötf
(
ù
, (ip), "%s",

77 (*)
	`öë_¡ﬂ
(((
sockaddr_ö
 *)&(
buf
[
öãrÁ˚Num
].
i‰_addr
))->
sö_addr
));

78 
	`¥ötf
("devi˚ ip: %s\n", 
ù
);

82 
	`¥ötf
("io˘l: %†[%s:%d]\n", 
	`°ªº‹
(
î∫o
), 
__FILE__
, 
__LINE__
);

83 
	`˛o£
(
fd
);

88 i‡(!
	`io˘l
(
fd
, 
SIOCGIFBRDADDR
, &
buf
[
öãrÁ˚Num
]))

90 
	`¢¥ötf
(
brﬂdAddr
, (broadAddr), "%s",

91 (*)
	`öë_¡ﬂ
(((
sockaddr_ö
 *)&(
buf
[
öãrÁ˚Num
].
i‰_brﬂdaddr
))->
sö_addr
));

92 
	`¥ötf
("devi˚ brﬂdAddr: %s\n", 
brﬂdAddr
);

96 
	`¥ötf
("io˘l: %†[%s:%d]\n", 
	`°ªº‹
(
î∫o
), 
__FILE__
, 
__LINE__
);

97 
	`˛o£
(
fd
);

102 i‡(!
	`io˘l
(
fd
, 
SIOCGIFNETMASK
, &
buf
[
öãrÁ˚Num
]))

104 
	`¢¥ötf
(
sub√tMask
, (subnetMask), "%s",

105 (*)
	`öë_¡ﬂ
(((
sockaddr_ö
 *)&(
buf
[
öãrÁ˚Num
].
i‰_√tmask
))->
sö_addr
));

106 
	`¥ötf
("devi˚ sub√tMask: %s\n", 
sub√tMask
);

110 
	`¥ötf
("io˘l: %†[%s:%d]\n", 
	`°ªº‹
(
î∫o
), 
__FILE__
, 
__LINE__
);

111 
	`˛o£
(
fd
);

118 
	`¥ötf
("io˘l: %†[%s:%d]\n", 
	`°ªº‹
(
î∫o
), 
__FILE__
, 
__LINE__
);

119 
	`˛o£
(
fd
);

123 
	`˛o£
(
fd
);

126 
	}
}

128 
	$maö
()

130 
	`gëLoˇlInfo
();

133 
	}
}

	@get_interface3/getinterface.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<°dlib.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<√töë/ö.h
>

14 
	~<√tdb.h
>

15 
	~<î∫o.h
>

16 
	~<uni°d.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 *
	$gëho°«me_a
(){

22 *
«me
;

23 
r
, 
Àn
 = 128;

25 
«me
 = (*)
	`mÆloc
(
Àn
);

26 (
r
 = 
	`gëho°«me
(
«me
, 
Àn
)) < 0){

27 if(
î∫o
 =
ENAMETOOLONG
){

28 
Àn
 *= 2;

29 
«me
 = (*)
	`ªÆloc
“ame, 
Àn
);

36 if(
r
 < 0)

37  
NULL
;

39  
«me
;

40 
	}
}

42 
	$gëho°addr
(){

43 
i
 = 0;

44 *
ho°«me
;

45 
ho°ít
 *
ho°öfo
;

48 * 
∑ddr
;

49 
ho°«me
 = 
	`gëho°«me_a
();

50 
	`¥ötf
("ho°Çamêi†%s\r\n", 
ho°«me
);

51 
ho°öfo
 = 
	`gëho°by«me
 (
ho°«me
);

52 
	`¥ötf
("num i†%d\r\n", 
ho°öfo
->
h_Àngth
);

53 
	`¥ötf
("addªs†i†%d\r\n", *(*Ë
ho°öfo
->
h_addr
);

54 
	`¥ötf
("ho°Çamêi†%s\r\n", 
ho°öfo
->
h_«me
);

55 
∑ddr
 = 
ho°öfo
->
h_addr
;

56 
∑ddr
)

58 
	`¥ötf
("IPAddªss:%s\r\n", 
	`öë_¡ﬂ
(*((
ö_addr
*)
∑ddr
)));

59 
∑ddr
 = 
ho°öfo
->
h_addr_li°
[++
i
];

62 
	}
}

64 
	$maö
()

66 
	`gëho°addr
();

68 
	}
}

	@get_interface3/libtc/config.h

8 
	#HAVE_ALLOCA_H
 1

	)

11 
	#HAVE_DLFCN_H
 1

	)

14 
	#HAVE_INTTYPES_H
 1

	)

23 
	#HAVE_MEMORY_H
 1

	)

26 
	#HAVE_SNPRINTF
 1

	)

29 
	#HAVE_STDARG_H
 1

	)

32 
	#HAVE_STDINT_H
 1

	)

35 
	#HAVE_STDLIB_H
 1

	)

38 
	#HAVE_STRDUPA
 1

	)

41 
	#HAVE_STRINGS_H
 1

	)

44 
	#HAVE_STRING_H
 1

	)

47 
	#HAVE_STRSEP
 1

	)

50 
	#HAVE_SYS_STAT_H
 1

	)

53 
	#HAVE_SYS_TYPES_H
 1

	)

56 
	#HAVE_UNISTD_H
 1

	)

59 
	#PACKAGE
 "libtc"

	)

62 
	#PACKAGE_BUGREPORT
 ""

	)

65 
	#PACKAGE_NAME
 "libtc"

	)

68 
	#PACKAGE_STRING
 "libt¯1.1.0"

	)

71 
	#PACKAGE_TARNAME
 "libtc"

	)

74 
	#PACKAGE_URL
 ""

	)

77 
	#PACKAGE_VERSION
 "1.1.0"

	)

80 
	#SIZEOF_CHAR
 1

	)

83 
	#SIZEOF_INT
 4

	)

86 
	#SIZEOF_LONG
 8

	)

89 
	#SIZEOF_LONG_LONG
 8

	)

92 
	#SIZEOF_SHORT
 2

	)

95 
	#STDC_HEADERS
 1

	)

98 
	#VERSION
 "1.1.0"

	)

102 #i‡
deföed
 
AC_APPLE_UNIVERSAL_BUILD


103 #i‡
deföed
 
__BIG_ENDIAN__


104 
	#WORDS_BIGENDIAN
 1

	)

107 #i‚de‡
WORDS_BIGENDIAN


114 
	#YYTEXT_POINTER
 1

	)

118 #i‚de‡
__˝lu•lus


	@get_interface3/libtc/include/tc.h

25 #i‚de‡
_TC_H


26 
	#_TC_H


	)

28 
	#TC_LOCK_NONE
 0

	)

29 
	#TC_LOCK_SLOPPY
 1

	)

30 
	#TC_LOCK_STRICT
 2

	)

	@get_interface3/libtc/include/tcalloc.h

25 #i‚de‡
_TCALLOC_H


26 
	#_TCALLOC_H


	)

28 
	~<t˘y≥s.h
>

30 #ifde‡
__˝lu•lus


34 (*
tc_ªf_‚
)(*);

35 *(*
	ttˇâr_ªf_t
)(*);

37 
	stˇâr
 {

38 *
«me
;

39 *
vÆue
;

40 } 
	ttˇâr_t
;

42 *
tˇŒoc
(
size_t
);

43 *
tˇŒocd
(
size_t
, 
tc_ªf_‚
, 
tc‰ì_‚
);

44 *
tˇŒocz
(
size_t
);

45 *
tˇŒocdz
(
size_t
, 
tc_ªf_‚
, 
tc‰ì_‚
);

46 *
t¸ef
(*);

47 
tc‰ì
(*);

49 
tˇâr_£t
(*
p
, *
«me
, *
vÆ
,

50 
tˇâr_ªf_t
 
r
, 
tc‰ì_‚
 
f
);

51 *
tˇâr_gë
(*
p
, *
«me
);

52 
tˇâr_gëÆl
(*
±r
, 
n
, 
tˇâr_t
 *
©å
);

53 
tˇâr_dñ
(*
p
, *
«me
);

55 #ifde‡
__˝lu•lus


	@get_interface3/libtc/include/tcbyteswap.h

25 #i‚de‡
_TCBYTESWAP_H


26 
	#_TCBYTESWAP_H


	)

29 
	~<t˚ndün.h
>

	@get_interface3/libtc/include/tcconf.h

25 #i‚de‡
_TCCONF_H


26 
	#_TCCONF_H


	)

28 
	~<°dio.h
>

29 
	~<t˘y≥s.h
>

31 #ifde‡
__˝lu•lus


35 
tcc⁄f_£˘i⁄
 
	ttcc⁄f_£˘i⁄_t
;

37 
tcc⁄f_£˘i⁄_t
 *
tcc⁄f_lﬂd
—cc⁄f_£˘i⁄_à*, *, 
tcio_‚
);

38 
tcc⁄f_£˘i⁄_t
 *
tcc⁄f_lﬂd_fûe
—cc⁄f_£˘i⁄_à*, *
fûe
);

39 
tcc⁄f_£˘i⁄_t
 *
tcc⁄f_lﬂd_°rög
—cc⁄f_£˘i⁄_à*
£c
,

40 c⁄° *
c⁄f
, 
size
);

41 
tcc⁄f_wrôe
(
tcc⁄f_£˘i⁄_t
 *
tcc
, *
fûe
, 
tcio_‚
);

42 
tcc⁄f_£˘i⁄_t
 *
tcc⁄f_gë£˘i⁄
—cc⁄f_£˘i⁄_à*
£c
, *
«me
);

43 
tcc⁄f_gëvÆue
(
tcc⁄f_£˘i⁄_t
 *
£c
, *
«me
, *
fmt
, ...);

44 
tcc⁄f_£tvÆue
(
tcc⁄f_£˘i⁄_t
 *
£c
, *
«me
, *
fmt
, ...);

45 
tcc⁄f_£˘i⁄_t
 *
tcc⁄f_√w
(*
«me
);

46 
tcc⁄f_˛órvÆue
(
tcc⁄f_£˘i⁄_t
 *
£c
, *
«me
);

47 
tcc⁄f_√xtvÆue
(
tcc⁄f_£˘i⁄_t
 *
£c
, *
«me
, **
°©e
,

48 *
fmt
, ...);

49 
tcc⁄f_√xtvÆue_g
(
tcc⁄f_£˘i⁄_t
 *
£c
, *
glob
, **
°©e
,

50 **
«me
, *
fmt
, ...);

51 
tcc⁄f_£˘i⁄_t
 *
tcc⁄f_√xt£˘i⁄
—cc⁄f_£˘i⁄_à*
£c
, *
«me
,

52 **
°©e
);

53 
tcc⁄f_£˘i⁄_t
 *
tcc⁄f_mîge
—cc⁄f_£˘i⁄_à*
d°
,

54 
tcc⁄f_£˘i⁄_t
 *
§c
);

56 #ifde‡
__˝lu•lus


	@get_interface3/libtc/include/tcdirent.h

25 #i‚de‡
_TCDIRENT_H


26 
	#_TCDIRENT_H


	)

28 
	~<dúít.h
>

30 
tcmk∑th
(*
∑th
, 
mode
);

31 *
t˝©h_föd
(*
«me
, *
∑th
, 
how
);

	@get_interface3/libtc/include/tcendian.h

25 #i‚de‡
_TCENDIAN_H


26 
	#_TCENDIAN_H


	)

28 
	#TCENDIAN_LITTLE
 1

	)

29 
	#TCENDIAN_BIG
 2

	)

31 
	~<byãsw≠.h
>

32 
	#TCENDIAN
 
TCENDIAN_LITTLE


	)

34 
	#htﬁ_16
(
x
Ë(x)

	)

35 
	#htﬁ_32
(
x
Ë(x)

	)

36 
	#htﬁ_64
(
x
Ë(x)

	)

38 
	#htob_16
(
x
Ë(
	`bsw≠_16
(x))

	)

39 
	#htob_32
(
x
Ë(
	`bsw≠_32
(x))

	)

40 
	#htob_64
(
x
Ë(
	`bsw≠_64
(x))

	)

	@get_interface3/libtc/include/tchash.h

25 #i‚de‡
_TCHASH_H


26 
	#_TCHASH_H


	)

28 
	~<t˘y≥s.h
>

29 
	~<tc.h
>

31 #ifde‡
__˝lu•lus


35 
tchash_èbÀ
 
	ttchash_èbÀ_t
;

36 
u_öt
 (*
	ttchash_fun˘i⁄_t
)(*
	tkey
, 
	tsize_t
 
	tsize
);

39 
	#TCHASH_FROZEN
 0x01

	)

40 
	#TCHASH_NOCOPY
 0x02

	)

44 
tchash_èbÀ_t
 *
tchash_√w
(
size
, 
lock
, 
uöt32_t
 
Êags
);

49 
tchash_£¨ch
(
tchash_èbÀ_t
 *
ht
, *
key
, 
size_t
 
ks
,

50 *
d©a
, *
ªt
);

54 
tchash_föd
(
tchash_èbÀ_t
 *
ht
, *
key
, 
size_t
 
ks
, *
ªt
);

58 
tchash_ª∂a˚
(
tchash_èbÀ_t
 *
ht
, *
key
, 
size_t
 
ks
,

59 *
d©a
, *
ªt
);

63 
tchash_dñëe
(
tchash_èbÀ_t
 *
ht
, *
key
, 
size_t
 
ks
, *
ªt
);

66 
tchash_de°roy
(
tchash_èbÀ_t
 *
ht
, 
tc‰ì_‚
 
hf
);

69 
tchash_ªhash
(
tchash_èbÀ_t
 *
ht
);

75 **
tchash_keys
(
tchash_èbÀ_t
 *
ht
, *
íåõs
, 
Á°
);

77 
tchash_£thashfun˘i⁄
(
tchash_èbÀ_t
 *
ht
, 
tchash_fun˘i⁄_t
 
hf
);

78 
tchash_£âhªshﬁds
(
tchash_èbÀ_t
 *
ht
, 
low
, 
high
);

80 
tchash_gëÊags
(
tchash_èbÀ_t
 *
ht
);

81 
tchash_£tÊags
(
tchash_èbÀ_t
 *
ht
, 
Êags
);

82 
tchash_£tÊag
(
tchash_èbÀ_t
 *
ht
, 
Êag
);

83 
tchash_˛órÊag
(
tchash_èbÀ_t
 *
ht
, 
Êag
);

85 #ifde‡
TCHASH_OLDAPI


86 
	#tchash_√w
(
s
, 
f
Ë
	`tchash_√w
(s, 
TC_LOCK_STRICT
, f)

	)

87 
	#tchash_£¨ch
(
h
, 
k
, 
d
, 
r
Ë
	`tchash_£¨ch
(h, k, -1, d,Ñ)

	)

88 
	#tchash_föd
(
h
, 
k
, 
r
Ë
	`tchash_föd
(h, k, -1,Ñ)

	)

89 
	#tchash_ª∂a˚
(
h
, 
k
, 
d
Ë
	`tchash_ª∂a˚
(h, k, -1, d, 
NULL
)

	)

90 
	#tchash_dñëe
(
h
, 
k
, 
r
Ë
	`tchash_dñëe
(h, k, -1,Ñ)

	)

93 #ifde‡
__˝lu•lus


	@get_interface3/libtc/include/tclist.h

25 #i‚de‡
_TCLIST_H


26 
	#_TCLIST_H


	)

28 
	~<°dlib.h
>

29 
	~<t˘y≥s.h
>

30 
	~<tc.h
>

32 #ifde‡
__˝lu•lus


36 
t˛i°_ôem
 
	tt˛i°_ôem_t
;

37 
t˛i°
 
	tt˛i°_t
;

41 
t˛i°_t
 *
t˛i°_√w
(
lockög
);

44 
t˛i°_‰ì
(
t˛i°_t
 *);

47 
t˛i°_de°roy
(
t˛i°_t
 *
l°
, 
tc‰ì_‚
 
l‰ì
);

50 
t˛i°_ªmove
(
t˛i°_t
 *
l°
, 
t˛i°_ôem_t
 *
l
, 
tc‰ì_‚
 
‰
);

53 
t˛i°_push
(
t˛i°_t
 *
l°
, *
p
);

56 
t˛i°_unshi·
(
t˛i°_t
 *
l°
, *
p
);

59 *
t˛i°_shi·
(
t˛i°_t
 *
l°
);

62 *
t˛i°_p›
(
t˛i°_t
 *
l°
);

66 
t˛i°_föd
(
t˛i°_t
 *
l°
, *
p
, *
ªt
, 
tccom∑ª_‚
 
cmp
);

70 
t˛i°_£¨ch
(
t˛i°_t
 *
l°
, *
p
, *
ªt
, 
tccom∑ª_‚
 
cmp
);

73 
t˛i°_dñëe
(
t˛i°_t
 *
l°
, *
p
, 
tccom∑ª_‚
 
cmp
, 
tc‰ì_‚
);

76 
t˛i°_dñëe_m©ched
(
t˛i°_t
 *
l°
, *
p
, 
tccom∑ª_‚
 
cmp
,

77 
tc‰ì_‚
);

79 *
t˛i°_√xt
(
t˛i°_t
 *
l°
, 
t˛i°_ôem_t
 **
l
);

80 *
t˛i°_√xt_m©ched
(
t˛i°_t
 *
l°
, 
t˛i°_ôem_t
 **
l
,

81 *
key
, 
tccom∑ª_‚
 
cmp
);

83 *
t˛i°_¥ev
(
t˛i°_t
 *
l°
, 
t˛i°_ôem_t
 **
l
);

84 *
t˛i°_¥ev_m©ched
(
t˛i°_t
 *
l°
, 
t˛i°_ôem_t
 **
l
,

85 *
key
, 
tccom∑ª_‚
 
cmp
);

88 
t˛i°_u∆ock
(
t˛i°_t
 *
l°
, 
t˛i°_ôem_t
 *
l
);

91 
t˛i°_ôems
(
t˛i°_t
 *
l°
);

93 
t˛i°_isfú°
(
t˛i°_t
 *
l°
, 
t˛i°_ôem_t
 *
li
);

95 
t˛i°_i¶a°
(
t˛i°_t
 *
l°
, 
t˛i°_ôem_t
 *
li
);

97 *
t˛i°_hód
(
t˛i°_t
 *
l°
);

98 *
t˛i°_èû
(
t˛i°_t
 *
l°
);

100 #ifde‡
__˝lu•lus


	@get_interface3/libtc/include/tcmath.h

25 #i‚de‡
_TCMATH_H


26 
	#_TCMATH_H


	)

28 #ifde‡
__˝lu•lus


32 
	stc‰a˘i⁄
 {

33 
num
, 
dí
;

34 } 
	ttc‰a˘i⁄_t
;

36 
t¸edu˚
(
tc‰a˘i⁄_t
 *);

38 #ifde‡
__˝lu•lus


	@get_interface3/libtc/include/tcmempool.h

25 #i‚de‡
_TCMEMPOOL_H


26 
	#_TCMEMPOOL_H


	)

28 #ifde‡
__˝lu•lus


32 
tcmempoﬁ
 
	ttcmempoﬁ_t
;

34 
tcmempoﬁ_t
 *
tcmempoﬁ_√w
(
size_t
 
size
, 
lock
);

35 *
tcmempoﬁ_gë
(
tcmempoﬁ_t
 *
mp
);

36 
tcmempoﬁ_‰ì
(*
p
);

38 #ifde‡
__˝lu•lus


	@get_interface3/libtc/include/tcnet.h

25 #i‚de‡
_TCNET_H


26 
	#_TCNET_H


	)

28 #ifde‡
__˝lu•lus


32 *
gëho°«me_a
();

33 
gëho°addr
();

35 #ifde‡
__˝lu•lus


	@get_interface3/libtc/include/tcprioq.h

25 #i‚de‡
_TCPRIOQ_H


26 
	#_TCPRIOQ_H


	)

28 
	~<tc.h
>

29 
	~<t˘y≥s.h
>

31 #ifde‡
__˝lu•lus


35 
t˝rioq
 
	tt˝rioq_t
;

37 
t˝rioq_t
 *
t˝rioq_√w
(
size
, 
lock
, 
tccom∑ª_‚
 
cmp
);

38 
t˝rioq_add
(
t˝rioq_t
 *
pq
, *
d©a
);

39 
t˝rioq_gë
(
t˝rioq_t
 *
pq
, **
ªt
);

40 
t˝rioq_ôems
(
t˝rioq_t
 *
pq
);

41 
t˝rioq_‰ì
(
t˝rioq_t
 *
pq
);

43 #ifde‡
__˝lu•lus


	@get_interface3/libtc/include/tcstring.h

25 #i‚def 
_TCSTRING_H


26 
	#_TCSTRING_H
 1

	)

29 #i‚de‡
_REENTRANT


30 
	#_REENTRANT


	)

33 
	~<°dlib.h
>

34 
	~<°d¨g.h
>

36 #i‚de‡
_GNU_SOURCE


37 
	#_GNU_SOURCE


	)

40 
	~<°rög.h
>

43 #i‚de‡
°rdu∑


44 #ifde‡
__GNUC__


45 
	#°rdu∑
(
s
) \

47 c⁄° *
__ﬁd
 = (
s
); \

48 
size_t
 
__Àn
 = 
	`°æí
(
__ﬁd
) + 1; \

49 *
__√w
 = 
	`Æloˇ
(
__Àn
); \

50 (*Ë
	`mem˝y
(
__√w
, 
__ﬁd
, 
__Àn
); \

51 })

	)

55 
tc°ªsc
(*
d°
, c⁄° *
§c
);

57 *
tc°ªxp
(c⁄° *
§c
, c⁄° *
sd
, c⁄° *
ed
,

58 
fs
, *(*
lookup
)(*, *), *
ld
,

59 
Êags
);

61 
	#TCSTREXP_ESCAPE
 0x1

	)

62 
	#TCSTREXP_FREE
 0x2

	)

63 
	#TCSTREXP_KEEPUNDEF
 0x4

	)

65 *
t¸egsub
(c⁄° *
°r
, c⁄° *
∑t
,

66 c⁄° *
sub
, 
Êags
);

	@get_interface3/libtc/include/tctime.h

25 #i‚de‡
_TCTIME_H


26 
	#_TCTIME_H


	)

28 
	~<time.h
>

29 
	~<sys/time.h
>

31 #ifde‡
__˝lu•lus


35 *
°πŸime
(*
time
, 
tm
 *tm, **
fmts
);

37 #ifde‡
__˝lu•lus


	@get_interface3/libtc/include/tctree.h

25 #i‚de‡
_TCTREE_H


26 
	#_TCTREE_H


	)

28 
	~<tc.h
>

29 
	~<t˘y≥s.h
>

31 #ifde‡
__˝lu•lus


35 
t˘ªe
 
	tt˘ªe_t
;

37 
t˘ªe_t
 *
t˘ªe_√w
(
lockög
, 
tccom∑ª_‚
 
cmp
, 
uöt32_t
 
Êags
);

38 
t˘ªe_föd
(
t˘ªe_t
 *
t
, *
key
, *
ªt
);

39 
t˘ªe_£¨ch
(
t˘ªe_t
 *
t
, *
key
, *
ªt
);

40 
t˘ªe_ª∂a˚
(
t˘ªe_t
 *
t
, *
key
, *
ªt
);

41 
t˘ªe_dñëe
(
t˘ªe_t
 *
t
, *
key
, *
ªt
);

42 
t˘ªe_de°roy
(
t˘ªe_t
 *
t
, 
tc‰ì_‚
 
f
);

44 #ifde‡
__˝lu•lus


	@get_interface3/libtc/include/tctypes.h

25 #i‚de‡
_TCTYPES_H


26 
	#_TCTYPES_H


	)

28 
	~<sys/ty≥s.h
>

29 
	~<°döt.h
>

40 #ifde‡
__GNUC__


41 
	#_u«lig√d
(
s
) \

42 
_u«lig√d
##
s
 { \

43 
uöt
##
s
##
_t
 
i
; \

44 } 
	`__©åibuã__
((
∑cked
)); \

46 
ölöe
 
uöt
##
s
##
_t
 \

47 
u«lig√d
##
	`s
(c⁄° *
v
){ \

48  ((c⁄° 
_u«lig√d
##
s
 *Ë
v
)->
i
; \

51 
ölöe
 \

52 
°_u«lig√d
##
	`s
(
uöt
##
s
##
_t
 
v
, *
d
) \

54 ((
_u«lig√d
##
s
 *Ë
d
)->
i
 = 
v
; \

55 }

	)

57 
	~<°rög.h
>

58 
	#_u«lig√d
(
s
) \

59 
ölöe
 
uöt
##
s
##
_t
 \

60 
u«lig√d
##
	`s
(c⁄° *
v
){ \

61 
uöt
##
s
##
_t
 
i
; \

62 
	`mem˝y
(&
i
, 
v
, (i)); \

63  
i
; \

66 
ölöe
 \

67 
°_u«lig√d
##
	`s
(
uöt
##
s
##
_t
 
v
, *
d
){ \

68 
	`mem˝y
(
d
, &
v
, (v)); \

69 }

	)

72 
	$_u«lig√d
(16)

73 
	$_u«lig√d
(32)

74 
	$_u«lig√d
(64)

76 (*
	ttccom∑ª_‚
) (const *, const *);

77 (*
	ttc‰ì_‚
) (*);

78 
	$size_t
 (*
	ttcio_‚
)(*, 
	tsize_t
, size_t, *);

	@get_interface3/libtc/src/alloc.c

25 
	~<tˇŒoc.h
>

26 
	~<°dlib.h
>

27 
	~<°ddef.h
>

28 
	~<°rög.h
>

30 
	stˇâri
 {

31 *
	m«me
;

32 *
	mvÆue
;

33 
tˇâr_ªf_t
 
	mªf
;

34 
tc‰ì_‚
 
	m‰ì
;

35 
tˇâri
 *
	m√xt
;

36 } 
	ttˇâri_t
;

38 
	stˇŒoc
 {

39 
	mrc
;

40 
tc_ªf_‚
 
	mªf
;

41 
tc‰ì_‚
 
	m‰ì
;

42 
tˇâri_t
 *
	m©å
;

44 
	ml
;

45 
	md
;

46 *
	mp
;

47 } 
	md©a
[1];

48 } 
	ttˇŒoc_t
;

50 
tˇâr_‰ì
(
tˇâri_t
 *
a
);

53 
	$tˇŒocd
(
size_t
 
size
, 
tc_ªf_‚
 
r
, 
tc‰ì_‚
 
f
)

55 
tˇŒoc_t
 *
tˇ
 = 
	`mÆloc
(
size
 + —ˇŒoc_tË- —ˇ->
d©a
));

56 
tˇ
->
rc
 = 1;

57 
tˇ
->
ªf
 = 
r
;

58 
tˇ
->
‰ì
 = 
f
;

59 
tˇ
->
©å
 = 
NULL
;

60  
tˇ
->
d©a
;

61 
	}
}

64 
	$tˇŒocdz
(
size_t
 
size
, 
tc_ªf_‚
 
r
, 
tc‰ì_‚
 
f
)

66 *
p
 = 
	`tˇŒocd
(
size
, 
r
, 
f
);

67 if(
p
)

68 
	`mem£t
(
p
, 0, 
size
);

69  
p
;

70 
	}
}

73 
	$tˇŒoc
(
size_t
 
size
)

75  
	`tˇŒocd
(
size
, 
NULL
, NULL);

76 
	}
}

79 
	$tˇŒocz
(
size_t
 
size
)

81  
	`tˇŒocdz
(
size
, 
NULL
, NULL);

82 
	}
}

85 
	$t¸ef
(*
±r
)

87 
tˇŒoc_t
 *
tˇ
 = (tˇŒoc_à*)((*Ë
±r
 - 
	`off£tof
—ˇŒoc_t, 
d©a
));

88 
tˇ
->
rc
++;

89 if(
tˇ
->
ªf
)

90 
tˇ
->
	`ªf
—ˇ->
d©a
);

91  
±r
;

92 
	}
}

95 
	$tc‰ì
(*
±r
)

97 
tˇŒoc_t
 *
tˇ
;

99 if(!
±r
)

102 
tˇ
 = (
tˇŒoc_t
 *)((*Ë
±r
 - 
	`off£tof
—ˇŒoc_t, 
d©a
));

103 
tˇ
->
rc
--;

104 if(!
tˇ
->
rc
){

105 
tˇâri_t
 *
a
;

107 if(
tˇ
->
‰ì
)

108 
tˇ
->
	`‰ì
—ˇ->
d©a
);

109 
a
 = 
tˇ
->
©å
;á;){

110 
tˇâri_t
 *
n
 = 
a
->
√xt
;

111 
	`tˇâr_‰ì
(
a
);

112 
a
 = 
n
;

114 
	`‰ì
(
tˇ
);

116 
	}
}

119 
	$tˇâr_‰ì
(
tˇâri_t
 *
a
)

121 
	`‰ì
(
a
->
«me
);

122 if(
a
->
‰ì
)

123 
a
->
	`‰ì
◊->
vÆue
);

124 
	`‰ì
(
a
);

125 
	}
}

128 
	$tˇâr_£t
(*
±r
, *
«me
, *
vÆ
, 
tˇâr_ªf_t
 
r
, 
tc‰ì_‚
 
f
)

130 
tˇŒoc_t
 *
tˇ
 = (tˇŒoc_à*)((*Ë
±r
 - 
	`off£tof
—ˇŒoc_t, 
d©a
));

131 
tˇâri_t
 *
a
, *
n
, *
p
 = 
NULL
;

133 
a
 = 
tˇ
->
©å
;á &&á->
√xt
 && 
	`°rcmp
(
«me
,á->name);á =á->next)

134 
p
 = 
a
;

136 
n
 = 
	`ˇŒoc
(1, (*n));

137 
n
->
«me
 = 
	`°rdup
(name);

138 
n
->
vÆue
 = 
vÆ
;

139 
n
->
ªf
 = 
r
;

140 
n
->
‰ì
 = 
f
;

142 if(!
a
){

143 
tˇ
->
©å
 = 
n
;

144 } if(
	`°rcmp
(
«me
, 
a
->name)){

145 
a
->
√xt
 = 
n
;

147 
n
->
√xt
 = 
a
->next;

148 if(
p
)

149 
p
->
√xt
 = 
n
;

151 
tˇ
->
©å
 = 
n
;

152 
	`tˇâr_‰ì
(
a
);

156 
	}
}

159 
	$tˇâr_gë
(*
p
, *
«me
)

161 
tˇŒoc_t
 *
tˇ
 = (tˇŒoc_à*)((*Ë
p
 - 
	`off£tof
—ˇŒoc_t, 
d©a
));

162 
tˇâri_t
 *
a
;

163 *
v
 = 
NULL
;

165 
a
 = 
tˇ
->
©å
;á && 
	`°rcmp
(
«me
,á->«me);á =á->
√xt
);

167 if(
a
)

168 
v
 = 
a
->
ªf
?á->
	`ªf
◊->
vÆue
):á->value;

170  
v
;

171 
	}
}

174 
	$tˇâr_gëÆl
(*
p
, 
n
, 
tˇâr_t
 *
©å
)

176 
tˇŒoc_t
 *
tˇ
 = (tˇŒoc_à*)((*Ë
p
 - 
	`off£tof
—ˇŒoc_t, 
d©a
));

177 
tˇâri_t
 *
a
;

178 
i
;

180 
i
 = 0, 
a
 = 
tˇ
->
©å
;á && i < 
n
;á =á->
√xt
, i++){

181 
©å
[
i
].
«me
 = 
a
->name;

182 
©å
[
i
].
vÆue
 = 
a
->
ªf
?á->
	`ªf
(a->value):á->value;

185  
i
;

186 
	}
}

189 
	$tˇâr_dñ
(*
±r
, *
«me
)

191 
tˇŒoc_t
 *
tˇ
 = (tˇŒoc_à*)((*Ë
±r
 - 
	`off£tof
—ˇŒoc_t, 
d©a
));

192 
tˇâri_t
 *
a
, *
p
 = 
NULL
;

194 
a
 = 
tˇ
->
©å
;á && 
	`°rcmp
(
«me
,á->«me);á =á->
√xt
)

195 
p
 = 
a
;

197 if(
a
){

198 if(
p
)

199 
p
->
√xt
 = 
a
->next;

201 
tˇ
->
©å
 = 
a
->
√xt
;

202 
	`tˇâr_‰ì
(
a
);

206 
	}
}

	@get_interface3/libtc/src/conf-parse.c

7 
	#FLEX_SCANNER


	)

8 
	#YY_FLEX_MAJOR_VERSION
 2

	)

9 
	#YY_FLEX_MINOR_VERSION
 5

	)

11 
	~<°dio.h
>

15 #ifde‡
c_∂u•lus


16 #i‚de‡
__˝lu•lus


17 
	#__˝lu•lus


	)

22 #ifde‡
__˝lu•lus


24 
	~<°dlib.h
>

25 
	~<uni°d.h
>

28 
	#YY_USE_PROTOS


	)

31 
	#YY_USE_CONST


	)

35 #i‡
__STDC__


37 
	#YY_USE_PROTOS


	)

38 
	#YY_USE_CONST


	)

43 #ifde‡
__TURBOC__


44 #¥agm®
w¨n
 -
rch


45 #¥agm®
w¨n
 -
u£


46 
	~<io.h
>

47 
	~<°dlib.h
>

48 
	#YY_USE_CONST


	)

49 
	#YY_USE_PROTOS


	)

52 #ifde‡
YY_USE_CONST


53 
	#yyc⁄°
 c⁄°

	)

55 
	#yyc⁄°


	)

59 #ifde‡
YY_USE_PROTOS


60 
	#YY_PROTO
(
¥Ÿo
Ë
	)
¥Ÿo

62 
	#YY_PROTO
(
¥Ÿo
Ë()

	)

66 
	#YY_NULL
 0

	)

73 
	#YY_SC_TO_UI
(
c
Ë((Ë(Ëc)

	)

79 
	#BEGIN
 
yy_°¨t
 = 1 + 2 *

	)

85 
	#YY_START
 ((
yy_°¨t
 - 1Ë/ 2)

	)

86 
	#YYSTATE
 
YY_START


	)

89 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

92 
	#YY_NEW_FILE
 
	`yyª°¨t
–
yyö
 )

	)

94 
	#YY_END_OF_BUFFER_CHAR
 0

	)

97 
	#YY_BUF_SIZE
 16384

	)

99 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

101 
yyÀng
;

102 
FILE
 *
yyö
, *
yyout
;

104 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

105 
	#EOB_ACT_END_OF_FILE
 1

	)

106 
	#EOB_ACT_LAST_MATCH
 2

	)

124 
	#yyÀss
(
n
) \

128 *
yy_˝
 = 
yy_hﬁd_ch¨
; \

129 
YY_RESTORE_YY_MORE_OFFSET
 \

130 
yy_c_buf_p
 = 
yy_˝
 = 
yy_bp
 + 
n
 - 
YY_MORE_ADJ
; \

131 
YY_DO_BEFORE_ACTION
; \

133  0 )

	)

135 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, 
yyãxt_±r
 )

	)

141 
	tyy_size_t
;

144 
	syy_buf„r_°©e


146 
FILE
 *
	myy_öput_fûe
;

148 *
	myy_ch_buf
;

149 *
	myy_buf_pos
;

154 
yy_size_t
 
	myy_buf_size
;

159 
	myy_n_ch¨s
;

165 
	myy_is_our_buf„r
;

172 
	myy_is_öãø˘ive
;

178 
	myy_©_bﬁ
;

183 
	myy_fûl_buf„r
;

185 
	myy_buf„r_°©us
;

186 
	#YY_BUFFER_NEW
 0

	)

187 
	#YY_BUFFER_NORMAL
 1

	)

198 
	#YY_BUFFER_EOF_PENDING
 2

	)

201 
YY_BUFFER_STATE
 
	gyy_cuºít_buf„r
 = 0;

207 
	#YY_CURRENT_BUFFER
 
yy_cuºít_buf„r


	)

211 
	gyy_hﬁd_ch¨
;

213 
	gyy_n_ch¨s
;

216 
	gyyÀng
;

219 *
	gyy_c_buf_p
 = (*) 0;

220 
	gyy_öô
 = 1;

221 
	gyy_°¨t
 = 0;

226 
	gyy_did_buf„r_swôch_⁄_eof
;

228 
yyª°¨t
 
YY_PROTO
(–
FILE
 *
öput_fûe
 ));

230 
yy_swôch_to_buf„r
 
YY_PROTO
(–
YY_BUFFER_STATE
 
√w_buf„r
 ));

231 
yy_lﬂd_buf„r_°©e
 
YY_PROTO
(( ));

232 
YY_BUFFER_STATE
 
yy_¸óã_buf„r
 
YY_PROTO
(–
FILE
 *
fûe
, 
size
 ));

233 
yy_dñëe_buf„r
 
YY_PROTO
(–
YY_BUFFER_STATE
 
b
 ));

234 
yy_öô_buf„r
 
YY_PROTO
(–
YY_BUFFER_STATE
 
b
, 
FILE
 *
fûe
 ));

235 
yy_Êush_buf„r
 
YY_PROTO
(–
YY_BUFFER_STATE
 
b
 ));

236 
	#YY_FLUSH_BUFFER
 
	`yy_Êush_buf„r
–
yy_cuºít_buf„r
 )

	)

238 
YY_BUFFER_STATE
 
yy_sˇn_buf„r
 
YY_PROTO
(–*
ba£
, 
yy_size_t
 
size
 ));

239 
YY_BUFFER_STATE
 
yy_sˇn_°rög
 
YY_PROTO
(–
yyc⁄°
 *
yy_°r
 ));

240 
YY_BUFFER_STATE
 
yy_sˇn_byãs
 
YY_PROTO
(–
yyc⁄°
 *
byãs
, 
Àn
 ));

242 *
yy_Êex_Æloc
 
YY_PROTO
(–
yy_size_t
 ));

243 *
yy_Êex_ªÆloc
 
YY_PROTO
(–*, 
yy_size_t
 ));

244 
yy_Êex_‰ì
 
YY_PROTO
(( * ));

246 
	#yy_√w_buf„r
 
yy_¸óã_buf„r


	)

248 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

250 i‡–! 
yy_cuºít_buf„r
 ) \

251 
yy_cuºít_buf„r
 = 
	`yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 ); \

252 
yy_cuºít_buf„r
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

253 }

	)

255 
	#yy_£t_bﬁ
(
©_bﬁ
) \

257 i‡–! 
yy_cuºít_buf„r
 ) \

258 
yy_cuºít_buf„r
 = 
	`yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 ); \

259 
yy_cuºít_buf„r
->
yy_©_bﬁ
 = 
©_bﬁ
; \

260 }

	)

262 
	#YY_AT_BOL
(Ë(
yy_cuºít_buf„r
->
yy_©_bﬁ
)

	)

265 
	#YY_USES_REJECT


	)

267 
	#yywøp
(Ë1

	)

268 
	#YY_SKIP_YYWRAP


	)

269 
	tYY_CHAR
;

270 
FILE
 *
	gyyö
 = (FILE *Ë0, *
	gyyout
 = (FILE *) 0;

271 
	tyy_°©e_ty≥
;

272 *
yyãxt
;

273 
	#yyãxt_±r
 
yyãxt


	)

275 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 
YY_PROTO
(( ));

276 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 
YY_PROTO
(–yy_°©e_ty≥ 
cuºít_°©e
 ));

277 
yy_gë_√xt_buf„r
 
YY_PROTO
(( ));

278 
yy_Áèl_îr‹
 
YY_PROTO
(–
yyc⁄°
 
msg
[] ));

283 
	#YY_DO_BEFORE_ACTION
 \

284 
yyãxt_±r
 = 
yy_bp
; \

285 
yyÀng
 = (Ë(
yy_˝
 - 
yy_bp
); \

286 
yy_hﬁd_ch¨
 = *
yy_˝
; \

287 *
yy_˝
 = '\0'; \

288 
yy_c_buf_p
 = 
yy_˝
;

	)

290 
	#YY_NUM_RULES
 24

	)

291 
	#YY_END_OF_BUFFER
 25

	)

292 
yyc⁄°
 
	gyy_ac˛i°
[191] =

316 
yyc⁄°
 
	gyy_ac˚±
[116] =

333 
yyc⁄°
 
	gyy_ec
[256] =

365 
yyc⁄°
 
	gyy_mëa
[36] =

373 
yyc⁄°
 
	gyy_ba£
[128] =

391 
yyc⁄°
 
	gyy_def
[128] =

409 
yyc⁄°
 
	gyy_nxt
[632] =

483 
yyc⁄°
 
	gyy_chk
[632] =

557 
yy_°©e_ty≥
 
	gyy_°©e_buf
[
YY_BUF_SIZE
 + 2], *
	gyy_°©e_±r
;

558 *
	gyy_fuŒ_m©ch
;

559 
	gyy_Õ
;

560 
	gyy_lookög_f‹_åaû_begö
 = 0;

561 
	gyy_fuŒ_Õ
;

562 *
	gyy_fuŒ_°©e
;

563 
	#YY_TRAILING_MASK
 0x2000

	)

564 
	#YY_TRAILING_HEAD_MASK
 0x4000

	)

565 
	#REJECT
 \

567 *
yy_˝
 = 
yy_hﬁd_ch¨
; \

568 
yy_˝
 = 
yy_fuŒ_m©ch
; \

569 
yy_Õ
 = 
yy_fuŒ_Õ
; \

570 
yy_°©e_±r
 = 
yy_fuŒ_°©e
; \

571 
yy_cuºít_°©e
 = *
yy_°©e_±r
; \

572 ++
yy_Õ
; \

573 
föd_ruÀ
; \

574 }

	)

575 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

576 
	#YY_MORE_ADJ
 0

	)

577 
	#YY_RESTORE_YY_MORE_OFFSET


	)

578 *
	gyyãxt
;

580 
	#INITIAL
 0

	)

604 
	#£˘
 1

	)

606 
	#p_vÆ
 2

	)

608 
	#s_mîge
 3

	)

611 
	~<°rög.h
>

612 
	~<t˛i°.h
>

613 
	~<tˇŒoc.h
>

614 
	~"tcc⁄f.h
"

615 
	~"tcc-öã∫Æ.h
"

617 
	#yyãrmö©e
() \

618 if(
£˘i⁄_°ack
Ë
	`t˛i°_de°roy
(£˘i⁄_°ack, 
tc‰ì
); \

619 
YY_FLUSH_BUFFER
; \

620 
	`BEGIN
(
INITIAL
); \

621  
NULL


	)

623 
	#YY_DECL
 
c⁄f_£˘i⁄
 *
	`tcc_Àx
(*
d©a
, 
tcio_‚
 
r‚
, \

624 
c⁄f_£˘i⁄
 *
£c
)

	)

626 
	#YY_INPUT
(
buf
,
ªs
,
size
) { \

627 
ªs
 = 
c⁄f_fûe
.
	`ªad
(
buf
, 1, 
size
, c⁄f_fûe.
d©a
); \

628 
ªs
 =Ñe†<0? 
YY_NULL
:Ñes; \

629 }

	)

631 
	#PUSH_SECTION
(
q
, 
t
) do { \

632 
tcc_íåy
 *
ã
; \

633 *
n
 = 
yyãxt
+
q
; \

634 
yyãxt
[
yyÀng
-
q
] = 0; \

635 
ã
 = 
	`¸óã_íåy
(
cur_£˘i⁄
, 
n
, 
t
); \

636 
	`t˛i°_push
(
£˘i⁄_°ack
, 
cur_£˘i⁄
); \

637 
cur_£˘i⁄
 = 
ã
->
£˘i⁄
; \

638 } 0)

	)

641 *
	md©a
;

642 
tcio_‚
 
	mªad
;

643 } 
	gc⁄f_fûe
;

651 #i‚de‡
YY_SKIP_YYWRAP


652 #ifde‡
__˝lu•lus


653 "C" 
yywøp
 
YY_PROTO
(( ));

655 
yywøp
 
YY_PROTO
(( ));

659 #i‚de‡
YY_NO_UNPUT


660 
yyu≈ut
 
YY_PROTO
(–
c
, *
buf_±r
 ));

663 #i‚de‡
yyãxt_±r


664 
yy_Êex_°∫˝y
 
YY_PROTO
(–*, 
yyc⁄°
 *, ));

667 #ifde‡
YY_NEED_STRLEN


668 
yy_Êex_°æí
 
YY_PROTO
(–
yyc⁄°
 * ));

671 #i‚de‡
YY_NO_INPUT


672 #ifde‡
__˝lu•lus


673 
yyöput
 
YY_PROTO
(( ));

675 
öput
 
YY_PROTO
(( ));

679 #i‡
YY_STACK_USED


680 
	gyy_°¨t_°ack_±r
 = 0;

681 
	gyy_°¨t_°ack_dïth
 = 0;

682 *
	gyy_°¨t_°ack
 = 0;

683 #i‚de‡
YY_NO_PUSH_STATE


684 
yy_push_°©e
 
YY_PROTO
(–
√w_°©e
 ));

686 #i‚de‡
YY_NO_POP_STATE


687 
yy_p›_°©e
 
YY_PROTO
(( ));

689 #i‚de‡
YY_NO_TOP_STATE


690 
yy_t›_°©e
 
YY_PROTO
(( ));

694 
	#YY_NO_PUSH_STATE
 1

	)

695 
	#YY_NO_POP_STATE
 1

	)

696 
	#YY_NO_TOP_STATE
 1

	)

699 #ifde‡
YY_MALLOC_DECL


700 
	gYY_MALLOC_DECL


702 #i‡
__STDC__


703 #i‚de‡
__˝lu•lus


704 
	~<°dlib.h
>

715 #i‚de‡
YY_READ_BUF_SIZE


716 
	#YY_READ_BUF_SIZE
 8192

	)

721 #i‚de‡
ECHO


725 
	#ECHO
 (Ë
	`fwrôe
–
yyãxt
, 
yyÀng
, 1, 
yyout
 )

	)

731 #i‚de‡
YY_INPUT


732 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

733 i‡–
yy_cuºít_buf„r
->
yy_is_öãø˘ive
 ) \

735 
c
 = '*', 
n
; \

736  
n
 = 0;Ç < 
max_size
 && \

737 (
c
 = 
	`gëc
–
yyö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

738 
buf
[
n
] = (Ë
c
; \

739 i‡–
c
 == '\n' ) \

740 
buf
[
n
++] = (Ë
c
; \

741 i‡–
c
 =
EOF
 && 
	`„º‹
–
yyö
 ) ) \

742 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

743 
ªsu…
 = 
n
; \

745 i‡–((
ªsu…
 = 
	`‰ód
–
buf
, 1, 
max_size
, 
yyö
 )) == 0) \

746 && 
	`„º‹
–
yyö
 ) ) \

747 
	`YY_FATAL_ERROR
–"öpuàö fÀx sˇ¬î faûed" );

	)

754 #i‚de‡
yyãrmö©e


755 
	#yyãrmö©e
(Ë 
YY_NULL


	)

759 #i‚de‡
YY_START_STACK_INCR


760 
	#YY_START_STACK_INCR
 25

	)

764 #i‚de‡
YY_FATAL_ERROR


765 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg )

	)

771 #i‚de‡
YY_DECL


772 
	#YY_DECL
 
yyÀx
 
	`YY_PROTO
(–))

	)

778 #i‚de‡
YY_USER_ACTION


779 
	#YY_USER_ACTION


	)

783 #i‚de‡
YY_BREAK


784 
	#YY_BREAK
 ;

	)

787 
	#YY_RULE_SETUP
 \

788 
YY_USER_ACTION


	)

790 
	gYY_DECL


792 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

793 *
	gyy_˝
, *
	gyy_bp
;

794 
	gyy_a˘
;

798 
t˛i°_t
 *
	g£˘i⁄_°ack
 = 
t˛i°_√w
(
TC_LOCK_SLOPPY
);

799 
c⁄f_£˘i⁄
 *
	gcur_£˘i⁄
;

800 
tcc_íåy
 *
	gcur_íåy
 = 
NULL
;

801 
	glöe_num
 = 1;

802 
	g£˙
 = 0;

803 if(
	g£c
){

804 
	gcur_£˘i⁄
 = 
£c
;

806 
	gcur_£˘i⁄
 = 
c⁄f_√w
(
NULL
);

808 
	gc⁄f_fûe
.
	gd©a
 = 
d©a
;

809 
	gc⁄f_fûe
.
	gªad
 = 
r‚
;

811 
	gYY_FLUSH_BUFFER
;

812 
BEGIN
(
INITIAL
);

816 i‡–
	gyy_öô
 )

818 
	gyy_öô
 = 0;

820 #ifde‡
YY_USER_INIT


821 
	gYY_USER_INIT
;

824 i‡–! 
	gyy_°¨t
 )

825 
	gyy_°¨t
 = 1;

827 i‡–! 
	gyyö
 )

828 
	gyyö
 = 
°dö
;

830 i‡–! 
	gyyout
 )

831 
	gyyout
 = 
°dout
;

833 i‡–! 
	gyy_cuºít_buf„r
 )

834 
	gyy_cuºít_buf„r
 =

835 
yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 );

837 
yy_lﬂd_buf„r_°©e
();

842 
	gyy_˝
 = 
yy_c_buf_p
;

845 *
	gyy_˝
 = 
yy_hﬁd_ch¨
;

850 
	gyy_bp
 = 
yy_˝
;

852 
	gyy_cuºít_°©e
 = 
yy_°¨t
;

853 
	gyy_°©e_±r
 = 
yy_°©e_buf
;

854 *
	gyy_°©e_±r
++ = 
yy_cuºít_°©e
;

855 
	gyy_m©ch
:

858 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)];

859  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

861 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

862 i‡–
	gyy_cuºít_°©e
 >= 115 )

863 
yy_c
 = 
yy_mëa
[() yy_c];

865 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + (Ë
yy_c
];

866 *
	gyy_°©e_±r
++ = 
yy_cuºít_°©e
;

867 ++
	gyy_˝
;

869  
	gyy_ba£
[
yy_cuºít_°©e
] != 596 );

871 
	gyy_föd_a˘i⁄
:

872 
yy_cuºít_°©e
 = *--
yy_°©e_±r
;

873 
	gyy_Õ
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

874 
	gföd_ruÀ
:

877 i‡–
	gyy_Õ
 && yy_Õ < 
	gyy_ac˚±
[
yy_cuºít_°©e
 + 1] )

879 
	gyy_a˘
 = 
yy_ac˛i°
[
yy_Õ
];

880 i‡–
	gyy_a˘
 & 
	gYY_TRAILING_HEAD_MASK
 ||

881 
	gyy_lookög_f‹_åaû_begö
 )

883 i‡–
	gyy_a˘
 =
yy_lookög_f‹_åaû_begö
 )

885 
yy_lookög_f‹_åaû_begö
 = 0;

886 
	gyy_a˘
 &~
YY_TRAILING_HEAD_MASK
;

890 i‡–
	gyy_a˘
 & 
	gYY_TRAILING_MASK
 )

892 
	gyy_lookög_f‹_åaû_begö
 = 
yy_a˘
 & ~
YY_TRAILING_MASK
;

893 
	gyy_lookög_f‹_åaû_begö
 |
YY_TRAILING_HEAD_MASK
;

897 
	gyy_fuŒ_m©ch
 = 
yy_˝
;

898 
	gyy_fuŒ_°©e
 = 
yy_°©e_±r
;

899 
	gyy_fuŒ_Õ
 = 
yy_Õ
;

902 ++
	gyy_Õ
;

903 
	gföd_ruÀ
;

905 --
	gyy_˝
;

906 
	gyy_cuºít_°©e
 = *--
yy_°©e_±r
;

907 
	gyy_Õ
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

910 
	gYY_DO_BEFORE_ACTION
;

913 
	gdo_a˘i⁄
:

916  
yy_a˘
 )

920 
YY_RULE_SETUP


923 
YY_BREAK


925 *
yy_˝
 = 
yy_hﬁd_ch¨
;

926 
	gyy_c_buf_p
 = 
yy_˝
 -= 1;

927 
	gYY_DO_BEFORE_ACTION
;

928 
	gYY_RULE_SETUP


931 
YY_BREAK


935 
YY_RULE_SETUP


938 
£˙
 = 0;

939 
BEGIN
(
£˘
);

941 
YY_BREAK


943 
YY_RULE_SETUP


946 
PUSH_SECTION
(0, 
TCC_SECTION
);

947 
	g£˙
 = 1;

948 
BEGIN
(
£˘
);

950 
YY_BREAK


952 
YY_RULE_SETUP


955 
PUSH_SECTION
(0, 
TCC_MSECTION
);

956 
	g£˙
 = 1;

957 
BEGIN
(
£˘
);

959 
YY_BREAK


961 
YY_RULE_SETUP


964 
cur_íåy
 = 
¸óã_íåy
(
cur_£˘i⁄
, 
yyãxt
, 
TCC_VALUE
);

965 
BEGIN
(
p_vÆ
);

967 
YY_BREAK


969 
YY_RULE_SETUP


971 { 
c⁄f_£˘i⁄
 *
£c
;

972 if((
	g£c
 = 
t˛i°_p›
(
£˘i⁄_°ack
)Ë!
NULL
){

973 
cur_£˘i⁄
 = 
£c
;

975 
Ârötf
(
°dîr
, "löê%d: U√x≥˘ed '%c'\n", 
löe_num
, 
yyãxt
[0]);

976 
yyãrmö©e
();

979 
YY_BREAK


980 
YY_STATE_EOF
(
INITIAL
):

983 if(
t˛i°_ôems
(
£˘i⁄_°ack
) == 0){

984 
t˛i°_de°roy
(
£˘i⁄_°ack
, 
NULL
);

985 
	gYY_FLUSH_BUFFER
;

986  
	gcur_£˘i⁄
;

988 
Ârötf
(
°dîr
, "UnexpectedÉnd of file.\n");

989 
yyãrmö©e
();

992 
YY_BREAK


998 
YY_RULE_SETUP


1000 
tcc_addöt
(
cur_íåy
, 
°πﬁl
(
yyãxt
, 
NULL
, 0));

1001 
YY_BREAK


1003 
YY_RULE_SETUP


1005 
tcc_addÊﬂt
(
cur_íåy
, 
°πod
(
yyãxt
, 
NULL
));

1006 
YY_BREAK


1008 
YY_RULE_SETUP


1010 
yyãxt
[
yyÀng
-1]=0; 
tcc_add°rög
(
cur_íåy
,
°rdup
(yytext+1),0);

1011 
YY_BREAK


1013 
YY_RULE_SETUP


1015 
yyãxt
[
yyÀng
-1]=0; 
tcc_add°rög
(
cur_íåy
,
°rdup
(yytext+1),1);

1016 
YY_BREAK


1018 
YY_RULE_SETUP


1020 
tcc_addªf
(
cur_íåy
, 
°rdup
(
yyãxt
));

1021 
YY_BREAK


1023 
YY_RULE_SETUP


1025 
tcc_addboﬁ
(
cur_íåy
, 1);

1026 
YY_BREAK


1028 
YY_RULE_SETUP


1030 
tcc_addboﬁ
(
cur_íåy
, 0);

1031 
YY_BREAK


1033 *
yy_˝
 = 
yy_hﬁd_ch¨
;

1034 
	gyy_c_buf_p
 = 
yy_˝
 -= 1;

1035 
	gYY_DO_BEFORE_ACTION
;

1038 
YY_RULE_SETUP


1041 
BEGIN
(
INITIAL
);

1042 if(
	gyyãxt
[0] == '\n')

1043 
löe_num
++;

1045 
YY_BREAK


1046 
YY_STATE_EOF
(
p_vÆ
):

1048 
Ârötf
(
°dîr
, "U√x≥˘edÉnd o‡fûe.\n"); 
yyãrmö©e
();

1049 
YY_BREAK


1053 
YY_RULE_SETUP


1056 if(
£˙
 == 0){

1057 
PUSH_SECTION
(1, 
TCC_SECTION
);

1058 
	g£˙
 = 1;

1060 
Ârötf
(
°dîr
, "line %d: Expected '{', found %s.\n",

1061 
löe_num
, 
yyãxt
);

1062 
yyãrmö©e
();

1065 
YY_BREAK


1067 
YY_RULE_SETUP


1070 if(
£˙
){

1071 
BEGIN
(
INITIAL
);

1073 
Ârötf
(
°dîr
, "löê%d: Missög se˘i⁄Çame.\n", 
löe_num
);

1074 
yyãrmö©e
();

1077 
YY_BREAK


1079 
YY_RULE_SETUP


1081 
BEGIN
(
s_mîge
);

1082 
YY_BREAK


1085 
YY_RULE_SETUP


1088 
t˛i°_push
(
cur_£˘i⁄
->
mîge
, 
°rdup
(
yyãxt
));

1089 
BEGIN
(
£˘
);

1091 
YY_BREAK


1093 
YY_RULE_SETUP


1095 
löe_num
++;

1096 
YY_BREAK


1098 
YY_RULE_SETUP


1100 
Ârötf
(
°dîr
, "löê%d: Sy¡axÉº‹Çó∏'%s'.\n", 
löe_num
, 
yyãxt
); 
yyãrmö©e
();

1101 
YY_BREAK


1103 
YY_RULE_SETUP


1105 
ECHO
;

1106 
	gYY_BREAK


1108 
YY_STATE_EOF
(
£˘
):

1109 
YY_STATE_EOF
(
s_mîge
):

1110 
yyãrmö©e
();

1112 
	gYY_END_OF_BUFFER
:

1115 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - 
yyãxt_±r
) - 1;

1118 *
	gyy_˝
 = 
yy_hﬁd_ch¨
;

1119 
YY_RESTORE_YY_MORE_OFFSET


1121 i‡–
	gyy_cuºít_buf„r
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

1132 
yy_n_ch¨s
 = 
yy_cuºít_buf„r
->yy_n_chars;

1133 
	gyy_cuºít_buf„r
->
	gyy_öput_fûe
 = 
yyö
;

1134 
	gyy_cuºít_buf„r
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

1144 i‡–
	gyy_c_buf_p
 <&
yy_cuºít_buf„r
->
yy_ch_buf
[
yy_n_ch¨s
] )

1146 
yy_°©e_ty≥
 
yy_√xt_°©e
;

1148 
	gyy_c_buf_p
 = 
yyãxt_±r
 + 
yy_amou¡_of_m©ched_ãxt
;

1150 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
();

1161 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 );

1163 
	gyy_bp
 = 
yyãxt_±r
 + 
YY_MORE_ADJ
;

1165 i‡–
	gyy_√xt_°©e
 )

1168 
	gyy_˝
 = ++
yy_c_buf_p
;

1169 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

1170 
	gyy_m©ch
;

1175 
	gyy_˝
 = 
yy_c_buf_p
;

1176 
	gyy_föd_a˘i⁄
;

1180  
yy_gë_√xt_buf„r
() )

1182 
	gEOB_ACT_END_OF_FILE
:

1184 
yy_did_buf„r_swôch_⁄_eof
 = 0;

1186 i‡–
yywøp
() )

1197 
	gyy_c_buf_p
 = 
yyãxt_±r
 + 
YY_MORE_ADJ
;

1199 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

1200 
	gdo_a˘i⁄
;

1205 i‡–! 
	gyy_did_buf„r_swôch_⁄_eof
 )

1206 
	gYY_NEW_FILE
;

1211 
	gEOB_ACT_CONTINUE_SCAN
:

1212 
yy_c_buf_p
 =

1213 
yyãxt_±r
 + 
yy_amou¡_of_m©ched_ãxt
;

1215 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
();

1217 
	gyy_˝
 = 
yy_c_buf_p
;

1218 
	gyy_bp
 = 
yyãxt_±r
 + 
YY_MORE_ADJ
;

1219 
	gyy_m©ch
;

1221 
	gEOB_ACT_LAST_MATCH
:

1222 
yy_c_buf_p
 =

1223 &
yy_cuºít_buf„r
->
yy_ch_buf
[
yy_n_ch¨s
];

1225 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
();

1227 
	gyy_˝
 = 
yy_c_buf_p
;

1228 
	gyy_bp
 = 
yyãxt_±r
 + 
YY_MORE_ADJ
;

1229 
	gyy_föd_a˘i⁄
;

1235 
YY_FATAL_ERROR
(

1250 
	$yy_gë_√xt_buf„r
()

1252 *
de°
 = 
yy_cuºít_buf„r
->
yy_ch_buf
;

1253 *
sour˚
 = 
yyãxt_±r
;

1254 
numbî_to_move
, 
i
;

1255 
ªt_vÆ
;

1257 i‡–
yy_c_buf_p
 > &
yy_cuºít_buf„r
->
yy_ch_buf
[
yy_n_ch¨s
 + 1] )

1258 
	`YY_FATAL_ERROR
(

1261 i‡–
yy_cuºít_buf„r
->
yy_fûl_buf„r
 == 0 )

1263 i‡–
yy_c_buf_p
 - 
yyãxt_±r
 - 
YY_MORE_ADJ
 == 1 )

1268  
EOB_ACT_END_OF_FILE
;

1276  
EOB_ACT_LAST_MATCH
;

1283 
numbî_to_move
 = (Ë(
yy_c_buf_p
 - 
yyãxt_±r
) - 1;

1285  
i
 = 0; i < 
numbî_to_move
; ++i )

1286 *(
de°
++Ë*(
sour˚
++);

1288 i‡–
yy_cuºít_buf„r
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

1292 
yy_cuºít_buf„r
->
yy_n_ch¨s
 = yy_n_chars = 0;

1296 
num_to_ªad
 =

1297 
yy_cuºít_buf„r
->
yy_buf_size
 - 
numbî_to_move
 - 1;

1299  
num_to_ªad
 <= 0 )

1301 #ifde‡
YY_USES_REJECT


1302 
	`YY_FATAL_ERROR
(

1307 
YY_BUFFER_STATE
 
b
 = 
yy_cuºít_buf„r
;

1309 
yy_c_buf_p_off£t
 =

1310 (Ë(
yy_c_buf_p
 - 
b
->
yy_ch_buf
);

1312 i‡–
b
->
yy_is_our_buf„r
 )

1314 
√w_size
 = 
b
->
yy_buf_size
 * 2;

1316 i‡–
√w_size
 <= 0 )

1317 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

1319 
b
->
yy_buf_size
 *= 2;

1321 
b
->
yy_ch_buf
 = (*)

1323 
	`yy_Êex_ªÆloc
–(*Ë
b
->
yy_ch_buf
,

1324 
b
->
yy_buf_size
 + 2 );

1328 
b
->
yy_ch_buf
 = 0;

1330 i‡–! 
b
->
yy_ch_buf
 )

1331 
	`YY_FATAL_ERROR
(

1334 
yy_c_buf_p
 = &
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

1336 
num_to_ªad
 = 
yy_cuºít_buf„r
->
yy_buf_size
 -

1337 
numbî_to_move
 - 1;

1341 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

1342 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

1345 
	`YY_INPUT
–(&
yy_cuºít_buf„r
->
yy_ch_buf
[
numbî_to_move
]),

1346 
yy_n_ch¨s
, 
num_to_ªad
 );

1348 
yy_cuºít_buf„r
->
yy_n_ch¨s
 = yy_n_chars;

1351 i‡–
yy_n_ch¨s
 == 0 )

1353 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

1355 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

1356 
	`yyª°¨t
–
yyö
 );

1361 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

1362 
yy_cuºít_buf„r
->
yy_buf„r_°©us
 =

1363 
YY_BUFFER_EOF_PENDING
;

1368 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

1370 
yy_n_ch¨s
 +
numbî_to_move
;

1371 
yy_cuºít_buf„r
->
yy_ch_buf
[
yy_n_ch¨s
] = 
YY_END_OF_BUFFER_CHAR
;

1372 
yy_cuºít_buf„r
->
yy_ch_buf
[
yy_n_ch¨s
 + 1] = 
YY_END_OF_BUFFER_CHAR
;

1374 
yyãxt_±r
 = &
yy_cuºít_buf„r
->
yy_ch_buf
[0];

1376  
ªt_vÆ
;

1377 
	}
}

1382 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
()

1384 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

1385 *
yy_˝
;

1387 
yy_cuºít_°©e
 = 
yy_°¨t
;

1388 
yy_°©e_±r
 = 
yy_°©e_buf
;

1389 *
yy_°©e_±r
++ = 
yy_cuºít_°©e
;

1391  
yy_˝
 = 
yyãxt_±r
 + 
YY_MORE_ADJ
; yy_˝ < 
yy_c_buf_p
; ++yy_cp )

1393 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

1394  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1396 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1397 i‡–
yy_cuºít_°©e
 >= 115 )

1398 
yy_c
 = 
yy_mëa
[() yy_c];

1400 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1401 *
yy_°©e_±r
++ = 
yy_cuºít_°©e
;

1404  
yy_cuºít_°©e
;

1405 
	}
}

1414 #ifde‡
YY_USE_PROTOS


1415 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
–
yy_°©e_ty≥
 
yy_cuºít_°©e
 )

1417 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
–
yy_cuºít_°©e
 )

1418 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

1421 
yy_is_jam
;

1423 
YY_CHAR
 
yy_c
 = 1;

1424  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1426 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1427 i‡–
yy_cuºít_°©e
 >= 115 )

1428 
yy_c
 = 
yy_mëa
[() yy_c];

1430 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1431 
yy_is_jam
 = (
yy_cuºít_°©e
 == 114);

1432 i‡–! 
yy_is_jam
 )

1433 *
yy_°©e_±r
++ = 
yy_cuºít_°©e
;

1435  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

1436 
	}
}

1439 #i‚de‡
YY_NO_UNPUT


1440 #ifde‡
YY_USE_PROTOS


1441 
	$yyu≈ut
–
c
, *
yy_bp
 )

1443 
	$yyu≈ut
–
c
, 
yy_bp
 )

1444 
c
;

1445 *
yy_bp
;

1448 *
yy_˝
 = 
yy_c_buf_p
;

1451 *
yy_˝
 = 
yy_hﬁd_ch¨
;

1453 i‡–
yy_˝
 < 
yy_cuºít_buf„r
->
yy_ch_buf
 + 2 )

1456 
numbî_to_move
 = 
yy_n_ch¨s
 + 2;

1457 *
de°
 = &
yy_cuºít_buf„r
->
yy_ch_buf
[

1458 
yy_cuºít_buf„r
->
yy_buf_size
 + 2];

1459 *
sour˚
 =

1460 &
yy_cuºít_buf„r
->
yy_ch_buf
[
numbî_to_move
];

1462  
sour˚
 > 
yy_cuºít_buf„r
->
yy_ch_buf
 )

1463 *--
de°
 = *--
sour˚
;

1465 
yy_˝
 +(Ë(
de°
 - 
sour˚
);

1466 
yy_bp
 +(Ë(
de°
 - 
sour˚
);

1467 
yy_cuºít_buf„r
->
yy_n_ch¨s
 =

1468 
yy_n_ch¨s
 = 
yy_cuºít_buf„r
->
yy_buf_size
;

1470 i‡–
yy_˝
 < 
yy_cuºít_buf„r
->
yy_ch_buf
 + 2 )

1471 
	`YY_FATAL_ERROR
( "flex scannerÖush-back overflow" );

1474 *--
yy_˝
 = (Ë
c
;

1477 
yyãxt_±r
 = 
yy_bp
;

1478 
yy_hﬁd_ch¨
 = *
yy_˝
;

1479 
yy_c_buf_p
 = 
yy_˝
;

1480 
	}
}

1484 #ifde‡
__˝lu•lus


1485 
	$yyöput
()

1487 
	$öput
()

1490 
c
;

1492 *
yy_c_buf_p
 = 
yy_hﬁd_ch¨
;

1494 i‡–*
yy_c_buf_p
 =
YY_END_OF_BUFFER_CHAR
 )

1500 i‡–
yy_c_buf_p
 < &
yy_cuºít_buf„r
->
yy_ch_buf
[
yy_n_ch¨s
] )

1502 *
yy_c_buf_p
 = '\0';

1506 
off£t
 = 
yy_c_buf_p
 - 
yyãxt_±r
;

1507 ++
yy_c_buf_p
;

1509  
	`yy_gë_√xt_buf„r
() )

1511 
EOB_ACT_LAST_MATCH
:

1523 
	`yyª°¨t
–
yyö
 );

1527 
EOB_ACT_END_OF_FILE
:

1529 i‡–
	`yywøp
() )

1530  
EOF
;

1532 i‡–! 
yy_did_buf„r_swôch_⁄_eof
 )

1533 
YY_NEW_FILE
;

1534 #ifde‡
__˝lu•lus


1535  
	`yyöput
();

1537  
	`öput
();

1541 
EOB_ACT_CONTINUE_SCAN
:

1542 
yy_c_buf_p
 = 
yyãxt_±r
 + 
off£t
;

1548 
c
 = *(*Ë
yy_c_buf_p
;

1549 *
yy_c_buf_p
 = '\0';

1550 
yy_hﬁd_ch¨
 = *++
yy_c_buf_p
;

1553  
c
;

1554 
	}
}

1557 #ifde‡
YY_USE_PROTOS


1558 
	$yyª°¨t
–
FILE
 *
öput_fûe
 )

1560 
	$yyª°¨t
–
öput_fûe
 )

1561 
FILE
 *
öput_fûe
;

1564 i‡–! 
yy_cuºít_buf„r
 )

1565 
yy_cuºít_buf„r
 = 
	`yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 );

1567 
	`yy_öô_buf„r
–
yy_cuºít_buf„r
, 
öput_fûe
 );

1568 
	`yy_lﬂd_buf„r_°©e
();

1569 
	}
}

1572 #ifde‡
YY_USE_PROTOS


1573 
	$yy_swôch_to_buf„r
–
YY_BUFFER_STATE
 
√w_buf„r
 )

1575 
	$yy_swôch_to_buf„r
–
√w_buf„r
 )

1576 
YY_BUFFER_STATE
 
√w_buf„r
;

1579 i‡–
yy_cuºít_buf„r
 =
√w_buf„r
 )

1582 i‡–
yy_cuºít_buf„r
 )

1585 *
yy_c_buf_p
 = 
yy_hﬁd_ch¨
;

1586 
yy_cuºít_buf„r
->
yy_buf_pos
 = 
yy_c_buf_p
;

1587 
yy_cuºít_buf„r
->
yy_n_ch¨s
 = yy_n_chars;

1590 
yy_cuºít_buf„r
 = 
√w_buf„r
;

1591 
	`yy_lﬂd_buf„r_°©e
();

1598 
yy_did_buf„r_swôch_⁄_eof
 = 1;

1599 
	}
}

1602 #ifde‡
YY_USE_PROTOS


1603 
	$yy_lﬂd_buf„r_°©e
( )

1605 
	$yy_lﬂd_buf„r_°©e
()

1608 
yy_n_ch¨s
 = 
yy_cuºít_buf„r
->yy_n_chars;

1609 
yyãxt_±r
 = 
yy_c_buf_p
 = 
yy_cuºít_buf„r
->
yy_buf_pos
;

1610 
yyö
 = 
yy_cuºít_buf„r
->
yy_öput_fûe
;

1611 
yy_hﬁd_ch¨
 = *
yy_c_buf_p
;

1612 
	}
}

1615 #ifde‡
YY_USE_PROTOS


1616 
YY_BUFFER_STATE
 
	$yy_¸óã_buf„r
–
FILE
 *
fûe
, 
size
 )

1618 
YY_BUFFER_STATE
 
	$yy_¸óã_buf„r
–
fûe
, 
size
 )

1619 
FILE
 *
fûe
;

1620 
size
;

1623 
YY_BUFFER_STATE
 
b
;

1625 
b
 = (
YY_BUFFER_STATE
Ë
	`yy_Êex_Æloc
––
yy_buf„r_°©e
 ) );

1626 i‡–! 
b
 )

1627 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_create_buffer()" );

1629 
b
->
yy_buf_size
 = 
size
;

1634 
b
->
yy_ch_buf
 = (*Ë
	`yy_Êex_Æloc
–b->
yy_buf_size
 + 2 );

1635 i‡–! 
b
->
yy_ch_buf
 )

1636 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_create_buffer()" );

1638 
b
->
yy_is_our_buf„r
 = 1;

1640 
	`yy_öô_buf„r
–
b
, 
fûe
 );

1642  
b
;

1643 
	}
}

1646 #ifde‡
YY_USE_PROTOS


1647 
	$yy_dñëe_buf„r
–
YY_BUFFER_STATE
 
b
 )

1649 
	$yy_dñëe_buf„r
–
b
 )

1650 
YY_BUFFER_STATE
 
b
;

1653 i‡–! 
b
 )

1656 i‡–
b
 =
yy_cuºít_buf„r
 )

1657 
yy_cuºít_buf„r
 = (
YY_BUFFER_STATE
) 0;

1659 i‡–
b
->
yy_is_our_buf„r
 )

1660 
	`yy_Êex_‰ì
–(*Ë
b
->
yy_ch_buf
 );

1662 
	`yy_Êex_‰ì
–(*Ë
b
 );

1663 
	}
}

1666 #i‚de‡
YY_ALWAYS_INTERACTIVE


1667 #i‚de‡
YY_NEVER_INTERACTIVE


1668 
ißây
 
YY_PROTO
(( ));

1672 #ifde‡
YY_USE_PROTOS


1673 
	$yy_öô_buf„r
–
YY_BUFFER_STATE
 
b
, 
FILE
 *
fûe
 )

1675 
	$yy_öô_buf„r
–
b
, 
fûe
 )

1676 
YY_BUFFER_STATE
 
b
;

1677 
FILE
 *
fûe
;

1682 
	`yy_Êush_buf„r
–
b
 );

1684 
b
->
yy_öput_fûe
 = 
fûe
;

1685 
b
->
yy_fûl_buf„r
 = 1;

1687 #i‡
YY_ALWAYS_INTERACTIVE


1688 
b
->
yy_is_öãø˘ive
 = 1;

1690 #i‡
YY_NEVER_INTERACTIVE


1691 
b
->
yy_is_öãø˘ive
 = 0;

1693 
b
->
yy_is_öãø˘ive
 = 
fûe
 ? (
	`ißây
–
	`fûío
(file) ) > 0) : 0;

1696 
	}
}

1699 #ifde‡
YY_USE_PROTOS


1700 
	$yy_Êush_buf„r
–
YY_BUFFER_STATE
 
b
 )

1702 
	$yy_Êush_buf„r
–
b
 )

1703 
YY_BUFFER_STATE
 
b
;

1707 i‡–! 
b
 )

1710 
b
->
yy_n_ch¨s
 = 0;

1716 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

1717 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

1719 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

1721 
b
->
yy_©_bﬁ
 = 1;

1722 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1724 i‡–
b
 =
yy_cuºít_buf„r
 )

1725 
	`yy_lﬂd_buf„r_°©e
();

1726 
	}
}

1729 #i‚de‡
YY_NO_SCAN_BUFFER


1730 #ifde‡
YY_USE_PROTOS


1731 
YY_BUFFER_STATE
 
	$yy_sˇn_buf„r
–*
ba£
, 
yy_size_t
 
size
 )

1733 
YY_BUFFER_STATE
 
	$yy_sˇn_buf„r
–
ba£
, 
size
 )

1734 *
ba£
;

1735 
yy_size_t
 
size
;

1738 
YY_BUFFER_STATE
 
b
;

1740 i‡–
size
 < 2 ||

1741 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

1742 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

1746 
b
 = (
YY_BUFFER_STATE
Ë
	`yy_Êex_Æloc
––
yy_buf„r_°©e
 ) );

1747 i‡–! 
b
 )

1748 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_scan_buffer()" );

1750 
b
->
yy_buf_size
 = 
size
 - 2;

1751 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

1752 
b
->
yy_is_our_buf„r
 = 0;

1753 
b
->
yy_öput_fûe
 = 0;

1754 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

1755 
b
->
yy_is_öãø˘ive
 = 0;

1756 
b
->
yy_©_bﬁ
 = 1;

1757 
b
->
yy_fûl_buf„r
 = 0;

1758 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1760 
	`yy_swôch_to_buf„r
–
b
 );

1762  
b
;

1763 
	}
}

1767 #i‚de‡
YY_NO_SCAN_STRING


1768 #ifde‡
YY_USE_PROTOS


1769 
YY_BUFFER_STATE
 
	$yy_sˇn_°rög
–
yyc⁄°
 *
yy_°r
 )

1771 
YY_BUFFER_STATE
 
	$yy_sˇn_°rög
–
yy_°r
 )

1772 
yyc⁄°
 *
yy_°r
;

1775 
Àn
;

1776  
Àn
 = 0; 
yy_°r
[len]; ++len )

1779  
	`yy_sˇn_byãs
–
yy_°r
, 
Àn
 );

1780 
	}
}

1784 #i‚de‡
YY_NO_SCAN_BYTES


1785 #ifde‡
YY_USE_PROTOS


1786 
YY_BUFFER_STATE
 
	$yy_sˇn_byãs
–
yyc⁄°
 *
byãs
, 
Àn
 )

1788 
YY_BUFFER_STATE
 
	$yy_sˇn_byãs
–
byãs
, 
Àn
 )

1789 
yyc⁄°
 *
byãs
;

1790 
Àn
;

1793 
YY_BUFFER_STATE
 
b
;

1794 *
buf
;

1795 
yy_size_t
 
n
;

1796 
i
;

1799 
n
 = 
Àn
 + 2;

1800 
buf
 = (*Ë
	`yy_Êex_Æloc
–
n
 );

1801 i‡–! 
buf
 )

1802 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_scan_bytes()" );

1804  
i
 = 0; i < 
Àn
; ++i )

1805 
buf
[
i
] = 
byãs
[i];

1807 
buf
[
Àn
] = buf[Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

1809 
b
 = 
	`yy_sˇn_buf„r
–
buf
, 
n
 );

1810 i‡–! 
b
 )

1811 
	`YY_FATAL_ERROR
( "bad buffer in yy_scan_bytes()" );

1816 
b
->
yy_is_our_buf„r
 = 1;

1818  
b
;

1819 
	}
}

1823 #i‚de‡
YY_NO_PUSH_STATE


1824 #ifde‡
YY_USE_PROTOS


1825 
	$yy_push_°©e
–
√w_°©e
 )

1827 
	$yy_push_°©e
–
√w_°©e
 )

1828 
√w_°©e
;

1831 i‡–
yy_°¨t_°ack_±r
 >
yy_°¨t_°ack_dïth
 )

1833 
yy_size_t
 
√w_size
;

1835 
yy_°¨t_°ack_dïth
 +
YY_START_STACK_INCR
;

1836 
√w_size
 = 
yy_°¨t_°ack_dïth
 * ( );

1838 i‡–! 
yy_°¨t_°ack
 )

1839 
yy_°¨t_°ack
 = (*Ë
	`yy_Êex_Æloc
–
√w_size
 );

1842 
yy_°¨t_°ack
 = (*Ë
	`yy_Êex_ªÆloc
(

1843 (*Ë
yy_°¨t_°ack
, 
√w_size
 );

1845 i‡–! 
yy_°¨t_°ack
 )

1846 
	`YY_FATAL_ERROR
(

1850 
yy_°¨t_°ack
[
yy_°¨t_°ack_±r
++] = 
YY_START
;

1852 
	`BEGIN
(
√w_°©e
);

1853 
	}
}

1857 #i‚de‡
YY_NO_POP_STATE


1858 
	$yy_p›_°©e
()

1860 i‡–--
yy_°¨t_°ack_±r
 < 0 )

1861 
	`YY_FATAL_ERROR
( "start-condition stack underflow" );

1863 
	`BEGIN
(
yy_°¨t_°ack
[
yy_°¨t_°ack_±r
]);

1864 
	}
}

1868 #i‚de‡
YY_NO_TOP_STATE


1869 
	$yy_t›_°©e
()

1871  
yy_°¨t_°ack
[
yy_°¨t_°ack_±r
 - 1];

1872 
	}
}

1875 #i‚de‡
YY_EXIT_FAILURE


1876 
	#YY_EXIT_FAILURE
 2

	)

1879 #ifde‡
YY_USE_PROTOS


1880 
	$yy_Áèl_îr‹
–
yyc⁄°
 
msg
[] )

1882 
	$yy_Áèl_îr‹
–
msg
 )

1883 
msg
[];

1886 (Ë
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

1887 
	`exô
–
YY_EXIT_FAILURE
 );

1888 
	}
}

1894 #unde‡
yyÀss


1895 
	#yyÀss
(
n
) \

1899 
yyãxt
[
yyÀng
] = 
yy_hﬁd_ch¨
; \

1900 
yy_c_buf_p
 = 
yyãxt
 + 
n
; \

1901 
yy_hﬁd_ch¨
 = *
yy_c_buf_p
; \

1902 *
yy_c_buf_p
 = '\0'; \

1903 
yyÀng
 = 
n
; \

1905  0 )

	)

1910 #i‚de‡
yyãxt_±r


1911 #ifde‡
YY_USE_PROTOS


1912 
	$yy_Êex_°∫˝y
–*
s1
, 
yyc⁄°
 *
s2
, 
n
 )

1914 
	$yy_Êex_°∫˝y
–
s1
, 
s2
, 
n
 )

1915 *
s1
;

1916 
yyc⁄°
 *
s2
;

1917 
n
;

1920 
i
;

1921  
i
 = 0; i < 
n
; ++i )

1922 
s1
[
i
] = 
s2
[i];

1923 
	}
}

1926 #ifde‡
YY_NEED_STRLEN


1927 #ifde‡
YY_USE_PROTOS


1928 
	$yy_Êex_°æí
–
yyc⁄°
 *
s
 )

1930 
	$yy_Êex_°æí
–
s
 )

1931 
yyc⁄°
 *
s
;

1934 
n
;

1935  
n
 = 0; 
s
[n]; ++n )

1938  
n
;

1939 
	}
}

1943 #ifde‡
YY_USE_PROTOS


1944 *
	$yy_Êex_Æloc
–
yy_size_t
 
size
 )

1946 *
	$yy_Êex_Æloc
–
size
 )

1947 
yy_size_t
 
size
;

1950  (*Ë
	`mÆloc
–
size
 );

1951 
	}
}

1953 #ifde‡
YY_USE_PROTOS


1954 *
	$yy_Êex_ªÆloc
–*
±r
, 
yy_size_t
 
size
 )

1956 *
	$yy_Êex_ªÆloc
–
±r
, 
size
 )

1957 *
±r
;

1958 
yy_size_t
 
size
;

1968  (*Ë
	`ªÆloc
–(*Ë
±r
, 
size
 );

1969 
	}
}

1971 #ifde‡
YY_USE_PROTOS


1972 
	$yy_Êex_‰ì
–*
±r
 )

1974 
	$yy_Êex_‰ì
–
±r
 )

1975 *
±r
;

1978 
	`‰ì
–
±r
 );

1979 
	}
}

1981 #i‡
YY_MAIN


1982 
	$maö
()

1984 
	`yyÀx
();

1986 
	}
}

	@get_interface3/libtc/src/conf-parse.l

25 %
›ti⁄
 
noyywøp


27 %
x
 
£˘


28 %
x
 
p_vÆ


29 %
x
 
s_mîge


31 
keyw‹d
 [[:
Ænum
:]
_
/-]+

32 
keyªf
 (\.\.\/)*{
keyw‹d
}

35 
	~<°rög.h
>

36 
	~<t˛i°.h
>

37 
	~<tˇŒoc.h
>

38 
	~"tcc⁄f.h
"

39 
	~"tcc-öã∫Æ.h
"

41 
	#yyãrmö©e
() \

42 if(
£˘i⁄_°ack
Ë
	`t˛i°_de°roy
(£˘i⁄_°ack, 
tc‰ì
); \

43 
YY_FLUSH_BUFFER
; \

44 
	`BEGIN
(
INITIAL
); \

45  
NULL


	)

47 
	#YY_DECL
 
c⁄f_£˘i⁄
 *
	`tcc_Àx
(*
d©a
, 
tcio_‚
 
r‚
, \

48 
c⁄f_£˘i⁄
 *
£c
)

	)

50 
	#YY_INPUT
(
buf
,
ªs
,
size
) { \

51 
ªs
 = 
c⁄f_fûe
.
	`ªad
(
buf
, 1, 
size
, c⁄f_fûe.
d©a
); \

52 
ªs
 =Ñe†<0? 
YY_NULL
:Ñes; \

53 }

	)

55 
	#PUSH_SECTION
(
q
, 
t
) do { \

56 
tcc_íåy
 *
ã
; \

57 *
n
 = 
yyãxt
+
q
; \

58 
yyãxt
[
yyÀng
-
q
] = 0; \

59 
ã
 = 
	`¸óã_íåy
(
cur_£˘i⁄
, 
n
, 
t
); \

60 
	`t˛i°_push
(
£˘i⁄_°ack
, 
cur_£˘i⁄
); \

61 
cur_£˘i⁄
 = 
ã
->
£˘i⁄
; \

62 } 0)

	)

65 *
	md©a
;

66 
tcio_‚
 
	mªad
;

67 } 
	gc⁄f_fûe
;

71 %% /* 
	$yyÀx
 */

72 
t˛i°_t
 *
£˘i⁄_°ack
 = 
	`t˛i°_√w
(
TC_LOCK_SLOPPY
);

73 
c⁄f_£˘i⁄
 *
cur_£˘i⁄
;

74 
tcc_íåy
 *
cur_íåy
 = 
NULL
;

75 
löe_num
 = 1;

76 
£˙
 = 0;

77 if(
£c
){

78 
cur_£˘i⁄
 = 
£c
;

80 
cur_£˘i⁄
 = 
	`c⁄f_√w
(
NULL
);

82 
c⁄f_fûe
.
d©a
 = data;

83 
c⁄f_fûe
.
ªad
 = 
r‚
;

85 
YY_FLUSH_BUFFER
;

86 
	`BEGIN
(
INITIAL
);

89 [ \
t
]

90 #.*
$


93 <
INITIAL
>{

94 
£˘i⁄
 {

95 
£˙
 = 0;

96 
	`BEGIN
(
£˘
);

98 {
keyw‹d
}/([[:
•a˚
:]]*:[[:•a˚:]]*{
keyªf
})*[[:space:]]*\{ {

99 
	`PUSH_SECTION
(0, 
TCC_SECTION
);

100 
£˙
 = 1;

101 
	`BEGIN
(
£˘
);

103 {
keyw‹d
}/([[:
•a˚
:]]*:[[:•a˚:]]*{
keyªf
})*[[:space:]]*\[ {

104 
	`PUSH_SECTION
(0, 
TCC_MSECTION
);

105 
£˙
 = 1;

106 
	`BEGIN
(
£˘
);

108 {
keyw‹d
} {

109 
cur_íåy
 = 
	`¸óã_íåy
(
cur_£˘i⁄
, 
yyãxt
, 
TCC_VALUE
);

110 
	`BEGIN
(
p_vÆ
);

112 [\}\]] { 
c⁄f_£˘i⁄
 *
£c
;

113 if((
£c
 = 
	`t˛i°_p›
(
£˘i⁄_°ack
)Ë!
NULL
){

114 
cur_£˘i⁄
 = 
£c
;

116 
	`Ârötf
(
°dîr
, "löê%d: U√x≥˘ed '%c'\n", 
löe_num
, 
yyãxt
[0]);

117 
	`yyãrmö©e
();

120 <<
EOF
>> {

121 if(
	`t˛i°_ôems
(
£˘i⁄_°ack
) == 0){

122 
	`t˛i°_de°roy
(
£˘i⁄_°ack
, 
NULL
);

123 
YY_FLUSH_BUFFER
;

124  
cur_£˘i⁄
;

126 
	`Ârötf
(
°dîr
, "UnexpectedÉnd of file.\n");

127 
	`yyãrmö©e
();

132 <
p_vÆ
>{

133 [+\-]?0x[[:
xdigô
:]]+ |

134 [+\-]?[[:
digô
:]]+ 
	`tcc_addöt
(
cur_íåy
, 
	`°πﬁl
(
yyãxt
, 
NULL
, 0));

135 [+\-]?[[:
digô
:]]+\.[[:digô:]]*([
eE
][+\-]?[[:digô:]]+)? 
	`tcc_addÊﬂt
(
cur_íåy
, 
	`°πod
(
yyãxt
, 
NULL
));

138 {
keyªf
} 
	`tcc_addªf
(
cur_íåy
, 
	`°rdup
(
yyãxt
));

139 
åue
 
	`tcc_addboﬁ
(
cur_íåy
, 1);

140 
Ál£
 
	`tcc_addboﬁ
(
cur_íåy
, 0);

141 [[:
•a˚
:]]*/[\]\}] |

142 [;\
n
] {

143 
	`BEGIN
(
INITIAL
);

144 if(
yyãxt
[0] == '\n')

145 
löe_num
++;

147 <<
EOF
>> 
	`Ârötf
(
°dîr
, "U√x≥˘edÉnd o‡fûe.\n"); 
	`yyãrmö©e
();

150 <
£˘
>{

152 if(
£˙
 == 0){

153 
	`PUSH_SECTION
(1, 
TCC_SECTION
);

154 
£˙
 = 1;

156 
	`Ârötf
(
°dîr
, "line %d: Expected '{', found %s.\n",

157 
löe_num
, 
yyãxt
);

158 
	`yyãrmö©e
();

162 if(
£˙
){

163 
	`BEGIN
(
INITIAL
);

165 
	`Ârötf
(
°dîr
, "löê%d: Missög se˘i⁄Çame.\n", 
löe_num
);

166 
	`yyãrmö©e
();

169 : 
	`BEGIN
(
s_mîge
);

172 <
s_mîge
>[[:
Ænum
:]
_
/.-]+ {

173 
	`t˛i°_push
(
cur_£˘i⁄
->
mîge
, 
	`°rdup
(
yyãxt
));

174 
	`BEGIN
(
£˘
);

177 <*>\
n
 
löe_num
++;

178 <*>[^ \
t
\
n
;]+ 
	`Ârötf
(
°dîr
, "löê%d: Sy¡axÉº‹Çó∏'%s'.\n", 
löe_num
, 
yyãxt
); 
	`yyãrmö©e
();

	@get_interface3/libtc/src/conf.c

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<t˘y≥s.h
>

28 
	~<tc°rög.h
>

29 
	~<t˛i°.h
>

30 
	~<°d¨g.h
>

31 
	~<±hªad.h
>

32 
	~<tˇŒoc.h
>

33 
	~<˘y≥.h
>

34 
	~<‚m©ch.h
>

35 
	~<tcc⁄f.h
>

36 
	~"tcc-öã∫Æ.h
"

38 
tcc_wrôì¡ry
(
tcc_íåy
 *, *
fûe
, 
lv
, 
tcio_‚
);

39 
tcc_wrôe£˘i⁄
(
c⁄f_£˘i⁄
 *
ts
, *
fûe
, 
lv
,

40 *
d
, 
tcio_‚
);

41 
tcc_wrôñi°
(
t˛i°_t
 *
l
, *
fûe
, 
lv
, 
tcio_‚
);

43 
±hªad_muãx_t
 
	gÊex_mut
 = 
PTHREAD_MUTEX_INITIALIZER
;

45 
	#mö
(
a
, 
b
Ë(◊)<(b)?◊):(b))

	)

48 
	$dumµ©h
(
tcc⁄f_£˘i⁄_t
 *
ts
)

50 if(
ts
->
∑ª¡
)

51 
	`dumµ©h
(
ts
->
∑ª¡
);

52 
	`Ârötf
(
°dîr
, "%s/", 
ts
->
£c
->
«me
);

53 
	}
}

56 
	$tcc⁄f_dumµ©h
(
tcc⁄f_£˘i⁄_t
 *
ts
)

58 if(
ts
){

59 
	`dumµ©h
(
ts
);

60 
	`Ârötf
(
°dîr
, "\n");

62 
	`Ârötf
(
°dîr
, "path = NULL\n");

64 
	}
}

67 
	$tcc⁄f_‰ì
(*
p
)

69 
tcc⁄f_£˘i⁄_t
 *
s
 = 
p
;

70 
	`tc‰ì
(
s
->
£c
);

71 if(
s
->
∑ª¡
)

72 
	`tc‰ì
(
s
->
∑ª¡
);

73 
	}
}

76 
tcc⁄f_£˘i⁄_t
 *

77 
	$tcc⁄f_lﬂd
(
tcc⁄f_£˘i⁄_t
 *
ts
, *
d©a
, 
tcio_‚
 
r‚
)

79 
c⁄f_£˘i⁄
 *
£c
 = 
ts
?Ås->£c: 
NULL
;

80 
	`±hªad_muãx_lock
(&
Êex_mut
);

81 
£c
 = 
	`tcc_Àx
(
d©a
, 
r‚
, sec);

82 
	`±hªad_muãx_u∆ock
(&
Êex_mut
);

84 if(!
ts
 && 
£c
)

85 
ts
 = 
	`tˇŒocdz
((*ts), 
NULL
, 
tcc⁄f_‰ì
);

86 if(
ts
 && 
£c
)

87 
ts
->
£c
 = sec;

89  
£c
? 
ts
: 
NULL
;

90 
	}
}

92 
tcc⁄f_£˘i⁄_t
 *

93 
	$tcc⁄f_lﬂd_fûe
(
tcc⁄f_£˘i⁄_t
 *
£c
, *
fûe
)

95 
FILE
 *
f
;

96 
tcc⁄f_£˘i⁄_t
 *
s
;

97 if((
f
 = 
	`f›í
(
fûe
, "r")Ë=
NULL
)

98  
£c
;

99 
s
 = 
	`tcc⁄f_lﬂd
(
£c
, 
f
, (
tcio_‚
Ë
‰ód
);

100 
	`f˛o£
(
f
);

101  
s
;

102 
	}
}

104 
	s°rög_ªad
 {

105 c⁄° *
d
;

106 
s
;

107 
p
;

110 
size_t


111 
	$ªad_°rög
(*
p
, 
size_t
 
s
, size_à
c
, *
d
)

113 
°rög_ªad
 *
§
 = 
d
;

114 
b
 = 
s
 * 
c
;

116 
b
 = 
	`mö
(b, 
§
->
s
 - sr->
p
);

117 
	`mem˝y
(
p
, 
§
->
d
 + sr->p, 
b
);

118 
§
->
p
 +
b
;

120  
b
 / 
s
;

121 
	}
}

123 
tcc⁄f_£˘i⁄_t
 *

124 
	$tcc⁄f_lﬂd_°rög
(
tcc⁄f_£˘i⁄_t
 *
£c
, c⁄° *
c⁄f
, 
size
)

126 
°rög_ªad
 
§
;

128 if(
size
 < 0)

129 
size
 = 
	`°æí
(
c⁄f
);

130 
§
.
d
 = 
c⁄f
;

131 
§
.
s
 = 
size
;

132 
§
.
p
 = 0;

134  
	`tcc⁄f_lﬂd
(
£c
, &
§
, 
ªad_°rög
);

135 
	}
}

139 
	$tcc⁄f_wrôe
(
tcc⁄f_£˘i⁄_t
 *
tcc
, *
fûe
, 
tcio_‚
 
o‚
)

141 
	`tcc_wrôñi°
(
tcc
->
£c
->
íåõs
, 
fûe
, 0, 
o‚
);

143 
	}
}

146 
	$cmp_°r_£c
(c⁄° *
p1
, c⁄° *
p2
)

148 c⁄° *
n
 = 
p1
;

149 c⁄° 
tcc_íåy
 *
ã
 = 
p2
;

150 
ã
->
ty≥
){

151 
TCC_SECTION
:

152 
TCC_MSECTION
:

153  
	`°rcmp
(
n
, 
ã
->
£˘i⁄
->
«me
);

156 
	}
}

158 
c⁄f_£˘i⁄
 *

159 
	$gë£˘i⁄
(
tcc⁄f_£˘i⁄_t
 **
ts
, 
c⁄f_£˘i⁄
 *
£c
, *
«me
)

161 
tcc⁄f_£˘i⁄_t
 *
∑th
 = 
NULL
;

162 *
tmp
 = 
	`°rdup
(
«me
);

163 *
ä
 = 
tmp
;

164 *
s
;

166 if(
ts
)

167 
∑th
 = *
ts
;

176 (
s
 = 
	`°r£p
(&
tmp
, "/")Ë!
NULL
){

177 if(*
s
 == 0)

180 if(!
	`°rcmp
(
s
, "..")){

181 if(
∑th
 &&Ö©h->
∑ª¡
){

182 
tcc⁄f_£˘i⁄_t
 *
p
 = 
∑th
;

183 
∑th
 = 
	`t¸ef
’©h->
∑ª¡
);

184 
£c
 = 
∑th
->sec;

185 
	`tc‰ì
(
p
);

186 } if(
£c
->
∑ª¡
){

187 
£c
 = sec->
∑ª¡
;

190 
tcc⁄f_£˘i⁄_t
 *
≈
;

191 
tcc_íåy
 *
ã
;

193 if(
	`t˛i°_föd
(
£c
->
íåõs
, 
s
, &
ã
, 
cmp_°r_£c
)){

194 
t˛i°_t
 *
mli°
 = 
£c
->
mîge
;

195 
t˛i°_ôem_t
 *
li
 = 
NULL
;

196 *
m
;

198 
£c
 = 
NULL
;

200 (
m
 = 
	`t˛i°_¥ev
(
mli°
, &
li
))){

201 
c⁄f_£˘i⁄
 *
ps
, *
ms
;

202 if(
∑th
)

203 
ps
 = 
∑th
->
∑ª¡
?Ö©h->∑ª¡->
£c
:Öath->sec;

205 
ps
 = 
£c
->
∑ª¡
? sec->parent: sec;

206 
ms
 = 
	`gë£˘i⁄
(
NULL
, 
ps
, 
m
);

207 if(
ms
 && (
£c
 = 
	`gë£˘i⁄
(
NULL
, ms, 
s
)))

210 if(
li
)

211 
	`t˛i°_u∆ock
(
£c
->
mîge
, 
li
);

213 
£c
 = 
ã
->
£˘i⁄
;

216 if(!
£c
)

219 if(
∑th
){

220 
≈
 = 
	`tˇŒocdz
((*≈), 
NULL
, 
tcc⁄f_‰ì
);

221 
≈
->
£c
 = 
	`t¸ef
(sec);

222 
≈
->
∑ª¡
 = 
∑th
;

223 
∑th
 = 
≈
;

229 if(
ts
)

230 *
ts
 = 
∑th
;

232 
	`‰ì
(
ä
);

233  
£c
;

234 
	}
}

236 
tcc⁄f_£˘i⁄_t
 *

237 
	$tcc⁄f_gë£˘i⁄
(
tcc⁄f_£˘i⁄_t
 *
ts
, *
«me
)

239 
	`t¸ef
(
ts
);

240 if(!
«me
 || 
	`gë£˘i⁄
(&
ts
,Ås->
£c
,Çame))

241  
ts
;

242 
	`tc‰ì
(
ts
);

243  
NULL
;

244 
	}
}

247 
	$cmp_°r_vÆ
(c⁄° *
p1
, c⁄° *
p2
)

249 c⁄° *
n
 = 
p1
;

250 c⁄° 
tcc_íåy
 *
ã
 = 
p2
;

252 if(
ã
->
ty≥
 =
TCC_VALUE
)

253  
	`°rcmp
(
n
, 
ã
->
vÆue
.
key
);

255 
	}
}

258 
	$cmp_glob_vÆ
(c⁄° *
p1
, c⁄° *
p2
)

260 c⁄° *
n
 = 
p1
;

261 c⁄° 
tcc_íåy
 *
ã
 = 
p2
;

263 if(
ã
->
ty≥
 =
TCC_VALUE
)

264  
	`‚m©ch
(
n
, 
ã
->
vÆue
.
key
, 0);

266 
	}
}

268 
tcc_íåy
 *

269 
	$gëvÆue
(
c⁄f_£˘i⁄
 *
£c
, *
«me
, 
tcc⁄f_£˘i⁄_t
 **
ts
)

271 
tcc⁄f_£˘i⁄_t
 *
∑th
 = 
NULL
;

272 *
tmp
 = 
	`°rdup
(
«me
);

273 *
v
;

274 
tcc_íåy
 *
ã
 = 
NULL
;

283 if((
v
 = 
	`°ºchr
(
tmp
, '/')Ë!
NULL
){

284 *
v
++ = 0;

285 if(!(
£c
 = 
	`gë£˘i⁄
(
ts
, sec, 
tmp
)))

286 
íd
;

288 
v
 = 
tmp
;

291 if(
	`t˛i°_föd
(
£c
->
íåõs
, 
v
, &
ã
, 
cmp_°r_vÆ
)){

292 
t˛i°_ôem_t
 *
li
 = 
NULL
;

293 *
m
;

294 (
m
 = 
	`t˛i°_¥ev
(
£c
->
mîge
, &
li
))){

295 
c⁄f_£˘i⁄
 *
ps
, *
ms
;

296 if(
∑th
)

297 
ps
 = 
∑th
->
∑ª¡
?Ö©h->∑ª¡->
£c
:Öath->sec;

299 
ps
 = 
£c
->
∑ª¡
? sec->parent: sec;

300 
ms
 = 
	`gë£˘i⁄
(
NULL
, 
ps
, 
m
);

301 if(
ms
 && (
ã
 = 
	`gëvÆue
(ms, 
v
, 
NULL
)))

304 if(
li
)

305 
	`t˛i°_u∆ock
(
£c
->
mîge
, 
li
);

309 
íd
:

310 
	`‰ì
(
tmp
);

311  
ã
;

312 
	}
}

314 
˝_vÆ
(
tcc⁄f_£˘i⁄_t
 *
£c
, 
tcc_vÆue
 *
tv
, 
ty≥
, *
d°
);

317 
	$vto°r
(*
«me
, *
_ts
)

319 
tcc⁄f_£˘i⁄_t
 *
ts
 = 
_ts
;

320 
t˛i°_ôem_t
 *
li
 = 
NULL
;

321 
tcc_vÆue
 *
tv
;

322 
tcc_íåy
 *
ã
;

323 
l
 = 0;

324 *
s
 = 
NULL
;

325 *
p
 = 
s
;

326 
•
 = 0;

328 
	#ext
(
n
) do { \

329 
o
 = 
p
 - 
s
; \

330 
s
 = 
	`ªÆloc
(s, 
l
 +
n
); \

331 
p
 = 
s
 + 
o
; \

332 } 0)

	)

334 
	`t¸ef
(
ts
);

336 if(!(
ã
 = 
	`gëvÆue
(
ts
->
£c
, 
«me
, &ts)))

337  
NULL
;

339 (
tv
 = 
	`t˛i°_√xt
(
ã
->
vÆue
.
vÆues
, &
li
))){

341 
uöt64_t
 
i
;

342 
d
;

343 *
s
;

344 } 
v
;

345 
¶
;

347 
	`˝_vÆ
(
ts
, 
tv
,Åv->
ty≥
 | 
TCC_LONG
, &
v
);

349 if(
•
)

350 *
p
++ = ' ';

352 
tv
->
ty≥
 & 
TCC_TYPEMASK
){

353 
TCC_INTEGER
:

354 
	`ext
(22);

355 
p
 +
	`¢¥ötf
’, 22, "%Œi", 
v
.
i
);

357 
TCC_FLOAT
:

358 
	`ext
(40);

359 
p
 +
	`¢¥ötf
’, 40, "%lf", 
v
.
d
);

361 
TCC_REF
:

362 
v
.
s
 = 
	`vto°r
(
tv
->
vÆue
.
°rög
, 
ts
);

363 
TCC_STRING
:

364 
¶
 = 
	`°æí
(
v
.
s
);

365 
	`ext
(
¶
 + 1);

366 
	`°r˝y
(
p
, 
v
.
s
);

367 
	`‰ì
(
v
.
s
);

368 
p
 +
¶
;

371 
•
 = 1;

374 *
p
 = 0;

376 #unde‡
ext


377 
	`tc‰ì
(
ts
);

378  
s
;

379 
	}
}

382 
	$˝_vÆ
(
tcc⁄f_£˘i⁄_t
 *
ts
, 
tcc_vÆue
 *
tv
, 
ty≥
, *
d°
)

384 
tv
->
ty≥
 & 
TCC_TYPEMASK
){

385 
TCC_STRING
:

386 if(
tv
->
ty≥
 & 
TCC_EXPAND
)

387 *(**Ë
d°
 = 
	`tc°ªxp
(
tv
->
vÆue
.
°rög
, "(", ")", ':',

388 
vto°r
, 
ts
,

389 
TCSTREXP_ESCAPE
 | 
TCSTREXP_FREE
);

391 *(**Ë
d°
 = 
	`°rdup
(
tv
->
vÆue
.
°rög
);

394 
TCC_INTEGER
:

395 
ty≥
 & ~
TCC_TYPEMASK
){

397 *(
öt32_t
 *Ë
d°
 = (öt32_tË
tv
->
vÆue
.
öãgî
;

399 
TCC_UNSIGNED
:

400 *(
uöt32_t
 *Ë
d°
 = (uöt32_tË
tv
->
vÆue
.
öãgî
;

402 
TCC_LONG
:

403 *(
öt64_t
 *Ë
d°
 = (öt64_tË
tv
->
vÆue
.
öãgî
;

405 
TCC_LONG
|
TCC_UNSIGNED
:

406 *(
uöt64_t
 *Ë
d°
 = (uöt64_tË
tv
->
vÆue
.
öãgî
;

411 
TCC_FLOAT
:

412 
ty≥
 & ~
TCC_TYPEMASK
){

414 *(*Ë
d°
 = (Ë
tv
->
vÆue
.
Êﬂtög
;

416 
TCC_LONG
:

417 *(*Ë
d°
 = (Ë
tv
->
vÆue
.
Êﬂtög
;

424 
TCC_REF
:

425 if(
ty≥
 & 
TCC_IGNORE
)

428 
ty≥
 & ~
TCC_UNSIGNED
){

429 
TCC_INTEGER
:

430 *(
uöt32_t
 *Ë
d°
 = 0;

432 
TCC_INTEGER
|
TCC_LONG
:

433 *(
öt64_t
 *Ë
d°
 = 0;

435 
TCC_FLOAT
:

436 *(*Ë
d°
 = 0;

438 
TCC_FLOAT
|
TCC_LONG
:

439 *(*Ë
d°
 = 0;

441 
TCC_STRING
:

442 *(**Ë
d°
 = 
NULL
;

448 
	`Ârötf
(
°dîr
, "BUG: badÅy≥ %x\n", 
ty≥
);

452 
	}
}

455 
	$gëíåy
(
tcc⁄f_£˘i⁄_t
 *
ts
, 
tcc_íåy
 *
ã
, *
fmt
,

456 
va_li°
 
¨gs
, **
èû
)

458 *
f
 = 
fmt
, *
p
;

459 
n
 = 0;

460 
t˛i°_ôem_t
 *
li
 = 
NULL
;

461 
tcc_vÆue
 *
tv
;

462 
va_li°
 
ac
;

464 (
p
 = 
	`°rchr
(
f
, '%')Ë!
NULL
){

465 *
de°
;

466 
ty≥
 = 0;

468 if((
tv
 = 
	`t˛i°_√xt
(
ã
->
vÆue
.
vÆues
, &
li
)Ë=
NULL
)

471 
f
 = 
p
;

473 if(
tv
->
ty≥
 =
TCC_REF
 && 
	`°rcmp
—v->
vÆue
.
°rög
, "NULL")){

474 
tcc⁄f_£˘i⁄_t
 *
rs
 = 
	`t¸ef
(
ts
);

475 
tcc_íåy
 *
ª
;

476 
r
;

478 if(!(
ª
 = 
	`gëvÆue
(
rs
->
£c
, 
tv
->
vÆue
.
°rög
, &rs))){

479 
n
 = -n;

482 #ifde‡
__va_c›y


483 
	`__va_c›y
(
ac
, 
¨gs
);

485 
ac
 = 
¨gs
;

487 
r
 = 
	`gëíåy
(
ts
, 
ª
, 
f
, 
ac
, &f);

488 
	`tc‰ì
(
rs
);

489 if(
r
 < 0){

490 
n
 +-
r
;

493 
n
 +
r
;

494 
r
--)

495 
	`va_¨g
(
¨gs
, *);

499 
de°
 = 
	`va_¨g
(
¨gs
, *);

500 
f
++;

502 !(
ty≥
 & 
TCC_TYPEMASK
Ë&& *
f
){

503 *
f
){

505 
ty≥
 |
TCC_STRING
;

510 
ty≥
 |
TCC_INTEGER
;

514 
ty≥
 |
TCC_FLOAT
;

518 
ty≥
 |
TCC_LONG
;

522 
ty≥
 |
TCC_UNSIGNED
;

526 
ty≥
 |
TCC_IGNORE
;

529 
f
++;

532 if(
	`˝_vÆ
(
ts
, 
tv
, 
ty≥
, 
de°
) < 0){

533 
	`Ârötf
(
°dîr
, "Ty≥ mism©ch i¿'%s'.\n", 
ã
->
vÆue
.
key
);

534 
n
 = -n;

537 
n
++;

541 if(
èû
)

542 *
èû
 = 
f
;

544 if(
li
)

545 
	`t˛i°_u∆ock
(
ã
->
vÆue
.
vÆues
, 
li
);

547  
n
;

548 
	}
}

551 
	$tcc⁄f_gëvÆue
(
tcc⁄f_£˘i⁄_t
 *
£c
, *
«me
, *
fmt
, ...)

553 
va_li°
 
¨gs
;

554 
tcc_íåy
 *
ã
;

555 
n
;

557 
	`t¸ef
(
£c
);

558 if(!(
ã
 = 
	`gëvÆue
(
£c
->£c, 
«me
, &sec))){

559 
	`tc‰ì
(
£c
);

563 
	`va_°¨t
(
¨gs
, 
fmt
);

564 
n
 = 
	`gëíåy
(
£c
, 
ã
, 
fmt
, 
¨gs
, 
NULL
);

565 
	`va_íd
(
¨gs
);

567 
	`tc‰ì
(
£c
);

568  
n
 < 0? -n:Ç;

569 
	}
}

572 
t˛i°_ôem_t
 *
li
, *
ml
;

573 *
n
;

574 
tcc⁄f_£˘i⁄_t
 *
£c
, *
ts
;

575 *
v§
;

576 } 
	tv_°©e
;

578 
tcc⁄f_£˘i⁄_t
 *

579 
	$√xt_mîge
(
tcc⁄f_£˘i⁄_t
 *
£c
, 
v_°©e
 *
vs
)

581 
tcc⁄f_£˘i⁄_t
 *
s
 = 
NULL
;

582 *
m
;

584 (
m
 = 
	`t˛i°_√xt
(
£c
->£c->
mîge
, &
vs
->
ml
))){

585 
tcc⁄f_£˘i⁄_t
 *
ms
 = 
	`tcc⁄f_gë£˘i⁄
(
£c
->
∑ª¡
, 
m
);

586 if(
ms
){

587 
s
 = 
ms
;

592  
s
;

593 
	}
}

595 
v_°©e
 *

596 
	$v°©e
(
tcc⁄f_£˘i⁄_t
 *
£c
, *
«me
, **
°©e
)

598 
v_°©e
 *
vs
 = *
°©e
;

600 if(!
vs
){

601 *
tmp
 = 
	`°rdup
(
«me
);

602 *
v
 = 
	`°ºchr
(
tmp
, '/');

603 
tcc⁄f_£˘i⁄_t
 *
ms
;

605 if(
v
){

606 *
v
++ = 0;

607 if(!(
£c
 = 
	`tcc⁄f_gë£˘i⁄
(£c, 
tmp
))){

608 
	`‰ì
(
tmp
);

609  
NULL
;

612 
v
 = 
tmp
;

613 
	`t¸ef
(
£c
);

616 
vs
 = *
°©e
 = 
	`ˇŒoc
(1, (
v_°©e
));

617 
vs
->
n
 = 
	`°rdup
(
v
);

618 
vs
->
ts
 = 
£c
;

619 
ms
 = 
	`√xt_mîge
(
£c
, 
vs
);

620 if(
ms
)

621 
£c
 = 
ms
;

622 
vs
->
£c
 = sec;

623 
	`‰ì
(
tmp
);

626  
vs
;

627 
	}
}

630 
	$vs‰ì
(
v_°©e
 *
vs
)

632 
	`‰ì
(
vs
->
n
);

633 
	`tc‰ì
(
vs
->
ts
);

634 
	`‰ì
(
vs
);

635 
	}
}

638 
	$tcc⁄f_√xtvÆue_vc
(
tcc⁄f_£˘i⁄_t
 *
ts
, *
«me
, **
°©e
,

639 **
∫ame
, *
fmt
, 
va_li°
 
¨gs
, 
tccom∑ª_‚
 
cmp
)

641 
v_°©e
 *
vs
;

642 
tcc_íåy
 *
ã
;

643 
n
 = 0;

645 if(!(
vs
 = 
	`v°©e
(
ts
, 
«me
, 
°©e
)))

648 
vs
->
ml
){

649 
n
 = 
	`tcc⁄f_√xtvÆue_vc
(
vs
->
£c
, vs->n, &vs->
v§
, 
∫ame
,

650 
fmt
, 
¨gs
, 
cmp
);

651 if(!
vs
->
v§
){

652 
tcc⁄f_£˘i⁄_t
 *
ms
 = 
	`√xt_mîge
(
vs
->
ts
, vs);

653 
	`tc‰ì
(
vs
->
£c
);

654 if(
ms
){

655 
vs
->
£c
 = 
ms
;

657 
vs
->
£c
 = vs->
ts
;

660 if(
n
 > 0){

661  
n
;

665 
ã
 = 
	`t˛i°_¥ev_m©ched
(
vs
->
£c
->£c->
íåõs
, &vs->
li
, vs->
n
, 
cmp
);

666 if(
ã
){

667 
n
 = 
	`gëíåy
(
vs
->
£c
, 
ã
, 
fmt
, 
¨gs
, 
NULL
);

668 if(
∫ame
)

669 *
∫ame
 = 
ã
->
vÆue
.
key
;

671 *
°©e
 = 
NULL
;

672 
	`vs‰ì
(
vs
);

675  
n
 < 0? -n:Ç;

676 
	}
}

679 
	$tcc⁄f_√xtvÆue_v
(
tcc⁄f_£˘i⁄_t
 *
ts
, *
«me
, **
°©e
,

680 *
fmt
, 
va_li°
 
¨gs
)

682  
	`tcc⁄f_√xtvÆue_vc
(
ts
, 
«me
, 
°©e
, 
NULL
, 
fmt
, 
¨gs
, 
cmp_°r_vÆ
);

683 
	}
}

686 
	$tcc⁄f_√xtvÆue
(
tcc⁄f_£˘i⁄_t
 *
£c
, *
«me
, **
°©e
,

687 *
fmt
, ...)

689 
va_li°
 
¨gs
;

690 
n
;

692 
	`va_°¨t
(
¨gs
, 
fmt
);

693 
n
 = 
	`tcc⁄f_√xtvÆue_vc
(
£c
, 
«me
, 
°©e
, 
NULL
, 
fmt
, 
¨gs
, 
cmp_°r_vÆ
);

694 
	`va_íd
(
¨gs
);

695  
n
;

696 
	}
}

699 
	$tcc⁄f_√xtvÆue_g
(
tcc⁄f_£˘i⁄_t
 *
£c
, *
glob
, **
°©e
,

700 **
«me
, *
fmt
, ...)

702 
va_li°
 
¨gs
;

703 
n
;

705 
	`va_°¨t
(
¨gs
, 
fmt
);

706 
n
 = 
	`tcc⁄f_√xtvÆue_vc
(
£c
, 
glob
, 
°©e
, 
«me
, 
fmt
, 
¨gs
, 
cmp_glob_vÆ
);

707 
	`va_íd
(
¨gs
);

708  
n
;

709 
	}
}

711 
tcc⁄f_£˘i⁄_t
 *

712 
	$tcc⁄f_√xt£˘i⁄
(
tcc⁄f_£˘i⁄_t
 *
ts
, *
«me
, **
°©e
)

714 
tcc⁄f_£˘i⁄_t
 *
ns
;

715 
v_°©e
 *
vs
;

716 
c⁄f_£˘i⁄
 *
£c
 = 
NULL
;

718 if(!(
vs
 = 
	`v°©e
(
ts
, 
«me
, 
°©e
)))

719  
NULL
;

721 
vs
->
ml
){

722 
tcc⁄f_£˘i⁄_t
 *
s
 = 
	`tcc⁄f_√xt£˘i⁄
(
vs
->
£c
, vs->
n
, &vs->
v§
);

723 if(!
vs
->
v§
){

724 
tcc⁄f_£˘i⁄_t
 *
ms
 = 
	`√xt_mîge
(
vs
->
ts
, vs);

725 
	`tc‰ì
(
vs
->
£c
);

726 if(
ms
){

727 
vs
->
£c
 = 
ms
;

729 
vs
->
£c
 = vs->
ts
;

732 if(
s
){

733 
£c
 = 
s
->sec;

734 
	`tc‰ì
(
s
);

739 if(!
£c
){

740 
tcc_íåy
 *
ã
 = 
	`t˛i°_¥ev_m©ched
(
vs
->
£c
->£c->
íåõs
, &vs->
li
,

741 
vs
->
n
, 
cmp_°r_£c
);

742 if(!
ã
){

743 *
°©e
 = 
NULL
;

744 
	`vs‰ì
(
vs
);

745  
NULL
;

747 
£c
 = 
ã
->
£˘i⁄
;

750 
ns
 = 
	`tˇŒocd
((*ns), 
NULL
, 
tcc⁄f_‰ì
);

751 
ns
->
£c
 = 
	`t¸ef
(sec);

752 
ns
->
∑ª¡
 = 
	`t¸ef
(
ts
);

753  
ns
;

754 
	}
}

756 
tcc⁄f_£˘i⁄_t
 *

757 
	$tcc⁄f_mîge
(
tcc⁄f_£˘i⁄_t
 *
£c
,Åcc⁄f_£˘i⁄_à*
s2
)

759 
t˛i°_ôem_t
 *
li
 = 
NULL
;

760 
tcc_íåy
 *
ã
;

761 *
m
;

763 if(!
£c
){

764 
£c
 = 
	`tcc⁄f_√w
(
NULL
);

765 if(
s2
->
∑ª¡
)

766 
£c
->
∑ª¡
 = 
	`t¸ef
(
s2
->parent);

769 
£c
->£c->
∑ª¡
 = 
s2
->sec->parent;

772 (
ã
 = 
	`t˛i°_√xt
(
s2
->
£c
->
íåõs
, &
li
)))

773 
	`t˛i°_push
(
£c
->£c->
íåõs
, 
	`t¸ef
(
ã
));

775 (
m
 = 
	`t˛i°_√xt
(
s2
->
£c
->
mîge
, &
li
)))

776 
	`t˛i°_push
(
£c
->£c->
mîge
, 
	`°rdup
(
m
));

778  
£c
;

779 
	}
}

782 
	$‰ì_vÆue
(*
p
)

784 
tcc_vÆue
 *
tv
 = 
p
;

785 
tv
->
ty≥
 & 
TCC_TYPEMASK
){

786 
TCC_STRING
:

787 
TCC_REF
:

788 
	`‰ì
(
tv
->
vÆue
.
°rög
);

790 
	`‰ì
(
tv
);

791 
	}
}

794 
	$‰ì_íåy
(*
p
)

796 
tcc_íåy
 *
ã
 = 
p
;

798 
ã
->
ty≥
){

799 
TCC_VALUE
:

800 
	`t˛i°_de°roy
(
ã
->
vÆue
.
vÆues
, 
‰ì_vÆue
);

801 
	`‰ì
(
ã
->
vÆue
.
key
);

804 
TCC_SECTION
:

805 
TCC_MSECTION
:

806 
	`tc‰ì
(
ã
->
£˘i⁄
);

809 
	}
}

812 
	$c⁄f_‰ì
(*
p
)

814 
c⁄f_£˘i⁄
 *
£c
 = 
p
;

815 
	`t˛i°_de°roy
(
£c
->
íåõs
, 
tc‰ì
);

816 
	`t˛i°_de°roy
(
£c
->
mîge
, 
‰ì
);

817 if(
£c
->
«me
)

818 
	`‰ì
(
£c
->
«me
);

819 
	}
}

821 
c⁄f_£˘i⁄
 *

822 
	$c⁄f_√w
(*
«me
)

824 
c⁄f_£˘i⁄
 *
£c
;

825 
£c
 = 
	`tˇŒocdz
((*£c), 
NULL
, 
c⁄f_‰ì
);

826 
£c
->
«me
 =Çame? 
	`°rdup
“ame): 
NULL
;

827 
£c
->
íåõs
 = 
	`t˛i°_√w
(
TC_LOCK_SLOPPY
);

828 
£c
->
mîge
 = 
	`t˛i°_√w
(
TC_LOCK_SLOPPY
);

829  
£c
;

830 
	}
}

832 
tcc⁄f_£˘i⁄_t
 *

833 
	$tcc⁄f_√w
(*
«me
)

835 
tcc⁄f_£˘i⁄_t
 *
ts
 = 
	`tˇŒocdz
((*ts), 
NULL
, 
tcc⁄f_‰ì
);

836 
ts
->
£c
 = 
	`c⁄f_√w
(
«me
);

837  
ts
;

838 
	}
}

840 
tcc_íåy
 *

841 
	$Æloc_íåy
(
c⁄f_£˘i⁄
 *
£c
, *
«me
, 
ty≥
)

843 
tcc_íåy
 *
ã
 = 
NULL
;

844 
ã
 = 
	`tˇŒocd
((*ã), 
NULL
, 
‰ì_íåy
);

845 (
ã
->
ty≥
 =Åype)){

846 
TCC_SECTION
:

847 
TCC_MSECTION
:

848 
ã
->
£˘i⁄
 = 
	`c⁄f_√w
(
«me
);

849 
ã
->
£˘i⁄
->
∑ª¡
 = 
£c
;

851 
TCC_VALUE
:

852 
ã
->
vÆue
.
key
 = 
	`°rdup
(
«me
);

853 
ã
->
vÆue
.
vÆues
 = 
	`t˛i°_√w
(
TC_LOCK_SLOPPY
);

856  
ã
;

857 
	}
}

859 
tcc_íåy
 *

860 
	$¸óã_íåy
(
c⁄f_£˘i⁄
 *
£c
, *
«me
, 
ty≥
)

862 *
tmp
 = 
	`°rdup
(
«me
);

863 *
tmpf
 = 
tmp
;

864 *
s
, *
v
;

865 
tcc_íåy
 *
ã
;

866 
¸t
;

867 
tccom∑ª_‚
 
cmp
 = 
NULL
;

869 if((
v
 = 
	`°ºchr
(
tmp
, '/'))){

870 *
v
++ = 0;

872 
v
 = 
«me
;

873 *
tmp
 = 0;

876 (
s
 = 
	`°r£p
(&
tmp
, "/")Ë!
NULL
){

877 if(*
s
 == 0)

880 if(
	`t˛i°_föd
(
£c
->
íåõs
, 
s
, &
ã
, 
cmp_°r_£c
) != 0){

881 
ã
 = 
	`Æloc_íåy
(
£c
, 
s
, 
TCC_SECTION
);

882 
	`t˛i°_unshi·
(
£c
->
íåõs
, 
ã
);

884 
£c
 = 
ã
->
£˘i⁄
;

887 
ty≥
){

888 
TCC_VALUE
:

889 
¸t
 = 1;

890 
cmp
 = 
cmp_°r_vÆ
;

893 
TCC_SECTION
:

894 
¸t
 = 0;

895 
cmp
 = 
cmp_°r_£c
;

898 
TCC_MSECTION
:

899 
¸t
 = 1;

900 
cmp
 = 
cmp_°r_£c
;

904 if(
¸t
 || 
	`t˛i°_föd
(
£c
->
íåõs
, 
v
, &
ã
, 
cmp
) != 0){

905 
ã
 = 
	`Æloc_íåy
(
£c
, 
v
, 
ty≥
);

906 
	`t˛i°_unshi·
(
£c
->
íåõs
, 
ã
);

909 
	`‰ì
(
tmpf
);

910  
ã
;

911 
	}
}

914 
	$tcc⁄f_£tvÆue
(
tcc⁄f_£˘i⁄_t
 *
ts
, *
«me
, *
fmt
, ...)

916 
c⁄f_£˘i⁄
 *
£c
 = 
ts
->sec;

917 
tcc_íåy
 *
ã
;

918 
va_li°
 
¨gs
;

919 *
f
 = 
fmt
;

921 
ã
 = 
	`¸óã_íåy
(
£c
, 
«me
, 
TCC_VALUE
);

923 
	`va_°¨t
(
¨gs
, 
fmt
);

924 (
f
 = 
	`°rchr
(f, '%')Ë!
NULL
){

925 
 g
 = 0;

927 if(*++
f
 == 'l'){

928 
 g
 = 1;

929 
f
++;

932 *
f
){

935 
	`tcc_addöt
(
ã
, 
 g
? 
	`va_¨g
(
¨gs
, ): va_arg(args, ));

939 
	`tcc_addÊﬂt
(
ã
, 
	`va_¨g
(
¨gs
, ));

943 
	`tcc_add°rög
(
ã
, 
	`°rdup
(
	`va_¨g
(
¨gs
, *)), 0);

949 
	}
}

952 
	$tcc⁄f_˛órvÆue
(
tcc⁄f_£˘i⁄_t
 *
ts
, *
«me
)

954 
c⁄f_£˘i⁄
 *
£c
 = 
NULL
;

955 *
n
 = 
	`°rdup
(
«me
);

956 *
p
 = 
	`°ºchr
(
n
, '/');

957 
tcc⁄f_£˘i⁄_t
 *
s
 = 
NULL
;

958 
c
 = 0;

960 if(
p
){

961 *
p
++ = 0;

962 if((
s
 = 
	`tcc⁄f_gë£˘i⁄
(
ts
, 
n
)))

963 
£c
 = 
s
->sec;

965 
p
 = 
n
;

966 
£c
 = 
ts
->sec;

969 if(
£c
)

970 
c
 = 
	`t˛i°_dñëe_m©ched
(
£c
->
íåõs
, 
p
, 
cmp_°r_£c
, 
tc‰ì
);

971 if(
s
)

972 
	`tc‰ì
(
s
);

974 
	`‰ì
(
n
);

975  
c
;

976 
	}
}

982 
	$tcc_addöt
(
tcc_íåy
 *
ã
, 
n
)

984 if(
ã
->
ty≥
 =
TCC_VALUE
){

985 
tcc_vÆue
 *
tv
 = 
	`mÆloc
((tcc_value));

986 
tv
->
ty≥
 = 
TCC_INTEGER
;

987 
tv
->
vÆue
.
öãgî
 = 
n
;

988 
	`t˛i°_push
(
ã
->
vÆue
.
vÆues
, 
tv
);

991 
	}
}

994 
	$tcc_addÊﬂt
(
tcc_íåy
 *
ã
, 
f
)

996 if(
ã
->
ty≥
 =
TCC_VALUE
){

997 
tcc_vÆue
 *
tv
 = 
	`mÆloc
((tcc_value));

998 
tv
->
ty≥
 = 
TCC_FLOAT
;

999 
tv
->
vÆue
.
Êﬂtög
 = 
f
;

1000 
	`t˛i°_push
(
ã
->
vÆue
.
vÆues
, 
tv
);

1003 
	}
}

1006 
	$tcc_add°rög
(
tcc_íåy
 *
ã
, *
s
, 
exp
)

1008 if(
ã
->
ty≥
 =
TCC_VALUE
){

1009 
tcc_vÆue
 *
tv
 = 
	`mÆloc
((tcc_value));

1010 
tv
->
ty≥
 = 
TCC_STRING
;

1011 if(
exp
)

1012 
tv
->
ty≥
 |
TCC_EXPAND
;

1013 
tv
->
vÆue
.
°rög
 = 
s
;

1014 
	`t˛i°_push
(
ã
->
vÆue
.
vÆues
, 
tv
);

1017 
	}
}

1020 
	$tcc_addboﬁ
(
tcc_íåy
 *
ã
, 
n
)

1022 if(
ã
->
ty≥
 =
TCC_VALUE
){

1023 
tcc_vÆue
 *
tv
 = 
	`mÆloc
((tcc_value));

1024 
tv
->
ty≥
 = 
TCC_BOOLEAN
;

1025 
tv
->
vÆue
.
boﬁón
 = 
n
;

1026 
	`t˛i°_push
(
ã
->
vÆue
.
vÆues
, 
tv
);

1029 
	}
}

1032 
	$tcc_addªf
(
tcc_íåy
 *
ã
, *
ªf
)

1034 if(
ã
->
ty≥
 =
TCC_VALUE
){

1035 
tcc_vÆue
 *
tv
 = 
	`mÆloc
((*tv));

1036 
tv
->
ty≥
 = 
TCC_REF
;

1037 
tv
->
vÆue
.
°rög
 = 
ªf
;

1038 
	`t˛i°_push
(
ã
->
vÆue
.
vÆues
, 
tv
);

1041 
	}
}

1044 
	$tcc_wrôñi°
(
t˛i°_t
 *
l
, *
fûe
, 
lv
, 
tcio_‚
 
o‚
)

1046 
t˛i°_ôem_t
 *
li
 = 
NULL
;

1047 
tcc_íåy
 *
ã
;

1048 (
ã
 = 
	`t˛i°_¥ev
(
l
, &
li
)Ë!
NULL
){

1049 
	`tcc_wrôì¡ry
(
ã
, 
fûe
, 
lv
, 
o‚
);

1052 
	}
}

1055 
	$do_¥ötf
(*
fûe
, 
tcio_‚
 
o‚
, *
fmt
, ...)

1057 
buf
[512];

1058 
va_li°
 
¨gs
;

1059 
l
, 
r
;

1061 
	`va_°¨t
(
¨gs
, 
fmt
);

1062 
l
 = 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
¨gs
);

1063 if(
l
 =(
buf
))

1064 
	`Ârötf
(
°dîr
, "tcconf:Åruncated output\n");

1065 
r
 = 
	`o‚
(
buf
, 1, 
l
, 
fûe
);

1066 
	`va_íd
(
¨gs
);

1068  
r
;

1069 
	}
}

1072 
	$tcc_wrôe£˘i⁄
(
c⁄f_£˘i⁄
 *
ts
, *
fûe
, 
lv
, *
d
, 
tcio_‚
 
o‚
)

1074 
l
 = 
lv
 * 8;

1075 
t˛i°_ôem_t
 *
li
 = 
NULL
;

1076 *
m
;

1078 
	`do_¥ötf
(
fûe
, 
o‚
, "%*s%s", 
l
, "", 
ts
->
«me
);

1080 (
m
 = 
	`t˛i°_√xt
(
ts
->
mîge
, &
li
)))

1081 
	`Ârötf
(
fûe
, " : %s", 
m
);

1082 
	`do_¥ötf
(
fûe
, 
o‚
, " %c\n", 
d
[0]);

1083 
	`tcc_wrôñi°
(
ts
->
íåõs
, 
fûe
, 
lv
 + 1, 
o‚
);

1084 
	`do_¥ötf
(
fûe
, 
o‚
, "%*s%c\n", 
l
, "", 
d
[1]);

1086 
	}
}

1089 
	$tcc_wrôì¡ry
(
tcc_íåy
 *
ã
, *
fûe
, 
lv
, 
tcio_‚
 
o‚
)

1091 
t˛i°_ôem_t
 *
li
 = 
NULL
;

1092 
tcc_vÆue
 *
tv
;

1093 
l
 = 
lv
 * 8;

1095 
ã
->
ty≥
){

1096 
TCC_VALUE
:

1097 
	`do_¥ötf
(
fûe
, 
o‚
, "%*s%s", 
l
, "", 
ã
->
vÆue
.
key
);

1098 (
tv
 = 
	`t˛i°_√xt
(
ã
->
vÆue
.
vÆues
, &
li
)Ë!
NULL
){

1099 
sd
;

1100 
tv
->
ty≥
 & 
TCC_TYPEMASK
){

1101 
TCC_INTEGER
:

1102 
	`do_¥ötf
(
fûe
, 
o‚
, " %ld", 
tv
->
vÆue
.
öãgî
);

1104 
TCC_FLOAT
:

1105 
	`do_¥ötf
(
fûe
, 
o‚
, " %.16g", 
tv
->
vÆue
.
Êﬂtög
);

1107 
TCC_BOOLEAN
:

1108 
	`do_¥ötf
(
fûe
, 
o‚
, " %s",

1109 
tv
->
vÆue
.
boﬁón
? "true": "false");

1111 
TCC_STRING
:

1112 
sd
 = 
tv
->
ty≥
 & 
TCC_EXPAND
? '"': '\'';

1113 
	`do_¥ötf
(
fûe
, 
o‚
, " %c%s%c", 
sd
, 
tv
->
vÆue
.
°rög
, sd);

1115 
TCC_REF
:

1116 
	`do_¥ötf
(
fûe
, 
o‚
, " %s", 
tv
->
vÆue
.
°rög
);

1120 
	`do_¥ötf
(
fûe
, 
o‚
, "\n");

1123 
TCC_SECTION
:

1124 
	`tcc_wrôe£˘i⁄
(
ã
->
£˘i⁄
, 
fûe
, 
lv
, "{}", 
o‚
);

1127 
TCC_MSECTION
:

1128 
	`tcc_wrôe£˘i⁄
(
ã
->
£˘i⁄
, 
fûe
, 
lv
, "[]", 
o‚
);

1132 
	`Ârötf
(
°dîr
, "InternalÉrror.\n");

1137 
	}
}

	@get_interface3/libtc/src/confdump.c

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<t˘y≥s.h
>

28 
	~<tc°rög.h
>

29 
	~<tˇŒoc.h
>

30 
	~<tcc⁄f.h
>

31 
	~<uni°d.h
>

34 
	$maö
(
¨gc
, **
¨gv
)

36 
tcc⁄f_£˘i⁄_t
 *
s
 = 
NULL
;

37 
FILE
 *
out
 = 
°dout
;

38 *
outfûe
 = "-";

39 
›t
;

40 
i
;

42 (
›t
 = 
	`gë›t
(
¨gc
, 
¨gv
, "o:h")) != -1){

43 
›t
){

45 
outfûe
 = 
›èrg
;

48 
	`Ârötf
(
°dîr
, "Usage:Åcconfdump [-o file] [file ...]\n");

52 if(
	`°rcmp
(
outfûe
, "-")){

53 if(!(
out
 = 
	`f›í
(
outfûe
, "w"))){

54 
	`≥º‹
(
outfûe
);

55 
	`exô
(1);

59 
¨gc
 -
›töd
;

60 
¨gv
 +
›töd
;

62 
i
 = 0; i < 
¨gc
; i++){

63 
tcc⁄f_£˘i⁄_t
 *
n
;

64 if(
	`°rcmp
(
¨gv
[
i
], "-")){

65 
n
 = 
	`tcc⁄f_lﬂd_fûe
(
s
, 
¨gv
[
i
]);

67 
n
 = 
	`tcc⁄f_lﬂd
(
s
, 
°dö
, (
tcio_‚
Ë
‰ód
);

69 if(
n
)

70 
s
 = 
n
;

72 
	`Ârötf
(
°dîr
, "tcc⁄fdump:Éº‹Üﬂdög %s\n", 
¨gv
[
i
]);

75 if(!
¨gc
)

76 
s
 = 
	`tcc⁄f_lﬂd
(s, 
°dö
, (
tcio_‚
Ë
‰ód
);

78 if(
s
){

79 
	`tcc⁄f_wrôe
(
s
, 
out
, (
tcio_‚
Ë
fwrôe
);

80 
	`tc‰ì
(
s
);

83 
	`f˛o£
(
out
);

86 
	}
}

	@get_interface3/libtc/src/gethostaddr.c

25 
	~<°dlib.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<√töë/ö.h
>

28 
	~<√tdb.h
>

29 
	~"t˙ë.h
"

31 
	$gëho°addr
(){

32 *
ho°«me
;

33 
ho°ít
 *
ho°öfo
;

34 
ho°«me
 = 
	`gëho°«me_a
();

35 
ho°öfo
 = 
	`gëho°by«me
 (
ho°«me
);

36  *(*Ë
ho°öfo
->
h_addr
;

37 
	}
}

	@get_interface3/libtc/src/gethostname.c

25 
	~<°dlib.h
>

26 
	~<°dio.h
>

27 
	~<î∫o.h
>

28 
	~<uni°d.h
>

30 *
	$gëho°«me_a
(){

31 *
«me
;

32 
r
, 
Àn
 = 128;

34 
«me
 = 
	`mÆloc
(
Àn
);

35 (
r
 = 
	`gëho°«me
(
«me
, 
Àn
)) < 0){

36 if(
î∫o
 =
ENAMETOOLONG
){

37 
Àn
 *= 2;

38 
«me
 = 
	`ªÆloc
“ame, 
Àn
);

45 if(
r
 < 0)

46  
NULL
;

48  
«me
;

49 
	}
}

	@get_interface3/libtc/src/hash.c

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<t˘y≥s.h
>

28 
	~<±hªad.h
>

29 
	~<tchash.h
>

30 
	~<tcmempoﬁ.h
>

31 
	~<tˇŒoc.h
>

32 
	~<tc.h
>

35 
	shash_íåy
 {

36 *
	mkey
;

37 
size_t
 
	mkey_size
;

38 *
	md©a
;

39 
hash_íåy
 *
	m√xt
;

40 } 
	thash_íåy
;

42 
	stchash_èbÀ
 {

43 
tchash_fun˘i⁄_t
 
	mhash_func
;

44 
size_t
 
	msize
;

45 
size_t
 
	míåõs
;

46 
hash_íåy
 **
	mbuckës
;

47 
uöt32_t
 
	mÊags
;

48 
	mlockög
;

49 
±hªad_muãx_t
 
	mlock
;

50 
	mhigh_m¨k
, 
	mlow_m¨k
;

51 
tcmempoﬁ_t
 *
	mmp
;

54 
u_öt


55 
	$hash_size
(
u_öt
 
s
)

57 
u_öt
 
i
 = 1;

58 
i
 < 
s
)

59 
i
 <<= 1;

60  
i
;

61 
	}
}

91 
	#mix
(
a
,
b
,
c
) \

93 
a
 -
b
;á -
c
;á ^= (c>>13); \

94 
b
 -
c
; b -
a
; b ^= (a<<8); \

95 
c
 -
a
; c -
b
; c ^= (b>>13); \

96 
a
 -
b
;á -
c
;á ^= (c>>12); \

97 
b
 -
c
; b -
a
; b ^= (a<<16); \

98 
c
 -
a
; c -
b
; c ^= (b>>5); \

99 
a
 -
b
;á -
c
;á ^= (c>>3); \

100 
b
 -
c
; b -
a
; b ^= (a<<10); \

101 
c
 -
a
; c -
b
; c ^= (b>>15); \

102 }

	)

132 
uöt32_t
 
	tub4
;

134 
u_öt


135 
	$hash_func
(*
key
, 
size_t
 
Àngth
)

137 
ub4
 
a
,
b
,
c
,
Àn
;

138 *
k
 = 
key
;

141 
Àn
 = 
Àngth
;

142 
a
 = 
b
 = 0x9e3779b9;

143 
c
 = 0;

146 
Àn
 >= 12){

147 
a
 +(
k
[0] +((
ub4
)k[1]<<8) +((ub4)k[2]<<16) +((ub4)k[3]<<24));

148 
b
 +(
k
[4] +((
ub4
)k[5]<<8) +((ub4)k[6]<<16) +((ub4)k[7]<<24));

149 
c
 +(
k
[8] +((
ub4
)k[9]<<8) +((ub4)k[10]<<16)+((ub4)k[11]<<24));

150 
	`mix
(
a
,
b
,
c
);

151 
k
 +12; 
Àn
 -= 12;

155 
c
 +
Àngth
;

156 
Àn
){

157 11: 
c
+=((
ub4
)
k
[10]<<24);

158 10: 
c
+=((
ub4
)
k
[9]<<16);

159 9 : 
c
+=((
ub4
)
k
[8]<<8);

161 8 : 
b
+=((
ub4
)
k
[7]<<24);

162 7 : 
b
+=((
ub4
)
k
[6]<<16);

163 6 : 
b
+=((
ub4
)
k
[5]<<8);

164 5 : 
b
+=
k
[4];

165 4 : 
a
+=((
ub4
)
k
[3]<<24);

166 3 : 
a
+=((
ub4
)
k
[2]<<16);

167 2 : 
a
+=((
ub4
)
k
[1]<<8);

168 1 : 
a
+=
k
[0];

171 
	`mix
(
a
,
b
,
c
);

173  
c
;

174 
	}
}

178 
ölöe
 
u_öt


179 
	$hash_vÆue
(
tchash_èbÀ_t
 *
ht
, *
key
, 
size_t
 
ks
, size_à
size
)

181 
u_öt
 
hv
 = 
ht
->
	`hash_func
(
key
, 
ks
);

182  
hv
 & (
size
 - 1);

183 
	}
}

186 
tchash_èbÀ_t
 *

187 
	$tchash_√w
(
size
, 
lock
, 
uöt32_t
 
Êags
)

189 
tchash_èbÀ_t
 *
ht
;

191 
size
 = 
	`hash_size
(size);

192 
ht
 = 
	`mÆloc
((*ht));

193 
ht
->
size
 = size;

194 
ht
->
íåõs
 = 0;

195 
ht
->
Êags
 = flags;

196 
ht
->
buckës
 = 
	`ˇŒoc
(
size
, (*ht->buckets));

197 
ht
->
lockög
 = 
lock
;

198 
	`±hªad_muãx_öô
(&
ht
->
lock
, 
NULL
);

199 
ht
->
high_m¨k
 = 0.7;

200 
ht
->
low_m¨k
 = 0.3;

201 
ht
->
hash_func
 = hash_func;

202 
ht
->
mp
 = 
	`tcmempoﬁ_√w
((
hash_íåy
), 0);

204  
ht
;

205 
	}
}

208 
	$tchash_£thashfun˘i⁄
(
tchash_èbÀ_t
 *
ht
, 
tchash_fun˘i⁄_t
 
hf
)

210 if(
ht
->
íåõs
)

212 
ht
->
hash_func
 = 
hf
? hf: hash_func;

214 
	}
}

216 
ölöe
 

217 
	$lock_hash
(
tchash_èbÀ_t
 *
ht
)

219 if(
ht
->
lockög
)

220 
	`±hªad_muãx_lock
(&
ht
->
lock
);

221 
	}
}

223 
ölöe
 

224 
	$u∆ock_hash
(
tchash_èbÀ_t
 *
ht
)

226 if(
ht
->
lockög
)

227 
	`±hªad_muãx_u∆ock
(&
ht
->
lock
);

228 
	}
}

230 
ölöe
 

231 
	$hash_cmp
(*
key
, 
size_t
 
ks
, 
hash_íåy
 *
he
)

233 if(
ks
 !
he
->
key_size
)

235 if(
key
 =
he
->key)

237  
	`memcmp
(
key
, 
he
->key, 
ks
);

238 
	}
}

240 
ölöe
 *

241 
	$hash_kdup
(*
key
, 
size_t
 
ks
)

243 *
nk
 = 
	`mÆloc
(
ks
);

244 
	`mem˝y
(
nk
, 
key
, 
ks
);

245  
nk
;

246 
	}
}

248 
ölöe
 
hash_íåy
 *

249 
	$hash_addíåy
(
tchash_èbÀ_t
 *
ht
, 
u_öt
 
hv
, *
key
, 
size_t
 
ks
, *
d©a
)

251 
hash_íåy
 *
he
 = 
	`tcmempoﬁ_gë
(
ht
->
mp
);

252 if(
ht
->
Êags
 & 
TCHASH_NOCOPY
)

253 
he
->
key
 = key;

255 
he
->
key
 = 
	`hash_kdup
(key, 
ks
);

256 
he
->
key_size
 = 
ks
;

257 
he
->
d©a
 = data;

258 
he
->
√xt
 = 
ht
->
buckës
[
hv
];

259 
ht
->
buckës
[
hv
] = 
he
;

260 
ht
->
íåõs
++;

262  
he
;

263 
	}
}

267 
	$tchash_£¨ch
(
tchash_èbÀ_t
 *
ht
, *
key
, 
size_t
 
ks
, *
d©a
, *
r
)

269 
u_öt
 
hv
;

270 
hash_íåy
 *
hr
;

271 **
ªt
 = 
r
;

272 
hf
 = 0;

274 if(
ks
 =(
size_t
) -1)

275 
ks
 = 
	`°æí
(
key
) + 1;

277 
	`lock_hash
(
ht
);

280 
hv
 = 
	`hash_vÆue
(
ht
, 
key
, 
ks
, ht->
size
);

282 
hr
 = 
ht
->
buckës
[
hv
]; hr; h∏hr->
√xt
)

283 if(!
	`hash_cmp
(
key
, 
ks
, 
hr
))

286 if(!
hr
){

287 
hr
 = 
	`hash_addíåy
(
ht
, 
hv
, 
key
, 
ks
, 
d©a
);

288 
hf
 = 1;

291 if(
ªt
 !
NULL
)

292 *
ªt
 = 
hr
->
d©a
;

294 
	`u∆ock_hash
(
ht
);

295 if(
hf
 && !(
ht
->
Êags
 & 
TCHASH_FROZEN
)){

296 if((Ë
ht
->
íåõs
 / ht->
size
 > ht->
high_m¨k
)

297 
	`tchash_ªhash
(
ht
);

299  
hf
;

300 
	}
}

305 
	$tchash_föd
(
tchash_èbÀ_t
 *
ht
, *
key
, 
size_t
 
ks
, *
r
)

307 
u_öt
 
hv
;

308 
hash_íåy
 *
hr
 = 
NULL
;

309 **
ªt
 = 
r
;

311 if(
ks
 =(
size_t
) -1)

312 
ks
 = 
	`°æí
(
key
) + 1;

314 
	`lock_hash
(
ht
);

315 
hv
 = 
	`hash_vÆue
(
ht
, 
key
, 
ks
, ht->
size
);

317 
hr
 = 
ht
->
buckës
[
hv
]; hr; h∏hr->
√xt
)

318 if(!
	`hash_cmp
(
key
, 
ks
, 
hr
))

321 if(
hr
 && 
ªt
)

322 *
ªt
 = 
hr
->
d©a
;

324 
	`u∆ock_hash
(
ht
);

325  !
hr
;

326 
	}
}

330 
	$tchash_ª∂a˚
(
tchash_èbÀ_t
 *
ht
, *
key
, 
size_t
 
ks
, *
d©a
, *
r
)

332 
u_öt
 
hv
;

333 
hash_íåy
 *
hr
;

334 
ªt
 = 0;

335 **
π
 = 
r
;

337 if(
ks
 =(
size_t
) -1)

338 
ks
 = 
	`°æí
(
key
) + 1;

340 
	`lock_hash
(
ht
);

341 
hv
 = 
	`hash_vÆue
(
ht
, 
key
, 
ks
, ht->
size
);

343 
hr
 = 
ht
->
buckës
[
hv
]; hr; h∏hr->
√xt
)

344 if(!
	`hash_cmp
(
key
, 
ks
, 
hr
))

347 if(
hr
){

348 if(
π
)

349 *
π
 = 
hr
->
d©a
;

350 
hr
->
d©a
 = data;

352 
	`hash_addíåy
(
ht
, 
hv
, 
key
, 
ks
, 
d©a
);

353 
ªt
 = 1;

356 
	`u∆ock_hash
(
ht
);

357 if(
ªt
 && !(
ht
->
Êags
 & 
TCHASH_FROZEN
)){

358 if((Ë
ht
->
íåõs
 / ht->
size
 > ht->
high_m¨k
)

359 
	`tchash_ªhash
(
ht
);

361  
ªt
;

362 
	}
}

366 
	$tchash_dñëe
(
tchash_èbÀ_t
 *
ht
, *
key
, 
size_t
 
ks
, *
r
)

368 
hv
;

369 
hash_íåy
 *
hr
 = 
NULL
, *
hp
 = NULL;

370 **
ªt
 = 
r
;

372 if(
ks
 =(
size_t
) -1)

373 
ks
 = 
	`°æí
(
key
) + 1;

375 
	`lock_hash
(
ht
);

376 
hv
 = 
	`hash_vÆue
(
ht
, 
key
, 
ks
, ht->
size
);

378 
hr
 = 
ht
->
buckës
[
hv
]; hr; h∏hr->
√xt
){

379 if(!
	`hash_cmp
(
key
, 
ks
, 
hr
))

381 
hp
 = 
hr
;

384 if(
hr
){

385 if(
ªt
)

386 *
ªt
 = 
hr
->
d©a
;

387 if(
hp
)

388 
hp
->
√xt
 = 
hr
->next;

390 
ht
->
buckës
[
hv
] = 
hr
->
√xt
;

391 
ht
->
íåõs
--;

392 if(!(
ht
->
Êags
 & 
TCHASH_NOCOPY
))

393 
	`‰ì
(
hr
->
key
);

394 
	`tcmempoﬁ_‰ì
(
hr
);

397 
	`u∆ock_hash
(
ht
);

398 if(!
hr
 && !(
ht
->
Êags
 & 
TCHASH_FROZEN
)){

399 if((Ë
ht
->
íåõs
 / ht->
size
 < ht->
low_m¨k
)

400 
	`tchash_ªhash
(
ht
);

402  !
hr
;

403 
	}
}

406 
	$tchash_de°roy
(
tchash_èbÀ_t
 *
ht
, 
tc‰ì_‚
 
hf
)

408 
size_t
 
i
;

409 
i
 = 0; i < 
ht
->
size
; i++){

410 if(
ht
->
buckës
[
i
] !
NULL
){

411 
hash_íåy
 *
he
 = 
ht
->
buckës
[
i
];

412 
he
){

413 
hash_íåy
 *
hn
 = 
he
->
√xt
;

414 if(
hf
)

415 
	`hf
(
he
->
d©a
);

416 if(!(
ht
->
Êags
 & 
TCHASH_NOCOPY
))

417 
	`‰ì
(
he
->
key
);

418 
	`tcmempoﬁ_‰ì
(
he
);

419 
he
 = 
hn
;

424 
	`‰ì
(
ht
->
buckës
);

425 
	`±hªad_muãx_de°roy
(&
ht
->
lock
);

426 
	`tc‰ì
(
ht
->
mp
);

427 
	`‰ì
(
ht
);

430 
	}
}

433 
	$tchash_ªhash
(
tchash_èbÀ_t
 *
ht
)

435 
hash_íåy
 **
nb
 = 
NULL
;

436 
size_t
 
ns
, 
i
;

438 
	`lock_hash
(
ht
);

440 
ns
 = 
	`hash_size
(
ht
->
íåõs
 * 2 / (ht->
high_m¨k
 + ht->
low_m¨k
));

441 if(
ns
 =
ht
->
size
)

442 
íd
;

443 
nb
 = 
	`ˇŒoc
(
ns
, (*nb));

445 
i
 = 0; i < 
ht
->
size
; i++){

446 
hash_íåy
 *
he
 = 
ht
->
buckës
[
i
];

447 
he
){

448 
hash_íåy
 *
hn
 = 
he
->
√xt
;

449 
hv
 = 
	`hash_vÆue
(
ht
, 
he
->
key
, he->
key_size
, 
ns
);

450 
he
->
√xt
 = 
nb
[
hv
];

451 
nb
[
hv
] = 
he
;

452 
he
 = 
hn
;

456 
ht
->
size
 = 
ns
;

457 
	`‰ì
(
ht
->
buckës
);

458 
ht
->
buckës
 = 
nb
;

460 
íd
:

461 
	`u∆ock_hash
(
ht
);

463 
	}
}

466 
	$tchash_keys
(
tchash_èbÀ_t
 *
ht
, *
n
, 
Á°
)

468 **
keys
;

469 
size_t
 
i
, 
j
;

471 if(
ht
->
íåõs
 == 0){

472 *
n
 = 0;

473  
NULL
;

476 
	`lock_hash
(
ht
);

478 
keys
 = 
	`mÆloc
(
ht
->
íåõs
 * (*keys));

480 
i
 = 0, 
j
 = 0; i < 
ht
->
size
; i++){

481 
hash_íåy
 *
he
;

482 
he
 = 
ht
->
buckës
[
i
]; he; hêhe->
√xt
)

483 
keys
[
j
++] = 
Á°
? 
he
->
key
: 
	`hash_kdup
(he->key, he->
key_size
);

486 *
n
 = 
ht
->
íåõs
;

488 
	`u∆ock_hash
(
ht
);

490  
keys
;

491 
	}
}

494 
	$tchash_£âhªshﬁds
(
tchash_èbÀ_t
 *
ht
, 
low
, 
high
)

496 
h
 = 
high
 < 0? 
ht
->
high_m¨k
: high;

497 
l
 = 
low
 < 0? 
ht
->
low_m¨k
:Üow;

499 if(
h
 < 
l
)

502 
ht
->
high_m¨k
 = 
h
;

503 
ht
->
low_m¨k
 = 
l
;

506 
	}
}

509 
	$tchash_gëÊags
(
tchash_èbÀ_t
 *
ht
)

511  
ht
->
Êags
;

512 
	}
}

515 
	$tchash_£tÊags
(
tchash_èbÀ_t
 *
ht
, 
Êags
)

517 
	`lock_hash
(
ht
);

518 
ht
->
Êags
 = flags;

519 
	`u∆ock_hash
(
ht
);

520  
ht
->
Êags
;

521 
	}
}

524 
	$tchash_£tÊag
(
tchash_èbÀ_t
 *
ht
, 
Êag
)

526 
	`lock_hash
(
ht
);

527 
ht
->
Êags
 |
Êag
;

528 
	`u∆ock_hash
(
ht
);

529  
ht
->
Êags
;

530 
	}
}

533 
	$tchash_˛órÊag
(
tchash_èbÀ_t
 *
ht
, 
Êag
)

535 
	`lock_hash
(
ht
);

536 
ht
->
Êags
 &~
Êag
;

537 
	`u∆ock_hash
(
ht
);

538  
ht
->
Êags
;

539 
	}
}

	@get_interface3/libtc/src/list.c

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<±hªad.h
>

28 
	~"t˛i°.h
"

30 
	st˛i°_ôem
 {

31 *
	md©a
;

32 
t˛i°_ôem_t
 *
	m√xt
;

33 
t˛i°_ôem_t
 *
	m¥ev
;

34 
	mrc
, 
	mic
;

35 
tc‰ì_‚
 
	m‰ì
;

36 
	mdñëed
;

39 
	st˛i°
 {

40 
t˛i°_ôem_t
 *
	m°¨t
;

41 
t˛i°_ôem_t
 *
	míd
;

42 
	môems
, 
	mdñëed
;

43 
	mlockög
;

44 
±hªad_muãx_t
 
	mlock
;

47 
t˛i°_t
 *

48 
	$t˛i°_√w
(
lockög
)

50 
t˛i°_t
 *
l
 = 
	`ˇŒoc
(1, (*l));

51 
l
->
lockög
 =Üocking;

52 if(
lockög
 > 
TC_LOCK_NONE
)

53 
	`±hªad_muãx_öô
(&
l
->
lock
, 
NULL
);

54  
l
;

55 
	}
}

58 
	$t˛i°_‰ì
(
t˛i°_t
 *
l°
)

60 if(
l°
->
°¨t
 !
NULL
)

63 if(
l°
->
lockög
 > 
TC_LOCK_NONE
)

64 
	`±hªad_muãx_de°roy
(&
l°
->
lock
);

66 
	`‰ì
(
l°
);

68 
	}
}

71 
	$li°_u∆ök
(
t˛i°_t
 *
l°
, 
t˛i°_ôem_t
 *
l
)

73 if(
l
->
¥ev
)

74 
l
->
¥ev
->
√xt
 =Ü->next;

75 if(
l
->
√xt
)

76 
l
->
√xt
->
¥ev
 =Ü->prev;

77 if(
l
 =
l°
->
°¨t
)

78 
l°
->
°¨t
 = 
l
->
√xt
;

79 if(
l
 =
l°
->
íd
)

80 
l°
->
íd
 = 
l
->
¥ev
;

82 if(
l
->
‰ì
)

83 
l
->
	`‰ì
÷->
d©a
);

85 
l°
->
ôems
--;

86 if(
l
->
dñëed
)

87 
l°
->
dñëed
--;

88 
	`‰ì
(
l
);

89 
	}
}

91 
ölöe
 

92 
	$li°_ªf
(
t˛i°_ôem_t
 *
l
)

94 
l
->
rc
++;

95 
	}
}

97 
ölöe
 

98 
	$li°_dîef
(
t˛i°_t
 *
l°
, 
t˛i°_ôem_t
 *
l
)

100 if(--
l
->
rc
 <0 &&Ü->
ic
 <= 0)

101 
	`li°_u∆ök
(
l°
, 
l
);

102 
	}
}

104 
ölöe
 

105 
	$lock_li°
(
t˛i°_t
 *
l°
)

107 if(
l°
->
lockög
 > 
TC_LOCK_NONE
)

108 
	`±hªad_muãx_lock
(&
l°
->
lock
);

110 
	}
}

113 
ölöe
 

114 
	$u∆ock_li°
(
t˛i°_t
 *
l°
)

116 if(
l°
->
lockög
 > 
TC_LOCK_NONE
)

117 
	`±hªad_muãx_u∆ock
(&
l°
->
lock
);

119 
	}
}

122 
	$t˛i°_u∆ock
(
t˛i°_t
 *
l°
, 
t˛i°_ôem_t
 *
l
)

124 
	`lock_li°
(
l°
);

125 
l
->
ic
--;

126 
	`li°_dîef
(
l°
, 
l
);

127 
	`u∆ock_li°
(
l°
);

129 
	}
}

132 
	$t˛i°_ªmove
(
t˛i°_t
 *
l°
, 
t˛i°_ôem_t
 *
l
, 
tc‰ì_‚
 
‰
)

134 
	`lock_li°
(
l°
);

135 
l
->
dñëed
 = 1;

136 
l
->
‰ì
 = 
‰
;

137 
l°
->
dñëed
++;

138 
	`li°_dîef
(
l°
, 
l
);

139 
	`u∆ock_li°
(
l°
);

140 
	}
}

143 
	$t˛i°_de°roy
(
t˛i°_t
 *
l°
, 
tc‰ì_‚
 
l‰ì
)

145 
	`lock_li°
(
l°
);

146 
l°
->
°¨t
){

147 
l°
->
°¨t
->
‰ì
 = 
l‰ì
;

148 
	`li°_u∆ök
(
l°
,Ü°->
°¨t
);

150 
	`u∆ock_li°
(
l°
);

151 
	`t˛i°_‰ì
(
l°
);

153 
	}
}

155 
t˛i°_ôem_t
 *

156 
	$√w_ôem
(*
p
)

158 
t˛i°_ôem_t
 *
l
 = 
	`mÆloc
((tclist_item_t));

159 
l
->
d©a
 = 
p
;

160 
l
->
rc
 = 1;

161 
l
->
ic
 = 0;

162 
l
->
‰ì
 = 
NULL
;

163 
l
->
dñëed
 = 0;

164  
l
;

165 
	}
}

168 
	$t˛i°_push
(
t˛i°_t
 *
l°
, *
p
)

170 
t˛i°_ôem_t
 *
l
 = 
	`√w_ôem
(
p
);

172 
	`lock_li°
(
l°
);

173 if(
l°
->
°¨t
 =
NULL
){

174 
l°
->
°¨t
 = 
l
;

175 
l°
->
°¨t
->
√xt
 = 
NULL
;

176 
l°
->
°¨t
->
¥ev
 = 
NULL
;

177 
l°
->
íd
 =Ü°->
°¨t
;

179 
l°
->
íd
->
√xt
 = 
l
;

180 
l
->
¥ev
 = 
l°
->
íd
;

181 
l
->
√xt
 = 
NULL
;

182 
l°
->
íd
 = 
l
;

184 
l°
->
ôems
++;

185 
	`u∆ock_li°
(
l°
);

187 
	}
}

190 
	$t˛i°_unshi·
(
t˛i°_t
 *
l°
, *
p
)

192 
t˛i°_ôem_t
 *
l
 = 
	`√w_ôem
(
p
);

194 
	`lock_li°
(
l°
);

195 if(
l°
->
°¨t
 =
NULL
){

196 
l°
->
°¨t
 = 
l
;

197 
l°
->
°¨t
->
√xt
 = 
NULL
;

198 
l°
->
°¨t
->
¥ev
 = 
NULL
;

199 
l°
->
íd
 =Ü°->
°¨t
;

201 
l°
->
°¨t
->
¥ev
 = 
l
;

202 
l
->
√xt
 = 
l°
->
°¨t
;

203 
l
->
¥ev
 = 
NULL
;

204 
l°
->
°¨t
 = 
l
;

206 
l°
->
ôems
++;

207 
	`u∆ock_li°
(
l°
);

209 
	}
}

212 
	$t˛i°_shi·
(
t˛i°_t
 *
l°
)

214 
t˛i°_ôem_t
 *
li
 = 
NULL
;

215 *
d©a
 = 
NULL
;

217 
	`t˛i°_√xt
(
l°
, &
li
);

218 if(
li
){

219 
d©a
 = 
li
->data;

220 
	`t˛i°_ªmove
(
l°
, 
li
, 
NULL
);

221 
	`t˛i°_u∆ock
(
l°
, 
li
);

224  
d©a
;

225 
	}
}

228 
	$t˛i°_p›
(
t˛i°_t
 *
l°
)

230 
t˛i°_ôem_t
 *
li
 = 
NULL
;

231 *
d©a
 = 
NULL
;

233 
	`t˛i°_¥ev
(
l°
, &
li
);

234 if(
li
){

235 
d©a
 = 
li
->data;

236 
	`t˛i°_ªmove
(
l°
, 
li
, 
NULL
);

237 
	`t˛i°_u∆ock
(
l°
, 
li
);

240  
d©a
;

241 
	}
}

243 
t˛i°_ôem_t
 *

244 
	$li°_föd_ôem
(
t˛i°_t
 *
l°
, *
p
, 
tccom∑ª_‚
 
cmp
)

246 
t˛i°_ôem_t
 *
li
 = 
NULL
;

248 
	`t˛i°_√xt
(
l°
, &
li
);Üò!
NULL
;Åclist_next(lst, &li)){

249 if(
cmp
? 
	`cmp
(
p
, 
li
->
d©a
) == 0:Ö ==Üi->data){

253  
li
;

254 
	}
}

257 
	$t˛i°_föd
(
t˛i°_t
 *
l°
, *
p
, *
ªt
, 
tccom∑ª_‚
 
cmp
)

259 
t˛i°_ôem_t
 *
l
;

260 **
r
 = 
ªt
;

262 if((
l
 = 
	`li°_föd_ôem
(
l°
, 
p
, 
cmp
)Ë!
NULL
){

263 if(
r
 !
NULL
)

264 *
r
 = 
l
->
d©a
;

265 
	`t˛i°_u∆ock
(
l°
, 
l
);

270 
	}
}

273 
	$t˛i°_£¨ch
(
t˛i°_t
 *
l°
, *
p
, *
ªt
, 
tccom∑ª_‚
 
cmp
)

275 **
r
 = 
ªt
;

276 
t˛i°_ôem_t
 *
l
;

278 
l
 = 
	`li°_föd_ôem
(
l°
, 
p
, 
cmp
);

279 if(
l
 !
NULL
){

280 if(
r
 !
NULL
)

281 *
r
 = 
l
->
d©a
;

282 
	`t˛i°_u∆ock
(
l°
, 
l
);

285 
	`t˛i°_push
(
l°
, 
p
);

286 if(
r
 !
NULL
)

287 *
r
 = 
p
;

291 
	}
}

294 
	$t˛i°_dñëe
(
t˛i°_t
 *
l°
, *
p
, 
tccom∑ª_‚
 
cmp
, 
tc‰ì_‚
 
‰
)

296 
t˛i°_ôem_t
 *
li
 = 
NULL
;

298 if((
li
 = 
	`li°_föd_ôem
(
l°
, 
p
, 
cmp
)Ë!
NULL
){

299 
	`t˛i°_ªmove
(
l°
, 
li
, 
‰
);

300 
	`t˛i°_u∆ock
(
l°
, 
li
);

305 
	}
}

308 
	$t˛i°_dñëe_m©ched
(
t˛i°_t
 *
l°
, *
p
, 
tccom∑ª_‚
 
cmp
, 
tc‰ì_‚
 
‰
)

310 
n
 = 0;

311 
t˛i°_ôem_t
 *
li
 = 
NULL
;

313 
	`t˛i°_√xt
(
l°
, &
li
);Üò!
NULL
;Åclist_next(lst, &li)){

314 if(
	`cmp
(
p
, 
li
->
d©a
) == 0){

315 
	`t˛i°_ªmove
(
l°
, 
li
, 
‰
);

316 
n
++;

319  
n
;

320 
	}
}

323 
	$t˛i°_√xt
(
t˛i°_t
 *
l°
, 
t˛i°_ôem_t
 **
l
)

325 *
r
 = 
NULL
;

327 if(
l°
->
lockög
 < 
TC_LOCK_STRICT
 || *
l
 =
NULL
)

328 
	`lock_li°
(
l°
);

331 if(*
l
 =
NULL
){

332 if(
l°
->
°¨t
 !
NULL
)

333 
	`li°_ªf
(
l°
->
°¨t
);

334 *
l
 = 
l°
->
°¨t
;

336 
t˛i°_ôem_t
 *
 
;

337 if((*
l
)->
√xt
 !
NULL
){

338 
	`li°_ªf
((*
l
)->
√xt
);

340 
 
 = (*
l
)->
√xt
;

341 (*
l
)->
ic
--;

342 
	`li°_dîef
(
l°
, *
l
);

343 *
l
 = 
 
;

346 if(*
l
 !
NULL
){

347 
r
 = (*
l
)->
d©a
;

348 (*
l
)->
ic
++;

350 } *
l
 && (*l)->
dñëed
);

352 if(
l°
->
lockög
 < 
TC_LOCK_STRICT
 || *
l
 =
NULL
)

353 
	`u∆ock_li°
(
l°
);

354  *
l
? 
r
: 
NULL
;

355 
	}
}

358 
	$t˛i°_√xt_m©ched
(
t˛i°_t
 *
l°
, 
t˛i°_ôem_t
 **
l
, *
key
,

359 
tccom∑ª_‚
 
cmp
)

361 *
r
;

363 
r
 = 
	`t˛i°_√xt
(
l°
, 
l
);

364 } *
l
 && 
	`cmp
(
key
, 
r
));

365  
r
;

366 
	}
}

369 
	$t˛i°_¥ev
(
t˛i°_t
 *
l°
, 
t˛i°_ôem_t
 **
l
)

371 *
r
 = 
NULL
;

373 if(
l°
->
lockög
 < 
TC_LOCK_STRICT
 || *
l
 =
NULL
)

374 
	`lock_li°
(
l°
);

377 if(*
l
 =
NULL
){

378 if(
l°
->
íd
 !
NULL
)

379 
	`li°_ªf
(
l°
->
íd
);

380 *
l
 = 
l°
->
íd
;

382 
t˛i°_ôem_t
 *
 
;

383 if((*
l
)->
¥ev
 !
NULL
){

384 
	`li°_ªf
((*
l
)->
¥ev
);

386 
 
 = (*
l
)->
¥ev
;

387 (*
l
)->
ic
--;

388 
	`li°_dîef
(
l°
, *
l
);

389 *
l
 = 
 
;

392 if(*
l
 !
NULL
){

393 
r
 = (*
l
)->
d©a
;

394 (*
l
)->
ic
++;

396 } *
l
 && (*l)->
dñëed
);

398 if(
l°
->
lockög
 < 
TC_LOCK_STRICT
 || *
l
 =
NULL
)

399 
	`u∆ock_li°
(
l°
);

400  *
l
? 
r
: 
NULL
;

401 
	}
}

404 
	$t˛i°_¥ev_m©ched
(
t˛i°_t
 *
l°
, 
t˛i°_ôem_t
 **
l
, *
key
,

405 
tccom∑ª_‚
 
cmp
)

407 *
r
;

409 
r
 = 
	`t˛i°_¥ev
(
l°
, 
l
);

410 } *
l
 && 
	`cmp
(
key
, 
r
));

411  
r
;

412 
	}
}

415 
	$t˛i°_ôems
(
t˛i°_t
 *
l°
)

417  
l°
->
ôems
 -Ü°->
dñëed
;

418 
	}
}

421 
	$t˛i°_isfú°
(
t˛i°_t
 *
l°
, 
t˛i°_ôem_t
 *
li
)

423  
li
 =
l°
->
°¨t
;

424 
	}
}

428 
	$t˛i°_i¶a°
(
t˛i°_t
 *
l°
, 
t˛i°_ôem_t
 *
li
)

430  
li
 =
l°
->
íd
;

431 
	}
}

434 
	$t˛i°_hód
(
t˛i°_t
 *
l°
)

436 *
h
;

437 
	`lock_li°
(
l°
);

438 
h
 = 
l°
->
°¨t
->
d©a
;

439 
	`u∆ock_li°
(
l°
);

440  
h
;

441 
	}
}

444 
	$t˛i°_èû
(
t˛i°_t
 *
l°
)

446 *
t
;

447 
	`lock_li°
(
l°
);

448 
t
 = 
l°
->
íd
->
d©a
;

449 
	`u∆ock_li°
(
l°
);

450  
t
;

451 
	}
}

	@get_interface3/libtc/src/math.c

25 
	~<tcm©h.h
>

28 
	$t¸edu˚
(
tc‰a˘i⁄_t
 *
f
)

30 
n
 = 
f
->
num
;

31 
d
 = 
f
->
dí
;

33 
n
){

34 
t
 = 
n
;

35 
n
 = 
d
 %Ç;

36 
d
 = 
t
;

39 
f
->
num
 /
d
;

40 
f
->
dí
 /
d
;

41 
	}
}

	@get_interface3/libtc/src/mkpath.c

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<î∫o.h
>

28 
	~<sys/°©.h
>

31 
	$tcmk∑th
(*
∑th
, 
mode
)

33 *
p
 = 
	`°rdup
(
∑th
);

34 *
e
 = 
	`°ºchr
(
p
, '/');

35 
°©
 
°
;

36 
ªt
 = -1;

38 if(
e
 > 
p
){

39 *
e
 = 0;

40 if(
	`tcmk∑th
(
p
, 
mode
))

41 
íd
;

44 if(
	`°©
(
∑th
, &
°
)){

45 if(
î∫o
 !
ENOENT
)

46 
íd
;

47 if(
	`mkdú
(
∑th
, 
mode
))

48 
íd
;

49 } if(!
	`S_ISDIR
(
°
.
°_mode
)){

50 
íd
;

53 
ªt
 = 0;

54 
íd
:

55 
	`‰ì
(
p
);

56  
ªt
;

57 
	}
}

	@get_interface3/libtc/src/mpool.c

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<uni°d.h
>

28 
	~<t˘y≥s.h
>

29 
	~<±hªad.h
>

30 
	~<sys/mm™.h
>

31 
	~<°ddef.h
>

32 
	~<tˇŒoc.h
>

33 
	~<tcmempoﬁ.h
>

34 
	~<tc.h
>

36 #i‚de‡
MAP_ANONYMOUS


37 
	#MAP_ANONYMOUS
 
MAP_ANON


	)

40 
	stcmempoﬁ_∑ge
 {

41 
tcmempoﬁ_t
 *
	mpoﬁ
;

42 
size_t
 
	mu£d
, 
	möu£
;

43 *
	m‰ì
;

44 
tcmempoﬁ_∑ge
 *
	m√xt
, *
	m¥ev
;

46 
	ml
;

47 
	md
;

48 *
	mp
;

49 } 
	md©a
[1];

50 } 
	ttcmempoﬁ_∑ge_t
;

52 
	stcmempoﬁ
 {

53 
size_t
 
	msize
;

54 
size_t
 
	m˝p
;

55 
tcmempoﬁ_∑ge_t
 *
	m∑ges
;

56 
	mlockög
;

57 
±hªad_muãx_t
 
	mlock
;

60 
	g∑gesize
;

62 
	#Æign
(
s
,
a
Ë(((s)+◊)-1Ë& ~(◊)-1))

	)

64 
ölöe
 

65 
	$mp_lock
(
tcmempoﬁ_t
 *
mp
)

67 if(
mp
->
lockög
)

68 
	`±hªad_muãx_lock
(&
mp
->
lock
);

69 
	}
}

71 
ölöe
 

72 
	$mp_u∆ock
(
tcmempoﬁ_t
 *
mp
)

74 if(
mp
->
lockög
)

75 
	`±hªad_muãx_u∆ock
(&
mp
->
lock
);

76 
	}
}

79 
	$mp_‰ì
(*
p
)

81 
tcmempoﬁ_t
 *
mp
 = 
p
;

82 
	`±hªad_muãx_de°roy
(&
mp
->
lock
);

83 
	}
}

85 
tcmempoﬁ_t
 *

86 
	$tcmempoﬁ_√w
(
size_t
 
size
, 
lock
)

88 
tcmempoﬁ_t
 *
mp
;

90 if(!
∑gesize
)

91 
∑gesize
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

93 
size
 = 
	`Æign
(size, (*));

94 if(
size
 > 
∑gesize
 - 
	`off£tof
(
tcmempoﬁ_∑ge_t
, 
d©a
))

95  
NULL
;

97 
mp
 = 
	`tˇŒocdz
((*mp), 
NULL
, 
mp_‰ì
);

98 
mp
->
size
 = size;

99 
mp
->
˝p
 = (
∑gesize
 - 
	`off£tof
(
tcmempoﬁ_∑ge_t
, 
d©a
)Ë/ 
size
;

100 
mp
->
lockög
 = 
lock
;

101 
	`±hªad_muãx_öô
(&
mp
->
lock
, 
NULL
);

103  
mp
;

104 
	}
}

107 
	$tcmempoﬁ_gë
(
tcmempoﬁ_t
 *
mp
)

109 
tcmempoﬁ_∑ge_t
 *
mµ
;

110 *
chunk
;

112 
	`mp_lock
(
mp
);

114 
mµ
 = 
mp
->
∑ges
;

116 if(!
mµ
){

117 
mµ
 = 
	`mm≠
(
NULL
, 
∑gesize
, 
PROT_READ
 | 
PROT_WRITE
,

118 
MAP_ANONYMOUS
 | 
MAP_PRIVATE
, -1, 0);

119 
mµ
->
poﬁ
 = 
mp
;

120 
mp
->
∑ges
 = 
mµ
;

123 if(
mµ
->
‰ì
){

124 
chunk
 = 
mµ
->
‰ì
;

125 
mµ
->
‰ì
 = *(**Ë
chunk
;

127 
chunk
 = (*Ë
mµ
->
d©a
 + mµ->
u£d
 * 
mp
->
size
;

128 
mµ
->
u£d
++;

131 if(++
mµ
->
öu£
 =
mp
->
˝p
){

132 
mp
->
∑ges
 = 
mµ
->
√xt
;

133 
mµ
->
√xt
 = 
NULL
;

134 
mµ
->
¥ev
 = 
NULL
;

137 
	`mp_u∆ock
(
mp
);

139  
chunk
;

140 
	}
}

143 
	$tcmempoﬁ_‰ì
(*
p
)

145 
tcmempoﬁ_∑ge_t
 *
mµ
 = (*Ë((
±rdiff_t
Ë
p
 & ~(
∑gesize
 - 1));

146 
tcmempoﬁ_t
 *
mp
 = 
mµ
->
poﬁ
;

148 
	`mp_lock
(
mp
);

150 if(!--
mµ
->
öu£
){

151 if(
mp
->
∑ges
 =
mµ
)

152 
mp
->
∑ges
 = 
mµ
->
√xt
;

153 if(
mµ
->
√xt
)

154 
mµ
->
√xt
->
¥ev
 = mpp->prev;

155 if(
mµ
->
¥ev
)

156 
mµ
->
¥ev
->
√xt
 = mpp->next;

157 
	`munm≠
(
mµ
, 
∑gesize
);

159 *(**Ë
p
 = 
mµ
->
‰ì
;

160 
mµ
->
‰ì
 = 
p
;

161 if(!
mµ
->
√xt
 && !mµ->
¥ev
 && 
mp
->
∑ges
 != mpp){

162 if(
mp
->
∑ges
)

163 
mp
->
∑ges
->
¥ev
 = 
mµ
;

164 
mµ
->
√xt
 = 
mp
->
∑ges
;

165 
mp
->
∑ges
 = 
mµ
;

169 
	`mp_u∆ock
(
mp
);

170 
	}
}

	@get_interface3/libtc/src/pathfind.c

25 
	~<°dlib.h
>

26 
	~<°dio.h
>

27 
	~<tc°rög.h
>

28 
	~<uni°d.h
>

31 
	$t˝©h_föd
(*
«me
, *
∑th
, 
how
)

33 *
dp
, *
p
, *
pc
, *
‚
;

35 if(
«me
[0] == '/')

36  
	`°rdup
(
«me
);

38 
p
 = 
dp
 = 
	`°rdup
(
∑th
);

39 
‚
 = 
	`mÆloc
(
	`°æí
(
∑th
Ë+ såÀn(
«me
) + 2);

40 (
pc
 = 
	`°r£p
(&
p
, ":"))){

41 
	`•rötf
(
‚
, "%s/%s", 
pc
, 
«me
);

42 if(!
	`ac˚ss
(
‚
, 
how
))

46 if(!
pc
){

47 
	`‰ì
(
‚
);

48 
‚
 = 
NULL
;

51 
	`‰ì
(
dp
);

52  
‚
;

53 
	}
}

	@get_interface3/libtc/src/prioq.c

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<t˘y≥s.h
>

29 
	~<±hªad.h
>

30 
	~<t˝rioq.h
>

32 
	st˝rioq
 {

33 **
	mqt
;

34 
	msize
;

35 
	mcou¡
;

36 
tccom∑ª_‚
 
	mcmp
;

37 
	mlockög
;

38 
±hªad_muãx_t
 
	mlock
;

41 
ölöe
 

42 
	$t˝_lock
(
t˝rioq_t
 *
pq
){

43 if(
pq
->
lockög
){

44 
	`±hªad_muãx_lock
(&
pq
->
lock
);

46 
	}
}

48 
ölöe
 

49 
	$t˝_u∆ock
(
t˝rioq_t
 *
pq
){

50 if(
pq
->
lockög
){

51 
	`±hªad_muãx_u∆ock
(&
pq
->
lock
);

53 
	}
}

55 
t˝rioq_t
 *

56 
	$t˝rioq_√w
(
size
, 
lock
, 
tccom∑ª_‚
 
cmp
)

58 
t˝rioq_t
 *
pq
 = 
	`mÆloc
((*pq));

60 
pq
->
qt
 = 
	`mÆloc
(
size
 * (*pq->qt));

61 
pq
->
size
 = size;

62 
pq
->
cou¡
 = 1;

63 
pq
->
cmp
 = cmp;

64 
pq
->
lockög
 = 
lock
;

65 if(
lock
)

66 
	`±hªad_muãx_öô
(&
pq
->
lock
, 
NULL
);

68  
pq
;

69 
	}
}

72 
	$t˝rioq_add
(
t˝rioq_t
 *
pq
, *
d©a
)

74 
i
;

76 
	`t˝_lock
(
pq
);

78 if(
pq
->
cou¡
 =pq->
size
){

79 
pq
->
qt
 = 
	`ªÆloc
’q->qt, (pq->
size
 *= 2) * (*pq->qt));

82 
i
 = 
pq
->
cou¡
;

83 
pq
->
qt
[
i
] = 
d©a
;

85 
i
 > 1 && 
pq
->
	`cmp
’q->
qt
[i/2],Öq->qt[i]) > 0){

86 *
tmp
 = 
pq
->
qt
[
i
];

87 
pq
->
qt
[
i
] =Öq->qt[i/2];

88 
pq
->
qt
[
i
/2] = 
tmp
;

89 
i
 /= 2;

92 
pq
->
cou¡
++;

94 
	`t˝_u∆ock
(
pq
);

96 
	}
}

99 
	$t˝rioq_gë
(
t˝rioq_t
 *
pq
, **
ªt
)

101 
π
 = -1;

103 
	`t˝_lock
(
pq
);

105 if(
pq
->
cou¡
 > 1){

106 
i
;

107 *
r
;

109 
r
 = 
pq
->
qt
[1];

110 
pq
->
qt
[1] =Öq->qt[pq->
cou¡
-1];

111 
pq
->
cou¡
--;

113 
i
 = 1;

114 (2*
i
 < 
pq
->
cou¡
 &&Öq->
	`cmp
’q->
qt
[i],Öq->qt[2*i]) > 0) ||

115 (2*
i
 < 
pq
->
cou¡
-1 &&Öq->
	`cmp
’q->
qt
[i],Öq->qt[2*i+1]) > 0)){

116 *
tmp
 = 
pq
->
qt
[
i
];

117 
i
 = (2*ò< 
pq
->
cou¡
-1 &&Öq->
	`cmp
’q->
qt
[2*i],Öq->qt[2*i+1]) > 0)?

118 2*
i
+1: 2*i;

119 
pq
->
qt
[
i
/2] =Öq->qt[i];

120 
pq
->
qt
[
i
] = 
tmp
;

123 *
ªt
 = 
r
;

124 
π
 = 0;

127 
	`t˝_u∆ock
(
pq
);

128  
π
;

129 
	}
}

132 
	$t˝rioq_ôems
(
t˝rioq_t
 *
pq
)

134  
pq
->
cou¡
 - 1;

135 
	}
}

138 
	$çrioq_‰ì
(
t˝rioq_t
 *
pq
)

140 
	`‰ì
(
pq
->
qt
);

141 
	`±hªad_muãx_de°roy
(&
pq
->
lock
);

142 
	`‰ì
(
pq
);

143 
	}
}

	@get_interface3/libtc/src/regex.c

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<tc°rög.h
>

28 
	~<t˘y≥s.h
>

29 
	~<ªgex.h
>

31 
	sªgsub
 {

32 
ªgex_t
 
	mrx
;

33 
ªgm©ch_t
 *
	mm
;

34 c⁄° *
	ms
;

35 } 
	tªgsub_t
;

38 
	$rs_lookup
(*
n
, *
d
)

40 
ªgsub_t
 *
rs
 = 
d
;

41 *
t
;

42 
ml
;

43 
u_öt
 
m
 = 
	`°πﬁ
(
n
, &
t
, 0);

45 if(*
t
)

46  
NULL
;

47 if(
m
 > 
rs
->
rx
.
ª_nsub
)

48  
NULL
;

49 if(
rs
->
m
[m].
rm_so
 < 0)

50  
	`°rdup
("");

52 
ml
 = 
rs
->
m
[m].
rm_eo
 -Ñs->m[m].
rm_so
;

53 
t
 = 
	`mÆloc
(
ml
 + 1);

54 
	`°∫˝y
(
t
, 
rs
->
s
 +Ñs->
m
[m].
rm_so
, 
ml
);

55 
t
[
ml
] = 0;

57  
t
;

58 
	}
}

61 
	$t¸egsub
(c⁄° *
°r
, c⁄° *
∑t
, c⁄° *
sub
, 
Êags
)

63 
ªgsub_t
 
rs
;

64 c⁄° *
s
;

65 *
ss
, *
p
;

66 
r
, 
l
;

68 (Ë
Êags
;

70 if((
r
 = 
	`ªgcomp
(&
rs
.
rx
, 
∑t
, 
REG_EXTENDED
))){

71 
buf
[256];

72 
	`ªgîr‹
(
r
, &
rs
.
rx
, 
buf
, (buf));

73 
	`Ârötf
(
°dîr
, "t¸egsub: %s\n", 
buf
);

74  
NULL
;

77 
rs
.
m
 = 
	`ˇŒoc
‘s.
rx
.
ª_nsub
 + 1, (*rs.m));

78 
l
 = 
	`°æí
(
°r
);

79 
ss
 = 
	`mÆloc
(
l
 + 1);

80 
p
 = 
ss
;

81 
s
 = 
°r
;

83 *
s
){

84 
ml
;

85 if(
	`ªgexec
(&
rs
.
rx
, 
s
,Ñs.rx.
ª_nsub
 + 1,Ñs.
m
, 0))

88 
	`°∫˝y
(
p
, 
s
, 
rs
.
m
[0].
rm_so
);

89 
p
 +
rs
.
m
[0].
rm_so
;

90 
ml
 = 
rs
.
m
[0].
rm_eo
 -Ñs.m[0].
rm_so
;

91 if(
ml
 > 0){

92 *
ms
 = 
	`mÆloc
(
ml
 + 1);

93 *
Ω
;

94 
¶
, 
o
;

96 
rs
.
s
 = s;

97 
Ω
 = 
	`tc°ªxp
(
sub
, "{", "}", 0, 
rs_lookup
, &
rs
,

98 
TCSTREXP_KEEPUNDEF
 | 
TCSTREXP_FREE
);

99 
¶
 = 
	`°æí
(
Ω
);

100 
o
 = 
p
 - 
ss
;

101 
ss
 = 
	`ªÆloc
(ss, 
l
 +
¶
);

102 
p
 = 
ss
 + 
o
;

104 
	`°r˝y
(
p
, 
Ω
);

105 
p
 +
¶
;

106 
	`‰ì
(
Ω
);

107 
	`‰ì
(
ms
);

109 
s
 +
rs
.
m
[0].
rm_eo
;

112 
	`°r˝y
(
p
, 
s
);

113 
	`‰ì
(
rs
.
m
);

114 
	`ªg‰ì
(&
rs
.
rx
);

115  
ss
;

116 
	}
}

	@get_interface3/libtc/src/snprintf.c

1 
	~"c⁄fig.h
"

3 #i‚de‡
HAVE_SNPRINTF


4 
	~<°dlib.h
>

5 
	~<uni°d.h
>

6 
	~<°d¨g.h
>

7 
	~<î∫o.h
>

8 
	~<°rög.h
>

9 
	~<˘y≥.h
>

21 
	#VA_LOCAL_DECL
 
va_li°
 
≠


	)

22 
	#VA_START
(
f
Ë
	`va_°¨t
(
≠
, f)

	)

23 
	#VA_SHIFT
(
v
,
t
Ë;

	)

24 
	#VA_END
 
	`va_íd
(
≠
)

	)

30 
d›r
(*
buf„r
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
);

31 
fmt°r
(*
vÆue
, 
lju°
, 
Àn
, 
z∑d
, 
¥ecisi⁄
);

32 
fmäum
(
vÆue
, 
ba£
, 
dosign
,

33 
lju°
, 
Àn
, 
z∑d
, 
¥ecisi⁄
);

34 
fmtdoubÀ
(
fmt
, 
vÆue
,

35 
lju°
, 
Àn
, 
z∑d
, 
¥ecisi⁄
);

36 
do°r
(*);

37 *
	gouçut
;

38 
d›r_outch
(
c
);

39 *
	gíd
;

40 
	gvisibÀ_c⁄åﬁ
 = 1;

43 
	$my_v¢¥ötf
(*
°r
, 
size_t
 
cou¡
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

45 
°r
[0] = 0;

46 
íd
 = 
°r
 + 
cou¡
 - 1;

47 
	`d›r
(
°r
, 
fmt
, 
¨gs
);

48 i‡(
cou¡
 > 0)

50 
íd
[0] = 0;

52  (
	`°æí
(
°r
));

53 
	}
}

55 #ifde‡
HAVE_STDARG_H


57 
	$¢¥ötf
(*
°r
, 
size_t
 
cou¡
, c⁄° *
fmt
,...)

60 
	$¢¥ötf
(
va_Æi°
)

61 
va_d˛


65 #i‚de‡
HAVE_STDARG_H


66 *
°r
;

67 
size_t
 
cou¡
;

68 *
fmt
;

71 
VA_LOCAL_DECL
;

73 
	`VA_START
(
fmt
);

74 
	`VA_SHIFT
(
°r
, *);

76 
	`VA_SHIFT
(
cou¡
, 
size_t
);

77 
	`VA_SHIFT
(
fmt
, *);

79 ()
	`my_v¢¥ötf
(
°r
, 
cou¡
, 
fmt
, 
≠
);

80 
VA_END
;

81  (
	`°æí
(
°r
));

82 
	}
}

85 
	$d›r
(*
buf„r
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

87 
ch
;

88 
vÆue
;

89 
l⁄gÊag
 = 0;

90 *
°rvÆue
;

91 
lju°
;

92 
Àn
;

93 
z∑d
;

94 
¥ecisi⁄
;

95 
£t_¥ecisi⁄
;

96 
dvÆ
;

98 
ouçut
 = 
buf„r
;

99 (
ch
 = *
f‹m©
++))

101 
ch
)

104 
lju°
 = 
Àn
 = 
z∑d
 = 0;

105 
¥ecisi⁄
 = -1;

106 
£t_¥ecisi⁄
 = 0;

107 
√xtch
:

108 
ch
 = *
f‹m©
++;

109 
ch
)

112 
	`do°r
("**end of format**");

115 
lju°
 = 1;

116 
√xtch
;

118 
£t_¥ecisi⁄
 = 1;

119 
¥ecisi⁄
 = 0;

120 
√xtch
;

122 
Àn
 = 
	`va_¨g
(
¨gs
, );

124 
√xtch
;

126 i‡(
Àn
 =0 && 
£t_¥ecisi⁄
 == 0)

127 
z∑d
 = '0';

137 i‡(
£t_¥ecisi⁄
)

139 
¥ecisi⁄
 =Öªcisi⁄ * 10 + 
ch
 - '0';

143 
Àn
 =Üí * 10 + 
ch
 - '0';

145 
√xtch
;

147 
l⁄gÊag
 = 1;

148 
√xtch
;

152 i‡(
l⁄gÊag
)

154 
vÆue
 = 
	`va_¨g
(
¨gs
, );

158 
vÆue
 = 
	`va_¨g
(
¨gs
, );

160 
	`fmäum
(
vÆue
, 10, 0, 
lju°
, 
Àn
, 
z∑d
, 
¥ecisi⁄
);

165 i‡(
l⁄gÊag
)

167 
vÆue
 = 
	`va_¨g
(
¨gs
, );

171 
vÆue
 = 
	`va_¨g
(
¨gs
, );

173 
	`fmäum
(
vÆue
, 8, 0, 
lju°
, 
Àn
, 
z∑d
, 
¥ecisi⁄
);

178 i‡(
l⁄gÊag
)

180 
vÆue
 = 
	`va_¨g
(
¨gs
, );

184 
vÆue
 = 
	`va_¨g
(
¨gs
, );

186 
	`fmäum
(
vÆue
, 10, 1, 
lju°
, 
Àn
, 
z∑d
, 
¥ecisi⁄
);

189 i‡(
l⁄gÊag
)

191 
vÆue
 = 
	`va_¨g
(
¨gs
, );

195 
vÆue
 = 
	`va_¨g
(
¨gs
, );

197 
	`fmäum
(
vÆue
, 16, 0, 
lju°
, 
Àn
, 
z∑d
, 
¥ecisi⁄
);

200 i‡(
l⁄gÊag
)

202 
vÆue
 = 
	`va_¨g
(
¨gs
, );

206 
vÆue
 = 
	`va_¨g
(
¨gs
, );

208 
	`fmäum
(
vÆue
, -16, 0, 
lju°
, 
Àn
, 
z∑d
, 
¥ecisi⁄
);

211 
°rvÆue
 = 
	`va_¨g
(
¨gs
, *);

213 
	`fmt°r
(
°rvÆue
, 
lju°
, 
Àn
, 
z∑d
, 
¥ecisi⁄
);

216 
ch
 = 
	`va_¨g
(
¨gs
, );

219 
b
[2];

220 
vsb
 = 
visibÀ_c⁄åﬁ
;

222 
b
[0] = 
ch
;

223 
b
[1] = 0;

224 
visibÀ_c⁄åﬁ
 = 0;

225 
	`fmt°r
(
b
, 
lju°
, 
Àn
, 
z∑d
, 
¥ecisi⁄
);

226 
visibÀ_c⁄åﬁ
 = 
vsb
;

231 
dvÆ
 = 
	`va_¨g
(
¨gs
, );

233 
	`fmtdoubÀ
(
ch
, 
dvÆ
, 
lju°
, 
Àn
, 
z∑d
, 
¥ecisi⁄
);

236 
	`d›r_outch
(
ch
);

239 
	`do°r
("???????");

241 
l⁄gÊag
 = 0;

244 
	`d›r_outch
(
ch
);

248 *
ouçut
 = 0;

249 
	}
}

258 
	$fmt°r
(*
vÆue
, 
lju°
, 
Àn
, 
z∑d
, 
¥ecisi⁄
)

260 
∑dÀn
, 
°æí
, 
i
, 
c
;

262 
z∑d
 = 0;

263 i‡(
vÆue
 == 0)

265 
vÆue
 = "<NULL>";

267 i‡(
¥ecisi⁄
 > 0)

269 
°æí
 = 
¥ecisi⁄
;

274 
°æí
 = 0; (
c
 = 
vÆue
[strlen]); ++strlen)

276 i‡(
visibÀ_c⁄åﬁ
 && 
	`is˙ål
(
c
Ë&& !
	`is•a˚
(c))

278 ++
°æí
;

282 
∑dÀn
 = 
Àn
 - 
°æí
;

283 i‡(
∑dÀn
 < 0)

284 
∑dÀn
 = 0;

285 i‡(
lju°
)

286 
∑dÀn
 = -padlen;

287 
∑dÀn
 > 0)

289 
	`d›r_outch
(' ');

290 --
∑dÀn
;

293 
i
 = 0; (
c
 = 
vÆue
[i]); ++i)

295 i‡(
visibÀ_c⁄åﬁ
 && 
	`is˙ål
(
c
Ë&& !
	`is•a˚
(c))

297 
	`d›r_outch
('^');

298 
c
 = ('@' | (c & 0x1F));

300 
	`d›r_outch
(
c
);

302 
∑dÀn
 < 0)

304 
	`d›r_outch
(' ');

305 ++
∑dÀn
;

307 
	}
}

310 
	$fmäum
(
vÆue
, 
ba£
, 
dosign
, 
lju°
,

311 
Àn
, 
z∑d
, 
¥ecisi⁄
)

313 
signvÆue
 = 0;

314 
uvÆue
;

315 
c⁄vît
[20];

316 
∂a˚
 = 0;

317 
∑dÀn
 = 0;

318 
ˇps
 = 0;

320 
¥ecisi⁄
 = 0;

323 
uvÆue
 = 
vÆue
;

324 i‡(
dosign
)

326 i‡(
vÆue
 < 0)

328 
signvÆue
 = '-';

329 
uvÆue
 = -
vÆue
;

332 i‡(
ba£
 < 0)

334 
ˇps
 = 1;

335 
ba£
 = -base;

339 
c⁄vît
[
∂a˚
++] =

340 (
ˇps
 ? "0123456789ABCDEF" : "0123456789abcdef")

341 [
uvÆue
 % ()
ba£
];

342 
uvÆue
 = (uvÆuê/ ()
ba£
);

344 
uvÆue
);

345 
c⁄vît
[
∂a˚
] = 0;

346 
∑dÀn
 = 
Àn
 - 
∂a˚
;

347 i‡(
∑dÀn
 < 0)

348 
∑dÀn
 = 0;

349 i‡(
lju°
)

350 
∑dÀn
 = -padlen;

353 i‡(
z∑d
 && 
∑dÀn
 > 0)

355 i‡(
signvÆue
)

357 
	`d›r_outch
(
signvÆue
);

358 --
∑dÀn
;

359 
signvÆue
 = 0;

361 
∑dÀn
 > 0)

363 
	`d›r_outch
(
z∑d
);

364 --
∑dÀn
;

367 
∑dÀn
 > 0)

369 
	`d›r_outch
(' ');

370 --
∑dÀn
;

372 i‡(
signvÆue
)

373 
	`d›r_outch
(
signvÆue
);

374 
∂a˚
 > 0)

375 
	`d›r_outch
(
c⁄vît
[--
∂a˚
]);

376 
∑dÀn
 < 0)

378 
	`d›r_outch
(' ');

379 ++
∑dÀn
;

381 
	}
}

384 
	$fmtdoubÀ
(
fmt
, 
vÆue
, 
lju°
, 
Àn
, 
z∑d
, 
¥ecisi⁄
)

386 
c⁄vît
[128];

387 
fmt°r
[128];

388 
l
;

390 
z∑d
 = 0;

391 i‡(
Àn
 == 0)

392 
Àn
 = 10;

393 i‡(
Àn
 > ()(
c⁄vît
) - 10)

395 
Àn
 = ()(
c⁄vît
) - 10;

397 i‡(
¥ecisi⁄
 > ()(
c⁄vît
) - 10)

399 
¥ecisi⁄
 = ()(
c⁄vît
) - 10;

401 i‡(
¥ecisi⁄
 > 
Àn
)

402 
¥ecisi⁄
 = 
Àn
;

403 
	`°r˝y
(
fmt°r
, "%");

404 i‡(
lju°
)

405 
	`°rˇt
(
fmt°r
, "-");

406 i‡(
Àn
)

408 
	`•rötf
(
fmt°r
 + 
	`°æí
(fmt°r), "%d", 
Àn
);

410 i‡(
¥ecisi⁄
 > 0)

412 
	`•rötf
(
fmt°r
 + 
	`°æí
(fmt°r), ".%d", 
¥ecisi⁄
);

414 
l
 = 
	`°æí
(
fmt°r
);

415 
fmt°r
[
l
] = 
fmt
;

416 
fmt°r
[
l
 + 1] = 0;

417 
	`•rötf
(
c⁄vît
, 
fmt°r
, 
vÆue
);

418 
	`do°r
(
c⁄vît
);

419 
	}
}

422 
	$do°r
(*
°r
)

424 *
°r
)

425 
	`d›r_outch
(*
°r
++);

426 
	}
}

429 
	$d›r_outch
(
c
)

431 i‡(
íd
 =0 || 
ouçut
 <Énd)

433 *
ouçut
++ = 
c
;

435 
	}
}

	@get_interface3/libtc/src/string.c

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<tc°rög.h
>

28 
	~<t˘y≥s.h
>

29 
	~<˘y≥.h
>

30 
	~<limôs.h
>

32 
	#hex
(
x
Ë(((x)<0x3a)? ((x)-'0'): (((x)<0x60)? ((x)-0x37): ((x)-0x57)))

	)

35 
	$esˇ≥
(*
d
, c⁄° *
s
)

37 
i
;

39 
	#bsub
(
c
,
e
Ëc: *
d
 =É; 
s
++; 

	)

41 *
s
){

42 
	`bsub
('t', '\t');

43 
	`bsub
('n', '\n');

44 
	`bsub
('r', '\r');

45 
	`bsub
('f', '\f');

46 
	`bsub
('b', '\b');

47 
	`bsub
('a', '\a');

48 
	`bsub
('e', 0x1b);

53 *
d
 = 0;

54 
i
 = 0; i < 3 && 
	`isdigô
(*
s
); i++){

55 *
d
 *= 8;

56 *
d
 +*
s
++ - '0';

60 if(
s
[1] && s[2] && 
	`isxdigô
(s[1]) && isxdigit(s[2])){

61 *
d
++ = 
	`hex
(
s
[1]) * 16 + hex(s[2]);

62 
s
 += 3;

64 *
d
 = *
s
++;

68 if(
s
[1]){

69 *
d
 = (
	`touµî
(
s
[1]) - 0x40) & 0x7f;

70 
s
 += 2;

72 *
d
 = *
s
++;

76 *
d
 = *
s
++;

80  
s
;

81 
	}
}

84 
tc°ªxp
(c⁄° *
s
, c⁄° *
sd
, c⁄° *
ed
, 
fs
,

85 *(*
lookup
)(*, *), *
ld
, 
Êags
)

87 
l
 = 
°æí
(
s
) + 1;

88 *
exp
 = 
mÆloc
(
l
);

89 *
p
 = 
exp
;

90 *
d
, *
f
;

92 
	#ext
(
n
) do { \

93 
o
 = 
p
 - 
exp
; \

94 
exp
 = 
	`ªÆloc
”xp, 
l
 +
n
); \

95 
p
 = 
exp
 + 
o
; \

96 } 0)

	)

98 *
s
){

99 *
s
){

101 if(
Êags
 & 
TCSTREXP_ESCAPE
){

102 
s
 = 
esˇ≥
(
p
++, ++s);

104 *
p
++ = *
s
++;

109 
d
 = 
°rchr
(
sd
, *++
s
);

110 if(
d
){

111 c⁄° *
e
 = ++
s
;

112 
ec
 = 
ed
[
d
 - 
sd
];

113 
n
 = 0;

116 *
e
){

117 if(*
e
 =*
d
 && *(e - 1) == '$'){

118 
n
++;

119 } if(*
e
 =
ec
){

120 if(!
n
)

122 
n
--;

124 
e
++;

127 if(*
e
){

128 
vl
 = 
e
 - 
s
;

129 *
vn
 = 
mÆloc
(
vl
 + 1);

130 *
v
;

131 *
def
 = 
NULL
, *
Æt
 = NULL;

132 
upˇ£
 = 0, 
downˇ£
 = 0;

133 
sss
 = 0, 
s¶
 = 
INT_MAX
;

134 *
rx
 = 
NULL
, *
rsub
 = NULL, 
rd
;

136 
°∫˝y
(
vn
, 
s
, 
vl
);

137 
vn
[
vl
] = 0;

138 if(
fs
 && (
f
 = 
°rchr
(
vn
, fs))){

139 
Ê
 = 1;

140 *
f
++ = 0;

141 
Ê
 && *
f
){

142 *
f
++){

144 
def
 = 
f
;

145 
Ê
 = 0;

148 
Æt
 = 
f
;

149 
Ê
 = 0;

152 
upˇ£
 = 1;

155 
downˇ£
 = 1;

158 
f
++;

169 
sss
 = 
°πﬁ
(
f
-1, &f, 0);

170 if(*
f
 == ':'){

171 
f
++;

172 
s¶
 = 
°πﬁ
(
f
, &f, 0);

176 
f
--;

178 
rd
 = *
f
;

179 
rx
 = ++
f
;

180 if((
rsub
 = 
°rchr
(
rx
, 
rd
))){

181 *
ª
;

182 *
rsub
++ = 0;

183 if((
ª
 = 
°rchr
(
rsub
, 
rd
))){

184 *
ª
 = 0;

185 
f
 = 
ª
 + 1;

187 
Ê
 = 0;

190 
rx
 = 
NULL
;

196 if((
v
 = 
lookup
(
vn
, 
ld
))){

197 *
ov
 = 
v
;

198 if(
Æt
)

199 
v
 = 
tc°ªxp
(
Æt
, 
sd
, 
ed
, 
fs
, 
lookup
, 
ld
, 
Êags
);

201 
v
 = 
°rdup
(v);

202 if(
Êags
 & 
TCSTREXP_FREE
)

203 
‰ì
(
ov
);

204 } if(
def
){

205 
v
 = 
tc°ªxp
(
def
, 
sd
, 
ed
, 
fs
, 
lookup
, 
ld
, 
Êags
);

207 if(
v
){

208 
¶
 = 
°æí
(
v
);

209 *
vo
 = 
v
;

211 if(
sss
 < 0){

212 if(-
sss
 < 
¶
){

213 
v
 +
¶
 + 
sss
;

214 
¶
 = -
sss
;

216 } if(
sss
 <
¶
){

217 
v
 +
sss
;

218 
¶
 -
sss
;

220 
v
 +
¶
;

221 
¶
 = 0;

224 if(
s¶
 < 0){

225 if(-
s¶
 < 
¶
){

226 
v
[
¶
 + 
s¶
] = 0;

227 
¶
 +
s¶
;

229 
¶
 = 0;

231 } if(
s¶
 < 
¶
){

232 
v
[
s¶
] = 0;

233 
¶
 = 
s¶
;

236 if(
rx
){

237 *
rs
 = 
t¸egsub
(
v
, 
rx
, 
rsub
, 0);

238 if(
rs
){

239 
‰ì
(
vo
);

240 
vo
 = 
v
 = 
rs
;

241 
¶
 = 
°æí
(
rs
);

245 if(
¶
){

246 
ext
(
¶
 + 1);

248 if(
upˇ£
){

249 *
c
 = 
v
;

250 *
c
)

251 *
p
++ = 
touµî
(*
c
++);

252 } if(
downˇ£
){

253 *
c
 = 
v
;

254 *
c
)

255 *
p
++ = 
tﬁowî
(*
c
++);

257 
°r˝y
(
p
, 
v
);

258 
p
 +
¶
;

261 
‰ì
(
vo
);

262 } if(
Êags
 & 
TCSTREXP_KEEPUNDEF
){

263 
n
 = 
e
 - 
s
 + 3;

264 
ext
(
n
);

265 
mem˝y
(
p
, 
s
 - 2, 
n
);

266 
p
 +
n
;

268 
s
 = 
e
 + 1;

269 
‰ì
(
vn
);

272 *
p
++ = '$';

276 *
p
++ = *
s
++;

281 *
p
 = 0;

283 #unde‡
ext


284  
exp
;

288 
	$tc°ªsc
(*
d°
, c⁄° *
§c
)

290 *
d
 = 
d°
;

292 *
§c
){

293 if(*
§c
 == '\\')

294 
§c
 = 
	`esˇ≥
(
d
++, ++src);

296 *
d
++ = *
§c
++;

299 *
d
 = 0;

301  
d
 - 
d°
;

302 
	}
}

	@get_interface3/libtc/src/strsep.c

30 
	~<tc°rög.h
>

44 
	$°r£p
(**
°rögp
, c⁄° *
dñim
)

46 *
s
;

47 c⁄° *
•™p
;

48 
c
, 
sc
;

49 *
tok
;

51 i‡((
s
 = *
°rögp
Ë=
NULL
)

52  (
NULL
);

53 
tok
 = 
s
;;) {

54 
c
 = *
s
++;

55 
•™p
 = 
dñim
;

57 i‡((
sc
 = *
•™p
++Ë=
c
) {

58 i‡(
c
 == 0)

59 
s
 = 
NULL
;

61 
s
[-1] = 0;

62 *
°rögp
 = 
s
;

63  (
tok
);

65 } 
sc
 != 0);

68 
	}
}

	@get_interface3/libtc/src/strtotime.c

25 
	#_XOPEN_SOURCE
 1

	)

26 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<t˘y≥s.h
>

32 
	~<t˘ime.h
>

35 *
	gtimefmts
[13] = {

48 
NULL


53 
	$°πŸime
(*
ts
, 
tm
 *tm, **
fmts
)

55 *
t
;

56 
time_t
 
…
;

57 
i
;

59 if(
fmts
 =
NULL
)

60 
fmts
 = 
timefmts
;

62 
i
 = 0;

63 
fmts
[
i
] !
NULL
 &&

64 ((
t
 = 
	`°Ωtime
(
ts
, 
fmts
[
i
], 
tm
)Ë=
NULL
 || *t != 0);

65 
i
++);

67 if(
fmts
[
i
] !
NULL
){

68 
…
 = 
	`time
(
NULL
);

69 
	`loˇ…ime_r
(&
…
, 
tm
);

70 
	`°Ωtime
(
ts
, 
fmts
[
i
], 
tm
);

73  
fmts
[
i
];

74 
	}
}

	@get_interface3/libtc/src/tcc-internal.h

25 #i‚de‡
_TCC_INTERNAL_H


26 
	#_TCC_INTERNAL_H


	)

28 
	~<t˘y≥s.h
>

29 
	~<t˛i°.h
>

31 
	#TCC_INTEGER
 1

	)

32 
	#TCC_FLOAT
 2

	)

33 
	#TCC_BOOLEAN
 3

	)

34 
	#TCC_STRING
 4

	)

35 
	#TCC_REF
 5

	)

36 
	#TCC_IGNORE
 (1<<28)

	)

37 
	#TCC_EXPAND
 (1<<29)

	)

38 
	#TCC_LONG
 (1<<30)

	)

39 
	#TCC_UNSIGNED
 (1U<<31)

	)

40 
	#TCC_TYPEMASK
 (
TCC_IGNORE
-1)

	)

43 
	mty≥
;

45 
uöt64_t
 
	möãgî
;

46 
	mÊﬂtög
;

47 
	mboﬁón
;

48 *
	m°rög
;

49 } 
	mvÆue
;

50 } 
	ttcc_vÆue
;

52 
_c⁄f_£˘i⁄
 
	tc⁄f_£˘i⁄
;

53 
	s_c⁄f_£˘i⁄
 {

54 *
	m«me
;

55 
t˛i°_t
 *
	míåõs
;

56 
t˛i°_t
 *
	mmîge
;

57 
c⁄f_£˘i⁄
 *
	m∑ª¡
;

60 
	stcc⁄f_£˘i⁄
 {

61 
c⁄f_£˘i⁄
 *
	m£c
;

62 
tcc⁄f_£˘i⁄_t
 *
	m∑ª¡
;

65 
	#TCC_VALUE
 1

	)

66 
	#TCC_SECTION
 2

	)

67 
	#TCC_MSECTION
 3

	)

70 
	mty≥
;

72 *
	mkey
;

73 
t˛i°_t
 *
	mvÆues
;

74 } 
	mvÆue
;

75 
c⁄f_£˘i⁄
 *
	m£˘i⁄
;

76 } 
	ttcc_íåy
;

79 
c⁄f_£˘i⁄
 *
c⁄f_√w
(*
«me
);

80 
tcc_addöt
(
tcc_íåy
 *, );

81 
tcc_addÊﬂt
(
tcc_íåy
 *, );

82 
tcc_add°rög
(
tcc_íåy
 *, *, );

83 
tcc_addboﬁ
(
tcc_íåy
 *, );

84 
tcc_addªf
(
tcc_íåy
 *
ã
, *
ªf
);

85 
c⁄f_£˘i⁄
 *
tcc_Àx
(*, 
tcio_‚
, conf_section *);

86 
tcc_íåy
 *
¸óã_íåy
(
c⁄f_£˘i⁄
 *
£c
, *
«me
, 
ty≥
);

	@get_interface3/libtc/src/tree.c

23 
	#NDEBUG
 1

	)

25 
	~<°dlib.h
>

26 
	~<°ddef.h
>

27 
	~<±hªad.h
>

28 
	~<t˘ªe.h
>

29 
	~<as£π.h
>

31 íum { 
	mdnode_ªd
, 
	mdnode_bœck
 } 
	tdnode_cﬁ‹_t
;

33 
	sdnode_t
 {

34 
dnode_t
 *
	mÀ·
;

35 
dnode_t
 *
	mright
;

36 
dnode_t
 *
	m∑ª¡
;

37 
dnode_cﬁ‹_t
 
	mcﬁ‹
;

38 *
	mkey
;

39 } 
	tdnode_t
;

41 
	st˘ªe
 {

42 
dnode_t
 
	mnûnode
;

43 
	mnodecou¡
;

44 
tccom∑ª_‚
 
	mcom∑ª
;

45 
	mlockög
;

46 
±hªad_muãx_t
 
	mlock
;

47 
uöt32_t
 
	mÊags
;

50 
	#di˘_roŸ
(
D
Ë((D)->
nûnode
.
À·
)

	)

51 
	#di˘_nû
(
D
Ë(&(D)->
nûnode
)

	)

52 
	#DICT_DEPTH_MAX
 64

	)

61 
	$rŸ©e_À·
(
dnode_t
 *
uµî
)

63 
dnode_t
 *
lowî
, *
lowÀ·
, *
uµ¨ít
;

65 
lowî
 = 
uµî
->
right
;

66 
uµî
->
right
 = 
lowÀ·
 = 
lowî
->
À·
;

67 
lowÀ·
->
∑ª¡
 = 
uµî
;

69 
lowî
->
∑ª¡
 = 
uµ¨ít
 = 
uµî
->parent;

74 i‡(
uµî
 =
uµ¨ít
->
À·
) {

75 
uµ¨ít
->
À·
 = 
lowî
;

77 
	`as£π
 (
uµî
 =
uµ¨ít
->
right
);

78 
uµ¨ít
->
right
 = 
lowî
;

81 
lowî
->
À·
 = 
uµî
;

82 
uµî
->
∑ª¡
 = 
lowî
;

83 
	}
}

90 
	$rŸ©e_right
(
dnode_t
 *
uµî
)

92 
dnode_t
 *
lowî
, *
lowright
, *
uµ¨ít
;

94 
lowî
 = 
uµî
->
À·
;

95 
uµî
->
À·
 = 
lowright
 = 
lowî
->
right
;

96 
lowright
->
∑ª¡
 = 
uµî
;

98 
lowî
->
∑ª¡
 = 
uµ¨ít
 = 
uµî
->parent;

100 i‡(
uµî
 =
uµ¨ít
->
right
) {

101 
uµ¨ít
->
right
 = 
lowî
;

103 
	`as£π
 (
uµî
 =
uµ¨ít
->
À·
);

104 
uµ¨ít
->
À·
 = 
lowî
;

107 
lowî
->
right
 = 
uµî
;

108 
uµî
->
∑ª¡
 = 
lowî
;

109 
	}
}

111 
ölöe
 

112 
	$åì_lock
(
t˘ªe_t
 *
t
)

114 if(
t
->
lockög
)

115 
	`±hªad_muãx_lock
(&
t
->
lock
);

116 
	}
}

118 
ölöe
 

119 
	$åì_u∆ock
(
t˘ªe_t
 *
t
)

121 if(
t
->
lockög
)

122 
	`±hªad_muãx_u∆ock
(&
t
->
lock
);

123 
	}
}

125 
t˘ªe_t
 *

126 
	$t˘ªe_√w
(
lock
, 
tccom∑ª_‚
 
cmp
, 
uöt32_t
 
Êags
)

128 
t˘ªe_t
 *
t
 = 
	`ˇŒoc
(1, (*t));

130 
t
->
nûnode
.
À·
 = &t->nilnode;

131 
t
->
nûnode
.
right
 = &t->nilnode;

132 
t
->
nûnode
.
∑ª¡
 = &t->nilnode;

133 
t
->
nûnode
.
cﬁ‹
 = 
dnode_bœck
;

134 
t
->
com∑ª
 = 
cmp
;

135 
t
->
lockög
 = 
lock
;

136 
	`±hªad_muãx_öô
(&
t
->
lock
, 
NULL
);

137 
t
->
Êags
 = flags;

139  
t
;

140 
	}
}

148 
	$‰ì_nodes
(
dnode_t
 *
node
, dnode_à*
nû
, 
tc‰ì_‚
 
‰
)

150 i‡(
node
 =
nû
)

152 
	`‰ì_nodes
(
node
->
À·
, 
nû
, 
‰
);

153 
	`‰ì_nodes
(
node
->
right
, 
nû
, 
‰
);

154 if(
‰
)

155 
	`‰
(
node
->
key
);

156 
	`‰ì
(
node
);

157 
	}
}

160 
	$t˘ªe_de°roy
(
t˘ªe_t
 *
t
, 
tc‰ì_‚
 
f
)

162 
dnode_t
 *
nû
 = 
	`di˘_nû
(
t
), *
roŸ
 = 
	`di˘_roŸ
(t);

163 
	`‰ì_nodes
(
roŸ
, 
nû
, 
f
);

164 
	`±hªad_muãx_de°roy
(&
t
->
lock
);

166 
	}
}

175 
dnode_t
 *

176 
	$do_föd
(
t˘ªe_t
 *
di˘
, *
key
)

178 
dnode_t
 *
roŸ
 = 
	`di˘_roŸ
(
di˘
);

179 
dnode_t
 *
nû
 = 
	`di˘_nû
(
di˘
);

180 
ªsu…
;

182 
roŸ
 !
nû
) {

183 
ªsu…
 = 
di˘
->
	`com∑ª
(
key
, 
roŸ
->key);

184 i‡(
ªsu…
 < 0)

185 
roŸ
 =ÑoŸ->
À·
;

186 i‡(
ªsu…
 > 0)

187 
roŸ
 =ÑoŸ->
right
;

189  
roŸ
;

193  
NULL
;

194 
	}
}

197 
	$t˘ªe_föd
(
t˘ªe_t
 *
di˘
, *
key
, *
r
)

199 
dnode_t
 *
node
;

200 **
ªt
 = 
r
;

202 
	`åì_lock
(
di˘
);

204 
node
 = 
	`do_föd
(
di˘
, 
key
);

205 if(
node
 && 
ªt
)

206 *
ªt
 = 
node
->
key
;

208 
	`åì_u∆ock
(
di˘
);

209  !
node
;

210 
	}
}

221 
	$do_£¨ch
(
t˘ªe_t
 *
di˘
, *
key
, *
r
, 
ª∂a˚
)

223 
dnode_t
 *
whîe
 = 
	`di˘_roŸ
(
di˘
), *
nû
 = 
	`di˘_nû
(dict);

224 
dnode_t
 *
∑ª¡
 = 
nû
, *
un˛e
, *
gønd∑
;

225 
dnode_t
 *
node
;

226 **
ªt
 = 
r
;

227 
ªsu…
 = -1;

229 
	`åì_lock
(
di˘
);

231 
whîe
 !
nû
) {

232 
∑ª¡
 = 
whîe
;

233 
ªsu…
 = 
di˘
->
	`com∑ª
(
key
, 
whîe
->key);

234 if(
ªsu…
 < 0){

235 
whîe
 = whîe->
À·
;

236 } if(
ªsu…
 > 0){

237 
whîe
 = whîe->
right
;

239 *
ªt
 = 
whîe
->
key
;

240 if(
ª∂a˚
)

241 
whîe
->
key
 = key;

242 
	`åì_u∆ock
(
di˘
);

247 if(
ªt
)

248 *
ªt
 = 
key
;

250 
node
 = 
	`mÆloc
((*node));

251 
node
->
key
 = key;

253 i‡(
ªsu…
 < 0)

254 
∑ª¡
->
À·
 = 
node
;

256 
∑ª¡
->
right
 = 
node
;

258 
node
->
∑ª¡
 =Öarent;

259 
node
->
À·
 = 
nû
;

260 
node
->
right
 = 
nû
;

262 
di˘
->
nodecou¡
++;

266 
node
->
cﬁ‹
 = 
dnode_ªd
;

268 
∑ª¡
->
cﬁ‹
 =
dnode_ªd
) {

269 
gønd∑
 = 
∑ª¡
->parent;

270 i‡(
∑ª¡
 =
gønd∑
->
À·
) {

271 
un˛e
 = 
gønd∑
->
right
;

272 i‡(
un˛e
->
cﬁ‹
 =
dnode_ªd
) {

273 
∑ª¡
->
cﬁ‹
 = 
dnode_bœck
;

274 
un˛e
->
cﬁ‹
 = 
dnode_bœck
;

275 
gønd∑
->
cﬁ‹
 = 
dnode_ªd
;

276 
node
 = 
gønd∑
;

277 
∑ª¡
 = 
gønd∑
->parent;

279 i‡(
node
 =
∑ª¡
->
right
) {

280 
	`rŸ©e_À·
(
∑ª¡
);

281 
∑ª¡
 = 
node
;

282 
	`as£π
 (
gønd∑
 =
∑ª¡
->parent);

285 
∑ª¡
->
cﬁ‹
 = 
dnode_bœck
;

286 
gønd∑
->
cﬁ‹
 = 
dnode_ªd
;

287 
	`rŸ©e_right
(
gønd∑
);

291 
un˛e
 = 
gønd∑
->
À·
;

292 i‡(
un˛e
->
cﬁ‹
 =
dnode_ªd
) {

293 
∑ª¡
->
cﬁ‹
 = 
dnode_bœck
;

294 
un˛e
->
cﬁ‹
 = 
dnode_bœck
;

295 
gønd∑
->
cﬁ‹
 = 
dnode_ªd
;

296 
node
 = 
gønd∑
;

297 
∑ª¡
 = 
gønd∑
->parent;

299 i‡(
node
 =
∑ª¡
->
À·
) {

300 
	`rŸ©e_right
(
∑ª¡
);

301 
∑ª¡
 = 
node
;

302 
	`as£π
 (
gønd∑
 =
∑ª¡
->parent);

304 
∑ª¡
->
cﬁ‹
 = 
dnode_bœck
;

305 
gønd∑
->
cﬁ‹
 = 
dnode_ªd
;

306 
	`rŸ©e_À·
(
gønd∑
);

312 
	`di˘_roŸ
(
di˘
)->
cﬁ‹
 = 
dnode_bœck
;

314 
	`åì_u∆ock
(
di˘
);

316 
	}
}

319 
	$t˘ªe_£¨ch
(
t˘ªe_t
 *
t
, *
key
, *
ªt
)

321  
	`do_£¨ch
(
t
, 
key
, 
ªt
, 0);

322 
	}
}

325 
	$t˘ªe_ª∂a˚
(
t˘ªe_t
 *
t
, *
key
, *
ªt
)

327  
	`do_£¨ch
(
t
, 
key
, 
ªt
, 1);

328 
	}
}

337 
dnode_t
 *
	$di˘_√xt
(
t˘ªe_t
 *
di˘
, 
dnode_t
 *
cuº
)

339 
dnode_t
 *
nû
 = 
	`di˘_nû
(
di˘
), *
∑ª¡
, *
À·
;

341 i‡(
cuº
->
right
 !
nû
) {

342 
cuº
 = cuº->
right
;

343 (
À·
 = 
cuº
->À·Ë!
nû
)

344 
cuº
 = 
À·
;

345  
cuº
;

348 
∑ª¡
 = 
cuº
->parent;

350 
∑ª¡
 !
nû
 && 
cuº
 =∑ª¡->
right
) {

351 
cuº
 = 
∑ª¡
;

352 
∑ª¡
 = 
cuº
->parent;

355  (
∑ª¡
 =
nû
Ë? 
NULL
 :Öarent;

356 
	}
}

365 
	$t˘ªe_dñëe
(
t˘ªe_t
 *
di˘
, *
key
, *
r
)

367 
dnode_t
 *
nû
 = 
	`di˘_nû
(
di˘
), *
chûd
, *
dñ∑ª¡
, *
dñëe
;

368 **
ªt
 = 
r
;

370 
	`åì_lock
(
di˘
);

372 
dñëe
 = 
	`do_föd
(
di˘
, 
key
);

373 if(!
dñëe
){

374 
	`åì_u∆ock
(
di˘
);

378 
dñ∑ª¡
 = 
dñëe
->
∑ª¡
;

380 if(
ªt
)

381 *
ªt
 = 
dñëe
->
key
;

395 i‡(
dñëe
->
À·
 !
nû
 && dñëe->
right
 !=Çil) {

396 
dnode_t
 *
√xt
 = 
	`di˘_√xt
(
di˘
, 
dñëe
);

397 
dnode_t
 *
√xç¨ít
 = 
√xt
->
∑ª¡
;

398 
dnode_cﬁ‹_t
 
√xtcﬁ‹
 = 
√xt
->
cﬁ‹
;

400 
	`as£π
 (
√xt
 !
nû
);

401 
	`as£π
 (
√xt
->
∑ª¡
 !
nû
);

402 
	`as£π
 (
√xt
->
À·
 =
nû
);

409 
chûd
 = 
√xt
->
right
;

410 
chûd
->
∑ª¡
 = 
√xç¨ít
;

412 i‡(
√xç¨ít
->
À·
 =
√xt
) {

413 
√xç¨ít
->
À·
 = 
chûd
;

415 
	`as£π
 (
√xç¨ít
->
right
 =
√xt
);

416 
√xç¨ít
->
right
 = 
chûd
;

424 
√xt
->
∑ª¡
 = 
dñ∑ª¡
;

425 
√xt
->
À·
 = 
dñëe
->left;

426 
√xt
->
right
 = 
dñëe
->right;

427 
√xt
->
À·
->
∑ª¡
 =Çext;

428 
√xt
->
right
->
∑ª¡
 =Çext;

429 
√xt
->
cﬁ‹
 = 
dñëe
->color;

430 
dñëe
->
cﬁ‹
 = 
√xtcﬁ‹
;

432 i‡(
dñ∑ª¡
->
À·
 =
dñëe
) {

433 
dñ∑ª¡
->
À·
 = 
√xt
;

435 
	`as£π
 (
dñ∑ª¡
->
right
 =
dñëe
);

436 
dñ∑ª¡
->
right
 = 
√xt
;

440 
	`as£π
 (
dñëe
 !
nû
);

441 
	`as£π
 (
dñëe
->
À·
 =
nû
 || dñëe->
right
 ==Çil);

443 
chûd
 = (
dñëe
->
À·
 !
nû
Ë? dñëe->À· : dñëe->
right
;

445 
chûd
->
∑ª¡
 = 
dñ∑ª¡
 = 
dñëe
->parent;

447 i‡(
dñëe
 =
dñ∑ª¡
->
À·
) {

448 
dñ∑ª¡
->
À·
 = 
chûd
;

450 
	`as£π
 (
dñëe
 =
dñ∑ª¡
->
right
);

451 
dñ∑ª¡
->
right
 = 
chûd
;

455 
dñëe
->
∑ª¡
 = 
NULL
;

456 
dñëe
->
right
 = 
NULL
;

457 
dñëe
->
À·
 = 
NULL
;

459 
di˘
->
nodecou¡
--;

463 i‡(
dñëe
->
cﬁ‹
 =
dnode_bœck
) {

464 
dnode_t
 *
∑ª¡
, *
si°î
;

466 
	`di˘_roŸ
(
di˘
)->
cﬁ‹
 = 
dnode_ªd
;

468 
chûd
->
cﬁ‹
 =
dnode_bœck
) {

469 
∑ª¡
 = 
chûd
->parent;

470 i‡(
chûd
 =
∑ª¡
->
À·
) {

471 
si°î
 = 
∑ª¡
->
right
;

472 
	`as£π
 (
si°î
 !
nû
);

473 i‡(
si°î
->
cﬁ‹
 =
dnode_ªd
) {

474 
si°î
->
cﬁ‹
 = 
dnode_bœck
;

475 
∑ª¡
->
cﬁ‹
 = 
dnode_ªd
;

476 
	`rŸ©e_À·
(
∑ª¡
);

477 
si°î
 = 
∑ª¡
->
right
;

478 
	`as£π
 (
si°î
 !
nû
);

480 i‡(
si°î
->
À·
->
cﬁ‹
 =
dnode_bœck


481 && 
si°î
->
right
->
cﬁ‹
 =
dnode_bœck
) {

482 
si°î
->
cﬁ‹
 = 
dnode_ªd
;

483 
chûd
 = 
∑ª¡
;

485 i‡(
si°î
->
right
->
cﬁ‹
 =
dnode_bœck
) {

486 
	`as£π
 (
si°î
->
À·
->
cﬁ‹
 =
dnode_ªd
);

487 
si°î
->
À·
->
cﬁ‹
 = 
dnode_bœck
;

488 
si°î
->
cﬁ‹
 = 
dnode_ªd
;

489 
	`rŸ©e_right
(
si°î
);

490 
si°î
 = 
∑ª¡
->
right
;

491 
	`as£π
 (
si°î
 !
nû
);

493 
si°î
->
cﬁ‹
 = 
∑ª¡
->color;

494 
si°î
->
right
->
cﬁ‹
 = 
dnode_bœck
;

495 
∑ª¡
->
cﬁ‹
 = 
dnode_bœck
;

496 
	`rŸ©e_À·
(
∑ª¡
);

500 
	`as£π
 (
chûd
 =
∑ª¡
->
right
);

501 
si°î
 = 
∑ª¡
->
À·
;

502 
	`as£π
 (
si°î
 !
nû
);

503 i‡(
si°î
->
cﬁ‹
 =
dnode_ªd
) {

504 
si°î
->
cﬁ‹
 = 
dnode_bœck
;

505 
∑ª¡
->
cﬁ‹
 = 
dnode_ªd
;

506 
	`rŸ©e_right
(
∑ª¡
);

507 
si°î
 = 
∑ª¡
->
À·
;

508 
	`as£π
 (
si°î
 !
nû
);

510 i‡(
si°î
->
right
->
cﬁ‹
 =
dnode_bœck


511 && 
si°î
->
À·
->
cﬁ‹
 =
dnode_bœck
) {

512 
si°î
->
cﬁ‹
 = 
dnode_ªd
;

513 
chûd
 = 
∑ª¡
;

515 i‡(
si°î
->
À·
->
cﬁ‹
 =
dnode_bœck
) {

516 
	`as£π
 (
si°î
->
right
->
cﬁ‹
 =
dnode_ªd
);

517 
si°î
->
right
->
cﬁ‹
 = 
dnode_bœck
;

518 
si°î
->
cﬁ‹
 = 
dnode_ªd
;

519 
	`rŸ©e_À·
(
si°î
);

520 
si°î
 = 
∑ª¡
->
À·
;

521 
	`as£π
 (
si°î
 !
nû
);

523 
si°î
->
cﬁ‹
 = 
∑ª¡
->color;

524 
si°î
->
À·
->
cﬁ‹
 = 
dnode_bœck
;

525 
∑ª¡
->
cﬁ‹
 = 
dnode_bœck
;

526 
	`rŸ©e_right
(
∑ª¡
);

532 
chûd
->
cﬁ‹
 = 
dnode_bœck
;

533 
	`di˘_roŸ
(
di˘
)->
cﬁ‹
 = 
dnode_bœck
;

536 
	`åì_u∆ock
(
di˘
);

538 
	}
}

	@get_link/main.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<î∫o.h
>

12 
	~<sys/sockë.h
>

13 
	~<asm/ty≥s.h
>

14 
	~<löux/√éök.h
>

15 
	~<löux/π√éök.h
>

16 
	~<sys/sockë.h
>

17 
	~"∆.h
"

20 
	$maö
()

22 
∆_h™dÀr
 
∆h
;

23 
∆msg
 *∆msg = 
NULL
, *
™swî
 = NULL;

24 
iföfomsg
 *
ifi
;

25 
πgímsg
 *
msg
;

26 
ödex
, 
Àn
, 
îr
;

28 
îr
 = 
	`√éök_›í
(&
∆h
, 
NETLINK_ROUTE
);

29 i‡(
îr
)

30  
îr
;

32 
îr
 = -
EINVAL
;

34 
Àn
 = 
	`°æí
(
«me
);

35 i‡(
Àn
 =1 ||Üí >
IFNAMSIZ
)

36 
out
;

38 
îr
 = -
ENOMEM
;

39 
∆msg
 = 
	`∆msg_Æloc
(
NLMSG_GOOD_SIZE
);

40 i‡(!
∆msg
)

41 
out
;

44 
™swî
 = 
	`∆msg_Æloc_ª£rve
(4096);

45 i‡(!
™swî
)

46 
out
;

48 
îr
 = -
EINVAL
;

49 
ödex
 = 
	`if_«mëoödex
(
«me
);

50 i‡(!
ödex
)

51 
out
;

54 
∆msg
->
∆msghdr
->
∆msg_pid
 = 0;

55 
∆msg
->
∆msghdr
->
∆msg_Êags
 = 
NLM_F_REQUEST
 | 
NLM_F_MATCH
 | 
NLM_F_ROOT
;

56 
∆msg
->
∆msghdr
->
∆msg_ty≥
 = 
RTM_GETLINK
;

57 
∆msg
->
∆msghdr
->
∆msg_£q
 = 
∆h
.
£q
;

59 
msg
 = (
πgímsg
 *)
	`∆msg_ª£rve
(
∆msg
, (rtgenmsg));

60 
msg
->
πgí_Ámûy
 = 
AF_INET
;

63 
îr
 = 
	`√éök_å™ß˘i⁄_gëöfo
(&
∆h
, 
∆msg
, 
™swî
);

64 
out
:

65 
	`√éök_˛o£
(&
∆h
);

66 
	`∆msg_‰ì
(
∆msg
);

67 
	`∆msg_‰ì
(
™swî
);

68  
îr
;

69 
	}
}

	@get_link/nl.c

8 
	~<sys/sockë.h
>

9 
	~<°rög.h
>

10 
	~<°dio.h
>

11 
	~<time.h
>

12 
	~<uni°d.h
>

13 
	~<î∫o.h
>

14 
	~<°dlib.h
>

15 
	~<löux/√éök.h
>

16 
	~<löux/π√éök.h
>

17 
	~<sys/io˘l.h
>

18 
	~<√t/if.h
>

19 
	~<f˙é.h
>

20 
	~"∆.h
"

22 
	#NLMSG_TAIL
(
nmsg
) \

23 ((
π©å
 *Ë(((*Ë(
nmsg
)Ë+ 
	`NLMSG_ALIGN
(“msg)->
∆msg_Àn
)))

	)

25 
size_t
 
	$∆msg_Àn
(c⁄° 
∆msg
 *nlmsg)

27  
∆msg
->
∆msghdr
->
∆msg_Àn
 - 
NLMSG_HDRLEN
;

28 
	}
}

30 *
	$∆msg_d©a
(
∆msg
 *nlmsg)

32 *
d©a
 = ((*)
∆msg
Ë+ 
NLMSG_HDRLEN
;

33 i‡(!
	`∆msg_Àn
(
∆msg
))

34  
NULL
;

35  
d©a
;

36 
	}
}

38 
	$∆a_put
(
∆msg
 *∆msg, 
©å
,

39 c⁄° *
d©a
, 
size_t
 
Àn
)

41 
π©å
 *
πa
;

42 
size_t
 
πÆí
 = 
	`RTA_LENGTH
(
Àn
);

43 
size_t
 
éí
 = 
	`NLMSG_ALIGN
(
∆msg
->
∆msghdr
->
∆msg_Àn
Ë+ 
	`RTA_ALIGN
(
πÆí
);

45 i‡(
éí
 > 
∆msg
->
ˇp
)

46  -
ENOMEM
;

48 
πa
 = 
	`NLMSG_TAIL
(
∆msg
->
∆msghdr
);

49 
πa
->
πa_ty≥
 = 
©å
;

50 
πa
->
πa_Àn
 = 
πÆí
;

51 
	`mem˝y
(
	`RTA_DATA
(
πa
), 
d©a
, 
Àn
);

52 
∆msg
->
∆msghdr
->
∆msg_Àn
 = 
éí
;

54 
	}
}

56 
	$∆a_put_buf„r
(
∆msg
 *∆msg, 
©å
,

57 c⁄° *
d©a
, 
size_t
 
size
)

59  
	`∆a_put
(
∆msg
, 
©å
, 
d©a
, 
size
);

60 
	}
}

62 
	$∆a_put_°rög
(
∆msg
 *∆msg, 
©å
, c⁄° *
°rög
)

64  
	`∆a_put
(
∆msg
, 
©å
, 
°rög
, 
	`°æí
(string) + 1);

65 
	}
}

67 
	$∆a_put_u32
(
∆msg
 *∆msg, 
©å
, 
vÆue
)

69  
	`∆a_put
(
∆msg
, 
©å
, &
vÆue
, (value));

70 
	}
}

72 
	$∆a_put_u16
(
∆msg
 *∆msg, 
©å
, 
vÆue
)

74  
	`∆a_put
(
∆msg
, 
©å
, &
vÆue
, 2);

75 
	}
}

77 
	$∆a_put_©å
(
∆msg
 *∆msg, 
©å
)

79  
	`∆a_put
(
∆msg
, 
©å
, 
NULL
, 0);

80 
	}
}

82 
π©å
 *
	$∆a_begö_√°ed
(
∆msg
 *∆msg, 
©å
)

84 
π©å
 *π©å = 
	`NLMSG_TAIL
(
∆msg
->
∆msghdr
);

86 i‡(
	`∆a_put_©å
(
∆msg
, 
©å
))

87  
NULL
;

89  
π©å
;

90 
	}
}

92 
	$∆a_íd_√°ed
(
∆msg
 *∆msg, 
π©å
 *
©å
)

94 
©å
->
πa_Àn
 = (*)
	`NLMSG_TAIL
(
∆msg
->
∆msghdr
) - (*)attr;

95 
	}
}

111 
∆msg
 *
	$∆msg_Æloc
(
size_t
 
size
)

113 
∆msg
 *nlmsg;

116 
size_t
 
Àn
 = 
NLMSG_HDRLEN
 + 
	`NLMSG_ALIGN
(
size
);

118 
∆msg
 = (∆msg *)
	`mÆloc
((nlmsg));

119 i‡(!
∆msg
)

120  
NULL
;

122 
∆msg
->
∆msghdr
 = (∆msghd∏*)
	`mÆloc
(
Àn
);

123 i‡(!
∆msg
->
∆msghdr
)

124 
îrout
;

126 
	`mem£t
(
∆msg
->
∆msghdr
, 0, 
Àn
);

127 
∆msg
->
ˇp
 = 
Àn
;

128 
∆msg
->
∆msghdr
->
∆msg_Àn
 = 
NLMSG_HDRLEN
;

130  
∆msg
;

131 
îrout
:

132 
	`‰ì
(
∆msg
);

133  
NULL
;

134 
	}
}

146 *
	$∆msg_ª£rve
(
∆msg
 *∆msg, 
size_t
 
Àn
)

148 *
buf
;

149 
size_t
 
∆msg_Àn
 = 
∆msg
->
∆msghdr
->nlmsg_len;

150 
size_t
 
éí
 = 
	`NLMSG_ALIGN
(
Àn
);

153 i‡(
∆msg_Àn
 + 
éí
 > 
∆msg
->
ˇp
)

154  
NULL
;

156 
buf
 = ((*)(
∆msg
->
∆msghdr
)Ë+ 
∆msg_Àn
;

158 
∆msg
->
∆msghdr
->
∆msg_Àn
 +
éí
;

161 i‡(
éí
 > 
Àn
)

162 
	`mem£t
(
buf
 + 
Àn
, 0, 
éí
 -Üen);

164  
buf
;

165 
	}
}

167 
∆msg
 *
	$∆msg_Æloc_ª£rve
(
size_t
 
size
)

169 
∆msg
 *nlmsg;

171 
∆msg
 = 
	`∆msg_Æloc
(
size
);

172 i‡(!
∆msg
)

173  
NULL
;

176 
∆msg
->
∆msghdr
->
∆msg_Àn
 =Çlmsg->
ˇp
;

177  
∆msg
;

178 
	}
}

180 
	$∆msg_‰ì
(
∆msg
 *nlmsg)

182 i‡(!
∆msg
)

185 
	`‰ì
(
∆msg
->
∆msghdr
);

186 
	`‰ì
(
∆msg
);

187 
	}
}

189 
	$√éök_rcv
(
∆_h™dÀr
 *
h™dÀr
, 
∆msg
 *
™swî
, 
Àn
)

192 
ªt
;

193 
sockaddr_∆
 
∆addr
;

196 
iovec
 
iov
 = {

197 .
iov_ba£
 = 
™swî
->
∆msghdr
,

201 .
iov_Àn
 = 
Àn
,

204 
msghdr
 
msg
 = {

205 .
msg_«me
 = &
∆addr
,

206 .
msg_«mñí
 = (
∆addr
),

207 .
msg_iov
 = &
iov
,

208 .
msg_iovÀn
 = 1,

210 
	`mem£t
(&
∆addr
, 0, (nladdr));

212 
∆addr
.
∆_Ámûy
 = 
AF_NETLINK
;

213 
∆addr
.
∆_pid
 = 0;

214 
∆addr
.
∆_groups
 = 0;

216 
	`¥ötf
("add:0x%x,Üí i†%d\r\n", ()
iov
.
iov_ba£
, iov.
iov_Àn
);

217 
agaö
:

218 
ªt
 = 
	`ªcvmsg
(
h™dÀr
->
fd
, &
msg
, 0);

219 
	`¥ötf
("ªài†%d\r\n", 
ªt
);

220 i‡(
ªt
 < 0) {

221 i‡(
î∫o
 =
EINTR
)

222 
agaö
;

223  -
î∫o
;

227 i‡(!
ªt
)

229 i‡(
msg
.
msg_Êags
 & 
MSG_TRUNC
 &&

230 
ªt
 =
™swî
->
∆msghdr
->
∆msg_Àn
)

231  -
EMSGSIZE
;

233  
ªt
;

234 
	}
}

237 
	$∆_ªque°
(
Ámûy
, 
ty≥
, 
∆sock
 *
∆
)

239 
ªt
;

240 
sockaddr_∆
 
¢l
;

243 
∆msghdr
 
∆h
;

244 
πgímsg
 
g
;

245 } 
ªq
;

247 if(
∆
->
sock
 < 0 ) {

248 
	`EINFO
("socket isn'táctive." );

252 
	`mem£t
(&
¢l
, 0, (snl));

253 
¢l
.
∆_Ámûy
 = 
AF_NETLINK
;

255 
ªq
.
∆h
.
∆msg_Àn
 = (req);

256 
ªq
.
∆h
.
∆msg_ty≥
 = 
ty≥
;

257 
ªq
.
∆h
.
∆msg_Êags
 = 
NLM_F_ROOT
 | 
NLM_F_MATCH
 | 
NLM_F_REQUEST
;

258 
ªq
.
∆h
.
∆msg_pid
 = 0;

259 
ªq
.
∆h
.
∆msg_£q
 = ++
∆
->
£q
;

260 
ªq
.
g
.
πgí_Ámûy
 = 
Ámûy
;

262 
ªt
 = 
	`£ndto
(
∆
->
sock
, (*)&
ªq
, Ñeq, 0, (
sockaddr
*)&
¢l
, (snl));

263 i‡(
ªt
 < 0){

264 
	`EINFO
("£ndtÿÁûed: %s",
	`°ªº‹
 ( 
î∫o
 ) );

268 
	}
}

271 
	$√éök_£nd
(
∆_h™dÀr
 *
h™dÀr
, 
∆msg
 *nlmsg)

273 
sockaddr_∆
 
∆addr
;

274 
iovec
 
iov
 = {

275 .
iov_ba£
 = 
∆msg
->
∆msghdr
,

276 .
iov_Àn
 = 
∆msg
->
∆msghdr
->
∆msg_Àn
,

278 
msghdr
 
msg
 = {

279 .
msg_«me
 = &
∆addr
,

280 .
msg_«mñí
 = (
∆addr
),

281 .
msg_iov
 = &
iov
,

282 .
msg_iovÀn
 = 1,

284 
ªt
;

286 
	`mem£t
(&
∆addr
, 0, (nladdr));

287 
∆addr
.
∆_Ámûy
 = 
AF_NETLINK
;

288 
∆addr
.
∆_pid
 = 0;

289 
∆addr
.
∆_groups
 = 0;

291 
ªt
 = 
	`£ndmsg
(
h™dÀr
->
fd
, &
msg
, 0);

292 i‡(
ªt
 < 0)

293  -
î∫o
;

295  
ªt
;

296 
	}
}

298 #i‚de‡
NLMSG_ERROR


299 
	#NLMSG_ERROR
 0x2

	)

314 
	$√éök_å™ß˘i⁄
(
∆_h™dÀr
 *
h™dÀr
,

315 
∆msg
 *
ªque°
, ∆msg *
™swî
)

317 
ªt
;

319 
ªt
 = 
	`√éök_£nd
(
h™dÀr
, 
ªque°
);

320 i‡(
ªt
 < 0)

321  
ªt
;

323 
ªt
 = 
	`√éök_rcv
(
h™dÀr
, 
™swî
);

324 i‡(
ªt
 < 0)

325  
ªt
;

327 i‡(
™swî
->
∆msghdr
->
∆msg_ty≥
 =
NLMSG_ERROR
) {

328 
∆msgîr
 *
îr
 = (∆msgîr*)
	`NLMSG_DATA
(
™swî
->
∆msghdr
);

329  
îr
->
îr‹
;

333 
	}
}

335 
	$∆_gë_lök
(
∆msghdr
 *
h
, ** 
¨gv
)

337 
Àn
;

338 
iföfomsg
 *
iÁ
;

339 
π©å
 *
tb
[
IFA_MAX
 + 1];

340 
iÁ_œbñ
[
IFNAMSIZ
 + 1] = {0};

342 
loˇl_addr
 **
∂addr
 = (loˇl_add∏**)
¨gv
;;

343 
loˇl_addr
 *
addr_tmp
, *
addr_√xt
;

346 
iÁ
 = (
iföfomsg
 *)
	`NLMSG_DATA
(
h
);

347 if(
	`if_ödext⁄ame
(
iÁ
->
ifi_ödex
, 
iÁ_œbñ
Ë=
NULL
){

348 
	`¥ötf
("index isÉrror\r\n");

352 
	`¥ötf
("«mêi†%s\r\n", 
iÁ_œbñ
);

354 
	`mem£t
(
tb
, 0, (tb));

355 
	`∆_∑r£_π©å
(
tb
, 
IFA_MAX
, 
	`IFA_RTA
(
iÁ
), 
Àn
 );

358 if(
tb
[
IFLA_IFNAME
])

359 
	`°∫˝y
(
iÁ_œbñ
, 
	`RTA_DATA
(
tb
[
IFLA_IFNAME
]), 
IFNAMSIZ
);

364 
	}
}

366 
	$∆_ªque°
 ( 
Ámûy
, 
ty≥
, 
sock
 )

368 
ªt
;

369 
sockaddr_∆
 
¢l
;

372 
∆msghdr
 
∆h
;

373 
πgímsg
 
g
;

374 } 
ªq
;

378 i‡–
sock
 < 0 ) {

379 
	`Ârötf
 ( 
°dîr
, "socket isn'táctive.");

383 
	`mem£t
 ( &
¢l
, 0,  snl );

384 
¢l
.
∆_Ámûy
 = 
AF_NETLINK
;

386 
ªq
.
∆h
.
∆msg_Àn
 = Ñeq;

387 
ªq
.
∆h
.
∆msg_ty≥
 = 
ty≥
;

388 
ªq
.
∆h
.
∆msg_Êags
 = 
NLM_F_ROOT
 | 
NLM_F_MATCH
 | 
NLM_F_REQUEST
;

389 
ªq
.
∆h
.
∆msg_pid
 = 0;

390 
ªq
.
∆h
.
∆msg_£q
 = 1000;

391 
ªq
.
g
.
πgí_Ámûy
 = 
Ámûy
;

393 
ªt
 = 
	`£ndto
 ( 
sock
, ( * ) &
ªq
, Ñeq, 0,

394 –
sockaddr
* ) &
¢l
,  snl );

395 i‡–
ªt
 < 0 ) {

396 
	`Ârötf
 ( 
°dîr
, " sídtÿÁûed: %s", 
	`°ªº‹
 ( 
î∫o
 ) );

400 
	}
}

404 
	$∆_∑r£_öfo
 (
sock
)

406 
°©us
;

407 
ªt
 = 0;

408 
îr‹
;

411 
buf
[4096];

412 
iovec
 
iov
 = { 
buf
,  buf };

413 
sockaddr_∆
 
¢l
;

414 
msghdr
 
msg
 = { ( * ) &
¢l
,  s∆, &
iov
, 1, 
NULL
, 0, 0};

415 
∆msghdr
 *
h
;

417 
°©us
 = 
	`ªcvmsg
 (
sock
, &
msg
, 0 );

418 
	`¥ötf
("ªcvÜí i†%d\r\n", 
°©us
);

419 i‡–
°©us
 < 0 ) {

420 i‡–
î∫o
 =
EINTR
 )

422 i‡–
î∫o
 =
EWOULDBLOCK
 ||Éºnÿ=
EAGAIN
 )

424 
	`Ârötf
 ( 
°dîr
, "recvmsg overrun");

428 i‡–
¢l
.
∆_pid
 != 0 ) {

429 
	`Ârötf
 ( 
°dîr
, "IgnoringÇon kernel message fromÖid %u",

430 
¢l
.
∆_pid
 );

434 i‡–
°©us
 == 0 ) {

435 
	`Ârötf
 ( 
°dîr
, "EOF" );

439 i‡–
msg
.
msg_«mñí
 ! 
¢l
 ) {

440 
	`Ârötf
 ( 
°dîr
, " sídîáddªs†ÀngthÉº‹:Üígth %d", 
msg
.
msg_«mñí
 );

444  
h
 = ( 
∆msghdr
 * ) 
buf
; 
	`NLMSG_OK
 ( h, 
°©us
 );

445 
h
 = 
	`NLMSG_NEXT
 ( h, 
°©us
 ) ) {

447 i‡–
h
->
∆msg_ty≥
 =
NLMSG_DONE
 )

448  
ªt
;

451 i‡–
h
->
∆msg_ty≥
 =
NLMSG_ERROR
 ) {

452 
∆msgîr
 *
îr
 = ( ∆msgî∏* ) 
	`NLMSG_DATA
 ( 
h
 );

455 i‡–
îr
->
îr‹
 == 0 ) {

457 i‡–! ( 
h
->
∆msg_Êags
 & 
NLM_F_MULTI
 ) ) {

463 i‡–
h
->
∆msg_Àn
 < 
	`NLMSG_LENGTH
 (  ( 
∆msgîr
 ) ) ) {

464 
	`Ârötf
 ( 
°dîr
, "%sÉrror: messageÅruncated");

467 
	`Ârötf
 ( 
°dîr
, "Éº‹: %s,Åy≥=%u, seq=%u,Öid=%d", 
	`°ªº‹
 ( -
îr
->
îr‹
 ),

468 
îr
->
msg
.
∆msg_ty≥
,Éº->msg.
∆msg_£q
,

469 
îr
->
msg
.
∆msg_pid
 );

480 i‡–
∆
 !&
∆_cmd
 && 
h
->
∆msg_pid
 =∆_cmd.
¢l
.
∆_pid
 ) {

484 
îr‹
 = ( *
fûãr
 ) ( &
¢l
, 
h
, 
¨g
 );

485 i‡–
îr‹
 < 0 ) {

486 
	`Ârötf
 ( 
°dîr
, "%†fûã∏fun˘i⁄Éº‹/n", 
∆
->
«me
 );

487 
ªt
 = 
îr‹
;

492 i‡–
msg
.
msg_Êags
 & 
MSG_TRUNC
 ) {

493 
	`Ârötf
 ( 
°dîr
, "%†îr‹: mesßgêåunˇãd", 
∆
->
«me
 );

496 i‡–
°©us
 ) {

497 
	`Ârötf
 ( 
°dîr
, "%†îr‹: d©®ªm«¡ sizê%d", 
∆
->
«me
,

498 
°©us
 );

502 
	}
}

503  
ªt
;

506 (* 
	t∆msg_›îèi⁄
)(
	t∆msghdr
 *
	th
, *
	t¨g
 );

508 
	$√éök_å™ß˘i⁄_gëöfo
(
∆_h™dÀr
 *
h™dÀr
,
∆msg
 *
ªque°
,

509 
∆msg
 *
™swî
, 
∆msg_›î©i⁄
 
›î©i⁄
, *
¨g
)

511 
ªt
;

512 
∆msghdr
 *
h
;

513 
îr‹
;

514 
°©us
;

515 
ªt
 = 
	`√éök_£nd
(
h™dÀr
, 
ªque°
);

516 i‡(
ªt
 < 0)

517  
ªt
;

519 
°©us
 = 
	`√éök_rcv
(
h™dÀr
, 
™swî
,ánswî->
∆msghdr
->
∆msg_Àn
);

520 i‡(
°©us
 < 0) {

521 
	`¥ötf
("reveice messageÉrror\r\n");

522  
ªt
;

524 i‡(
™swî
->
∆msghdr
->
∆msg_ty≥
 =
NLMSG_ERROR
) {

525 
∆msgîr
 *
îr
 = (∆msgîr*)
	`NLMSG_DATA
(
™swî
->
∆msghdr
);

526  
îr
->
îr‹
;

529 
h
 = (
∆msghdr
 * )
™swî
->∆msghdr; 
	`NLMSG_OK
(h, 
°©us
); h = 
	`NLMSG_NEXT
(h, status)) {

531 i‡(
h
->
∆msg_ty≥
 =
NLMSG_DONE
) {

532 
	`¥ötf
("netlink msg done\r\n");

536 i‡(
h
->
∆msg_ty≥
 =
NLMSG_ERROR
) {

537 
∆msgîr
 *
îr
 = (∆msgî∏* )
	`NLMSG_DATA
(
h
);

538 
	`¥ötf
("message isÉrror\r\n");

540 i‡–
îr
->
îr‹
 == 0 ) {

542 i‡(!(
h
->
∆msg_Êags
 & 
NLM_F_MULTI
)) {

548 i‡–
h
->
∆msg_Àn
 < 
	`NLMSG_LENGTH
((
∆msgîr
))) {

549 
	`¥ötf
( "error: messageÅruncated");

552 
	`¥ötf
–"îr‹: %s,Åy≥=%u, seq=%u,Öid=%d", 
	`°ªº‹
(-
îr
->
îr‹
),

553 
îr
 ->
msg
.
∆msg_ty≥
,Éº->msg.
∆msg_£q
,

554 
îr
->
msg
.
∆msg_pid
 );

557 
îr‹
 = 
	`›î©i⁄
(
h
, 
¨g
);

558 i‡(
îr‹
 != 0) {

559 
	`¥ötf
( "filter f unctionÉrror\r\n");

560 
ªt
 = 
îr‹
 ;

565 
	}
}

566 
	$√éök_›í
(
∆_h™dÀr
 *
h™dÀr
, 
¥Ÿocﬁ
)

568 
sockÀn_t
 
sockÀn
;

569 
ªt
;

570 
¢dbuf
 = 32768;

571 
rcvbuf
 = 32768;

573 
	`mem£t
(
h™dÀr
, 0, (*handler));

575 
h™dÀr
->
fd
 = 
	`sockë
(
AF_NETLINK
, 
SOCK_RAW
, 
¥Ÿocﬁ
);

576 i‡(
h™dÀr
->
fd
 < 0)

577  -
î∫o
;

579 i‡(
	`£tsock›t
(
h™dÀr
->
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
,

580 &
¢dbuf
, (sndbuf)) < 0)

581  -
î∫o
;

583 i‡(
	`£tsock›t
(
h™dÀr
->
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
,

584 &
rcvbuf
,(rcvbuf)) < 0)

585  -
î∫o
;

587 
ªt
 = 
	`f˙é
(
h™dÀr
->
fd
, 
F_SETFL
, 
O_NONBLOCK
);

588 i‡(
ªt
 < 0) {

589 
	`¥ötf
("C™'à£àsockë fœgs: %s", 
	`°ªº‹
(
î∫o
));

590 
	`˛o£
 (
h™dÀr
->
fd
);

593 
	`mem£t
(&
h™dÀr
->
loˇl
, 0, (handler->local));

594 
h™dÀr
->
loˇl
.
∆_Ámûy
 = 
AF_NETLINK
;

595 
h™dÀr
->
loˇl
.
∆_groups
 = 0;

597 i‡(
	`böd
(
h™dÀr
->
fd
, (
sockaddr
*)&h™dÀr->
loˇl
,

598 (
h™dÀr
->
loˇl
)) < 0)

599  -
î∫o
;

601 
sockÀn
 = (
h™dÀr
->
loˇl
);

602 i‡(
	`gësock«me
(
h™dÀr
->
fd
, (
sockaddr
*)&h™dÀr->
loˇl
,

603 &
sockÀn
) < 0)

604  -
î∫o
;

606 i‡(
sockÀn
 !(
h™dÀr
->
loˇl
))

607  -
EINVAL
;

609 i‡(
h™dÀr
->
loˇl
.
∆_Ámûy
 !
AF_NETLINK
)

610  -
EINVAL
;

612 
h™dÀr
->
£q
 = 
	`time
(
NULL
);

615 
	}
}

617 
	$√éök_˛o£
(
∆_h™dÀr
 *
h™dÀr
)

619 
	`˛o£
(
h™dÀr
->
fd
);

620 
h™dÀr
->
fd
 = -1;

622 
	}
}

	@get_link/nl.h

7 #i‚de‡
MATRIX_NL_H


8 
	#MATRIX_NL_H


	)

10 
	~<°ddef.h
>

11 
	~<löux/√éök.h
>

12 
	~<löux/π√éök.h
>

16 #i‚de‡
PAGE_SIZE


17 
	#PAGE_SIZE
 4096

	)

19 
	#NLMSG_GOOD_SIZE
 (2*
PAGE_SIZE
)

	)

20 
	#NLMSG_TAIL
(
nmsg
) \

21 ((
π©å
 *Ë(((*Ë(
nmsg
)Ë+ 
	`NLMSG_ALIGN
(“msg)->
∆msg_Àn
)))

	)

22 
	#NLA_DATA
(
«
Ë((*)((*)“aË+ 
NLA_HDRLEN
))

	)

23 
	#NLA_NEXT_ATTR
(
©å
Ë((*)((*ÔârË+ 
	`NLA_ALIGN
◊âr->
∆a_Àn
))

	)

35 
	s∆_h™dÀr
 {

36 
	mfd
;

37 
	m£q
;

38 
sockaddr_∆
 
	mloˇl
;

39 
sockaddr_∆
 
	m≥î
;

50 
	s∆msg
 {

51 
∆msghdr
 *
	m∆msghdr
;

52 
ssize_t
 
	mˇp
;

66 
√éök_›í
(
∆_h™dÀr
 *
h™dÀr
, 
¥Ÿocﬁ
);

76 
√éök_˛o£
(
∆_h™dÀr
 *
h™dÀr
);

89 
√éök_rcv
(
∆_h™dÀr
 *
h™dÀr
, 
∆msg
 *∆msg, 
Àn
);

100 
√éök_£nd
(
∆_h™dÀr
 *
h™dÀr
, 
∆msg
 *nlmsg);

113 
√éök_å™ß˘i⁄
(
∆_h™dÀr
 *
h™dÀr
,

114 
∆msg
 *
ªque°
, ∆msg *
™w£r
);

126 
∆a_put_°rög
(
∆msg
 *∆msg, 
©å
, c⁄° *
°rög
);

139 
∆a_put_buf„r
(
∆msg
 *∆msg, 
©å
,

140 c⁄° *
d©a
, 
size_t
 
size
);

151 
∆a_put_u32
(
∆msg
 *∆msg, 
©å
, 
vÆue
);

162 
∆a_put_u16
(
∆msg
 *∆msg, 
©å
, 
vÆue
);

172 
∆a_put_©å
(
∆msg
 *∆msg, 
©å
);

183 
π©å
 *
∆a_begö_√°ed
(
∆msg
 *∆msg, 
©å
);

193 
∆a_íd_√°ed
(
∆msg
 *∆msg, 
π©å
 *
©å
);

210 
∆msg
 *
∆msg_Æloc
(
size_t
 
size
);

219 
∆msg
 *
∆msg_Æloc_ª£rve
(
size_t
 
size
);

229 *
∆msg_ª£rve
(
∆msg
 *∆msg, 
size_t
 
Àn
);

236 
∆msg_‰ì
(
∆msg
 *nlmsg);

245 *
∆msg_d©a
(
∆msg
 *nlmsg);

247 
√éök_å™ß˘i⁄_gëöfo
(
∆_h™dÀr
 *
h™dÀr
,
∆msg
 *
ªque°
, ∆msg *
™swî
);

	@getaddr/getaddr.c

8 
	~<löux/ty≥s.h
>

9 
	~<asm/ty≥s.h
>

10 
	~<öây≥s.h
>

11 
	~<sys/fûe.h
>

12 
	~<sys/u£r.h
>

13 
	~<sys/sockë.h
>

14 
	~<löux/√éök.h
>

15 
	~<löux/π√éök.h
>

16 
	~<löux/if.h
>

17 
	~<uni°d.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

20 
	~<°dio.h
>

21 
	~<°dboﬁ.h
>

22 
	~<î∫o.h
>

23 
	~<sys/sockë.h
>

24 
	~<asm/ty≥s.h
>

25 
	~<löux/√éök.h
>

27 
	~<√t/if.h
>

28 
uöt32_t
 
	tu32
;

29 
uöt16_t
 
	tu16
;

31 
	s∆sock
 {

32 
	msock
;

33 
	m£q
;

34 
sockaddr_∆
 
	m¢l
;

35 *
	m«me
;

36 } 
	g∆_cmd
 = { -1, 0, {0}, "netlink-cmd" };

38 
	gödex_oif
 = 0;

39 
	s∆_if_öfo
 {

40 
u32
 
	maddr
;

41 *
	m«me
;

46 
	$∆_sockë
(
∆sock
 *
∆
, 
groups
)

48 
ªt
 = 0;

49 
sockaddr_∆
 
¢l
;

50 
sock
;

51 
«mñí
;

54 
sock
 = 
	`sockë
(
AF_NETLINK
, 
SOCK_RAW
, 
NETLINK_ROUTE
);

55 i‡(
sock
 < 0)

57 
	`Ârötf
(
°dîr
, "C™'à›í %†sockë: %s", 
∆
->
«me
,
	`°ªº‹
(
î∫o
));

61 
ªt
 = 
	`f˙é
(
sock
, 
F_SETFL
, 
O_NONBLOCK
 );

62 i‡(
ªt
 < 0)

64 
	`Ârötf
–
°dîr
, "C™'à£à%†sockë fœgs: %s", 
∆
->
«me
, 
	`°ªº‹
(
î∫o
));

65 
	`˛o£
 (
sock
);

69 
	`mem£t
 (&
¢l
, 0, (snl));

70 
¢l
.
∆_Ámûy
 = 
AF_NETLINK
;

71 
¢l
.
∆_groups
 = 
groups
;

74 
ªt
 = 
	`böd
(
sock
, (
sockaddr
 *)&
¢l
, (snl));

75 i‡–
ªt
 < 0 )

77 
	`Ârötf
 (
°dîr
, "C™'àböd %†sockëÅÿgrou∞0x%x: %s", 
∆
->
«me
, 
¢l
.
∆_groups
, 
	`°ªº‹
 ( 
î∫o
 ) );

78 
	`˛o£
 ( 
sock
 );

83 
«mñí
 = (
¢l
);

84 
ªt
 = 
	`gësock«me
(
sock
, (
sockaddr
 * )&
¢l
, &
«mñí
);

85 i‡(
ªt
 < 0 || 
«mñí
 !(
¢l
))

87 
	`Ârötf
(
°dîr
, "C™'àgë %†sockëÇame: %s", 
∆
->
«me
, 
	`°ªº‹
(
î∫o
));

88 
	`˛o£
(
sock
);

92 
∆
->
¢l
 = snl;

93 
∆
->
sock
 = sock;

94  
ªt
;

95 
	}
}

97 
	$∆_ªque°
(
Ámûy
, 
ty≥
, 
∆sock
 *
∆
)

99 
ªt
;

100 
sockaddr_∆
 
¢l
;

103 
∆msghdr
 
∆h
;

104 
πgímsg
 
g
;

105 } 
ªq
;

109 i‡(
∆
->
sock
 < 0 )

111 
	`Ârötf
 ( 
°dîr
, "%†sockë i¢'àa˘ive.", 
∆
->
«me
 );

115 
	`mem£t
 ( &
¢l
, 0, (snl));

116 
¢l
.
∆_Ámûy
 = 
AF_NETLINK
;

118 
ªq
.
∆h
.
∆msg_Àn
 = (req);

119 
ªq
.
∆h
.
∆msg_ty≥
 = 
ty≥
;

120 
ªq
.
∆h
.
∆msg_Êags
 = 
NLM_F_ROOT
 | 
NLM_F_MATCH
 | 
NLM_F_REQUEST
;

121 
ªq
.
∆h
.
∆msg_pid
 = 0;

122 
ªq
.
∆h
.
∆msg_£q
 = ++
∆
->
£q
;

123 
ªq
.
g
.
πgí_Ámûy
 = 
Ámûy
;

125 
ªt
 = 
	`£ndto
(
∆
->
sock
, (*)&
ªq
, Ñeq, 0, (
sockaddr
*)&
¢l
, (snl));

126 i‡(
ªt
 < 0)

128 
	`Ârötf
(
°dîr
, "%†£ndtÿÁûed: %s", 
∆
->
«me
, 
	`°ªº‹
 ( 
î∫o
 ) );

132 
	}
}

136 
∆_∑r£_öfo
 ( –*
fûãr
 ) ( 
sockaddr_∆
 *, 
∆msghdr
 *, * ),

137 
∆sock
 *
∆
, *
¨g
 )

139 
°©us
;

140 
ªt
 = 0;

141 
îr‹
;

145 
buf
[4096];

146 
iovec
 
iov
 = { 
buf
,  buf };

147 
sockaddr_∆
 
¢l
;

148 
msghdr
 
msg
 = {(*)&
¢l
, (¢l), &
iov
, 1, 
NULL
, 0, 0};

149 
∆msghdr
 *
h
;

151 
°©us
 = 
	`ªcvmsg
(
∆
->
sock
, &
msg
, 0 );

153 i‡(
°©us
 < 0)

155 
	`¥ötf
("get messageÉrror\r\n");

156 i‡(
î∫o
 =
EINTR
 )

158 i‡–
î∫o
 =
EWOULDBLOCK
 ||Éºnÿ=
EAGAIN
 )

160 
	`¥ötf
("no message\r\n");

163 
	`Ârötf
 ( 
°dîr
, "%†ªcvmsg ovîrun", 
∆
->
«me
 );

167 i‡(
¢l
.
∆_pid
 != 0)

169 
	`Ârötf
 ( 
°dîr
, "Ign‹ögÇ⁄ kî√»mesßgê‰omÖid %u",
¢l
.
∆_pid
 );

173 i‡(
°©us
 == 0)

175 
	`Ârötf
 ( 
°dîr
, "%†EOF", 
∆
->
«me
 );

179 i‡–
msg
.
msg_«mñí
 !(
¢l
))

181 
	`Ârötf
 ( 
°dîr
, "%†£ndîáddªs†ÀngthÉº‹:Üígth %d",
∆
->
«me
, 
msg
.
msg_«mñí
 );

185 
h
 = (
∆msghdr
 * )
buf
; 
	`NLMSG_OK
(h, 
°©us
); h = 
	`NLMSG_NEXT
(h, status))

188 i‡(
h
->
∆msg_ty≥
 =
NLMSG_DONE
)

189  
ªt
;

192 i‡–
h
->
∆msg_ty≥
 =
NLMSG_ERROR
 )

194 
∆msgîr
 *
îr
 = (∆msgî∏* )
	`NLMSG_DATA
(
h
);

197 i‡–
îr
->
îr‹
 == 0 )

200 i‡(!(
h
->
∆msg_Êags
 & 
NLM_F_MULTI
))

207 i‡–
h
->
∆msg_Àn
 < 
	`NLMSG_LENGTH
((
∆msgîr
)))

209 
	`Ârötf
(
°dîr
, "%†îr‹: mesßgêåunˇãd", 
∆
->
«me
 );

212 
	`Ârötf
(
°dîr
, "%sÉrror: %s,Åype=%u, seq=%u,Öid=%d",

213 
∆
->
«me
, 
	`°ªº‹
 ( -
îr
->
îr‹
 ),

214 
îr
->
msg
.
∆msg_ty≥
,Éº->msg.
∆msg_£q
,

215 
îr
-> 
msg
.
∆msg_pid
 );

223 i‡–
∆
 !&
∆_cmd
 && 
h
->
∆msg_pid
 =∆_cmd.
¢l
.
∆_pid
 ) {

227 
îr‹
 = (*
fûãr
)(&
¢l
, 
h
, 
¨g
);

228 i‡(
îr‹
 < 0)

230 
	`Ârötf
(
°dîr
, "%†fûã∏‡un˘i⁄Éº‹/n", 
∆
->
«me
 );

231 
ªt
 = 
îr‹
;

236 i‡–
msg
.
msg_Êags
 & 
MSG_TRUNC
 )

238 
	`Ârötf
 ( 
°dîr
, "%†îr‹: mesßgêåunˇãd", 
∆
->
«me
 );

241 i‡(
°©us
)

243 
	`Ârötf
(
°dîr
, "%†îr‹: d©®ªm«¡ sizê%d", 
∆
->
«me
,
°©us
 );

247  
ªt
;

248 
	}
}

250 
	$∆_∑r£_π©å
 ( 
π©å
 **
tb
, 
max
, π©å *
πa
, 
Àn
 )

252 
	`RTA_OK
(
πa
, 
Àn
 ))

254 i‡(
πa
->
πa_ty≥
 <
max
 )

255 
tb
[
πa
->
πa_ty≥
] =Ñta;

256 
πa
 = 
	`RTA_NEXT
‘è, 
Àn
);

258 
	}
}

260 
	$∆_gë_oif
 ( 
sockaddr_∆
 *
¢l
, 
∆msghdr
 *
h
, *
¨g
 )

262 
Àn
;

263 
πmsg
 *
πm
;

264 
π©å
 *
tb
 [
RTA_MAX
 + 1];

265 
u_ch¨
 
Êags
 = 0;

267 
™yaddr
[16] = {0};

269 
ödex
;

270 
èbÀ
;

271 *
de°
;

272 *
g©e
;

274 
πm
 =(
πmsg
 *)
	`NLMSG_DATA
(
h
);

276 i‡–
h
->
∆msg_ty≥
 !
RTM_NEWROUTE
 )

278 i‡–
πm
->
πm_ty≥
 !
RTN_UNICAST
 )

281 
èbÀ
 = 
πm
->
πm_èbÀ
;

283 
Àn
 = 
h
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
 (  ( 
πmsg
 ) );

284 i‡–
Àn
 < 0 )

287 
	`mem£t
 (
tb
, 0, Åb );

288 
	`∆_∑r£_π©å
(
tb
, 
RTA_MAX
, 
	`RTM_RTA
(
πm
), 
Àn
);

290 i‡–
πm
->
πm_Êags
 & 
RTM_F_CLONED
 )

292 i‡–
πm
->
πm_¥Ÿocﬁ
 =
RTPROT_REDIRECT
 )

294 i‡–
πm
->
πm_¥Ÿocﬁ
 =
RTPROT_KERNEL
 )

297 i‡–
πm
->
πm_§c_Àn
 != 0 )

304 i‡–
tb
[
RTA_OIF
] ) {

305 
ödex
 = *–*)
	`RTA_DATA
(
tb
[
RTA_OIF
]);

308 i‡(
tb
[
RTA_DST
] )

309 
de°
 = 
	`RTA_DATA
(
tb
[
RTA_DST
]);

311 
de°
 = 
™yaddr
;

314 i‡–
tb
[
RTA_GATEWAY
] )

315 
g©e
 = 
	`RTA_DATA
 ( 
tb
[
RTA_GATEWAY
] );

321 i‡–
de°
 =
™yaddr
 && 
g©e
 ) {

322 i‡–
¨g
 !
NULL
 ) {

323 * ( * ) 
¨g
 = 
ödex
;

327 
	`¥ötf
("rouãr: %d %†%s\r\n", 
ödex
, 
de°
, 
g©e
);

329 
	}
}

332 c⁄° *
	$π_addr_n2a
(
af
, 
Àn
, c⁄° *
addr
, *
buf
, 
buÊí
)

334 
af
) {

335 
AF_INET
:

336 
AF_INET6
:

337  
	`öë_¡›
(
af
, 
addr
, 
buf
, 
buÊí
);

341 
	}
}

342 
	$∆_gë_if_addr
(
sockaddr_∆
 *
¢l
, 
∆msghdr
 *
h
, *
¨g
 )

344 
Àn
;

345 
iÁddrmsg
 *
iÁ
;

346 
π©å
 *
tb
[
IFA_MAX
 + 1];

347 *
addr
 = 
NULL
;

348 *
brﬂd
 = 
NULL
;

349 
u_ch¨
 
Êags
 = 0;

350 *
œbñ
 = 
NULL
;

351 
u32
 
iÁ_addr
, 
iÁ_loˇl
;

352 
iÁ_œbñ
[
IFNAMSIZ
 + 1];

355 
öãr_addr
[128] = {0};

356 
loˇl_addr
[128] = {0};

359 
iÁ
 = (
iÁddrmsg
 *)
	`NLMSG_DATA
(
h
);

360 i‡(
iÁ
->
iÁ_Ámûy
 !
AF_INET
 )

365 i‡(
h
->
∆msg_ty≥
 !
RTM_NEWADDR
 && h->∆msg_ty≥ !
RTM_DELADDR
 )

369 
Àn
 = 
h
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
((
iÁddrmsg
));

370 i‡–
Àn
 < 0 )

373 
	`mem£t
(
tb
, 0, (tb));

375 
	`∆_∑r£_π©å
(
tb
, 
IFA_MAX
, 
	`IFA_RTA
(
iÁ
), 
Àn
 );

377 if(
tb
[
IFA_ADDRESS
] =
NULL
)

379 
tb
[
IFA_ADDRESS
] =Åb[
IFA_LOCAL
];

380 
	`¥ötf
("ifa_addres isÇull\r\n");

383 if(
tb
[
IFA_ADDRESS
])

384 
iÁ_addr
 = *(
u32
 *)
	`RTA_DATA
(
tb
[
IFA_ADDRESS
]);

387 if(
tb
[
IFA_LOCAL
])

388 
iÁ_loˇl
 = *(
u32
 *)
	`RTA_DATA
(
tb
[
IFA_LOCAL
]);

391 if(
tb
[
IFA_LABEL
])

392 
	`°∫˝y
(
iÁ_œbñ
, 
	`RTA_DATA
(
tb
[
IFA_LABEL
]), 
IFNAMSIZ
);

393 
	`π_addr_n2a
(
iÁ
->
iÁ_Ámûy
,

394 
	`RTA_PAYLOAD
(
tb
[
IFA_ADDRESS
]),

395 
	`RTA_DATA
(
tb
[
IFA_ADDRESS
]),

396 
öãr_addr
, (inter_addr));

398 
	`π_addr_n2a
(
iÁ
->
iÁ_Ámûy
,

399 
	`RTA_PAYLOAD
(
tb
[
IFA_LOCAL
]),

400 
	`RTA_DATA
(
tb
[
IFA_LOCAL
]),

401 
loˇl_addr
, (local_addr));

403 
	`¥ötf
("addr=%08xÜﬂl=%08xÇame=%†\r\n", 
iÁ_addr
, 
iÁ_loˇl
, 
iÁ_œbñ
);

404 
	`¥ötf
("addr=%s/%dÜﬂl=%†«me=%†\r\n", 
öãr_addr
, ()
iÁ
->
iÁ_¥efixÀn
, 
loˇl_addr
, 
iÁ_œbñ
);

405 
	`¥ötf
("end\r\n");

407 
	}
}

409 
	$∆_gë_lök
(
sockaddr_∆
 *
¢l
, 
∆msghdr
 *
h
, *
¨g
 )

411 
Àn
;

412 
iföfomsg
 *
iÁ
;

413 
π©å
 *
tb
[
IFA_MAX
 + 1];

414 *
addr
 = 
NULL
;

415 *
brﬂd
 = 
NULL
;

416 
u_ch¨
 
Êags
 = 0;

417 *
œbñ
 = 
NULL
;

418 
u32
 
iÁ_addr
, 
iÁ_loˇl
;

419 
iÁ_œbñ
[
IFNAMSIZ
 + 1];

421 
öãr_addr
[128] = {0};

422 
loˇl_addr
[128] = {0};

424 
iÁ
 = (
iÁddrmsg
 *)
	`NLMSG_DATA
(
h
);

425 i‡(
iÁ
->
ifi_Ámûy
 !
AF_INET
 ) {

426 
	`¥ötf
("faimilyÉrror\r\n");

429 
	`if_ödext⁄ame
(
iÁ
->
ifi_ödex
, 
iÁ_œbÀ
);

430 
	`¥ötf
("«mêi†%s\r\n", 
iÁ_œbÀ
);

432 i‡(
h
->
∆msg_ty≥
 !
RTM_NEWADDR
 && h->∆msg_ty≥ !
RTM_DELADDR
 )

435 
Àn
 = 
h
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
((
iföfomsg
));

436 i‡–
Àn
 < 0 )

439 
	`mem£t
(
tb
, 0, (tb));

441 
	`∆_∑r£_π©å
(
tb
, 
IFA_MAX
, 
	`IFA_RTA
(
iÁ
), 
Àn
 );

443 if(
tb
[
IFA_ADDRESS
] =
NULL
)

445 
tb
[
IFA_ADDRESS
] =Åb[
IFA_LOCAL
];

446 
	`¥ötf
("ifa_addres isÇull\r\n");

449 if(
tb
[
IFA_ADDRESS
])

450 
iÁ_addr
 = *(
u32
 *)
	`RTA_DATA
(
tb
[
IFA_ADDRESS
]);

453 if(
tb
[
IFA_LOCAL
])

454 
iÁ_loˇl
 = *(
u32
 *)
	`RTA_DATA
(
tb
[
IFA_LOCAL
]);

457 if(
tb
[
IFA_LABEL
])

458 
	`°∫˝y
(
iÁ_œbñ
, 
	`RTA_DATA
(
tb
[
IFA_LABEL
]), 
IFNAMSIZ
);

459 
	`π_addr_n2a
(
iÁ
->
iÁ_Ámûy
,

460 
	`RTA_PAYLOAD
(
tb
[
IFA_ADDRESS
]),

461 
	`RTA_DATA
(
tb
[
IFA_ADDRESS
]),

462 
öãr_addr
, (inter_addr));

464 
	`π_addr_n2a
(
iÁ
->
iÁ_Ámûy
,

465 
	`RTA_PAYLOAD
(
tb
[
IFA_LOCAL
]),

466 
	`RTA_DATA
(
tb
[
IFA_LOCAL
]),

467 
loˇl_addr
, (local_addr));

469 
	`¥ötf
("addr=%08xÜﬂl=%08xÇame=%†\r\n", 
iÁ_addr
, 
iÁ_loˇl
, 
iÁ_œbñ
);

470 
	`¥ötf
("addr=%s/%dÜﬂl=%†«me=%†\r\n", 
öãr_addr
, ()
iÁ
->
iÁ_¥efixÀn
, 
loˇl_addr
, 
iÁ_œbñ
);

471 
	`¥ötf
("end\r\n");

474 
	}
}

476 
	$maö
()

478 
ªt
;

479 
if_«me
[
PAGE_SIZE
];

480 *
p
;

481 
∆_if_öfo
 
if_öfo
 = { -1, "eth0" };

483 
ªt
 = 
	`∆_sockë
(&
∆_cmd
, 0);

484 i‡(
ªt
 < 0)

486 
	`¥ötf
("crate sockerÉrror\r\n");

487  
ªt
;

491 
ªt
 = 
	`∆_ªque°
(
AF_INET
, 
RTM_GETROUTE
, &
∆_cmd
);

492 i‡–
ªt
 < 0 ) {

493  
ªt
;

495 
ªt
 = 
	`∆_∑r£_öfo
(
∆_gë_oif
, &
∆_cmd
, &
ödex_oif
);

496 i‡–
ªt
 < 0 )

497  
ªt
;

499 
	`¥ötf
 ( "oif=%08x /n", 
ödex_oif
 );

500 i‡–
ödex_oif
 > 0 ) {

501 
p
 = 
	`if_ödext⁄ame
 ( 
ödex_oif
, 
if_«me
 );

502 i‡–
p
 ) {

503 
	`¥ötf
 ( "öãrÁ˚=%s/n", 
p
 );

508 
ªt
 = 
	`∆_ªque°
(
AF_INET
, 
RTM_GETADDR
, &
∆_cmd
);

509 i‡–
ªt
 < 0 )

510  
ªt
;

512 
ªt
 = 
	`∆_∑r£_öfo
(
∆_gë_if_addr
, &
∆_cmd
, &
if_öfo
 );

513 i‡(
ªt
 < 0)

514  
ªt
;

516 
ªt
 = 
	`∆_ªque°
(
AF_INET
, 
RTM_GETLINK
, &
∆_cmd
);

517 i‡–
ªt
 < 0 )

518  
ªt
;

520 
ªt
 = 
	`∆_∑r£_öfo
(
∆_gë_lök
, &
∆_cmd
, &
if_öfo
 );

521 i‡(
ªt
 < 0)

522  
ªt
;

526 
	}
}

	@interface/net-tools/arp.c

55 
	~<sys/ty≥s.h
>

56 
	~<sys/sockë.h
>

57 
	~<sys/io˘l.h
>

58 
	~<√t/if.h
>

61 
	~<√t/if_¨p.h
>

62 
	~<°dlib.h
>

63 
	~<°dio.h
>

64 
	~<î∫o.h
>

65 
	~<˘y≥.h
>

66 
	~<f˙é.h
>

67 
	~<°rög.h
>

68 
	~<gë›t.h
>

69 
	~<uni°d.h
>

70 
	~"√t-suµ‹t.h
"

71 
	~"∑th«mes.h
"

72 
	~"vîsi⁄.h
"

73 
	~"c⁄fig.h
"

74 
	~"öé.h
"

75 
	~"utû.h
"

77 
	#DFLT_AF
 "öë"

	)

78 
	#DFLT_HW
 "ëhî"

	)

80 
	#FEATURE_ARP


	)

81 
	~"lib/√t-„©uªs.h
"

83 *
	gRñó£
 = 
RELEASE
, *
	gVîsi⁄
 = "arp 1.88 (2001-04-04)";

85 
	g›t_n
 = 0;

86 
	g›t_N
 = 0;

87 
	g›t_v
 = 0;

88 
	g›t_D
 = 0;

89 
	g›t_e
 = 0;

90 
	g›t_a
 = 0;

91 
a·y≥
 *
	g≠
;

92 
hwty≥
 *
	ghw
;

93 
	gsockfd
 = 0;

94 
	ghw_£t
 = 0;

95 
	gdevi˚
[16] = "";

96 
ußge
();

99 
	$¨p_dñ
(**
¨gs
)

101 
ho°
[128];

102 
¨¥eq
 
ªq
;

103 
sockaddr_°‹age
 
ss
;

104 
sockaddr
 *
ß
;

105 
Êags
 = 0;

106 
dñëed
 = 0;

108 
	`mem£t
((*Ë&
ªq
, 0, (req));

111 i‡(*
¨gs
 =
NULL
) {

112 
	`Ârötf
(
°dîr
, 
	`_
("arp:Çeed hostÇame\n"));

115 
	`ß„_°∫˝y
(
ho°
, *
¨gs
, ( host));

116 
ß
 = (
sockaddr
 *)&
ss
;

117 i‡(
≠
->
	`öput
(0, 
ho°
, 
ß
) < 0) {

118 
≠
->
	`hîr‹
(
ho°
);

122 
	`mem˝y
((*Ë&
ªq
.
¨p_∑
, (*Ë
ß
, (
sockaddr
));

124 i‡(
hw_£t
)

125 
ªq
.
¨p_ha
.
ß_Ámûy
 = 
hw
->
ty≥
;

127 
ªq
.
¨p_Êags
 = 
ATF_PERM
;

128 
¨gs
++;

129 *
¨gs
 !
NULL
) {

130 i‡(
›t_v
)

131 
	`Ârötf
(
°dîr
, "¨gs=%s\n", *
¨gs
);

132 i‡(!
	`°rcmp
(*
¨gs
, "pub")) {

133 
Êags
 |= 1;

134 
¨gs
++;

137 i‡(!
	`°rcmp
(*
¨gs
, "priv")) {

138 
Êags
 |= 2;

139 
¨gs
++;

142 i‡(!
	`°rcmp
(*
¨gs
, "temp")) {

143 
ªq
.
¨p_Êags
 &~
ATF_PERM
;

144 
¨gs
++;

147 i‡(!
	`°rcmp
(*
¨gs
, "trail")) {

148 
ªq
.
¨p_Êags
 |
ATF_USETRAILERS
;

149 
¨gs
++;

152 i‡(!
	`°rcmp
(*
¨gs
, "dontpub")) {

153 #ifde‡
ATF_DONTPUB


154 
ªq
.
¨p_Êags
 |
ATF_DONTPUB
;

156 
	`ENOSUPP
("arp", "ATF_DONTPUB");

158 
¨gs
++;

161 i‡(!
	`°rcmp
(*
¨gs
, "auto")) {

162 #ifde‡
ATF_MAGIC


163 
ªq
.
¨p_Êags
 |
ATF_MAGIC
;

165 
	`ENOSUPP
("arp", "ATF_MAGIC");

167 
¨gs
++;

170 i‡(!
	`°rcmp
(*
¨gs
, "dev")) {

171 i‡(*++
¨gs
 =
NULL
)

172 
	`ußge
();

173 
	`ß„_°∫˝y
(
devi˚
, *
¨gs
, (device));

174 
¨gs
++;

177 i‡(!
	`°rcmp
(*
¨gs
, "netmask")) {

178 i‡(*++
¨gs
 =
NULL
)

179 
	`ußge
();

180 i‡(
	`°rcmp
(*
¨gs
, "255.255.255.255") != 0) {

181 
	`°r˝y
(
ho°
, *
¨gs
);

182 i‡(
≠
->
	`öput
(0, 
ho°
, 
ß
) < 0) {

183 
≠
->
	`hîr‹
(
ho°
);

186 
	`mem˝y
((*Ë&
ªq
.
¨p_√tmask
, (*Ë
ß
,

187 (
sockaddr
));

188 
ªq
.
¨p_Êags
 |
ATF_NETMASK
;

190 
¨gs
++;

193 
	`ußge
();

197 i‡(
Êags
 == 0)

198 
Êags
 = 3;

200 
	`°r˝y
(
ªq
.
¨p_dev
, 
devi˚
);

205 
dñëed
 = 0;

208 i‡(
Êags
 & 2) {

209 i‡(
›t_v
)

210 
	`Ârötf
(
°dîr
, "arp: SIOCDARP(dontpub)\n");

211 i‡(
	`io˘l
(
sockfd
, 
SIOCDARP
, &
ªq
) < 0) {

212 i‡((
î∫o
 =
ENXIO
Ë|| (î∫ÿ=
ENOENT
)) {

213 i‡(
Êags
 & 1)

214 
d⁄çub
;

215 
	`¥ötf
(
	`_
("NÿARPÉ¡ry f‹ %s\n"), 
ho°
);

218 
	`≥º‹
("SIOCDARP(dontpub)");

221 
dñëed
 = 1;

223 i‡(!
dñëed
 && (
Êags
 & 1)) {

224 
d⁄çub
:

225 
ªq
.
¨p_Êags
 |
ATF_PUBL
;

226 i‡(
›t_v
)

227 
	`Ârötf
(
°dîr
, "arp: SIOCDARP(pub)\n");

228 i‡(
	`io˘l
(
sockfd
, 
SIOCDARP
, &
ªq
) < 0) {

229 i‡((
î∫o
 =
ENXIO
Ë|| (î∫ÿ=
ENOENT
)) {

230 
	`¥ötf
(
	`_
("NÿARPÉ¡ry f‹ %s\n"), 
ho°
);

233 
	`≥º‹
("SIOCDARP(pub)");

238 
	}
}

241 
	$¨p_gëdevhw
(*
i‚ame
, 
sockaddr
 *
ß
, 
hwty≥
 *
hw
)

243 
i‰eq
 
i‰
;

244 
hwty≥
 *
xhw
;

246 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

247 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFHWADDR
, &
i‰
) < 0) {

248 
	`Ârötf
(
°dîr
, 
	`_
("¨p: c™àgë HW-Addªs†f‹ `%s': %s.\n"), 
i‚ame
, 
	`°ªº‹
(
î∫o
));

251 i‡(
hw
 && (
i‰
.
i‰_hwaddr
.
ß_Ámûy
 !hw->
ty≥
)) {

252 
	`Ârötf
(
°dîr
, 
	`_
("arp:ÖrotocolÅype mismatch.\n"));

255 
	`mem˝y
((*Ë
ß
, (*Ë&(
i‰
.
i‰_hwaddr
), (
sockaddr
));

257 i‡(
›t_v
) {

258 i‡(!(
xhw
 = 
	`gë_hw¡y≥
(
i‰
.
i‰_hwaddr
.
ß_Ámûy
)Ë|| (xhw->
¥öt
 == 0)) {

259 
xhw
 = 
	`gë_hw¡y≥
(-1);

261 
	`Ârötf
(
°dîr
, 
	`_
("¨p: devi˚ `%s' ha†HWáddªs†%†`%s'.\n"), 
i‚ame
, 
xhw
->
«me
, xhw->
	`¥öt
((*)&
i‰
.
i‰_hwaddr
.
ß_d©a
));

264 
	}
}

267 
	$¨p_£t
(**
¨gs
)

269 
ho°
[128];

270 
¨¥eq
 
ªq
;

271 
sockaddr_°‹age
 
ss
;

272 
sockaddr
 *
ß
;

273 
Êags
;

275 
	`mem£t
((*Ë&
ªq
, 0, (req));

278 i‡(*
¨gs
 =
NULL
) {

279 
	`Ârötf
(
°dîr
, 
	`_
("arp:Çeed hostÇame\n"));

282 
	`ß„_°∫˝y
(
ho°
, *
¨gs
++, ( host));

283 
ß
 = (
sockaddr
 *)&
ss
;

284 i‡(
≠
->
	`öput
(0, 
ho°
, 
ß
) < 0) {

285 
≠
->
	`hîr‹
(
ho°
);

289 
	`mem˝y
((*Ë&
ªq
.
¨p_∑
, (*Ë
ß
, (
sockaddr
));

292 i‡(*
¨gs
 =
NULL
) {

293 
	`Ârötf
(
°dîr
, 
	`_
("arp:Çeed hardwareáddress\n"));

296 i‡(
›t_D
) {

297 i‡(
	`¨p_gëdevhw
(*
¨gs
++, &
ªq
.
¨p_ha
, 
hw_£t
 ? 
hw
 : 
NULL
) < 0)

300 i‡(
hw
->
	`öput
(*
¨gs
++, &
ªq
.
¨p_ha
) < 0) {

301 
	`Ârötf
(
°dîr
, 
	`_
("arp: invalid hardwareáddress\n"));

307 
Êags
 = 
ATF_PERM
 | 
ATF_COM
;

308 *
¨gs
 !
NULL
) {

309 i‡(!
	`°rcmp
(*
¨gs
, "temp")) {

310 
Êags
 &~
ATF_PERM
;

311 
¨gs
++;

314 i‡(!
	`°rcmp
(*
¨gs
, "pub")) {

315 
Êags
 |
ATF_PUBL
;

316 
¨gs
++;

319 i‡(!
	`°rcmp
(*
¨gs
, "priv")) {

320 
Êags
 &~
ATF_PUBL
;

321 
¨gs
++;

324 i‡(!
	`°rcmp
(*
¨gs
, "trail")) {

325 
Êags
 |
ATF_USETRAILERS
;

326 
¨gs
++;

329 i‡(!
	`°rcmp
(*
¨gs
, "dontpub")) {

330 #ifde‡
ATF_DONTPUB


331 
Êags
 |
ATF_DONTPUB
;

333 
	`ENOSUPP
("arp", "ATF_DONTPUB");

335 
¨gs
++;

338 i‡(!
	`°rcmp
(*
¨gs
, "auto")) {

339 #ifde‡
ATF_MAGIC


340 
Êags
 |
ATF_MAGIC
;

342 
	`ENOSUPP
("arp", "ATF_MAGIC");

344 
¨gs
++;

347 i‡(!
	`°rcmp
(*
¨gs
, "dev")) {

348 i‡(*++
¨gs
 =
NULL
)

349 
	`ußge
();

350 
	`ß„_°∫˝y
(
devi˚
, *
¨gs
, (device));

351 
¨gs
++;

354 i‡(!
	`°rcmp
(*
¨gs
, "netmask")) {

355 i‡(*++
¨gs
 =
NULL
)

356 
	`ußge
();

357 i‡(
	`°rcmp
(*
¨gs
, "255.255.255.255") != 0) {

358 
	`°r˝y
(
ho°
, *
¨gs
);

359 i‡(
≠
->
	`öput
(0, 
ho°
, 
ß
) < 0) {

360 
≠
->
	`hîr‹
(
ho°
);

363 
	`mem˝y
((*Ë&
ªq
.
¨p_√tmask
, (*Ë
ß
,

364 (
sockaddr
));

365 
Êags
 |
ATF_NETMASK
;

367 
¨gs
++;

370 
	`ußge
();

374 
ªq
.
¨p_Êags
 = 
Êags
;

376 
	`°r˝y
(
ªq
.
¨p_dev
, 
devi˚
);

379 i‡(
›t_v
)

380 
	`Ârötf
(
°dîr
, "arp: SIOCSARP()\n");

381 i‡(
	`io˘l
(
sockfd
, 
SIOCSARP
, &
ªq
) < 0) {

382 
	`≥º‹
("SIOCSARP");

386 
	}
}

390 
	$¨p_fûe
(*
«me
)

392 
buff
[1024];

393 *
•
, *
¨gs
[32];

394 
löír
, 
¨gc
;

395 
FILE
 *
Â
;

397 i‡((
Â
 = 
	`f›í
(
«me
, "r")Ë=
NULL
) {

398 
	`Ârötf
(
°dîr
, 
	`_
("¨p: c™nŸ o≥¿ëhîfûê%†!\n"), 
«me
);

402 
löír
 = 0;

403 
	`fgës
(
buff
, (buff), 
Â
Ë!(*Ë
NULL
) {

404 
löír
++;

405 i‡(
›t_v
 == 1)

406 
	`Ârötf
(
°dîr
, ">> %s", 
buff
);

407 i‡((
•
 = 
	`°rchr
(
buff
, '\n')Ë!(*Ë
NULL
)

408 *
•
 = '\0';

409 i‡(
buff
[0] == '#' || buff[0] == '\0')

412 
¨gc
 = 
	`gë¨gs
(
buff
, 
¨gs
);

413 i‡(
¨gc
 < 2) {

414 
	`Ârötf
(
°dîr
, 
	`_
("arp: formatÉrror onÜine %u ofÉtherfile %s !\n"),

415 
löír
, 
«me
);

418 i‡(
	`°rchr
 (
¨gs
[0], ':'Ë!
NULL
) {

421 *
˝
;

422 
˝
 = 
¨gs
[1];

423 
¨gs
[1] =árgs[0];

424 
¨gs
[0] = 
˝
;

426 i‡(
	`¨p_£t
(
¨gs
) != 0)

427 
	`Ârötf
(
°dîr
, 
	`_
("arp: cannot setÉntry onÜine %u ofÉtherfile %s !\n"),

428 
löír
, 
«me
);

431 (Ë
	`f˛o£
(
Â
);

433 
	}
}

437 
	$¨p_di•_2
(*
«me
, 
ty≥
, 
¨p_Êags
, *
hwa
, *
mask
, *
dev
)

439 
tôÀ
 = 0;

440 
hwty≥
 *
xhw
;

441 
Êags
[10];

443 
xhw
 = 
	`gë_hw¡y≥
(
ty≥
);

444 i‡(
xhw
 =
NULL
)

445 
xhw
 = 
	`gë_hwty≥
(
DFLT_HW
);

447 i‡(
tôÀ
++ == 0) {

448 
	`¥ötf
(
	`_
("Address HWtype HWaddress Flags Mask Iface\n"));

451 
Êags
[0] = '\0';

452 i‡(
¨p_Êags
 & 
ATF_COM
)

453 
	`°rˇt
(
Êags
, "C");

454 i‡(
¨p_Êags
 & 
ATF_PERM
)

455 
	`°rˇt
(
Êags
, "M");

456 i‡(
¨p_Êags
 & 
ATF_PUBL
)

457 
	`°rˇt
(
Êags
, "P");

458 #ifde‡
ATF_MAGIC


459 i‡(
¨p_Êags
 & 
ATF_MAGIC
)

460 
	`°rˇt
(
Êags
, "A");

462 #ifde‡
ATF_DONTPUB


463 i‡(
¨p_Êags
 & 
ATF_DONTPUB
)

464 
	`°rˇt
(
Êags
, "!");

466 i‡(
¨p_Êags
 & 
ATF_USETRAILERS
)

467 
	`°rˇt
(
Êags
, "T");

469 i‡(!(
¨p_Êags
 & 
ATF_NETMASK
))

470 
mask
 = "";

472 
	`¥ötf
("%-23.23† ", 
«me
);

474 i‡(!(
¨p_Êags
 & 
ATF_COM
)) {

475 i‡(
¨p_Êags
 & 
ATF_PUBL
)

476 
	`¥ötf
("%-8.8s%-20.20s", "*", 
	`_
("<from_interface>"));

478 
	`¥ötf
("%-8.8s%-20.20s", "", 
	`_
("(incomplete)"));

480 
	`¥ötf
("%-8.8s%-20.20s", 
xhw
->
«me
, 
hwa
);

483 
	`¥ötf
("%-6.6s%-15.15†%s\n", 
Êags
, 
mask
, 
dev
);

484 
	}
}

487 
	$¨p_di•
(*
«me
, *
ù
, 
ty≥
, 
¨p_Êags
, *
hwa
, *
mask
, *
dev
)

489 
hwty≥
 *
xhw
;

491 
xhw
 = 
	`gë_hw¡y≥
(
ty≥
);

492 i‡(
xhw
 =
NULL
)

493 
xhw
 = 
	`gë_hwty≥
(
DFLT_HW
);

495 
	`¥ötf
(
	`_
("%†(%sË© "), 
«me
, 
ù
);

497 i‡(!(
¨p_Êags
 & 
ATF_COM
)) {

498 i‡(
¨p_Êags
 & 
ATF_PUBL
)

499 
	`¥ötf
("<from_interface> ");

501 
	`¥ötf
(
	`_
("<incomplete> "));

503 
	`¥ötf
("%†[%s] ", 
hwa
, 
xhw
->
«me
);

506 i‡(
¨p_Êags
 & 
ATF_NETMASK
)

507 
	`¥ötf
(
	`_
("√tmask %†"), 
mask
);

509 i‡(
¨p_Êags
 & 
ATF_PERM
)

510 
	`¥ötf
("PERM ");

511 i‡(
¨p_Êags
 & 
ATF_PUBL
)

512 
	`¥ötf
("PUB ");

513 #ifde‡
ATF_MAGIC


514 i‡(
¨p_Êags
 & 
ATF_MAGIC
)

515 
	`¥ötf
("AUTO ");

517 #ifde‡
ATF_DONTPUB


518 i‡(
¨p_Êags
 & 
ATF_DONTPUB
)

519 
	`¥ötf
("DONTPUB ");

521 i‡(
¨p_Êags
 & 
ATF_USETRAILERS
)

522 
	`¥ötf
("TRAIL ");

524 
	`¥ötf
(
	`_
("⁄ %s\n"), 
dev
);

525 
	}
}

529 
	$¨p_show
(*
«me
)

531 
ho°
[100];

532 
sockaddr_°‹age
 
ss
;

533 
sockaddr
 *
ß
;

534 
ù
[100];

535 
hwa
[100];

536 
mask
[100];

537 
löe
[200];

538 
dev
[100];

539 
ty≥
, 
Êags
;

540 
FILE
 *
Â
;

541 *
ho°«me
;

542 
num
, 
íåõs
 = 0, 
showed
 = 0;

544 
ho°
[0] = '\0';

546 
ß
 = (
sockaddr
 *)&
ss
;

547 i‡(
«me
 !
NULL
) {

549 
	`ß„_°∫˝y
(
ho°
, 
«me
, ( host));

550 i‡(
≠
->
	`öput
(0, 
ho°
, 
ß
) < 0) {

551 
≠
->
	`hîr‹
(
ho°
);

554 
	`ß„_°∫˝y
(
ho°
, 
≠
->
	`•röt
(
ß
, 1), (host));

557 i‡((
Â
 = 
	`f›í
(
_PATH_PROCNET_ARP
, "r")Ë=
NULL
) {

558 
	`≥º‹
(
_PATH_PROCNET_ARP
);

562 i‡(
	`fgës
(
löe
, ÷öe), 
Â
Ë!(*Ë
NULL
) {

563 
	`°r˝y
(
mask
, "-");

564 
	`°r˝y
(
dev
, "-");

566 ; 
	`fgës
(
löe
, ÷öe), 
Â
);) {

567 
num
 = 
	`ssˇnf
(
löe
, "%s 0x%x 0x%x %99s %99s %99s\n",

568 
ù
, &
ty≥
, &
Êags
, 
hwa
, 
mask
, 
dev
);

569 i‡(
num
 < 4)

572 
íåõs
++;

574 i‡(
hw_£t
 && (
ty≥
 !
hw
->type))

578 i‡(
ho°
[0] && 
	`°rcmp
(
ù
, host))

582 i‡(
devi˚
[0] && 
	`°rcmp
(
dev
, device))

585 
showed
++;

587 i‡(
›t_n
)

588 
ho°«me
 = "?";

590 i‡(
≠
->
	`öput
(0, 
ù
, 
ß
) < 0)

591 
ho°«me
 = 
ù
;

593 
ho°«me
 = 
≠
->
	`•röt
(
ß
, 
›t_n
 | 0x8000);

594 i‡(
	`°rcmp
(
ho°«me
, 
ù
) == 0)

595 
ho°«me
 = "?";

598 i‡(
›t_e
)

599 
	`¨p_di•_2
(
ho°«me
[0] ='?' ? 
ù
 : ho°«me, 
ty≥
, 
Êags
, 
hwa
, 
mask
, 
dev
);

601 
	`¨p_di•
(
ho°«me
, 
ù
, 
ty≥
, 
Êags
, 
hwa
, 
mask
, 
dev
);

604 i‡(
›t_v
)

605 
	`¥ötf
(
	`_
("E¡rõs: %d\tSkù≥d: %d\tFound: %d\n"), 
íåõs
,É¡rõ†- 
showed
, showed);

607 i‡(!
showed
) {

608 i‡(
ho°
[0] && !
›t_a
)

609 
	`¥ötf
(
	`_
("%†(%sË--Çÿíåy\n"), 
«me
, 
ho°
);

610 i‡(
hw_£t
 || 
ho°
[0] || 
devi˚
[0]) {

611 
	`¥ötf
(
	`_
("¨p: i¿%dÉ¡rõ†nÿm©ch found.\n"), 
íåõs
);

614 (Ë
	`f˛o£
(
Â
);

616 
	}
}

618 
	$vîsi⁄
()

620 
	`Ârötf
(
°dîr
, "%s\n%s\n%s\n", 
Rñó£
, 
Vîsi⁄
, 
Fótuªs
);

621 
	`exô
(
E_VERSION
);

622 
	}
}

624 
	$ußge
()

626 
	`Ârötf
(
°dîr
, 
	`_
("Usage:\nárp [-vn] [<HW>] [-i <if>] [-a] [<hostname>] <-Display ARP cache\n"));

627 
	`Ârötf
(
°dîr
, 
	`_
("árp [-v] [-i <if>] -d <host> [pub] <-Delete ARPÉntry\n"));

628 
	`Ârötf
(
°dîr
, 
	`_
("árp [-vnD] [<HW>] [-i <if>] -f [<filename>] <-AddÉntry from file\n"));

629 
	`Ârötf
(
°dîr
, 
	`_
("árp [-v] [<HW>] [-i <if>] -s <host> <hwaddr> [temp] <-AddÉntry\n"));

630 
	`Ârötf
(
°dîr
, 
	`_
("árp [-v] [<HW>] [-i <if>] -Ds <host> <if> [netmask <nm>]Öub <-''-\n\n"));

632 
	`Ârötf
(
°dîr
, 
	`_
(" -a display (all) hosts inálternative (BSD) style\n"));

633 
	`Ârötf
(
°dîr
, 
	`_
(" -e display (all) hosts in default (Linux) style\n"));

634 
	`Ârötf
(
°dîr
, 
	`_
(" -s, --set setáÇew ARPÉntry\n"));

635 
	`Ârötf
(
°dîr
, 
	`_
(" -d, --delete deleteá specifiedÉntry\n"));

636 
	`Ârötf
(
°dîr
, 
	`_
(" -v, --verbose be verbose\n"));

637 
	`Ârötf
(
°dîr
, 
	`_
(" -n, --numeric don'tÑesolveÇames\n"));

638 
	`Ârötf
(
°dîr
, 
	`_
(" -i, --device specifyÇetwork interface (e.g.Éth0)\n"));

639 
	`Ârötf
(
°dîr
, 
	`_
(" -D, --use-deviceÑead <hwaddr> from given device\n"));

640 
	`Ârötf
(
°dîr
, 
	`_
(" -A, -p, --protocol specifyÖrotocol family\n"));

641 
	`Ârötf
(
°dîr
, 
	`_
(" -f, --fileÑeadÇewÉntries from file or from /etc/ethers\n\n"));

643 
	`Ârötf
(
°dîr
, 
	`_
(" <HW>=U£ '-H <hw>'Åÿ•ecify h¨dw¨êaddªs†ty≥. DeÁu…: %s\n"), 
DFLT_HW
);

644 
	`Ârötf
(
°dîr
, 
	`_
(" List ofÖossible hardwareÅypes (which support ARP):\n"));

645 
	`¥öt_hwli°
(1);

646 
	`exô
(
E_USAGE
);

647 
	}
}

649 
	$maö
(
¨gc
, **
¨gv
)

651 
i
, 
l›
, 
wh©
;

652 
›ti⁄
 
l⁄g›ts
[] =

667 {
NULL
, 0, 0, 0}

670 #i‡
I18N


671 
	`£éoˇÀ
 (
LC_ALL
, "");

672 
	`bödãxtdomaö
("net-tools", "/usr/share/locale");

673 
	`ãxtdomaö
("net-tools");

677 i‡((
hw
 = 
	`gë_hwty≥
(
DFLT_HW
)Ë=
NULL
) {

678 
	`Ârötf
(
°dîr
, 
	`_
("%s: h¨dw¨êty≥ÇŸ suµ‹ãd!\n"), 
DFLT_HW
);

681 i‡((
≠
 = 
	`gë_a·y≥
(
DFLT_AF
)Ë=
NULL
) {

682 
	`Ârötf
(
°dîr
, 
	`_
("%s:áddªs†ÁmûyÇŸ suµ‹ãd!\n"), 
DFLT_AF
);

685 
wh©
 = 0;

689 (
i
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "A:H:adÂ:n£i:t:vh?DNV", 
l⁄g›ts
, &
l›
)Ë!
EOF
)

690 
i
) {

692 
wh©
 = 1;

693 
›t_a
 = 1;

696 
wh©
 = 2;

699 
wh©
 = 3;

702 
wh©
 = 4;

707 
›t_e
 = 1;

710 
›t_n
 = 
FLAG_NUM
;

713 
›t_D
 = 1;

716 
›t_N
 = 
FLAG_SYM
;

717 
	`Ârötf
(
°dîr
, 
	`_
("arp: -NÇot yet supported.\n"));

720 
›t_v
 = 1;

725 
≠
 = 
	`gë_a·y≥
(
›èrg
);

726 i‡(
≠
 =
NULL
) {

727 
	`Ârötf
(
°dîr
, 
	`_
("arp: %s: unknownáddress family.\n"),

728 
›èrg
);

729 
	`exô
(-1);

734 
hw
 = 
	`gë_hwty≥
(
›èrg
);

735 i‡(
hw
 =
NULL
) {

736 
	`Ârötf
(
°dîr
, 
	`_
("arp: %s: unknown hardwareÅype.\n"),

737 
›èrg
);

738 
	`exô
(-1);

740 
hw_£t
 = 1;

743 
	`ß„_°∫˝y
(
devi˚
, 
›èrg
, (device));

747 
	`vîsi⁄
();

751 
	`ußge
();

754 i‡(
≠
->
af
 !
AF_INET
) {

755 
	`Ârötf
(
°dîr
, 
	`_
("arp: %s: kernel only supports 'inet'.\n"),

756 
≠
->
«me
);

757 
	`exô
(-1);

761 if(
hw_£t
==0)

762 i‡((
hw
 = 
	`gë_hwty≥
(
DFLT_HW
)Ë=
NULL
) {

763 
	`Ârötf
(
°dîr
, 
	`_
("%s: h¨dw¨êty≥ÇŸ suµ‹ãd!\n"), 
DFLT_HW
);

767 i‡(
hw
->
Æí
 <= 0) {

768 
	`Ârötf
(
°dîr
, 
	`_
("arp: %s: hardwareÅype without ARP support.\n"),

769 
hw
->
«me
);

770 
	`exô
(-1);

772 i‡((
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0) {

773 
	`≥º‹
("socket");

774 
	`exô
(-1);

777 
wh©
) {

779 
›t_e
 = 1;

780 
wh©
 = 
	`¨p_show
(
¨gv
[
›töd
]);

784 
wh©
 = 
	`¨p_show
(
¨gv
[
›töd
]);

788 
wh©
 = 
	`¨p_fûe
(
¨gv
[
›töd
] ?árgv[optind] : "/etc/ethers");

792 
wh©
 = 
	`¨p_dñ
(&
¨gv
[
›töd
]);

796 
wh©
 = 
	`¨p_£t
(&
¨gv
[
›töd
]);

800 
	`ußge
();

803 
	`exô
(
wh©
);

804 
	}
}

	@interface/net-tools/config.h

22 
	#I18N
 1

	)

29 
	#HAVE_AFUNIX
 1

	)

30 
	#HAVE_AFINET
 1

	)

31 
	#HAVE_AFINET6
 1

	)

32 
	#HAVE_AFIPX
 1

	)

33 
	#HAVE_AFATALK
 1

	)

34 
	#HAVE_AFAX25
 1

	)

35 
	#HAVE_AFNETROM
 1

	)

36 
	#HAVE_AFROSE
 1

	)

37 
	#HAVE_AFX25
 1

	)

38 
	#HAVE_AFECONET
 1

	)

39 
	#HAVE_AFDEC√t
 0

	)

40 
	#HAVE_AFASH
 1

	)

47 
	#HAVE_HWETHER
 1

	)

48 
	#HAVE_HWARC
 1

	)

49 
	#HAVE_HWSLIP
 1

	)

50 
	#HAVE_HWPPP
 1

	)

51 
	#HAVE_HWTUNNEL
 1

	)

52 
	#HAVE_HWSTRIP
 1

	)

53 
	#HAVE_HWTR
 1

	)

54 
	#HAVE_HWAX25
 1

	)

55 
	#HAVE_HWROSE
 1

	)

56 
	#HAVE_HWNETROM
 1

	)

57 
	#HAVE_HWX25
 1

	)

58 
	#HAVE_HWFR
 1

	)

59 
	#HAVE_HWSIT
 1

	)

60 
	#HAVE_HWFDDI
 1

	)

61 
	#HAVE_HWHIPPI
 1

	)

62 
	#HAVE_HWASH
 1

	)

63 
	#HAVE_HWHDLCLAPB
 1

	)

64 
	#HAVE_HWIRDA
 1

	)

65 
	#HAVE_HWEC
 1

	)

66 
	#HAVE_HWEUI64
 1

	)

67 
	#HAVE_HWIB
 1

	)

74 
	#HAVE_FW_MASQUERADE
 1

	)

75 
	#HAVE_IP_TOOLS
 1

	)

76 
	#HAVE_MII
 1

	)

	@interface/net-tools/hostname.c

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<uni°d.h
>

35 
	~<°dlib.h
>

36 
	~<gë›t.h
>

37 
	~<°rög.h
>

38 
	~<√tdb.h
>

39 
	~<î∫o.h
>

40 
	~<sys/∑øm.h
>

41 
	~<√töë/ö.h
>

42 
	~<¨∑/öë.h
>

43 
	~"c⁄fig.h
"

44 
	~"vîsi⁄.h
"

45 
	~"../öé.h
"

47 #i‡
HAVE_AFDEC√t


48 
	~<√td√t/dn.h
>

51 *
	gRñó£
 = 
RELEASE
, *
	gVîsi⁄
 = "hostname 1.100 (2001-04-14)";

53 *
	g¥ogøm_«me
;

54 
	g›t_v
;

56 
£th«me
(*);

57 
£td«me
(*);

58 
showh«me
(*, );

59 
ußge
();

60 
vîsi⁄
();

61 
£tfûíame
(*, );

63 
	#SETHOST
 1

	)

64 
	#SETDOMAIN
 2

	)

65 
	#SETNODE
 3

	)

67 #i‡
HAVE_AFDEC√t


68 
	$£ä«me
(*
¬ame
)

70 i‡(
›t_v
)

71 
	`Ârötf
(
°dîr
, 
	`_
("SettingÇodenameÅo `%s'\n"),

72 
¬ame
);

73 i‡(
	`£äodíame
(
¬ame
, 
	`°æí
(nname))) {

74 
î∫o
) {

75 
EPERM
:

76 
	`Ârötf
(
°dîr
, 
	`_
("%s: you mu° bêroŸÅÿch™gêthênodê«me\n"), 
¥ogøm_«me
);

78 
EINVAL
:

79 
	`Ârötf
(
°dîr
, 
	`_
("%s:Çamêtoÿl⁄g\n"), 
¥ogøm_«me
);

84 
	`exô
(1);

86 
	}
}

89 
	$£th«me
(*
h«me
)

91 i‡(
›t_v
)

92 
	`Ârötf
(
°dîr
, 
	`_
("Setting hostnameÅo `%s'\n"),

93 
h«me
);

94 i‡(
	`£tho°«me
(
h«me
, 
	`°æí
(hname))) {

95 
î∫o
) {

96 
EPERM
:

97 
	`Ârötf
(
°dîr
, 
	`_
("%s: you mu° bêroŸÅÿch™gêthêho°Çame\n"), 
¥ogøm_«me
);

99 
EINVAL
:

100 
	`Ârötf
(
°dîr
, 
	`_
("%s:Çamêtoÿl⁄g\n"), 
¥ogøm_«me
);

103 
	`exô
(1);

105 
	}
}

107 
	$£td«me
(*
d«me
)

109 i‡(
›t_v
)

110 
	`Ârötf
(
°dîr
, 
	`_
("Setting domainnameÅo `%s'\n"),

111 
d«me
);

112 i‡(
	`£tdomaö«me
(
d«me
, 
	`°æí
(dname))) {

113 
î∫o
) {

114 
EPERM
:

115 
	`Ârötf
(
°dîr
, 
	`_
("%s: you mu° bêroŸÅÿch™gêthêdomaöÇame\n"), 
¥ogøm_«me
);

117 
EINVAL
:

118 
	`Ârötf
(
°dîr
, 
	`_
("%s:Çamêtoÿl⁄g\n"), 
¥ogøm_«me
);

121 
	`exô
(1);

123 
	}
}

125 
	$showh«me
(*
h«me
, 
c
)

127 
ho°ít
 *
hp
;

128 *
p
, **
Æüs
;

129 
ö_addr
 **
ù
;

131 i‡(
›t_v
)

132 
	`Ârötf
(
°dîr
, 
	`_
("Resﬁvög `%s' ...\n"), 
h«me
);

133 i‡(!(
hp
 = 
	`gëho°by«me
(
h«me
))) {

134 
	`hîr‹
(
¥ogøm_«me
);

135 
	`exô
(1);

137 i‡(
›t_v
) {

138 
	`Ârötf
(
°dîr
, 
	`_
("Result: h_name=`%s'\n"),

139 
hp
->
h_«me
);

141 
Æüs
 = 
hp
->
h_Æü£s
;

142 
Æüs
[0])

143 
	`Ârötf
(
°dîr
, 
	`_
("Result: h_aliases=`%s'\n"),

144 *
Æüs
++);

146 
ù
 = (
ö_addr
 **Ë
hp
->
h_addr_li°
;

147 
ù
[0])

148 
	`Ârötf
(
°dîr
, 
	`_
("Result: h_addr_list=`%s'\n"),

149 
	`öë_¡ﬂ
(**
ù
++));

151 i‡(!(
p
 = 
	`°rchr
(
hp
->
h_«me
, '.')Ë&& (
c
 == 'd'))

154 
c
) {

156 
hp
->
h_Æü£s
[0])

157 
	`¥ötf
("%†", *
hp
->
h_Æü£s
++);

158 
	`¥ötf
("\n");

161 
hp
->
h_addr_li°
[0])

162 
	`¥ötf
("%†", 
	`öë_¡ﬂ
(*(
ö_addr
 *Ë*
hp
->
h_addr_li°
++));

163 
	`¥ötf
("\n");

166 
	`¥ötf
("%s\n", ++
p
);

169 
	`¥ötf
("%s\n", 
hp
->
h_«me
);

172 i‡(
p
 !
NULL
)

173 *
p
 = '\0';

174 
	`¥ötf
("%s\n", 
hp
->
h_«me
);

177 
	}
}

179 
	$£tfûíame
(*
«me
, 
wh©
)

181 
FILE
 *
fd
;

182 *
p
;

183 
Êöe
[
MAXHOSTNAMELEN
];

185 i‡((
fd
 = 
	`f›í
(
«me
, "r")Ë!
NULL
) {

186 
	`fgës
(
Êöe
, (Êöe), 
fd
Ë!
NULL
) {

187 i‡((
p
 = 
	`ödex
(
Êöe
, '\n')Ë!
NULL
)

188 *
p
 = '\0';

189 i‡(
›t_v
)

190 
	`Ârötf
(
°dîr
, ">> %s\n", 
Êöe
);

191 i‡(
Êöe
[0] == '#')

193 
wh©
) {

194 
SETHOST
:

195 
	`£th«me
(
Êöe
);

197 
SETDOMAIN
:

198 
	`£td«me
(
Êöe
);

200 #i‡
HAVE_AFDEC√t


201 
SETNODE
:

202 
	`£ä«me
(
Êöe
);

207 (Ë
	`f˛o£
(
fd
);

209 
	`Ârötf
(
°dîr
, 
	`_
("%s: can't open `%s'\n"),

210 
¥ogøm_«me
, 
«me
);

211 
	`exô
(1);

213 
	}
}

215 
	$vîsi⁄
()

217 
	`Ârötf
(
°dîr
, "%s\n%s\n", 
Rñó£
, 
Vîsi⁄
);

218 
	`exô
(5);

219 
	}
}

221 
	$ußge
()

223 
	`Ârötf
(
°dîr
, 
	`_
("Usage: hostname [-v] {hostname|-F file} set hostname (from file)\n"));

224 
	`Ârötf
(
°dîr
, 
	`_
(" domainname [-v] {nisdomain|-F file} set NIS domainname (from file)\n"));

225 #i‡
HAVE_AFDEC√t


226 
	`Ârötf
(
°dîr
, 
	`_
("Çodename [-v] {nodename|-F file} set DECnetÇodeÇame (from file)\n"));

228 
	`Ârötf
(
°dîr
, 
	`_
(" hostname [-v] [-d|-f|-s|-a|-i|-y|-n] display formattedÇame\n"));

229 
	`Ârötf
(
°dîr
, 
	`_
(" hostname [-v] display hostname\n\n"));

230 
	`Ârötf
(
°dîr
, 
	`_
(" hostname -V|--version|-h|--helpÖrint infoándÉxit\n\n"));

231 
	`Ârötf
(
°dîr
, 
	`_
(" dnsdomainname=hostname -d, {yp,nis,}domainname=hostname -y\n\n"));

232 
	`Ârötf
(
°dîr
, 
	`_
(" -s, --short short hostÇame\n"));

233 
	`Ârötf
(
°dîr
, 
	`_
(" -a, --aliasáliasÇames\n"));

234 
	`Ârötf
(
°dîr
, 
	`_
(" -i, --ip-addressáddresses forÅhe hostname\n"));

235 
	`Ârötf
(
°dîr
, 
	`_
(" -f, --fqdn, --longÜong hostÇame (FQDN)\n"));

236 
	`Ârötf
(
°dîr
, 
	`_
(" -d, --domain DNS domainÇame\n"));

237 
	`Ârötf
(
°dîr
, 
	`_
(" -y, --yp, --nis NIS/YP domainname\n"));

238 #i‡
HAVE_AFDEC√t


239 
	`Ârötf
(
°dîr
, 
	`_
(" -n, --node DECnetÇodeÇame\n"));

241 
	`Ârötf
(
°dîr
, 
	`_
(" -F, --fileÑead hostname or NIS domainname from given file\n\n"));

242 
	`Ârötf
(
°dîr
, 
	`_
(

249 
	`exô
(4);

250 
	}
}

253 
	$maö
(
¨gc
, **
¨gv
)

255 
c
;

256 
ty≥
 = '\0';

257 
›ti⁄_ödex
 = 0;

258 
wh©
 = 0;

259 
my«me
[
MAXHOSTNAMELEN
 + 1] =

261 *
fûe
 = 
NULL
;

263 c⁄° 
›ti⁄
 
l⁄g_›ti⁄s
[] =

265 {"domaö", 
no_¨gumít
, 0, 'd'},

266 {"fûe", 
ªquúed_¨gumít
, 0, 'F'},

267 {"fqdn", 
no_¨gumít
, 0, 'f'},

268 {"hñp", 
no_¨gumít
, 0, 'h'},

269 {"l⁄g", 
no_¨gumít
, 0, 'f'},

270 {"sh‹t", 
no_¨gumít
, 0, 's'},

271 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

272 {"vîbo£", 
no_¨gumít
, 0, 'v'},

273 {"Æüs", 
no_¨gumít
, 0, 'a'},

274 {"ù-addªss", 
no_¨gumít
, 0, 'i'},

275 {"nis", 
no_¨gumít
, 0, 'y'},

276 {"yp", 
no_¨gumít
, 0, 'y'},

277 #i‡
HAVE_AFDEC√t


278 {"node", 
no_¨gumít
, 0, 'n'},

282 #i‡
I18N


283 
	`£éoˇÀ
 (
LC_ALL
, "");

284 
	`bödãxtdomaö
("net-tools", "/usr/share/locale");

285 
	`ãxtdomaö
("net-tools");

287 
¥ogøm_«me
 = (
	`rödex
(
¨gv
[0], '/')) ?Ñindex(argv[0], '/') + 1 :árgv[0];

289 i‡(!
	`°rcmp
(
¥ogøm_«me
, "ypdomainname") ||

290 !
	`°rcmp
(
¥ogøm_«me
, "domainname") ||

291 !
	`°rcmp
(
¥ogøm_«me
, "nisdomainname"))

292 
wh©
 = 3;

293 i‡(!
	`°rcmp
(
¥ogøm_«me
, "dnsdomainname"))

294 
wh©
 = 2;

295 #i‡
HAVE_AFDEC√t


296 i‡(!
	`°rcmp
(
¥ogøm_«me
, "nodename"))

297 
wh©
 = 4;

300 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "adfF:h?isVvyn", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
)Ë!
EOF
)

301 
c
) {

303 
wh©
 = 2;

309 
wh©
 = 1;

310 
ty≥
 = 
c
;

313 
wh©
 = 3;

315 #i‡
HAVE_AFDEC√t


317 
wh©
 = 4;

321 
fûe
 = 
›èrg
;

324 
›t_v
++;

327 
	`vîsi⁄
();

332 
	`ußge
();

337 
wh©
) {

339 i‡(
fûe
 || (
›töd
 < 
¨gc
)) {

340 
	`Ârötf
(
°dîr
, 
	`_
("%s: You c™'àch™gêthêDNS domaöÇamêwôhÅhi†comm™d\n"), 
¥ogøm_«me
);

341 
	`Ârötf
(
°dîr
, 
	`_
("\nUnless youáre using bind or NIS for hostÜookups you can changeÅhe DNS\n"));

342 
	`Ârötf
(
°dîr
, 
	`_
("domainÇame (which isÖart ofÅhe FQDN) inÅhe /etc/hosts file.\n"));

343 
	`exô
(1);

345 
ty≥
 = 'd';

348 i‡(
fûe
) {

349 
	`£tfûíame
(
fûe
, 
SETHOST
);

352 i‡(
›töd
 < 
¨gc
) {

353 
	`£th«me
(
¨gv
[
›töd
]);

357 
	`gëho°«me
(
my«me
, (myname));

358 i‡(
›t_v
)

359 
	`Ârötf
(
°dîr
, 
	`_
("gëho°«me()=`%s'\n"), 
my«me
);

360 i‡(!
ty≥
)

361 
	`¥ötf
("%s\n", 
my«me
);

363 
	`showh«me
(
my«me
, 
ty≥
);

366 i‡(
fûe
) {

367 
	`£tfûíame
(
fûe
, 
SETDOMAIN
);

370 i‡(
›töd
 < 
¨gc
) {

371 
	`£td«me
(
¨gv
[
›töd
]);

374 
	`gëdomaö«me
(
my«me
, (myname));

375 i‡(
›t_v
)

376 
	`Ârötf
(
°dîr
, 
	`_
("gëdomaö«me()=`%s'\n"), 
my«me
);

377 
	`¥ötf
("%s\n", 
my«me
);

379 #i‡
HAVE_AFDEC√t


381 i‡(
fûe
) {

382 
	`£tfûíame
(
fûe
, 
SETNODE
);

385 i‡(
›töd
 < 
¨gc
) {

386 
	`£ä«me
(
¨gv
[
›töd
]);

389 
	`gënodíame
(
my«me
, (myname));

390 i‡(
›t_v
)

391 
	`Ârötf
(
°dîr
, 
	`_
("gënodíame()=`%s'\n"), 
my«me
);

392 
	`¥ötf
("%s\n", 
my«me
);

396 
	`exô
(0);

397 
	}
}

	@interface/net-tools/ifconfig.c

28 
	#DFLT_AF
 "öë"

	)

30 
	~"c⁄fig.h
"

32 
	~<„©uªs.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<sys/sockë.h
>

35 
	~<sys/io˘l.h
>

36 
	~<√töë/ö.h
>

37 
	~<√t/if.h
>

38 
	~<√t/if_¨p.h
>

39 
	~<°dio.h
>

40 
	~<î∫o.h
>

41 
	~<f˙é.h
>

42 
	~<˘y≥.h
>

43 
	~<°dlib.h
>

44 
	~<°rög.h
>

45 
	~<uni°d.h
>

46 
	~<√tdb.h
>

49 
	~<asm/ty≥s.h
>

52 #ifde‡
HAVE_HWSLIP


53 
	~<löux/if_¶ù.h
>

56 #i‡
HAVE_AFINET6


58 #i‚de‡
_LINUX_IN6_H


63 
	sö6_i‰eq
 {

64 
ö6_addr
 
	mi‰6_addr
;

65 
__u32
 
	mi‰6_¥efixÀn
;

66 
	mi‰6_ifödex
;

73 #i‡
HAVE_AFIPX


74 #i‡(
__GLIBC__
 > 2Ë|| (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >= 1)

75 
	~<√tùx/ùx.h
>

77 
	~"ùx.h
"

80 
	~"√t-suµ‹t.h
"

81 
	~"∑th«mes.h
"

82 
	~"vîsi⁄.h
"

83 
	~"../öé.h
"

84 
	~"öãrÁ˚.h
"

85 
	~"sockës.h
"

86 
	~"utû.h
"

88 *
	gRñó£
 = 
RELEASE
, *
	gVîsi⁄
 = "ifconfig 1.42 (2001-04-13)";

90 
	g›t_a
 = 0;

91 
	g›t_v
 = 0;

93 
	gaddr_Ámûy
 = 0;

96 
gë_nmbc_∑ª¡
(*
∑ª¡
, *
nm
,

97 *
bc
);

98 
£t_if°©e
(*
∑ª¡
, 
ù
,

99 
nm
, 
bc
,

100 
Êag
);

102 
	$if_¥öt
(*
i‚ame
)

104 
ªs
;

106 i‡(
i„_sh‹t
)

107 
	`¥ötf
(
	`_
("Iface MTU Met RX-OK RX-ERR RX-DRP RX-OVR TX-OK TX-ERR TX-DRP TX-OVR Flg\n"));

109 i‡(!
i‚ame
) {

110 
ªs
 = 
	`f‹_Æl_öãrÁ˚s
(
do_if_¥öt
, &
›t_a
);

112 
öãrÁ˚
 *
i„
;

114 
i„
 = 
	`lookup_öãrÁ˚
(
i‚ame
);

115 i‡(!
i„
) {

118 
ªs
 = 
	`do_if_„tch
(
i„
);

119 i‡(
ªs
 >= 0)

120 
	`i„_¥öt
(
i„
);

122  
ªs
;

123 
	}
}

126 
	$£t_Êag
(*
i‚ame
, 
Êag
)

128 
i‰eq
 
i‰
;

130 
	`ß„_°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

131 i‡(
	`io˘l
(
skfd
, 
SIOCGIFFLAGS
, &
i‰
) < 0) {

132 
	`Ârötf
(
°dîr
, 
	`_
("%s: ERROR while getting interface flags: %s\n"),

133 
i‚ame
, 
	`°ªº‹
(
î∫o
));

136 
	`ß„_°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

137 
i‰
.
i‰_Êags
 |
Êag
;

138 i‡(
	`io˘l
(
skfd
, 
SIOCSIFFLAGS
, &
i‰
) < 0) {

139 
	`≥º‹
("SIOCSIFFLAGS");

143 
	}
}

146 
	$˛r_Êag
(*
i‚ame
, 
Êag
)

148 
i‰eq
 
i‰
;

149 
fd
;

151 i‡(
	`°rchr
(
i‚ame
, ':')) {

154 
fd
 = 
	`gë_sockë_f‹_af
(
AF_INET
);

155 i‡(
fd
 < 0) {

156 
	`Ârötf
(
°dîr
, 
	`_
("No support for INET onÅhis system.\n"));

160 
fd
 = 
skfd
;

162 
	`ß„_°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

163 i‡(
	`io˘l
(
fd
, 
SIOCGIFFLAGS
, &
i‰
) < 0) {

164 
	`Ârötf
(
°dîr
, 
	`_
("%s: ERROR while getting interface flags: %s\n"),

165 
i‚ame
, 
	`°ªº‹
(
î∫o
));

168 
	`ß„_°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

169 
i‰
.
i‰_Êags
 &~
Êag
;

170 i‡(
	`io˘l
(
fd
, 
SIOCSIFFLAGS
, &
i‰
) < 0) {

171 
	`≥º‹
("SIOCSIFFLAGS");

175 
	}
}

178 
	$ã°_Êag
(*
i‚ame
, 
Êags
)

180 
i‰eq
 
i‰
;

181 
fd
;

183 i‡(
	`°rchr
(
i‚ame
, ':')) {

186 
fd
 = 
	`gë_sockë_f‹_af
(
AF_INET
);

187 i‡(
fd
 < 0) {

188 
	`Ârötf
(
°dîr
, 
	`_
("No support for INET onÅhis system.\n"));

192 
fd
 = 
skfd
;

194 
	`ß„_°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

195 i‡(
	`io˘l
(
fd
, 
SIOCGIFFLAGS
, &
i‰
) < 0) {

196 
	`Ârötf
(
°dîr
, 
	`_
("%s: ERROR whileÅesting interface flags: %s\n"),

197 
i‚ame
, 
	`°ªº‹
(
î∫o
));

200  (
i‰
.
i‰_Êags
 & 
Êags
);

201 
	}
}

203 
	$ußge
()

205 
	`Ârötf
(
°dîr
, 
	`_
("Usage:\n ifconfig [-a] [-v] [-s] <interface> [[<AF>] <address>]\n"));

206 #i‡
HAVE_AFINET


207 
	`Ârötf
(
°dîr
, 
	`_
(" [add <address>[/<prefixlen>]]\n"));

208 
	`Ârötf
(
°dîr
, 
	`_
(" [del <address>[/<prefixlen>]]\n"));

209 
	`Ârötf
(
°dîr
, 
	`_
(" [[-]broadcast [<address>]] [[-]pointopoint [<address>]]\n"));

210 
	`Ârötf
(
°dîr
, 
	`_
(" [netmask <address>] [dstaddr <address>] [tunnel <address>]\n"));

212 #ifde‡
SIOCSKEEPALIVE


213 
	`Ârötf
(
°dîr
, 
	`_
(" [outfill <NN>] [keepalive <NN>]\n"));

215 
	`Ârötf
(
°dîr
, 
	`_
(" [hw <HW> <address>] [metric <NN>] [mtu <NN>]\n"));

216 
	`Ârötf
(
°dîr
, 
	`_
(" [[-]trailers] [[-]arp] [[-]allmulti]\n"));

217 
	`Ârötf
(
°dîr
, 
	`_
(" [multicast] [[-]promisc]\n"));

218 
	`Ârötf
(
°dîr
, 
	`_
(" [mem_start <NN>] [io_addr <NN>] [irq <NN>] [media <type>]\n"));

219 #ifde‡
HAVE_TXQUEUELEN


220 
	`Ârötf
(
°dîr
, 
	`_
(" [txqueuelen <NN>]\n"));

222 #ifde‡
HAVE_DYNAMIC


223 
	`Ârötf
(
°dîr
, 
	`_
(" [[-]dynamic]\n"));

225 
	`Ârötf
(
°dîr
, 
	`_
(" [up|down] ...\n\n"));

227 
	`Ârötf
(
°dîr
, 
	`_
(" <HW>=Hardware Type.\n"));

228 
	`Ârötf
(
°dîr
, 
	`_
(" List ofÖossible hardwareÅypes:\n"));

229 
	`¥öt_hwli°
(0);

230 
	`Ârötf
(
°dîr
, 
	`_
(" <AF>=Addªs†Ámûy. DeÁu…: %s\n"), 
DFLT_AF
);

231 
	`Ârötf
(
°dîr
, 
	`_
(" List ofÖossibleáddress families:\n"));

232 
	`¥öt_aÊi°
(0);

233 
	`exô
(
E_USAGE
);

234 
	}
}

236 
	$vîsi⁄
()

238 
	`Ârötf
(
°dîr
, "%s\n%s\n", 
Rñó£
, 
Vîsi⁄
);

239 
	`exô
(
E_USAGE
);

240 
	}
}

242 
	$£t_√tmask
(
skfd
, 
i‰eq
 *
i‰
, 
sockaddr
 *
ß
)

244 
îr
 = 0;

246 
	`mem˝y
((*Ë&
i‰
->
i‰_√tmask
, (*Ë
ß
,

247 (
sockaddr
));

248 i‡(
	`io˘l
(
skfd
, 
SIOCSIFNETMASK
, 
i‰
) < 0) {

249 
	`Ârötf
(
°dîr
, "SIOCSIFNETMASK: %s\n",

250 
	`°ªº‹
(
î∫o
));

251 
îr
 = 1;

253  
îr
;

254 
	}
}

256 
	$maö
(
¨gc
, **
¨gv
)

258 
sockaddr
 
ß
;

259 
sockaddr
 
ßmask
;

260 
sockaddr_ö
 
sö
;

261 
ho°
[128];

262 
a·y≥
 *
≠
;

263 
hwty≥
 *
hw
;

264 
i‰eq
 
i‰
;

265 
gŸîr
 = 0, 
did√tmask
 = 0, 
√ed√tmask
=0;

266 **
•p
;

267 
fd
;

268 #i‡
HAVE_AFINET6


269 
a·y≥
 
öë6_a·y≥
;

270 
sockaddr_ö6
 
ß6
;

271 
ö6_i‰eq
 
i‰6
;

272 
¥efix_Àn
;

273 *
˝
;

275 #i‡
HAVE_AFINET


276 
a·y≥
 
öë_a·y≥
;

279 #i‡
I18N


280 
	`£éoˇÀ
 (
LC_ALL
, "");

281 
	`bödãxtdomaö
("net-tools", "/usr/share/locale");

282 
	`ãxtdomaö
("net-tools");

286 
¨gc
--;

287 
¨gv
++;

288 
¨gc
 && *
¨gv
[0] == '-') {

289 i‡(!
	`°rcmp
(*
¨gv
, "-a"))

290 
›t_a
 = 1;

292 i‡(!
	`°rcmp
(*
¨gv
, "-s"))

293 
i„_sh‹t
 = 1;

295 i‡(!
	`°rcmp
(*
¨gv
, "-v"))

296 
›t_v
 = 1;

298 i‡(!
	`°rcmp
(*
¨gv
, "-V") || !strcmp(*argv, "-version") ||

299 !
	`°rcmp
(*
¨gv
, "--version"))

300 
	`vîsi⁄
();

302 i‡(!
	`°rcmp
(*
¨gv
, "-?") || !strcmp(*argv, "-h") ||

303 !
	`°rcmp
(*
¨gv
, "-help") || !strcmp(*argv, "--help"))

304 
	`ußge
();

307 
	`Ârötf
(
°dîr
, 
	`_
("ifconfig: option `%s'ÇotÑecognised.\n"),

308 
¨gv
[0]);

309 
	`Ârötf
(
°dîr
, 
	`_
("ifconfig: `--help' gives usage information.\n"));

310 
	`exô
(1);

313 
¨gv
++;

314 
¨gc
--;

318 i‡((
skfd
 = 
	`sockës_›í
(0)) < 0) {

319 
	`≥º‹
("socket");

320 
	`exô
(1);

324 i‡(
¨gc
 == 0) {

325 
îr
 = 
	`if_¥öt
((*Ë
NULL
);

326 (Ë
	`˛o£
(
skfd
);

327 
	`exô
(
îr
 < 0);

330 
•p
 = 
¨gv
;

331 
	`ß„_°∫˝y
(
i‰
.
i‰_«me
, *
•p
++, 
IFNAMSIZ
);

332 i‡(*
•p
 =(*Ë
NULL
) {

333 
îr
 = 
	`if_¥öt
(
i‰
.
i‰_«me
);

334 (Ë
	`˛o£
(
skfd
);

335 
	`exô
(
îr
 < 0);

339 i‡((
≠
 = 
	`gë_a·y≥
(*
•p
)Ë!
NULL
)

340 
•p
++;

342 
≠
 = 
	`gë_a·y≥
(
DFLT_AF
);

344 i‡(
≠
) {

345 
addr_Ámûy
 = 
≠
->
af
;

346 
skfd
 = 
≠
->
fd
;

350 *
•p
 !(*Ë
NULL
) {

351 i‡(!
	`°rcmp
(*
•p
, "arp")) {

352 
gŸîr
 |
	`˛r_Êag
(
i‰
.
i‰_«me
, 
IFF_NOARP
);

353 
•p
++;

356 i‡(!
	`°rcmp
(*
•p
, "-arp")) {

357 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, 
IFF_NOARP
);

358 
•p
++;

361 #ifde‡
IFF_PORTSEL


362 i‡(!
	`°rcmp
(*
•p
, "media") || !strcmp(*spp, "port")) {

363 i‡(*++
•p
 =
NULL
)

364 
	`ußge
();

365 i‡(!
	`°rˇ£cmp
(*
•p
, "auto")) {

366 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, 
IFF_AUTOMEDIA
);

368 
i
, 
j
, 
√wp‹t
;

369 *
ídp
;

370 
√wp‹t
 = 
	`°πﬁ
(*
•p
, &
ídp
, 10);

371 i‡(*
ídp
 != 0) {

372 
√wp‹t
 = -1;

373 
i
 = 0; 
if_p‹t_ãxt
[i][0] && 
√wp‹t
 == -1; i++) {

374 
j
 = 0; 
if_p‹t_ãxt
[
i
][j]; j++) {

375 i‡(!
	`°rˇ£cmp
(*
•p
, 
if_p‹t_ãxt
[
i
][
j
])) {

376 
√wp‹t
 = 
i
;

382 
•p
++;

383 i‡(
√wp‹t
 == -1) {

384 
	`Ârötf
(
°dîr
, 
	`_
("Unknown mediaÅype.\n"));

385 
gŸîr
 = 1;

387 i‡(
	`io˘l
(
skfd
, 
SIOCGIFMAP
, &
i‰
) < 0) {

388 
	`≥º‹
("port: SIOCGIFMAP");

389 
gŸîr
 = 1;

392 
i‰
.
i‰_m≠
.
p‹t
 = 
√wp‹t
;

393 i‡(
	`io˘l
(
skfd
, 
SIOCSIFMAP
, &
i‰
) < 0) {

394 
	`≥º‹
("port: SIOCSIFMAP");

395 
gŸîr
 = 1;

403 i‡(!
	`°rcmp
(*
•p
, "trailers")) {

404 
gŸîr
 |
	`˛r_Êag
(
i‰
.
i‰_«me
, 
IFF_NOTRAILERS
);

405 
•p
++;

408 i‡(!
	`°rcmp
(*
•p
, "-trailers")) {

409 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, 
IFF_NOTRAILERS
);

410 
•p
++;

413 i‡(!
	`°rcmp
(*
•p
, "promisc")) {

414 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, 
IFF_PROMISC
);

415 
•p
++;

418 i‡(!
	`°rcmp
(*
•p
, "-promisc")) {

419 
gŸîr
 |
	`˛r_Êag
(
i‰
.
i‰_«me
, 
IFF_PROMISC
);

420 i‡(
	`ã°_Êag
(
i‰
.
i‰_«me
, 
IFF_PROMISC
) > 0)

421 
	`Ârötf
(
°dîr
, 
	`_
("W¨nög: I¡îÁ˚ %†°û»öÖromis¯mode... maybêŸhîáµliˇti⁄ i†ru¬ög?\n"), 
i‰
.
i‰_«me
);

422 
•p
++;

425 i‡(!
	`°rcmp
(*
•p
, "multicast")) {

426 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, 
IFF_MULTICAST
);

427 
•p
++;

430 i‡(!
	`°rcmp
(*
•p
, "-multicast")) {

431 
gŸîr
 |
	`˛r_Êag
(
i‰
.
i‰_«me
, 
IFF_MULTICAST
);

432 i‡(
	`ã°_Êag
(
i‰
.
i‰_«me
, 
IFF_MULTICAST
) > 0)

433 
	`Ârötf
(
°dîr
, 
	`_
("W¨nög: I¡îÁ˚ %†°û»ö MULTICAST mode.\n"), 
i‰
.
i‰_«me
);

434 
•p
++;

437 i‡(!
	`°rcmp
(*
•p
, "allmulti")) {

438 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, 
IFF_ALLMULTI
);

439 
•p
++;

442 i‡(!
	`°rcmp
(*
•p
, "-allmulti")) {

443 
gŸîr
 |
	`˛r_Êag
(
i‰
.
i‰_«me
, 
IFF_ALLMULTI
);

444 i‡(
	`ã°_Êag
(
i‰
.
i‰_«me
, 
IFF_MULTICAST
) > 0)

445 
	`Ârötf
(
°dîr
, 
	`_
("W¨nög: I¡îÁ˚ %†°û»ö ALLMULTI mode.\n"), 
i‰
.
i‰_«me
);

446 
•p
++;

449 i‡(!
	`°rcmp
(*
•p
, "up")) {

450 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, (
IFF_UP
 | 
IFF_RUNNING
));

451 
•p
++;

454 i‡(!
	`°rcmp
(*
•p
, "down")) {

455 
gŸîr
 |
	`˛r_Êag
(
i‰
.
i‰_«me
, 
IFF_UP
);

456 
•p
++;

459 #ifde‡
HAVE_DYNAMIC


460 i‡(!
	`°rcmp
(*
•p
, "dynamic")) {

461 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, 
IFF_DYNAMIC
);

462 
•p
++;

465 i‡(!
	`°rcmp
(*
•p
, "-dynamic")) {

466 
gŸîr
 |
	`˛r_Êag
(
i‰
.
i‰_«me
, 
IFF_DYNAMIC
);

467 
•p
++;

468 i‡(
	`ã°_Êag
(
i‰
.
i‰_«me
, 
IFF_MULTICAST
) > 0)

469 
	`Ârötf
(
°dîr
, 
	`_
("W¨nög: I¡îÁ˚ %†°û»ö DYNAMIC mode.\n"), 
i‰
.
i‰_«me
);

474 i‡(!
	`°rcmp
(*
•p
, "metric")) {

475 i‡(*++
•p
 =
NULL
)

476 
	`ußge
();

477 
i‰
.
i‰_mëric
 = 
	`©oi
(*
•p
);

478 i‡(
	`io˘l
(
skfd
, 
SIOCSIFMETRIC
, &
i‰
) < 0) {

479 
	`Ârötf
(
°dîr
, "SIOCSIFMETRIC: %s\n", 
	`°ªº‹
(
î∫o
));

480 
gŸîr
 = 1;

482 
•p
++;

485 i‡(!
	`°rcmp
(*
•p
, "mtu")) {

486 i‡(*++
•p
 =
NULL
)

487 
	`ußge
();

488 
i‰
.
i‰_mtu
 = 
	`©oi
(*
•p
);

489 i‡(
	`io˘l
(
skfd
, 
SIOCSIFMTU
, &
i‰
) < 0) {

490 
	`Ârötf
(
°dîr
, "SIOCSIFMTU: %s\n", 
	`°ªº‹
(
î∫o
));

491 
gŸîr
 = 1;

493 
•p
++;

496 #ifde‡
SIOCSKEEPALIVE


497 i‡(!
	`°rcmp
(*
•p
, "keepalive")) {

498 i‡(*++
•p
 =
NULL
)

499 
	`ußge
();

500 
i‰
.
i‰_d©a
 = (
ˇddr_t
Ë
	`©oi
(*
•p
);

501 i‡(
	`io˘l
(
skfd
, 
SIOCSKEEPALIVE
, &
i‰
) < 0) {

502 
	`Ârötf
(
°dîr
, "SIOCSKEEPALIVE: %s\n", 
	`°ªº‹
(
î∫o
));

503 
gŸîr
 = 1;

505 
•p
++;

510 #ifde‡
SIOCSOUTFILL


511 i‡(!
	`°rcmp
(*
•p
, "outfill")) {

512 i‡(*++
•p
 =
NULL
)

513 
	`ußge
();

514 
i‰
.
i‰_d©a
 = (
ˇddr_t
Ë
	`©oi
(*
•p
);

515 i‡(
	`io˘l
(
skfd
, 
SIOCSOUTFILL
, &
i‰
) < 0) {

516 
	`Ârötf
(
°dîr
, "SIOCSOUTFILL: %s\n", 
	`°ªº‹
(
î∫o
));

517 
gŸîr
 = 1;

519 
•p
++;

524 i‡(!
	`°rcmp
(*
•p
, "-broadcast")) {

525 
gŸîr
 |
	`˛r_Êag
(
i‰
.
i‰_«me
, 
IFF_BROADCAST
);

526 i‡(
	`ã°_Êag
(
i‰
.
i‰_«me
, 
IFF_MULTICAST
) > 0)

527 
	`Ârötf
(
°dîr
, 
	`_
("W¨nög: I¡îÁ˚ %†°û»ö BROADCAST mode.\n"), 
i‰
.
i‰_«me
);

528 
•p
++;

531 i‡(!
	`°rcmp
(*
•p
, "broadcast")) {

532 i‡(*++
•p
 !
NULL
) {

533 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

534 i‡(
≠
->
	`öput
(0, 
ho°
, &
ß
) < 0) {

535 i‡(
≠
->
hîr‹
)

536 
≠
->
	`hîr‹
(
ho°
);

538 
	`Ârötf
(
°dîr
, 
	`_
("ifc⁄fig: Eº‹Ñesﬁvög '%s' f‹ brﬂdˇ°\n"), 
ho°
);

539 
gŸîr
 = 1;

540 
•p
++;

543 
	`mem˝y
((*Ë&
i‰
.
i‰_brﬂdaddr
, (*Ë&
ß
,

544 (
sockaddr
));

545 i‡(
	`io˘l
(
≠
->
fd
, 
SIOCSIFBRDADDR
, &
i‰
) < 0) {

546 
	`Ârötf
(
°dîr
, "SIOCSIFBRDADDR: %s\n",

547 
	`°ªº‹
(
î∫o
));

548 
gŸîr
 = 1;

550 
•p
++;

552 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, 
IFF_BROADCAST
);

555 i‡(!
	`°rcmp
(*
•p
, "dstaddr")) {

556 i‡(*++
•p
 =
NULL
)

557 
	`ußge
();

558 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

559 i‡(
≠
->
	`öput
(0, 
ho°
, &
ß
) < 0) {

560 i‡(
≠
->
hîr‹
)

561 
≠
->
	`hîr‹
(
ho°
);

563 
	`Ârötf
(
°dîr
, 
	`_
("ifc⁄fig: Eº‹Ñesﬁvög '%s' f‹ d°addr\n"), 
ho°
);

564 
gŸîr
 = 1;

565 
•p
++;

568 
	`mem˝y
((*Ë&
i‰
.
i‰_d°addr
, (*Ë&
ß
,

569 (
sockaddr
));

570 i‡(
	`io˘l
(
≠
->
fd
, 
SIOCSIFDSTADDR
, &
i‰
) < 0) {

571 
	`Ârötf
(
°dîr
, "SIOCSIFDSTADDR: %s\n",

572 
	`°ªº‹
(
î∫o
));

573 
gŸîr
 = 1;

575 
•p
++;

578 i‡(!
	`°rcmp
(*
•p
, "netmask")) {

579 i‡(*++
•p
 =
NULL
 || 
did√tmask
)

580 
	`ußge
();

581 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

582 i‡(
≠
->
	`öput
(0, 
ho°
, &
ß
) < 0) {

583 i‡(
≠
->
hîr‹
)

584 
≠
->
	`hîr‹
(
ho°
);

586 
	`Ârötf
(
°dîr
, 
	`_
("ifc⁄fig: Eº‹Ñesﬁvög '%s' f‹Çëmask\n"), 
ho°
);

587 
gŸîr
 = 1;

588 
•p
++;

591 
did√tmask
++;

592 
gŸîr
 |
	`£t_√tmask
(
≠
->
fd
, &
i‰
, &
ß
);

593 
•p
++;

596 #ifde‡
HAVE_TXQUEUELEN


597 i‡(!
	`°rcmp
(*
•p
, "txqueuelen")) {

598 i‡(*++
•p
 =
NULL
)

599 
	`ußge
();

600 
i‰
.
i‰_qÀn
 = 
	`°πoul
(*
•p
, 
NULL
, 0);

601 i‡(
	`io˘l
(
skfd
, 
SIOCSIFTXQLEN
, &
i‰
) < 0) {

602 
	`Ârötf
(
°dîr
, "SIOCSIFTXQLEN: %s\n", 
	`°ªº‹
(
î∫o
));

603 
gŸîr
 = 1;

605 
•p
++;

610 i‡(!
	`°rcmp
(*
•p
, "mem_start")) {

611 i‡(*++
•p
 =
NULL
)

612 
	`ußge
();

613 i‡(
	`io˘l
(
skfd
, 
SIOCGIFMAP
, &
i‰
) < 0) {

614 
	`Ârötf
(
°dîr
, "mem_°¨t: SIOCGIFMAP: %s\n", 
	`°ªº‹
(
î∫o
));

615 
•p
++;

616 
gŸîr
 = 1;

619 
i‰
.
i‰_m≠
.
mem_°¨t
 = 
	`°πoul
(*
•p
, 
NULL
, 0);

620 i‡(
	`io˘l
(
skfd
, 
SIOCSIFMAP
, &
i‰
) < 0) {

621 
	`Ârötf
(
°dîr
, "mem_°¨t: SIOCSIFMAP: %s\n", 
	`°ªº‹
(
î∫o
));

622 
gŸîr
 = 1;

624 
•p
++;

627 i‡(!
	`°rcmp
(*
•p
, "io_addr")) {

628 i‡(*++
•p
 =
NULL
)

629 
	`ußge
();

630 i‡(
	`io˘l
(
skfd
, 
SIOCGIFMAP
, &
i‰
) < 0) {

631 
	`Ârötf
(
°dîr
, "io_addr: SIOCGIFMAP: %s\n", 
	`°ªº‹
(
î∫o
));

632 
•p
++;

633 
gŸîr
 = 1;

636 
i‰
.
i‰_m≠
.
ba£_addr
 = 
	`°πﬁ
(*
•p
, 
NULL
, 0);

637 i‡(
	`io˘l
(
skfd
, 
SIOCSIFMAP
, &
i‰
) < 0) {

638 
	`Ârötf
(
°dîr
, "io_addr: SIOCSIFMAP: %s\n", 
	`°ªº‹
(
î∫o
));

639 
gŸîr
 = 1;

641 
•p
++;

644 i‡(!
	`°rcmp
(*
•p
, "irq")) {

645 i‡(*++
•p
 =
NULL
)

646 
	`ußge
();

647 i‡(
	`io˘l
(
skfd
, 
SIOCGIFMAP
, &
i‰
) < 0) {

648 
	`Ârötf
(
°dîr
, "úq: SIOCGIFMAP: %s\n", 
	`°ªº‹
(
î∫o
));

649 
gŸîr
 = 1;

650 
•p
++;

653 
i‰
.
i‰_m≠
.
úq
 = 
	`©oi
(*
•p
);

654 i‡(
	`io˘l
(
skfd
, 
SIOCSIFMAP
, &
i‰
) < 0) {

655 
	`Ârötf
(
°dîr
, "úq: SIOCSIFMAP: %s\n", 
	`°ªº‹
(
î∫o
));

656 
gŸîr
 = 1;

658 
•p
++;

661 i‡(!
	`°rcmp
(*
•p
, "-pointopoint")) {

662 
gŸîr
 |
	`˛r_Êag
(
i‰
.
i‰_«me
, 
IFF_POINTOPOINT
);

663 
•p
++;

664 i‡(
	`ã°_Êag
(
i‰
.
i‰_«me
, 
IFF_MULTICAST
) > 0)

665 
	`Ârötf
(
°dîr
, 
	`_
("W¨nög: I¡îÁ˚ %†°û»ö POINTOPOINT mode.\n"), 
i‰
.
i‰_«me
);

668 i‡(!
	`°rcmp
(*
•p
, "pointopoint")) {

669 i‡(*(
•p
 + 1Ë!
NULL
) {

670 
•p
++;

671 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

672 i‡(
≠
->
	`öput
(0, 
ho°
, &
ß
)) {

673 i‡(
≠
->
hîr‹
)

674 
≠
->
	`hîr‹
(
ho°
);

676 
	`Ârötf
(
°dîr
, 
	`_
("ifc⁄fig: Eº‹Ñesﬁvög '%s' f‹Öoöt›oöt\n"), 
ho°
);

677 
gŸîr
 = 1;

678 
•p
++;

681 
	`mem˝y
((*Ë&
i‰
.
i‰_d°addr
, (*Ë&
ß
,

682 (
sockaddr
));

683 i‡(
	`io˘l
(
≠
->
fd
, 
SIOCSIFDSTADDR
, &
i‰
) < 0) {

684 
	`Ârötf
(
°dîr
, "SIOCSIFDSTADDR: %s\n",

685 
	`°ªº‹
(
î∫o
));

686 
gŸîr
 = 1;

689 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, 
IFF_POINTOPOINT
);

690 
•p
++;

694 i‡(!
	`°rcmp
(*
•p
, "hw")) {

695 i‡(*++
•p
 =
NULL
)

696 
	`ußge
();

697 i‡((
hw
 = 
	`gë_hwty≥
(*
•p
)Ë=
NULL
)

698 
	`ußge
();

699 i‡(
hw
->
öput
 =
NULL
) {

700 
	`Ârötf
(
°dîr
, 
	`_
("hwáddªs†ty≥ `%s' ha†nÿh™dÀ∏tÿ£àaddªss. faûed.\n"), *
•p
);

701 
•p
+=2;

702 
gŸîr
 = 1;

705 i‡(*++
•p
 =
NULL
)

706 
	`ußge
();

707 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

708 i‡(
hw
->
	`öput
(
ho°
, &
ß
) < 0) {

709 
	`Ârötf
(
°dîr
, 
	`_
("%s: invÆid %†addªss.\n"), 
ho°
, 
hw
->
«me
);

710 
gŸîr
 = 1;

711 
•p
++;

714 
	`mem˝y
((*Ë&
i‰
.
i‰_hwaddr
, (*Ë&
ß
,

715 (
sockaddr
));

716 i‡(
	`io˘l
(
skfd
, 
SIOCSIFHWADDR
, &
i‰
) < 0) {

717 i‡(
î∫o
 =
EBUSY
)

718 
	`Ârötf
(
°dîr
, "SIOCSIFHWADDR: %s - you mayÇeedÅo downÅhe interface\n",

719 
	`°ªº‹
(
î∫o
));

721 
	`Ârötf
(
°dîr
, "SIOCSIFHWADDR: %s\n",

722 
	`°ªº‹
(
î∫o
));

723 
gŸîr
 = 1;

725 
•p
++;

728 #i‡
HAVE_AFINET
 || 
HAVE_AFINET6


729 i‡(!
	`°rcmp
(*
•p
, "add")) {

730 i‡(*++
•p
 =
NULL
)

731 
	`ußge
();

732 #i‡
HAVE_AFINET6


733 i‡(
	`°rchr
(*
•p
, ':')) {

735 i‡((
˝
 = 
	`°rchr
(*
•p
, '/'))) {

736 
¥efix_Àn
 = 
	`©ﬁ
(
˝
 + 1);

737 i‡((
¥efix_Àn
 < 0) || (prefix_len > 128))

738 
	`ußge
();

739 *
˝
 = 0;

741 
¥efix_Àn
 = 128;

743 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

744 i‡(
öë6_a·y≥
.
	`öput
(1, 
ho°
,

745 (
sockaddr
 *Ë&
ß6
) < 0) {

746 i‡(
öë6_a·y≥
.
hîr‹
)

747 
öë6_a·y≥
.
	`hîr‹
(
ho°
);

749 
	`Ârötf
(
°dîr
, 
	`_
("ifc⁄fig: Eº‹Ñesﬁvög '%s' f‹ádd\n"), 
ho°
);

750 
gŸîr
 = 1;

751 
•p
++;

754 
	`mem˝y
((*Ë&
i‰6
.
i‰6_addr
, (*Ë&
ß6
.
sö6_addr
,

755 (
ö6_addr
));

757 
fd
 = 
	`gë_sockë_f‹_af
(
AF_INET6
);

758 i‡(
fd
 < 0) {

759 
	`Ârötf
(
°dîr
,

760 
	`_
("No support for INET6 onÅhis system.\n"));

761 
gŸîr
 = 1;

762 
•p
++;

765 i‡(
	`io˘l
(
fd
, 
SIOGIFINDEX
, &
i‰
) < 0) {

766 
	`≥º‹
("SIOGIFINDEX");

767 
gŸîr
 = 1;

768 
•p
++;

771 
i‰6
.
i‰6_ifödex
 = 
i‰
.
i‰_ifödex
;

772 
i‰6
.
i‰6_¥efixÀn
 = 
¥efix_Àn
;

773 i‡(
	`io˘l
(
fd
, 
SIOCSIFADDR
, &
i‰6
) < 0) {

774 
	`≥º‹
("SIOCSIFADDR");

775 
gŸîr
 = 1;

777 
•p
++;

781 #ifde‡
HAVE_AFINET


783 
ù
, 
nm
, 
bc
;

784 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

785 i‡(
öë_a·y≥
.
	`öput
(0, 
ho°
, (
sockaddr
 *)&
sö
) < 0) {

786 
≠
->
	`hîr‹
(
ho°
);

787 
gŸîr
 = 1;

788 
•p
++;

791 
fd
 = 
	`gë_sockë_f‹_af
(
AF_INET
);

792 i‡(
fd
 < 0) {

793 
	`Ârötf
(
°dîr
,

794 
	`_
("No support for INET onÅhis system.\n"));

795 
gŸîr
 = 1;

796 
•p
++;

800 
	`mem˝y
(&
ù
, &
sö
.
sö_addr
.
s_addr
, ());

802 i‡(
	`gë_nmbc_∑ª¡
(
i‰
.
i‰_«me
, &
nm
, &
bc
) < 0) {

803 
	`Ârötf
(
°dîr
, 
	`_
("Interface %sÇot initialized\n"),

804 
i‰
.
i‰_«me
);

805 
gŸîr
 = 1;

806 
•p
++;

809 
	`£t_if°©e
(
i‰
.
i‰_«me
, 
ù
, 
nm
, 
bc
, 1);

812 
•p
++;

815 
	`Ârötf
(
°dîr
, 
	`_
("Badáddress.\n"));

820 #i‡
HAVE_AFINET
 || 
HAVE_AFINET6


821 i‡(!
	`°rcmp
(*
•p
, "del")) {

822 i‡(*++
•p
 =
NULL
)

823 
	`ußge
();

825 #ifde‡
SIOCDIFADDR


826 #i‡
HAVE_AFINET6


827 i‡(
	`°rchr
(*
•p
, ':')) {

828 i‡((
˝
 = 
	`°rchr
(*
•p
, '/'))) {

829 
¥efix_Àn
 = 
	`©ﬁ
(
˝
 + 1);

830 i‡((
¥efix_Àn
 < 0) || (prefix_len > 128))

831 
	`ußge
();

832 *
˝
 = 0;

834 
¥efix_Àn
 = 128;

836 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

837 i‡(
öë6_a·y≥
.
	`öput
(1, 
ho°
,

838 (
sockaddr
 *Ë&
ß6
) < 0) {

839 
öë6_a·y≥
.
	`hîr‹
(
ho°
);

840 
gŸîr
 = 1;

841 
•p
++;

844 
	`mem˝y
((*Ë&
i‰6
.
i‰6_addr
, (*Ë&
ß6
.
sö6_addr
,

845 (
ö6_addr
));

847 
fd
 = 
	`gë_sockë_f‹_af
(
AF_INET6
);

848 i‡(
fd
 < 0) {

849 
	`Ârötf
(
°dîr
,

850 
	`_
("No support for INET6 onÅhis system.\n"));

851 
gŸîr
 = 1;

852 
•p
++;

855 i‡(
	`io˘l
(
fd
, 
SIOGIFINDEX
, &
i‰
) < 0) {

856 
	`≥º‹
("SIOGIFINDEX");

857 
gŸîr
 = 1;

858 
•p
++;

861 
i‰6
.
i‰6_ifödex
 = 
i‰
.
i‰_ifödex
;

862 
i‰6
.
i‰6_¥efixÀn
 = 
¥efix_Àn
;

863 i‡(
›t_v
)

864 
	`Ârötf
(
°dîr
, "now dñëög: io˘l(SIOCDIFADDR,{ifödex=%d,¥efixÀn=%ld})\n",
i‰
.
i‰_ifödex
,
¥efix_Àn
);

865 i‡(
	`io˘l
(
fd
, 
SIOCDIFADDR
, &
i‰6
) < 0) {

866 
	`Ârötf
(
°dîr
, "SIOCDIFADDR: %s\n",

867 
	`°ªº‹
(
î∫o
));

868 
gŸîr
 = 1;

870 
•p
++;

874 #ifde‡
HAVE_AFINET


877 
ù
, 
nm
, 
bc
;

878 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

879 i‡(
öë_a·y≥
.
	`öput
(0, 
ho°
, (
sockaddr
 *)&
sö
) < 0) {

880 
≠
->
	`hîr‹
(
ho°
);

881 
gŸîr
 = 1;

882 
•p
++;

885 
fd
 = 
	`gë_sockë_f‹_af
(
AF_INET
);

886 i‡(
fd
 < 0) {

887 
	`Ârötf
(
°dîr
, 
	`_
("No support for INET onÅhis system.\n"));

888 
gŸîr
 = 1;

889 
•p
++;

893 
	`mem˝y
(&
ù
, &
sö
.
sö_addr
.
s_addr
, ());

895 i‡(
	`gë_nmbc_∑ª¡
(
i‰
.
i‰_«me
, &
nm
, &
bc
) < 0) {

896 
	`Ârötf
(
°dîr
, 
	`_
("Interface %sÇot initialized\n"),

897 
i‰
.
i‰_«me
);

898 
gŸîr
 = 1;

899 
•p
++;

902 
	`£t_if°©e
(
i‰
.
i‰_«me
, 
ù
, 
nm
, 
bc
, 0);

904 
•p
++;

907 
	`Ârötf
(
°dîr
, 
	`_
("Badáddress.\n"));

910 
	`Ârötf
(
°dîr
, 
	`_
("Address deletionÇot supported onÅhis system.\n"));

914 #i‡
HAVE_AFINET6


915 i‡(!
	`°rcmp
(*
•p
, "tunnel")) {

916 i‡(*++
•p
 =
NULL
)

917 
	`ußge
();

918 i‡((
˝
 = 
	`°rchr
(*
•p
, '/'))) {

919 
¥efix_Àn
 = 
	`©ﬁ
(
˝
 + 1);

920 i‡((
¥efix_Àn
 < 0) || (prefix_len > 128))

921 
	`ußge
();

922 *
˝
 = 0;

924 
¥efix_Àn
 = 128;

926 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

927 i‡(
öë6_a·y≥
.
	`öput
(1, 
ho°
, (
sockaddr
 *Ë&
ß6
) < 0) {

928 
öë6_a·y≥
.
	`hîr‹
(
ho°
);

929 
gŸîr
 = 1;

930 
•p
++;

933 
	`mem˝y
((*Ë&
i‰6
.
i‰6_addr
, (*Ë&
ß6
.
sö6_addr
,

934 (
ö6_addr
));

936 
fd
 = 
	`gë_sockë_f‹_af
(
AF_INET6
);

937 i‡(
fd
 < 0) {

938 
	`Ârötf
(
°dîr
, 
	`_
("No support for INET6 onÅhis system.\n"));

939 
gŸîr
 = 1;

940 
•p
++;

943 i‡(
	`io˘l
(
fd
, 
SIOGIFINDEX
, &
i‰
) < 0) {

944 
	`≥º‹
("SIOGIFINDEX");

945 
gŸîr
 = 1;

946 
•p
++;

949 
i‰6
.
i‰6_ifödex
 = 
i‰
.
i‰_ifödex
;

950 
i‰6
.
i‰6_¥efixÀn
 = 
¥efix_Àn
;

952 i‡(
	`io˘l
(
fd
, 
SIOCSIFDSTADDR
, &
i‰6
) < 0) {

953 
	`Ârötf
(
°dîr
, "SIOCSIFDSTADDR: %s\n",

954 
	`°ªº‹
(
î∫o
));

955 
gŸîr
 = 1;

957 
•p
++;

963 
	`ß„_°∫˝y
(
ho°
, *
•p
, ( host));

967 i‡(
≠
->
gëmask
) {

968 
≠
->
	`gëmask
(
ho°
, &
ßmask
, 
NULL
)) {

970 
	`ußge
();

973 i‡(
did√tmask
)

974 
	`ußge
();

977 
√ed√tmask
 = 1;

981 i‡(
≠
->
öput
 =
NULL
) {

982 
	`Ârötf
(
°dîr
, 
	`_
("ifconfig: Cannot setáddress forÅhisÖrotocol family.\n"));

983 
	`exô
(1);

985 i‡(
≠
->
	`öput
(0, 
ho°
, &
ß
) < 0) {

986 i‡(
≠
->
hîr‹
)

987 
≠
->
	`hîr‹
(
ho°
);

989 
	`Ârötf
(
°dîr
,
	`_
("ifc⁄fig:Éº‹Ñesﬁvög '%s'Åÿ£àaddªs†f‹áf=%s\n"), 
ho°
, 
≠
->
«me
); fprintf(stderr,

990 
	`_
("ifc⁄fig: `--hñp' give†ußgêöf‹m©i⁄.\n")); 
	`exô
(1);

992 
	`mem˝y
((*Ë&
i‰
.
i‰_addr
, (*Ë&
ß
, (
sockaddr
));

994 
r
 = 0;

995 
≠
->
af
) {

996 #i‡
HAVE_AFINET


997 
AF_INET
:

998 
fd
 = 
	`gë_sockë_f‹_af
(
AF_INET
);

999 i‡(
fd
 < 0) {

1000 
	`Ârötf
(
°dîr
, 
	`_
("No support for INET onÅhis system.\n"));

1001 
	`exô
(1);

1003 
r
 = 
	`io˘l
(
fd
, 
SIOCSIFADDR
, &
i‰
);

1006 #i‡
HAVE_AFECONET


1007 
AF_ECONET
:

1008 
fd
 = 
	`gë_sockë_f‹_af
(
AF_ECONET
);

1009 i‡(
fd
 < 0) {

1010 
	`Ârötf
(
°dîr
, 
	`_
("No support for ECONET onÅhis system.\n"));

1011 
	`exô
(1);

1013 
r
 = 
	`io˘l
(
fd
, 
SIOCSIFADDR
, &
i‰
);

1017 
	`Ârötf
(
°dîr
,

1018 
	`_
("D⁄'àknow howÅÿ£àaddªs£†f‹ famûy %d.\n"), 
≠
->
af
);

1019 
	`exô
(1);

1021 i‡(
r
 < 0) {

1022 
	`≥º‹
("SIOCSIFADDR");

1023 
gŸîr
 = 1;

1035 *
±r
;

1036 
found_cﬁ⁄
 = 0;

1037 
±r
 = 
i‰
.
i‰_«me
; *ptr;Ötr++ )

1038 i‡(*
±r
 =':'Ë
found_cﬁ⁄
++;

1040 i‡(!(
found_cﬁ⁄
 && *(
±r
 - 1) == '-'))

1041 
gŸîr
 |
	`£t_Êag
(
i‰
.
i‰_«me
, (
IFF_UP
 | 
IFF_RUNNING
));

1044 
•p
++;

1047 i‡(
√ed√tmask
) {

1048 
gŸîr
 |
	`£t_√tmask
(
skfd
, &
i‰
, &
ßmask
);

1049 
did√tmask
++;

1052 i‡(
›t_v
 && 
gŸîr
)

1053 
	`Ârötf
(
°dîr
, 
	`_
("WARNING:áàÀa° o√Éº‹ occuªd. (%d)\n"), 
gŸîr
);

1055  (
gŸîr
);

1056 
	}
}

1058 
	sifcmd
 {

1059 
	mÊag
;

1060 
	maddr
;

1061 *
	mba£
;

1062 
	mba£Àn
;

1065 
	g£¨chî
[256];

1067 
	$£t_ù_usög
(c⁄° *
«me
, 
c
, 
ù
)

1069 
i‰eq
 
i‰
;

1070 
sockaddr_ö
 
sö
;

1072 
	`ß„_°∫˝y
(
i‰
.
i‰_«me
, 
«me
, 
IFNAMSIZ
);

1073 
	`mem£t
(&
sö
, 0, (
sockaddr
));

1074 
sö
.
sö_Ámûy
 = 
AF_INET
;

1075 
sö
.
sö_addr
.
s_addr
 = 
ù
;

1076 
	`mem˝y
(&
i‰
.
i‰_addr
, &
sö
, (
sockaddr
));

1077 i‡(
	`io˘l
(
skfd
, 
c
, &
i‰
) < 0)

1080 
	}
}

1082 
	$do_ifcmd
(
öãrÁ˚
 *
x
, 
ifcmd
 *
±r
)

1084 *
z
, *
e
;

1085 
sockaddr_ö
 *
sö
;

1086 
i
;

1088 i‡(
	`do_if_„tch
(
x
) < 0)

1090 i‡(
	`°∫cmp
(
x
->
«me
, 
±r
->
ba£
,Öå->
ba£Àn
) != 0)

1092 
z
 = 
	`°rchr
(
x
->
«me
, ':');

1093 i‡(!
z
 || !*z)

1095 
z
++;

1096 
e
 = 
z
; *e;É++)

1097 i‡(*
e
 == '-')

1099 
i
 = 
	`©oi
(
z
);

1100 i‡(
i
 < 0 || i > 255)

1101 
	`ab‹t
();

1102 
£¨chî
[
i
] = 1;

1105 
sö
 = (
sockaddr_ö
 *)&
x
->
d°addr
;

1106 i‡(
sö
->
sö_addr
.
s_addr
 !
±r
->
addr
) {

1110 i‡(
±r
->
Êag
) {

1112 i‡(
	`£t_Êag
(
x
->
«me
, 
IFF_UP
 | 
IFF_RUNNING
) == -1)

1116 i‡(
	`˛r_Êag
(
x
->
«me
, 
IFF_UP
) == -1)

1121 
	}
}

1124 
	$gë_nmbc_∑ª¡
(*
∑ª¡
,

1125 *
nm
, *
bc
)

1127 
öãrÁ˚
 *
i
;

1128 
sockaddr_ö
 *
sö
;

1130 
i
 = 
	`lookup_öãrÁ˚
(
∑ª¡
);

1131 i‡(!
i
)

1133 i‡(
	`do_if_„tch
(
i
) < 0)

1135 
sö
 = (
sockaddr_ö
 *)&
i
->
√tmask
;

1136 
	`mem˝y
(
nm
, &
sö
->
sö_addr
.
s_addr
, ());

1137 
sö
 = (
sockaddr_ö
 *)&
i
->
brﬂdaddr
;

1138 
	`mem˝y
(
bc
, &
sö
->
sö_addr
.
s_addr
, ());

1140 
	}
}

1142 
	$£t_if°©e
(*
∑ª¡
, 
ù
,

1143 
nm
, 
bc
,

1144 
Êag
)

1146 
buf
[
IFNAMSIZ
];

1147 
ifcmd
 
±
;

1148 
i
;

1150 
±
.
ba£
 = 
∑ª¡
;

1151 
±
.
ba£Àn
 = 
	`°æí
(
∑ª¡
);

1152 
±
.
addr
 = 
ù
;

1153 
±
.
Êag
 = flag;

1154 
	`mem£t
(
£¨chî
, 0, (searcher));

1155 
i
 = 
	`f‹_Æl_öãrÁ˚s
(((*)(
öãrÁ˚
 *,*))
do_ifcmd
,

1156 &
±
);

1157 i‡(
i
 == -1)

1159 i‡(
i
 == 1)

1163 
i
 = 0; i < 256; i++)

1164 i‡(
£¨chî
[
i
] == 0)

1167 i‡(
i
 == 256)

1170 i‡(
	`¢¥ötf
(
buf
, 
IFNAMSIZ
, "%s:%d", 
∑ª¡
, 
i
) > IFNAMSIZ)

1172 i‡(
	`£t_ù_usög
(
buf
, 
SIOCSIFADDR
, 
ù
) == -1)

1174 i‡(
	`£t_ù_usög
(
buf
, 
SIOCSIFNETMASK
, 
nm
) == -1)

1176 i‡(
	`£t_ù_usög
(
buf
, 
SIOCSIFBRDADDR
, 
bc
) == -1)

1178 i‡(
	`£t_Êag
(
buf
, 
IFF_BROADCAST
) == -1)

1181 
	}
}

	@interface/net-tools/include/interface.h

1 
	su£r_√t_devi˚_°©s
 {

2 
	mrx_∑ckës
;

3 
	mtx_∑ckës
;

4 
	mrx_byãs
;

5 
	mtx_byãs
;

6 
	mrx_îr‹s
;

7 
	mtx_îr‹s
;

8 
	mrx_dr›≥d
;

9 
	mtx_dr›≥d
;

10 
	mrx_mu…iˇ°
;

11 
	mrx_com¥es£d
;

12 
	mtx_com¥es£d
;

13 
	mcﬁlisi⁄s
;

16 
	mrx_Àngth_îr‹s
;

17 
	mrx_ovî_îr‹s
;

18 
	mrx_¸c_îr‹s
;

19 
	mrx_‰ame_îr‹s
;

20 
	mrx_fifo_îr‹s
;

21 
	mrx_mis£d_îr‹s
;

23 
	mtx_ab‹ãd_îr‹s
;

24 
	mtx_ˇºõr_îr‹s
;

25 
	mtx_fifo_îr‹s
;

26 
	mtx_hóπbót_îr‹s
;

27 
	mtx_wödow_îr‹s
;

30 
	söãrÁ˚
 {

31 
öãrÁ˚
 *
	m√xt
, *
	m¥ev
;

32 
	m«me
[
IFNAMSIZ
];

33 
	mty≥
;

34 
	mÊags
;

35 
	mmëric
;

36 
	mmtu
;

37 
	mtx_queue_Àn
;

38 
ifm≠
 
	mm≠
;

39 
sockaddr
 
	maddr
;

40 
sockaddr
 
	md°addr
;

41 
sockaddr
 
	mbrﬂdaddr
;

42 
sockaddr
 
	m√tmask
;

43 
sockaddr
 
	mùxaddr_bb
;

44 
sockaddr
 
	mùxaddr_¢
;

45 
sockaddr
 
	mùxaddr_e3
;

46 
sockaddr
 
	mùxaddr_e2
;

47 
sockaddr
 
	mdd∑ddr
;

48 
sockaddr
 
	meˇddr
;

49 
	mhas_ù
;

50 
	mhas_ùx_bb
;

51 
	mhas_ùx_¢
;

52 
	mhas_ùx_e3
;

53 
	mhas_ùx_e2
;

54 
	mhas_ax25
;

55 
	mhas_ddp
;

56 
	mhas_ec⁄ë
;

57 
	mhwaddr
[32];

58 
	m°©i°ics_vÆid
;

59 
u£r_√t_devi˚_°©s
 
	m°©s
;

60 
	mkì∑live
;

61 
	moutfûl
;

64 
if_„tch
(
öãrÁ˚
 *
i„
);

66 
f‹_Æl_öãrÁ˚s
((*)(
öãrÁ˚
 *, *), *);

67 
	`if_ˇche_‰ì
();

68 
öãrÁ˚
 *
	`lookup_öãrÁ˚
(*
«me
);

69 
	`if_ªadli°
();

71 
	`do_if_„tch
(
öãrÁ˚
 *
i„
);

72 
	`do_if_¥öt
(
öãrÁ˚
 *
i„
, *
cookõ
);

74 
	`¥o˙ëdev_vîsi⁄
(*
buf
);

75 
	`gë_dev_fõlds
(*
bp
, 
öãrÁ˚
 *
i„
);

76 * 
	`gë_«me
(*
«me
, *
p
);

78 
	`i„_¥öt
(
öãrÁ˚
 *
±r
);

80 
i„_sh‹t
;

82 c⁄° *
if_p‹t_ãxt
[][4];

85 #i‡!
	`deföed
(
SIOCSIFTXQLEN
)

86 
	#SIOCSIFTXQLEN
 0x8943

	)

87 
	#SIOCGIFTXQLEN
 0x8942

	)

90 #i‡!
	`deföed
(
i‰_qÀn
)

92 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_mtu


	)

95 
	#HAVE_TXQUEUELEN


	)

97 
	#HAVE_DYNAMIC


	)

98 #i‚de‡
IFF_DYNAMIC


99 
	#IFF_DYNAMIC
 0x8000

	)

	@interface/net-tools/include/ipx.h

4 #i‚de‡
_IPX_H_


5 
	#_IPX_H_


	)

7 
	#IPX_NODE_LEN
 6

	)

8 
	#IPX_MTU
 576

	)

10 
	ssockaddr_ùx
 {

11 #i‡
LINUX_VERSION_CODE
 > 131328

12 
ß_Ámûy_t
 
	msùx_Ámûy
;

14 
	msùx_Ámûy
;

16 
	msùx_p‹t
;

17 
	msùx_√tw‹k
;

18 
	msùx_node
[
IPX_NODE_LEN
];

19 
	msùx_ty≥
;

20 
	msùx_zîo
;

23 
	#IPX_FRAME_NONE
 0

	)

24 
	#IPX_FRAME_SNAP
 1

	)

25 
	#IPX_FRAME_8022
 2

	)

26 
	#IPX_FRAME_ETHERII
 3

	)

27 
	#IPX_FRAME_8023
 4

	)

28 
	#IPX_FRAME_TR_8022
 5

	)

	@interface/net-tools/include/mii.h

9 #i‚de‡
_NETTOOL_MII_H


10 
	#_NETTOOLS_MII_H


	)

12 
	~<löux/sockios.h
>

15 #i‚de‡
SIOCGMIIPHY


17 
	#SIOCGMIIPHY
 (
SIOCDEVPRIVATE
Ë

	)

18 
	#SIOCGMIIREG
 (
SIOCDEVPRIVATE
+1Ë

	)

19 
	#SIOCSMIIREG
 (
SIOCDEVPRIVATE
+2Ë

	)

20 
	#SIOCGPARAMS
 (
SIOCDEVPRIVATE
+3Ë

	)

21 
	#SIOCSPARAMS
 (
SIOCDEVPRIVATE
+4Ë

	)

24 
	~<löux/ty≥s.h
>

27 
	smii_d©a
 {

28 
__u16
 
	mphy_id
;

29 
__u16
 
	mªg_num
;

30 
__u16
 
	mvÆ_ö
;

31 
__u16
 
	mvÆ_out
;

35 
	#MII_BMCR
 0x00

	)

36 
	#MII_BMCR_RESET
 0x8000

	)

37 
	#MII_BMCR_LOOPBACK
 0x4000

	)

38 
	#MII_BMCR_100MBIT
 0x2000

	)

39 
	#MII_BMCR_AN_ENA
 0x1000

	)

40 
	#MII_BMCR_ISOLATE
 0x0400

	)

41 
	#MII_BMCR_RESTART
 0x0200

	)

42 
	#MII_BMCR_DUPLEX
 0x0100

	)

43 
	#MII_BMCR_COLTEST
 0x0080

	)

44 
	#MII_BMCR_SPEED1000
 0x0040

	)

47 
	#MII_BMSR
 0x01

	)

48 
	#MII_BMSR_CAP_MASK
 0xf800

	)

49 
	#MII_BMSR_100BASET4
 0x8000

	)

50 
	#MII_BMSR_100BASETX_FD
 0x4000

	)

51 
	#MII_BMSR_100BASETX_HD
 0x2000

	)

52 
	#MII_BMSR_10BASET_FD
 0x1000

	)

53 
	#MII_BMSR_10BASET_HD
 0x0800

	)

54 
	#MII_BMSR_NO_PREAMBLE
 0x0040

	)

55 
	#MII_BMSR_AN_COMPLETE
 0x0020

	)

56 
	#MII_BMSR_REMOTE_FAULT
 0x0010

	)

57 
	#MII_BMSR_AN_ABLE
 0x0008

	)

58 
	#MII_BMSR_LINK_VALID
 0x0004

	)

59 
	#MII_BMSR_JABBER
 0x0002

	)

60 
	#MII_BMSR_EXT_CAP
 0x0001

	)

62 
	#MII_PHY_ID1
 0x02

	)

63 
	#MII_PHY_ID2
 0x03

	)

66 
	#MII_ANAR
 0x04

	)

68 
	#MII_ANLPAR
 0x05

	)

69 
	#MII_AN_NEXT_PAGE
 0x8000

	)

70 
	#MII_AN_ACK
 0x4000

	)

71 
	#MII_AN_REMOTE_FAULT
 0x2000

	)

72 
	#MII_AN_ABILITY_MASK
 0x07e0

	)

73 
	#MII_AN_FLOW_CONTROL
 0x0400

	)

74 
	#MII_AN_100BASET4
 0x0200

	)

75 
	#MII_AN_100BASETX_FD
 0x0100

	)

76 
	#MII_AN_100BASETX_HD
 0x0080

	)

77 
	#MII_AN_10BASET_FD
 0x0040

	)

78 
	#MII_AN_10BASET_HD
 0x0020

	)

79 
	#MII_AN_PROT_MASK
 0x001f

	)

80 
	#MII_AN_PROT_802_3
 0x0001

	)

83 
	#MII_ANER
 0x06

	)

84 
	#MII_ANER_MULT_FAULT
 0x0010

	)

85 
	#MII_ANER_LP_NP_ABLE
 0x0008

	)

86 
	#MII_ANER_NP_ABLE
 0x0004

	)

87 
	#MII_ANER_PAGE_RX
 0x0002

	)

88 
	#MII_ANER_LP_AN_ABLE
 0x0001

	)

90 
	#MII_CTRL1000
 0x09

	)

91 
	#MII_BMCR2_1000FULL
 0x0200

	)

92 
	#MII_BMCR2_1000HALF
 0x0100

	)

94 
	#MII_STAT1000
 0x0a

	)

95 
	#MII_LPA2_1000LOCALOK
 0x2000

	)

96 
	#MII_LPA2_1000REMRXOK
 0x1000

	)

97 
	#MII_LPA2_1000FULL
 0x0800

	)

98 
	#MII_LPA2_1000HALF
 0x0400

	)

101 
	#MII_BASIC_MAX
 (
MII_STAT1000
+1)

	)

	@interface/net-tools/include/sockets.h

1 
skfd
, 
ùx_sock
, 
ax25_sock
, 
ro£_sock
, 
x25_sock
, 
öë_sock
, 
öë6_sock
,

2 
ddp_sock
, 
ec_sock
;

4 
sockës_›í
(
Ámûy
);

	@interface/net-tools/include/util-ank.h

1 #i‚de‡
__UTILS_H__


2 
	#__UTILS_H__
 1

	)

4 
	~<asm/ty≥s.h
>

6 
¥e„ºed_Ámûy
;

7 
show_°©s
;

8 
show_dëaûs
;

9 
show_øw
;

10 
ªsﬁve_ho°s
;

12 #i‚de‡
IPPROTO_ESP


13 
	#IPPROTO_ESP
 50

	)

15 #i‚de‡
IPPROTO_AH


16 
	#IPPROTO_AH
 51

	)

19 
	#SPRINT_BSIZE
 64

	)

20 
	#SPRINT_BUF
(
x
Ëx[
SPRINT_BSIZE
]

	)

23 
	#NEXT_ARG
() \

24 
¨gv
++; \

25 i‡(--
¨gc
 <= 0) \

26 
	`ußge
();

	)

30 
__u8
 
	mÁmûy
;

31 
__u8
 
	mbyãÀn
;

32 
__s16
 
	mbôÀn
;

33 
__u32
 
	md©a
[4];

34 } 
	töë_¥efix
;

36 
__u32
 
gë_addr32
(*
«me
);

37 
gë_addr_1
(
öë_¥efix
 *
d°
, *
¨g
, 
Ámûy
);

38 
gë_¥efix_1
(
öë_¥efix
 *
d°
, *
¨g
, 
Ámûy
);

39 
gë_addr
(
öë_¥efix
 *
d°
, *
¨g
, 
Ámûy
);

40 
gë_¥efix
(
öë_¥efix
 *
d°
, *
¨g
, 
Ámûy
);

42 
sˇn_numbî
(*
¨g
, *
vÆ
);

44 
gë_öãgî
(*
vÆ
, *
¨g
, 
ba£
);

45 
gë_unsig√d
(*
vÆ
, *
¨g
, 
ba£
);

46 
	#gë_byã
 
gë_u8


	)

47 
	#gë_ush‹t
 
gë_u16


	)

48 
	#gë_sh‹t
 
gë_s16


	)

49 
gë_u32
(
__u32
 *
vÆ
, *
¨g
, 
ba£
);

50 
gë_u16
(
__u16
 *
vÆ
, *
¨g
, 
ba£
);

51 
gë_s16
(
__s16
 *
vÆ
, *
¨g
, 
ba£
);

52 
gë_u8
(
__u8
 *
vÆ
, *
¨g
, 
ba£
);

53 
gë_s8
(
__s8
 *
vÆ
, *
¨g
, 
ba£
);

55 
gë_tc_˛assid
(
__u32
 *
h
, *
°r
);

56 
¥öt_tc_˛assid
(*
buf
, 
Àn
, 
__u32
 
h
);

57 * 
•röt_tc_˛assid
(
__u32
 
h
, *
buf
);

60 
	$öv¨g
(*Ë
	`__©åibuã__
((
n‹ëu∫
));

61 
	`m©ches
(*
¨g
, *
∑âîn
);

62 
	`öë_addr_m©ch
(
öë_¥efix
 *
a
, i√t_¥efix *
b
, 
bôs
);

64 
	`ùaddr_li°
(
¨gc
, **
¨gv
);

65 
	`ùrouã_m⁄ô‹
(
¨gc
, **
¨gv
);

66 
	`do_ùaddr
(
¨gc
, **
¨gv
);

67 
	`do_ùrouã
(
¨gc
, **
¨gv
);

68 
	`do_ùruÀ
(
¨gc
, **
¨gv
);

69 
	`do_ù√igh
(
¨gc
, **
¨gv
);

70 
	`do_ùtu¬ñ
(
¨gc
, **
¨gv
);

71 
	`do_ùlök
(
¨gc
, **
¨gv
);

72 
	`do_ùm⁄ô‹
(
¨gc
, **
¨gv
);

73 
	`do_mu…üddr
(
¨gc
, **
¨gv
);

74 
	`do_qdisc
(
¨gc
, **
¨gv
);

75 
	`do_˛ass
(
¨gc
, **
¨gv
);

76 
	`do_fûãr
(
¨gc
, **
¨gv
);

78 c⁄° *
	`f‹m©_ho°
(
af
, *
addr
, *
abuf
, 
Æí
);

	@interface/net-tools/intl.h

3 #i‡
I18N


4 
	~<loˇÀ.h
>

5 #unde‡
__OPTIMIZE__


6 
	~<liböé.h
>

7 
	#_
(
Såög
Ë
	`gëãxt
((Såög))

	)

8 
	#N_
(
Såög
Ë(Såög)

	)

10 
	#_
(
Såög
Ë(Såög)

	)

11 
	#N_
(
Såög
Ë(Såög)

	)

	@interface/net-tools/ipmaddr.c

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<uni°d.h
>

19 
	~<sy¶og.h
>

20 
	~<f˙é.h
>

21 
	~<sys/io˘l.h
>

22 
	~<sys/sockë.h
>

23 
	~<√töë/ö.h
>

24 
	~<¨∑/öë.h
>

25 
	~<°rög.h
>

27 #i‡
deföed
(
__GLIBC__
Ë&& (__GLIBC__ > 2 || (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >= 1))

28 
	~<√t/if.h
>

30 
	~<löux/if.h
>

33 
	~"c⁄fig.h
"

34 
	~"öé.h
"

35 
	~"utû-™k.h
"

36 
	~"√t-suµ‹t.h
"

37 
	~"vîsi⁄.h
"

38 
	~"∑th«mes.h
"

40 
	gfûãr_dev
[16];

41 
	gfûãr_Ámûy
;

44 
	#NEWADDR
 1

	)

45 
	#DELADDR
 2

	)

47 *
	gRñó£
 = 
RELEASE
,

48 *
	gVîsi⁄
 = "ipmaddr 1.1",

49 *
	gSig«tuª
 = "Alexey Kuznetsov, <kuznet@ms2.inr.ac.ru>";

51 
	$vîsi⁄
()

53 
	`¥ötf
("%s\n%s\n%s\n", 
Rñó£
, 
Vîsi⁄
, 
Sig«tuª
);

54 
	`exô
(
E_VERSION
);

55 
	}
}

57 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

59 
	$ußge
()

61 
	`Ârötf
(
°dîr
, 
	`_
("Usage: ipmaddr [ádd | del ] MULTIADDR dev STRING\n"));

62 
	`Ârötf
(
°dîr
, 
	`_
(" ipmaddr show [ dev STRING ] [ ipv4 | ipv6 |Üink |áll ]\n"));

63 
	`Ârötf
(
°dîr
, 
	`_
(" ipmaddr -V | -version\n"));

64 
	`exô
(-1);

65 
	}
}

67 
	$¥öt_Œa
(
FILE
 *
Â
, 
Àn
, *
addr
)

69 
i
;

70 
i
=0; i<
Àn
; i++) {

71 i‡(
i
==0)

72 
	`Ârötf
(
Â
, "%02x", 
addr
[
i
]);

74 
	`Ârötf
(
Â
, ":%02x", 
addr
[
i
]);

76 
	}
}

78 
	$∑r£_Œa
(*
°r
, *
addr
)

80 
Àn
=0;

82 *
°r
) {

83 
tmp
;

84 i‡(
°r
[0] == ':' || str[0] == '.') {

85 
°r
++;

88 i‡(
°r
[1] == 0)

90 i‡(
	`ssˇnf
(
°r
, "%02x", &
tmp
) != 1)

92 
addr
[
Àn
] = 
tmp
;

93 
Àn
++;

94 
°r
 += 2;

96  
Àn
;

97 
	}
}

99 
	$∑r£_hex
(*
°r
, *
addr
)

101 
Àn
=0;

103 *
°r
) {

104 
tmp
;

105 i‡(
°r
[1] == 0)

107 i‡(
	`ssˇnf
(
°r
, "%02x", &
tmp
) != 1)

109 
addr
[
Àn
] = 
tmp
;

110 
Àn
++;

111 
°r
 += 2;

113  
Àn
;

114 
	}
}

116 
	sma_öfo


118 
ma_öfo
 *
	m√xt
;

119 
	mödex
;

120 
	mu£rs
;

121 *
	m„©uªs
;

122 
	m«me
[
IFNAMSIZ
];

123 
öë_¥efix
 
	maddr
;

126 
	$maddr_ös
(
ma_öfo
 **
l°
, ma_öfÿ*
m
)

128 
ma_öfo
 *
mp
;

130 ; (
mp
=*
l°
Ë!
NULL
;Ü° = &mp->
√xt
) {

131 i‡(
mp
->
ödex
 > 
m
->index)

134 
m
->
√xt
 = *
l°
;

135 *
l°
 = 
m
;

136 
	}
}

138 
	$ªad_dev_mˇ°
(
ma_öfo
 **
ªsu…_p
)

140 
buf
[256];

141 
FILE
 *
Â
 = 
	`f›í
(
_PATH_PROCNET_DEV_MCAST
, "r");

143 i‡(!
Â
)

146 
	`fgës
(
buf
, (buf), 
Â
)) {

147 
hexa
[256];

148 
ma_öfo
 
m
;

149 
Àn
;

150 
°
;

152 
	`mem£t
(&
m
, 0, (m));

153 
	`ssˇnf
(
buf
, "%d%s%d%d%s", &
m
.
ödex
, m.
«me
, &m.
u£rs
, &
°
,

154 
hexa
);

155 i‡(
fûãr_dev
[0] && 
	`°rcmp
(fûãr_dev, 
m
.
«me
))

158 
m
.
addr
.
Ámûy
 = 
AF_PACKET
;

160 
Àn
 = 
	`∑r£_hex
(
hexa
, (*)&
m
.
addr
.
d©a
);

161 i‡(
Àn
 >= 0) {

162 
ma_öfo
 *
ma
 = 
	`mÆloc
((
m
));

164 
	`mem˝y
(
ma
, &
m
, (m));

165 
ma
->
addr
.
byãÀn
 = 
Àn
;

166 
ma
->
addr
.
bôÀn
 = 
Àn
<<3;

167 i‡(
°
)

168 
ma
->
„©uªs
 = "static";

169 
	`maddr_ös
(
ªsu…_p
, 
ma
);

172 
	`f˛o£
(
Â
);

173 
	}
}

175 
	$ªad_igmp
(
ma_öfo
 **
ªsu…_p
)

177 
ma_öfo
 
m
;

178 
buf
[256];

179 
FILE
 *
Â
 = 
	`f›í
(
_PATH_PROCNET_IGMP
, "r");

181 i‡(!
Â
)

183 
	`mem£t
(&
m
, 0, (m));

184 
	`fgës
(
buf
, (buf), 
Â
);

186 
m
.
addr
.
Ámûy
 = 
AF_INET
;

187 
m
.
addr
.
bôÀn
 = 32;

188 
m
.
addr
.
byãÀn
 = 4;

190 
	`fgës
(
buf
, (buf), 
Â
)) {

191 
ma_öfo
 *
ma
 = 
	`mÆloc
((
m
));

193 i‡(
buf
[0] != '\t') {

194 
	`ssˇnf
(
buf
, "%d%s", &
m
.
ödex
, m.
«me
);

198 i‡(
fûãr_dev
[0] && 
	`°rcmp
(fûãr_dev, 
m
.
«me
))

201 
	`ssˇnf
(
buf
, "%08x%d", (
__u32
*)&
m
.
addr
.
d©a
, &m.
u£rs
);

203 
ma
 = 
	`mÆloc
((
m
));

204 
	`mem˝y
(
ma
, &
m
, (m));

205 
	`maddr_ös
(
ªsu…_p
, 
ma
);

207 
	`f˛o£
(
Â
);

208 
	}
}

211 
	$ªad_igmp6
(
ma_öfo
 **
ªsu…_p
)

213 
buf
[256];

214 
FILE
 *
Â
 = 
	`f›í
(
_PATH_PROCNET_IGMP6
, "r");

216 i‡(!
Â
)

219 
	`fgës
(
buf
, (buf), 
Â
)) {

220 
hexa
[256];

221 
ma_öfo
 
m
;

222 
Àn
;

224 
	`mem£t
(&
m
, 0, (m));

225 
	`ssˇnf
(
buf
, "%d%s%s%d", &
m
.
ödex
, m.
«me
, 
hexa
, &m.
u£rs
);

227 i‡(
fûãr_dev
[0] && 
	`°rcmp
(fûãr_dev, 
m
.
«me
))

230 
m
.
addr
.
Ámûy
 = 
AF_INET6
;

232 
Àn
 = 
	`∑r£_hex
(
hexa
, (*)&
m
.
addr
.
d©a
);

233 i‡(
Àn
 >= 0) {

234 
ma_öfo
 *
ma
 = 
	`mÆloc
((
m
));

236 
	`mem˝y
(
ma
, &
m
, (m));

238 
ma
->
addr
.
byãÀn
 = 
Àn
;

239 
ma
->
addr
.
bôÀn
 = 
Àn
<<3;

240 
	`maddr_ös
(
ªsu…_p
, 
ma
);

243 
	`f˛o£
(
Â
);

244 
	}
}

246 
	$¥öt_maddr
(
FILE
 *
Â
, 
ma_öfo
 *
li°
)

248 
	`Ârötf
(
Â
, "\t");

250 i‡(
li°
->
addr
.
Ámûy
 =
AF_PACKET
) {

251 
	`Ârötf
(
Â
, "link ");

252 
	`¥öt_Œa
(
Â
, 
li°
->
addr
.
byãÀn
, (*Ói°->addr.
d©a
);

254 
abuf
[256];

255 
li°
->
addr
.
Ámûy
) {

256 
AF_INET
:

257 
	`Ârötf
(
Â
, "inet ");

259 
AF_INET6
:

260 
	`Ârötf
(
Â
, "inet6 ");

263 
	`Ârötf
(
Â
, 
	`_
("Ámûy %d "), 
li°
->
addr
.
Ámûy
);

266 i‡(
	`f‹m©_ho°
(
li°
->
addr
.
Ámûy
,Üi°->addr.
d©a
, 
abuf
, (abuf)))

267 
	`Ârötf
(
Â
, "%s", 
abuf
);

269 
	`Ârötf
(
Â
, "?");

271 i‡(
li°
->
u£rs
 != 1)

272 
	`Ârötf
(
Â
, 
	`_
(" u£r†%d"), 
li°
->
u£rs
);

273 i‡(
li°
->
„©uªs
)

274 
	`Ârötf
(
Â
, " %s", 
li°
->
„©uªs
);

275 
	`Ârötf
(
Â
, "\n");

276 
	}
}

278 
	$¥öt_mli°
(
FILE
 *
Â
, 
ma_öfo
 *
li°
)

280 
cur_ödex
 = 0;

282 ; 
li°
;Üi° =Üi°->
√xt
) {

283 i‡(
cur_ödex
 !
li°
->
ödex
) {

284 
cur_ödex
 = 
li°
->
ödex
;

285 
	`Ârötf
(
Â
, "%d:\t%s\n", 
cur_ödex
, 
li°
->
«me
);

287 
	`¥öt_maddr
(
Â
, 
li°
);

289 
	}
}

291 
	$mu…üddr_li°
(
¨gc
, **
¨gv
)

293 
ma_öfo
 *
li°
 = 
NULL
;

294 
size_t
 
l
;

296 
¨gc
 > 0) {

297 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

298 
	`NEXT_ARG
();

299 
l
 = 
	`°æí
(*
¨gv
);

300 i‡(
l
 <0 ||Ü >(
fûãr_dev
))

301 
	`ußge
();

302 
	`°∫˝y
(
fûãr_dev
, *
¨gv
,  (filter_dev));

303 } i‡(
	`°rcmp
(*
¨gv
, "all") == 0) {

304 
fûãr_Ámûy
 = 
AF_UNSPEC
;

305 } i‡(
	`°rcmp
(*
¨gv
, "ipv4") == 0) {

306 
fûãr_Ámûy
 = 
AF_INET
;

307 } i‡(
	`°rcmp
(*
¨gv
, "ipv6") == 0) {

308 
fûãr_Ámûy
 = 
AF_INET6
;

309 } i‡(
	`°rcmp
(*
¨gv
, "link") == 0) {

310 
fûãr_Ámûy
 = 
AF_PACKET
;

312 
l
 = 
	`°æí
(*
¨gv
);

313 i‡(
l
 <0 ||Ü >(
fûãr_dev
))

314 
	`ußge
();

315 
	`°∫˝y
(
fûãr_dev
, *
¨gv
,  (filter_dev));

317 
¨gv
++; 
¨gc
--;

320 i‡(!
fûãr_Ámûy
 || fûãr_Ámûy =
AF_PACKET
)

321 
	`ªad_dev_mˇ°
(&
li°
);

322 i‡(!
fûãr_Ámûy
 || fûãr_Ámûy =
AF_INET
)

323 
	`ªad_igmp
(&
li°
);

324 i‡(!
fûãr_Ámûy
 || fûãr_Ámûy =
AF_INET6
)

325 
	`ªad_igmp6
(&
li°
);

326 
	`¥öt_mli°
(
°dout
, 
li°
);

328 
	}
}

330 
	$mu…üddr_modify
(
cmd
, 
¨gc
, **
¨gv
)

332 
i‰eq
 
i‰
;

333 
fd
;

335 
	`mem£t
(&
i‰
, 0, (ifr));

337 i‡(
cmd
 =
NEWADDR
)

338 
cmd
 = 
SIOCADDMULTI
;

340 
cmd
 = 
SIOCDELMULTI
;

342 
¨gc
 > 0) {

343 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

344 
	`NEXT_ARG
();

345 i‡(
i‰
.
i‰_«me
[0])

346 
	`ußge
();

347 
	`°∫˝y
(
i‰
.
i‰_«me
, *
¨gv
, 
IFNAMSIZ
);

349 i‡(
i‰
.
i‰_hwaddr
.
ß_d©a
[0])

350 
	`ußge
();

351 i‡(
	`∑r£_Œa
(*
¨gv
, 
i‰
.
i‰_hwaddr
.
ß_d©a
) < 0)

352 
	`ußge
();

354 
¨gc
--; 
¨gv
++;

356 i‡(
i‰
.
i‰_«me
[0] == 0)

357 
	`ußge
();

359 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

360 i‡(
fd
 < 0) {

361 
	`≥º‹
(
	`_
("Cannot create socket"));

362 
	`exô
(1);

364 i‡(
	`io˘l
(
fd
, 
cmd
, (*)&
i‰
) != 0) {

365 
	`≥º‹
("ioctl");

366 
	`exô
(1);

368 
	`˛o£
(
fd
);

370 
	`exô
(0);

371 
	}
}

374 
	$do_mu…üddr
(
¨gc
, **
¨gv
)

376 i‡(
¨gc
 < 1)

377  
	`mu…üddr_li°
(0, 
NULL
);

378 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

379  
	`mu…üddr_modify
(
NEWADDR
, 
¨gc
-1, 
¨gv
+1);

380 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

381  
	`mu…üddr_modify
(
DELADDR
, 
¨gc
-1, 
¨gv
+1);

382 i‡(
	`m©ches
(*
¨gv
, "list") == 0 || matches(*argv, "show") == 0

383 || 
	`m©ches
(*
¨gv
, "lst") == 0)

384  
	`mu…üddr_li°
(
¨gc
-1, 
¨gv
+1);

385 
	`ußge
();

386 
	}
}

388 
	g¥e„ºed_Ámûy
 = 
AF_UNSPEC
;

389 
	gshow_°©s
 = 0;

390 
	gªsﬁve_ho°s
 = 0;

392 
	$maö
(
¨gc
, **
¨gv
)

394 *
ba£«me
;

396 #i‡
I18N


397 
	`£éoˇÀ
 (
LC_ALL
, "");

398 
	`bödãxtdomaö
("net-tools", "/usr/share/locale");

399 
	`ãxtdomaö
("net-tools");

402 
ba£«me
 = 
	`°ºchr
(
¨gv
[0], '/');

403 i‡(
ba£«me
 =
NULL
)

404 
ba£«me
 = 
¨gv
[0];

406 
ba£«me
++;

408 
¨gc
 > 1) {

409 i‡(
¨gv
[1][0] != '-')

411 i‡(
	`m©ches
(
¨gv
[1], "-family") == 0) {

412 
¨gc
--;

413 
¨gv
++;

414 i‡(
¨gc
 <= 1)

415 
	`ußge
();

416 i‡(
	`°rcmp
(
¨gv
[1], "inet") == 0)

417 
¥e„ºed_Ámûy
 = 
AF_INET
;

418 i‡(
	`°rcmp
(
¨gv
[1], "inet6") == 0)

419 
¥e„ºed_Ámûy
 = 
AF_INET6
;

421 
	`ußge
();

422 } i‡(
	`m©ches
(
¨gv
[1], "-stats") == 0 ||

423 
	`m©ches
(
¨gv
[1], "-statistics") == 0) {

424 ++
show_°©s
;

425 } i‡(
	`m©ches
(
¨gv
[1], "-resolve") == 0) {

426 ++
ªsﬁve_ho°s
;

427 } i‡((
	`m©ches
(
¨gv
[1], "-V") == 0) || matches(argv[1], "--version") == 0) {

428 
	`vîsi⁄
();

430 
	`ußge
();

431 
¨gc
--; 
¨gv
++;

434  
	`do_mu…üddr
(
¨gc
-1, 
¨gv
+1);

435 
	}
}

	@interface/net-tools/iptunnel.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<uni°d.h
>

24 
	~<sy¶og.h
>

25 
	~<f˙é.h
>

26 
	~<sys/sockë.h
>

27 
	~<sys/io˘l.h
>

28 
	~<√töë/ö.h
>

29 
	~<√töë/ù.h
>

30 
	~<¨∑/öë.h
>

31 #i‡
deföed
(
__GLIBC__
Ë&& (__GLIBC__ > 2 || (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >= 1))

32 
	~<√t/if.h
>

33 
	~<√t/if_¨p.h
>

35 
	~<löux/if.h
>

36 
	~<löux/if_¨p.h
>

38 
	~<löux/ty≥s.h
>

39 
	~<löux/if_tu¬ñ.h
>

41 
	~"c⁄fig.h
"

42 
	~"öé.h
"

43 
	~"√t-suµ‹t.h
"

44 
	~"vîsi⁄.h
"

45 
	~"utû.h
"

47 #unde‡
GRE_CSUM


48 
	#GRE_CSUM
 
	`ht⁄s
(0x8000)

	)

49 #unde‡
GRE_ROUTING


50 
	#GRE_ROUTING
 
	`ht⁄s
(0x4000)

	)

51 #unde‡
GRE_KEY


52 
	#GRE_KEY
 
	`ht⁄s
(0x2000)

	)

53 #unde‡
GRE_SEQ


54 
	#GRE_SEQ
 
	`ht⁄s
(0x1000)

	)

55 #unde‡
GRE_STRICT


56 
	#GRE_STRICT
 
	`ht⁄s
(0x0800)

	)

57 #unde‡
GRE_REC


58 
	#GRE_REC
 
	`ht⁄s
(0x0700)

	)

59 #unde‡
GRE_FLAGS


60 
	#GRE_FLAGS
 
	`ht⁄s
(0x00F8)

	)

61 #unde‡
GRE_VERSION


62 
	#GRE_VERSION
 
	`ht⁄s
(0x0007)

	)

65 #i‡
__GLIBC__
 =2 && 
__GLIBC_MINOR__
 == 0

66 
	#IPPROTO_GRE
 47

	)

69 
	~"utû-™k.h
"

71 *
	gRñó£
 = 
RELEASE
,

72 *
	gVîsi⁄
 = "iptunnel 1.01",

73 *
	gSig«tuª
 = "Alexey Kuznetsov, <kuznet@ms2.inr.ac.ru>";

75 
	$vîsi⁄
()

77 
	`¥ötf
("%s\n%s\n%s\n", 
Rñó£
, 
Vîsi⁄
, 
Sig«tuª
);

78 
	`exô
(
E_VERSION
);

79 
	}
}

81 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

83 
	$ußge
()

85 
	`Ârötf
(
°dîr
, 
	`_
("Usage: iptunnel {ádd | change | del | show } [ NAME ]\n"));

86 
	`Ârötf
(
°dîr
, 
	`_
(" [ mode { ipip | gre | sit } ] [Ñemote ADDR ] [Üocal ADDR ]\n"));

87 
	`Ârötf
(
°dîr
, 
	`_
(" [ [i|o]seq ] [ [i|o]key KEY ] [ [i|o]csum ]\n"));

88 
	`Ârötf
(
°dîr
, 
	`_
(" [Åtl TTL ] [Åos TOS ] [Çopmtudisc ] [ dev PHYS_DEV ]\n"));

89 
	`Ârötf
(
°dîr
, 
	`_
(" iptunnel -V | --version\n\n"));

90 
	`Ârötf
(
°dîr
, 
	`_
("Where: NAME := STRING\n"));

91 
	`Ârötf
(
°dîr
, 
	`_
(" ADDR := { IP_ADDRESS |ány }\n"));

92 
	`Ârötf
(
°dîr
, 
	`_
(" TOS := { NUMBER | inherit }\n"));

93 
	`Ârötf
(
°dîr
, 
	`_
(" TTL := { 1..255 | inherit }\n"));

94 
	`Ârötf
(
°dîr
, 
	`_
(" KEY := { DOTTED_QUAD | NUMBER }\n"));

95 
	`exô
(-1);

96 
	}
}

98 
	$do_io˘l_gë_ifödex
(*
dev
)

100 
i‰eq
 
i‰
;

101 
fd
;

102 
îr
;

104 
	`°r˝y
(
i‰
.
i‰_«me
, 
dev
);

105 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

106 
îr
 = 
	`io˘l
(
fd
, 
SIOCGIFINDEX
, &
i‰
);

107 i‡(
îr
) {

108 
	`≥º‹
("ioctl");

111 
	`˛o£
(
fd
);

112  
i‰
.
i‰_ifödex
;

113 
	}
}

115 
	$do_io˘l_gë_i·y≥
(*
dev
)

117 
i‰eq
 
i‰
;

118 
fd
;

119 
îr
;

121 
	`°r˝y
(
i‰
.
i‰_«me
, 
dev
);

122 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

123 
îr
 = 
	`io˘l
(
fd
, 
SIOCGIFHWADDR
, &
i‰
);

124 i‡(
îr
) {

125 
	`≥º‹
("ioctl");

128 
	`˛o£
(
fd
);

129  
i‰
.
i‰_addr
.
ß_Ámûy
;

130 
	}
}

133 * 
	$do_io˘l_gë_i‚ame
(
idx
)

135 
i‰eq
 
i‰
;

136 
fd
;

137 
îr
;

139 
i‰
.
i‰_ifödex
 = 
idx
;

140 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

141 
îr
 = 
	`io˘l
(
fd
, 
SIOCGIFNAME
, &
i‰
);

142 i‡(
îr
) {

143 
	`≥º‹
("ioctl");

144  
NULL
;

146 
	`˛o£
(
fd
);

147  
i‰
.
i‰_«me
;

148 
	}
}

152 
	$do_gë_io˘l
(*
ba£dev
, 
ù_tu¬ñ_∑rm
 *
p
)

154 
i‰eq
 
i‰
;

155 
fd
;

156 
îr
;

158 
	`°r˝y
(
i‰
.
i‰_«me
, 
ba£dev
);

159 
i‰
.
i‰_i‰u
.
i‰u_d©a
 = (*)
p
;

160 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

161 
îr
 = 
	`io˘l
(
fd
, 
SIOCGETTUNNEL
, &
i‰
);

162 i‡(
îr
)

163 
	`≥º‹
("ioctl");

164 
	`˛o£
(
fd
);

165  
îr
;

166 
	}
}

168 
	$do_add_io˘l
(
cmd
, *
ba£dev
, 
ù_tu¬ñ_∑rm
 *
p
)

170 
i‰eq
 
i‰
;

171 
fd
;

172 
îr
;

174 
	`°r˝y
(
i‰
.
i‰_«me
, 
ba£dev
);

175 
i‰
.
i‰_i‰u
.
i‰u_d©a
 = (*)
p
;

176 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

177 
îr
 = 
	`io˘l
(
fd
, 
cmd
, &
i‰
);

178 i‡(
îr
)

179 
	`≥º‹
("ioctl");

180 
	`˛o£
(
fd
);

181  
îr
;

182 
	}
}

184 
	$do_dñ_io˘l
(*
ba£dev
, 
ù_tu¬ñ_∑rm
 *
p
)

186 
i‰eq
 
i‰
;

187 
fd
;

188 
îr
;

190 
	`°r˝y
(
i‰
.
i‰_«me
, 
ba£dev
);

191 
i‰
.
i‰_i‰u
.
i‰u_d©a
 = (*)
p
;

192 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

193 
îr
 = 
	`io˘l
(
fd
, 
SIOCDELTUNNEL
, &
i‰
);

194 i‡(
îr
)

195 
	`≥º‹
("ioctl");

196 
	`˛o£
(
fd
);

197  
îr
;

198 
	}
}

200 
	$∑r£_¨gs
(
¨gc
, **
¨gv
, 
ù_tu¬ñ_∑rm
 *
p
)

202 
medium
[
IFNAMSIZ
];

204 
	`mem£t
(
p
, 0, (*p));

205 
	`mem£t
(&
medium
, 0, (medium));

207 
p
->
ùh
.
vîsi⁄
 = 4;

208 
p
->
ùh
.
ihl
 = 5;

209 #i‚de‡
IP_DF


210 
	#IP_DF
 0x4000

	)

212 
p
->
ùh
.
‰ag_off
 = 
	`ht⁄s
(
IP_DF
);

214 
¨gc
 > 0) {

215 i‡(
	`°rcmp
(*
¨gv
, "mode") == 0) {

216 
	`NEXT_ARG
();

217 i‡(
	`°rcmp
(*
¨gv
, "ipip") == 0) {

218 i‡(
p
->
ùh
.
¥Ÿocﬁ
)

219 
	`ußge
();

220 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_IPIP
;

221 } i‡(
	`°rcmp
(*
¨gv
, "gre") == 0) {

222 i‡(
p
->
ùh
.
¥Ÿocﬁ
)

223 
	`ußge
();

224 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_GRE
;

225 } i‡(
	`°rcmp
(*
¨gv
, "sit") == 0) {

226 i‡(
p
->
ùh
.
¥Ÿocﬁ
)

227 
	`ußge
();

228 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_IPV6
;

230 
	`ußge
();

231 } i‡(
	`°rcmp
(*
¨gv
, "key") == 0) {

232 
uvÆ
;

233 
	`NEXT_ARG
();

234 
p
->
i_Êags
 |
GRE_KEY
;

235 
p
->
o_Êags
 |
GRE_KEY
;

236 i‡(
	`°rchr
(*
¨gv
, '.'))

237 
p
->
i_key
 =Ö->
o_key
 = 
	`gë_addr32
(*
¨gv
);

239 i‡(
	`sˇn_numbî
(*
¨gv
, &
uvÆ
)<0)

240 
	`ußge
();

241 
p
->
i_key
 =Ö->
o_key
 = 
	`ht⁄l
(
uvÆ
);

243 } i‡(
	`°rcmp
(*
¨gv
, "ikey") == 0) {

244 
uvÆ
;

245 
	`NEXT_ARG
();

246 
p
->
i_Êags
 |
GRE_KEY
;

247 i‡(
	`°rchr
(*
¨gv
, '.'))

248 
p
->
o_key
 = 
	`gë_addr32
(*
¨gv
);

250 i‡(
	`sˇn_numbî
(*
¨gv
, &
uvÆ
)<0)

251 
	`ußge
();

252 
p
->
i_key
 = 
	`ht⁄l
(
uvÆ
);

254 } i‡(
	`°rcmp
(*
¨gv
, "okey") == 0) {

255 
uvÆ
;

256 
	`NEXT_ARG
();

257 
p
->
o_Êags
 |
GRE_KEY
;

258 i‡(
	`°rchr
(*
¨gv
, '.'))

259 
p
->
o_key
 = 
	`gë_addr32
(*
¨gv
);

261 i‡(
	`sˇn_numbî
(*
¨gv
, &
uvÆ
)<0)

262 
	`ußge
();

263 
p
->
o_key
 = 
	`ht⁄l
(
uvÆ
);

265 } i‡(
	`°rcmp
(*
¨gv
, "seq") == 0) {

266 
p
->
i_Êags
 |
GRE_SEQ
;

267 
p
->
o_Êags
 |
GRE_SEQ
;

268 } i‡(
	`°rcmp
(*
¨gv
, "iseq") == 0) {

269 
p
->
i_Êags
 |
GRE_SEQ
;

270 } i‡(
	`°rcmp
(*
¨gv
, "oseq") == 0) {

271 
p
->
o_Êags
 |
GRE_SEQ
;

272 } i‡(
	`°rcmp
(*
¨gv
, "csum") == 0) {

273 
p
->
i_Êags
 |
GRE_CSUM
;

274 
p
->
o_Êags
 |
GRE_CSUM
;

275 } i‡(
	`°rcmp
(*
¨gv
, "icsum") == 0) {

276 
p
->
i_Êags
 |
GRE_CSUM
;

277 } i‡(
	`°rcmp
(*
¨gv
, "ocsum") == 0) {

278 
p
->
o_Êags
 |
GRE_CSUM
;

279 } i‡(
	`°rcmp
(*
¨gv
, "nopmtudisc") == 0) {

280 
p
->
ùh
.
‰ag_off
 = 0;

281 } i‡(
	`°rcmp
(*
¨gv
, "remote") == 0) {

282 
	`NEXT_ARG
();

283 i‡(
	`°rcmp
(*
¨gv
, "any"))

284 
p
->
ùh
.
daddr
 = 
	`gë_addr32
(*
¨gv
);

285 } i‡(
	`°rcmp
(*
¨gv
, "local") == 0) {

286 
	`NEXT_ARG
();

287 i‡(
	`°rcmp
(*
¨gv
, "any"))

288 
p
->
ùh
.
ßddr
 = 
	`gë_addr32
(*
¨gv
);

289 } i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

290 
	`NEXT_ARG
();

291 
	`ß„_°∫˝y
(
medium
, *
¨gv
, 
IFNAMSIZ
-1);

292 } i‡(
	`°rcmp
(*
¨gv
, "ttl") == 0) {

293 
uvÆ
;

294 
	`NEXT_ARG
();

295 i‡(
	`°rcmp
(*
¨gv
, "inherit") != 0) {

296 i‡(
	`sˇn_numbî
(*
¨gv
, &
uvÆ
)<0)

297 
	`ußge
();

298 i‡(
uvÆ
 > 255)

299 
	`ußge
();

300 
p
->
ùh
.
âl
 = 
uvÆ
;

302 } i‡(
	`°rcmp
(*
¨gv
, "tos") == 0) {

303 
uvÆ
;

304 
	`NEXT_ARG
();

305 i‡(
	`°rcmp
(*
¨gv
, "inherit") != 0) {

306 i‡(
	`sˇn_numbî
(*
¨gv
, &
uvÆ
)<0)

307 
	`ußge
();

308 i‡(
uvÆ
 > 255)

309 
	`ußge
();

310 
p
->
ùh
.
tos
 = 
uvÆ
;

312 
p
->
ùh
.
tos
 = 1;

314 i‡(
p
->
«me
[0])

315 
	`ußge
();

316 
	`ß„_°∫˝y
(
p
->
«me
, *
¨gv
, 
IFNAMSIZ
);

318 
¨gc
--; 
¨gv
++;

321 i‡(
p
->
ùh
.
¥Ÿocﬁ
 == 0) {

322 i‡(
	`memcmp
(
p
->
«me
, "gre", 3) == 0)

323 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_GRE
;

324 i‡(
	`memcmp
(
p
->
«me
, "ipip", 4) == 0)

325 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_IPIP
;

326 i‡(
	`memcmp
(
p
->
«me
, "sit", 3) == 0)

327 
p
->
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_IPV6
;

330 i‡(
p
->
ùh
.
¥Ÿocﬁ
 =
IPPROTO_IPIP
 ||Ö->ùh.¥Ÿocﬁ =
IPPROTO_IPV6
) {

331 i‡((
p
->
i_Êags
 & 
GRE_KEY
Ë|| (p->
o_Êags
 & GRE_KEY)) {

332 
	`Ârötf
(
°dîr
, 
	`_
("KeysáreÇotállowed with ipipánd sit.\n"));

337 i‡(
medium
[0]) {

338 
p
->
lök
 = 
	`do_io˘l_gë_ifödex
(
medium
);

339 i‡(
p
->
lök
 == 0)

343 i‡(
p
->
i_key
 =0 && 
	`IN_MULTICAST
(
	`¡ohl
’->
ùh
.
daddr
))) {

344 
p
->
i_key
 =Ö->
ùh
.
daddr
;

345 
p
->
i_Êags
 |
GRE_KEY
;

347 i‡(
p
->
o_key
 =0 && 
	`IN_MULTICAST
(
	`¡ohl
’->
ùh
.
daddr
))) {

348 
p
->
o_key
 =Ö->
ùh
.
daddr
;

349 
p
->
o_Êags
 |
GRE_KEY
;

351 i‡(
	`IN_MULTICAST
(
	`¡ohl
(
p
->
ùh
.
daddr
)Ë&& !p->ùh.
ßddr
) {

352 
	`Ârötf
(
°dîr
, 
	`_
("BroadcastÅunnelÑequiresá sourceáddress.\n"));

356 
	}
}

359 
	$do_add
(
cmd
, 
¨gc
, **
¨gv
)

361 
ù_tu¬ñ_∑rm
 
p
;

363 i‡(
	`∑r£_¨gs
(
¨gc
, 
¨gv
, &
p
) < 0)

366 i‡(
p
.
ùh
.
âl
 &&Ö.ùh.
‰ag_off
 == 0) {

367 
	`Ârötf
(
°dîr
, 
	`_
("ttl != 0ándÇoptmudiscáre incompatible\n"));

371 
p
.
ùh
.
¥Ÿocﬁ
) {

372 
IPPROTO_IPIP
:

373  
	`do_add_io˘l
(
cmd
, "tu∆0", &
p
);

374 
IPPROTO_GRE
:

375  
	`do_add_io˘l
(
cmd
, "gª0", &
p
);

376 
IPPROTO_IPV6
:

377  
	`do_add_io˘l
(
cmd
, "sô0", &
p
);

379 
	`Ârötf
(
°dîr
, 
	`_
("cannot determineÅunnel mode (ipip, gre or sit)\n"));

383 
	}
}

385 
	$do_dñ
(
¨gc
, **
¨gv
)

387 
ù_tu¬ñ_∑rm
 
p
;

389 i‡(
	`∑r£_¨gs
(
¨gc
, 
¨gv
, &
p
) < 0)

392 
p
.
ùh
.
¥Ÿocﬁ
) {

393 
IPPROTO_IPIP
:

394  
	`do_dñ_io˘l
(
p
.
«me
[0] ?Ö.name : "tunl0", &p);

395 
IPPROTO_GRE
:

396  
	`do_dñ_io˘l
(
p
.
«me
[0] ?Ö.name : "gre0", &p);

397 
IPPROTO_IPV6
:

398  
	`do_dñ_io˘l
(
p
.
«me
[0] ?Ö.name : "sit0", &p);

400  
	`do_dñ_io˘l
(
p
.
«me
, &p);

403 
	}
}

405 
	$¥öt_tu¬ñ
(
ù_tu¬ñ_∑rm
 *
p
)

407 
s1
[256];

408 
s2
[256];

409 
s3
[64];

410 
s4
[64];

412 
	`f‹m©_ho°
(
AF_INET
, &
p
->
ùh
.
daddr
, 
s1
, (s1));

413 
	`f‹m©_ho°
(
AF_INET
, &
p
->
ùh
.
ßddr
, 
s2
, (s2));

414 
	`öë_¡›
(
AF_INET
, &
p
->
i_key
, 
s3
, (s3));

415 
	`öë_¡›
(
AF_INET
, &
p
->
o_key
, 
s4
, (s4));

417 
	`¥ötf
(
	`_
("%s: %s/ipÑemote %sÜocal %s "),

418 
p
->
«me
,

419 
p
->
ùh
.
¥Ÿocﬁ
 =
IPPROTO_IPIP
 ? "ip" :

420 (
p
->
ùh
.
¥Ÿocﬁ
 =
IPPROTO_GRE
 ? "gre" :

421 (
p
->
ùh
.
¥Ÿocﬁ
 =
IPPROTO_IPV6
 ? "ùv6" : 
	`_
("unknown"))),

422 
p
->
ùh
.
daddr
 ? 
s1
 : "™y",Ö->ùh.
ßddr
 ? 
s2
 : "any");

423 i‡(
p
->
lök
) {

424 *
n
 = 
	`do_io˘l_gë_i‚ame
(
p
->
lök
);

425 i‡(
n
)

426 
	`¥ötf
(" dev %†", 
n
);

428 i‡(
p
->
ùh
.
âl
)

429 
	`¥ötf
("Åé %d ", 
p
->
ùh
.
âl
);

431 
	`¥ötf
("Åtl inherit ");

432 i‡(
p
->
ùh
.
tos
) {

433 
	`¥ötf
("Åos");

434 i‡(
p
->
ùh
.
tos
&1)

435 
	`¥ötf
(" inherit");

436 i‡(
p
->
ùh
.
tos
&~1)

437 
	`¥ötf
("%c%02x ", 
p
->
ùh
.
tos
&1 ? '/' : ' ',Ö->iph.tos&~1);

439 i‡(!(
p
->
ùh
.
‰ag_off
&
	`ht⁄s
(
IP_DF
)))

440 
	`¥ötf
("Çopmtudisc");

442 i‡((
p
->
i_Êags
&
GRE_KEY
Ë&& (p->
o_Êags
&GRE_KEYË&&Ö->
o_key
 =p->
i_key
)

443 
	`¥ötf
(" key %s", 
s3
);

444 i‡((
p
->
i_Êags
|p->
o_Êags
)&
GRE_KEY
) {

445 i‡(
p
->
i_Êags
&
GRE_KEY
)

446 
	`¥ötf
(" ikey %†", 
s3
);

447 i‡(
p
->
o_Êags
&
GRE_KEY
)

448 
	`¥ötf
(" okey %†", 
s4
);

450 
	`¥ötf
("\n");

452 i‡(
p
->
i_Êags
&
GRE_SEQ
)

453 
	`¥ötf
(
	`_
(" DropÖackets out of sequence.\n"));

454 i‡(
p
->
i_Êags
&
GRE_CSUM
)

455 
	`¥ötf
(
	`_
(" Checksum inÑeceivedÖacket isÑequired.\n"));

456 i‡(
p
->
o_Êags
&
GRE_SEQ
)

457 
	`¥ötf
(
	`_
(" SequenceÖackets on output.\n"));

458 i‡(
p
->
o_Êags
&
GRE_CSUM
)

459 
	`¥ötf
(
	`_
(" Checksum outputÖackets.\n"));

460 
	}
}

462 
	$do_tu¬ñs_li°
(
ù_tu¬ñ_∑rm
 *
p
)

464 
«me
[
IFNAMSIZ
];

465 
rx_byãs
, 
rx_∑ckës
, 
rx_îrs
, 
rx_dr›s
,

466 
rx_fifo
, 
rx_‰ame
,

467 
tx_byãs
, 
tx_∑ckës
, 
tx_îrs
, 
tx_dr›s
,

468 
tx_fifo
, 
tx_cﬁls
, 
tx_ˇºõr
, 
rx_mu…i
;

469 
ty≥
;

470 
ù_tu¬ñ_∑rm
 
p1
;

472 
buf
[512];

473 
FILE
 *
Â
 = 
	`f›í
("/proc/net/dev", "r");

474 i‡(
Â
 =
NULL
) {

475 
	`≥º‹
("fopen");

479 
	`fgës
(
buf
, (buf), 
Â
);

480 
	`fgës
(
buf
, (buf), 
Â
);

482 
	`fgës
(
buf
, (buf), 
Â
Ë!
NULL
) {

483 *
±r
;

484 
buf
[(buf) - 1] = 0;

485 i‡((
±r
 = 
	`°rchr
(
buf
, ':')Ë=
NULL
 ||

486 (*
±r
++ = 0, 
	`ssˇnf
(
buf
, "%s", 
«me
) != 1)) {

487 
	`Ârötf
(
°dîr
, 
	`_
("Wrong format of /proc/net/dev. Sorry.\n"));

490 i‡(
	`ssˇnf
(
±r
, "%ld%ld%ld%ld%ld%ld%ld%*d%ld%ld%ld%ld%ld%ld%ld",

491 &
rx_byãs
, &
rx_∑ckës
, &
rx_îrs
, &
rx_dr›s
,

492 &
rx_fifo
, &
rx_‰ame
, &
rx_mu…i
,

493 &
tx_byãs
, &
tx_∑ckës
, &
tx_îrs
, &
tx_dr›s
,

494 &
tx_fifo
, &
tx_cﬁls
, &
tx_ˇºõr
) != 14)

496 i‡(
p
->
«me
[0] && 
	`°rcmp
(p->name,Çame))

498 
ty≥
 = 
	`do_io˘l_gë_i·y≥
(
«me
);

499 i‡(
ty≥
 == -1) {

500 
	`Ârötf
(
°dîr
, 
	`_
("FaûedÅÿgëÅy≥ o‡[%s]\n"), 
«me
);

503 i‡(
ty≥
 !
ARPHRD_TUNNEL
 &&Åy≥ !
ARPHRD_IPGRE
 &&Åy≥ !
ARPHRD_SIT
)

505 
	`mem£t
(&
p1
, 0, (p1));

506 i‡(
	`do_gë_io˘l
(
«me
, &
p1
))

508 i‡((
p
->
lök
 && 
p1
.link !=Ö->link) ||

509 (
p
->
«me
[0] && 
	`°rcmp
(
p1
.name,Ö->name)) ||

510 (
p
->
ùh
.
daddr
 && 
p1
.iph.daddr !=Ö->iph.daddr) ||

511 (
p
->
ùh
.
ßddr
 && 
p1
.iph.saddr !=Ö->iph.saddr) ||

512 (
p
->
i_key
 && 
p1
.i_key !=Ö->i_key))

514 
	`¥öt_tu¬ñ
(&
p1
);

515 i‡(
show_°©s
) {

516 
	`¥ötf
(
	`_
("RX: Packets Bytes Errors CsumErrs OutOfSeq Mcasts\n"));

517 
	`¥ötf
(" %-10ld %-12ld %-6ld %-8ld %-8ld %-8ld\n",

518 
rx_∑ckës
, 
rx_byãs
, 
rx_îrs
, 
rx_‰ame
, 
rx_fifo
, 
rx_mu…i
);

519 
	`¥ötf
(
	`_
("TX: Packets Bytes Errors DeadLoop NoRoute NoBufs\n"));

520 
	`¥ötf
(" %-10ld %-12ld %-6ld %-8ld %-8ld %-6ld\n\n",

521 
tx_∑ckës
, 
tx_byãs
, 
tx_îrs
, 
tx_cﬁls
, 
tx_ˇºõr
, 
tx_dr›s
);

525 
	}
}

527 
	$do_show
(
¨gc
, **
¨gv
)

529 
îr
;

530 
ù_tu¬ñ_∑rm
 
p
;

532 i‡(
	`∑r£_¨gs
(
¨gc
, 
¨gv
, &
p
) < 0)

535 
p
.
ùh
.
¥Ÿocﬁ
) {

536 
IPPROTO_IPIP
:

537 
îr
 = 
	`do_gë_io˘l
(
p
.
«me
[0] ?Ö.name : "tunl0", &p);

539 
IPPROTO_GRE
:

540 
îr
 = 
	`do_gë_io˘l
(
p
.
«me
[0] ?Ö.name : "gre0", &p);

542 
IPPROTO_IPV6
:

543 
îr
 = 
	`do_gë_io˘l
(
p
.
«me
[0] ?Ö.name : "sit0", &p);

546 
	`do_tu¬ñs_li°
(&
p
);

549 i‡(
îr
)

552 
	`¥öt_tu¬ñ
(&
p
);

554 
	}
}

556 
	$do_ùtu¬ñ
(
¨gc
, **
¨gv
)

558 i‡(
¨gc
 > 0) {

559 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

560  
	`do_add
(
SIOCADDTUNNEL
, 
¨gc
-1, 
¨gv
+1);

561 i‡(
	`m©ches
(*
¨gv
, "change") == 0)

562  
	`do_add
(
SIOCCHGTUNNEL
, 
¨gc
-1, 
¨gv
+1);

563 i‡(
	`m©ches
(*
¨gv
, "del") == 0)

564  
	`do_dñ
(
¨gc
-1, 
¨gv
+1);

565 i‡(
	`m©ches
(*
¨gv
, "show") == 0 ||

566 
	`m©ches
(*
¨gv
, "lst") == 0 ||

567 
	`m©ches
(*
¨gv
, "list") == 0)

568  
	`do_show
(
¨gc
-1, 
¨gv
+1);

570  
	`do_show
(0, 
NULL
);

572 
	`ußge
();

573 
	}
}

576 
	g¥e„ºed_Ámûy
 = 
AF_UNSPEC
;

577 
	gshow_°©s
 = 0;

578 
	gªsﬁve_ho°s
 = 0;

580 
	$maö
(
¨gc
, **
¨gv
)

582 *
ba£«me
;

584 #i‡
I18N


585 
	`£éoˇÀ
 (
LC_ALL
, "");

586 
	`bödãxtdomaö
("net-tools", "/usr/share/locale");

587 
	`ãxtdomaö
("net-tools");

590 
ba£«me
 = 
	`°ºchr
(
¨gv
[0], '/');

591 i‡(
ba£«me
 =
NULL
)

592 
ba£«me
 = 
¨gv
[0];

594 
ba£«me
++;

596 
¨gc
 > 1) {

597 i‡(
¨gv
[1][0] != '-')

599 i‡(
	`m©ches
(
¨gv
[1], "-family") == 0) {

600 
¨gc
--;

601 
¨gv
++;

602 i‡(
¨gc
 <= 1)

603 
	`ußge
();

604 i‡(
	`°rcmp
(
¨gv
[1], "inet") == 0)

605 
¥e„ºed_Ámûy
 = 
AF_INET
;

606 i‡(
	`°rcmp
(
¨gv
[1], "inet6") == 0)

607 
¥e„ºed_Ámûy
 = 
AF_INET6
;

609 
	`ußge
();

610 } i‡(
	`m©ches
(
¨gv
[1], "-stats") == 0 ||

611 
	`m©ches
(
¨gv
[1], "-statistics") == 0) {

612 ++
show_°©s
;

613 } i‡(
	`m©ches
(
¨gv
[1], "-resolve") == 0) {

614 ++
ªsﬁve_ho°s
;

615 } i‡((
	`m©ches
(
¨gv
[1], "-V") == 0) || (matches(argv[1], "--version") == 0)) {

616 
	`vîsi⁄
();

618 
	`ußge
();

619 
¨gc
--; 
¨gv
++;

622  
	`do_ùtu¬ñ
(
¨gc
-1, 
¨gv
+1);

623 
	}
}

	@interface/net-tools/lib/activate.c

26 
	~<°dio.h
>

27 
	~<°rög.h
>

28 
	~"√t-suµ‹t.h
"

29 
	~"∑th«mes.h
"

30 
	~"vîsi⁄.h
"

31 
	~"c⁄fig.h
"

32 
	~"öé.h
"

34 
hwty≥
 
¶ù_hwty≥
;

35 
hwty≥
 
c¶ù_hwty≥
;

36 
hwty≥
 
¶ù6_hwty≥
;

37 
hwty≥
 
c¶ù6_hwty≥
;

38 
hwty≥
 
ad≠tive_hwty≥
;

39 
hwty≥
 
µp_hwty≥
;

41 
SLIP_a˘iv©e
(
fd
);

42 
CSLIP_a˘iv©e
(
fd
);

43 
SLIP6_a˘iv©e
(
fd
);

44 
CSLIP6_a˘iv©e
(
fd
);

45 
ADAPTIVE_a˘iv©e
(
fd
);

46 
PPP_a˘iv©e
(
fd
);

48 
	$a˘iv©e_öô
()

50 #i‡
HAVE_HWSLIP


51 
¶ù_hwty≥
.
a˘iv©e
 = 
SLIP_a˘iv©e
;

52 
c¶ù_hwty≥
.
a˘iv©e
 = 
CSLIP_a˘iv©e
;

53 
¶ù6_hwty≥
.
a˘iv©e
 = 
SLIP6_a˘iv©e
;

54 
c¶ù6_hwty≥
.
a˘iv©e
 = 
CSLIP6_a˘iv©e
;

55 
ad≠tive_hwty≥
.
a˘iv©e
 = 
ADAPTIVE_a˘iv©e
;

57 #i‡
HAVE_HWPPP


58 
µp_hwty≥
.
a˘iv©e
 = 
PPP_a˘iv©e
;

60 
	}
}

62 
	$a˘iv©e_ld
(c⁄° *
hw«me
, 
fd
)

64 
hwty≥
 *
hw
;

66 
hw
 = 
	`gë_hwty≥
(
hw«me
);

68 i‡(!
hw
) {

69 
	`Ârötf
(
°dîr
, 
	`_
("H¨dw¨êty≥ `%s'ÇŸ suµ‹ãd.\n"), 
hw«me
);

70  (
E_NOSUPP
);

72 i‡(!
hw
->
a˘iv©e
) {

73 
	`Ârötf
(
°dîr
, 
	`_
("C™nŸ ch™gêlöêdiscùlöêtÿ`%s'.\n"), 
hw
->
«me
);

74  (
E_OPTERR
);

76  (
hw
->
	`a˘iv©e
(
fd
));

77 
	}
}

	@interface/net-tools/lib/af.c

16 
	~<sys/ty≥s.h
>

17 
	~<sys/sockë.h
>

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

20 
	~<î∫o.h
>

21 
	~<˘y≥.h
>

22 
	~<°rög.h
>

23 
	~<uni°d.h
>

24 
	~"c⁄fig.h
"

25 
	~"√t-suµ‹t.h
"

26 
	~"∑th«mes.h
"

27 
	~"öé.h
"

28 
	~"utû.h
"

30 
	gÊag_unx
;

31 
	gÊag_ùx
;

32 
	gÊag_ax25
;

33 
	gÊag_ddp
;

34 
	gÊag_√åom
;

35 
	gÊag_öë
;

36 
	gÊag_öë6
;

37 
	gÊag_ec⁄ë
;

38 
	gÊag_ro£
;

39 
	gÊag_x25
 = 0;

40 
	gÊag_ash
;

43 
	sa·øns_t
 {

44 *
	mÆüs
;

45 *
	m«me
;

46 *
	mÊag
;

47 } 
	ga·øns
[] = {

50 "ax25", "ax25", &
Êag_ax25


53 "ù", "öë", &
Êag_öë


56 "ù6", "öë6", &
Êag_öë6


59 "ùx", "ùx", &
Êag_ùx


62 "ro£", "ro£", &
Êag_ro£


65 "≠∂ëÆk", "ddp", &
Êag_ddp


68 "√åom", "√åom", &
Êag_√åom


71 "öë", "öë", &
Êag_öë


74 "öë6", "öë6", &
Êag_öë6


77 "ddp", "ddp", &
Êag_ddp


80 "unix", "unix", &
Êag_unx


83 "t˝ù", "öë", &
Êag_öë


86 "ec⁄ë", "ec", &
Êag_ec⁄ë


89 "x25", "x25", &
Êag_x25


92 "ash", "ash", &
Êag_ash


99 
	ga‚ame
[256] = "";

101 
a·y≥
 
un•ec_a·y≥
;

102 
a·y≥
 
unix_a·y≥
;

103 
a·y≥
 
öë_a·y≥
;

104 
a·y≥
 
öë6_a·y≥
;

105 
a·y≥
 
ax25_a·y≥
;

106 
a·y≥
 
√åom_a·y≥
;

107 
a·y≥
 
ùx_a·y≥
;

108 
a·y≥
 
ddp_a·y≥
;

109 
a·y≥
 
ec_a·y≥
;

110 
a·y≥
 
x25_a·y≥
;

111 
a·y≥
 
ro£_a·y≥
;

112 
a·y≥
 
ash_a·y≥
;

114 
	gsVaföô
 = 0;

116 
a·y≥
 *
	ga·y≥s
[] =

118 #i‡
HAVE_AFUNIX


119 &
unix_a·y≥
,

121 #i‡
HAVE_AFINET


122 &
öë_a·y≥
,

124 #i‡
HAVE_AFINET6


125 &
öë6_a·y≥
,

127 #i‡
HAVE_AFAX25


128 &
ax25_a·y≥
,

130 #i‡
HAVE_AFNETROM


131 &
√åom_a·y≥
,

133 #i‡
HAVE_AFROSE


134 &
ro£_a·y≥
,

136 #i‡
HAVE_AFIPX


137 &
ùx_a·y≥
,

139 #i‡
HAVE_AFATALK


140 &
ddp_a·y≥
,

142 #i‡
HAVE_AFECONET


143 &
ec_a·y≥
,

145 #i‡
HAVE_AFASH


146 &
ash_a·y≥
,

148 #i‡
HAVE_AFX25


149 &
x25_a·y≥
,

151 &
un•ec_a·y≥
,

152 
NULL


155 
	$aföô
()

157 
un•ec_a·y≥
.
tôÀ
 = 
	`_
("UNSPEC");

158 #i‡
HAVE_AFUNIX


159 
unix_a·y≥
.
tôÀ
 = 
	`_
("UNIX Domain");

161 #i‡
HAVE_AFINET


162 
öë_a·y≥
.
tôÀ
 = 
	`_
("DARPA Internet");

164 #i‡
HAVE_AFINET6


165 
öë6_a·y≥
.
tôÀ
 = 
	`_
("IPv6");

167 #i‡
HAVE_AFAX25


168 
ax25_a·y≥
.
tôÀ
 = 
	`_
("AMPR AX.25");

170 #i‡
HAVE_AFNETROM


171 
√åom_a·y≥
.
tôÀ
 = 
	`_
("AMPR NET/ROM");

173 #i‡
HAVE_AFIPX


174 
ùx_a·y≥
.
tôÀ
 = 
	`_
("Novell IPX");

176 #i‡
HAVE_AFATALK


177 
ddp_a·y≥
.
tôÀ
 = 
	`_
("Appletalk DDP");

179 #i‡
HAVE_AFECONET


180 
ec_a·y≥
.
tôÀ
 = 
	`_
("Econet");

182 #i‡
HAVE_AFX25


183 
x25_a·y≥
.
tôÀ
 = 
	`_
("CCITT X.25");

185 #i‡
HAVE_AFROSE


186 
ro£_a·y≥
.
tôÀ
 = 
	`_
("AMPR ROSE");

188 #i‡
HAVE_AFASH


189 
ash_a·y≥
.
tôÀ
 = 
	`_
("Ash");

191 
sVaföô
 = 1;

192 
	}
}

195 
	$a·øns_def
(*
toﬁ
, *
¨gv0
, *
dÊt
)

197 *
tmp
;

198 *
buf
;

200 
	`°r˝y
(
a‚ame
, 
dÊt
);

202 i‡(!(
tmp
 = 
	`°ºchr
(
¨gv0
, '/')))

203 
tmp
 = 
¨gv0
;

205 
tmp
++;

207 i‡(!(
buf
 = 
	`°rdup
(
tmp
)))

210 i‡(
	`°æí
(
toﬁ
Ë>°æí(
tmp
)) {

211 
	`‰ì
(
buf
);

214 
tmp
 = 
buf
 + (
	`°æí
—mpË- såÀn(
toﬁ
));

216 i‡(
	`°rcmp
(
tmp
, 
toﬁ
) != 0) {

217 
	`‰ì
(
buf
);

220 *
tmp
 = '\0';

221 i‡((
tmp
 = 
	`°rchr
(
buf
, '_')))

222 *
tmp
 = '\0';

224 
a‚ame
[0] = '\0';

225 i‡(
	`a·øns_›t
(
buf
))

226 
	`°r˝y
(
a‚ame
, 
buf
);

228 
	`‰ì
(
buf
);

229 
	}
}

233 
a·y≥
 *
	$gë_a·y≥
(c⁄° *
«me
)

235 
a·y≥
 **
aÂ
;

237 i‡(!
sVaföô
)

238 
	`aföô
();

240 
aÂ
 = 
a·y≥s
;

241 *
aÂ
 !
NULL
) {

242 i‡(!
	`°rcmp
((*
aÂ
)->
«me
,Çame))

243  (*
aÂ
);

244 
aÂ
++;

246 i‡(
	`ödex
(
«me
, ','))

247 
	`Ârötf
(
°dîr
, 
	`_
("Please don't supply moreÅhan oneáddress family.\n"));

248  (
NULL
);

249 
	}
}

253 
a·y≥
 *
	$gë_a‚ty≥
(
af
)

255 
a·y≥
 **
aÂ
;

257 i‡(!
sVaföô
)

258 
	`aföô
();

260 
aÂ
 = 
a·y≥s
;

261 *
aÂ
 !
NULL
) {

262 i‡((*
aÂ
)->
af
 ==áf)

263  (*
aÂ
);

264 
aÂ
++;

266  (
NULL
);

267 
	}
}

270 
	$gë_sockë_f‹_af
(
af
)

272 
a·y≥
 **
aÂ
;

274 i‡(!
sVaföô
)

275 
	`aföô
();

277 
aÂ
 = 
a·y≥s
;

278 *
aÂ
 !
NULL
) {

279 i‡((*
aÂ
)->
af
 ==áf)

280  (*
aÂ
)->
fd
;

281 
aÂ
++;

284 
	}
}

286 
	$a·øns_›t
(c⁄° *
¨g
)

288 
a·øns_t
 *
∑·
;

289 *
tmp1
, *
tmp2
;

290 
buf
[256];

292 
	`ß„_°∫˝y
(
buf
, 
¨g
, (buf));

294 
tmp1
 = 
buf
;

296 
tmp1
) {

298 
tmp2
 = 
	`ödex
(
tmp1
, ',');

300 i‡(
tmp2
)

301 *(
tmp2
++) = '\0';

303 
∑·
 = 
a·øns
;

304 
∑·
 = 
a·øns
;Öa·->
Æüs
;Öaft++) {

305 i‡(
	`°rcmp
(
tmp1
, 
∑·
->
Æüs
))

307 i‡(
	`°æí
(
∑·
->
«me
Ë+ såÀn(
a‚ame
) + 1 >= (afname)) {

308 
	`Ârötf
(
°dîr
, 
	`_
("Too mucháddress familyárguments.\n"));

311 i‡(
∑·
->
Êag
)

312 (*
∑·
->
Êag
)++;

313 i‡(
a‚ame
[0])

314 
	`°rˇt
(
a‚ame
, ",");

315 
	`°rˇt
(
a‚ame
, 
∑·
->
«me
);

318 i‡(!
∑·
->
Æüs
) {

319 
	`Ârötf
(
°dîr
, 
	`_
("Unknow¿addªs†Ámûy `%s'.\n"), 
tmp1
);

322 
tmp1
 = 
tmp2
;

326 
	}
}

329 
	$¥öt_aÊi°
(
ty≥
) {

330 
cou¡
 = 0;

331 * 
txt
;

332 
a·y≥
 **
aÂ
;

334 i‡(!
sVaföô
)

335 
	`aföô
();

337 
aÂ
 = 
a·y≥s
;

338 *
aÂ
 !
NULL
) {

339 i‡((
ty≥
 =1 && ((*
aÂ
)->
Ωröt
 =
NULL
)Ë|| ((*aÂ)->
af
 == 0)) {

340 
aÂ
++; ;

342 i‡((
cou¡
 % 3Ë=0Ë
	`Ârötf
(
°dîr
,count?"\n ":" ");

343 
txt
 = (*
aÂ
)->
«me
; if (!txt)Åxt = "..";

344 
	`Ârötf
(
°dîr
,"%†(%sË",
txt
,(*
aÂ
)->
tôÀ
);

345 
cou¡
++;

346 
aÂ
++;

348 
	`Ârötf
(
°dîr
,"\n");

349 
	}
}

	@interface/net-tools/lib/arcnet.c

16 
	~"c⁄fig.h
"

18 #i‡
HAVE_HWARC


19 
	~<sys/ty≥s.h
>

20 
	~<sys/sockë.h
>

21 
	~<√t/if_¨p.h
>

22 
	~<löux/if_ëhî.h
>

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

25 
	~<î∫o.h
>

26 
	~<˘y≥.h
>

27 
	~<°rög.h
>

28 
	~<uni°d.h
>

29 
	~"√t-suµ‹t.h
"

30 
	~"∑th«mes.h
"

31 
	~"öé.h
"

32 
	~"utû.h
"

34 
hwty≥
 
¨˙ë_hwty≥
;

38 *
	$¥_¨˙ë
(*
±r
)

40 
buff
[64];

42 
	`¢¥ötf
(
buff
, (buff), "%02X", (
±r
[0] & 0377));

43  (
buff
);

44 
	}
}

48 
	$ö_¨˙ë
(*
buÂ
, 
sockaddr
 *
ßp
)

50 *
±r
;

51 
c
, *
‹ig
;

52 
i
, 
vÆ
;

54 
ßp
->
ß_Ámûy
 = 
¨˙ë_hwty≥
.
ty≥
;

55 
±r
 = 
ßp
->
ß_d©a
;

57 
i
 = 0;

58 
‹ig
 = 
buÂ
;

59 (*
buÂ
 !'\0'Ë&& (
i
 < 1)) {

60 
vÆ
 = 0;

61 
c
 = *
buÂ
++;

62 i‡(
	`isdigô
(
c
))

63 
vÆ
 = 
c
 - '0';

64 i‡(
c
 >= 'a' && c <= 'f')

65 
vÆ
 = 
c
 - 'a' + 10;

66 i‡(
c
 >= 'A' && c <= 'F')

67 
vÆ
 = 
c
 - 'A' + 10;

69 #ifde‡
DEBUG


70 
	`Ârötf
(
°dîr
, 
	`_
("ö_¨˙ë(%s): invÆidár˙ëáddªss!\n"), 
‹ig
);

72 
î∫o
 = 
EINVAL
;

75 
vÆ
 <<= 4;

76 
c
 = *
buÂ
++;

77 i‡(
	`isdigô
(
c
))

78 
vÆ
 |
c
 - '0';

79 i‡(
c
 >= 'a' && c <= 'f')

80 
vÆ
 |
c
 - 'a' + 10;

81 i‡(
c
 >= 'A' && c <= 'F')

82 
vÆ
 |
c
 - 'A' + 10;

84 #ifde‡
DEBUG


85 
	`Ârötf
(
°dîr
, 
	`_
("ö_¨˙ë(%s): invÆidár˙ëáddªss!\n"), 
‹ig
);

87 
î∫o
 = 
EINVAL
;

90 *
±r
++ = (Ë(
vÆ
 & 0377);

91 
i
++;

94 i‡(*
buÂ
 == ':') {

95 i‡(
i
 =
ETH_ALEN
) {

96 #ifde‡
DEBUG


97 
	`Ârötf
(
°dîr
, 
	`_
("in_arcnet(%s):Årailing : ignored!\n"),

98 
‹ig
)

102 
buÂ
++;

107 i‡((
i
 =
ETH_ALEN
Ë&& (*
buÂ
 != '\0')) {

108 #ifde‡
DEBUG


109 
	`Ârötf
(
°dîr
, 
	`_
("ö_¨˙ë(%s):Åøûög junk!\n"), 
‹ig
);

110 
î∫o
 = 
EINVAL
;

114 #ifde‡
DEBUG


115 
	`Ârötf
(
°dîr
, "ö_¨˙ë(%s): %s\n", 
‹ig
, 
	`¥_¨˙ë
(
ßp
->
ß_d©a
));

119 
	}
}

122 
hwty≥
 
	g¨˙ë_hwty≥
 =

124 "¨˙ë", 
NULL
, 
ARPHRD_ARCNET
, 1,

125 
¥_¨˙ë
, 
ö_¨˙ë
, 
NULL


	@interface/net-tools/lib/ash.c

7 
	~"c⁄fig.h
"

9 #i‡
HAVE_HWASH
 || 
HAVE_AFASH


11 
	~<sys/ty≥s.h
>

12 
	~<sys/sockë.h
>

13 
	~<√t/if_¨p.h
>

14 
	~<°dlib.h
>

15 
	~<°dio.h
>

16 
	~<î∫o.h
>

17 
	~<˘y≥.h
>

18 
	~<°rög.h
>

19 
	~<uni°d.h
>

20 
	~"√t-suµ‹t.h
"

21 
	~"∑th«mes.h
"

22 
	~"öé.h
"

23 
	~"utû.h
"

25 
	#ASH_ALEN
 64

	)

27 
	ghammög
[16] =

35 
	$¥_ash
(*
±r
)

37 
buff
[128];

38 *
p
 = 
buff
;

39 
i
 = 0;

41 
p
[0] = '[';

42 
p
++;

43 
±r
[
i
] !0xc9 &&Öå[i] !0xf‡&& (ò< 
ASH_ALEN
))

44 
	`•rötf
(
p
++, "%1x", 
±r
[
i
++]);

45 *(
p
++) = ']';

46 *
p
 = 0;

48  
buff
;

49 
	}
}

51 #i‡
HAVE_HWASH


53 #i‚de‡
ARPHRD_ASH


55 
	#ARPHRD_ASH
 517

	)

58 
hwty≥
 
	gash_hwty≥
;

61 
	$ö_ash
(*
buÂ
, 
sockaddr
 *
ßp
)

63 *
±r
;

64 
i
 = 0;

66 
ßp
->
ß_Ámûy
 = 
ash_hwty≥
.
ty≥
;

67 
±r
 = 
ßp
->
ß_d©a
;

69 
buÂ
 && 
i
 < 
ASH_ALEN
) {

70 *
√xt
;

71 
h›
 = 
	`°πﬁ
(
buÂ
, &
√xt
, 16);

72 
±r
[
i
++] = 
hammög
[
h›
];

73 *
√xt
) {

75 
buÂ
 = 
√xt
 + 1;

78 
buÂ
 = 
NULL
;

81 
	`Ârötf
(
°dîr
, 
	`_
("Malformed Asháddress"));

82 
	`mem£t
(
±r
, 0xc9, 
ASH_ALEN
);

87 
i
 < 
ASH_ALEN
)

88 
±r
[
i
++] = 0xc9;

91 
	}
}

93 
hwty≥
 
	gash_hwty≥
 =

95 "ash", 
NULL
, 
ARPHRD_ASH
, 
ASH_ALEN
,

96 
¥_ash
, 
ö_ash
, 
NULL
,

102 #i‡
HAVE_AFASH


106 
	$¥_ßsh
(
sockaddr
 *
ßp
, 
numîic
)

108 
buf
[64];

110 i‡(
ßp
->
ß_Ámûy
 !
AF_ASH
)

111  
	`ß„_°∫˝y
(
buf
, "[NONE SET]", 64);

112  
	`¥_ash
(
ßp
->
ß_d©a
);

113 
	}
}

115 
a·y≥
 
	gash_a·y≥
 =

117 "ash", 
NULL
, 
AF_ASH
, 0,

118 
¥_ash
, 
¥_ßsh
, 
NULL
, NULL,

119 
NULL
, NULL, NULL,

	@interface/net-tools/lib/ax25.c

21 
	~"c⁄fig.h
"

23 #i‡
HAVE_AFAX25
 || 
HAVE_HWAX25


24 
	~<sys/ty≥s.h
>

25 
	~<sys/io˘l.h
>

26 
	~<sys/sockë.h
>

27 #i‡(
__GLIBC__
 > 2Ë|| (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >= 1)

28 
	~<√èx25/ax25.h
>

30 
	~<löux/ax25.h
>

32 
	~<√t/if_¨p.h
>

33 
	~<°dlib.h
>

34 
	~<°dio.h
>

35 
	~<˘y≥.h
>

36 
	~<î∫o.h
>

37 
	~<f˙é.h
>

38 
	~<°rög.h
>

39 
	~<ãrmios.h
>

40 
	~<uni°d.h
>

41 
	~"√t-suµ‹t.h
"

42 
	~"∑th«mes.h
"

43 
	~"öé.h
"

44 
	~"utû.h
"

46 
	gAX25_îrmsg
[128];

48 
a·y≥
 
ax25_a·y≥
;

50 *
	$AX25_¥öt
(*
±r
)

52 
buff
[8];

53 
i
;

55 
i
 = 0; i < 6; i++) {

56 
buff
[
i
] = ((
±r
[i] & 0377) >> 1);

57 i‡(
buff
[
i
] == ' ')

58 
buff
[
i
] = '\0';

60 
buff
[6] = '\0';

61 
i
 = ((
±r
[6] & 0x1E) >> 1);

62 i‡(
i
 != 0)

63 
	`•rötf
(&
buff
[
	`°æí
(buff)], "-%d", 
i
);

64  (
buff
);

65 
	}
}

70 
	$AX25_•röt
(
sockaddr
 *
ßp
, 
numîic
)

72 
buf
[64];

74 i‡(
ßp
->
ß_Ámûy
 == 0xFFFF || sap->sa_family == 0)

75  
	`ß„_°∫˝y
(
buf
, 
	`_
("[NONE SET]"), (buf));

76  (
	`AX25_¥öt
(((
sockaddr_ax25
 *Ë
ßp
)->
ßx25_ˇŒ
.
ax25_ˇŒ
));

77 
	}
}

80 
	$AX25_öput
(
ty≥
, *
buÂ
, 
sockaddr
 *
ßp
)

82 *
±r
;

83 *
‹ig
, 
c
;

84 
i
;

86 
ßp
->
ß_Ámûy
 = 
ax25_a·y≥
.
af
;

87 
±r
 = ((
sockaddr_ax25
 *Ë
ßp
)->
ßx25_ˇŒ
.
ax25_ˇŒ
;

90 
‹ig
 = 
buÂ
;

91 
i
 = 0;

92 (*
buÂ
 !'\0'Ë&& (*buÂ !'-'Ë&& (
i
 < 6)) {

93 
c
 = *
buÂ
++;

94 i‡(
	`i¶owî
(
c
))

95 
c
 = 
	`touµî
(c);

96 i‡(!(
	`isuµî
(
c
Ë|| 
	`isdigô
(c))) {

97 
	`ß„_°∫˝y
(
AX25_îrmsg
, 
	`_
("Invalid callsign"), (AX25_errmsg));

98 #ifde‡
DEBUG


99 
	`Ârötf
(
°dîr
, "ax25_öput(%s): %†!\n", 
AX25_îrmsg
, 
‹ig
);

101 
î∫o
 = 
EINVAL
;

104 *
±r
++ = (Ë((
c
 << 1) & 0xFE);

105 
i
++;

109 i‡((
i
 =6Ë&& (*
buÂ
 != '-') && (*bufp != '\0')) {

110 
	`°r˝y
(
AX25_îrmsg
, 
	`_
("CallsignÅooÜong"));

111 #ifde‡
DEBUG


112 
	`Ârötf
(
°dîr
, "ax25_öput(%s): %†!\n", 
AX25_îrmsg
, 
‹ig
);

114 
î∫o
 = 
E2BIG
;

118 
i
++ < (
ax25_addªss
) - 1) {

119 *
±r
++ = () ((' ' << 1) & 0xFE);

123 i‡(*
buÂ
 == '-') {

124 
i
 = 
	`©oi
(++
buÂ
);

125 *
±r
 = (Ë((
i
 << 1) & 0xFE);

127 *
±r
 = () '\0';

131 #ifde‡
DEBUG


132 
	`Ârötf
(
°dîr
, "ax25_öput(%s): ", 
‹ig
);

133 
i
 = 0; i < (
ax25_addªss
); i++)

134 
	`Ârötf
(
°dîr
, "%02X ", 
ßp
->
ß_d©a
[
i
] & 0377);

135 
	`Ârötf
(
°dîr
, "\n");

139 
	}
}

143 
	$AX25_hîr‹
(*
ãxt
)

145 i‡(
ãxt
 =
NULL
)

146 
	`Ârötf
(
°dîr
, "%s\n", 
AX25_îrmsg
);

148 
	`Ârötf
(
°dîr
, "%s: %s\n", 
ãxt
, 
AX25_îrmsg
);

149 
	}
}

152 
	$AX25_höput
(*
buÂ
, 
sockaddr
 *
ßp
)

154 i‡(
	`AX25_öput
(0, 
buÂ
, 
ßp
) < 0)

156 
ßp
->
ß_Ámûy
 = 
ARPHRD_AX25
;

158 
	}
}

162 
	$KISS_£t_disc
(
fd
, 
disc
)

164 i‡(
	`io˘l
(
fd
, 
TIOCSETD
, &
disc
) < 0) {

165 
	`Ârötf
(
°dîr
, "KISS_£t_disc(%d): %s\n", 
disc
, 
	`°ªº‹
(
î∫o
));

166  (-
î∫o
);

169 
	}
}

173 
	$KISS_öô
(
fd
)

175 i‡(
	`KISS_£t_disc
(
fd
, 
N_SLIP
) < 0)

177 i‡(
	`io˘l
(
fd
, 
SIOCSIFENCAP
, 4) < 0)

180 
	}
}

183 
hwty≥
 
	gax25_hwty≥
 =

185 "ax25", 
NULL
, 
ARPHRD_AX25
, 7,

186 
AX25_¥öt
, 
AX25_höput
, 
NULL


189 
a·y≥
 
	gax25_a·y≥
 =

191 "ax25", 
NULL
, 
AF_AX25
, 7,

192 
AX25_¥öt
, 
AX25_•röt
, 
AX25_öput
, 
AX25_hîr‹
,

193 
NULL
, NULL, NULL,

	@interface/net-tools/lib/ax25_gr.c

17 
	~"c⁄fig.h
"

19 #i‡
HAVE_AFAX25


21 
	~<sys/ty≥s.h
>

22 
	~<sys/io˘l.h
>

23 
	~<sys/sockë.h
>

24 
	~<löux/ax25.h
>

25 
	~<löux/if_¨p.h
>

26 
	~<˘y≥.h
>

27 
	~<î∫o.h
>

28 
	~<f˙é.h
>

29 
	~<°rög.h
>

30 
	~<ãrmios.h
>

32 
	~<°dlib.h
>

33 
	~<°dio.h
>

34 
	~<uni°d.h
>

35 
	~"√t-suµ‹t.h
"

36 
	~"∑th«mes.h
"

37 
	~"öé.h
"

39 
	$AX25_Ωröt
(
›ti⁄s
)

41 
FILE
 *
f
 = 
	`f›í
(
_PATH_PROCNET_AX25_ROUTE
, "r");

42 
buf„r
[256];

43 
u£
;

45 i‡(
f
 =
NULL
) {

46 
	`≥º‹
(
_PATH_PROCNET_AX25_ROUTE
);

47 
	`¥ötf
(
	`_
("AX.25Çot configured inÅhis system.\n"));

50 
	`¥ötf
(
	`_
("Kernel AX.25ÑoutingÅable\n"));

51 
	`¥ötf
(
	`_
("Destination Iface Use\n"));

52 
	`fgës
(
buf„r
, 256, 
f
);

53 
	`fgës
(
buf„r
, 256, 
f
)) {

54 
buf„r
[9] = 0;

55 
buf„r
[14] = 0;

56 
u£
 = 
	`©oi
(
buf„r
 + 15);

57 
	`¥ötf
("%-9s %-5s %5d\n",

58 
buf„r
, buf„∏+ 10, 
u£
);

60 
	`f˛o£
(
f
);

62 
	}
}

	@interface/net-tools/lib/ddp.c

15 
	~"c⁄fig.h
"

17 #i‡
HAVE_AFATALK


18 
	~<asm/ty≥s.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<sys/sockë.h
>

21 
	~<löux/©Æk.h
>

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<î∫o.h
>

25 
	~<˘y≥.h
>

26 
	~<°rög.h
>

27 
	~<uni°d.h
>

28 
	~<√töë/ö.h
>

29 
	~"√t-suµ‹t.h
"

30 
	~"∑th«mes.h
"

31 
	~"öé.h
"

32 
	~"utû.h
"

35 *
	$ddp_¥öt
(*
±r
)

37 
buff
[64];

38 
sockaddr_©
 *
ßt
 = (sockaddr_© *Ë(
±r
 - 2);

39 
	`•rötf
(
buff
, "%d/%d", (Ë
	`¡ohs
(
ßt
->
ßt_addr
.
s_√t
), (Ëßt->ßt_addr.
s_node
);

40  (
buff
);

41 
	}
}

45 *
	$ddp_•röt
(
sockaddr
 *
ßp
, 
numîic
)

47 
buf
[64];

49 i‡(
ßp
->
ß_Ámûy
 !
AF_APPLETALK
)

50  
	`ß„_°∫˝y
(
buf
, 
	`_
("[NONE SET]"), (buf));

51  (
	`ddp_¥öt
(
ßp
->
ß_d©a
));

52 
	}
}

55 
a·y≥
 
	gddp_a·y≥
 =

57 "ddp", 
NULL
, 
AF_APPLETALK
, 0,

58 
ddp_¥öt
, 
ddp_•röt
, 
NULL
, NULL,

59 
NULL
 , NULL, NULL,

	@interface/net-tools/lib/ddp_gr.c

18 
	~"c⁄fig.h
"

20 #i‡
HAVE_AFATALK


21 
	~<asm/ty≥s.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<sys/sockë.h
>

24 
	~<löux/©Æk.h
>

25 
	~<°dlib.h
>

26 
	~<°dio.h
>

27 
	~<î∫o.h
>

28 
	~<˘y≥.h
>

29 
	~<°rög.h
>

30 
	~<uni°d.h
>

31 
	~<√töë/ö.h
>

32 
	~"√t-suµ‹t.h
"

33 
	~"∑th«mes.h
"

34 
	~"öé.h
"

37 
	#Êags_decode
(
i
,
o
) do { \

38 
o
[0] = '\0'; \

39 i‡(
i
 & 
RTF_UP
Ë
	`°rˇt
(
o
, "U"); \

40 i‡(
i
 & 
RTF_GATEWAY
Ë
	`°rˇt
(
o
, "G"); \

41 i‡(
i
 & 
RTF_REJECT
Ë
	`°rˇt
(
o
, "!"); \

42 i‡(
i
 & 
RTF_HOST
Ë
	`°rˇt
(
o
, "H"); \

43 i‡(
i
 & 
RTF_REINSTATE
Ë
	`°rˇt
(
o
, "R"); \

44 i‡(
i
 & 
RTF_DYNAMIC
Ë
	`°rˇt
(
o
, "D"); \

45 i‡(
i
 & 
RTF_MODIFIED
Ë
	`°rˇt
(
o
, "M"); \

46 i‡(
i
 & 
RTF_DEFAULT
Ë
	`°rˇt
(
o
, "d"); \

47 i‡(
i
 & 
RTF_ALLONLINK
Ë
	`°rˇt
(
o
, "a"); \

48 i‡(
i
 & 
RTF_ADDRCONF
Ë
	`°rˇt
(
o
, "c"); \

49 i‡(
i
 & 
RTF_NONEXTHOP
Ë
	`°rˇt
(
o
, "o"); \

50 i‡(
i
 & 
RTF_EXPIRES
Ë
	`°rˇt
(
o
, "e"); \

51 i‡(
i
 & 
RTF_CACHE
Ë
	`°rˇt
(
o
, "c"); \

52 i‡(
i
 & 
RTF_FLOW
Ë
	`°rˇt
(
o
, "f"); \

53 i‡(
i
 & 
RTF_POLICY
Ë
	`°rˇt
(
o
, "p"); \

54 i‡(
i
 & 
RTF_LOCAL
Ë
	`°rˇt
(
o
, "l"); \

55 i‡(
i
 & 
RTF_MTU
Ë
	`°rˇt
(
o
, "u"); \

56 i‡(
i
 & 
RTF_WINDOW
Ë
	`°rˇt
(
o
, "w"); \

57 i‡(
i
 & 
RTF_IRTT
Ë
	`°rˇt
(
o
, "i"); \

58 i‡(
i
 & 
RTF_NOTCACHED
Ë
	`°rˇt
(
o
, "n"); \

59 } 0)

	)

61 
	$DDP_Ωröt
(
›ti⁄s
)

63 
FILE
 *
Â
;

64 *
de°
, *
gw
, *
dev
, *
Êags
;

65 
oÊags
[32];

66 *
hdr
 = "Destination Gateway Device Flags";

68 
Â
 = 
	`f›í
(
_PATH_PROCNET_ATALK_ROUTE
, "r");

70 i‡(!
Â
) {

71 
	`≥º‹
("Eº‹ o≥nög " 
_PATH_PROCNET_ATALK_ROUTE
);

72 
	`Ârötf
(
°dîr
, "DDP (AppleTalk)Çot configured onÅhis system.\n");

76 
	`fsˇnf
(
Â
, "%a†%a†%a†%as\n", &
de°
, &
gw
, &
Êags
, &
dev
);

77 
	`‰ì
(
de°
); fªe(
gw
); fªe(
dev
); fªe(
Êags
);

79 
	`¥ötf
("%s\n", 
hdr
);

81 
	`fsˇnf
(
Â
, "%a†%a†%a†%as\n", &
de°
, &
gw
, &
Êags
, &
dev
) == 4) {

82 
iÊags
 = 
	`©oi
(
Êags
);

83 
	`Êags_decode
(
iÊags
, 
oÊags
);

84 
	`¥ötf
("%-16s%-16s%-16s%-s\n", 
de°
, 
gw
, 
dev
, 
oÊags
);

85 
	`‰ì
(
de°
); fªe(
gw
); fªe(
dev
); fªe(
Êags
);

88 
	`f˛o£
(
Â
);

92 
	}
}

	@interface/net-tools/lib/ec_hw.c

15 
	~"c⁄fig.h
"

17 #i‡
HAVE_HWEC


19 
	~<°dlib.h
>

20 
	~<√t/if_¨p.h
>

21 
	~"√t-suµ‹t.h
"

23 
hwty≥
 
	gec_hwty≥
 =

25 "ec", 
NULL
 , 
ARPHRD_ECONET
, 0,

26 
NULL
, NULL, NULL

	@interface/net-tools/lib/econet.c

19 
	~"c⁄fig.h
"

21 #i‡
HAVE_AFECONET


23 
	~<sys/ty≥s.h
>

24 
	~<sys/sockë.h
>

25 
	~<°dio.h
>

26 
	~<√ãc⁄ë/ec.h
>

28 
	~"vîsi⁄.h
"

29 
	~"√t-suµ‹t.h
"

30 
	~"∑th«mes.h
"

31 
	~"öé.h
"

36 
	$ec_¥öt
(*
±r
)

38 
buff
[64];

39 
ec_addr
 *
ec
 = (ec_add∏*Ë
±r
;

40 
	`•rötf
(
buff
, "%d.%d", 
ec
->
√t
,Éc->
°©i⁄
);

41  
buff
;

42 
	}
}

47 
	$ec_•röt
(
sockaddr
 *
ßp
, 
numîic
)

49 
sockaddr_ec
 *
£c
 = (sockaddr_e¯*Ë
ßp
;

51 i‡(
ßp
->
ß_Ámûy
 !
AF_ECONET
)

52  
	`_
("[NONE SET]");

54  
	`ec_¥öt
((*Ë&
£c
->
addr
);

55 
	}
}

58 
	$ec_öput
(
ty≥
, *
buÂ
, 
sockaddr
 *
ßp
)

60 
sockaddr_ec
 *
£c
 = (sockaddr_e¯*Ë
ßp
;

61 
√t
, 
°n
;

62 
	`ssˇnf
(
buÂ
, "%d.%d", &
√t
, &
°n
)) {

64 
£c
->
addr
.
°©i⁄
 = 
°n
;

65 
£c
->
addr
.
√t
 =Çet;

68 i‡(
	`ssˇnf
(
buÂ
, "%d", &
°n
) == 1) {

69 
£c
->
addr
.
√t
 = 0;

70 
£c
->
addr
.
°©i⁄
 = 
°n
;

75 
	}
}

77 
a·y≥
 
	gec_a·y≥
 =

79 "ec", 
NULL
, 
AF_ECONET
, 0,

80 
ec_¥öt
, 
ec_•röt
, 
ec_öput
, 
NULL
,

81 
NULL
, NULL, NULL,

	@interface/net-tools/lib/ether.c

16 
	~"c⁄fig.h
"

18 #i‡
HAVE_HWETHER


19 
	~<sys/ty≥s.h
>

20 
	~<sys/sockë.h
>

21 
	~<√t/if_¨p.h
>

22 
	~<löux/if_ëhî.h
>

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

25 
	~<î∫o.h
>

26 
	~<˘y≥.h
>

27 
	~<°rög.h
>

28 
	~<uni°d.h
>

29 
	~"√t-suµ‹t.h
"

30 
	~"∑th«mes.h
"

31 
	~"öé.h
"

32 
	~"utû.h
"

34 
hwty≥
 
ëhî_hwty≥
;

38 *
	$¥_ëhî
(*
±r
)

40 
buff
[64];

42 
	`¢¥ötf
(
buff
, (buff), "%02x:%02x:%02x:%02x:%02x:%02x",

43 (
±r
[0] & 0377), (ptr[1] & 0377), (ptr[2] & 0377),

44 (
±r
[3] & 0377), (ptr[4] & 0377), (ptr[5] & 0377)

46  (
buff
);

47 
	}
}

51 
	$ö_ëhî
(*
buÂ
, 
sockaddr
 *
ßp
)

53 *
±r
;

54 
c
, *
‹ig
;

55 
i
;

56 
vÆ
;

58 
ßp
->
ß_Ámûy
 = 
ëhî_hwty≥
.
ty≥
;

59 
±r
 = 
ßp
->
ß_d©a
;

61 
i
 = 0;

62 
‹ig
 = 
buÂ
;

63 (*
buÂ
 !'\0'Ë&& (
i
 < 
ETH_ALEN
)) {

64 
vÆ
 = 0;

65 
c
 = *
buÂ
++;

66 i‡(
	`isdigô
(
c
))

67 
vÆ
 = 
c
 - '0';

68 i‡(
c
 >= 'a' && c <= 'f')

69 
vÆ
 = 
c
 - 'a' + 10;

70 i‡(
c
 >= 'A' && c <= 'F')

71 
vÆ
 = 
c
 - 'A' + 10;

73 #ifde‡
DEBUG


74 
	`Ârötf
(
°dîr
, 
	`_
("ö_ëhî(%s): invÆidÉthîáddªss!\n"), 
‹ig
);

76 
î∫o
 = 
EINVAL
;

79 
vÆ
 <<= 4;

80 
c
 = *
buÂ
;

81 i‡(
	`isdigô
(
c
))

82 
vÆ
 |
c
 - '0';

83 i‡(
c
 >= 'a' && c <= 'f')

84 
vÆ
 |
c
 - 'a' + 10;

85 i‡(
c
 >= 'A' && c <= 'F')

86 
vÆ
 |
c
 - 'A' + 10;

87 i‡(
c
 == ':' || c == 0)

88 
vÆ
 >>= 4;

90 #ifde‡
DEBUG


91 
	`Ârötf
(
°dîr
, 
	`_
("ö_ëhî(%s): invÆidÉthîáddªss!\n"), 
‹ig
);

93 
î∫o
 = 
EINVAL
;

96 i‡(
c
 != 0)

97 
buÂ
++;

98 *
±r
++ = (Ë(
vÆ
 & 0377);

99 
i
++;

102 i‡(*
buÂ
 == ':') {

103 i‡(
i
 =
ETH_ALEN
) {

104 #ifde‡
DEBUG


105 
	`Ârötf
(
°dîr
, 
	`_
("in_ether(%s):Årailing : ignored!\n"),

106 
‹ig
)

110 
buÂ
++;

115 i‡((
i
 =
ETH_ALEN
Ë&& (*
buÂ
 != '\0')) {

116 #ifde‡
DEBUG


117 
	`Ârötf
(
°dîr
, 
	`_
("ö_ëhî(%s):Åøûög junk!\n"), 
‹ig
);

118 
î∫o
 = 
EINVAL
;

122 #ifde‡
DEBUG


123 
	`Ârötf
(
°dîr
, "ö_ëhî(%s): %s\n", 
‹ig
, 
	`¥_ëhî
(
ßp
->
ß_d©a
));

127 
	}
}

130 
hwty≥
 
	gëhî_hwty≥
 =

132 "ëhî", 
NULL
, 
ARPHRD_ETHER
, 
ETH_ALEN
,

133 
¥_ëhî
, 
ö_ëhî
, 
NULL


	@interface/net-tools/lib/eui64.c

18 
	~"c⁄fig.h
"

20 #i‡
HAVE_HWEUI64


22 
	~<sys/ty≥s.h
>

23 
	~<sys/io˘l.h
>

24 
	~<sys/sockë.h
>

25 
	~<√t/if_¨p.h
>

26 
	~<°dlib.h
>

27 
	~<°dio.h
>

28 
	~<˘y≥.h
>

29 
	~<î∫o.h
>

30 
	~<f˙é.h
>

31 
	~<°rög.h
>

32 
	~<ãrmios.h
>

33 
	~<uni°d.h
>

34 
	~"√t-suµ‹t.h
"

35 
	~"∑th«mes.h
"

36 
	~"öé.h
"

42 
	#EUI64_ALEN
 8

	)

44 #i‚de‡
ARPHRD_EUI64


45 
	#ARPHRD_EUI64
 27

	)

49 
hwty≥
 
	geui64_hwty≥
;

52 *
	$¥_eui64
–*
±r
 )

54 
buff
[64];

56 
	`¢¥ötf
(
buff
, (buff), "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X",

57 (
±r
[0] & 0377), (ptr[1] & 0377), (ptr[2] & 0377), (ptr[3] & 0377),

58 (
±r
[4] & 0377), (ptr[5] & 0377), (ptr[6] & 0377), (ptr[7] & 0377)

60  (
buff
);

61 
	}
}

64 
	$ö_eui64
–*
buÂ
, 
sockaddr
 *
ßp
 )

66 *
±r
;

67 
c
, *
‹ig
;

68 
i
;

69 
vÆ
;

71 
ßp
->
ß_Ámûy
 = 
eui64_hwty≥
.
ty≥
;

72 
±r
 = 
ßp
->
ß_d©a
;

74 
i
 = 0;

75 
‹ig
 = 
buÂ
;

77 (*
buÂ
 !'\0'Ë&& (
i
 < 
EUI64_ALEN
)) {

78 
vÆ
 = 0;

79 
c
 = *
buÂ
++;

80 i‡(
	`isdigô
(
c
))

81 
vÆ
 = 
c
 - '0';

82 i‡(
c
 >= 'a' && c <= 'f')

83 
vÆ
 = 
c
 - 'a' + 10;

84 i‡(
c
 >= 'A' && c <= 'F')

85 
vÆ
 = 
c
 - 'A' + 10;

87 #ifde‡
DEBUG


88 
	`Ârötf
–
°dîr
, 
	`_
("in_eui64(%s): invalidÉui64áddress!\n"),

89 
‹ig
 );

91 
î∫o
 = 
EINVAL
;

95 
vÆ
 <<= 4;

96 
c
 = *
buÂ
;

97 i‡(
	`isdigô
(
c
))

98 
vÆ
 |
c
 - '0';

99 i‡(
c
 >= 'a' && c <= 'f')

100 
vÆ
 |
c
 - 'a' + 10;

101 i‡(
c
 >= 'A' && c <= 'F')

102 
vÆ
 |
c
 - 'A' + 10;

103 i‡(
c
 == ':' || c == 0)

104 
vÆ
 >>= 4;

106 #ifde‡
DEBUG


107 
	`Ârötf
–
°dîr
, 
	`_
("in_eui64(%s): invalidÉui64áddress!\n"),

108 
‹ig
 );

110 
î∫o
 = 
EINVAL
;

114 i‡(
c
 != 0)

115 
buÂ
++;

117 *
±r
++ = (Ë(
vÆ
 & 0377);

118 
i
++;

121 i‡(*
buÂ
 == ':') {

122 i‡(
i
 =
EUI64_ALEN
) {

123 #ifde‡
DEBUG


124 
	`Ârötf
(
°dîr
, 
	`_
("in_eui64(%s):Årailing : ignored!\n"),

125 
‹ig
)

129 
buÂ
++;

134 i‡((
i
 =
EUI64_ALEN
Ë&& (*
buÂ
 != '\0')) {

135 #ifde‡
DEBUG


136 
	`Ârötf
(
°dîr
, 
	`_
("ö_eui64(%s):Åøûög junk!\n"), 
‹ig
);

137 
î∫o
 = 
EINVAL
;

141 #ifde‡
DEBUG


142 
	`Ârötf
(
°dîr
, "ö_eui64(%s): %s\n", 
‹ig
, 
	`¥_eui64
(
ßp
->
ß_d©a
));

146 
	}
}

148 
hwty≥
 
	geui64_hwty≥
 =

150 "eui64", 
NULL
, 
ARPHRD_EUI64
, 
EUI64_ALEN
,

151 
¥_eui64
, 
ö_eui64
, 
NULL
, 0

	@interface/net-tools/lib/fddi.c

17 
	~"c⁄fig.h
"

19 
	~<„©uªs.h
>

21 #i‡
HAVE_HWFDDI


22 
	~<sys/ty≥s.h
>

23 
	~<sys/sockë.h
>

24 
	~<√t/if_¨p.h
>

25 #i‚de‡
ARPHRD_FDDI


29 #i‡
__GLIBC__
 >= 2

30 
	~<√töë/if_fddi.h
>

32 
	~<löux/if_fddi.h
>

34 
	~<°dlib.h
>

35 
	~<°dio.h
>

36 
	~<î∫o.h
>

37 
	~<˘y≥.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~"√t-suµ‹t.h
"

41 
	~"∑th«mes.h
"

42 
	~"öé.h
"

43 
	~"utû.h
"

45 
hwty≥
 
fddi_hwty≥
;

49 *
	$¥_fddi
(*
±r
)

51 
buff
[64];

53 
	`¢¥ötf
(
buff
, (buff), "%02X-%02X-%02X-%02X-%02X-%02X",

54 (
±r
[0] & 0377), (ptr[1] & 0377), (ptr[2] & 0377),

55 (
±r
[3] & 0377), (ptr[4] & 0377), (ptr[5] & 0377)

57  (
buff
);

58 
	}
}

62 
	$ö_fddi
(*
buÂ
, 
sockaddr
 *
ßp
)

64 *
±r
;

65 
c
, *
‹ig
;

66 
i
, 
vÆ
;

68 
ßp
->
ß_Ámûy
 = 
fddi_hwty≥
.
ty≥
;

69 
±r
 = 
ßp
->
ß_d©a
;

71 
i
 = 0;

72 
‹ig
 = 
buÂ
;

73 (*
buÂ
 !'\0'Ë&& (
i
 < 
FDDI_K_ALEN
)) {

74 
vÆ
 = 0;

75 
c
 = *
buÂ
++;

76 i‡(
	`isdigô
(
c
))

77 
vÆ
 = 
c
 - '0';

78 i‡(
c
 >= 'a' && c <= 'f')

79 
vÆ
 = 
c
 - 'a' + 10;

80 i‡(
c
 >= 'A' && c <= 'F')

81 
vÆ
 = 
c
 - 'A' + 10;

83 #ifde‡
DEBUG


84 
	`Ârötf
(
°dîr
, 
	`_
("ö_fddi(%s): invÆid fddòaddªss!\n"), 
‹ig
);

86 
î∫o
 = 
EINVAL
;

89 
vÆ
 <<= 4;

90 
c
 = *
buÂ
++;

91 i‡(
	`isdigô
(
c
))

92 
vÆ
 |
c
 - '0';

93 i‡(
c
 >= 'a' && c <= 'f')

94 
vÆ
 |
c
 - 'a' + 10;

95 i‡(
c
 >= 'A' && c <= 'F')

96 
vÆ
 |
c
 - 'A' + 10;

98 #ifde‡
DEBUG


99 
	`Ârötf
(
°dîr
, 
	`_
("ö_fddi(%s): invÆid fddòaddªss!\n"), 
‹ig
);

101 
î∫o
 = 
EINVAL
;

104 *
±r
++ = (Ë(
vÆ
 & 0377);

105 
i
++;

108 i‡(*
buÂ
 == ':') {

109 i‡(
i
 =
FDDI_K_ALEN
) {

110 #ifde‡
DEBUG


111 
	`Ârötf
(
°dîr
, 
	`_
("in_fddi(%s):Årailing : ignored!\n"),

112 
‹ig
)

116 
buÂ
++;

121 i‡((
i
 =
FDDI_K_ALEN
Ë&& (*
buÂ
 != '\0')) {

122 #ifde‡
DEBUG


123 
	`Ârötf
(
°dîr
, 
	`_
("ö_fddi(%s):Åøûög junk!\n"), 
‹ig
);

124 
î∫o
 = 
EINVAL
;

128 #ifde‡
DEBUG


129 
	`Ârötf
(
°dîr
, "ö_fddi(%s): %s\n", 
‹ig
, 
	`¥_fddi
(
ßp
->
ß_d©a
));

133 
	}
}

136 
hwty≥
 
	gfddi_hwty≥
 =

138 "fddi", 
NULL
, 
ARPHRD_FDDI
, 
FDDI_K_ALEN
,

139 
¥_fddi
, 
ö_fddi
, 
NULL


	@interface/net-tools/lib/frame.c

21 
	~"c⁄fig.h
"

23 #i‡
HAVE_HWFR


25 
	~<sys/ty≥s.h
>

26 
	~<sys/io˘l.h
>

27 
	~<sys/sockë.h
>

28 
	~<√t/if_¨p.h
>

29 
	~<°dlib.h
>

30 
	~<°dio.h
>

31 
	~<˘y≥.h
>

32 
	~<î∫o.h
>

33 
	~<f˙é.h
>

34 
	~<°rög.h
>

35 
	~<ãrmios.h
>

36 
	~<uni°d.h
>

37 
	~"√t-suµ‹t.h
"

38 
	~"∑th«mes.h
"

40 *
	$¥_dlci
(*
±r
)

42 
buf
[12];

44 
	`¢¥ötf
(
buf
, (buf), "%i", *(*Ë
±r
);

45  (
buf
);

46 
	}
}

48 
hwty≥
 
	gdlci_hwty≥
 =

50 "dlci", 
NULL
, 
ARPHRD_DLCI
, 3,

51 
¥_dlci
, 
NULL
, NULL, 0

54 
hwty≥
 
	g‰ad_hwty≥
 =

56 "‰ad", 
NULL
, 
ARPHRD_FRAD
, 0,

57 
NULL
, NULL, NULL, 0

	@interface/net-tools/lib/getargs.c

15 
	~"c⁄fig.h
"

16 
	~<sys/ty≥s.h
>

17 
	~<sys/sockë.h
>

18 
	~<√t/if.h
>

19 
	~<î∫o.h
>

20 
	~<sig«l.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<uni°d.h
>

25 
	~"√t-suµ‹t.h
"

26 
	~"∑th«mes.h
"

30 
	$gë¨gs
(*
°rög
, *
¨gumíts
[])

32 
Àn
 = 
	`°æí
(
°rög
);

33 
ãmp
[
Àn
+1];

34 *
•
, *
±r
;

35 
i
, 
¨gc
;

36 
w™t
;

42 
•
 = 
°rög
;

43 
i
 = 0;

44 
	`°r˝y
(
ãmp
, 
°rög
);

45 
±r
 = 
ãmp
;

51 *
±r
 !'\0' && 
i
 < 31) {

53 *
±r
 == ' ' || *ptr == '\t')

54 
±r
++;

57 
¨gumíts
[
i
++] = 
•
;

60 i‡(*
±r
 == '"' || *ptr == '\'') {

66 
w™t
 = *
±r
++;

67 *
±r
 != '\0') {

68 i‡(*
±r
 =
w™t
 && *(ptr - 1) != '\\') {

69 
±r
++;

72 *
•
++ = *
±r
++;

76 *
±r
 != '\0' && *ptr != ' ' && *ptr != '\t')

77 *
•
++ = *
±r
++;

79 *
•
++ = '\0';

82 i‡(*
±r
 != '\0') {

83 *
±r
 == ' ' || *ptr == '\t')

84 
±r
++;

87 
¨gc
 = 
i
;

88 
i
 < 32)

89 
¨gumíts
[
i
++] = (*Ë
NULL
;

90  (
¨gc
);

91 
	}
}

	@interface/net-tools/lib/getroute.c

32 
	~<°dio.h
>

33 
	~<°rög.h
>

34 
	~"√t-suµ‹t.h
"

35 
	~"∑th«mes.h
"

36 
	~"vîsi⁄.h
"

37 
	~"c⁄fig.h
"

38 
	~"öé.h
"

39 
	~"utû.h
"

41 
a·y≥
 
un•ec_a·y≥
;

42 
a·y≥
 
unix_a·y≥
;

43 
a·y≥
 
öë_a·y≥
;

44 
a·y≥
 
öë6_a·y≥
;

45 
a·y≥
 
ax25_a·y≥
;

46 
a·y≥
 
√åom_a·y≥
;

47 
a·y≥
 
ùx_a·y≥
;

48 
a·y≥
 
ddp_a·y≥
;

49 
a·y≥
 
x25_a·y≥
;

51 
	$gërouã_öô
()

53 #i‡
HAVE_AFINET


54 
öë_a·y≥
.
Ωröt
 = 
INET_Ωröt
;

56 #i‡
HAVE_AFINET6


57 
öë6_a·y≥
.
Ωröt
 = 
INET6_Ωröt
;

59 #i‡
HAVE_AFNETROM


60 
√åom_a·y≥
.
Ωröt
 = 
NETROM_Ωröt
;

62 #i‡
HAVE_AFAX25


63 
ax25_a·y≥
.
Ωröt
 = 
AX25_Ωröt
;

65 #i‡
HAVE_AFIPX


66 
ùx_a·y≥
.
Ωröt
 = 
IPX_Ωröt
;

68 #i‡
HAVE_AFATALK


69 
ddp_a·y≥
.
Ωröt
 = 
DDP_Ωröt
;

71 #i‡
HAVE_AFX25


72 
x25_a·y≥
.
Ωröt
 = 
X25_Ωröt
;

74 
	}
}

76 
	$rouã_öfo
(c⁄° *
a‚ame
, 
›ti⁄s
)

78 
a·y≥
 *
≠
;

79 *
tmp1
, *
tmp2
;

80 
found
 = 
E_NOTFOUND
, 
rc
;

81 
buf
[256];

83 
	`ß„_°∫˝y
(
buf
, 
a‚ame
, (buf));

85 
tmp1
 = 
buf
;

87 
tmp1
) {

89 
≠
 = 
NULL
;

91 i‡((
tmp2
 = 
	`ödex
(
tmp1
, ',')))

92 *
tmp2
++ = '\0';

94 i‡(!
tmp1
[0]) {

95 
tmp1
 = 
tmp2
;

98 
≠
 = 
	`gë_a·y≥
(
tmp1
);

100 i‡(!
≠
) {

101 
	`Ârötf
(
°dîr
, 
	`_
("Addªs†Ámûy `%s'ÇŸ suµ‹ãd.\n"), 
tmp1
);

102  (
E_OPTERR
);

104 
tmp1
 = 
tmp2
;

106 i‡(!
≠
->
Ωröt
) {

107 
	`Ârötf
(
°dîr
, 
	`_
("Nÿroutög f‹áddªs†Ámûy `%s'.\n"), 
≠
->
«me
);

108  (
E_OPTERR
);

110 
found
 = 0;

112 i‡((
rc
 = 
≠
->
	`Ωröt
(
›ti⁄s
)))

113  (
rc
);

116  (
found
);

117 
	}
}

	@interface/net-tools/lib/hdlclapb.c

20 
	~"c⁄fig.h
"

22 #i‡
HAVE_HWHDLCLAPB


24 
	~<sys/ty≥s.h
>

25 
	~<sys/io˘l.h
>

26 
	~<sys/sockë.h
>

27 
	~<√t/if_¨p.h
>

28 
	~<°dlib.h
>

29 
	~<°dio.h
>

30 
	~<˘y≥.h
>

31 
	~<î∫o.h
>

32 
	~<f˙é.h
>

33 
	~<°rög.h
>

34 
	~<ãrmios.h
>

35 
	~<uni°d.h
>

36 
	~"√t-suµ‹t.h
"

37 
	~"∑th«mes.h
"

39 #i‚de‡
ARPHRD_HDLC


41 
	#ARPHRD_HDLC
 513

	)

44 #i‚de‡
ARPHRD_LAPB


46 
	#ARPHRD_LAPB
 516

	)

49 
hwty≥
 
	ghdlc_hwty≥
 =

51 "hdlc", 
NULL
, 
ARPHRD_HDLC
, 0,

52 
NULL
, NULL, NULL, 0

54 
hwty≥
 
	gœpb_hwty≥
 =

56 "œpb", 
NULL
, 
ARPHRD_LAPB
, 0,

57 
NULL
, NULL, NULL, 0

	@interface/net-tools/lib/hippi.c

18 
	~"c⁄fig.h
"

20 #i‡
HAVE_HWHIPPI


21 
	~<sys/ty≥s.h
>

22 
	~<sys/sockë.h
>

23 
	~<√t/if_¨p.h
>

24 
	~<°dlib.h
>

25 
	~<°dio.h
>

26 
	~<î∫o.h
>

27 
	~<˘y≥.h
>

28 
	~<°rög.h
>

29 
	~<uni°d.h
>

30 
	~"√t-suµ‹t.h
"

31 
	~"∑th«mes.h
"

32 
	~"öé.h
"

33 
	~"utû.h
"

39 
	#HIPPI_ALEN
 6

	)

40 #i‚de‡
ARPHRD_HIPPI


41 
	#ARPHRD_HIPPI
 780

	)

45 
hwty≥
 
hùpi_hwty≥
;

49 *
	$¥_hùpi
(*
±r
)

51 
buff
[64];

53 
	`•rötf
(
buff
, "%02X:%02X:%02X:%02X:%02X:%02X",

54 (
±r
[0] & 0377), (ptr[1] & 0377), (ptr[2] & 0377),

55 (
±r
[3] & 0377), (ptr[4] & 0377), (ptr[5] & 0377)

57  (
buff
);

58 
	}
}

62 
	$ö_hùpi
(*
buÂ
, 
sockaddr
 *
ßp
)

64 *
±r
;

65 
c
, *
‹ig
;

66 
i
, 
vÆ
;

68 
ßp
->
ß_Ámûy
 = 
hùpi_hwty≥
.
ty≥
;

69 
±r
 = 
ßp
->
ß_d©a
;

71 
i
 = 0;

72 
‹ig
 = 
buÂ
;

73 (*
buÂ
 !'\0'Ë&& (
i
 < 
HIPPI_ALEN
)) {

74 
vÆ
 = 0;

75 
c
 = *
buÂ
++;

76 i‡(
	`isdigô
(
c
))

77 
vÆ
 = 
c
 - '0';

78 i‡(
c
 >= 'a' && c <= 'f')

79 
vÆ
 = 
c
 - 'a' + 10;

80 i‡(
c
 >= 'A' && c <= 'F')

81 
vÆ
 = 
c
 - 'A' + 10;

83 #ifde‡
DEBUG


84 
	`Ârötf
(
°dîr
, 
	`_
("ö_hùpi(%s): invÆid hùpòaddªss!\n"), 
‹ig
);

86 
î∫o
 = 
EINVAL
;

89 
vÆ
 <<= 4;

90 
c
 = *
buÂ
++;

91 i‡(
	`isdigô
(
c
))

92 
vÆ
 |
c
 - '0';

93 i‡(
c
 >= 'a' && c <= 'f')

94 
vÆ
 |
c
 - 'a' + 10;

95 i‡(
c
 >= 'A' && c <= 'F')

96 
vÆ
 |
c
 - 'A' + 10;

98 #ifde‡
DEBUG


99 
	`Ârötf
(
°dîr
, 
	`_
("ö_hùpi(%s): invÆid hùpòaddªss!\n"), 
‹ig
);

101 
î∫o
 = 
EINVAL
;

104 *
±r
++ = (Ë(
vÆ
 & 0377);

105 
i
++;

108 i‡(*
buÂ
 == ':') {

109 i‡(
i
 =
HIPPI_ALEN
) {

110 #ifde‡
DEBUG


111 
	`Ârötf
(
°dîr
, 
	`_
("ö_hùpi(%s):Åøûög : ign‹ed!\n"), 
‹ig
)

115 
buÂ
++;

120 i‡((
i
 =
HIPPI_ALEN
Ë&& (*
buÂ
 != '\0')) {

121 #ifde‡
DEBUG


122 
	`Ârötf
(
°dîr
, 
	`_
("ö_hùpi(%s):Åøûög junk!\n"), 
‹ig
);

123 
î∫o
 = 
EINVAL
;

127 #ifde‡
DEBUG


128 
	`Ârötf
(
°dîr
, "ö_hùpi(%s): %s\n", 
‹ig
, 
	`¥_hùpi
(
ßp
->
ß_d©a
));

132 
	}
}

135 
hwty≥
 
	ghùpi_hwty≥
 =

137 "hùpi", 
NULL
, 
ARPHRD_HIPPI
, 
HIPPI_ALEN
,

138 
¥_hùpi
, 
ö_hùpi
, 
NULL
, 0

	@interface/net-tools/lib/hw.c

20 
	~<sys/ty≥s.h
>

21 
	~<sys/sockë.h
>

22 
	~<√t/if_¨p.h
>

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

25 
	~<î∫o.h
>

26 
	~<˘y≥.h
>

27 
	~<°rög.h
>

28 
	~<uni°d.h
>

29 
	~"c⁄fig.h
"

30 
	~"√t-suµ‹t.h
"

31 
	~"∑th«mes.h
"

32 
	~"öé.h
"

34 
hwty≥
 
un•ec_hwty≥
;

35 
hwty≥
 
lo›_hwty≥
;

37 
hwty≥
 
¶ù_hwty≥
;

38 
hwty≥
 
c¶ù_hwty≥
;

39 
hwty≥
 
¶ù6_hwty≥
;

40 
hwty≥
 
c¶ù6_hwty≥
;

41 
hwty≥
 
ad≠tive_hwty≥
;

42 
hwty≥
 
°rù_hwty≥
;

44 
hwty≥
 
ëhî_hwty≥
;

45 
hwty≥
 
fddi_hwty≥
;

46 
hwty≥
 
hùpi_hwty≥
;

47 
hwty≥
 
å_hwty≥
;

48 #ifde‡
ARPHRD_IEEE802_TR


49 
hwty≥
 
å_hwty≥1
;

52 
hwty≥
 
ax25_hwty≥
;

53 
hwty≥
 
ro£_hwty≥
;

54 
hwty≥
 
√åom_hwty≥
;

55 
hwty≥
 
x25_hwty≥
;

56 
hwty≥
 
tu¬ñ_hwty≥
;

58 
hwty≥
 
ash_hwty≥
;

60 
hwty≥
 
µp_hwty≥
;

62 
hwty≥
 
¨˙ë_hwty≥
;

64 
hwty≥
 
dlci_hwty≥
;

65 
hwty≥
 
‰ad_hwty≥
;

67 
hwty≥
 
hdlc_hwty≥
;

68 
hwty≥
 
œpb_hwty≥
;

70 
hwty≥
 
sô_hwty≥
;

72 
hwty≥
 
úda_hwty≥
;

74 
hwty≥
 
ec_hwty≥
;

76 
hwty≥
 
ib_hwty≥
;

78 
hwty≥
 
eui64_hwty≥
;

80 
hwty≥
 *
	ghwty≥s
[] =

83 &
lo›_hwty≥
,

85 #i‡
HAVE_HWSLIP


86 &
¶ù_hwty≥
,

87 &
c¶ù_hwty≥
,

88 &
¶ù6_hwty≥
,

89 &
c¶ù6_hwty≥
,

90 &
ad≠tive_hwty≥
,

92 #i‡
HAVE_HWSTRIP


93 &
°rù_hwty≥
,

95 #i‡
HAVE_HWASH


96 &
ash_hwty≥
,

98 #i‡
HAVE_HWETHER


99 &
ëhî_hwty≥
,

101 #i‡
HAVE_HWTR


102 &
å_hwty≥
,

103 #ifde‡
ARPHRD_IEEE802_TR


104 &
å_hwty≥1
,

107 #i‡
HAVE_HWAX25


108 &
ax25_hwty≥
,

110 #i‡
HAVE_HWNETROM


111 &
√åom_hwty≥
,

113 #i‡
HAVE_HWROSE


114 &
ro£_hwty≥
,

116 #i‡
HAVE_HWTUNNEL


117 &
tu¬ñ_hwty≥
,

119 #i‡
HAVE_HWPPP


120 &
µp_hwty≥
,

122 #i‡
HAVE_HWHDLCLAPB


123 &
hdlc_hwty≥
,

124 &
œpb_hwty≥
,

126 #i‡
HAVE_HWARC


127 &
¨˙ë_hwty≥
,

129 #i‡
HAVE_HWFR


130 &
dlci_hwty≥
,

131 &
‰ad_hwty≥
,

133 #i‡
HAVE_HWSIT


134 &
sô_hwty≥
,

136 #i‡
HAVE_HWFDDI


137 &
fddi_hwty≥
,

139 #i‡
HAVE_HWHIPPI


140 &
hùpi_hwty≥
,

142 #i‡
HAVE_HWIRDA


143 &
úda_hwty≥
,

145 #i‡
HAVE_HWEC


146 &
ec_hwty≥
,

148 #i‡
HAVE_HWX25


149 &
x25_hwty≥
,

151 #i‡
HAVE_HWIB


152 &
ib_hwty≥
,

154 #i‡
HAVE_HWEUI64


155 &
eui64_hwty≥
,

157 &
un•ec_hwty≥
,

158 
NULL


161 
	gsVhwöô
 = 0;

163 
	$hwöô
()

165 
lo›_hwty≥
.
tôÀ
 = 
	`_
("Local Loopback");

166 
un•ec_hwty≥
.
tôÀ
 = 
	`_
("UNSPEC");

167 #i‡
HAVE_HWSLIP


168 
¶ù_hwty≥
.
tôÀ
 = 
	`_
("Serial Line IP");

169 
c¶ù_hwty≥
.
tôÀ
 = 
	`_
("VJ Serial Line IP");

170 
¶ù6_hwty≥
.
tôÀ
 = 
	`_
("6-bit Serial Line IP");

171 
c¶ù6_hwty≥
.
tôÀ
 = 
	`_
("VJ 6-bit Serial Line IP");

172 
ad≠tive_hwty≥
.
tôÀ
 = 
	`_
("Adaptive Serial Line IP");

174 #i‡
HAVE_HWETHER


175 
ëhî_hwty≥
.
tôÀ
 = 
	`_
("Ethernet");

177 #i‡
HAVE_HWASH


178 
ash_hwty≥
.
tôÀ
 = 
	`_
("Ash");

180 #i‡
HAVE_HWFDDI


181 
fddi_hwty≥
.
tôÀ
 = 
	`_
("Fiber Distributed Data Interface");

183 #i‡
HAVE_HWHIPPI


184 
hùpi_hwty≥
.
tôÀ
 = 
	`_
("HIPPI");

186 #i‡
HAVE_HWAX25


187 
ax25_hwty≥
.
tôÀ
 = 
	`_
("AMPR AX.25");

189 #i‡
HAVE_HWROSE


190 
ro£_hwty≥
.
tôÀ
 = 
	`_
("AMPR ROSE");

192 #i‡
HAVE_HWNETROM


193 
√åom_hwty≥
.
tôÀ
 = 
	`_
("AMPR NET/ROM");

195 #i‡
HAVE_HWX25


196 
x25_hwty≥
.
tôÀ
 = 
	`_
("generic X.25");

198 #i‡
HAVE_HWTUNNEL


199 
tu¬ñ_hwty≥
.
tôÀ
 = 
	`_
("IPIP Tunnel");

201 #i‡
HAVE_HWPPP


202 
µp_hwty≥
.
tôÀ
 = 
	`_
("Point-to-Point Protocol");

204 #i‡
HAVE_HWHDLCLAPB


205 
hdlc_hwty≥
.
tôÀ
 = 
	`_
("(Cisco)-HDLC");

206 
œpb_hwty≥
.
tôÀ
 = 
	`_
("LAPB");

208 #i‡
HAVE_HWARC


209 
¨˙ë_hwty≥
.
tôÀ
 = 
	`_
("ARCnet");

211 #i‡
HAVE_HWFR


212 
dlci_hwty≥
.
tôÀ
 = 
	`_
("Frame Relay DLCI");

213 
‰ad_hwty≥
.
tôÀ
 = 
	`_
("Frame Relay Access Device");

215 #i‡
HAVE_HWSIT


216 
sô_hwty≥
.
tôÀ
 = 
	`_
("IPv6-in-IPv4");

218 #i‡
HAVE_HWIRDA


219 
úda_hwty≥
.
tôÀ
 = 
	`_
("IrLAP");

221 #i‡
HAVE_HWTR


222 
å_hwty≥
.
tôÀ
 = 
	`_
("16/4 Mbps Token Ring");

223 #ifde‡
ARPHRD_IEEE802_TR


224 
å_hwty≥1
.
tôÀ
 = 
	`_
("16/4 Mbps Token Ring (New)") ;

227 #i‡
HAVE_HWEC


228 
ec_hwty≥
.
tôÀ
 = 
	`_
("Econet");

230 #i‡
HAVE_HWIB


231 
ib_hwty≥
.
tôÀ
 = 
	`_
("InfiniBand");

233 #i‡
HAVE_HWEUI64


234 
eui64_hwty≥
.
tôÀ
 = 
	`_
("Generic EUI-64");

236 
sVhwöô
 = 1;

237 
	}
}

240 
hwty≥
 *
	$gë_hwty≥
(c⁄° *
«me
)

242 
hwty≥
 **
hwp
;

244 i‡(!
sVhwöô
)

245 
	`hwöô
();

247 
hwp
 = 
hwty≥s
;

248 *
hwp
 !
NULL
) {

249 i‡(!
	`°rcmp
((*
hwp
)->
«me
,Çame))

250  (*
hwp
);

251 
hwp
++;

253  (
NULL
);

254 
	}
}

258 
hwty≥
 *
	$gë_hw¡y≥
(
ty≥
)

260 
hwty≥
 **
hwp
;

262 i‡(!
sVhwöô
)

263 
	`hwöô
();

265 
hwp
 = 
hwty≥s
;

266 *
hwp
 !
NULL
) {

267 i‡((*
hwp
)->
ty≥
 ==Åype)

268  (*
hwp
);

269 
hwp
++;

271  (
NULL
);

272 
	}
}

275 
	$¥öt_hwli°
(
ty≥
) {

276 
cou¡
 = 0;

277 * 
txt
;

278 
hwty≥
 **
hwp
;

280 i‡(!
sVhwöô
)

281 
	`hwöô
();

283 
hwp
 = 
hwty≥s
;

284 *
hwp
 !
NULL
) {

285 i‡(((
ty≥
 =1Ë&& ((*
hwp
)->
Æí
 == 0)) || ((*hwp)->type == -1)) {

286 
hwp
++; ;

288 i‡((
cou¡
 % 3Ë=0Ë
	`Ârötf
(
°dîr
,count?"\n ":" ");

289 
txt
 = (*
hwp
)->
«me
; if (!txt)Åxt = "..";

290 
	`Ârötf
(
°dîr
,"%†(%sË",
txt
,(*
hwp
)->
tôÀ
);

291 
cou¡
++;

292 
hwp
++;

294 
	`Ârötf
(
°dîr
,"\n");

295 
	}
}

298 
	$hw_nuŒ_addªss
(
hwty≥
 *
hw
, *
≠
)

300 
i
;

301 *
addªss
 = (*)
≠
;

302 
i
 = 0; i < 
hw
->
Æí
; i++)

303 i‡(
addªss
[
i
])

306 
	}
}

	@interface/net-tools/lib/ib.c

17 
	~"c⁄fig.h
"

19 #i‡
HAVE_HWIB


20 
	~<sys/ty≥s.h
>

21 
	~<sys/sockë.h
>

22 
	~<√t/if_¨p.h
>

23 
	~<löux/if_öföib™d.h
>

24 
	~<°dlib.h
>

25 
	~<°dio.h
>

26 
	~<î∫o.h
>

27 
	~<˘y≥.h
>

28 
	~<°rög.h
>

29 
	~<uni°d.h
>

30 
	~"√t-suµ‹t.h
"

31 
	~"∑th«mes.h
"

32 
	~"öé.h
"

33 
	~"utû.h
"

35 
hwty≥
 
ib_hwty≥
;

39 *
	$¥_ib
(*
±r
)

41 
buff
[128];

42 *
pos
;

43 
i
;

45 
pos
 = 
buff
;

46 
i
 = 0; i < 
INFINIBAND_ALEN
; i++) {

47 
pos
 +
	`•rötf
’os, "%02X:", (*
±r
++ & 0377));

49 
buff
[
	`°æí
(buff) - 1] = '\0';

56  (
buff
);

57 
	}
}

61 
	$ö_ib
(*
buÂ
, 
sockaddr
 *
ßp
)

63 *
±r
;

64 
c
, *
‹ig
;

65 
i
;

66 
vÆ
;

68 
ßp
->
ß_Ámûy
 = 
ib_hwty≥
.
ty≥
;

69 
±r
 = 
ßp
->
ß_d©a
;

71 
i
 = 0;

72 
‹ig
 = 
buÂ
;

73 (*
buÂ
 !'\0'Ë&& (
i
 < 
INFINIBAND_ALEN
)) {

74 
vÆ
 = 0;

75 
c
 = *
buÂ
++;

76 i‡(
	`isdigô
(
c
))

77 
vÆ
 = 
c
 - '0';

78 i‡(
c
 >= 'a' && c <= 'f')

79 
vÆ
 = 
c
 - 'a' + 10;

80 i‡(
c
 >= 'A' && c <= 'F')

81 
vÆ
 = 
c
 - 'A' + 10;

83 #ifde‡
DEBUG


84 
	`Ârötf
(
°dîr
, 
	`_
("ö_ib(%s): invÆid inföib™dáddªss!\n"), 
‹ig
);

86 
î∫o
 = 
EINVAL
;

89 
vÆ
 <<= 4;

90 
c
 = *
buÂ
;

91 i‡(
	`isdigô
(
c
))

92 
vÆ
 |
c
 - '0';

93 i‡(
c
 >= 'a' && c <= 'f')

94 
vÆ
 |
c
 - 'a' + 10;

95 i‡(
c
 >= 'A' && c <= 'F')

96 
vÆ
 |
c
 - 'A' + 10;

97 i‡(
c
 == ':' || c == 0)

98 
vÆ
 >>= 4;

100 #ifde‡
DEBUG


101 
	`Ârötf
(
°dîr
, 
	`_
("ö_ib(%s): invÆid inföib™dáddªss!\n"), 
‹ig
);

103 
î∫o
 = 
EINVAL
;

106 i‡(
c
 != 0)

107 
buÂ
++;

108 *
±r
++ = (Ë(
vÆ
 & 0377);

109 
i
++;

112 i‡(*
buÂ
 == ':') {

113 i‡(
i
 =
INFINIBAND_ALEN
) {

114 #ifde‡
DEBUG


115 
	`Ârötf
(
°dîr
, 
	`_
("in_ib(%s):Årailing : ignored!\n"),

116 
‹ig
)

120 
buÂ
++;

125 i‡((
i
 =
INFINIBAND_ALEN
Ë&& (*
buÂ
 != '\0')) {

126 #ifde‡
DEBUG


127 
	`Ârötf
(
°dîr
, 
	`_
("ö_ib(%s):Åøûög junk!\n"), 
‹ig
);

128 
î∫o
 = 
EINVAL
;

132 #ifde‡
DEBUG


133 
	`Ârötf
(
°dîr
, "ö_ib(%s): %s\n", 
‹ig
, 
	`¥_ib
(
ßp
->
ß_d©a
));

137 
	}
}

140 
hwty≥
 
	gib_hwty≥
 =

142 "öföib™d", 
NULL
, 
ARPHRD_INFINIBAND
, 
INFINIBAND_ALEN
,

143 
¥_ib
, 
ö_ib
, 
NULL


	@interface/net-tools/lib/inet.c

29 
	~"c⁄fig.h
"

34 #i‡
HAVE_AFINET
 || 
HAVE_AFINET6


35 
	~<√töë/ö.h
>

36 
	~<sys/ty≥s.h
>

37 
	~<sys/sockë.h
>

38 
	~<¨∑/öë.h
>

39 
	~<¨∑/«me£r.h
>

40 
	~<˘y≥.h
>

41 
	~<î∫o.h
>

42 
	~<√tdb.h
>

43 
	~<ªsﬁv.h
>

44 
	~<°dlib.h
>

45 
	~<°rög.h
>

46 
	~<°dio.h
>

47 
	~<uni°d.h
>

48 
	~"vîsi⁄.h
"

49 
	~"√t-suµ‹t.h
"

50 
	~"∑th«mes.h
"

51 
	~"öé.h
"

52 
	~"utû.h
"

54 
h_î∫o
;

57 
	saddr
 {

58 
sockaddr_ö
 
	maddr
;

59 *
	m«me
;

60 
	mho°
;

61 
addr
 *
	m√xt
;

64 
	s£rvi˚
 {

65 
	mnumbî
;

66 *
	m«me
;

67 
£rvi˚
 *
	m√xt
;

70 
£rvi˚
 *
	gt˝_«me
 = 
NULL
, *
	gudp_«me
 = NULL, *
	gøw_«me
 = NULL;

72 #i‡
HAVE_AFINET


74 
addr
 *
	gINET_¬
 = 
NULL
;

77 
	$INET_ªsﬁve
(*
«me
, 
sockaddr_ö
 *
sö
, 
ho°fú°
)

79 
ho°ít
 *
hp
;

80 
√ã¡
 *
≈
;

83 
sö
->
sö_Ámûy
 = 
AF_INET
;

84 
sö
->
sö_p‹t
 = 0;

87 i‡(!
	`°rcmp
(
«me
, "default")) {

88 
sö
->
sö_addr
.
s_addr
 = 
INADDR_ANY
;

92 i‡(
	`öë_©⁄
(
«me
, &
sö
->
sö_addr
)) {

96 #ifde‡
DEBUG


97 i‡(
ho°fú°
Ë
	`Ârötf
 (
°dîr
, "gëho°by«mê(%s)\n", 
«me
);

99 i‡(
ho°fú°
 &&

100 (
hp
 = 
	`gëho°by«me
(
«me
)Ë!(
ho°ít
 *Ë
NULL
) {

101 
	`mem˝y
((*Ë&
sö
->
sö_addr
, (*Ë
hp
->
h_addr_li°
[0],

102 (
ö_addr
));

106 #ifde‡
DEBUG


107 
	`Ârötf
 (
°dîr
, "gë√tby«mê(%s)\n", 
«me
);

109 i‡((
≈
 = 
	`gë√tby«me
(
«me
)Ë!(
√ã¡
 *Ë
NULL
) {

110 
sö
->
sö_addr
.
s_addr
 = 
	`ht⁄l
(
≈
->
n_√t
);

113 i‡(
ho°fú°
) {

115 
î∫o
 = 
h_î∫o
;

118 #ifde‡
DEBUG


119 
	`ªs_öô
();

120 
_ªs
.
›ti⁄s
 |
RES_DEBUG
;

123 #ifde‡
DEBUG


124 
	`Ârötf
 (
°dîr
, "gëho°by«mê(%s)\n", 
«me
);

126 i‡((
hp
 = 
	`gëho°by«me
(
«me
)Ë=(
ho°ít
 *Ë
NULL
) {

127 
î∫o
 = 
h_î∫o
;

130 
	`mem˝y
((*Ë&
sö
->
sö_addr
, (*Ë
hp
->
h_addr_li°
[0],

131 (
ö_addr
));

134 
	}
}

141 
	$INET_ºesﬁve
(*
«me
, 
size_t
 
Àn
, 
sockaddr_ö
 *
sö
,

142 
numîic
, 
√tmask
)

144 
ho°ít
 *
ít
;

145 
√ã¡
 *
≈
;

146 
addr
 *
≤
;

147 
u_öt32_t
 
ad
, 
ho°_ad
;

148 
ho°
 = 0;

151 i‡(
sö
->
sö_Ámûy
 !
AF_INET
) {

152 #ifde‡
DEBUG


153 
	`Ârötf
(
°dîr
, 
	`_
("ºesﬁve: unsuµ‹àaddªs†Ámûy %d !\n"), 
sö
->
sö_Ámûy
);

155 
î∫o
 = 
EAFNOSUPPORT
;

158 
ad
 = 
sö
->
sö_addr
.
s_addr
;

159 #ifde‡
DEBUG


160 
	`Ârötf
 (
°dîr
, "ºesﬁve: %08lx, mask %08x,Çum %08x \n", 
ad
, 
√tmask
, 
numîic
);

162 i‡(
ad
 =
INADDR_ANY
) {

163 i‡((
numîic
 & 0x0FFF) == 0) {

164 i‡(
numîic
 & 0x8000)

165 
	`ß„_°∫˝y
(
«me
, "deÁu…", 
Àn
);

167 
	`ß„_°∫˝y
(
«me
, "*", 
Àn
);

171 i‡(
numîic
 & 0x0FFF) {

172 
	`ß„_°∫˝y
(
«me
, 
	`öë_¡ﬂ
(
sö
->
sö_addr
), 
Àn
);

176 i‡((
ad
 & (~
√tmask
)Ë!0 || (
numîic
 & 0x4000))

177 
ho°
 = 1;

179 
INET_¬
 = 
NULL
;

181 
≤
 = 
INET_¬
;

182 
≤
 !
NULL
) {

183 i‡(
≤
->
addr
.
sö_addr
.
s_addr
 =
ad
 &&Ön->
ho°
 == host) {

184 
	`ß„_°∫˝y
(
«me
, 
≤
->«me, 
Àn
);

185 #ifde‡
DEBUG


186 
	`Ârötf
 (
°dîr
, "ºesﬁve: found %†%08lx i¿ˇche\n", (
ho°
? "ho°": "√t"), 
ad
);

190 
≤
 =Ön->
√xt
;

193 
ho°_ad
 = 
	`¡ohl
(
ad
);

194 
≈
 = 
NULL
;

195 
ít
 = 
NULL
;

196 i‡(
ho°
) {

197 #ifde‡
DEBUG


198 
	`Ârötf
 (
°dîr
, "gëho°byadd∏(%08lx)\n", 
ad
);

200 
ít
 = 
	`gëho°byaddr
((*Ë&
ad
, 4, 
AF_INET
);

201 i‡(
ít
 !
NULL
)

202 
	`ß„_°∫˝y
(
«me
, 
ít
->
h_«me
, 
Àn
);

204 #ifde‡
DEBUG


205 
	`Ârötf
 (
°dîr
, "gë√tbyadd∏(%08lx)\n", 
ho°_ad
);

207 
≈
 = 
	`gë√tbyaddr
(
ho°_ad
, 
AF_INET
);

208 i‡(
≈
 !
NULL
)

209 
	`ß„_°∫˝y
(
«me
, 
≈
->
n_«me
, 
Àn
);

211 i‡((
ít
 =
NULL
Ë&& (
≈
 == NULL))

212 
	`ß„_°∫˝y
(
«me
, 
	`öë_¡ﬂ
(
sö
->
sö_addr
), 
Àn
);

213 
≤
 = (
addr
 *Ë
	`mÆloc
((addr));

214 
≤
->
addr
 = *
sö
;

215 
≤
->
√xt
 = 
INET_¬
;

216 
≤
->
ho°
 = host;

217 
≤
->
«me
 = (*Ë
	`mÆloc
(
	`°æí
(name) + 1);

218 
	`°r˝y
(
≤
->
«me
,Çame);

219 
INET_¬
 = 
≤
;

222 
	}
}

225 
	$INET_ª£º‹
(*
ãxt
)

227 
	`hîr‹
(
ãxt
);

228 
	}
}

232 *
	$INET_¥öt
(*
±r
)

234  (
	`öë_¡ﬂ
((*(
ö_addr
 *Ë
±r
)));

235 
	}
}

239 *
	$INET_•röt
(
sockaddr
 *
ßp
, 
numîic
)

241 
buff
[128];

243 i‡(
ßp
->
ß_Ámûy
 == 0xFFFF || sap->sa_family == 0)

244  
	`ß„_°∫˝y
(
buff
, 
	`_
("[NONE SET]"), (buff));

246 i‡(
	`INET_ºesﬁve
(
buff
, (buff), (
sockaddr_ö
 *Ë
ßp
,

247 
numîic
, 0xffffff00) != 0)

248  (
NULL
);

250  (
buff
);

251 
	}
}

253 *
	$INET_•rötmask
(
sockaddr
 *
ßp
, 
numîic
,

254 
√tmask
)

256 
buff
[128];

258 i‡(
ßp
->
ß_Ámûy
 == 0xFFFF || sap->sa_family == 0)

259  
	`ß„_°∫˝y
(
buff
, 
	`_
("[NONE SET]"), (buff));

260 i‡(
	`INET_ºesﬁve
(
buff
, (buff), (
sockaddr_ö
 *Ë
ßp
,

261 
numîic
, 
√tmask
) != 0)

262  (
NULL
);

263  (
buff
);

264 
	}
}

267 
	$INET_gësock
(*
buÂ
, 
sockaddr
 *
ßp
)

269 *
•
 = 
buÂ
, *
bp
;

270 
i
;

271 
vÆ
;

272 
sockaddr_ö
 *
sö
;

274 
sö
 = (
sockaddr_ö
 *Ë
ßp
;

275 
sö
->
sö_Ámûy
 = 
AF_INET
;

276 
sö
->
sö_p‹t
 = 0;

278 
vÆ
 = 0;

279 
bp
 = (*Ë&
vÆ
;

280 
i
 = 0; i < (
sö
->
sö_addr
.
s_addr
); i++) {

281 *
•
 = 
	`touµî
(*sp);

283 i‡((*
•
 >= 'A') && (*sp <= 'F'))

284 
bp
[
i
] |(Ë(*
•
 - 'A') + 10;

285 i‡((*
•
 >= '0') && (*sp <= '9'))

286 
bp
[
i
] |(Ë(*
•
 - '0');

290 
bp
[
i
] <<= 4;

291 
•
++;

292 *
•
 = 
	`touµî
(*sp);

294 i‡((*
•
 >= 'A') && (*sp <= 'F'))

295 
bp
[
i
] |(Ë(*
•
 - 'A') + 10;

296 i‡((*
•
 >= '0') && (*sp <= '9'))

297 
bp
[
i
] |(Ë(*
•
 - '0');

301 
•
++;

303 
sö
->
sö_addr
.
s_addr
 = 
	`ht⁄l
(
vÆ
);

305  (
•
 - 
buÂ
);

306 
	}
}

308 
	$INET_öput
(
ty≥
, *
buÂ
, 
sockaddr
 *
ßp
)

310 
ty≥
) {

312  (
	`INET_gësock
(
buÂ
, 
ßp
));

314  (
	`INET_ªsﬁve
(
buÂ
, (
sockaddr_ö
 *Ë
ßp
, 1));

316  (
	`INET_ªsﬁve
(
buÂ
, (
sockaddr_ö
 *Ë
ßp
, 0));

318 
	}
}

320 
	$INET_gë√tmask
(*
adr
, 
sockaddr
 *
m
, *
«me
)

322 
sockaddr_ö
 *
mask
 = (sockaddr_ö *Ë
m
;

323 *
¶ash
, *
íd
;

324 
¥efix
;

326 i‡((
¶ash
 = 
	`°rchr
(
adr
, '/')Ë=
NULL
)

329 *
¶ash
++ = '\0';

330 
¥efix
 = 
	`°πoul
(
¶ash
, &
íd
, 0);

331 i‡(*
íd
 != '\0')

334 i‡(
«me
) {

335 
	`•rötf
(
«me
, "/%d", 
¥efix
);

337 
mask
->
sö_Ámûy
 = 
AF_INET
;

338 
mask
->
sö_addr
.
s_addr
 = 
	`ht⁄l
(~(0xffffffffU >> 
¥efix
));

340 
	}
}

343 
a·y≥
 
	göë_a·y≥
 =

345 "öë", 
NULL
, 
AF_INET
, (),

346 
INET_¥öt
, 
INET_•röt
, 
INET_öput
, 
INET_ª£º‹
,

347 
NULL
 , NULL ,

348 
INET_gë√tmask
,

350 
NULL


355 
	$add2li°
(
£rvi˚
 **
«meba£
, £rvi˚ *
ôem
)

357 i‡(*
«meba£
 =
NULL
) {

358 *
«meba£
 = 
ôem
;

359 
ôem
->
√xt
 = 
NULL
;

361 
ôem
->
√xt
 = *
«meba£
;

362 *
«meba£
 = 
ôem
;

364 
	}
}

367 
£rvi˚
 *
	$£¨chli°
(
£rvi˚
 *
£rvi˚ba£
, 
numbî
)

369 
£rvi˚
 *
ôem
;

371 
ôem
 = 
£rvi˚ba£
; iãm !
NULL
; iãm = iãm->
√xt
) {

372 i‡(
ôem
->
numbî
 ==Çumber)

373  (
ôem
);

375  (
NULL
);

376 
	}
}

379 
	$ªad_£rvi˚s
()

381 
£rvít
 *
£
;

382 
¥Ÿ€¡
 *
≥
;

383 
£rvi˚
 *
ôem
;

385 
	`£t£rvít
(1);

386 (
£
 = 
	`gë£rvít
())) {

388 
ôem
 = (
£rvi˚
 *Ë
	`mÆloc
((service));

389 i‡(
ôem
 =
NULL
)

390 
	`≥º‹
("netstat");

391 
ôem
->
«me
 = 
	`°rdup
(
£
->
s_«me
);

392 
ôem
->
numbî
 = 
£
->
s_p‹t
;

395 i‡(!
	`°rcmp
(
£
->
s_¥Ÿo
, "tcp")) {

396 
	`add2li°
(&
t˝_«me
, 
ôem
);

397 } i‡(!
	`°rcmp
(
£
->
s_¥Ÿo
, "udp")) {

398 
	`add2li°
(&
udp_«me
, 
ôem
);

399 } i‡(!
	`°rcmp
(
£
->
s_¥Ÿo
, "raw")) {

400 
	`add2li°
(&
øw_«me
, 
ôem
);

403 
	`íd£rvít
();

404 
	`£çrŸ€¡
(1);

405 (
≥
 = 
	`gë¥Ÿ€¡
())) {

407 
ôem
 = (
£rvi˚
 *Ë
	`mÆloc
((service));

408 i‡(
ôem
 =
NULL
)

409 
	`≥º‹
("netstat");

410 
ôem
->
«me
 = 
	`°rdup
(
≥
->
p_«me
);

411 
ôem
->
numbî
 = 
	`ht⁄s
(
≥
->
p_¥Ÿo
);

412 
	`add2li°
(&
øw_«me
, 
ôem
);

414 
	`íd¥Ÿ€¡
();

416 
	}
}

419 *
	$gë_¢ame
(
socknumbî
, *
¥Ÿo
, 
numîic
)

421 
buf„r
[64], 
öô
 = 0;

422 
£rvi˚
 *
ôem
;

424 i‡(
socknumbî
 == 0)

426 i‡(
numîic
) {

427 
	`•rötf
(
buf„r
, "%d", 
	`¡ohs
(
socknumbî
));

428  (
buf„r
);

430 i‡(!
öô
) {

431 (Ë
	`ªad_£rvi˚s
();

432 
öô
 = 1;

434 
buf„r
[0] = '\0';

435 i‡(!
	`°rcmp
(
¥Ÿo
, "tcp")) {

436 i‡((
ôem
 = 
	`£¨chli°
(
t˝_«me
, 
socknumbî
)Ë!
NULL
)

437 
	`•rötf
(
buf„r
, "%s", 
ôem
->
«me
);

438 } i‡(!
	`°rcmp
(
¥Ÿo
, "udp")) {

439 i‡((
ôem
 = 
	`£¨chli°
(
udp_«me
, 
socknumbî
)Ë!
NULL
)

440 
	`•rötf
(
buf„r
, "%s", 
ôem
->
«me
);

441 } i‡(!
	`°rcmp
(
¥Ÿo
, "raw")) {

442 i‡((
ôem
 = 
	`£¨chli°
(
øw_«me
, 
socknumbî
)Ë!
NULL
)

443 
	`•rötf
(
buf„r
, "%s", 
ôem
->
«me
);

446 i‡(!
buf„r
[0])

447 
	`•rötf
(
buf„r
, "%d", 
	`¡ohs
(
socknumbî
));

448  (
buf„r
);

449 
	}
}

	@interface/net-tools/lib/inet6.c

22 
	~"c⁄fig.h
"

24 #i‡
HAVE_AFINET6


25 
	~<asm/ty≥s.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sys/sockë.h
>

28 
	~<√töë/ö.h
>

29 
	~<¨∑/öë.h
>

30 
	~<¨∑/«me£r.h
>

31 
	~<˘y≥.h
>

32 
	~<î∫o.h
>

33 
	~<√tdb.h
>

34 
	~<ªsﬁv.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<°dio.h
>

38 
	~<uni°d.h
>

39 
	~"vîsi⁄.h
"

40 
	~"√t-suµ‹t.h
"

41 
	~"∑th«mes.h
"

42 
	~"öé.h
"

43 
	~"utû.h
"

45 
h_î∫o
;

47 * 
	$fix_v4_addªss
(*
buf
, 
ö6_addr
 *
ö6
)

49 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
ö6
->
s6_addr
)) {

50 *
s
 =
	`°rchr
(
buf
, '.');

51 i‡(
s
) {

52 
s
 > 
buf
 && *s != ':')

53 --
s
;

54 i‡(*
s
 == ':') ++s;

55 
s
 = 
NULL
;

57 i‡(
s
)  s;

59  
buf
;

60 
	}
}

62 
	$INET6_ªsﬁve
(*
«me
, 
sockaddr_ö6
 *
sö6
)

64 
addröfo
 
ªq
, *
ai
;

65 
s
;

67 
	`mem£t
 (&
ªq
, '\0', Ñeq);

68 
ªq
.
ai_Ámûy
 = 
AF_INET6
;

69 i‡((
s
 = 
	`gëaddröfo
(
«me
, 
NULL
, &
ªq
, &
ai
))) {

70 
	`Ârötf
(
°dîr
, "gëaddröfo: %s: %d\n", 
«me
, 
s
);

73 
	`mem˝y
(
sö6
, 
ai
->
ai_addr
, (
sockaddr_ö6
));

75 
	`‰ìaddröfo
(
ai
);

78 
	}
}

80 #i‚de‡
IN6_IS_ADDR_UNSPECIFIED


81 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

82 (((
__u32
 *Ë(
a
))[0] == 0 && ((__u32 *) (a))[1] == 0 && \

83 ((
__u32
 *Ë(
a
))[2] =0 && ((__u32 *Ë◊))[3] =0)

	)

87 
	$INET6_ºesﬁve
(*
«me
, 
sockaddr_ö6
 *
sö6
, 
numîic
)

89 
s
;

92 i‡(
sö6
->
sö6_Ámûy
 !
AF_INET6
) {

93 #ifde‡
DEBUG


94 
	`Ârötf
(
°dîr
, 
	`_
("rresolve: unsupportáddress family %d !\n"),

95 
sö6
->
sö6_Ámûy
);

97 
î∫o
 = 
EAFNOSUPPORT
;

100 i‡(
numîic
 & 0x7FFF) {

101 
	`öë_¡›
–
AF_INET6
, &
sö6
->
sö6_addr
, 
«me
, 80);

104 i‡(
	`IN6_IS_ADDR_UNSPECIFIED
(&
sö6
->
sö6_addr
)) {

105 i‡(
numîic
 & 0x8000)

106 
	`°r˝y
(
«me
, "default");

108 
	`°r˝y
(
«me
, "[::]");

112 i‡((
s
 = 
	`gë«meöfo
((
sockaddr
 *Ë
sö6
, (
sockaddr_ö6
),

113 
«me
, 255 , 
NULL
, 0, 0))) {

114 
	`Âuts
("gë«meöfÿÁûed\n", 
°dîr
);

118 
	}
}

121 
	$INET6_ª£º‹
(*
ãxt
)

123 
	`hîr‹
(
ãxt
);

124 
	}
}

129 *
	$INET6_¥öt
(*
±r
)

131 
«me
[80];

133 
	`öë_¡›
(
AF_INET6
, (
ö6_addr
 *Ë
±r
, 
«me
, 80);

134  
	`fix_v4_addªss
(
«me
, (
ö6_addr
 *)
±r
);

135 
	}
}

140 *
	$INET6_•röt
(
sockaddr
 *
ßp
, 
numîic
)

142 
buff
[128];

144 i‡(
ßp
->
ß_Ámûy
 == 0xFFFF || sap->sa_family == 0)

145  
	`ß„_°∫˝y
(
buff
, 
	`_
("[NONE SET]"), (buff));

146 i‡(
	`INET6_ºesﬁve
(
buff
, (
sockaddr_ö6
 *Ë
ßp
, 
numîic
) != 0)

147  
	`ß„_°∫˝y
(
buff
, 
	`_
("[UNKNOWN]"), (buff));

148  (
	`fix_v4_addªss
(
buff
, &((
sockaddr_ö6
 *)
ßp
)->
sö6_addr
));

149 
	}
}

152 
	$INET6_gësock
(*
buÂ
, 
sockaddr
 *
ßp
)

154 
sockaddr_ö6
 *
sö6
;

155 *
p
;

157 
sö6
 = (
sockaddr_ö6
 *Ë
ßp
;

158 
sö6
->
sö6_Ámûy
 = 
AF_INET6
;

159 
sö6
->
sö6_p‹t
 = 0;

160 
sö6
->
sö6_sc›e_id
 = 0;

161 
sö6
->
sö6_Êowöfo
 = 0;

163 i‡(
	`öë_±⁄
(
AF_INET6
, 
buÂ
, 
sö6
->
sö6_addr
.
s6_addr
) <= 0)

165 
p
 = 
	`fix_v4_addªss
(
buÂ
, &
sö6
->
sö6_addr
);

166 i‡(
p
 !
buÂ
)

167 
	`mem˝y
(
buÂ
, 
p
, 
	`°æí
(p)+1);

169 
	}
}

171 
	$INET6_öput
(
ty≥
, *
buÂ
, 
sockaddr
 *
ßp
)

173 
ty≥
) {

175  (
	`INET6_gësock
(
buÂ
, 
ßp
));

177  (
	`INET6_ªsﬁve
(
buÂ
, (
sockaddr_ö6
 *Ë
ßp
));

179 
	}
}

182 
a·y≥
 
	göë6_a·y≥
 =

184 "öë6", 
NULL
, 
AF_INET6
, (
ö6_addr
),

185 
INET6_¥öt
, 
INET6_•röt
, 
INET6_öput
, 
INET6_ª£º‹
,

186 
INET6_Ωröt
, 
INET6_röput
, 
NULL
,

	@interface/net-tools/lib/inet6_gr.c

7 
	~"c⁄fig.h
"

9 #i‡
HAVE_AFINET6


10 
	~<asm/ty≥s.h
>

11 
	~<asm/∑øm.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/sockë.h
>

14 
	~<√töë/ö.h
>

15 
	~<¨∑/öë.h
>

16 
	~<¨∑/«me£r.h
>

18 
	~<˘y≥.h
>

19 
	~<î∫o.h
>

20 
	~<√tdb.h
>

21 
	~<ªsﬁv.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<°dio.h
>

25 
	~<uni°d.h
>

26 #i‚de‡
__GLIBC__


27 
	~<√töë6/ùv6_rouã.h
>

29 
	~"vîsi⁄.h
"

30 
	~"√t-suµ‹t.h
"

31 
	~"∑th«mes.h
"

32 
	~"öé.h
"

33 
	~"√t-„©uªs.h
"

37 
	#NUD_INCOMPLETE
 0x01

	)

38 
	#NUD_REACHABLE
 0x02

	)

39 
	#NUD_STALE
 0x04

	)

40 
	#NUD_DELAY
 0x08

	)

41 
	#NUD_PROBE
 0x10

	)

42 
	#NUD_FAILED
 0x20

	)

44 
	#NUD_NOARP
 0x40

	)

45 
	#NUD_PERMANENT
 0x80

	)

46 
	#NUD_NONE
 0x00

	)

48 
	#NTF_PROXY
 0x08

	)

49 
	#NTF_ROUTER
 0x80

	)

50 
	#NTF_02
 0x02

	)

51 
	#NTF_04
 0x04

	)

56 
a·y≥
 
öë6_a·y≥
;

59 
	$Ωröt_fib6
(
ext
, 
numîic
)

61 
buff
[4096], 
iÁ˚
[16], 
Êags
[16];

62 
addr6
[128], 
«ddr6
[128];

63 
sockaddr_ö6
 
ßddr6
, 
¢addr6
;

64 
num
, 
iÊags
, 
mëric
, 
ªf˙t
, 
u£
, 
¥efix_Àn
, 
¶í
;

65 
FILE
 *
Â
 = 
	`f›í
(
_PATH_PROCNET_ROUTE6
, "r");

67 
addr6p
[8][5], 
ßddr6p
[8][5], 
«ddr6p
[8][5];

69 i‡(!
Â
) {

70 
	`≥º‹
(
_PATH_PROCNET_ROUTE6
);

71 
	`¥ötf
(
	`_
("INET6 (IPv6)Çot configured inÅhis system.\n"));

75 i‡(
numîic
 & 
RTF_CACHE
)

76 
	`¥ötf
(
	`_
("Kernel IPv6Ñouting cache\n"));

78 
	`¥ötf
(
	`_
("Kernel IPv6ÑoutingÅable\n"));

80 
	`¥ötf
(
	`_
("Destination "

84 
	`fgës
(
buff
, 1023, 
Â
)) {

85 
num
 = 
	`ssˇnf
(
buff
, "%4s%4s%4s%4s%4s%4s%4s%4s %02x %4s%4s%4s%4s%4s%4s%4s%4s %02x %4s%4s%4s%4s%4s%4s%4s%4s %08x %08x %08x %08x %s\n",

86 
addr6p
[0],áddr6p[1],áddr6p[2],áddr6p[3],

87 
addr6p
[4],áddr6p[5],áddr6p[6],áddr6p[7],

88 &
¥efix_Àn
,

89 
ßddr6p
[0], saddr6p[1], saddr6p[2], saddr6p[3],

90 
ßddr6p
[4], saddr6p[5], saddr6p[6], saddr6p[7],

91 &
¶í
,

92 
«ddr6p
[0],Çaddr6p[1],Çaddr6p[2],Çaddr6p[3],

93 
«ddr6p
[4],Çaddr6p[5],Çaddr6p[6],Çaddr6p[7],

94 &
mëric
, &
ªf˙t
, &
u£
, &
iÊags
, 
iÁ˚
);

96 i‡(
num
 < 23)

99 i‡(
iÊags
 & 
RTF_CACHE
) {

100 i‡(!(
numîic
 & 
RTF_CACHE
))

103 i‡(
numîic
 & 
RTF_CACHE
)

108 
	`¢¥ötf
(
addr6
, (addr6), "%s:%s:%s:%s:%s:%s:%s:%s",

109 
addr6p
[0],áddr6p[1],áddr6p[2],áddr6p[3],

110 
addr6p
[4],áddr6p[5],áddr6p[6],áddr6p[7]);

111 
öë6_a·y≥
.
	`öput
(1, 
addr6
, (
sockaddr
 *Ë&
ßddr6
);

112 
	`¢¥ötf
(
addr6
, (addr6), "%s/%d",

113 
öë6_a·y≥
.
	`•röt
((
sockaddr
 *Ë&
ßddr6
, 1),

114 
¥efix_Àn
);

117 
	`¢¥ötf
(
«ddr6
, (naddr6), "%s:%s:%s:%s:%s:%s:%s:%s",

118 
«ddr6p
[0],Çaddr6p[1],Çaddr6p[2],Çaddr6p[3],

119 
«ddr6p
[4],Çaddr6p[5],Çaddr6p[6],Çaddr6p[7]);

120 
öë6_a·y≥
.
	`öput
(1, 
«ddr6
, (
sockaddr
 *Ë&
¢addr6
);

121 
	`¢¥ötf
(
«ddr6
, (naddr6), "%s",

122 
öë6_a·y≥
.
	`•röt
((
sockaddr
 *Ë&
¢addr6
, 1));

126 
Êags
[0]=0;

127 i‡(
iÊags
 & 
RTF_UP
)

128 
	`°rˇt
(
Êags
, "U");

129 i‡(
iÊags
 & 
RTF_REJECT
)

130 
	`°rˇt
(
Êags
, "!");

131 i‡(
iÊags
 & 
RTF_GATEWAY
)

132 
	`°rˇt
(
Êags
, "G");

133 i‡(
iÊags
 & 
RTF_HOST
)

134 
	`°rˇt
(
Êags
, "H");

135 i‡(
iÊags
 & 
RTF_DEFAULT
)

136 
	`°rˇt
(
Êags
, "D");

137 i‡(
iÊags
 & 
RTF_ADDRCONF
)

138 
	`°rˇt
(
Êags
, "A");

139 i‡(
iÊags
 & 
RTF_CACHE
)

140 
	`°rˇt
(
Êags
, "C");

141 i‡(
iÊags
 & 
RTF_ALLONLINK
)

142 
	`°rˇt
(
Êags
, "a");

143 i‡(
iÊags
 & 
RTF_EXPIRES
)

144 
	`°rˇt
(
Êags
, "e");

145 i‡(
iÊags
 & 
RTF_MODIFIED
)

146 
	`°rˇt
(
Êags
, "m");

147 i‡(
iÊags
 & 
RTF_NONEXTHOP
)

148 
	`°rˇt
(
Êags
, "n");

149 i‡(
iÊags
 & 
RTF_FLOW
)

150 
	`°rˇt
(
Êags
, "f");

153 
	`¥ötf
("%-30s %-26s %-4s %-3d %-1d%6d %s\n",

154 
addr6
, 
«ddr6
, 
Êags
, 
mëric
, 
ªf˙t
, 
u£
, 
iÁ˚
);

157 (Ë
	`f˛o£
(
Â
);

159 
	}
}

161 
	$Ωröt_ˇche6
(
ext
, 
numîic
)

163 
buff
[4096], 
iÁ˚
[16], 
Êags
[16];

164 
addr6
[128], 
haddr
[20], 
°©e°r
[20];

165 
sockaddr_ö6
 
ßddr6
;

166 
ty≥
, 
num
, 
ªf˙t
, 
¥efix_Àn
, 
loˇti⁄
, 
°©e
, 
gc
;

167 
t°amp
, 
expúe
, 
ndÊags
, 
ªachabÀ
, 
°Æe
, 
dñëe
;

168 
FILE
 *
Â
 = 
	`f›í
(
_PATH_PROCNET_NDISC
, "r");

169 
addr6p
[8][5], 
haddΩ
[6][3];

171 i‡(!
Â
) {

172  
	`Ωröt_fib6
(
ext
, 
numîic
 | 
RTF_CACHE
);

174 
	`¥ötf
(
	`_
("Kernel IPv6 Neighbour Cache\n"));

176 i‡(
ext
 == 2)

177 
	`¥ötf
(
	`_
("Neighbour "

181 
	`¥ötf
(
	`_
("Neighbour "

186 
	`fgës
(
buff
, 1023, 
Â
)) {

187 
num
 = 
	`ssˇnf
(
buff
, "%4s%4s%4s%4s%4s%4s%4s%4s %02x %02x %02x %02x %08lx %08lx %08lx %04x %04x %04lx %8s %2s%2s%2s%2s%2s%2s\n",

188 
addr6p
[0],áddr6p[1],áddr6p[2],áddr6p[3],

189 
addr6p
[4],áddr6p[5],áddr6p[6],áddr6p[7],

190 &
loˇti⁄
, &
¥efix_Àn
, &
ty≥
, &
°©e
, &
expúe
, &
t°amp
, &
ªachabÀ
, &
gc
, &
ªf˙t
,

191 &
ndÊags
, 
iÁ˚
,

192 
haddΩ
[0], haddrp[1], haddrp[2], haddrp[3], haddrp[4], haddrp[5]);

195 
	`¢¥ötf
(
addr6
, (addr6), "%s:%s:%s:%s:%s:%s:%s:%s",

196 
addr6p
[0],áddr6p[1],áddr6p[2],áddr6p[3],

197 
addr6p
[4],áddr6p[5],áddr6p[6],áddr6p[7]);

198 
öë6_a·y≥
.
	`öput
(1, 
addr6
, (
sockaddr
 *Ë&
ßddr6
);

199 
	`¢¥ötf
(
addr6
, (addr6), "%s/%d",

200 
öë6_a·y≥
.
	`•röt
((
sockaddr
 *Ë&
ßddr6
, 
numîic
),

201 
¥efix_Àn
);

204 
	`¢¥ötf
(
haddr
, (haddr), "%s:%s:%s:%s:%s:%s",

205 
haddΩ
[0], haddrp[1], haddrp[2], haddrp[3], haddrp[4], haddrp[5]);

208 
Êags
[0] = '\0';

209 i‡(
ndÊags
 & 
NTF_ROUTER
)

210 
	`°rˇt
(
Êags
, "R");

211 i‡(
ndÊags
 & 
NTF_04
)

212 
	`°rˇt
(
Êags
, "x");

213 i‡(
ndÊags
 & 
NTF_02
)

214 
	`°rˇt
(
Êags
, "h");

215 i‡(
ndÊags
 & 
NTF_PROXY
)

216 
	`°rˇt
(
Êags
, "P");

219 
°©e
) {

220 
NUD_NONE
:

221 
	`°r˝y
(
°©e°r
, "NONE");

223 
NUD_INCOMPLETE
:

224 
	`°r˝y
(
°©e°r
, "INCOMPLETE");

226 
NUD_REACHABLE
:

227 
	`°r˝y
(
°©e°r
, "REACHABLE");

229 
NUD_STALE
:

230 
	`°r˝y
(
°©e°r
, "STALE");

232 
NUD_DELAY
:

233 
	`°r˝y
(
°©e°r
, "DELAY");

235 
NUD_PROBE
:

236 
	`°r˝y
(
°©e°r
, "PROBE");

238 
NUD_FAILED
:

239 
	`°r˝y
(
°©e°r
, "FAILED");

241 
NUD_NOARP
:

242 
	`°r˝y
(
°©e°r
, "NOARP");

244 
NUD_PERMANENT
:

245 
	`°r˝y
(
°©e°r
, "PERM");

248 
	`¢¥ötf
(
°©e°r
, (°©e°r), "UNKNOWN(%02x)", 
°©e
);

253 
	`¥ötf
("%-43s %-17s %-8s %-5s %-3d %-16s",

254 
addr6
, 
haddr
, 
iÁ˚
, 
Êags
, 
ªf˙t
, 
°©e°r
);

256 
°Æe
 = 0;

257 i‡(
°©e
 =
NUD_REACHABLE
)

258 
°Æe
 = 
ªachabÀ
 > 
t°amp
 ?Ñeachable -Åstamp : 0;

259 
dñëe
 = 
gc
 > 
t°amp
 ? gc -Åstamp : 0;

260 i‡(
ext
 != 2) {

261 
	`¥ötf
(" %-9ld ", 
°Æe
 / 
HZ
);

262 i‡(
ªf˙t
)

263 
	`¥ötf
(" * ");

265 
	`¥ötf
(" %-7ld ", 
dñëe
 / 
HZ
);

267 
	`¥ötf
("\n");

270 (Ë
	`f˛o£
(
Â
);

272 
	}
}

274 
	$INET6_Ωröt
(
›ti⁄s
)

276 
ext
 = 
›ti⁄s
 & 
FLAG_EXT
;

277 
numîic
 = 
›ti⁄s
 & (
FLAG_NUM_HOST
 | 
FLAG_SYM
);

278 
rc
 = 
E_INTERN
;

280 i‡(
›ti⁄s
 & 
FLAG_FIB
)

281 i‡((
rc
 = 
	`Ωröt_fib6
(
ext
, 
numîic
)))

282  (
rc
);

284 i‡(
›ti⁄s
 & 
FLAG_CACHE
)

285 i‡((
rc
 = 
	`Ωröt_ˇche6
(
ext
, 
numîic
)))

286  (
rc
);

287  (
rc
);

288 
	}
}

	@interface/net-tools/lib/inet6_sr.c

6 
	~"c⁄fig.h
"

8 #i‡
HAVE_AFINET6


9 
	~<asm/ty≥s.h
>

10 
	~<sys/∑øm.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/sockë.h
>

13 
	~<√töë/ö.h
>

14 
	~<¨∑/öë.h
>

15 
	~<¨∑/«me£r.h
>

16 
	~<√t/if.h
>

17 
	~<sys/io˘l.h
>

18 
	~<˘y≥.h
>

19 
	~<î∫o.h
>

20 
	~<√tdb.h
>

21 
	~<ªsﬁv.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<°dio.h
>

25 
	~<uni°d.h
>

26 #ifde‡
__GLIBC__


27 
	~<√t/rouã.h
>

29 
	~<√töë6/ùv6_rouã.h
>

31 
	~"vîsi⁄.h
"

32 
	~"√t-suµ‹t.h
"

33 
	~"∑th«mes.h
"

34 
	~"öé.h
"

35 
	~"√t-„©uªs.h
"

39 
a·y≥
 
öë6_a·y≥
;

41 
	gskfd
 = -1;

44 
	$ußge
()

46 
	`Ârötf
(
°dîr
, 
	`_
("Usage: inet6_route [-vF] del Target\n"));

47 
	`Ârötf
(
°dîr
, 
	`_
(" inet6_route [-vF]ádd Target [gw Gw] [metric M] [[dev] If]\n"));

48 
	`Ârötf
(
°dîr
, 
	`_
(" inet6_route [-FC] flush NOT supported\n"));

49  (
E_USAGE
);

50 
	}
}

53 
	$INET6_£åouã
(
a˘i⁄
, 
›ti⁄s
, **
¨gs
)

55 
ö6_πmsg
 
π
;

56 
i‰eq
 
i‰
;

57 
sockaddr_ö6
 
ß6
;

58 
èrgë
[128], 
g©eway
[128] = "NONE";

59 
mëric
, 
¥efix_Àn
;

60 *
dev«me
 = 
NULL
;

61 *
˝
;

63 i‡(*
¨gs
 =
NULL
)

64  (
	`ußge
());

66 
	`°r˝y
(
èrgë
, *
¨gs
++);

67 i‡(!
	`°rcmp
(
èrgë
, "default")) {

68 
¥efix_Àn
 = 0;

69 
	`mem£t
(&
ß6
, 0, (sa6));

71 i‡((
˝
 = 
	`°rchr
(
èrgë
, '/'))) {

72 
¥efix_Àn
 = 
	`©ﬁ
(
˝
 + 1);

73 i‡((
¥efix_Àn
 < 0) || (prefix_len > 128))

74 
	`ußge
();

75 *
˝
 = 0;

77 
¥efix_Àn
 = 128;

79 i‡(
öë6_a·y≥
.
	`öput
(1, 
èrgë
, (
sockaddr
 *Ë&
ß6
) < 0

80 && 
öë6_a·y≥
.
	`öput
(0, 
èrgë
, (
sockaddr
 *Ë&
ß6
) < 0) {

81 
öë6_a·y≥
.
	`hîr‹
(
èrgë
);

87 
	`mem£t
((*Ë&
π
, 0, (
ö6_πmsg
));

89 
	`mem˝y
(&
π
.
πmsg_d°
, 
ß6
.
sö6_addr
.
s6_addr
, (
ö6_addr
));

92 
π
.
πmsg_Êags
 = 
RTF_UP
;

93 i‡(
¥efix_Àn
 == 128)

94 
π
.
πmsg_Êags
 |
RTF_HOST
;

95 
π
.
πmsg_mëric
 = 1;

96 
π
.
πmsg_d°_Àn
 = 
¥efix_Àn
;

98 *
¨gs
) {

99 i‡(!
	`°rcmp
(*
¨gs
, "metric")) {

101 
¨gs
++;

102 i‡(!*
¨gs
 || !
	`isdigô
(**args))

103  (
	`ußge
());

104 
mëric
 = 
	`©oi
(*
¨gs
);

105 
π
.
πmsg_mëric
 = 
mëric
;

106 
¨gs
++;

109 i‡(!
	`°rcmp
(*
¨gs
, "gw") || !strcmp(*args, "gateway")) {

110 
¨gs
++;

111 i‡(!*
¨gs
)

112  (
	`ußge
());

113 i‡(
π
.
πmsg_Êags
 & 
RTF_GATEWAY
)

114  (
	`ußge
());

115 
	`°r˝y
(
g©eway
, *
¨gs
);

116 i‡(
öë6_a·y≥
.
	`öput
(1, 
g©eway
,

117 (
sockaddr
 *Ë&
ß6
) < 0) {

118 
öë6_a·y≥
.
	`hîr‹
(
g©eway
);

119  (
E_LOOKUP
);

121 
	`mem˝y
(&
π
.
πmsg_g©eway
, 
ß6
.
sö6_addr
.
s6_addr
,

122 (
ö6_addr
));

123 
π
.
πmsg_Êags
 |
RTF_GATEWAY
;

124 
¨gs
++;

127 i‡(!
	`°rcmp
(*
¨gs
, "mod")) {

128 
¨gs
++;

129 
π
.
πmsg_Êags
 |
RTF_MODIFIED
;

132 i‡(!
	`°rcmp
(*
¨gs
, "dyn")) {

133 
¨gs
++;

134 
π
.
πmsg_Êags
 |
RTF_DYNAMIC
;

137 i‡(!
	`°rcmp
(*
¨gs
, "device") || !strcmp(*args, "dev")) {

138 
¨gs
++;

139 i‡(!*
¨gs
)

140  (
	`ußge
());

141 } i‡(
¨gs
[1])

142  (
	`ußge
());

144 
dev«me
 = *
¨gs
;

145 
¨gs
++;

149 i‡((
skfd
 = 
	`sockë
(
AF_INET6
, 
SOCK_DGRAM
, 0)) < 0) {

150 
	`≥º‹
("socket");

151  (
E_SOCK
);

153 i‡(
dev«me
) {

154 
	`mem£t
(&
i‰
, 0, (ifr));

155 
	`°r˝y
(
i‰
.
i‰_«me
, 
dev«me
);

157 i‡(
	`io˘l
(
skfd
, 
SIOGIFINDEX
, &
i‰
) < 0) {

158 
	`≥º‹
("SIOGIFINDEX");

159  (
E_SOCK
);

161 
π
.
πmsg_ifödex
 = 
i‰
.
i‰_ifödex
;

163 
π
.
πmsg_ifödex
 = 0;

166 i‡(
a˘i⁄
 =
RTACTION_DEL
) {

167 i‡(
	`io˘l
(
skfd
, 
SIOCDELRT
, &
π
) < 0) {

168 
	`≥º‹
("SIOCDELRT");

169 
	`˛o£
(
skfd
);

170  (
E_SOCK
);

173 i‡(
	`io˘l
(
skfd
, 
SIOCADDRT
, &
π
) < 0) {

174 
	`≥º‹
("SIOCADDRT");

175 
	`˛o£
(
skfd
);

176  (
E_SOCK
);

181 (Ë
	`˛o£
(
skfd
);

183 
	}
}

185 
	$INET6_röput
(
a˘i⁄
, 
›ti⁄s
, **
¨gs
)

187 i‡(
a˘i⁄
 =
RTACTION_FLUSH
) {

188 
	`Ârötf
(
°dîr
, 
	`_
("Flushing `inet6'ÑoutingÅableÇot supported\n"));

189  (
	`ußge
());

191 i‡((*
¨gs
 =
NULL
Ë|| (
a˘i⁄
 =
RTACTION_HELP
))

192  (
	`ußge
());

194  (
	`INET6_£åouã
(
a˘i⁄
, 
›ti⁄s
, 
¨gs
));

195 
	}
}

	@interface/net-tools/lib/inet_gr.c

11 
	~"c⁄fig.h
"

13 #i‡
HAVE_AFINET


14 
	~<sys/ty≥s.h
>

15 
	~<sys/sockë.h
>

16 
	~<√töë/ö.h
>

17 
	~<¨∑/öë.h
>

18 
	~<¨∑/«me£r.h
>

20 
	~<˘y≥.h
>

21 
	~<î∫o.h
>

22 
	~<√tdb.h
>

23 
	~<ªsﬁv.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<°dio.h
>

27 
	~<uni°d.h
>

28 
	~"vîsi⁄.h
"

29 
	~"√t-suµ‹t.h
"

30 
	~"∑th«mes.h
"

31 
	~"öé.h
"

32 
	~"√t-„©uªs.h
"

33 
	~"¥oc.h
"

34 
a·y≥
 
öë_a·y≥
;

36 *
INET_•rötmask
(
sockaddr
 *
ßp
, 
numîic
,

37 
√tmask
);

39 
	$Ωröt_fib
(
ext
, 
numîic
)

41 
buff
[1024], 
iÁ˚
[17], 
Êags
[64];

42 
g©e_addr
[128], 
√t_addr
[128];

43 
mask_addr
[128];

44 
num
, 
iÊags
, 
mëric
, 
ªf˙t
, 
u£
, 
mss
, 
wödow
, 
úâ
;

45 
FILE
 *
Â
 = 
	`f›í
(
_PATH_PROCNET_ROUTE
, "r");

46 *
fmt
;

48 i‡(!
Â
) {

49 
	`≥º‹
(
_PATH_PROCNET_ROUTE
);

50 
	`¥ötf
(
	`_
("INET (IPv4)Çot configured inÅhis system.\n"));

53 
	`¥ötf
(
	`_
("Kernel IPÑoutingÅable\n"));

55 i‡(
ext
 == 1)

56 
	`¥ötf
(
	`_
("Destination Gateway Genmask "

58 i‡(
ext
 == 2)

59 
	`¥ötf
(
	`_
("Destination Gateway Genmask "

61 i‡(
ext
 >= 3)

62 
	`¥ötf
(
	`_
("Destination Gateway Genmask "

66 
úâ
 = 0;

67 
wödow
 = 0;

68 
mss
 = 0;

70 
fmt
 = 
	`¥oc_gí_fmt
(
_PATH_PROCNET_ROUTE
, 0, 
Â
,

82 
NULL
);

85 i‡(!
fmt
)

88 
	`fgës
(
buff
, 1023, 
Â
)) {

89 
sockaddr
 
¢ë_èrgë
, 
¢ë_g©eway
, 
¢ë_mask
;

90 
sockaddr_ö
 *
sö_√tmask
;

92 
num
 = 
	`ssˇnf
(
buff
, 
fmt
,

93 
iÁ˚
, 
√t_addr
, 
g©e_addr
,

94 &
iÊags
, &
ªf˙t
, &
u£
, &
mëric
, 
mask_addr
,

95 &
mss
, &
wödow
, &
úâ
);

96 i‡(
num
 < 10 || !(
iÊags
 & 
RTF_UP
))

100 (Ë
öë_a·y≥
.
	`öput
(1, 
√t_addr
, &
¢ë_èrgë
);

103 (Ë
öë_a·y≥
.
	`öput
(1, 
g©e_addr
, &
¢ë_g©eway
);

106 (Ë
öë_a·y≥
.
	`öput
(1, 
mask_addr
, &
¢ë_mask
);

108 
sö_√tmask
 = (
sockaddr_ö
 *)&
¢ë_mask
;

109 
	`°r˝y
(
√t_addr
, 
	`INET_•rötmask
(&
¢ë_èrgë
,

110 (
numîic
 | 0x8000 | (
iÊags
 & 
RTF_HOST
? 0x4000: 0)),

111 
sö_√tmask
->
sö_addr
.
s_addr
));

112 
√t_addr
[15] = '\0';

114 
	`°r˝y
(
g©e_addr
, 
öë_a·y≥
.
	`•röt
(&
¢ë_g©eway
, 
numîic
 | 0x4000));

115 
g©e_addr
[15] = '\0';

117 
	`°r˝y
(
mask_addr
, 
öë_a·y≥
.
	`•röt
(&
¢ë_mask
, 1));

118 
mask_addr
[15] = '\0';

121 
Êags
[0] = '\0';

122 i‡(
iÊags
 & 
RTF_UP
)

123 
	`°rˇt
(
Êags
, "U");

124 i‡(
iÊags
 & 
RTF_GATEWAY
)

125 
	`°rˇt
(
Êags
, "G");

126 #i‡
HAVE_RTF_REJECT


127 i‡(
iÊags
 & 
RTF_REJECT
)

128 
	`°r˝y
(
Êags
, "!");

130 i‡(
iÊags
 & 
RTF_HOST
)

131 
	`°rˇt
(
Êags
, "H");

132 i‡(
iÊags
 & 
RTF_REINSTATE
)

133 
	`°rˇt
(
Êags
, "R");

134 i‡(
iÊags
 & 
RTF_DYNAMIC
)

135 
	`°rˇt
(
Êags
, "D");

136 i‡(
iÊags
 & 
RTF_MODIFIED
)

137 
	`°rˇt
(
Êags
, "M");

138 i‡(
iÊags
 & 
RTF_DEFAULT
)

139 
	`°rˇt
(
Êags
, "d");

140 i‡(
iÊags
 & 
RTF_ALLONLINK
)

141 
	`°rˇt
(
Êags
, "a");

142 i‡(
iÊags
 & 
RTF_ADDRCONF
)

143 
	`°rˇt
(
Êags
, "c");

144 i‡(
iÊags
 & 
RTF_NONEXTHOP
)

145 
	`°rˇt
(
Êags
, "o");

146 i‡(
iÊags
 & 
RTF_EXPIRES
)

147 
	`°rˇt
(
Êags
, "e");

148 i‡(
iÊags
 & 
RTF_CACHE
)

149 
	`°rˇt
(
Êags
, "c");

150 i‡(
iÊags
 & 
RTF_FLOW
)

151 
	`°rˇt
(
Êags
, "f");

152 i‡(
iÊags
 & 
RTF_POLICY
)

153 
	`°rˇt
(
Êags
, "p");

154 i‡(
iÊags
 & 
RTF_LOCAL
)

155 
	`°rˇt
(
Êags
, "l");

156 i‡(
iÊags
 & 
RTF_MTU
)

157 
	`°rˇt
(
Êags
, "u");

158 i‡(
iÊags
 & 
RTF_WINDOW
)

159 
	`°rˇt
(
Êags
, "w");

160 i‡(
iÊags
 & 
RTF_IRTT
)

161 
	`°rˇt
(
Êags
, "i");

162 i‡(
iÊags
 & 
RTF_NOTCACHED
)

163 
	`°rˇt
(
Êags
, "n");

166 i‡(
ext
 == 1) {

167 #i‡
HAVE_RTF_REJECT


168 i‡(
iÊags
 & 
RTF_REJECT
)

169 
	`¥ötf
("%-15s - %-15s %-5s %-6d - %7d -\n",

170 
√t_addr
, 
mask_addr
, 
Êags
, 
mëric
, 
u£
);

173 
	`¥ötf
("%-15s %-15s %-15s %-5s %-6d %-2d %7d %s\n",

174 
√t_addr
, 
g©e_addr
, 
mask_addr
, 
Êags
,

175 
mëric
, 
ªf˙t
, 
u£
, 
iÁ˚
);

177 i‡(
ext
 == 2) {

178 #i‡
HAVE_RTF_REJECT


179 i‡(
iÊags
 & 
RTF_REJECT
)

180 
	`¥ötf
("%-15s - %-15s %-5s - - - -\n",

181 
√t_addr
, 
mask_addr
, 
Êags
);

184 
	`¥ötf
("%-15s %-15s %-15s %-5s %5d %-5d %6d %s\n",

185 
√t_addr
, 
g©e_addr
, 
mask_addr
, 
Êags
,

186 
mss
, 
wödow
, 
úâ
, 
iÁ˚
);

188 i‡(
ext
 >= 3) {

189 #i‡
HAVE_RTF_REJECT


190 i‡(
iÊags
 & 
RTF_REJECT
)

191 
	`¥ötf
("%-15s - %-15s %-5s %-6d - %7d - - - -\n",

192 
√t_addr
, 
mask_addr
, 
Êags
, 
mëric
, 
u£
);

195 
	`¥ötf
("%-15s %-15s %-15s %-5s %-6d %-3d %6d %-6.6s %-5d %-6d %d\n",

196 
√t_addr
, 
g©e_addr
, 
mask_addr
, 
Êags
,

197 
mëric
, 
ªf˙t
, 
u£
, 
iÁ˚
, 
mss
, 
wödow
, 
úâ
);

201 
	`‰ì
(
fmt
);

202 (Ë
	`f˛o£
(
Â
);

204 
	}
}

206 
	$Ωröt_ˇche
(
ext
, 
numîic
)

208 
buff
[1024], 
iÁ˚
[17], 
Êags
[64];

209 
g©e_addr
[128], 
de°_addr
[128], 
•ecd°
[128];

210 
§c_addr
[128];

211 
sockaddr
 
¢ë
;

212 
iÊags
;

213 
num
, 
f‹m©
, 
mëric
, 
ªf˙t
, 
u£
, 
mss
, 
wödow
, 
úâ
, 
hh
, 
hhªf
, 
hhu±od
, 
¨p
, 
tos
;

214 *
fmt
 = 
NULL
;

216 
FILE
 *
Â
 = 
	`f›í
(
_PATH_PROCNET_RTCACHE
, "r");

218 i‡(!
Â
) {

219 
	`≥º‹
(
_PATH_PROCNET_RTCACHE
);

220 
	`¥ötf
(
	`_
("INET (IPv4)Çot configured inÅhis system.\n"));

235 
f‹m©
 = 
	`¥oc_guess_fmt
(
_PATH_PROCNET_RTCACHE
, 
Â
, "IRTT",1,"TOS",2,"HHRef",4,"HHU±od",8,"S≥cD°",16,"HH",32,"ARP",64,
NULL
);

237 
	`¥ötf
(
	`_
("Kernel IPÑouting cache\n"));

239 
f‹m©
) {

241 
	`≥º‹
(
_PATH_PROCNET_RTCACHE
);

242 
	`exô
(-1);

245 
f‹m©
 = 2;

248 
f‹m©
 = 1;

251 
	`¥ötf
("ERROR:Öroc_guess_fmt(%s,...Ñëu∫ed: %d\n",
_PATH_PROCNET_RTCACHE
, 
f‹m©
);

255 
	`ªwöd
(
Â
);

257 i‡(
ext
 == 1)

258 
	`¥ötf
(
	`_
("Source Destination Gateway "

260 i‡(
ext
 == 2)

261 
	`¥ötf
(
	`_
("Source Destination Gateway "

264 i‡(
f‹m©
 == 1) {

265 i‡(
ext
 >= 3)

266 
	`¥ötf
(
	`_
("Source Destination Gateway "

270 
fmt
 = 
	`¥oc_gí_fmt
(
_PATH_PROCNET_RTCACHE
, 0, 
Â
,

284 
NULL
);

288 i‡(
f‹m©
 == 2) {

289 i‡(
ext
 >= 3)

290 
	`¥ötf
(
	`_
("Source Destination Gateway "

293 
fmt
 = 
	`¥oc_gí_fmt
(
_PATH_PROCNET_RTCACHE
, 0, 
Â
,

309 
NULL
);

314 
úâ
 = 0;

315 
wödow
 = 0;

316 
mss
 = 0;

317 
hh
 = 0; 
hhªf
 = 0; 
hhu±od
 = 0;

318 
¨p
 = 0; 
tos
 = 0;

319 
	`fgës
(
buff
, 1023, 
Â
)) {

320 i‡(
f‹m©
 == 1) {

321 
num
 = 
	`ssˇnf
(
buff
, 
fmt
,

322 
iÁ˚
, 
de°_addr
, 
g©e_addr
,

323 &
iÊags
, &
ªf˙t
, &
u£
, &
mëric
, 
§c_addr
,

324 &
mss
, &
wödow
, &
úâ
, &
hh
, &
¨p
);

325 i‡(
num
 < 12)

328 i‡(
f‹m©
 == 2) {

329 
num
 = 
	`ssˇnf
(
buff
, 
fmt
,

330 
iÁ˚
, 
de°_addr
, 
g©e_addr
,

331 &
iÊags
, &
ªf˙t
, &
u£
, &
mëric
, 
§c_addr
,

332 &
mss
, &
wödow
, &
úâ
, &
tos
, &
hhªf
, &
hhu±od
, &
•ecd°
);

333 i‡(
num
 < 12)

339 (Ë
öë_a·y≥
.
	`öput
(1, 
de°_addr
, &
¢ë
);

340 
	`°r˝y
(
de°_addr
, 
öë_a·y≥
.
	`•röt
(&
¢ë
, 
numîic
));

341 
de°_addr
[15] = '\0';

344 (Ë
öë_a·y≥
.
	`öput
(1, 
g©e_addr
, &
¢ë
);

345 
	`°r˝y
(
g©e_addr
, 
öë_a·y≥
.
	`•röt
(&
¢ë
, 
numîic
));

346 
g©e_addr
[15] = '\0';

349 (Ë
öë_a·y≥
.
	`öput
(1, 
§c_addr
, &
¢ë
);

350 
	`°r˝y
(
§c_addr
, 
öë_a·y≥
.
	`•röt
(&
¢ë
, 
numîic
));

351 
§c_addr
[15] = '\0';

354 (Ë
öë_a·y≥
.
	`öput
(1, 
•ecd°
, &
¢ë
);

355 
	`°r˝y
(
•ecd°
, 
öë_a·y≥
.
	`•röt
(&
¢ë
, 
numîic
));

356 
•ecd°
[15] = '\0';

359 
Êags
[0] = '\0';

360 i‡(
f‹m©
 == 1) {

361 i‡(
iÊags
 & 
RTF_UP
)

362 
	`°rˇt
(
Êags
, "U");

363 i‡(
iÊags
 & 
RTF_HOST
)

364 
	`°rˇt
(
Êags
, "H");

366 i‡(
iÊags
 & 
RTF_GATEWAY
)

367 
	`°rˇt
(
Êags
, "G");

368 #i‡
HAVE_RTF_REJECT


369 i‡(
iÊags
 & 
RTF_REJECT
)

370 
	`°r˝y
(
Êags
, "!");

372 i‡(
iÊags
 & 
RTF_REINSTATE
)

373 
	`°rˇt
(
Êags
, "R");

374 i‡(
iÊags
 & 
RTF_DYNAMIC
)

375 
	`°rˇt
(
Êags
, "D");

376 i‡(
iÊags
 & 
RTF_MODIFIED
)

377 
	`°rˇt
(
Êags
, "M");

380 i‡(
f‹m©
 == 2) {

381 i‡(
iÊags
 & 
RTCF_DEAD
)

382 
	`°rˇt
(
Êags
, "-");

383 i‡(
iÊags
 & 
RTCF_ONLINK
)

384 
	`°rˇt
(
Êags
, "o");

386 i‡(
iÊags
 & 
RTCF_NOTIFY
)

387 
	`°rˇt
(
Êags
, "n");

388 i‡(
iÊags
 & 
RTCF_DIRECTDST
)

389 
	`°rˇt
(
Êags
, "d");

390 i‡(
iÊags
 & 
RTCF_TPROXY
)

391 
	`°rˇt
(
Êags
, "t");

392 i‡(
iÊags
 & 
RTCF_FAST
)

393 
	`°rˇt
(
Êags
, "f");

394 i‡(
iÊags
 & 
RTCF_MASQ
)

395 
	`°rˇt
(
Êags
, "q");

396 i‡(
iÊags
 & 
RTCF_SNAT
)

397 
	`°rˇt
(
Êags
, "Ns");

398 i‡(
iÊags
 & 
RTCF_DOREDIRECT
)

399 
	`°rˇt
(
Êags
, "r");

400 i‡(
iÊags
 & 
RTCF_DIRECTSRC
)

401 
	`°rˇt
(
Êags
, "i");

402 i‡(
iÊags
 & 
RTCF_DNAT
)

403 
	`°rˇt
(
Êags
, "Nd");

404 i‡(
iÊags
 & 
RTCF_BROADCAST
)

405 
	`°rˇt
(
Êags
, "b");

406 i‡(
iÊags
 & 
RTCF_MULTICAST
)

407 
	`°rˇt
(
Êags
, "m");

408 i‡(
iÊags
 & 
RTCF_REJECT
)

409 
	`°rˇt
(
Êags
, "#");

410 i‡(
iÊags
 & 
RTCF_LOCAL
)

411 
	`°rˇt
(
Êags
, "l");

413 i‡(
ext
 == 1) {

414 
	`¥ötf
("%-15s %-15s %-15s %-5s %-6d %-2d %7d %s\n",

415 
§c_addr
, 
de°_addr
, 
g©e_addr
, 
Êags
,

416 
mëric
, 
ªf˙t
, 
u£
, 
iÁ˚
);

418 i‡(
ext
 == 2) {

419 
	`¥ötf
("%-15s %-15s %-15s %-5s %5d %-5d %6d %s\n",

420 
§c_addr
, 
de°_addr
, 
g©e_addr
, 
Êags
,

421 
mss
, 
wödow
, 
úâ
, 
iÁ˚
);

423 i‡(
f‹m©
 == 1) {

424 i‡(
ext
 >= 3) {

425 
	`¥ötf
("%-15s %-15s %-15s %-5s %-6d %-3d %6d %-6.6s %-5d %-6d %-5d %-3d %d\n",

426 
§c_addr
, 
de°_addr
, 
g©e_addr
, 
Êags
,

427 
mëric
, 
ªf˙t
, 
u£
, 
iÁ˚
, 
mss
, 
wödow
, 
úâ
, 
hh
, 
¨p
);

430 i‡(
f‹m©
 == 2) {

431 i‡(
ext
 >= 3) {

432 
	`¥ötf
("%-15s %-15s %-15s %-5s %-6d %-3d %6d %-6.6s %-5d %-6d %-5d %-3d %-3d %-3d %15s\n",

433 
§c_addr
, 
de°_addr
, 
g©e_addr
, 
Êags
,

434 
mëric
, 
ªf˙t
, 
u£
, 
iÁ˚
, 
mss
, 
wödow
, 
úâ
, 
tos
, 
hhªf
, 
hhu±od
, 
•ecd°
);

439 
	`‰ì
(
fmt
);

440 (Ë
	`f˛o£
(
Â
);

442 
	}
}

444 
	$INET_Ωröt
(
›ti⁄s
)

446 
ext
 = 
›ti⁄s
 & 
FLAG_EXT
;

447 
numîic
 = 
›ti⁄s
 & (
FLAG_NUM_HOST
 | 
FLAG_SYM
);

448 
rc
 = 
E_INTERN
;

450 i‡(
›ti⁄s
 & 
FLAG_FIB
)

451 i‡((
rc
 = 
	`Ωröt_fib
(
ext
, 
numîic
)))

452  (
rc
);

453 i‡(
›ti⁄s
 & 
FLAG_CACHE
)

454 
rc
 = 
	`Ωröt_ˇche
(
ext
, 
numîic
);

456  (
rc
);

457 
	}
}

	@interface/net-tools/lib/inet_sr.c

9 
	~"c⁄fig.h
"

11 #i‡
HAVE_AFINET


12 
	~<asm/ty≥s.h
>

13 
	~<sys/∑øm.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<sys/sockë.h
>

16 
	~<√töë/ö.h
>

17 
	~<¨∑/öë.h
>

18 
	~<¨∑/«me£r.h
>

19 
	~<√t/rouã.h
>

20 
	~<sys/io˘l.h
>

21 
	~<˘y≥.h
>

22 
	~<î∫o.h
>

23 
	~<√tdb.h
>

24 
	~<ªsﬁv.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<°dio.h
>

28 
	~<uni°d.h
>

29 
	~"vîsi⁄.h
"

30 
	~"√t-suµ‹t.h
"

31 
	~"∑th«mes.h
"

32 
	~"öé.h
"

33 
	~"√t-„©uªs.h
"

34 
	~"utû.h
"

36 #i‡
HAVE_NEW_ADDRT


37 
	#mask_ö_addr
(
x
Ë(((
sockaddr_ö
 *)&((x).
π_gímask
))->
sö_addr
.
s_addr
)

	)

38 
	#fuŒ_mask
(
x
Ë(x)

	)

40 
	#mask_ö_addr
(
x
Ë((x).
π_gímask
)

	)

41 
	#fuŒ_mask
(
x
Ë(((
sockaddr_ö
 *)&(x))->
sö_addr
.
s_addr
)

	)

44 
a·y≥
 
öë_a·y≥
;

46 
	gskfd
 = -1;

49 
	$ußge
()

51 
	`Ârötf
(
°dîr
, 
	`_
("Usage: inet_route [-vF] del {-host|-net} Target[/prefix] [gw Gw] [metric M] [[dev] If]\n"));

52 
	`Ârötf
(
°dîr
, 
	`_
(" inet_route [-vF]ádd {-host|-net} Target[/prefix] [gw Gw] [metric M]\n"));

53 
	`Ârötf
(
°dîr
, 
	`_
(" [netmask N] [mss Mss] [window W] [irtt I]\n"));

54 
	`Ârötf
(
°dîr
, 
	`_
(" [mod] [dyn] [reinstate] [[dev] If]\n"));

55 
	`Ârötf
(
°dîr
, 
	`_
(" inet_route [-vF]ádd {-host|-net} Target[/prefix] [metric M]Ñeject\n"));

56 
	`Ârötf
(
°dîr
, 
	`_
(" inet_route [-FC] flush NOT supported\n"));

57  (
E_USAGE
);

58 
	}
}

60 
	$INET_£åouã
(
a˘i⁄
, 
›ti⁄s
, **
¨gs
)

62 
πíåy
 
π
;

63 
èrgë
[128], 
g©eway
[128] = "NONE", 
√tmask
[128] = "default";

64 
xÊag
, 
i¢ë
;

66 
xÊag
 = 0;

68 i‡(!
	`°rcmp
(*
¨gs
, "#net")) {

69 
xÊag
 = 1;

70 
¨gs
++;

71 } i‡(!
	`°rcmp
(*
¨gs
, "#host")) {

72 
xÊag
 = 2;

73 
¨gs
++;

75 i‡(*
¨gs
 =
NULL
)

76  (
	`ußge
());

78 
	`ß„_°∫˝y
(
èrgë
, *
¨gs
++, (Åarget));

81 
	`mem£t
((*Ë&
π
, 0, (
πíåy
));

86 
sockaddr_ö
 
m
;

87 
sockaddr
 
d
;

88 } 
mask
;

89 
n
;

91 
n
 = 
öë_a·y≥
.
	`gëmask
(
èrgë
, &
mask
.
d
, 
√tmask
);

92 i‡(
n
 < 0)

93  
	`ußge
();

94 i‡(
n
)

95 
π
.
π_gímask
 = 
	`fuŒ_mask
(
mask
.
d
);

99 i‡((
i¢ë
 = 
öë_a·y≥
.
	`öput
((
xÊag
!=2? 0: 256), 
èrgë
, &
π
.
π_d°
)) < 0) {

100 
öë_a·y≥
.
	`hîr‹
(
èrgë
);

103 
xÊag
) {

105 
i¢ë
 = 1; ;

107 
i¢ë
 = 0; ;

111 
π
.
π_Êags
 = (
RTF_UP
 | 
RTF_HOST
);

112 i‡(
i¢ë
)

113 
π
.
π_Êags
 &~
RTF_HOST
;

115 *
¨gs
) {

116 i‡(!
	`°rcmp
(*
¨gs
, "metric")) {

117 
mëric
;

119 
¨gs
++;

120 i‡(!*
¨gs
 || !
	`isdigô
(**args))

121  (
	`ußge
());

122 
mëric
 = 
	`©oi
(*
¨gs
);

123 #i‡
HAVE_NEW_ADDRT


124 
π
.
π_mëric
 = 
mëric
 + 1;

126 
	`ENOSUPP
("inet_setroute", "NEW_ADDRT (metric)");

128 
¨gs
++;

131 i‡(!
	`°rcmp
(*
¨gs
, "netmask")) {

132 
sockaddr
 
mask
;

134 
¨gs
++;

135 i‡(!*
¨gs
 || 
	`mask_ö_addr
(
π
))

136  (
	`ußge
());

137 
	`ß„_°∫˝y
(
√tmask
, *
¨gs
, (Çetmask));

138 i‡((
i¢ë
 = 
öë_a·y≥
.
	`öput
(0, 
√tmask
, &
mask
)) < 0) {

139 
öë_a·y≥
.
	`hîr‹
(
√tmask
);

140  (
E_LOOKUP
);

142 
π
.
π_gímask
 = 
	`fuŒ_mask
(
mask
);

143 
¨gs
++;

146 i‡(!
	`°rcmp
(*
¨gs
, "gw") || !strcmp(*args, "gateway")) {

147 
¨gs
++;

148 i‡(!*
¨gs
)

149  (
	`ußge
());

150 i‡(
π
.
π_Êags
 & 
RTF_GATEWAY
)

151  (
	`ußge
());

152 
	`ß„_°∫˝y
(
g©eway
, *
¨gs
, ( gateway));

153 i‡((
i¢ë
 = 
öë_a·y≥
.
	`öput
(256, 
g©eway
, &
π
.
π_g©eway
)) < 0) {

154 
öë_a·y≥
.
	`hîr‹
(
g©eway
);

155  (
E_LOOKUP
);

157 i‡(
i¢ë
) {

158 
	`Ârötf
(
°dîr
, 
	`_
("route: %s: cannot useá NETWORKás gateway!\n"),

159 
g©eway
);

160  (
E_OPTERR
);

162 
π
.
π_Êags
 |
RTF_GATEWAY
;

163 
¨gs
++;

166 i‡(!
	`°rcmp
(*
¨gs
, "mss") || !strcmp(*args,"mtu")) {

167 
¨gs
++;

168 
π
.
π_Êags
 |
RTF_MSS
;

169 i‡(!*
¨gs
)

170  (
	`ußge
());

171 
π
.
π_mss
 = 
	`©oi
(*
¨gs
);

172 
¨gs
++;

173 i‡(
π
.
π_mss
 < 64 ||Ñt.rt_mss > 65536) {

174 
	`Ârötf
(
°dîr
, 
	`_
("route: Invalid MSS/MTU.\n"));

175  (
E_OPTERR
);

179 i‡(!
	`°rcmp
(*
¨gs
, "window")) {

180 
¨gs
++;

181 i‡(!*
¨gs
)

182  (
	`ußge
());

183 
π
.
π_Êags
 |
RTF_WINDOW
;

184 
π
.
π_wödow
 = 
	`©oi
(*
¨gs
);

185 
¨gs
++;

186 i‡(
π
.
π_wödow
 < 128) {

187 
	`Ârötf
(
°dîr
, 
	`_
("route: Invalid window.\n"));

188  (
E_OPTERR
);

192 i‡(!
	`°rcmp
(*
¨gs
, "irtt")) {

193 
¨gs
++;

194 i‡(!*
¨gs
)

195  (
	`ußge
());

196 
¨gs
++;

197 #i‡
HAVE_RTF_IRTT


198 
π
.
π_Êags
 |
RTF_IRTT
;

199 
π
.
π_úâ
 = 
	`©oi
(*(
¨gs
 - 1));

200 
π
.
π_úâ
 *(
HZ
 / 100);

202 i‡(
π
.
π_úâ
 < 1 ||Ñt.π_úâ > (120 * 
HZ
)) {

203 
	`Ârötf
(
°dîr
, 
	`_
("route: Invalid initialÑtt.\n"));

204  (
E_OPTERR
);

208 
	`ENOSUPP
("inet_setroute", "RTF_IRTT");

212 i‡(!
	`°rcmp
(*
¨gs
, "reject")) {

213 
¨gs
++;

214 #i‡
HAVE_RTF_REJECT


215 
π
.
π_Êags
 |
RTF_REJECT
;

217 
	`ENOSUPP
("inet_setroute", "RTF_REJECT");

221 i‡(!
	`°rcmp
(*
¨gs
, "mod")) {

222 
¨gs
++;

223 
π
.
π_Êags
 |
RTF_MODIFIED
;

226 i‡(!
	`°rcmp
(*
¨gs
, "dyn")) {

227 
¨gs
++;

228 
π
.
π_Êags
 |
RTF_DYNAMIC
;

231 i‡(!
	`°rcmp
(*
¨gs
, "reinstate")) {

232 
¨gs
++;

233 
π
.
π_Êags
 |
RTF_REINSTATE
;

236 i‡(!
	`°rcmp
(*
¨gs
, "device") || !strcmp(*args, "dev")) {

237 
¨gs
++;

238 i‡(
π
.
π_dev
 || *
¨gs
 =
NULL
)

239  
	`ußge
();

240 
π
.
π_dev
 = *
¨gs
++;

244 i‡(!
π
.
π_dev
) {

245 
π
.
π_dev
 = *
¨gs
++;

246 i‡(*
¨gs
)

247  
	`ußge
();

249  
	`ußge
();

252 #i‡
HAVE_RTF_REJECT


253 i‡((
π
.
π_Êags
 & 
RTF_REJECT
Ë&& !π.
π_dev
)

254 
π
.
π_dev
 = "lo";

258 i‡(
	`mask_ö_addr
(
π
)) {

259 
__u32
 
mask
 = ~
	`¡ohl
(
	`mask_ö_addr
(
π
));

260 i‡((
π
.
π_Êags
 & 
RTF_HOST
Ë&& 
mask
 != 0xffffffff) {

261 
	`Ârötf
(
°dîr
, 
	`_
("rouã:Çëmask %.8x d€¢'àmakê£n£ wôh ho°Ñouã\n"), 
mask
);

262  (
E_OPTERR
);

264 i‡(
mask
 & (mask + 1)) {

265 
	`Ârötf
(
°dîr
, 
	`_
("rouã: bogu†√tmask %s\n"), 
√tmask
);

266  (
E_OPTERR
);

268 
mask
 = ((
sockaddr_ö
 *Ë&
π
.
π_d°
)->
sö_addr
.
s_addr
;

269 i‡(
mask
 & ~
	`mask_ö_addr
(
π
)) {

270 
	`Ârötf
(
°dîr
, 
	`_
("route:Çetmask doesn't matchÑouteáddress\n"));

271  (
E_OPTERR
);

275 i‡((
a˘i⁄
 =
RTACTION_ADD
Ë&& 
π
.
π_Êags
 & 
RTF_HOST
)

276 
	`mask_ö_addr
(
π
) = 0xffffffff;

279 i‡((
skfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0) {

280 
	`≥º‹
("socket");

281  (
E_SOCK
);

284 i‡(
a˘i⁄
 =
RTACTION_DEL
) {

285 i‡(
	`io˘l
(
skfd
, 
SIOCDELRT
, &
π
) < 0) {

286 
	`≥º‹
("SIOCDELRT");

287 
	`˛o£
(
skfd
);

288  (
E_SOCK
);

291 i‡(
	`io˘l
(
skfd
, 
SIOCADDRT
, &
π
) < 0) {

292 
	`≥º‹
("SIOCADDRT");

293 
	`˛o£
(
skfd
);

294  (
E_SOCK
);

299 (Ë
	`˛o£
(
skfd
);

301 
	}
}

303 
	$INET_röput
(
a˘i⁄
, 
›ti⁄s
, **
¨gs
)

305 i‡(
a˘i⁄
 =
RTACTION_FLUSH
) {

306 
	`Ârötf
(
°dîr
, 
	`_
("Flushing `inet'ÑoutingÅableÇot supported\n"));

307  (
	`ußge
());

309 i‡(
›ti⁄s
 & 
FLAG_CACHE
) {

310 
	`Ârötf
(
°dîr
, 
	`_
("Modifying `inet'Ñouting cacheÇot supported\n"));

311  (
	`ußge
());

313 i‡((*
¨gs
 =
NULL
Ë|| (
a˘i⁄
 =
RTACTION_HELP
))

314  (
	`ußge
());

316  (
	`INET_£åouã
(
a˘i⁄
, 
›ti⁄s
, 
¨gs
));

317 
	}
}

	@interface/net-tools/lib/interface.c

13 
	~"c⁄fig.h
"

15 
	~<sys/ty≥s.h
>

16 
	~<sys/sockë.h
>

17 
	~<sys/io˘l.h
>

18 
	~<√töë/ö.h
>

19 
	~<√t/if.h
>

20 
	~<°dio.h
>

21 
	~<î∫o.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<uni°d.h
>

25 
	~<˘y≥.h
>

26 
	~<°rög.h
>

28 #i‡
HAVE_AFIPX


29 #i‡(
__GLIBC__
 > 2Ë|| (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >= 1)

30 
	~<√tùx/ùx.h
>

32 
	~"ùx.h
"

36 #i‡
HAVE_AFECONET


37 
	~<√ãc⁄ë/ec.h
>

40 #ifde‡
HAVE_HWSLIP


41 
	~<löux/if_¶ù.h
>

42 
	~<√t/if_¨p.h
>

45 
	~"√t-suµ‹t.h
"

46 
	~"∑th«mes.h
"

47 
	~"vîsi⁄.h
"

48 
	~"¥oc.h
"

50 
	~"öãrÁ˚.h
"

51 
	~"sockës.h
"

52 
	~"utû.h
"

53 
	~"öé.h
"

55 #ifde‡
IFF_PORTSEL


56 c⁄° *
	gif_p‹t_ãxt
[][4] =

59 {"unknown", 
NULL
, NULL, NULL},

60 {"10ba£2", "bnc", "cﬂx", 
NULL
},

61 {"10ba£T", "uç", "çe", 
NULL
},

62 {"AUI", "thick", "db15", 
NULL
},

63 {"100ba£T", 
NULL
, NULL, NULL},

64 {"100ba£TX", 
NULL
, NULL, NULL},

65 {"100ba£FX", 
NULL
, NULL, NULL},

66 {
NULL
, NULL, NULL, NULL},

70 
	#IPV6_ADDR_ANY
 0x0000U

	)

72 
	#IPV6_ADDR_UNICAST
 0x0001U

	)

73 
	#IPV6_ADDR_MULTICAST
 0x0002U

	)

74 
	#IPV6_ADDR_ANYCAST
 0x0004U

	)

76 
	#IPV6_ADDR_LOOPBACK
 0x0010U

	)

77 
	#IPV6_ADDR_LINKLOCAL
 0x0020U

	)

78 
	#IPV6_ADDR_SITELOCAL
 0x0040U

	)

80 
	#IPV6_ADDR_COMPATv4
 0x0080U

	)

82 
	#IPV6_ADDR_SCOPE_MASK
 0x00f0U

	)

84 
	#IPV6_ADDR_MAPPED
 0x1000U

	)

85 
	#IPV6_ADDR_RESERVED
 0x2000U

	)

87 
	g¥o˙ëdev_v¢
 = 1;

89 
	gi„_sh‹t
;

91 
	gif_li°_Æl
 = 0;

93 
öãrÁ˚
 *
	göt_li°
, *
	göt_œ°
;

95 
if_ªadli°_¥oc
(*);

97 
öãrÁ˚
 *
	$if_ˇche_add
(*
«me
)

99 
öãrÁ˚
 *
i„
, **
√xç
, *
√w
;

101 i‡(!
öt_li°
)

102 
öt_œ°
 = 
NULL
;

105 
i„
 = 
öt_œ°
; i„; i„ = i„->
¥ev
) {

106 
n
 = 
	`n°rcmp
(
i„
->
«me
,Çame);

107 i‡(
n
 == 0)

108  
i„
;

109 i‡(
n
 < 0)

112 
	`√w
(
√w
);

113 
	`ß„_°∫˝y
(
√w
->
«me
,Çame, 
IFNAMSIZ
);

114 
√xç
 = 
i„
 ? &i„->
√xt
 : &
öt_li°
;

115 
√w
->
¥ev
 = 
i„
;

116 
√w
->
√xt
 = *
√xç
;

117 i‡(
√w
->
√xt
)

118 
√w
->
√xt
->
¥ev
 =Çew;

120 
öt_œ°
 = 
√w
;

121 *
√xç
 = 
√w
;

122  
√w
;

123 
	}
}

125 
öãrÁ˚
 *
	$lookup_öãrÁ˚
(*
«me
)

128 i‡(
if_li°_Æl
)

129  
	`if_ˇche_add
(
«me
);

132 i‡(
	`if_ªadli°_¥oc
(
«me
) < 0)

133  
NULL
;

135  
	`if_ˇche_add
(
«me
);

136 
	}
}

138 
f‹_Æl_öãrÁ˚s
((*
doô
Ë(
öãrÁ˚
 *, *), *
cookõ
)

140 
öãrÁ˚
 *
i„
;

142 i‡(!
if_li°_Æl
 && (
	`if_ªadli°
() < 0))

144 
i„
 = 
öt_li°
; i„; i„ = i„->
√xt
) {

145 
îr
 = 
	`doô
(
i„
, 
cookõ
);

146 i‡(
îr
)

147  
îr
;

150 
	}
}

152 
	$if_ˇche_‰ì
()

154 
öãrÁ˚
 *
i„
;

155 (
i„
 = 
öt_li°
Ë!
NULL
) {

156 
öt_li°
 = 
i„
->
√xt
;

157 
	`‰ì
(
i„
);

159 
öt_œ°
 = 
NULL
;

160 
if_li°_Æl
 = 0;

162 
	}
}

164 
	$if_ªadc⁄f
()

166 
numªqs
 = 30;

167 
ifc⁄f
 
ifc
;

168 
i‰eq
 *
i‰
;

169 
n
, 
îr
 = -1;

170 
skfd
;

174 
skfd
 = 
	`gë_sockë_f‹_af
(
AF_INET
);

175 i‡(
skfd
 < 0) {

176 
	`Ârötf
(
°dîr
, 
	`_
("warning:Ço inet socketávailable: %s\n"),

177 
	`°ªº‹
(
î∫o
));

179 
skfd
 = 
	`sockës_›í
(0);

180 i‡(
skfd
 < 0)

184 
ifc
.
ifc_buf
 = 
NULL
;

186 
ifc
.
ifc_Àn
 = (
i‰eq
Ë* 
numªqs
;

187 
ifc
.
ifc_buf
 = 
	`xªÆloc
(ifc.ifc_buf, ifc.
ifc_Àn
);

189 i‡(
	`io˘l
(
skfd
, 
SIOCGIFCONF
, &
ifc
) < 0) {

190 
	`≥º‹
("SIOCGIFCONF");

191 
out
;

193 i‡(
ifc
.
ifc_Àn
 =(
i‰eq
Ë* 
numªqs
) {

195 
numªqs
 *= 2;

201 
i‰
 = 
ifc
.
ifc_ªq
;

202 
n
 = 0;Ç < 
ifc
.
ifc_Àn
;Ç +(
i‰eq
)) {

203 
	`if_ˇche_add
(
i‰
->
i‰_«me
);

204 
i‰
++;

206 
îr
 = 0;

208 
out
:

209 
	`‰ì
(
ifc
.
ifc_buf
);

210  
îr
;

211 
	}
}

213 *
	$gë_«me
(*
«me
, *
p
)

215 
	`is•a˚
(*
p
))

216 
p
++;

217 *
p
) {

218 i‡(
	`is•a˚
(*
p
))

220 i‡(*
p
 == ':') {

221 *
dŸ
 = 
p
++;

222 *
p
 && 
	`isdigô
(*p))Ö++;

223 i‡(*
p
 == ':') {

225 
p
 = 
dŸ
;

226 *
«me
++ = *
p
++;

227 *
p
 && 
	`isdigô
(*p)) {

228 *
«me
++ = *
p
++;

232 
p
 = 
dŸ
;

234 
p
++;

237 *
«me
++ = *
p
++;

239 *
«me
++ = '\0';

240  
p
;

241 
	}
}

243 
	$¥o˙ëdev_vîsi⁄
(*
buf
)

245 i‡(
	`°r°r
(
buf
, "compressed"))

247 i‡(
	`°r°r
(
buf
, "bytes"))

250 
	}
}

252 
	$gë_dev_fõlds
(*
bp
, 
öãrÁ˚
 *
i„
)

254 
¥o˙ëdev_v¢
) {

256 
	`ssˇnf
(
bp
,

258 &
i„
->
°©s
.
rx_byãs
,

259 &
i„
->
°©s
.
rx_∑ckës
,

260 &
i„
->
°©s
.
rx_îr‹s
,

261 &
i„
->
°©s
.
rx_dr›≥d
,

262 &
i„
->
°©s
.
rx_fifo_îr‹s
,

263 &
i„
->
°©s
.
rx_‰ame_îr‹s
,

264 &
i„
->
°©s
.
rx_com¥es£d
,

265 &
i„
->
°©s
.
rx_mu…iˇ°
,

267 &
i„
->
°©s
.
tx_byãs
,

268 &
i„
->
°©s
.
tx_∑ckës
,

269 &
i„
->
°©s
.
tx_îr‹s
,

270 &
i„
->
°©s
.
tx_dr›≥d
,

271 &
i„
->
°©s
.
tx_fifo_îr‹s
,

272 &
i„
->
°©s
.
cﬁlisi⁄s
,

273 &
i„
->
°©s
.
tx_ˇºõr_îr‹s
,

274 &
i„
->
°©s
.
tx_com¥es£d
);

277 
	`ssˇnf
(
bp
, "%Lu %Lu %lu %lu %lu %lu %Lu %Lu %lu %lu %lu %lu %lu",

278 &
i„
->
°©s
.
rx_byãs
,

279 &
i„
->
°©s
.
rx_∑ckës
,

280 &
i„
->
°©s
.
rx_îr‹s
,

281 &
i„
->
°©s
.
rx_dr›≥d
,

282 &
i„
->
°©s
.
rx_fifo_îr‹s
,

283 &
i„
->
°©s
.
rx_‰ame_îr‹s
,

285 &
i„
->
°©s
.
tx_byãs
,

286 &
i„
->
°©s
.
tx_∑ckës
,

287 &
i„
->
°©s
.
tx_îr‹s
,

288 &
i„
->
°©s
.
tx_dr›≥d
,

289 &
i„
->
°©s
.
tx_fifo_îr‹s
,

290 &
i„
->
°©s
.
cﬁlisi⁄s
,

291 &
i„
->
°©s
.
tx_ˇºõr_îr‹s
);

292 
i„
->
°©s
.
rx_mu…iˇ°
 = 0;

295 
	`ssˇnf
(
bp
, "%Lu %lu %lu %lu %lu %Lu %lu %lu %lu %lu %lu",

296 &
i„
->
°©s
.
rx_∑ckës
,

297 &
i„
->
°©s
.
rx_îr‹s
,

298 &
i„
->
°©s
.
rx_dr›≥d
,

299 &
i„
->
°©s
.
rx_fifo_îr‹s
,

300 &
i„
->
°©s
.
rx_‰ame_îr‹s
,

302 &
i„
->
°©s
.
tx_∑ckës
,

303 &
i„
->
°©s
.
tx_îr‹s
,

304 &
i„
->
°©s
.
tx_dr›≥d
,

305 &
i„
->
°©s
.
tx_fifo_îr‹s
,

306 &
i„
->
°©s
.
cﬁlisi⁄s
,

307 &
i„
->
°©s
.
tx_ˇºõr_îr‹s
);

308 
i„
->
°©s
.
rx_byãs
 = 0;

309 
i„
->
°©s
.
tx_byãs
 = 0;

310 
i„
->
°©s
.
rx_mu…iˇ°
 = 0;

314 
	}
}

316 
	$if_ªadli°_¥oc
(*
èrgë
)

318 
FILE
 *
fh
;

319 
buf
[512];

320 
öãrÁ˚
 *
i„
;

321 
îr
;

323 
fh
 = 
	`f›í
(
_PATH_PROCNET_DEV
, "r");

324 i‡(!
fh
) {

325 
	`Ârötf
(
°dîr
, 
	`_
("Warning: cannot open %s (%s). Limited output.\n"),

326 
_PATH_PROCNET_DEV
, 
	`°ªº‹
(
î∫o
));

329 
	`fgës
(
buf
,  buf, 
fh
);

330 
	`fgës
(
buf
,  buf, 
fh
);

333 
fmt
 = 
	`¥oc_gí_fmt
(
_PATH_PROCNET_DEV
, 1, 
fh
,

351 
NULL
);

352 i‡(!
fmt
)

355 
¥o˙ëdev_v¢
 = 
	`¥o˙ëdev_vîsi⁄
(
buf
);

358 
îr
 = 0;

359 
	`fgës
(
buf
,  buf, 
fh
)) {

360 *
s
, 
«me
[
IFNAMSIZ
];

361 
s
 = 
	`gë_«me
(
«me
, 
buf
);

362 
i„
 = 
	`if_ˇche_add
(
«me
);

363 
	`gë_dev_fõlds
(
s
, 
i„
);

364 
i„
->
°©i°ics_vÆid
 = 1;

365 i‡(
èrgë
 && !
	`°rcmp
—¨gë,
«me
))

368 i‡(
	`„º‹
(
fh
)) {

369 
	`≥º‹
(
_PATH_PROCNET_DEV
);

370 
îr
 = -1;

374 
	`‰ì
(
fmt
);

376 
	`f˛o£
(
fh
);

377  
îr
;

378 
	}
}

380 
	$if_ªadli°
()

385 
¥oc_îr
, 
c⁄f_îr
;

387 
¥oc_îr
 = 
	`if_ªadli°_¥oc
(
NULL
);

388 
c⁄f_îr
 = 
	`if_ªadc⁄f
();

390 
if_li°_Æl
 = 1;

392 i‡(
¥oc_îr
 < 0 && 
c⁄f_îr
 < 0)

396 
	}
}

400 #i‡
HAVE_AFIPX


401 
	$ùx_gëaddr
(
sock
, 
·
, 
i‰eq
 *
i‰
)

403 ((
sockaddr_ùx
 *Ë&
i‰
->
i‰_addr
)->
sùx_ty≥
 = 
·
;

404  
	`io˘l
(
sock
, 
SIOCGIFADDR
, 
i‰
);

405 
	}
}

409 
	$if_„tch
(
öãrÁ˚
 *
i„
)

411 
i‰eq
 
i‰
;

412 
fd
;

413 *
i‚ame
 = 
i„
->
«me
;

415 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

416 i‡(
	`io˘l
(
skfd
, 
SIOCGIFFLAGS
, &
i‰
) < 0)

418 
i„
->
Êags
 = 
i‰
.
i‰_Êags
;

420 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

421 i‡(
	`io˘l
(
skfd
, 
SIOCGIFHWADDR
, &
i‰
) < 0)

422 
	`mem£t
(
i„
->
hwaddr
, 0, 32);

424 
	`mem˝y
(
i„
->
hwaddr
, 
i‰
.
i‰_hwaddr
.
ß_d©a
, 8);

426 
i„
->
ty≥
 = 
i‰
.
i‰_hwaddr
.
ß_Ámûy
;

428 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

429 i‡(
	`io˘l
(
skfd
, 
SIOCGIFMETRIC
, &
i‰
) < 0)

430 
i„
->
mëric
 = 0;

432 
i„
->
mëric
 = 
i‰
.
i‰_mëric
;

434 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

435 i‡(
	`io˘l
(
skfd
, 
SIOCGIFMTU
, &
i‰
) < 0)

436 
i„
->
mtu
 = 0;

438 
i„
->
mtu
 = 
i‰
.
i‰_mtu
;

440 #ifde‡
HAVE_HWSLIP


441 i‡(
i„
->
ty≥
 =
ARPHRD_SLIP
 || i„->ty≥ =
ARPHRD_CSLIP
 ||

442 
i„
->
ty≥
 =
ARPHRD_SLIP6
 || i„->ty≥ =
ARPHRD_CSLIP6
 ||

443 
i„
->
ty≥
 =
ARPHRD_ADAPT
) {

444 #ifde‡
SIOCGOUTFILL


445 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

446 i‡(
	`io˘l
(
skfd
, 
SIOCGOUTFILL
, &
i‰
) < 0)

447 
i„
->
outfûl
 = 0;

449 
i„
->
outfûl
 = (Ë
i‰
.
i‰_d©a
;

451 #ifde‡
SIOCGKEEPALIVE


452 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

453 i‡(
	`io˘l
(
skfd
, 
SIOCGKEEPALIVE
, &
i‰
) < 0)

454 
i„
->
kì∑live
 = 0;

456 
i„
->
kì∑live
 = (Ë
i‰
.
i‰_d©a
;

461 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

462 i‡(
	`io˘l
(
skfd
, 
SIOCGIFMAP
, &
i‰
) < 0)

463 
	`mem£t
(&
i„
->
m≠
, 0, (
ifm≠
));

465 
	`mem˝y
(&
i„
->
m≠
, &
i‰
.
i‰_m≠
, (
ifm≠
));

467 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

468 i‡(
	`io˘l
(
skfd
, 
SIOCGIFMAP
, &
i‰
) < 0)

469 
	`mem£t
(&
i„
->
m≠
, 0, (
ifm≠
));

471 
i„
->
m≠
 = 
i‰
.
i‰_m≠
;

473 #ifde‡
HAVE_TXQUEUELEN


474 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

475 i‡(
	`io˘l
(
skfd
, 
SIOCGIFTXQLEN
, &
i‰
) < 0)

476 
i„
->
tx_queue_Àn
 = -1;

478 
i„
->
tx_queue_Àn
 = 
i‰
.
i‰_qÀn
;

480 
i„
->
tx_queue_Àn
 = -1;

483 #i‡
HAVE_AFINET


485 
fd
 = 
	`gë_sockë_f‹_af
(
AF_INET
);

486 i‡(
fd
 >= 0) {

487 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

488 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

489 i‡(
	`io˘l
(
fd
, 
SIOCGIFADDR
, &
i‰
) == 0) {

490 
i„
->
has_ù
 = 1;

491 
i„
->
addr
 = 
i‰
.
i‰_addr
;

492 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

493 i‡(
	`io˘l
(
fd
, 
SIOCGIFDSTADDR
, &
i‰
) < 0)

494 
	`mem£t
(&
i„
->
d°addr
, 0, (
sockaddr
));

496 
i„
->
d°addr
 = 
i‰
.
i‰_d°addr
;

498 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

499 i‡(
	`io˘l
(
fd
, 
SIOCGIFBRDADDR
, &
i‰
) < 0)

500 
	`mem£t
(&
i„
->
brﬂdaddr
, 0, (
sockaddr
));

502 
i„
->
brﬂdaddr
 = 
i‰
.
i‰_brﬂdaddr
;

504 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

505 i‡(
	`io˘l
(
fd
, 
SIOCGIFNETMASK
, &
i‰
) < 0)

506 
	`mem£t
(&
i„
->
√tmask
, 0, (
sockaddr
));

508 
i„
->
√tmask
 = 
i‰
.
i‰_√tmask
;

510 
	`mem£t
(&
i„
->
addr
, 0, (
sockaddr
));

514 #i‡
HAVE_AFATALK


516 
fd
 = 
	`gë_sockë_f‹_af
(
AF_APPLETALK
);

517 i‡(
fd
 >= 0) {

518 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

519 i‡(
	`io˘l
(
fd
, 
SIOCGIFADDR
, &
i‰
) == 0) {

520 
i„
->
dd∑ddr
 = 
i‰
.
i‰_addr
;

521 
i„
->
has_ddp
 = 1;

526 #i‡
HAVE_AFIPX


528 
fd
 = 
	`gë_sockë_f‹_af
(
AF_IPX
);

529 i‡(
fd
 >= 0) {

530 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

531 i‡(!
	`ùx_gëaddr
(
fd
, 
IPX_FRAME_ETHERII
, &
i‰
)) {

532 
i„
->
has_ùx_bb
 = 1;

533 
i„
->
ùxaddr_bb
 = 
i‰
.
i‰_addr
;

535 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

536 i‡(!
	`ùx_gëaddr
(
fd
, 
IPX_FRAME_SNAP
, &
i‰
)) {

537 
i„
->
has_ùx_¢
 = 1;

538 
i„
->
ùxaddr_¢
 = 
i‰
.
i‰_addr
;

540 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

541 i‡(!
	`ùx_gëaddr
(
fd
, 
IPX_FRAME_8023
, &
i‰
)) {

542 
i„
->
has_ùx_e3
 = 1;

543 
i„
->
ùxaddr_e3
 = 
i‰
.
i‰_addr
;

545 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

546 i‡(!
	`ùx_gëaddr
(
fd
, 
IPX_FRAME_8022
, &
i‰
)) {

547 
i„
->
has_ùx_e2
 = 1;

548 
i„
->
ùxaddr_e2
 = 
i‰
.
i‰_addr
;

553 #i‡
HAVE_AFECONET


555 
fd
 = 
	`gë_sockë_f‹_af
(
AF_ECONET
);

556 i‡(
fd
 >= 0) {

557 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

558 i‡(
	`io˘l
(
fd
, 
SIOCGIFADDR
, &
i‰
) == 0) {

559 
i„
->
eˇddr
 = 
i‰
.
i‰_addr
;

560 
i„
->
has_ec⁄ë
 = 1;

566 
	}
}

568 
	$do_if_„tch
(
öãrÁ˚
 *
i„
)

570 i‡(
	`if_„tch
(
i„
) < 0) {

571 *
îrmsg
;

572 i‡(
î∫o
 =
ENODEV
) {

574 
îrmsg
 = 
	`_
("DeviceÇot found");

576 
îrmsg
 = 
	`°ªº‹
(
î∫o
);

578 
	`Ârötf
(
°dîr
, 
	`_
("%s:Érror fetching interface information: %s\n"),

579 
i„
->
«me
, 
îrmsg
);

583 
	}
}

585 
	$do_if_¥öt
(
öãrÁ˚
 *
i„
, *
cookõ
)

587 *
›t_a
 = (*Ë
cookõ
;

588 
ªs
;

590 
ªs
 = 
	`do_if_„tch
(
i„
);

591 i‡(
ªs
 >= 0) {

592 i‡((
i„
->
Êags
 & 
IFF_UP
Ë|| *
›t_a
)

593 
	`i„_¥öt
(
i„
);

595  
ªs
;

596 
	}
}

598 
	$i„_¥öt_sh‹t
(
öãrÁ˚
 *
±r
)

600 
	`¥ötf
("%-5.5†", 
±r
->
«me
);

601 
	`¥ötf
("%5d %-2d ", 
±r
->
mtu
,Öå->
mëric
);

603 i‡(
±r
->
°©i°ics_vÆid
) {

604 
	`¥ötf
("%8llu %6lu %6lu %-6lu ",

605 
±r
->
°©s
.
rx_∑ckës
,Öå->°©s.
rx_îr‹s
,

606 
±r
->
°©s
.
rx_dr›≥d
,Öå->°©s.
rx_fifo_îr‹s
);

607 
	`¥ötf
("%8llu %6lu %6lu %6lu ",

608 
±r
->
°©s
.
tx_∑ckës
,Öå->°©s.
tx_îr‹s
,

609 
±r
->
°©s
.
tx_dr›≥d
,Öå->°©s.
tx_fifo_îr‹s
);

611 
	`¥ötf
("%-56s", 
	`_
(" -Ço statisticsávailable -"));

614 i‡(
±r
->
Êags
 == 0)

615 
	`¥ötf
(
	`_
("[NO FLAGS]"));

616 i‡(
±r
->
Êags
 & 
IFF_ALLMULTI
)

617 
	`¥ötf
("A");

618 i‡(
±r
->
Êags
 & 
IFF_BROADCAST
)

619 
	`¥ötf
("B");

620 i‡(
±r
->
Êags
 & 
IFF_DEBUG
)

621 
	`¥ötf
("D");

622 i‡(
±r
->
Êags
 & 
IFF_LOOPBACK
)

623 
	`¥ötf
("L");

624 i‡(
±r
->
Êags
 & 
IFF_MULTICAST
)

625 
	`¥ötf
("M");

626 #ifde‡
HAVE_DYNAMIC


627 i‡(
±r
->
Êags
 & 
IFF_DYNAMIC
)

628 
	`¥ötf
("d");

630 i‡(
±r
->
Êags
 & 
IFF_PROMISC
)

631 
	`¥ötf
("P");

632 i‡(
±r
->
Êags
 & 
IFF_NOTRAILERS
)

633 
	`¥ötf
("N");

634 i‡(
±r
->
Êags
 & 
IFF_NOARP
)

635 
	`¥ötf
("O");

636 i‡(
±r
->
Êags
 & 
IFF_POINTOPOINT
)

637 
	`¥ötf
("P");

638 i‡(
±r
->
Êags
 & 
IFF_SLAVE
)

639 
	`¥ötf
("s");

640 i‡(
±r
->
Êags
 & 
IFF_MASTER
)

641 
	`¥ötf
("m");

642 i‡(
±r
->
Êags
 & 
IFF_RUNNING
)

643 
	`¥ötf
("R");

644 i‡(
±r
->
Êags
 & 
IFF_UP
)

645 
	`¥ötf
("U");

647 
	`¥ötf
("\n");

648 
	}
}

650 
	$i„_¥öt_l⁄g
(
öãrÁ˚
 *
±r
)

652 
a·y≥
 *
≠
;

653 
hwty≥
 *
hw
;

654 
hf
;

655 
ˇn_com¥ess
 = 0;

656 
rx
, 
tx
, 
sh‹t_rx
, 
sh‹t_tx
;

657 c⁄° *
Rext
 = "B";

658 c⁄° *
Text
 = "B";

659 
Êags
[200];

661 #i‡
HAVE_AFIPX


662 
a·y≥
 *
ùxty≥
 = 
NULL
;

664 #i‡
HAVE_AFECONET


665 
a·y≥
 *
e˘y≥
 = 
NULL
;

667 #i‡
HAVE_AFATALK


668 
a·y≥
 *
dd±y≥
 = 
NULL
;

670 #i‡
HAVE_AFINET6


671 
FILE
 *
f
;

672 
addr6
[40], 
dev«me
[21];

673 
sockaddr_ö6
 
ßp
;

674 
∂í
, 
sc›e
, 
dad_°©us
, 
if_idx
;

675 
a·y≥
 
öë6_a·y≥
;

676 
addr6p
[8][5];

679 
≠
 = 
	`gë_a‚ty≥
(
±r
->
addr
.
ß_Ámûy
);

680 i‡(
≠
 =
NULL
)

681 
≠
 = 
	`gë_a‚ty≥
(0);

683 
hf
 = 
±r
->
ty≥
;

685 i‡(
hf
 =
ARPHRD_CSLIP
 || h‡=
ARPHRD_CSLIP6
)

686 
ˇn_com¥ess
 = 1;

688 
hw
 = 
	`gë_hw¡y≥
(
hf
);

689 i‡(
hw
 =
NULL
)

690 
hw
 = 
	`gë_hw¡y≥
(-1);

692 
	`•rötf
(
Êags
, "Êags=%d<", 
±r
->flags);

694 i‡(
±r
->
Êags
 == 0)

695 
	`°rˇt
(
Êags
,">");

696 i‡(
±r
->
Êags
 & 
IFF_UP
)

697 
	`°rˇt
(
Êags
,
	`_
("UP,"));

698 i‡(
±r
->
Êags
 & 
IFF_BROADCAST
)

699 
	`°rˇt
(
Êags
,
	`_
("BROADCAST,"));

700 i‡(
±r
->
Êags
 & 
IFF_DEBUG
)

701 
	`°rˇt
(
Êags
,
	`_
("DEBUG,"));

702 i‡(
±r
->
Êags
 & 
IFF_LOOPBACK
)

703 
	`°rˇt
(
Êags
,
	`_
("LOOPBACK,"));

704 i‡(
±r
->
Êags
 & 
IFF_POINTOPOINT
)

705 
	`°rˇt
(
Êags
,
	`_
("POINTOPOINT,"));

706 i‡(
±r
->
Êags
 & 
IFF_NOTRAILERS
)

707 
	`°rˇt
(
Êags
,
	`_
("NOTRAILERS,"));

708 i‡(
±r
->
Êags
 & 
IFF_RUNNING
)

709 
	`°rˇt
(
Êags
,
	`_
("RUNNING,"));

710 i‡(
±r
->
Êags
 & 
IFF_NOARP
)

711 
	`°rˇt
(
Êags
,
	`_
("NOARP,"));

712 i‡(
±r
->
Êags
 & 
IFF_PROMISC
)

713 
	`°rˇt
(
Êags
,
	`_
("PROMISC,"));

714 i‡(
±r
->
Êags
 & 
IFF_ALLMULTI
)

715 
	`°rˇt
(
Êags
,
	`_
("ALLMULTI,"));

716 i‡(
±r
->
Êags
 & 
IFF_SLAVE
)

717 
	`°rˇt
(
Êags
,
	`_
("SLAVE,"));

718 i‡(
±r
->
Êags
 & 
IFF_MASTER
)

719 
	`°rˇt
(
Êags
,
	`_
("MASTER,"));

720 i‡(
±r
->
Êags
 & 
IFF_MULTICAST
)

721 
	`°rˇt
(
Êags
,
	`_
("MULTICAST,"));

722 #ifde‡
HAVE_DYNAMIC


723 i‡(
±r
->
Êags
 & 
IFF_DYNAMIC
)

724 
	`°rˇt
(
Êags
,
	`_
("DYNAMIC,"));

727 i‡(
Êags
[
	`°æí
(flags)-1] == ',')

728 
Êags
[
	`°æí
(flags)-1] = '>';

730 
Êags
[
	`°æí
(flags)-1] = 0;

733 
	`¥ötf
(
	`_
("%s: %s mtu %d metric %d"),

734 
±r
->
«me
, 
Êags
,Öå->
mtu
,Öå->
mëric
 ?Ötr->metric : 1);

735 #ifde‡
SIOCSKEEPALIVE


736 i‡(
±r
->
outfûl
 ||Öå->
kì∑live
)

737 
	`¥ötf
(
	`_
(" outfill %d keepalive %d"),

738 
±r
->
outfûl
,Öå->
kì∑live
);

740 
	`¥ötf
("\n");

744 #i‡
HAVE_AFINET


745 i‡(
±r
->
has_ù
) {

746 
	`¥ötf
(
	`_
(" %†%s"), 
≠
->
«me
,

747 
≠
->
	`•röt
(&
±r
->
addr
, 1));

748 
	`¥ötf
(
	`_
("Çëmask %s"), 
≠
->
	`•röt
(&
±r
->
√tmask
, 1));

749 i‡(
±r
->
Êags
 & 
IFF_BROADCAST
) {

750 
	`¥ötf
(
	`_
(" brﬂdˇ° %s"), 
≠
->
	`•röt
(&
±r
->
brﬂdaddr
, 1));

752 i‡(
±r
->
Êags
 & 
IFF_POINTOPOINT
) {

753 
	`¥ötf
(
	`_
(" de°ö©i⁄ %s"), 
≠
->
	`•röt
(&
±r
->
d°addr
, 1));

755 
	`¥ötf
("\n");

759 #i‡
HAVE_AFINET6


762 i‡((
f
 = 
	`f›í
(
_PATH_PROCNET_IFINET6
, "r")Ë!
NULL
) {

763 
	`fsˇnf
(
f
, "%4s%4s%4s%4s%4s%4s%4s%4s %08x %02x %02x %02x %20s\n",

764 
addr6p
[0],áddr6p[1],áddr6p[2],áddr6p[3],

765 
addr6p
[4],áddr6p[5],áddr6p[6],áddr6p[7],

766 &
if_idx
, &
∂í
, &
sc›e
, &
dad_°©us
, 
dev«me
Ë!
EOF
) {

767 i‡(!
	`°rcmp
(
dev«me
, 
±r
->
«me
)) {

768 
	`•rötf
(
addr6
, "%s:%s:%s:%s:%s:%s:%s:%s",

769 
addr6p
[0],áddr6p[1],áddr6p[2],áddr6p[3],

770 
addr6p
[4],áddr6p[5],áddr6p[6],áddr6p[7]);

771 
öë6_a·y≥
.
	`öput
(1, 
addr6
, (
sockaddr
 *Ë&
ßp
);

772 
	`¥ötf
(
	`_
(" %s %sÖrefixlen %d"),

773 
öë6_a·y≥
.
«me
,

774 
öë6_a·y≥
.
	`•röt
((
sockaddr
 *Ë&
ßp
, 1),

775 
∂í
);

776 
	`¥ötf
(
	`_
(" sc›eid 0x%x"), 
sc›e
);

778 
Êags
[0] = '<'; flags[1] = 0;

779 i‡(
sc›e
 & 
IPV6_ADDR_COMPATv4
) {

780 
	`°rˇt
(
Êags
, 
	`_
("compat,"));

781 
sc›e
 -
IPV6_ADDR_COMPATv4
;

783 i‡(
sc›e
 == 0)

784 
	`°rˇt
(
Êags
, 
	`_
("global,"));

785 i‡(
sc›e
 & 
IPV6_ADDR_LINKLOCAL
)

786 
	`°rˇt
(
Êags
, 
	`_
("link,"));

787 i‡(
sc›e
 & 
IPV6_ADDR_SITELOCAL
)

788 
	`°rˇt
(
Êags
, 
	`_
("site,"));

789 i‡(
sc›e
 & 
IPV6_ADDR_LOOPBACK
)

790 
	`°rˇt
(
Êags
, 
	`_
("host,"));

791 i‡(
Êags
[
	`°æí
(flags)-1] == ',')

792 
Êags
[
	`°æí
(flags)-1] = '>';

794 
Êags
[
	`°æí
(flags)-1] = 0;

795 
	`¥ötf
("%s\n", 
Êags
);

798 
	`f˛o£
(
f
);

802 #i‡
HAVE_AFIPX


803 i‡(
ùxty≥
 =
NULL
)

804 
ùxty≥
 = 
	`gë_a‚ty≥
(
AF_IPX
);

806 i‡(
ùxty≥
 !
NULL
) {

807 i‡(
±r
->
has_ùx_bb
)

808 
	`¥ötf
(
	`_
(" %s Ethernet-II %s\n"),

809 
ùxty≥
->
«me
, ipxty≥->
	`•röt
(&
±r
->
ùxaddr_bb
, 1));

810 i‡(
±r
->
has_ùx_¢
)

811 
	`¥ötf
(
	`_
(" %s Ethernet-SNAP %s\n"),

812 
ùxty≥
->
«me
, ipxty≥->
	`•röt
(&
±r
->
ùxaddr_¢
, 1));

813 i‡(
±r
->
has_ùx_e2
)

814 
	`¥ötf
(
	`_
(" %s Ethernet802.2 %s\n"),

815 
ùxty≥
->
«me
, ipxty≥->
	`•röt
(&
±r
->
ùxaddr_e2
, 1));

816 i‡(
±r
->
has_ùx_e3
)

817 
	`¥ötf
(
	`_
(" %s Ethernet802.3 %s\n"),

818 
ùxty≥
->
«me
, ipxty≥->
	`•röt
(&
±r
->
ùxaddr_e3
, 1));

822 #i‡
HAVE_AFATALK


823 i‡(
dd±y≥
 =
NULL
)

824 
dd±y≥
 = 
	`gë_a‚ty≥
(
AF_APPLETALK
);

825 i‡(
dd±y≥
 !
NULL
) {

826 i‡(
±r
->
has_ddp
)

827 
	`¥ötf
(
	`_
(" %†%s\n"), 
dd±y≥
->
«me
, dd±y≥->
	`•röt
(&
±r
->
dd∑ddr
, 1));

831 #i‡
HAVE_AFECONET


832 i‡(
e˘y≥
 =
NULL
)

833 
e˘y≥
 = 
	`gë_a‚ty≥
(
AF_ECONET
);

834 i‡(
e˘y≥
 !
NULL
) {

835 i‡(
±r
->
has_ec⁄ë
)

836 
	`¥ötf
(
	`_
(" %†%s\n"), 
e˘y≥
->
«me
,É˘y≥->
	`•röt
(&
±r
->
eˇddr
, 1));

842 i‡(
hw
->
¥öt
 !
NULL
 && (! (
	`hw_nuŒ_addªss
(hw, 
±r
->
hwaddr
) &&

843 
hw
->
suµªss_nuŒ_addr
)))

844 
	`¥ötf
(
	`_
(" %†%s"), 
hw
->
«me
, hw->
	`¥öt
(
±r
->
hwaddr
));

846 
	`¥ötf
(
	`_
(" %s"), 
hw
->
«me
);

847 i‡(
±r
->
tx_queue_Àn
 != -1)

848 
	`¥ötf
(
	`_
("Åxqueuñí %d"), 
±r
->
tx_queue_Àn
);

849 
	`¥ötf
(" (%s)\n", 
hw
->
tôÀ
);

851 #ifde‡
IFF_PORTSEL


852 i‡(
±r
->
Êags
 & 
IFF_PORTSEL
) {

853 
	`¥ötf
(
	`_
(" medü %s"), 
if_p‹t_ãxt
[
±r
->
m≠
.
p‹t
][0]);

854 i‡(
±r
->
Êags
 & 
IFF_AUTOMEDIA
)

855 
	`¥ötf
(
	`_
("autoselect"));

856 
	`¥ötf
("\n");

863 i‡(
±r
->
°©i°ics_vÆid
) {

868 
rx
 = 
±r
->
°©s
.
rx_byãs
;

869 
sh‹t_rx
 = 
rx
 * 10;

870 i‡(
rx
 > 1125899906842624ull) {

871 
sh‹t_rx
 /= 1125899906842624ull;

872 
Rext
 = "PiB";

873 } i‡(
rx
 > 1099511627776ull) {

874 
sh‹t_rx
 /= 1099511627776ull;

875 
Rext
 = "TiB";

876 } i‡(
rx
 > 1073741824ull) {

877 
sh‹t_rx
 /= 1073741824ull;

878 
Rext
 = "GiB";

879 } i‡(
rx
 > 1048576) {

880 
sh‹t_rx
 /= 1048576;

881 
Rext
 = "MiB";

882 } i‡(
rx
 > 1024) {

883 
sh‹t_rx
 /= 1024;

884 
Rext
 = "KiB";

886 
tx
 = 
±r
->
°©s
.
tx_byãs
;

887 
sh‹t_tx
 = 
tx
 * 10;

888 i‡(
tx
 > 1125899906842624ull) {

889 
sh‹t_tx
 /= 1125899906842624ull;

890 
Text
 = "PiB";

891 } i‡(
tx
 > 1099511627776ull) {

892 
sh‹t_tx
 /= 1099511627776ull;

893 
Text
 = "TiB";

894 } i‡(
tx
 > 1073741824ull) {

895 
sh‹t_tx
 /= 1073741824ull;

896 
Text
 = "GiB";

897 } i‡(
tx
 > 1048576) {

898 
sh‹t_tx
 /= 1048576;

899 
Text
 = "MiB";

900 } i‡(
tx
 > 1024) {

901 
sh‹t_tx
 /= 1024;

902 
Text
 = "KiB";

905 
	`¥ötf
(" ");

906 
	`¥ötf
(
	`_
("RXÖackets %llu bytes %llu (%lu.%lu %s)\n"),

907 
±r
->
°©s
.
rx_∑ckës
,

908 
rx
, ()(
sh‹t_rx
 / 10),

909 ()(
sh‹t_rx
 % 10), 
Rext
);

910 i‡(
ˇn_com¥ess
) {

911 
	`¥ötf
(" ");

912 
	`¥ötf
(
	`_
("RX com¥es£d:%lu\n"), 
±r
->
°©s
.
rx_com¥es£d
);

914 
	`¥ötf
(" ");

915 
	`¥ötf
(
	`_
("RXÉrrors %lu dropped %lu overruns %lu frame %lu\n"),

916 
±r
->
°©s
.
rx_îr‹s
,Öå->°©s.
rx_dr›≥d
,

917 
±r
->
°©s
.
rx_fifo_îr‹s
,Öå->°©s.
rx_‰ame_îr‹s
);

920 
	`¥ötf
(" ");

921 
	`¥ötf
(
	`_
("TXÖackets %llu bytes %llu (%lu.%lu %s)\n"),

922 
±r
->
°©s
.
tx_∑ckës
,

923 
tx
, ()(
sh‹t_tx
 / 10),

924 ()(
sh‹t_tx
 % 10), 
Text
);

925 i‡(
ˇn_com¥ess
) {

926 
	`¥ötf
(" ");

927 
	`¥ötf
(
	`_
("TX com¥es£d %lu\n"), 
±r
->
°©s
.
tx_com¥es£d
);

929 
	`¥ötf
(" ");

930 
	`¥ötf
(
	`_
("TXÉrrors %lu dropped %lu overruns %lu carrier %lu collisions %lu\n"),

931 
±r
->
°©s
.
tx_îr‹s
,

932 
±r
->
°©s
.
tx_dr›≥d
,Öå->°©s.
tx_fifo_îr‹s
,

933 
±r
->
°©s
.
tx_ˇºõr_îr‹s
,Öå->°©s.
cﬁlisi⁄s
);

936 i‡((
±r
->
m≠
.
úq
 ||Öå->m≠.
mem_°¨t
 ||Öå->m≠.
dma
 ||

937 
±r
->
m≠
.
ba£_addr
 >= 0x100)) {

938 
	`¥ötf
(" device ");

939 i‡(
±r
->
m≠
.
úq
)

940 
	`¥ötf
(
	`_
("öãºu± %d "), 
±r
->
m≠
.
úq
);

941 i‡(
±r
->
m≠
.
ba£_addr
 >= 0x100)

943 
	`¥ötf
(
	`_
("ba£ 0x%x "), 
±r
->
m≠
.
ba£_addr
);

944 i‡(
±r
->
m≠
.
mem_°¨t
) {

945 
	`¥ötf
(
	`_
("mem‹y 0x%lx-%lx "), 
±r
->
m≠
.
mem_°¨t
,Öå->m≠.
mem_íd
);

947 i‡(
±r
->
m≠
.
dma
)

948 
	`¥ötf
(
	`_
(" dm®0x%x"), 
±r
->
m≠
.
dma
);

949 
	`¥ötf
("\n");

951 
	`¥ötf
("\n");

952 
	}
}

954 
	$i„_¥öt
(
öãrÁ˚
 *
i
)

956 i‡(
i„_sh‹t
)

957 
	`i„_¥öt_sh‹t
(
i
);

959 
	`i„_¥öt_l⁄g
(
i
);

960 
	}
}

	@interface/net-tools/lib/ipx.c

16 
	~"c⁄fig.h
"

18 #i‡
HAVE_AFIPX


19 
	~<asm/ty≥s.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/sockë.h
>

22 #i‡(
__GLIBC__
 > 2Ë|| (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >= 1)

23 
	~<√tùx/ùx.h
>

25 
	~"ùx.h
"

27 
	~<°dlib.h
>

28 
	~<°dio.h
>

29 
	~<î∫o.h
>

30 
	~<˘y≥.h
>

31 
	~<°rög.h
>

32 
	~<uni°d.h
>

33 
	~<√töë/ö.h
>

34 
	~"vîsi⁄.h
"

35 
	~"√t-suµ‹t.h
"

36 
	~"∑th«mes.h
"

37 
	~"öé.h
"

38 
	~"utû.h
"

40 #i‡(
IPX_NODE_LEN
 != 6)

45 *
	$IPX_¥öt
(*
±r
)

47 
buff
[64];

48 
sockaddr_ùx
 *
sùx
 = (sockaddr_ùx *Ë(
±r
 - 2);

49 
t
;

52 
t
 = 
IPX_NODE_LEN
;Å;Å--)

53 i‡(
sùx
->
sùx_node
[
t
 - 1])

56 i‡(
t
 && 
	`¡ohl
(
sùx
->
sùx_√tw‹k
))

57 
	`¢¥ötf
(
buff
, (buff), "%08lX:%02X%02X%02X%02X%02X%02X",

58 (Ë
	`¡ohl
(
sùx
->
sùx_√tw‹k
),

59 (Ë
sùx
->
sùx_node
[0], () sipx->sipx_node[1],

60 (Ë
sùx
->
sùx_node
[2], () sipx->sipx_node[3],

61 (Ë
sùx
->
sùx_node
[4], () sipx->sipx_node[5]);

62 i‡(!
t
 && 
	`¡ohl
(
sùx
->
sùx_√tw‹k
))

63 
	`¢¥ötf
(
buff
, (buff), "%08lX", (Ë
	`¡ohl
(
sùx
->
sùx_√tw‹k
));

64 i‡(
t
 && !
	`¡ohl
(
sùx
->
sùx_√tw‹k
))

65 
	`¢¥ötf
(
buff
, (buff), "%02X%02X%02X%02X%02X%02X",

66 (Ë
sùx
->
sùx_node
[0], () sipx->sipx_node[1],

67 (Ë
sùx
->
sùx_node
[2], () sipx->sipx_node[3],

68 (Ë
sùx
->
sùx_node
[4], () sipx->sipx_node[5]);

70 
buff
[0] = '\0';

71  (
buff
);

72 
	}
}

76 *
	$IPX_•röt
(
sockaddr
 *
ßp
, 
numîic
)

78 
buf
[64];

80 i‡(
ßp
->
ß_Ámûy
 !
AF_IPX
)

81  
	`ß„_°∫˝y
(
buf
, 
	`_
("[NONE SET]"), (buf));

82  (
	`IPX_¥öt
(
ßp
->
ß_d©a
));

83 
	}
}

86 
	$IPX_gësock
(*
buÂ
, 
sockaddr
 *
ßp
)

88 *
•
 = 
buÂ
, *
bp
;

89 
i
;

90 
vÆ
;

91 
sockaddr_ùx
 *
sùx
 = (sockaddr_ùx *Ë
ßp
;

93 
sùx
->
sùx_p‹t
 = 0;

95 
vÆ
 = 0;

96 
bp
 = (*Ë
sùx
->
sùx_node
;

97 
i
 = 0; i < (
sùx
->
sùx_node
); i++) {

98 *
•
 = 
	`touµî
(*sp);

100 i‡((*
•
 >= 'A') && (*sp <= 'F'))

101 
bp
[
i
] |(Ë(*
•
 - 'A') + 10;

102 i‡((*
•
 >= '0') && (*sp <= '9'))

103 
bp
[
i
] |(Ë(*
•
 - '0');

107 
bp
[
i
] <<= 4;

108 
•
++;

109 *
•
 = 
	`touµî
(*sp);

111 i‡((*
•
 >= 'A') && (*sp <= 'F'))

112 
bp
[
i
] |(Ë(*
•
 - 'A') + 10;

113 i‡((*
•
 >= '0') && (*sp <= '9'))

114 
bp
[
i
] |(Ë(*
•
 - '0');

118 
•
++;

120 i‡((
	`memcmp
(
sùx
->
sùx_node
, "\0\0\0\0\0\0\0\0", 
IPX_NODE_LEN
) == 0) ||

121 (
	`memcmp
(
sùx
->
sùx_node
, "\377\377\377\377\377\377", 
IPX_NODE_LEN
) == 0))

125 
	}
}

129 
	$IPX_öput
(
ty≥
, *
buÂ
, 
sockaddr
 *
ßp
)

131 
sockaddr_ùx
 *
ßi
 = (sockaddr_ùx *Ë
ßp
;

132 
√äum
;

133 *
ï
;

134 
nbo
;

136 i‡(!
ßi
)

139 
ßi
->
sùx_Ámûy
 = 
AF_IPX
;

140 
ßi
->
sùx_√tw‹k
 = 
	`ht⁄l
(0);

141 
ßi
->
sùx_node
[0] = sai->sipx_node[1] = sai->sipx_node[2] =

142 
ßi
->
sùx_node
[3] = sai->sipx_node[4] = sai->sipx_node[5] = '\0';

143 
ßi
->
sùx_p‹t
 = 0;

145 i‡(
ty≥
 & 4)

146 
nbo
 = 1;

148 
nbo
 = 0;

150 
ty≥
 &= 3;

151 i‡(
ty≥
 <= 1) {

152 
√äum
 = 
	`°πoul
(
buÂ
, &
ï
, 16);

153 i‡((
√äum
 == 0xffffffffL) || (netnum == 0L))

155 i‡(
nbo
)

156 
ßi
->
sùx_√tw‹k
 = 
√äum
;

158 
ßi
->
sùx_√tw‹k
 = 
	`ht⁄l
(
√äum
);

160 i‡(
ty≥
 == 1) {

161 i‡(*
ï
 != '\0')

165 i‡(
ty≥
 == 0) {

166 i‡(*
ï
 != ':')

168 
buÂ
 = 
ï
 + 1;

170  (
	`IPX_gësock
(
buÂ
, 
ßp
));

171 
	}
}

174 
a·y≥
 
	gùx_a·y≥
 =

176 "ùx", 
NULL
, 
AF_IPX
, 0,

177 
IPX_¥öt
, 
IPX_•röt
, 
IPX_öput
, 
NULL
,

178 
NULL
 , NULL, NULL,

	@interface/net-tools/lib/ipx_gr.c

8 
	~"c⁄fig.h
"

10 #i‡
HAVE_AFIPX


11 
	~<asm/ty≥s.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/sockë.h
>

14 #i‡(
__GLIBC__
 > 2Ë|| (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >= 1)

15 
	~<√tùx/ùx.h
>

17 
	~"ùx.h
"

19 
	~<°dlib.h
>

20 
	~<°dio.h
>

21 
	~<î∫o.h
>

22 
	~<˘y≥.h
>

23 
	~<°rög.h
>

24 
	~<uni°d.h
>

25 
	~<√töë/ö.h
>

26 
	~"vîsi⁄.h
"

27 
	~"√t-suµ‹t.h
"

28 
	~"∑th«mes.h
"

29 
	~"öé.h
"

33 
	$IPX_Ωröt
(
›ti⁄s
)

36 
numîic
 = 
›ti⁄s
 & 
FLAG_NUM_HOST
;

37 
buff
[1024];

38 
√t
[128], 
rouãr_√t
[128];

39 
rouãr_node
[128];

40 
num
;

41 
FILE
 *
Â
;

42 
a·y≥
 *
≠
;

43 
sockaddr
 
ß
;

45 
Â
 = 
	`f›í
(
_PATH_PROCNET_IPX_ROUTE1
, "r");

47 i‡(!
Â
) {

48 
Â
 = 
	`f›í
(
_PATH_PROCNET_IPX_ROUTE2
, "r");

51 i‡(!
Â
) {

52 
	`≥º‹
(
NULL
);

53 
	`¥ötf
(
	`_
("IPXÑoutögÇŸ i¿fûê%†‹ %†found.\n"), 
_PATH_PROCNET_IPX_ROUTE1
, 
_PATH_PROCNET_IPX_ROUTE2
);

57 i‡((
≠
 = 
	`gë_a‚ty≥
(
AF_IPX
)Ë=
NULL
) {

58 
	`EINTERN
("lib/ipx_rt.c", "AF_IPX missing");

62 
	`¥ötf
(
	`_
("Kernel IPXÑoutingÅable\n"));

63 
	`¥ötf
(
	`_
("Destination Router Net Router Node\n"));

65 
	`fgës
(
buff
, 1023, 
Â
);

67 
	`fgës
(
buff
, 1023, 
Â
)) {

68 
num
 = 
	`ssˇnf
(
buff
, "%†%†%s", 
√t
, 
rouãr_√t
, 
rouãr_node
);

69 i‡(
num
 < 3)

73 (Ë
≠
->
	`öput
(5, 
√t
, &
ß
);

74 
	`°r˝y
(
√t
, 
≠
->
	`•röt
(&
ß
, 
numîic
));

77 (Ë
≠
->
	`öput
(5, 
rouãr_√t
, &
ß
);

78 
	`°r˝y
(
rouãr_√t
, 
≠
->
	`•röt
(&
ß
, 
numîic
));

81 (Ë
≠
->
	`öput
(2, 
rouãr_node
, &
ß
);

82 
	`°r˝y
(
rouãr_node
, 
≠
->
	`•röt
(&
ß
, 
numîic
));

84 
	`¥ötf
("%-25†%-25†%-25s\n", 
√t
, 
rouãr_√t
, 
rouãr_node
);

87 (Ë
	`f˛o£
(
Â
);

89 
	}
}

	@interface/net-tools/lib/ipx_sr.c

1 
	~"c⁄fig.h
"

3 #i‡
HAVE_AFIPX


4 
	~<sys/∑øm.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/sockë.h
>

7 
	~<√töë/ö.h
>

8 
	~<¨∑/öë.h
>

9 
	~<¨∑/«me£r.h
>

10 
	~<sys/io˘l.h
>

11 
	~<˘y≥.h
>

12 
	~<î∫o.h
>

13 
	~<√tdb.h
>

14 
	~<ªsﬁv.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<°dio.h
>

18 
	~<uni°d.h
>

19 
	~"vîsi⁄.h
"

20 
	~"√t-suµ‹t.h
"

21 
	~"∑th«mes.h
"

22 
	~"öé.h
"

24 
	~"√t-„©uªs.h
"

26 
a·y≥
 
ùx_a·y≥
;

30 
	$IPX_röput
(
a˘i⁄
, 
ext
, **
¨gs
)

33 
	`Ârötf
(
°dîr
, 
	`_
("IPX:ÅhisÇeedsÅo be written\n"));

35 
	}
}

	@interface/net-tools/lib/irda.c

31 
	~"c⁄fig.h
"

33 #i‡
HAVE_AFIRDA
 || 
HAVE_HWIRDA


34 
	~<sys/ty≥s.h
>

35 
	~<sys/io˘l.h
>

36 
	~<sys/sockë.h
>

37 
	~<√t/if_¨p.h
>

38 
	~<°dlib.h
>

39 
	~<°dio.h
>

40 
	~<˘y≥.h
>

41 
	~<î∫o.h
>

42 
	~<f˙é.h
>

43 
	~<°rög.h
>

44 
	~<ãrmios.h
>

45 
	~<uni°d.h
>

46 
	~"√t-suµ‹t.h
"

47 
	~"∑th«mes.h
"

48 
	~"öé.h
"

49 
	~"utû.h
"

52 #i‚de‡
ARPHRD_IRDA


53 
	#ARPHRD_IRDA
 783

	)

62 *
	$úda_¥öt
(*
±r
)

64 
buff
[12];

66 
	`¢¥ötf
(
buff
, 12, "%02x:%02x:%02x:%02x", 
±r
[3],Ötr[2],

67 
±r
[1],Ötr[0]);

69  (
buff
);

70 
	}
}

72 
hwty≥
 
	gúda_hwty≥
 =

74 "úda", 
NULL
, 
ARPHRD_IRDA
, 2,

75 
úda_¥öt
, 
NULL
, NULL, 0

	@interface/net-tools/lib/loopback.c

18 
	~"c⁄fig.h
"

20 
	~<sys/ty≥s.h
>

21 
	~<sys/sockë.h
>

22 
	~<√t/if_¨p.h
>

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

25 
	~<î∫o.h
>

26 
	~<˘y≥.h
>

27 
	~<°rög.h
>

28 
	~<uni°d.h
>

29 
	~"√t-suµ‹t.h
"

30 
	~"∑th«mes.h
"

31 
	~"öé.h
"

32 
	~"utû.h
"

35 *
	$¥_un•ec
(*
±r
)

37 
buff
[64];

38 *
pos
;

39 
i
;

41 
pos
 = 
buff
;

42 
i
 = 0; i < (
sockaddr
); i++) {

43 
pos
 +
	`•rötf
’os, "%02X-", (*
±r
++ & 0377));

45 
buff
[
	`°æí
(buff) - 1] = '\0';

46  (
buff
);

47 
	}
}

49 
hwty≥
 
	gun•ec_hwty≥
 =

51 "un•ec", 
NULL
, -1, 0,

52 
¥_un•ec
, 
NULL
, NULL

55 
hwty≥
 
	glo›_hwty≥
 =

57 "lo›", 
NULL
, 
ARPHRD_LOOPBACK
, 0,

58 
NULL
, NULL, NULL

	@interface/net-tools/lib/masq_info.c

28 
	~<sys/ty≥s.h
>

29 
	~<sys/sockë.h
>

30 
	~<√töë/ö.h
>

31 
	~<¨∑/öë.h
>

32 
	~<î∫o.h
>

33 
	~<°dio.h
>

34 
	~<mÆloc.h
>

35 
	~<°rög.h
>

36 
	~<uni°d.h
>

37 
	~"√t-suµ‹t.h
"

38 
	~"∑th«mes.h
"

39 
	~"vîsi⁄.h
"

40 
	~"c⁄fig.h
"

41 
	~"öé.h
"

42 
	~"√t-„©uªs.h
"

44 #i‡
HAVE_FW_MASQUERADE


46 
	smasq
 {

47 
	mexpúes
;

48 *
	m¥Ÿo
;

49 
sockaddr_ö
 
	m§c
, 
	md°
;

50 
	m•‹t
, 
	mdp‹t
;

51 
	mmp‹t
;

52 
	möô£q
;

53 
	mdñè
;

54 
	mpdñè
;

57 
a·y≥
 *
	g≠
;

58 
	ghas_pdñè
;

60 
	$¥öt_masq
(
masq
 *
ms
, 
numîic_ho°
, 
numîic_p‹t
,

61 
ext
)

63 
möuãs
, 
£c⁄ds
, 
£c100s
;

65 
	`¥ötf
("%-4s", 
ms
->
¥Ÿo
);

67 
£c100s
 = 
ms
->
expúes
 % 100L;

68 
£c⁄ds
 = (
ms
->
expúes
 / 100L) % 60;

69 
möuãs
 = 
ms
->
expúes
 / 6000L;

71 
	`¥ötf
("%3ld:%02ld.%02ld ", 
möuãs
, 
£c⁄ds
, 
£c100s
);

73 i‡(
ext
 > 1) {

74 i‡(
has_pdñè
)

75 
	`¥ötf
("%10lu %5hd %5hd ", 
ms
->
öô£q
,

76 
ms
->
dñè
, ms->
pdñè
);

78 
	`¥ötf
("%10lu %5hd - ", 
ms
->
öô£q
,

79 
ms
->
dñè
);

81 
	`¥ötf
("%-20†", 
≠
->
	`•röt
((
sockaddr
 *Ë&(
ms
->
§c
), 
numîic_ho°
));

82 
	`¥ötf
("%-20†", 
≠
->
	`•röt
((
sockaddr
 *Ë&(
ms
->
d°
), 
numîic_ho°
));

84 
	`¥ötf
("%†-> ", 
	`gë_¢ame
(
ms
->
•‹t
, ms->
¥Ÿo
, 
numîic_p‹t
));

85 
	`¥ötf
("%s", 
	`gë_¢ame
(
ms
->
dp‹t
, ms->
¥Ÿo
, 
numîic_p‹t
));

86 
	`¥ötf
(" (%s)\n", 
	`gë_¢ame
(
ms
->
mp‹t
, ms->
¥Ÿo
, 
numîic_p‹t
));

87 
	}
}

90 
	$ªad_masqöfo
(
FILE
 * 
f
, 
masq
 *
m¶i°
, 
nm¶i°
)

92 
n
, 
ƒód
 = 0;

93 
masq
 *
ms
;

94 
buf
[256];

96 
ƒód
 = 0;Çªad < 
nm¶i°
;Çread++) {

97 
ms
 = &
m¶i°
[
ƒód
];

98 i‡(
has_pdñè
) {

99 i‡((
n
 = 
	`fsˇnf
(
f
, " %s %lX:%hX %lX:%hX %hX %lX %hd %hd %lu",

100 
buf
,

101 (*Ë&
ms
->
§c
.
sö_addr
.
s_addr
, &ms->
•‹t
,

102 (*Ë&
ms
->
d°
.
sö_addr
.
s_addr
, &ms->
dp‹t
,

103 &
ms
->
mp‹t
, &ms->
öô£q
, &ms->
dñè
,

104 &
ms
->
pdñè
, &ms->
expúes
)) == -1)

105  
ƒód
;

107 i‡((
n
 = 
	`fsˇnf
(
f
, " %s %lX:%hX %lX:%hX %hX %lX %hd %lu",

108 
buf
,

109 (*Ë&
ms
->
§c
.
sö_addr
.
s_addr
, &ms->
•‹t
,

110 (*Ë&
ms
->
d°
.
sö_addr
.
s_addr
, &ms->
dp‹t
,

111 &
ms
->
mp‹t
, &ms->
öô£q
, &ms->
dñè
,

112 &
ms
->
expúes
)) == -1)

113  
ƒód
;

115 i‡((
has_pdñè
 && (
n
 != 10)) || (!has_pdelta && (n != 9))) {

116 
	`EINTERN
("masq_info.c", "ip_masquerade formatÉrror");

119 
ms
->
§c
.
sö_Ámûy
 = 
AF_INET
;

120 
ms
->
d°
.
sö_Ámûy
 = 
AF_INET
;

122 i‡(
	`°rcmp
("IP", 
buf
) == 0)

123 
ms
->
¥Ÿo
 = "ip";

124 i‡(
	`°rcmp
("TCP", 
buf
) == 0)

125 
ms
->
¥Ÿo
 = "tcp";

126 i‡(
	`°rcmp
("UDP", 
buf
) == 0)

127 
ms
->
¥Ÿo
 = "udp";

128 i‡(
	`°rcmp
("ICMP", 
buf
) == 0)

129 
ms
->
¥Ÿo
 = "icmp";

130 i‡(
	`°rcmp
("GRE", 
buf
) == 0)

131 
ms
->
¥Ÿo
 = "gre";

132 i‡(
	`°rcmp
("ESP", 
buf
) == 0)

133 
ms
->
¥Ÿo
 = "esp";

135 
	`EINTERN
("masq_info.c", "ip_masquerade unknownÅype");

140 
ms
->
§c
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(ms->src.sin_addr.s_addr);

141 
ms
->
d°
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(ms->dst.sin_addr.s_addr);

142 
ms
->
•‹t
 = 
	`ht⁄s
(ms->sport);

143 
ms
->
dp‹t
 = 
	`ht⁄s
(ms->dport);

144 
ms
->
mp‹t
 = 
	`ht⁄s
(ms->mport);

146  
ƒód
;

147 
	}
}

150 
	$ù_masq_öfo
(
numîic_ho°
, 
numîic_p‹t
, 
ext
)

152 
FILE
 *
f
;

153 
i
;

154 
buf
[256];

155 
masq
 *
m¶i°
;

156 
¡ŸÆ
 = 0, 
ƒód
;

158 i‡(!(
f
 = 
	`f›í
(
_PATH_PROCNET_IP_MASQ
, "r"))) {

159 i‡(
î∫o
 !
ENOENT
) {

160 
	`≥º‹
(
_PATH_PROCNET_IP_MASQ
);

163 
	`ESYSNOT
("netstat", "ip_masquerade");

166 i‡((
≠
 = 
	`gë_a·y≥
("öë")Ë=
NULL
) {

167 
	`ENOSUPP
("masq_info", "AF INET");

168 
	`f˛o£
(
f
);

171 
	`fgës
(
buf
, (buf), 
f
);

172 
has_pdñè
 = 
	`°r°r
(
buf
, "PDelta") ? 1 : 0;

174 
m¶i°
 = (
masq
 *Ë
	`mÆloc
(16 * (masq));

175 i‡(!
m¶i°
) {

176 
	`EINTERN
("masq_info", "malloc() failed");

177 
	`f˛o£
(
f
);

180 (
ƒód
 = 
	`ªad_masqöfo
(
f
, &(
m¶i°
[
¡ŸÆ
]), 16)) == 16) {

181 
¡ŸÆ
 +
ƒód
;

182 
m¶i°
 = (
masq
 *Ë
	`ªÆloc
(mslist,

183 (
¡ŸÆ
 + 16Ë* (
masq
));

184 i‡(!
m¶i°
) {

185 
	`EINTERN
("masq_info", "realloc() failed");

186 
	`f˛o£
(
f
);

190 
	`f˛o£
(
f
);

192 i‡(
ƒód
 < 0) {

193 i‡(
m¶i°
)

194 
	`‰ì
(
m¶i°
);

197 
¡ŸÆ
 +
ƒód
;

199 i‡(
¡ŸÆ
 > 0) {

200 
	`¥ötf
(
	`_
("IP masqueradingÉntries\n"));

201 
ext
) {

203 
	`¥ötf
(
	`_
("protÉxpire source destinationÖorts\n"));

206 
	`¥ötf
(
	`_
("protÉxpire initseq deltaÖrevd source destinationÖorts\n"));

209 
i
 = 0; i < 
¡ŸÆ
; i++)

210 
	`¥öt_masq
(&(
m¶i°
[
i
]), 
numîic_ho°
, 
numîic_p‹t
, 
ext
);

211 i‡(
m¶i°
)

212 
	`‰ì
(
m¶i°
);

216 
	}
}

	@interface/net-tools/lib/net-features.h

29 #i‚de‡
_NET_FEATURES_H


30 
	#_NET_FEATURES_H


	)

34 #i‡
deföed
 (
SIOCADDRTOLD
Ë|| deföed (
RTF_IRTT
)

35 
	#HAVE_NEW_ADDRT
 1

	)

38 #ifde‡
RTF_IRTT


39 
	#HAVE_RTF_IRTT
 1

	)

42 #ifde‡
RTF_REJECT


43 
	#HAVE_RTF_REJECT
 1

	)

48 #i‡
deföed
 (
FEATURE_ARP
Ë|| deföed (
FEATURE_ROUTE
Ë|| deföed (
FEATURE_NETSTAT
)

49 *
	gFótuªs
 =

52 #ifde‡
FEATURE_ROUTE


54 #i‡
HAVE_NEW_ADDRT


61 #i‡
HAVE_RTF_IRTT


68 #i‡
HAVE_RTF_REJECT


80 #ifde‡
FEATURE_NETSTAT


82 #i‡
HAVE_NEW_ADDRT


89 #i‡
HAVE_RTF_IRTT


96 #i‡
HAVE_RTF_REJECT


103 #i‡
HAVE_FW_MASQUERADE


114 #i‡
I18N


122 #ifde‡
DFLT_AF


123 "(" 
DFLT_AF
 ")"

126 #i‡
HAVE_AFUNIX


132 #i‡
HAVE_AFINET


138 #i‡
HAVE_AFINET6


144 #i‡
HAVE_AFIPX


150 #i‡
HAVE_AFAX25


156 #i‡
HAVE_AFNETROM


162 #i‡
HAVE_AFX25


168 #i‡
HAVE_AFATALK


174 #i‡
HAVE_AFECONET


180 #i‡
HAVE_AFROSE


189 #ifde‡
DFLT_HW


190 "(" 
DFLT_HW
 ")"

193 #i‡
HAVE_HWETHER


199 #i‡
HAVE_HWARC


205 #i‡
HAVE_HWSLIP


211 #i‡
HAVE_HWPPP


217 #i‡
HAVE_HWTUNNEL


223 #i‡
HAVE_HWTR


229 #i‡
HAVE_HWAX25


236 #i‡
HAVE_HWNETROM


243 #i‡
HAVE_HWX25


250 #i‡
HAVE_HWFR


257 #i‡
HAVE_HWROSE


264 #i‡
HAVE_HWASH


271 #i‡
HAVE_HWSIT


278 #i‡
HAVE_HWFDDI


285 #i‡
HAVE_HWHIPPI


292 #i‡
HAVE_HWHDLCLAPB


299 #i‡
HAVE_HWEUI64


	@interface/net-tools/lib/net-support.h

33 
	~<sys/sockë.h
>

36 
	sa·y≥
 {

37 *
	m«me
;

38 *
	mtôÀ
;

39 
	maf
;

40 
	mÆí
;

41 *(*
	m¥öt
) (*);

42 *(*
	m•röt
Ë(
	msockaddr
 *, 
	mnumîic
);

43 (*
	möput
Ë(
	mty≥
, *
	mbuÂ
, 
	msockaddr
 *);

44 (*
	mhîr‹
Ë(*
	mãxt
);

45 (*
	mΩröt
Ë(
	m›ti⁄s
);

46 (*
	mröput
Ë(
	mtyp
, 
	mext
, **
	m¨gv
);

49 (*
	mgëmask
Ë(*
	m§c
, 
sockaddr
 * 
	mmask
, *
	m«me
);

51 
	mfd
;

52 *
	mÊag_fûe
;

55 
a·y≥
 *
a·y≥s
[];

58 
	shwty≥
 {

59 *
	m«me
;

60 *
	mtôÀ
;

61 
	mty≥
;

62 
	mÆí
;

63 *(*
	m¥öt
) (*);

64 (*
	möput
Ë(*, 
	msockaddr
 *);

65 (*
	ma˘iv©e
Ë(
	mfd
);

66 
	msuµªss_nuŒ_addr
;

70 
hwty≥
 *
gë_hwty≥
(c⁄° *
«me
);

71 
hwty≥
 *
gë_hw¡y≥
(
ty≥
);

72 
¥öt_hwli°
(
ty≥
);

73 
a·y≥
 *
gë_a·y≥
(c⁄° *
«me
);

74 
a·y≥
 *
gë_a‚ty≥
(
ty≥
);

75 
¥öt_aÊi°
(
ty≥
);

76 
hw_nuŒ_addªss
(
hwty≥
 *
hw
, *
addr
);

78 
gë¨gs
(*
°rög
, *
¨gumíts
[]);

80 
gë_sockë_f‹_af
(
af
);

82 
gërouã_öô
();

83 
£åouã_öô
();

84 
a˘iv©e_öô
();

85 
rouã_öfo
(c⁄° *
a‚ame
, 
Êags
);

86 
rouã_edô
(
a˘i⁄
, c⁄° *
a‚ame
, 
Êags
, **
¨gv
);

87 
a˘iv©e_ld
(c⁄° *
hw«me
, 
fd
);

89 
	#RTACTION_ADD
 1

	)

90 
	#RTACTION_DEL
 2

	)

91 
	#RTACTION_HELP
 3

	)

92 
	#RTACTION_FLUSH
 4

	)

93 
	#RTACTION_SHOW
 5

	)

95 
	#FLAG_EXT
 3

	)

96 
	#FLAG_NUM_HOST
 4

	)

97 
	#FLAG_NUM_PORT
 8

	)

98 
	#FLAG_NUM_USER
 16

	)

99 
	#FLAG_NUM
 (
FLAG_NUM_HOST
|
FLAG_NUM_PORT
|
FLAG_NUM_USER
)

	)

100 
	#FLAG_SYM
 32

	)

101 
	#FLAG_CACHE
 64

	)

102 
	#FLAG_FIB
 128

	)

103 
	#FLAG_VERBOSE
 256

	)

105 
ù_masq_öfo
(
numîic_ho°
, 
numîic_p‹t
, 
ext
);

107 
INET_Ωröt
(
›ti⁄s
);

108 
INET6_Ωröt
(
›ti⁄s
);

109 
DDP_Ωröt
(
›ti⁄s
);

110 
IPX_Ωröt
(
›ti⁄s
);

111 
NETROM_Ωröt
(
›ti⁄s
);

112 
AX25_Ωröt
(
›ti⁄s
);

113 
X25_Ωröt
(
›ti⁄s
);

115 
INET_röput
(
a˘i⁄
, 
Êags
, **
¨gv
);

116 
INET6_röput
(
a˘i⁄
, 
Êags
, **
¨gv
);

117 
DDP_röput
(
a˘i⁄
, 
Êags
, **
¨gv
);

118 
IPX_röput
(
a˘i⁄
, 
Êags
, **
¨gv
);

119 
NETROM_röput
(
a˘i⁄
, 
Êags
, **
¨gv
);

120 
AX25_röput
(
a˘i⁄
, 
Êags
, **
¨gv
);

121 
X25_röput
(
a˘i⁄
, 
Êags
, **
¨gv
);

122 
ROSE_röput
(
a˘i⁄
, 
Êags
, **
¨gv
);

124 
a·øns_›t
(c⁄° *
¨g
);

125 
a·øns_def
(*
toﬁ
, *
¨gv0
, *
dÊt
);

127 *
gë_¢ame
(
socknumbî
, *
¥Ÿo
, 
numîic
);

129 
Êag_unx
;

130 
Êag_ùx
;

131 
Êag_ax25
;

132 
Êag_ddp
;

133 
Êag_√åom
;

134 
Êag_x25
;

135 
Êag_ro£
;

136 
Êag_öë
;

137 
Êag_öë6
;

139 
a‚ame
[];

141 
	#AFTRANS_OPTS
 \

153 {"t˝ù", 0, 0, 1}

	)

154 
	#AFTRANS_CNT
 12

	)

156 
	#EINTERN
(
fûe
, 
ãxt
Ë
	`Ârötf
(
°dîr
, \

157 
	`_
("%s: I¡î«»Eº‹ `%s'.\n"),
fûe
,
ãxt
);

	)

159 
	#ENOSUPP
(
A
,
B
Ë
	`Ârötf
(
°dîr
,\

160 
	`_
("%s: feature `%s'Çot supported.\n" \

162 "√wî kî√»sour˚ o∏fuŒ c⁄figuøti⁄.\n"),
A
,
B
)

	)

164 
	#ESYSNOT
(
A
,
B
Ë
	`Ârötf
(
°dîr
, 
	`_
("%s:Çÿsuµ‹àf‹ `%s' o¿thi†sy°em.\n"),A,B)

	)

166 
	#E_NOTFOUND
 8

	)

167 
	#E_SOCK
 7

	)

168 
	#E_LOOKUP
 6

	)

169 
	#E_VERSION
 5

	)

170 
	#E_USAGE
 4

	)

171 
	#E_OPTERR
 3

	)

172 
	#E_INTERN
 2

	)

173 
	#E_NOSUPP
 1

	)

184 
	#RTNH_F_DEAD
 1

	)

185 
	#RTNH_F_PERVASIVE
 2

	)

186 
	#RTNH_F_ONLINK
 4

	)

189 
	#RTCF_DEAD
 
RTNH_F_DEAD


	)

190 
	#RTCF_ONLINK
 
RTNH_F_ONLINK


	)

192 
	#RTCF_NOTIFY
 0x00010000

	)

193 
	#RTCF_DIRECTDST
 0x00020000

	)

194 
	#RTCF_REDIRECTED
 0x00040000

	)

195 
	#RTCF_TPROXY
 0x00080000

	)

196 
	#RTCF_FAST
 0x00200000

	)

197 
	#RTCF_MASQ
 0x00400000

	)

198 
	#RTCF_SNAT
 0x00800000

	)

199 
	#RTCF_DOREDIRECT
 0x01000000

	)

200 
	#RTCF_DIRECTSRC
 0x04000000

	)

201 
	#RTCF_DNAT
 0x08000000

	)

202 
	#RTCF_BROADCAST
 0x10000000

	)

203 
	#RTCF_MULTICAST
 0x20000000

	)

204 
	#RTCF_REJECT
 0x40000000

	)

205 
	#RTCF_LOCAL
 0x80000000

	)

208 #i‚de‡
RTF_DEFAULT


209 
	#RTF_DEFAULT
 0x00010000

	)

211 
	#RTF_ALLONLINK
 0x00020000

	)

212 #i‚de‡
RTF_ADDRCONF


213 
	#RTF_ADDRCONF
 0x00040000

	)

215 
	#RTF_NONEXTHOP
 0x00200000

	)

216 
	#RTF_EXPIRES
 0x00400000

	)

217 
	#RTF_CACHE
 0x01000000

	)

218 
	#RTF_FLOW
 0x02000000

	)

219 
	#RTF_POLICY
 0x04000000

	)

220 
	#RTF_LOCAL
 0x80000000

	)

223 
	#RTF_UP
 0x0001

	)

224 
	#RTF_GATEWAY
 0x0002

	)

225 
	#RTF_HOST
 0x0004

	)

226 
	#RTF_REINSTATE
 0x0008

	)

227 
	#RTF_DYNAMIC
 0x0010

	)

228 
	#RTF_MODIFIED
 0x0020

	)

229 
	#RTF_MTU
 0x0040

	)

230 #i‚de‡
RTF_MSS


231 
	#RTF_MSS
 
RTF_MTU


	)

233 
	#RTF_WINDOW
 0x0080

	)

234 
	#RTF_IRTT
 0x0100

	)

235 
	#RTF_REJECT
 0x0200

	)

238 
	#RTF_NOTCACHED
 0x0400

	)

240 #ifde‡
HAVE_AFECONET


241 #i‚de‡
AF_ECONET


242 
	#AF_ECONET
 19

	)

	@interface/net-tools/lib/netrom.c

26 
	~"c⁄fig.h
"

28 #i‡
HAVE_AFNETROM
 || 
HAVE_HWNETROM


29 
	~<sys/ty≥s.h
>

30 
	~<sys/io˘l.h
>

31 
	~<sys/sockë.h
>

32 
	~<√t/if_¨p.h
>

33 #i‡(
__GLIBC__
 > 2Ë|| (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >= 1)

34 
	~<√èx25/ax25.h
>

36 
	~<löux/ax25.h
>

38 
	~<°dlib.h
>

39 
	~<°dio.h
>

40 
	~<˘y≥.h
>

41 
	~<î∫o.h
>

42 
	~<f˙é.h
>

43 
	~<°rög.h
>

44 
	~<ãrmios.h
>

45 
	~<uni°d.h
>

46 
	~"√t-suµ‹t.h
"

47 
	~"∑th«mes.h
"

48 
	~"öé.h
"

49 
	~"utû.h
"

51 
	g√åom_îrmsg
[128];

53 
a·y≥
 
√åom_a·y≥
;

55 *
	$NETROM_¥öt
(*
±r
)

57 
buff
[8];

58 
i
;

60 
i
 = 0; i < 6; i++) {

61 
buff
[
i
] = ((
±r
[i] & 0377) >> 1);

62 i‡(
buff
[
i
] == ' ')

63 
buff
[
i
] = '\0';

65 
buff
[6] = '\0';

66 
i
 = ((
±r
[6] & 0x1E) >> 1);

67 i‡(
i
 != 0)

68 
	`•rötf
(&
buff
[
	`°æí
(buff)], "-%d", 
i
);

69  (
buff
);

70 
	}
}

74 *
	$NETROM_•röt
(
sockaddr
 *
ßp
, 
numîic
)

76 
buf
[64];

77 i‡(
ßp
->
ß_Ámûy
 == 0xFFFF || sap->sa_family == 0)

78  
	`ß„_°∫˝y
(
buf
, 
	`_
("[NONE SET]"), (buf));

79  (
	`NETROM_¥öt
(((
sockaddr_ax25
 *Ë
ßp
)->
ßx25_ˇŒ
.
ax25_ˇŒ
));

80 
	}
}

83 
	$NETROM_öput
(
ty≥
, *
buÂ
, 
sockaddr
 *
ßp
)

85 *
±r
;

86 *
‹ig
, 
c
;

87 
i
;

89 
ßp
->
ß_Ámûy
 = 
√åom_a·y≥
.
af
;

90 
±r
 = ((
sockaddr_ax25
 *Ë
ßp
)->
ßx25_ˇŒ
.
ax25_ˇŒ
;

93 
‹ig
 = 
buÂ
;

94 
i
 = 0;

95 (*
buÂ
 !'\0'Ë&& (*buÂ !'-'Ë&& (
i
 < 6)) {

96 
c
 = *
buÂ
++;

97 i‡(
	`i¶owî
(
c
))

98 
c
 = 
	`touµî
(c);

99 i‡(!(
	`isuµî
(
c
Ë|| 
	`isdigô
(c))) {

100 
	`ß„_°∫˝y
(
√åom_îrmsg
, 
	`_
("Invalid callsign"), (netrom_errmsg));

101 #ifde‡
DEBUG


102 
	`Ârötf
(
°dîr
, "√åom_öput(%s): %†!\n", 
√åom_îrmsg
, 
‹ig
);

104 
î∫o
 = 
EINVAL
;

107 *
±r
++ = (Ë((
c
 << 1) & 0xFE);

108 
i
++;

112 i‡((
i
 =6Ë&& (*
buÂ
 != '-') && (*bufp != '\0')) {

113 
	`ß„_°∫˝y
(
√åom_îrmsg
, 
	`_
("CallsignÅooÜong"), (netrom_errmsg));

114 #ifde‡
DEBUG


115 
	`Ârötf
(
°dîr
, "√åom_öput(%s): %†!\n", 
√åom_îrmsg
, 
‹ig
);

117 
î∫o
 = 
E2BIG
;

121 
i
++ < (
ax25_addªss
) - 1) {

122 *
±r
++ = () ((' ' << 1) & 0xFE);

126 i‡(*
buÂ
 == '-') {

127 
i
 = 
	`©oi
(++
buÂ
);

128 *
±r
 = (Ë((
i
 << 1) & 0xFE);

130 *
±r
 = () '\0';

134 #ifde‡
DEBUG


135 
	`Ârötf
(
°dîr
, "√åom_öput(%s): ", 
‹ig
);

136 
i
 = 0; i < (
ax25_addªss
); i++)

137 
	`Ârötf
(
°dîr
, "%02X ", 
ßp
->
ß_d©a
[
i
] & 0377);

138 
	`Ârötf
(
°dîr
, "\n");

142 
	}
}

146 
	$NETROM_hîr‹
(*
ãxt
)

148 i‡(
ãxt
 =
NULL
)

149 
	`Ârötf
(
°dîr
, "%s\n", 
√åom_îrmsg
);

151 
	`Ârötf
(
°dîr
, "%s: %s\n", 
ãxt
, 
√åom_îrmsg
);

152 
	}
}

155 
	$NETROM_höput
(*
buÂ
, 
sockaddr
 *
ßp
)

157 i‡(
	`NETROM_öput
(0, 
buÂ
, 
ßp
) < 0)

159 
ßp
->
ß_Ámûy
 = 
ARPHRD_NETROM
;

161 
	}
}

165 
	$KISS_£t_disc
(
fd
, 
disc
)

167 i‡(
	`io˘l
(
fd
, 
TIOCSETD
, &
disc
) < 0) {

168 
	`Ârötf
(
°dîr
, "KISS_£t_disc(%d): %s\n", 
disc
, 
	`°ªº‹
(
î∫o
));

169  (-
î∫o
);

172 
	}
}

176 
	$KISS_öô
(
fd
)

178 i‡(
	`KISS_£t_disc
(
fd
, 
N_SLIP
) < 0)

180 i‡(
	`io˘l
(
fd
, 
SIOCSIFENCAP
, 4) < 0)

183 
	}
}

186 
hwty≥
 
	g√åom_hwty≥
 =

188 "√åom", 
NULL
, 
ARPHRD_NETROM
, 7,

189 
NETROM_¥öt
, 
NETROM_höput
, 
NULL
, 0

192 
a·y≥
 
	g√åom_a·y≥
 =

194 "√åom", 
NULL
, 
AF_NETROM
, 7,

195 
NETROM_¥öt
, 
NETROM_•röt
, 
NETROM_öput
, 
NETROM_hîr‹
,

196 
NULL
, NULL, NULL,

	@interface/net-tools/lib/netrom_gr.c

21 
	~"c⁄fig.h
"

23 #i‡
HAVE_AFNETROM


24 
	~<°dlib.h
>

25 
	~<°dio.h
>

26 
	~<uni°d.h
>

27 
	~"√t-suµ‹t.h
"

28 
	~"∑th«mes.h
"

29 
	~"öé.h
"

33 
	$NETROM_Ωröt
(
›ti⁄s
)

35 
FILE
 *
f1
 = 
	`f›í
(
_PATH_PROCNET_NR_NODES
, "r");

36 
FILE
 *
f2
 = 
	`f›í
(
_PATH_PROCNET_NR_NEIGH
, "r");

37 
buf„r
[256];

38 
quÆ
, 
n
, 
w
;

42 
f1
 = 
	`f›í
(
_PATH_PROCNET_NR_NODES
, "r");

43 i‡(!
f1
Ë
	`≥º‹
(
_PATH_PROCNET_NR_NODES
);

44 
f2
 = 
	`f›í
(
_PATH_PROCNET_NR_NEIGH
, "r");

45 i‡(!
f2
Ë
	`≥º‹
(
_PATH_PROCNET_NR_NEIGH
);

47 i‡(
f1
 =
NULL
 || 
f2
 == NULL) {

48 
	`¥ötf
(
	`_
("NET/ROMÇot configured inÅhis system.\n"));

51 
	`¥ötf
(
	`_
("Kernel NET/ROMÑoutingÅable\n"));

52 
	`¥ötf
(
	`_
("Destination Mnemonic Quality Neighbour Iface\n"));

53 
	`fgës
(
buf„r
, 256, 
f1
);

54 
	`fgës
(
buf„r
, 256, 
f1
)) {

55 
buf„r
[9] = 0;

56 
buf„r
[17] = 0;

57 
w
 = 
	`©oi
(
buf„r
 + 19) - 1;

58 
	`¥ötf
("%-9s %-7s ",

59 
buf„r
, buffer + 10);

60 
quÆ
 = 
	`©oi
(
buf„r
 + 24 + 15 * 
w
);

61 
n
 = 
	`©oi
(
buf„r
 + 32 + 15 * 
w
);

62 
	`ªwöd
(
f2
);

63 
	`fgës
(
buf„r
, 256, 
f2
);

64 
	`fgës
(
buf„r
, 256, 
f2
)) {

65 i‡(
	`©oi
(
buf„r
Ë=
n
) {

66 
buf„r
[15] = 0;

67 
buf„r
[20] = 0;

68 
	`¥ötf
("%3d %-9s %s\n",

69 
quÆ
, 
buf„r
 + 6, buffer + 16);

74 
	`f˛o£
(
f1
);

75 
	`f˛o£
(
f2
);

77 
	}
}

	@interface/net-tools/lib/netrom_sr.c

1 
	~"c⁄fig.h
"

3 #i‡
HAVE_AFNETROM


4 
	~<sys/∑øm.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/sockë.h
>

7 
	~<√töë/ö.h
>

8 
	~<¨∑/öë.h
>

9 
	~<¨∑/«me£r.h
>

11 
	~<sys/io˘l.h
>

12 
	~<˘y≥.h
>

13 
	~<î∫o.h
>

14 
	~<√tdb.h
>

15 
	~<ªsﬁv.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

18 
	~<°dio.h
>

19 
	~<uni°d.h
>

20 
	~"vîsi⁄.h
"

21 
	~"√t-suµ‹t.h
"

22 
	~"∑th«mes.h
"

23 
	~"öé.h
"

24 
	~"√t-„©uªs.h
"

26 
a·y≥
 
√åom_a·y≥
;

32 
	$ußge
()

34 
	`Ârötf
(
°dîr
, 
	`_
("netrom usage\n"));

36  (
E_USAGE
);

37 
	}
}

41 
	$NETROM_röput
(
a˘i⁄
, 
ext
, **
¨gs
)

44 
	`Ârötf
(
°dîr
, 
	`_
("NET/ROM:ÅhisÇeedsÅo be written\n"));

46 
	}
}

	@interface/net-tools/lib/nstrcmp.c

4 
	~<˘y≥.h
>

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

7 
	~"utû.h
"

11 * 
	$cuèlüs
(* 
«me
)

13 
digô
 = 0;

14 
pos
;

16 
pos
=
	`°æí
(
«me
);Öos>0;Öos--)

18 i‡(
«me
[
pos
-1]==':' && 
digô
)

20 
«me
[
pos
-1]='\0';

21  
«me
+
pos
;

23 i‡(!
	`isdigô
(
«me
[
pos
-1]))

25 
digô
 = 1;

27  
NULL
;

28 
	}
}

32 
	$rödex_n⁄digô
(*
«me
)

34 
pos
 = 
	`°æí
(
«me
);

36 
pos
=
	`°æí
(
«me
);Öos>0;Öos--)

38 i‡(!
	`isdigô
(
«me
[
pos
-1]))

39  
pos
;

42 
	}
}

46 
	$n°rcmp
(c⁄° *
≠
, c⁄° *
bp
)

48 *
a
 = (*)
	`°rdup
(
≠
);

49 *
b
 = (*)
	`°rdup
(
bp
);

50 *
™
, *
bn
;

51 
av
 = 0, 
bv
 = 0;

52 *
Ølüs
=
	`cuèlüs
(
a
);

53 *
bÆüs
=
	`cuèlüs
(
b
);

54 
aödex
=
	`rödex_n⁄digô
(
a
);

55 
bödex
=
	`rödex_n⁄digô
(
b
);

56 
com∂í
=(
aödex
<
bödex
)?aindex:bindex;

57 
ªs
 = 
	`°∫cmp
(
a
, 
b
, 
com∂í
);

59 i‡(
ªs
 != 0)

60 { 
	`‰ì
(
a
); fªe(
b
);  
ªs
; }

62 i‡(
aödex
 > 
bödex
)

63 { 
	`‰ì
(
a
); fªe(
b
);  1; }

65 i‡(
aödex
 < 
bödex
)

66 { 
	`‰ì
(
a
); fªe(
b
);  -1; }

68 
™
 = 
a
+
aödex
;

69 
bn
 = 
b
+
bödex
;

71 
av
 = 
	`©oi
(
™
);

72 
bv
 = 
	`©oi
(
bn
);

74 i‡(
av
 < 
bv
)

75 { 
	`‰ì
(
a
); fªe(
b
);  -1; }

77 i‡(
av
 > 
bv
)

78 { 
	`‰ì
(
a
); fªe(
b
);  1; }

80 
av
 = -1;

81 i‡(
Ølüs
 !
NULL
)

82 
av
 = 
	`©oi
(
Ølüs
);

84 
bv
 = -1;

85 i‡(
bÆüs
 !
NULL
)

86 
bv
 = 
	`©oi
(
bÆüs
);

88 
	`‰ì
(
a
); fªe(
b
);

90 i‡(
av
 < 
bv
)

93 i‡(
av
 > 
bv
)

97 
	}
}

100 #ifde‡
NSTRCMP_TEST


102 
	$cs
(
s
)

104 i‡(
s
 < 0)  -1;

105 i‡(
s
 > 0)  1;

107 
	}
}

110 
	$dŸe°
(* 
a
, * 
b
, 
exp
)

112 
ªs
 = 
	`n°rcmp
(
a
, 
b
);

113 
îr
 = (
	`cs
(
ªs
Ë!cs(
exp
));

114 
	`¥ötf
("n°rcmp(\"%s\", \"%s\")=%d %d %s\n", 
a
, 
b
, 
ªs
, 
exp
, 
îr
?"WRONG":"OK");

115  
îr
;

116 
	}
}

118 
	$maö
()

120 
îr
 = 0;

122 
îr
 |
	`dŸe°
("eth1", "eth1", 0);

123 
îr
 |
	`dŸe°
("eth0:1", "eth0:1", 0);

124 
îr
 |
	`dŸe°
("lan", "lan", 0);

125 
îr
 |
	`dŸe°
("100", "100", 0);

126 
îr
 |
	`dŸe°
("", "", 0);

127 
îr
 |
	`dŸe°
(":", ":", 0);

128 
îr
 |
	`dŸe°
("a:b:c", "a:b:c", 0);

129 
îr
 |
	`dŸe°
("a:", "a:", 0);

130 
îr
 |
	`dŸe°
(":a", ":a", 0);

132 
îr
 |
	`dŸe°
("a", "aa", -1);

133 
îr
 |
	`dŸe°
("eth0", "eth1", -1);

134 
îr
 |
	`dŸe°
("eth1", "eth20", -1);

135 
îr
 |
	`dŸe°
("eth20", "eth100", -1);

136 
îr
 |
	`dŸe°
("eth1", "eth13", -1);

137 
îr
 |
	`dŸe°
("eth", "eth2", -1);

138 
îr
 |
	`dŸe°
("eth0:1", "eth0:2", -1);

139 
îr
 |
	`dŸe°
("eth1:10", "eth13:10", -1);

140 
îr
 |
	`dŸe°
("eth1:1", "eth1:13", -1);

141 
îr
 |
	`dŸe°
("a", "a:", -1);

143 
îr
 |
	`dŸe°
("aa", "a", 1);

144 
îr
 |
	`dŸe°
("eth2", "eth1", 1);

145 
îr
 |
	`dŸe°
("eth13", "eth1", 1);

146 
îr
 |
	`dŸe°
("eth2", "eth", 1);

147 
îr
 |
	`dŸe°
("eth2:10", "eth2:1", 1);

148 
îr
 |
	`dŸe°
("eth2:5", "eth2:4", 1);

149 
îr
 |
	`dŸe°
("eth3:2", "eth2:3", 1);

150 
îr
 |
	`dŸe°
("eth13:1", "eth1:0", 1);

151 
îr
 |
	`dŸe°
("a:", "a", 1);

152 
îr
 |
	`dŸe°
("a1b12", "a1b2", 1);

154  
îr
;

155 
	}
}

	@interface/net-tools/lib/pathnames.h

13 
	#_PATH_PROCNET_IGMP
 "/¥oc/√t/igmp"

	)

14 
	#_PATH_PROCNET_IGMP6
 "/¥oc/√t/igmp6"

	)

15 
	#_PATH_PROCNET_TCP
 "/¥oc/√t/t˝"

	)

16 
	#_PATH_PROCNET_TCP6
 "/¥oc/√t/t˝6"

	)

17 
	#_PATH_PROCNET_UDP
 "/¥oc/√t/udp"

	)

18 
	#_PATH_PROCNET_UDP6
 "/¥oc/√t/udp6"

	)

19 
	#_PATH_PROCNET_UDPLITE
 "/¥oc/√t/ud∂ôe"

	)

20 
	#_PATH_PROCNET_UDPLITE6
 "/¥oc/√t/ud∂ôe6"

	)

21 
	#_PATH_PROCNET_SCTPEPTS
 "/¥oc/√t/s˘p/ïs"

	)

22 
	#_PATH_PROCNET_SCTP6EPTS
 "/¥oc/√t/s˘p6/ïs"

	)

23 
	#_PATH_PROCNET_SCTPASSOCS
 "/¥oc/√t/s˘p/assocs"

	)

24 
	#_PATH_PROCNET_SCTP6ASSOCS
 "/¥oc/√t/s˘p6/assocs"

	)

25 
	#_PATH_PROCNET_RAW
 "/¥oc/√t/øw"

	)

26 
	#_PATH_PROCNET_RAW6
 "/¥oc/√t/øw6"

	)

27 
	#_PATH_PROCNET_UNIX
 "/¥oc/√t/unix"

	)

28 
	#_PATH_PROCNET_ROUTE
 "/¥oc/√t/rouã"

	)

29 
	#_PATH_PROCNET_ROUTE6
 "/¥oc/√t/ùv6_rouã"

	)

30 
	#_PATH_PROCNET_RTCACHE
 "/¥oc/√t/π_ˇche"

	)

31 
	#_PATH_PROCNET_AX25_ROUTE
 "/¥oc/√t/ax25_rouã"

	)

32 
	#_PATH_PROCNET_NR
 "/¥oc/√t/ƒ"

	)

33 
	#_PATH_PROCNET_NR_NEIGH
 "/¥oc/√t/ƒ_√igh"

	)

34 
	#_PATH_PROCNET_NR_NODES
 "/¥oc/√t/ƒ_nodes"

	)

35 
	#_PATH_PROCNET_ARP
 "/¥oc/√t/¨p"

	)

36 
	#_PATH_PROCNET_AX25
 "/¥oc/√t/ax25"

	)

37 
	#_PATH_PROCNET_IPX_SOCKET1
 "/¥oc/√t/ùx/sockë"

	)

38 
	#_PATH_PROCNET_IPX_SOCKET2
 "/¥oc/√t/ùx"

	)

39 
	#_PATH_PROCNET_IPX_ROUTE1
 "/¥oc/√t/ùx/rouã"

	)

40 
	#_PATH_PROCNET_IPX_ROUTE2
 "/¥oc/√t/ùx_rouã"

	)

41 
	#_PATH_PROCNET_ATALK
 "/¥oc/√t/≠∂ëÆk"

	)

42 
	#_PATH_PROCNET_IP_BLK
 "/¥oc/√t/ù_block"

	)

43 
	#_PATH_PROCNET_IP_FWD
 "/¥oc/√t/ù_f‹w¨d"

	)

44 
	#_PATH_PROCNET_IP_ACC
 "/¥oc/√t/ù_ac˘"

	)

45 
	#_PATH_PROCNET_IP_MASQ
 "/¥oc/√t/ù_masquîade"

	)

46 
	#_PATH_PROCNET_NDISC
 "/¥oc/√t/ndisc"

	)

47 
	#_PATH_PROCNET_IFINET6
 "/¥oc/√t/if_öë6"

	)

48 
	#_PATH_PROCNET_DEV
 "/¥oc/√t/dev"

	)

49 
	#_PATH_PROCNET_RARP
 "/¥oc/√t/øΩ"

	)

50 
	#_PATH_ETHERS
 "/ëc/ëhîs"

	)

51 
	#_PATH_PROCNET_ROSE_ROUTE
 "/¥oc/√t/ro£_rouãs"

	)

52 
	#_PATH_PROCNET_X25
 "/¥oc/√t/x25"

	)

53 
	#_PATH_PROCNET_X25_ROUTE
 "/¥oc/√t/x25_rouãs"

	)

54 
	#_PATH_PROCNET_DEV_MCAST
 "/¥oc/√t/dev_mˇ°"

	)

55 
	#_PATH_PROCNET_ATALK_ROUTE
 "/¥oc/√t/©Æk_rouã"

	)

58 
	#_PATH_DEV_ROUTE
 "/dev/rouã"

	)

	@interface/net-tools/lib/ppp.c

21 
	~"c⁄fig.h
"

23 #i‡
HAVE_HWPPP


25 
	~<sys/ty≥s.h
>

26 
	~<sys/io˘l.h
>

27 
	~<sys/sockë.h
>

28 
	~<√t/if_¨p.h
>

29 
	~<°dlib.h
>

30 
	~<°dio.h
>

31 
	~<˘y≥.h
>

32 
	~<î∫o.h
>

33 
	~<f˙é.h
>

34 
	~<°rög.h
>

35 
	~<ãrmios.h
>

36 
	~<uni°d.h
>

37 
	~"√t-suµ‹t.h
"

38 
	~"∑th«mes.h
"

39 
	~"öé.h
"

42 
	$do_µp
(
fd
)

44 
	`Ârötf
(
°dîr
, 
	`_
("You cannot start PPP withÅhisÖrogram.\n"));

46 
	}
}

49 
hwty≥
 
	gµp_hwty≥
 =

51 "µp", 
NULL
, 
ARPHRD_PPP
, 0,

52 
NULL
, NULL, 
do_µp
, 0

	@interface/net-tools/lib/ppp_ac.c

15 
	~"c⁄fig.h
"

17 #i‡
HAVE_HWPPP


19 
	~<sys/ty≥s.h
>

20 
	~<sys/io˘l.h
>

21 
	~<sys/sockë.h
>

22 
	~<√t/if_¨p.h
>

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

25 
	~<˘y≥.h
>

26 
	~<î∫o.h
>

27 
	~<f˙é.h
>

28 
	~<°rög.h
>

29 
	~<ãrmios.h
>

30 
	~<uni°d.h
>

31 
	~"√t-suµ‹t.h
"

32 
	~"∑th«mes.h
"

33 
	~"öé.h
"

36 
	$PPP_a˘iv©e
(
fd
)

38 
	`Ârötf
(
°dîr
, 
	`_
("Sorry, useÖppd!\n"));

40 
	}
}

	@interface/net-tools/lib/proc.c

5 
	~<°rög.h
>

6 
	~<°d¨g.h
>

7 
	~<°dio.h
>

8 
	~<˘y≥.h
>

9 
	~<uni°d.h
>

13 *
	$¥oc_gí_fmt
(*
«me
, 
m‹e
, 
FILE
 * 
fh
,...)

15 
buf
[512], 
f‹m©
[512] = "";

16 *
tôÀ
, *
hód
, *
hdr
;

17 
va_li°
 
≠
;

19 i‡(!
	`fgës
(
buf
, ( bufË- 1, 
fh
))

20  
NULL
;

21 
	`°rˇt
(
buf
, " ");

23 
	`va_°¨t
(
≠
, 
fh
);

24 
tôÀ
 = 
	`va_¨g
(
≠
, *);

25 
hdr
 = 
buf
; hdr;) {

26 
	`is•a˚
(*
hdr
) || *hdr == '|')

27 
hdr
++;

28 
hód
 = 
hdr
;

29 
hdr
 = 
	`°Ωbrk
(hdr, "| \t\n");

30 i‡(
hdr
)

31 *
hdr
++ = 0;

33 i‡(!
	`°rcmp
(
tôÀ
, 
hód
)) {

34 
	`°rˇt
(
f‹m©
, 
	`va_¨g
(
≠
, *));

35 
tôÀ
 = 
	`va_¨g
(
≠
, *);

36 i‡(!
tôÀ
 || !
hód
)

39 
	`°rˇt
(
f‹m©
, "%*s");

41 
	`°rˇt
(
f‹m©
, " ");

43 
	`va_íd
(
≠
);

45 i‡(!
m‹e
 && 
tôÀ
) {

46 
	`Ârötf
(
°dîr
, "warning: %s doesÇot containÑequired field %s\n",

47 
«me
, 
tôÀ
);

48  
NULL
;

50  
	`°rdup
(
f‹m©
);

51 
	}
}

57 
	$¥oc_guess_fmt
(*
«me
, 
FILE
 *
fh
, ...)

59 
buf
[512];

60 *
tmp
;

61 
Êag
 = 0;

62 
va_li°
 
≠
;

64 i‡(!
	`fgës
(
buf
, ( bufË- 1, 
fh
))

66 
	`°rˇt
(
buf
, "\0");

67 
	`va_°¨t
(
≠
, 
fh
);

68 (
tmp
 = 
	`va_¨g
(
≠
, *))) {

69 
f
 = 
	`va_¨g
(
≠
, );

70 i‡(
	`°r°r
(
buf
,
tmp
) != 0)

71 
Êag
 |
f
;

73 
	`va_íd
(
≠
);

74  
Êag
;

75 
	}
}

78 
FILE
 *
	$¥oc_f›í
(c⁄° *
«me
)

80 *
buf„r
;

81 
size_t
 
∑gesz
;

82 
FILE
 *
fd
 = 
	`f›í
(
«me
, "r");

84 i‡(
fd
 =
NULL
)

85  
NULL
;

87 i‡(!
buf„r
) {

88 
∑gesz
 = 
	`gë∑gesize
();

89 
buf„r
 = 
	`mÆloc
(
∑gesz
);

92 
	`£tvbuf
(
fd
, 
buf„r
, 
_IOFBF
, 
∑gesz
);

93  
fd
;

94 
	}
}

	@interface/net-tools/lib/proc.h

4 *
¥oc_gí_fmt
(*
«me
, 
m‹e
, 
FILE
 * 
fh
,...);

5 
¥oc_guess_fmt
(*
«me
, 
FILE
* 
fh
,...);

6 
FILE
 *
¥oc_f›í
(c⁄° *
«me
);

	@interface/net-tools/lib/rose.c

18 
	~"c⁄fig.h
"

20 #i‡
HAVE_AFROSE
 || 
HAVE_HWROSE


21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<sys/io˘l.h
>

24 
	~<sys/sockë.h
>

25 
	~<√t/if_¨p.h
>

26 
	~<°dlib.h
>

27 
	~<°dio.h
>

28 
	~<˘y≥.h
>

29 
	~<î∫o.h
>

30 
	~<f˙é.h
>

31 
	~<°rög.h
>

32 
	~<ãrmios.h
>

33 
	~<uni°d.h
>

34 
	~"√t-suµ‹t.h
"

35 
	~"∑th«mes.h
"

36 
	~"öé.h
"

38 #i‚de‡
_NETROSE_ROSE_H


39 
	~<löux/ax25.h
>

40 
	~<löux/ro£.h
>

42 #unde‡
AF_ROSE


43 #i‡
PF_ROSE
 =
AF_ROSE


45 #unde‡
PF_ROSE


46 
	#PF_ROSE
 11

	)

49 
	#AF_ROSE
 
PF_ROSE


	)

52 
	gROSE_îrmsg
[128];

54 
a·y≥
 
ro£_a·y≥
;

57 
	$ROSE_¥öt
(*
±r
)

59 
buff
[12];

61 
	`¢¥ötf
(
buff
, (buff), "%02x%02x%02x%02x%02x", 
±r
[0],Ötr[1],Ötr[2],Ötr[3],Ötr[4]);

62 
buff
[10] = '\0';

63  (
buff
);

64 
	}
}

68 
	$ROSE_•röt
(
sockaddr
 *
ßp
, 
numîic
)

70 i‡(
ßp
->
ß_Ámûy
 == 0xFFFF || sap->sa_family == 0)

71  
	`_
("[NONE SET]");

73  (
	`ROSE_¥öt
(((
sockaddr_ro£
 *Ë
ßp
)->
§o£_addr
.
ro£_addr
));

74 
	}
}

77 
	$ROSE_öput
(
ty≥
, *
buÂ
, 
sockaddr
 *
ßp
)

79 *
±r
;

80 
i
, 
o
;

82 
ßp
->
ß_Ámûy
 = 
ro£_a·y≥
.
af
;

83 
±r
 = ((
sockaddr_ro£
 *Ë
ßp
)->
§o£_addr
.
ro£_addr
;

86 i‡(
	`°æí
(
buÂ
) != 10) {

87 
	`°r˝y
(
ROSE_îrmsg
, 
	`_
("Nodeáddress must beÅen digits"));

88 #ifde‡
DEBUG


89 
	`Ârötf
(
°dîr
, "ro£_öput(%s): %†!\n", 
ROSE_îrmsg
, 
‹ig
);

91 
î∫o
 = 
EINVAL
;

95 
i
 = 0, 
o
 = 0; i < 5; i++) {

96 
o
 = 
i
 * 2;

97 
±r
[
i
] = (((
buÂ
[
o
] - '0') << 4) | (bufp[o + 1] - '0'));

101 #ifde‡
DEBUG


102 
	`Ârötf
(
°dîr
, "ro£_öput(%s): ", 
‹ig
);

103 
i
 = 0; i < (
ro£_addªss
); i++)

104 
	`Ârötf
(
°dîr
, "%02X ", 
ßp
->
ß_d©a
[
i
] & 0377);

105 
	`Ârötf
(
°dîr
, "\n");

109 
	}
}

113 
	$ROSE_hîr‹
(*
ãxt
)

115 i‡(
ãxt
 =
NULL
)

116 
	`Ârötf
(
°dîr
, "%s\n", 
ROSE_îrmsg
);

118 
	`Ârötf
(
°dîr
, "%s: %s\n", 
ãxt
, 
ROSE_îrmsg
);

119 
	}
}

122 
	$ROSE_höput
(*
buÂ
, 
sockaddr
 *
ßp
)

124 i‡(
	`ROSE_öput
(0, 
buÂ
, 
ßp
) < 0)

126 
ßp
->
ß_Ámûy
 = 
ARPHRD_ROSE
;

128 
	}
}

130 
hwty≥
 
	gro£_hwty≥
 =

132 "ro£", 
NULL
, 
ARPHRD_ROSE
, 10,

133 
ROSE_¥öt
, 
ROSE_höput
, 
NULL


136 
a·y≥
 
	gro£_a·y≥
 =

138 "ro£", 
NULL
, 
AF_ROSE
, 10,

139 
ROSE_¥öt
, 
ROSE_•röt
, 
ROSE_öput
, 
ROSE_hîr‹
,

140 
NULL
, NULL, NULL,

	@interface/net-tools/lib/rose_gr.c

20 
	~"c⁄fig.h
"

22 #i‡
HAVE_AFROSE


24 
	~<sys/ty≥s.h
>

25 
	~<sys/io˘l.h
>

26 
	~<löux/ro£.h
>

27 
	~<sys/sockë.h
>

28 
	~<√t/if_¨p.h
>

29 
	~<˘y≥.h
>

30 
	~<î∫o.h
>

31 
	~<f˙é.h
>

32 
	~<°rög.h
>

33 
	~<ãrmios.h
>

35 
	~<°dlib.h
>

36 
	~<°dio.h
>

37 
	~<uni°d.h
>

38 
	~"√t-suµ‹t.h
"

39 
	~"∑th«mes.h
"

40 
	~"öé.h
"

42 
	$ROSE_Ωröt
(
›ti⁄s
)

44 
FILE
 *
f
 = 
NULL
;

45 
buf„r
[256];

46 
u£
;

48 
f
=
	`f›í
(
_PATH_PROCNET_ROSE_ROUTE
, "r");

49 i‡(
f
 =
NULL
) {

50 
	`≥º‹
(
_PATH_PROCNET_ROSE_ROUTE
);

51 
	`¥ötf
(
	`_
("ROSEÇot configured inÅhis system.\n"));

54 
	`¥ötf
(
	`_
("Kernel ROSEÑoutingÅable\n"));

55 
	`¥ötf
(
	`_
("Destination Iface Use\n"));

56 
	`fgës
(
buf„r
, 256, 
f
);

57 
	`fgës
(
buf„r
, 256, 
f
)) {

58 
buf„r
[9] = 0;

59 
buf„r
[14] = 0;

60 
u£
 = 
	`©oi
(
buf„r
 + 15);

61 
	`¥ötf
("%-9s %-5s %5d\n",

62 
buf„r
, buf„∏+ 10, 
u£
);

64 
	`f˛o£
(
f
);

66 
	}
}

	@interface/net-tools/lib/setroute.c

27 
	~<°dio.h
>

28 
	~<°rög.h
>

29 
	~"√t-suµ‹t.h
"

30 
	~"∑th«mes.h
"

31 
	~"vîsi⁄.h
"

32 
	~"c⁄fig.h
"

33 
	~"öé.h
"

35 
a·y≥
 
un•ec_a·y≥
;

36 
a·y≥
 
unix_a·y≥
;

37 
a·y≥
 
öë_a·y≥
;

38 
a·y≥
 
öë6_a·y≥
;

39 
a·y≥
 
ax25_a·y≥
;

40 
a·y≥
 
√åom_a·y≥
;

41 
a·y≥
 
ùx_a·y≥
;

42 
a·y≥
 
ddp_a·y≥
;

43 
a·y≥
 
x25_a·y≥
;

45 
	$£åouã_öô
()

47 #i‡
HAVE_AFINET


48 
öë_a·y≥
.
röput
 = 
INET_röput
;

50 #i‡
HAVE_AFINET6


51 
öë6_a·y≥
.
röput
 = 
INET6_röput
;

53 #i‡
HAVE_AFNETROM


54 
√åom_a·y≥
.
röput
 = 
NETROM_röput
;

56 #i‡
HAVE_AFIPX


57 
ùx_a·y≥
.
röput
 = 
IPX_röput
;

59 #i‡
HAVE_AFX25


60 
x25_a·y≥
.
röput
 = 
X25_röput
;

63 #i‡
HAVE_AFAX25


64 
ax25_a·y≥
.
röput
 = 
AX25_röput
;

66 #i‡
HAVE_AFATALK


67 
ddp_a·y≥
.
röput
 = 
DDP_röput
;

70 
	}
}

73 
	$rouã_edô
(
a˘i⁄
, c⁄° *
a‚ame
, 
›ti⁄s
, **
¨gv
)

75 
a·y≥
 *
≠
;

77 
≠
 = 
	`gë_a·y≥
(
a‚ame
);

79 i‡(!
≠
) {

80 
	`Ârötf
(
°dîr
, 
	`_
("Addªs†Ámûy `%s'ÇŸ suµ‹ãd.\n"), 
a‚ame
);

81  (
E_OPTERR
);

83 i‡(!
≠
->
röput
) {

84 
	`Ârötf
(
°dîr
, 
	`_
("Nÿroutög f‹áddªs†Ámûy `%s'.\n"), 
≠
->
«me
);

85  (
E_OPTERR
);

87  (
≠
->
	`röput
(
a˘i⁄
, 
›ti⁄s
, 
¨gv
));

88 
	}
}

	@interface/net-tools/lib/sit.c

17 
	~"c⁄fig.h
"

19 #i‡
HAVE_HWSIT


21 
	~<sys/ty≥s.h
>

22 
	~<sys/io˘l.h
>

23 
	~<sys/sockë.h
>

24 
	~<√t/if_¨p.h
>

25 
	~<°dlib.h
>

26 
	~<°dio.h
>

27 
	~<˘y≥.h
>

28 
	~<î∫o.h
>

29 
	~<f˙é.h
>

30 
	~<°rög.h
>

31 
	~<ãrmios.h
>

32 
	~<uni°d.h
>

33 
	~"√t-suµ‹t.h
"

34 
	~"∑th«mes.h
"

36 #i‚de‡
ARPHRD_SIT


38 
	#ARPHRD_SIT
 776

	)

41 
hwty≥
 
	gsô_hwty≥
 =

43 "sô", 
NULL
, 
ARPHRD_SIT
, 0,

44 
NULL
, NULL, NULL, 0

	@interface/net-tools/lib/slip.c

17 
	~"c⁄fig.h
"

19 #i‡
HAVE_HWSLIP


21 
	~<sys/ty≥s.h
>

22 
	~<sys/io˘l.h
>

23 
	~<sys/sockë.h
>

24 
	~<√t/if_¨p.h
>

25 
	~<°dlib.h
>

26 
	~<°dio.h
>

27 
	~<˘y≥.h
>

28 
	~<î∫o.h
>

29 
	~<f˙é.h
>

30 
	~<°rög.h
>

31 
	~<ãrmios.h
>

32 
	~<uni°d.h
>

33 
	~"√t-suµ‹t.h
"

34 
	~"∑th«mes.h
"

37 
hwty≥
 
	g¶ù_hwty≥
 =

39 "¶ù", 
NULL
, 
ARPHRD_SLIP
, 0,

40 
NULL
, NULL, NULL

42 
hwty≥
 
	gc¶ù_hwty≥
 =

44 "c¶ù", 
NULL
, 
ARPHRD_CSLIP
, 0,

45 
NULL
, NULL, NULL

47 
hwty≥
 
	g¶ù6_hwty≥
 =

49 "¶ù6", 
NULL
, 
ARPHRD_SLIP6
, 0,

50 
NULL
, NULL, NULL

52 
hwty≥
 
	gc¶ù6_hwty≥
 =

54 "c¶ù6", 
NULL
, 
ARPHRD_CSLIP6
, 0,

55 
NULL
, NULL, NULL

57 
hwty≥
 
	gad≠tive_hwty≥
 =

59 "ad≠tive", 
NULL
, 
ARPHRD_ADAPT
, 0,

60 
NULL
, NULL, NULL

	@interface/net-tools/lib/slip_ac.c

19 
	~"c⁄fig.h
"

21 #i‡
HAVE_HWSLIP


23 
	~<sys/ty≥s.h
>

24 
	~<sys/io˘l.h
>

25 
	~<sys/sockë.h
>

26 
	~<√t/if_¨p.h
>

27 
	~<°dlib.h
>

28 
	~<°dio.h
>

29 
	~<˘y≥.h
>

30 
	~<î∫o.h
>

31 
	~<f˙é.h
>

32 
	~<°rög.h
>

33 
	~<ãrmios.h
>

34 
	~<uni°d.h
>

35 
	~"√t-suµ‹t.h
"

36 
	~"∑th«mes.h
"

40 
	$SLIP_£t_disc
(
fd
, 
disc
)

42 i‡(
	`io˘l
(
fd
, 
TIOCSETD
, &
disc
) < 0) {

43 
	`Ârötf
(
°dîr
, "SLIP_£t_disc(%d): %s\n", 
disc
, 
	`°ªº‹
(
î∫o
));

44  (-
î∫o
);

47 
	}
}

51 
	$SLIP_£t_íˇp
(
fd
, 
íˇp
)

53 i‡(
	`io˘l
(
fd
, 
SIOCSIFENCAP
, &
íˇp
) < 0) {

54 
	`Ârötf
(
°dîr
, "SLIP_£t_íˇp(%d): %s\n", 
íˇp
, 
	`°ªº‹
(
î∫o
));

55  (-
î∫o
);

58 
	}
}

62 
	$SLIP_a˘iv©e
(
fd
)

64 i‡(
	`SLIP_£t_disc
(
fd
, 
N_SLIP
) < 0)

66 i‡(
	`SLIP_£t_íˇp
(
fd
, 0) < 0)

69 
	}
}

73 
	$CSLIP_a˘iv©e
(
fd
)

75 i‡(
	`SLIP_£t_disc
(
fd
, 
N_SLIP
) < 0)

77 i‡(
	`SLIP_£t_íˇp
(
fd
, 1) < 0)

80 
	}
}

84 
	$SLIP6_a˘iv©e
(
fd
)

86 i‡(
	`SLIP_£t_disc
(
fd
, 
N_SLIP
) < 0)

88 i‡(
	`SLIP_£t_íˇp
(
fd
, 2) < 0)

91 
	}
}

95 
	$CSLIP6_a˘iv©e
(
fd
)

97 i‡(
	`SLIP_£t_disc
(
fd
, 
N_SLIP
) < 0)

99 i‡(
	`SLIP_£t_íˇp
(
fd
, 3) < 0)

102 
	}
}

106 
	$ADAPTIVE_a˘iv©e
(
fd
)

108 i‡(
	`SLIP_£t_disc
(
fd
, 
N_SLIP
) < 0)

110 i‡(
	`SLIP_£t_íˇp
(
fd
, 8) < 0)

113 
	}
}

	@interface/net-tools/lib/sockets.c

9 
	~<sys/sockë.h
>

10 
	~<°dio.h
>

11 
	~<uni°d.h
>

13 
	~"c⁄fig.h
"

14 
	~"sockës.h
"

15 
	~"öé.h
"

16 
	~"utû.h
"

17 
	~"√t-suµ‹t.h
"

19 
	gskfd
 = -1;

21 
	$sockës_›í
(
Ámûy
)

23 
a·y≥
 **
a·
;

24 
sfd
 = -1;

25 
f‹˚
 = -1;

27 i‡(
f‹˚
 < 0) {

28 
f‹˚
 = 0;

29 i‡(
	`kî√l_vîsi⁄
(Ë< 
	`KRELEASE
(2, 1, 0))

30 
f‹˚
 = 1;

31 i‡(
	`ac˚ss
("/¥oc/√t", 
R_OK
))

32 
f‹˚
 = 1;

34 
a·
 = 
a·y≥s
; *aft;áft++) {

35 
a·y≥
 *
af
 = *
a·
;

36 
ty≥
 = 
SOCK_DGRAM
;

37 i‡(
af
->a‡=
AF_UNSPEC
)

39 i‡(
Ámûy
 && famûy !
af
->af)

41 i‡(
af
->
fd
 != -1) {

42 
sfd
 = 
af
->
fd
;

46 i‡(!
Ámûy
 && !
f‹˚
 && 
af
->
Êag_fûe
) {

47 i‡(
	`ac˚ss
(
af
->
Êag_fûe
, 
R_OK
))

50 #i‡
HAVE_AFNETROM


51 i‡(
af
->a‡=
AF_NETROM
)

52 
ty≥
 = 
SOCK_SEQPACKET
;

54 #i‡
HAVE_AFX25


55 i‡(
af
->a‡=
AF_X25
)

56 
ty≥
 = 
SOCK_SEQPACKET
;

58 
af
->
fd
 = 
	`sockë
◊f->af, 
ty≥
, 0);

59 i‡(
af
->
fd
 >= 0)

60 
sfd
 = 
af
->
fd
;

62 i‡(
sfd
 < 0)

63 
	`Ârötf
(
°dîr
, 
	`_
("No usableáddress families found.\n"));

64  
sfd
;

65 
	}
}

	@interface/net-tools/lib/strip.c

15 
	~"c⁄fig.h
"

17 #i‡
HAVE_HWSTRIP


19 
	~<sys/ty≥s.h
>

20 
	~<sys/io˘l.h
>

21 
	~<sys/sockë.h
>

22 
	~<√t/if_¨p.h
>

23 
	~<löux/ty≥s.h
>

24 
	~<löux/if_°rù.h
>

25 
	~<°dlib.h
>

26 
	~<°dio.h
>

27 
	~<˘y≥.h
>

28 
	~<î∫o.h
>

29 
	~<f˙é.h
>

30 
	~<°rög.h
>

31 
	~<ãrmios.h
>

32 
	~<uni°d.h
>

33 
	~"√t-suµ‹t.h
"

34 
	~"∑th«mes.h
"

35 
	~"utû.h
"

36 
	~"öé.h
"

39 
hwty≥
 
°rù_hwty≥
;

42 
	$¥_°rù
(*
±r
)

44 
buff
[64];

45 if(
±r
[1])

46 
	`•rötf
(
buff
, "%02x-%02x%02x-%02x%02x", *(
±r
+1), *(ptr+2), *(ptr+3),

47 *(
±r
+4), *(ptr+5));

49 
	`•rötf
(
buff
, "%02x%02x-%02x%02x", *(
±r
+2), *(ptr+3), *(ptr+4),

50 *(
±r
+5));

51  
buff
;

52 
	}
}

55 
	$ö_°rù
(*
buÂ
, 
sockaddr
 *
ßp
)

57 
i
,
i0
;

58 
MëricomAddªss
 *
haddr
 = (MëricomAddªs†*Ë(
ßp
->
ß_d©a
);

61 
ßp
->
ß_Ámûy
 = 
°rù_hwty≥
.
ty≥
;

64 
i0
 = 
i
 = (
buÂ
[0] == '*') ? 1 : 0;

66 
buÂ
[
i
] && (bufp[i] != '-'))

67 
i
++;

69 i‡(
buÂ
[
i
] != '-')

72 if(
i
-
i0
 == 2)

74 
haddr
->
c
[1] = 
	`°πﬁ
(&
buÂ
[
i0
], 0, 16);

75 
i
++;

76 if(
buÂ
[
i
] == 0)  -1;

78 
haddr
->
c
[1] = 0;

79 
i
=
i0
;

81 
haddr
->
c
[2] = 
	`°πﬁ
(&
buÂ
[
i
], 0, 16) >> 8;

82 
haddr
->
c
[3] = 
	`°πﬁ
(&
buÂ
[
i
], 0, 16) & 0xFF;

84 
buÂ
[
i
] && (bufp[i] != '-'))

85 
i
++;

87 i‡(
buÂ
[
i
] != '-')

90 
haddr
->
c
[4] = 
	`°πﬁ
(&
buÂ
[
i
+1], 0, 16) >> 8;

91 
haddr
->
c
[5] = 
	`°πﬁ
(&
buÂ
[
i
+1], 0, 16) & 0xFF;

92 
haddr
->
c
[0] = 0;

95 
	}
}

100 
	$do_°rù
(
fd
)

102 
disc
 = 
N_STRIP
;

103 i‡(
	`io˘l
(
fd
, 
TIOCSETD
, &
disc
) < 0)

105 
	`Ârötf
(
°dîr
, "STRIP_£t_disc(%d): %s\n", 
disc
, 
	`°ªº‹
(
î∫o
));

106 (-
î∫o
);

109 
	}
}

111 
hwty≥
 
	g°rù_hwty≥
 = {

112 "°rù", "Mëricom SèrmodêIP", 
ARPHRD_METRICOM
, (
MëricomAddªss
),

113 
¥_°rù
, 
ö_°rù
, 
do_°rù
, 0

	@interface/net-tools/lib/tr.c

16 
	~"c⁄fig.h
"

18 #i‡
HAVE_HWTR


19 
	~<asm/ty≥s.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/sockë.h
>

22 
	~<√t/if_¨p.h
>

23 
	~<löux/if_å.h
>

24 
	~<°dlib.h
>

25 
	~<°dio.h
>

26 
	~<î∫o.h
>

27 
	~<˘y≥.h
>

28 
	~<°rög.h
>

29 
	~<uni°d.h
>

30 
	~"√t-suµ‹t.h
"

31 
	~"∑th«mes.h
"

32 
	~"öé.h
"

33 
	~"utû.h
"

37 
hwty≥
 
å_hwty≥
;

38 #ifde‡
ARPHRD_IEEE802_TR


39 
hwty≥
 
å_hwty≥1
;

42 *
	$¥_å
(*
±r
)

44 
buff
[64];

46 
	`¢¥ötf
(
buff
, (buff), "%02X:%02X:%02X:%02X:%02X:%02X",

47 (
±r
[0] & 0377), (ptr[1] & 0377), (ptr[2] & 0377),

48 (
±r
[3] & 0377), (ptr[4] & 0377), (ptr[5] & 0377)

50  (
buff
);

51 
	}
}

54 
	$ö_å
(*
buÂ
, 
sockaddr
 *
ßp
)

56 *
±r
;

57 
c
, *
‹ig
;

58 
i
, 
vÆ
;

60 #ifde‡
ARPHRD_IEEE802_TR


61 i‡(
	`kî√l_vîsi⁄
(Ë< 
	`KRELEASE
(2,3,30)) {

62 
ßp
->
ß_Ámûy
 = 
å_hwty≥
.
ty≥
;

64 
ßp
->
ß_Ámûy
 = 
å_hwty≥1
.
ty≥
;

67 
ßp
->
ß_Ámûy
 = 
å_hwty≥
.
ty≥
;

71 
±r
 = 
ßp
->
ß_d©a
;

73 
i
 = 0;

74 
‹ig
 = 
buÂ
;

75 (*
buÂ
 !'\0'Ë&& (
i
 < 
TR_ALEN
)) {

76 
vÆ
 = 0;

77 
c
 = *
buÂ
++;

78 i‡(
	`isdigô
(
c
))

79 
vÆ
 = 
c
 - '0';

80 i‡(
c
 >= 'a' && c <= 'f')

81 
vÆ
 = 
c
 - 'a' + 10;

82 i‡(
c
 >= 'A' && c <= 'F')

83 
vÆ
 = 
c
 - 'A' + 10;

85 #ifde‡
DEBUG


86 
	`Ârötf
(
°dîr
, 
	`_
("ö_å(%s): invÆidÅokíÑögáddªss!\n"), 
‹ig
);

88 
î∫o
 = 
EINVAL
;

91 
vÆ
 <<= 4;

92 
c
 = *
buÂ
++;

93 i‡(
	`isdigô
(
c
))

94 
vÆ
 |
c
 - '0';

95 i‡(
c
 >= 'a' && c <= 'f')

96 
vÆ
 |
c
 - 'a' + 10;

97 i‡(
c
 >= 'A' && c <= 'F')

98 
vÆ
 |
c
 - 'A' + 10;

100 #ifde‡
DEBUG


101 
	`Ârötf
(
°dîr
, 
	`_
("ö_å(%s): invÆidÅokíÑögáddªss!\n"), 
‹ig
);

103 
î∫o
 = 
EINVAL
;

106 *
±r
++ = (Ë(
vÆ
 & 0377);

107 
i
++;

110 i‡(*
buÂ
 == ':') {

111 i‡(
i
 =
TR_ALEN
) {

112 #ifde‡
DEBUG


113 
	`Ârötf
(
°dîr
, 
	`_
("in_tr(%s):Årailing : ignored!\n"),

114 
‹ig
)

118 
buÂ
++;

123 i‡((
i
 =
TR_ALEN
Ë&& (*
buÂ
 != '\0')) {

124 #ifde‡
DEBUG


125 
	`Ârötf
(
°dîr
, 
	`_
("ö_å(%s):Åøûög junk!\n"), 
‹ig
);

126 
î∫o
 = 
EINVAL
;

130 #ifde‡
DEBUG


131 
	`Ârötf
(
°dîr
, "ö_å(%s): %s\n", 
‹ig
, 
	`¥_å
(
ßp
->
ß_d©a
));

135 
	}
}

138 
hwty≥
 
	gå_hwty≥
 =

140 "å", 
NULL
 , 
ARPHRD_IEEE802
, 
TR_ALEN
,

141 
¥_å
, 
ö_å
, 
NULL


143 #ifde‡
ARPHRD_IEEE802_TR


144 
hwty≥
 
	gå_hwty≥1
 =

146 "å", 
NULL
 , 
ARPHRD_IEEE802_TR
, 
TR_ALEN
,

147 
¥_å
, 
ö_å
, 
NULL


	@interface/net-tools/lib/tunnel.c

6 
	~"c⁄fig.h
"

8 #i‡
HAVE_HWTUNNEL


9 
	~<sys/ty≥s.h
>

10 
	~<sys/sockë.h
>

11 
	~<√t/if_¨p.h
>

12 
	~<löux/if_ëhî.h
>

13 
	~<°dlib.h
>

14 
	~<°dio.h
>

15 
	~<î∫o.h
>

16 
	~<˘y≥.h
>

17 
	~<°rög.h
>

18 
	~<uni°d.h
>

19 
	~"√t-suµ‹t.h
"

20 
	~"∑th«mes.h
"

22 
hwty≥
 
ëhî_hwty≥
;

24 *
	$¥_tu¬ñ
(*
±r
)

27 
	}
}

30 
	$ö_tu¬ñ
(*
buÂ
, 
sockaddr
 *
ßp
)

33 
	}
}

36 
hwty≥
 
	gtu¬ñ_hwty≥
 =

38 "tu¬ñ", 
NULL
, 
ARPHRD_TUNNEL
, 0,

39 
¥_tu¬ñ
, 
ö_tu¬ñ
, 
NULL
, 0

	@interface/net-tools/lib/unix.c

15 
	~"c⁄fig.h
"

17 
	~<sys/ty≥s.h
>

18 
	~<sys/sockë.h
>

19 #i‡
HAVE_AFUNIX


20 
	~<sys/un.h
>

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<î∫o.h
>

25 
	~<˘y≥.h
>

26 
	~<°rög.h
>

27 
	~<uni°d.h
>

28 
	~"√t-suµ‹t.h
"

29 
	~"∑th«mes.h
"

30 
	~"öé.h
"

31 
	~"utû.h
"

35 *
	$UNSPEC_¥öt
(*
±r
)

37 
buff
[64];

38 *
pos
;

39 
i
;

41 
pos
 = 
buff
;

42 
i
 = 0; i < (
sockaddr
); i++) {

43 
pos
 +
	`•rötf
’os, "%02X-", (*
±r
++ & 0377));

45 
buff
[
	`°æí
(buff) - 1] = '\0';

46  (
buff
);

47 
	}
}

51 *
	$UNSPEC_•röt
(
sockaddr
 *
ßp
, 
numîic
)

53 
buf
[64];

55 i‡(
ßp
->
ß_Ámûy
 == 0xFFFF || sap->sa_family == 0)

56  
	`ß„_°∫˝y
(
buf
, 
	`_
("[NONE SET]"), (buf));

57  (
	`UNSPEC_¥öt
(
ßp
->
ß_d©a
));

58 
	}
}

61 #i‡
HAVE_AFUNIX


64 *
	$UNIX_¥öt
(*
±r
)

66  (
±r
);

67 
	}
}

71 *
	$UNIX_•röt
(
sockaddr
 *
ßp
, 
numîic
)

73 
buf
[64];

75 i‡(
ßp
->
ß_Ámûy
 == 0xFFFF || sap->sa_family == 0)

76  
	`ß„_°∫˝y
(
buf
, 
	`_
("[NONE SET]"), (buf));

77  (
	`UNIX_¥öt
(
ßp
->
ß_d©a
));

78 
	}
}

81 
a·y≥
 
	gunix_a·y≥
 =

83 "unix", 
NULL
, 
AF_UNIX
, 0,

84 
UNIX_¥öt
, 
UNIX_•röt
, 
NULL
, NULL,

85 
NULL
, NULL, NULL,

92 
a·y≥
 
	gun•ec_a·y≥
 =

94 "un•ec", 
NULL
, 
AF_UNSPEC
, 0,

95 
UNSPEC_¥öt
, 
UNSPEC_•röt
, 
NULL
, NULL,

96 
NULL
,

	@interface/net-tools/lib/util-ank.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<uni°d.h
>

20 
	~<sy¶og.h
>

21 
	~<f˙é.h
>

22 
	~<sys/sockë.h
>

23 
	~<√töë/ö.h
>

24 
	~<°rög.h
>

25 
	~<√tdb.h
>

26 
	~<¨∑/öë.h
>

27 
	~<ªsﬁv.h
>

29 
	~"öé.h
"

30 
	~"utû-™k.h
"

32 #i‚de‡
AF_INET6


33 
	#AF_INET6
 10

	)

36 
	$sˇn_numbî
(*
¨g
, *
vÆ
)

38 
ªs
;

39 *
±r
;

41 i‡(!
¨g
 || !*arg)

43 
ªs
 = 
	`°πoul
(
¨g
, &
±r
, 0);

44 i‡(!
±r
 ||Öå =
¨g
 || *±∏|| 
ªs
 > 
UINT_MAX
)

46 *
vÆ
 = 
ªs
;

48 
	}
}

50 
	$gë_öãgî
(*
vÆ
, *
¨g
, 
ba£
)

52 
ªs
;

53 *
±r
;

55 i‡(!
¨g
 || !*arg)

57 
ªs
 = 
	`°πﬁ
(
¨g
, &
±r
, 
ba£
);

58 i‡(!
±r
 ||Öå =
¨g
 || *±∏|| 
ªs
 > 
INT_MAX
 ||Ñe†< 
INT_MIN
)

60 *
vÆ
 = 
ªs
;

62 
	}
}

64 
	$gë_unsig√d
(*
vÆ
, *
¨g
, 
ba£
)

66 
ªs
;

67 *
±r
;

69 i‡(!
¨g
 || !*arg)

71 
ªs
 = 
	`°πoul
(
¨g
, &
±r
, 
ba£
);

72 i‡(!
±r
 ||Öå =
¨g
 || *±∏|| 
ªs
 > 
UINT_MAX
)

74 *
vÆ
 = 
ªs
;

76 
	}
}

78 
	$gë_u32
(
__u32
 *
vÆ
, *
¨g
, 
ba£
)

80 
ªs
;

81 *
±r
;

83 i‡(!
¨g
 || !*arg)

85 
ªs
 = 
	`°πoul
(
¨g
, &
±r
, 
ba£
);

86 i‡(!
±r
 ||Öå =
¨g
 || *±∏|| 
ªs
 > 0xFFFFFFFFUL)

88 *
vÆ
 = 
ªs
;

90 
	}
}

92 
	$gë_u16
(
__u16
 *
vÆ
, *
¨g
, 
ba£
)

94 
ªs
;

95 *
±r
;

97 i‡(!
¨g
 || !*arg)

99 
ªs
 = 
	`°πoul
(
¨g
, &
±r
, 
ba£
);

100 i‡(!
±r
 ||Öå =
¨g
 || *±∏|| 
ªs
 > 0xFFFF)

102 *
vÆ
 = 
ªs
;

104 
	}
}

106 
	$gë_u8
(
__u8
 *
vÆ
, *
¨g
, 
ba£
)

108 
ªs
;

109 *
±r
;

111 i‡(!
¨g
 || !*arg)

113 
ªs
 = 
	`°πoul
(
¨g
, &
±r
, 
ba£
);

114 i‡(!
±r
 ||Öå =
¨g
 || *±∏|| 
ªs
 > 0xFF)

116 *
vÆ
 = 
ªs
;

118 
	}
}

120 
	$gë_s16
(
__s16
 *
vÆ
, *
¨g
, 
ba£
)

122 
ªs
;

123 *
±r
;

125 i‡(!
¨g
 || !*arg)

127 
ªs
 = 
	`°πﬁ
(
¨g
, &
±r
, 
ba£
);

128 i‡(!
±r
 ||Öå =
¨g
 || *±∏|| 
ªs
 > 0x7FFF ||Ñes < -0x8000)

130 *
vÆ
 = 
ªs
;

132 
	}
}

134 
	$gë_s8
(
__s8
 *
vÆ
, *
¨g
, 
ba£
)

136 
ªs
;

137 *
±r
;

139 i‡(!
¨g
 || !*arg)

141 
ªs
 = 
	`°πﬁ
(
¨g
, &
±r
, 
ba£
);

142 i‡(!
±r
 ||Öå =
¨g
 || *±∏|| 
ªs
 > 0x7F ||Ñes < -0x80)

144 *
vÆ
 = 
ªs
;

146 
	}
}

148 
	$gë_addr_1
(
öë_¥efix
 *
addr
, *
«me
, 
Ámûy
)

150 *
˝
;

151 *
≠
 = (*)
addr
->
d©a
;

152 
i
;

154 
	`mem£t
(
addr
, 0, (*addr));

156 i‡(
	`°rcmp
(
«me
, "default") == 0 || strcmp(name, "any") == 0) {

157 
addr
->
Ámûy
 = family;

158 
addr
->
byãÀn
 = (
Ámûy
 =
AF_INET6
 ? 16 : 4);

159 
addr
->
bôÀn
 = -1;

163 i‡(
	`°rchr
(
«me
, ':')) {

164 
addr
->
Ámûy
 = 
AF_INET6
;

165 i‡(
Ámûy
 !
AF_UNSPEC
 && famûy !
AF_INET6
)

167 i‡(
	`öë_±⁄
(
AF_INET6
, 
«me
, 
addr
->
d©a
) <= 0)

169 
addr
->
byãÀn
 = 16;

170 
addr
->
bôÀn
 = -1;

174 
addr
->
Ámûy
 = 
AF_INET
;

175 i‡(
Ámûy
 !
AF_UNSPEC
 && famûy !
AF_INET
)

177 
addr
->
byãÀn
 = 4;

178 
addr
->
bôÀn
 = -1;

179 
˝
=
«me
, 
i
=0; *cp; cp++) {

180 i‡(*
˝
 <= '9' && *cp >= '0') {

181 
≠
[
i
] = 10*≠[i] + (*
˝
-'0');

184 i‡(*
˝
 ='.' && ++
i
 <= 3)

189 
	}
}

191 
	$gë_¥efix_1
(
öë_¥efix
 *
d°
, *
¨g
, 
Ámûy
)

193 
îr
;

194 
∂í
;

195 *
¶ash
;

197 
	`mem£t
(
d°
, 0, (*dst));

199 i‡(
	`°rcmp
(
¨g
, "default") == 0 || strcmp(arg, "any") == 0) {

200 
d°
->
Ámûy
 = family;

201 
d°
->
byãÀn
 = 0;

202 
d°
->
bôÀn
 = 0;

206 
¶ash
 = 
	`°rchr
(
¨g
, '/');

207 i‡(
¶ash
)

208 *
¶ash
 = 0;

209 
îr
 = 
	`gë_addr_1
(
d°
, 
¨g
, 
Ámûy
);

210 i‡(
îr
 == 0) {

211 
d°
->
bôÀn
 = (d°->
Ámûy
 =
AF_INET6
 ? 128 : 32);

212 i‡(
¶ash
) {

213 i‡(
	`sˇn_numbî
(
¶ash
+1, &
∂í
Ë||ÖÀ¿> 
d°
->
bôÀn
) {

214 
îr
 = -1;

215 
d⁄e
;

217 
d°
->
bôÀn
 = 
∂í
;

220 
d⁄e
:

221 i‡(
¶ash
)

222 *
¶ash
 = '/';

223  
îr
;

224 
	}
}

226 
	$gë_addr
(
öë_¥efix
 *
d°
, *
¨g
, 
Ámûy
)

228 i‡(
	`gë_addr_1
(
d°
, 
¨g
, 
Ámûy
)) {

229 
	`Ârötf
(
°dîr
, 
	`_
("ù: %†i†övÆid i√àaddªss\n"), 
¨g
);

230 
	`exô
(1);

233 
	}
}

235 
	$gë_¥efix
(
öë_¥efix
 *
d°
, *
¨g
, 
Ámûy
)

237 i‡(
	`gë_¥efix_1
(
d°
, 
¨g
, 
Ámûy
)) {

238 
	`Ârötf
(
°dîr
, 
	`_
("ù: %†i†övÆid i√à¥efix\n"), 
¨g
);

239 
	`exô
(1);

242 
	}
}

244 
__u32
 
	$gë_addr32
(*
«me
)

246 
öë_¥efix
 
addr
;

247 i‡(
	`gë_addr_1
(&
addr
, 
«me
, 
AF_INET
)) {

248 
	`Ârötf
(
°dîr
, 
	`_
("ù: %†i†övÆid IPv4áddªss\n"), 
«me
);

249 
	`exô
(1);

251  
addr
.
d©a
[0];

252 
	}
}

254 
	$öv¨g
(*
msg
)

256 
	`Ârötf
(
°dîr
, 
	`_
("ù:árgumíài†wr⁄g: %s\n"), 
msg
);

257 
	`exô
(1);

258 
	}
}

260 
	$m©ches
(*
cmd
, *
∑âîn
)

262 
Àn
 = 
	`°æí
(
cmd
);

263 i‡(
Àn
 > 
	`°æí
(
∑âîn
))

265  
	`memcmp
(
∑âîn
, 
cmd
, 
Àn
);

266 
	}
}

268 
	$öë_addr_m©ch
(
öë_¥efix
 *
a
, i√t_¥efix *
b
, 
bôs
)

270 
__u32
 *
a1
 = 
a
->
d©a
;

271 
__u32
 *
a2
 = 
b
->
d©a
;

272 
w‹ds
 = 
bôs
 >> 0x05;

274 
bôs
 &= 0x1f;

276 i‡(
w‹ds
)

277 i‡(
	`memcmp
(
a1
, 
a2
, 
w‹ds
 << 2))

280 i‡(
bôs
) {

281 
__u32
 
w1
, 
w2
;

282 
__u32
 
mask
;

284 
w1
 = 
a1
[
w‹ds
];

285 
w2
 = 
a2
[
w‹ds
];

287 
mask
 = 
	`ht⁄l
((0xffffffffË<< (0x20 - 
bôs
));

289 i‡((
w1
 ^ 
w2
Ë& 
mask
)

294 
	}
}

296 c⁄° *
	$f‹m©_ho°
(
af
, *
addr
, *
abuf
, 
Æí
)

298 #ifde‡
RESOLVE_HOSTNAMES


299 i‡(
ªsﬁve_ho°s
) {

300 
addæí
 = 0;

301 
ho°ít
 *
h_ít
;

302 
af
) {

303 
AF_INET
:

304 
addæí
 = 4;

306 
AF_INET6
:

307 
addæí
 = 16;

310 i‡(
addæí
 &&

311 (
h_ít
 = 
	`gëho°byaddr
(
addr
, 
addæí
, 
af
)Ë!
NULL
) {

312 
	`¢¥ötf
(
abuf
, 
Æí
-1, "%s", 
h_ít
->
h_«me
);

313  
abuf
;

317  
	`öë_¡›
(
af
, 
addr
, 
abuf
, 
Æí
);

318 
	}
}

	@interface/net-tools/lib/util.c

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<sys/ut¢ame.h
>

8 
	~"utû.h
"

11 
	$oom
()

13 
	`Ârötf
(
°dîr
, "out of virtual memory\n");

14 
	`exô
(2);

15 
	}
}

17 *
	$xmÆloc
(
size_t
 
sz
)

19 *
p
 = 
	`ˇŒoc
(
sz
, 1);

20 i‡(!
p
)

21 
	`oom
();

22  
p
;

23 
	}
}

25 *
	$xªÆloc
(*
ﬁdp
, 
size_t
 
sz
)

27 *
p
 = 
	`ªÆloc
(
ﬁdp
, 
sz
);

28 i‡(!
p
)

29 
	`oom
();

30  
p
;

31 
	}
}

33 
	$kî√l_vîsi⁄
()

35 
ut¢ame
 
uts
;

36 
maj‹
, 
mö‹
, 
∑tch
;

38 i‡(
	`u«me
(&
uts
) < 0)

40 i‡(
	`ssˇnf
(
uts
.
ªÀa£
, "%d.%d.%d", &
maj‹
, &
mö‹
, &
∑tch
) != 3)

42  
	`KRELEASE
(
maj‹
, 
mö‹
, 
∑tch
);

43 
	}
}

47 *
	$ß„_°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
)

49 
d°
[
size
-1] = '\0';

50  
	`°∫˝y
(
d°
,
§c
,
size
-1);

51 
	}
}

	@interface/net-tools/lib/util.h

1 
	~<°ddef.h
>

3 *
xmÆloc
(
size_t
 
sz
);

4 *
xªÆloc
(*
p
, 
size_t
 
sz
);

6 
	#√w
(
p
Ë(’Ë
	`xmÆloc
((*’))))

	)

9 
kî√l_vîsi⁄
();

10 
	#KRELEASE
(
maj
,
mö
,
∑tch
Ë((majË* 10000 + (mö)*1000 + (∑tch))

	)

13 
n°rcmp
(const *, const *);

15 *
ß„_°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
);

18 
	#√tmö
(
a
,
b
Ë(◊)<(bË? (aË: (b))

	)

19 
	#√tmax
(
a
,
b
Ë(◊)>(bË? (aË: (b))

	)

	@interface/net-tools/lib/x25.c

18 
	~"c⁄fig.h
"

20 #i‡
HAVE_AFX25
 || 
HAVE_HWX25


21 
	~<sys/ty≥s.h
>

22 
	~<sys/io˘l.h
>

23 
	~<sys/sockë.h
>

24 
	~<löux/x25.h
>

25 
	~<√t/if_¨p.h
>

26 
	~<°dlib.h
>

27 
	~<°dio.h
>

28 
	~<˘y≥.h
>

29 
	~<î∫o.h
>

30 
	~<f˙é.h
>

31 
	~<°rög.h
>

32 
	~<ãrmios.h
>

33 
	~<uni°d.h
>

34 
	~"√t-suµ‹t.h
"

35 
	~"∑th«mes.h
"

36 
	#EXTERN


	)

38 
	~"√t-loˇÀ.h
"

40 
	~"öé.h
"

42 
	gX25_îrmsg
[128];

45 
a·y≥
 
x25_a·y≥
;

48 #i‚de‡
X25_ADDR_LEN


49 
	#X25_ADDR_LEN
 16

	)

54 
	$X25_¥öt
(*
±r
)

56 
buff
[
X25_ADDR_LEN
+1];

58 
	`°∫˝y
(
buff
, 
±r
, 
X25_ADDR_LEN
);

59 
buff
[
X25_ADDR_LEN
] = '\0';

60 (
buff
);

62 
	}
}

67 
	$X25_•röt
(
sockaddr
 *
ßp
, 
numîic
)

69 i‡(
ßp
->
ß_Ámûy
 == 0xFFFF || sap->sa_family == 0)

70 –
	`_
("[NONE SET]"));

71 (
	`X25_¥öt
(((
sockaddr_x25
 *)
ßp
)->
sx25_addr
.
x25_addr
));

72 
	}
}

79 
	$X25_öput
(
ty≥
, *
buÂ
, 
sockaddr
 *
ßp
)

81 *
±r
;

82 *
p
;

83 
sigdigôs
;

85 
ßp
->
ß_Ámûy
 = 
x25_a·y≥
.
af
;

86 
±r
 = ((
sockaddr_x25
 *)
ßp
)->
sx25_addr
.
x25_addr
;

90 i‡(
	`°æí
(
buÂ
)>18) {

91 
	`°r˝y
(
X25_îrmsg
, 
	`_
("Address can'tÉxceedÉighteen digits with sigdigits"));

92 #ifde‡
DEBUG


93 
	`Ârötf
(
°dîr
, "x25_öput(%s): %†!\n", 
X25_îrmsg
, 
‹ig
);

95 
î∫o
 = 
EINVAL
;

100 i‡((
p
 = 
	`°rchr
(
buÂ
, '/')Ë!
NULL
) {

101 *
p
 = '\0';

102 
sigdigôs
 = 
	`©oi
(
p
 + 1);

104 
sigdigôs
 = 
	`°æí
(
buÂ
);

107 i‡(
	`°æí
(
buÂ
Ë< 1 || såÀn(buÂË> 15 || 
sigdigôs
 > strlen(bufp)) {

108 *
p
 = '/';

109 
	`°r˝y
(
X25_îrmsg
, 
	`_
("Invalidáddress"));

110 #ifde‡
DEBUG


111 
	`Ârötf
(
°dîr
, "x25_öput(%s): %†!\n", 
X25_îrmsg
, 
‹ig
);

113 
î∫o
 = 
EINVAL
;

117 
	`°∫˝y
(
±r
, 
buÂ
, 
sigdigôs
+1);

120 #ifde‡
DEBUG


121 
	`Ârötf
(
°dîr
, "x25_öput(%s): ", 
‹ig
);

122 
i
 = 0; i < (
x25_addªss
); i++)

123 
	`Ârötf
(
°dîr
, "%02X ", 
ßp
->
ß_d©a
[
i
] & 0377);

124 
	`Ârötf
(
°dîr
, "\n");

127  
sigdigôs
;

128 
	}
}

133 
	$X25_hîr‹
(*
ãxt
)

135 i‡(
ãxt
 =
NULL
Ë
	`Ârötf
(
°dîr
, "%s\n", 
X25_îrmsg
);

136 
	`Ârötf
(
°dîr
, "%s: %s\n", 
ãxt
, 
X25_îrmsg
);

137 
	}
}

141 
	$X25_höput
(*
buÂ
, 
sockaddr
 *
ßp
)

143 i‡(
	`X25_öput
(0, 
buÂ
, 
ßp
) < 0) (-1);

144 
ßp
->
ß_Ámûy
 = 
ARPHRD_X25
;

146 
	}
}

149 
hwty≥
 
	gx25_hwty≥
 = {

150 "x25", 
NULL
, 
ARPHRD_X25
, 
X25_ADDR_LEN
,

151 
X25_¥öt
, 
X25_höput
, 
NULL


154 
a·y≥
 
	gx25_a·y≥
 =

156 "x25", 
NULL
, 
AF_X25
, 
X25_ADDR_LEN
,

157 
X25_¥öt
, 
X25_•röt
, 
X25_öput
, 
X25_hîr‹
,

158 
X25_Ωröt
, 
X25_röput
, 
NULL
 ,

	@interface/net-tools/lib/x25_gr.c

19 
	~"c⁄fig.h
"

21 #i‡
HAVE_AFX25


23 
	~<sys/ty≥s.h
>

24 
	~<sys/io˘l.h
>

25 
	~<sys/sockë.h
>

26 
	~<löux/x25.h
>

27 
	~<löux/if_¨p.h
>

28 
	~<˘y≥.h
>

29 
	~<î∫o.h
>

30 
	~<f˙é.h
>

31 
	~<°rög.h
>

32 
	~<ãrmios.h
>

34 
	~<°dlib.h
>

35 
	~<°dio.h
>

36 
	~<uni°d.h
>

37 
	~<°rög.h
>

38 
	~"√t-suµ‹t.h
"

39 
	~"∑th«mes.h
"

40 
	#EXTERN


	)

42 
	~"√t-loˇÀ.h
"

44 
	~"öé.h
"

47 #i‚de‡
X25_ADDR_LEN


48 
	#X25_ADDR_LEN
 16

	)

51 
	$X25_Ωröt
(
›ti⁄s
)

53 
FILE
 *
f
=
	`f›í
(
_PATH_PROCNET_X25_ROUTE
, "r");

54 
buf„r
[256];

55 *
p
;

56 
digôs
;

58 if(
f
==
NULL
)

60 
	`¥ötf
–
	`_
("X.25Çot configured inÅhis system.\n"));

63 
	`¥ötf
–
	`_
("Kernel X.25ÑoutingÅable\n"));

64 
	`¥ötf
–
	`_
("Destination Iface\n"));

65 
	`fgës
(
buf„r
,256,
f
);

66 
	`fgës
(
buf„r
,256,
f
))

68 
p
 = 
	`°rchr
(
buf„r
,'\n');

69 i‡(
p
)

70 *
p
=0;

72 
buf„r
[24]=0;

73 
buf„r
[35]=0;

74 
digôs
=
	`©oi
(
buf„r
+17);

75 i‡(
digôs
 < 0 || digits > 15)

76 
digôs
=15;

77 
buf„r
[
digôs
]=0;

78 i‡(
digôs
 == 0)

79 
	`¥ötf
("* %-5s\n", 
buf„r
+25);

81 
	`¥ötf
("%s/%*d %-5s\n",

82 
buf„r
,
digôs
-17,digits,buffer+25);

84 
	`f˛o£
(
f
);

86 
	}
}

	@interface/net-tools/lib/x25_sr.c

16 
	~"c⁄fig.h
"

18 #i‡
HAVE_AFX25


19 
	~<asm/ty≥s.h
>

20 
	~<sys/∑øm.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/sockë.h
>

23 
	~<sys/io˘l.h
>

24 
	~<löux/x25.h
>

25 
	~<˘y≥.h
>

26 
	~<î∫o.h
>

27 
	~<√tdb.h
>

28 
	~<ªsﬁv.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<°dio.h
>

32 
	~<uni°d.h
>

33 
	~"vîsi⁄.h
"

34 
	~"√t-suµ‹t.h
"

35 
	~"∑th«mes.h
"

36 
	#EXTERN


	)

38 
	~"√t-loˇÀ.h
"

40 
	~"öé.h
"

42 
	~"√t-„©uªs.h
"

44 
a·y≥
 
x25_a·y≥
;

46 
	gskfd
 = -1;

49 
	$ußge
()

51 
	`Ârötf
(
°dîr
,"Usage: x25_route [-v] del Target[/mask] [dev] If\n");

52 
	`Ârötf
(
°dîr
," x25_route [-v]ádd Target[/mask] [dev] If\n");

53 (
E_USAGE
);

54 
	}
}

57 
	$X25_£åouã
(
a˘i⁄
, 
›ti⁄s
, **
¨gs
)

59 
x25_rouã_°ru˘
 
π
;

60 
sockaddr_x25
 
sx25
;

61 
èrgë
[128];

62 sig√d 
sigdigôs
;

64 i‡(*
¨gs
 =
NULL
)

65 (
	`ußge
());

67 
	`°r˝y
(
èrgë
, *
¨gs
++);

70 
	`mem£t
((*Ë&
π
, 0, (rt));

73 i‡((
sigdigôs
 = 
x25_a·y≥
.
	`öput
(0, 
èrgë
, (
sockaddr
 *)&
sx25
)) < 0) {

74 
x25_a·y≥
.
	`hîr‹
(
èrgë
);

77 
π
.
sigdigôs
=sigdigits;

80 
	`mem˝y
(&
π
.
addªss
, &
sx25
.
sx25_addr
, (sx25.sx25_addr));

82 *
¨gs
) {

83 i‡(!
	`°rcmp
(*
¨gs
,"device") || !strcmp(*args,"dev")) {

84 
¨gs
++;

85 i‡(!*
¨gs
)

86 (
	`ußge
());

88 i‡(
¨gs
[1])

89 (
	`ußge
());

90 i‡(
π
.
devi˚
[0])

91 (
	`ußge
());

92 
	`°r˝y
(
π
.
devi˚
, *
¨gs
);

93 
¨gs
++;

95 i‡(
π
.
devi˚
[0]=='\0')

96 (
	`ußge
());

99 i‡(
π
.
sigdigôs
 > 15) {

100 
	`Ârötf
(
°dîr
, 
	`_
("rouã: bogu†√tmask %d\n"), 
π
.
sigdigôs
);

101 (
E_OPTERR
);

104 i‡(
π
.
sigdigôs
 > 
	`°æí
‘t.
addªss
.
x25_addr
)) {

105 
	`Ârötf
(
°dîr
, 
	`_
("route:Çetmask doesn't matchÑouteáddress\n"));

106 (
E_OPTERR
);

110 i‡((
skfd
 = 
	`sockë
(
AF_X25
, 
SOCK_SEQPACKET
, 0)) < 0) {

111 
	`≥º‹
("socket");

112 (
E_SOCK
);

116 i‡(
a˘i⁄
==
RTACTION_DEL
) {

117 i‡(
	`io˘l
(
skfd
, 
SIOCDELRT
, &
π
) < 0) {

118 
	`≥º‹
("SIOCDELRT");

119 
	`˛o£
(
skfd
);

120 (
E_SOCK
);

123 i‡(
	`io˘l
(
skfd
, 
SIOCADDRT
, &
π
) < 0) {

124 
	`≥º‹
("SIOCADDRT");

125 
	`˛o£
(
skfd
);

126 (
E_SOCK
);

131 (Ë
	`˛o£
(
skfd
);

133 
	}
}

135 
	$X25_röput
(
a˘i⁄
, 
›ti⁄s
, **
¨gs
)

137 i‡(
a˘i⁄
 =
RTACTION_FLUSH
) {

138 
	`Ârötf
(
°dîr
,"Flushing `x25'ÑoutingÅableÇot supported\n");

139 (
	`ußge
());

141 i‡(
›ti⁄s
 & 
FLAG_CACHE
) {

142 
	`Ârötf
(
°dîr
,"Modifying `x25'Ñouting cacheÇot supported\n");

143 (
	`ußge
());

145 i‡((*
¨gs
 =
NULL
Ë|| (
a˘i⁄
 =
RTACTION_HELP
))

146 (
	`ußge
());

148 (
	`X25_£åouã
(
a˘i⁄
, 
›ti⁄s
, 
¨gs
));

149 
	}
}

	@interface/net-tools/mii-tool.c

32 
	gVîsi⁄
[] = "$Id: mii-tool.c,v 1.9 2006-09-27 20:59:18Écki Exp $\n(Author: David Hinds based on Donald Becker's mii-diag)";

34 
	~<uni°d.h
>

35 
	~<°dlib.h
>

36 
	~<°dio.h
>

37 
	~<˘y≥.h
>

38 
	~<°rög.h
>

39 
	~<î∫o.h
>

40 
	~<f˙é.h
>

41 
	~<gë›t.h
>

42 
	~<time.h
>

43 
	~<sy¶og.h
>

44 
	~<sys/ty≥s.h
>

45 
	~<sys/sockë.h
>

46 
	~<sys/io˘l.h
>

47 
	~<√t/if.h
>

48 
	~<löux/sockios.h
>

50 #i‚de‡
__GLIBC__


51 
	~<löux/if_¨p.h
>

52 
	~<löux/if_ëhî.h
>

54 
	~"mii.h
"

55 
	~"vîsi⁄.h
"

57 
	#MAX_ETH
 8

	)

61 
u_sh‹t
 
	mid1
, 
	mid2
;

62 *
	m«me
;

63 } 
	gmii_id
[] = {

83 
	#NMII
 ((
mii_id
)/(mii_id[0]))

	)

87 
›ti⁄
 
	gl⁄g›ts
[] = {

103 
	gvîbo£
 = 0,

104 
	g›t_vîsi⁄
 = 0,

105 
	g›t_ª°¨t
 = 0,

106 
	g›t_ª£t
 = 0,

107 
	g›t_log
 = 0,

108 
	g›t_w©ch
 = 0;

109 
	gnway_advîti£
 = 0;

110 
	gfixed_•ìd
 = 0;

111 
	govîride_phy
 = -1;

113 
	gskfd
 = -1;

114 
i‰eq
 
	gi‰
;

118 
	$mdio_ªad
(
skfd
, 
loˇti⁄
)

120 
mii_d©a
 *
mii
 = (mii_d©®*)&
i‰
.
i‰_d©a
;

121 
mii
->
ªg_num
 = 
loˇti⁄
;

122 i‡(
	`io˘l
(
skfd
, 
SIOCGMIIREG
, &
i‰
) < 0) {

123 
	`Ârötf
(
°dîr
, "SIOCGMIIREG o¿%†Áûed: %s\n", 
i‰
.
i‰_«me
,

124 
	`°ªº‹
(
î∫o
));

127  
mii
->
vÆ_out
;

128 
	}
}

130 
	$mdio_wrôe
(
skfd
, 
loˇti⁄
, 
vÆue
)

132 
mii_d©a
 *
mii
 = (mii_d©®*)&
i‰
.
i‰_d©a
;

133 
mii
->
ªg_num
 = 
loˇti⁄
;

134 
mii
->
vÆ_ö
 = 
vÆue
;

135 i‡(
	`io˘l
(
skfd
, 
SIOCSMIIREG
, &
i‰
) < 0) {

136 
	`Ârötf
(
°dîr
, "SIOCSMIIREG o¿%†Áûed: %s\n", 
i‰
.
i‰_«me
,

137 
	`°ªº‹
(
î∫o
));

139 
	}
}

144 *
	m«me
;

145 
u_sh‹t
 
	mvÆue
[2];

146 } 
	gmedü
[] = {

148 { "10ba£T-HD", {
MII_AN_10BASET_HD
} },

149 { "10ba£T-FD", {
MII_AN_10BASET_FD
} },

150 { "100ba£Tx-HD", {
MII_AN_100BASETX_HD
} },

151 { "100ba£Tx-FD", {
MII_AN_100BASETX_FD
} },

152 { "100ba£T4", {
MII_AN_100BASET4
} },

153 { "100ba£Tx", {
MII_AN_100BASETX_FD
 | 
MII_AN_100BASETX_HD
} },

154 { "10ba£T", {
MII_AN_10BASET_FD
 | 
MII_AN_10BASET_HD
} },

156 { "1000ba£T-HD", {0, 
MII_BMCR2_1000HALF
} },

157 { "1000ba£T-FD", {0, 
MII_BMCR2_1000FULL
} },

158 { "1000ba£T", {0, 
MII_BMCR2_1000HALF
|
MII_BMCR2_1000FULL
} },

160 
	#NMEDIA
 ((
medü
)/(medü[0]))

	)

163 
	$∑r£_medü
(*
¨g
, *
bm¸2
)

165 
mask
, 
i
;

166 *
s
;

167 
mask
 = 
	`°πoul
(
¨g
, &
s
, 16);

168 i‡((*
¨g
 !'\0'Ë&& (*
s
 == '\0')) {

169 i‡((
mask
 & 
MII_AN_ABILITY_MASK
) &&

170 !(
mask
 & ~
MII_AN_ABILITY_MASK
)) {

171 *
bm¸2
 = 0;

172  
mask
;

174 
Áûed
;

176 
mask
 = 0;

177 *
bm¸2
 = 0;

178 
s
 = 
	`°πok
(
¨g
, ", ");

180 
i
 = 0; i < 
NMEDIA
; i++)

181 i‡(
s
 && 
	`°rˇ£cmp
(
medü
[
i
].
«me
, s) == 0) ;

182 i‡(
i
 =
NMEDIA
Ë
Áûed
;

183 
mask
 |
medü
[
i
].
vÆue
[0];

184 *
bm¸2
 |
medü
[
i
].
vÆue
[1];

185 } (
s
 = 
	`°πok
(
NULL
, ", ")) != NULL);

187  
mask
;

188 
Áûed
:

189 
	`Ârötf
(
°dîr
, "InvÆid medü s≥cifiˇti⁄ '%s'.\n", 
¨g
);

191 
	}
}

195 c⁄° *
	$medü_li°
(
mask
, 
mask2
, 
be°
)

197 
buf
[100];

198 
i
;

199 *
buf
 = '\0';

201 i‡(
mask
 & 
MII_BMCR_SPEED1000
) {

202 i‡(
mask2
 & 
MII_BMCR2_1000HALF
) {

203 
	`°rˇt
(
buf
, " ");

204 
	`°rˇt
(
buf
, "1000baseT-HD");

205 i‡(
be°
Ë
out
;

207 i‡(
mask2
 & 
MII_BMCR2_1000FULL
) {

208 
	`°rˇt
(
buf
, " ");

209 
	`°rˇt
(
buf
, "1000baseT-FD");

210 i‡(
be°
Ë
out
;

213 
mask
 >>= 5;

214 
i
 = 4; i >= 0; i--) {

215 i‡(
mask
 & (1<<
i
)) {

216 
	`°rˇt
(
buf
, " ");

217 
	`°rˇt
(
buf
, 
medü
[
i
].
«me
);

218 i‡(
be°
) ;

221 
out
:

222 i‡(
mask
 & (1<<5))

223 
	`°rˇt
(
buf
, " flow-control");

224  
buf
;

225 
	}
}

227 
	$show_basic_mii
(
sock
, 
phy_id
)

229 
buf
[100];

230 
i
, 
mii_vÆ
[32];

231 
bm¸
, 
bm§
, 
advît
, 
lk∑r
, 
bm¸2
, 
Õa2
;

235 
	`mdio_ªad
(
sock
, 
MII_BMSR
);

236 
i
 = 0; i < ((
vîbo£
 > 1Ë? 32 : 
MII_BASIC_MAX
); i++)

237 
mii_vÆ
[
i
] = 
	`mdio_ªad
(
sock
, i);

239 i‡(
mii_vÆ
[
MII_BMCR
] =0xfff‡|| mii_vÆ[
MII_BMSR
] == 0x0000) {

240 
	`Ârötf
(
°dîr
, " No MIIÅransceiverÖresent!.\n");

245 
bm¸
 = 
mii_vÆ
[
MII_BMCR
]; 
bm§
 = mii_vÆ[
MII_BMSR
];

246 
advît
 = 
mii_vÆ
[
MII_ANAR
]; 
lk∑r
 = mii_vÆ[
MII_ANLPAR
];

247 
bm¸2
 = 
mii_vÆ
[
MII_CTRL1000
]; 
Õa2
 = mii_vÆ[
MII_STAT1000
];

249 
	`•rötf
(
buf
, "%s: ", 
i‰
.
i‰_«me
);

250 i‡(
bm¸
 & 
MII_BMCR_AN_ENA
) {

251 i‡(
bm§
 & 
MII_BMSR_AN_COMPLETE
) {

252 i‡(
advît
 & 
lk∑r
) {

253 
	`°rˇt
(
buf
, (
lk∑r
 & 
MII_AN_ACK
) ?

255 
	`°rˇt
(
buf
, 
	`medü_li°
(
advît
 & 
lk∑r
, 
bm¸2
 & 
Õa2
>>2, 1));

256 
	`°rˇt
(
buf
, ", ");

258 
	`°rˇt
(
buf
, "autonegotiation failed, ");

260 } i‡(
bm¸
 & 
MII_BMCR_RESTART
) {

261 
	`°rˇt
(
buf
, "autonegotiationÑestarted, ");

264 
	`•rötf
(
buf
+
	`°æí
(buf), "%s Mbit, %s duplex, ",

265 ((
bm¸2
 & (
MII_BMCR2_1000HALF
 | 
MII_BMCR2_1000FULL
)Ë& 
Õa2
 >> 2)

267 : (
bm¸
 & 
MII_BMCR_100MBIT
) ? "100" : "10",

268 (
bm¸
 & 
MII_BMCR_DUPLEX
) ? "full" : "half");

270 
	`°rˇt
(
buf
, (
bm§
 & 
MII_BMSR_LINK_VALID
) ? "link ok" : "noÜink");

272 i‡(
›t_w©ch
) {

273 i‡(
›t_log
) {

274 
	`sy¶og
(
LOG_INFO
, 
buf
);

276 
s
[20];

277 
time_t
 
t
 = 
	`time
(
NULL
);

278 
	`°r·ime
(
s
, (s), "%T", 
	`loˇ…ime
(&
t
));

279 
	`¥ötf
("%†%s\n", 
s
, 
buf
);

282 
	`¥ötf
("%s\n", 
buf
);

285 i‡(
vîbo£
 > 1) {

286 
	`¥ötf
("Ñegi°î†f‹ MII PHY %d: ", 
phy_id
);

287 
i
 = 0; i < 32; i++)

288 
	`¥ötf
("%†%4.4x", ((
i
 % 8Ë? "" : "\¿ "), 
mii_vÆ
[i]);

289 
	`¥ötf
("\n");

292 i‡(
vîbo£
) {

293 
	`¥ötf
("Öroduct info: ");

294 
i
 = 0; i < 
NMII
; i++)

295 i‡((
mii_id
[
i
].
id1
 =
mii_vÆ
[2]) &&

296 (
mii_id
[
i
].
id2
 =(
mii_vÆ
[3] & 0xfff0)))

298 i‡(
i
 < 
NMII
)

299 
	`¥ötf
("%†ªv %d\n", 
mii_id
[
i
].
«me
, 
mii_vÆ
[3]&0x0f);

301 
	`¥ötf
("vendor %02x:%02x:%02x, model %dÑev %d\n",

302 
mii_vÆ
[2]>>10, (mii_val[2]>>2)&0xff,

303 ((
mii_vÆ
[2]<<6)|(mii_val[3]>>10))&0xff,

304 (
mii_vÆ
[3]>>4)&0x3f, mii_val[3]&0x0f);

305 
	`¥ötf
(" basic mode: ");

306 i‡(
bm¸
 & 
MII_BMCR_RESET
)

307 
	`¥ötf
("softwareÑeset, ");

308 i‡(
bm¸
 & 
MII_BMCR_LOOPBACK
)

309 
	`¥ötf
("loopback, ");

310 i‡(
bm¸
 & 
MII_BMCR_ISOLATE
)

311 
	`¥ötf
("isolate, ");

312 i‡(
bm¸
 & 
MII_BMCR_COLTEST
)

313 
	`¥ötf
("collisionÅest, ");

314 i‡(
bm¸
 & 
MII_BMCR_AN_ENA
) {

315 
	`¥ötf
("autonegotiationÉnabled\n");

317 
	`¥ötf
("%s Mbit, %s duplex\n",

318 (
bm¸
 & 
MII_BMCR_100MBIT
) ? "100" : "10",

319 (
bm¸
 & 
MII_BMCR_DUPLEX
) ? "full" : "half");

321 
	`¥ötf
(" basic status: ");

322 i‡(
bm§
 & 
MII_BMSR_AN_COMPLETE
)

323 
	`¥ötf
("autonegotiation complete, ");

324 i‡(
bm¸
 & 
MII_BMCR_RESTART
)

325 
	`¥ötf
("autonegotiationÑestarted, ");

326 i‡(
bm§
 & 
MII_BMSR_REMOTE_FAULT
)

327 
	`¥ötf
("remote fault, ");

328 
	`¥ötf
((
bm§
 & 
MII_BMSR_LINK_VALID
) ? "link ok" : "noÜink");

329 
	`¥ötf
("\¿ c≠abûôõs:%s", 
	`medü_li°
(
bm§
 >> 6, 
bm¸2
, 0));

330 
	`¥ötf
("\¿ádvîtisög: %s", 
	`medü_li°
(
advît
, 
Õa2
 >> 2, 0));

331 i‡(
lk∑r
 & 
MII_AN_ABILITY_MASK
)

332 
	`¥ötf
("\¿ÜökÖ¨äî:%s", 
	`medü_li°
(
lk∑r
, 
bm¸2
, 0));

333 
	`¥ötf
("\n");

335 
	`fÊush
(
°dout
);

337 
	}
}

341 
	$do_⁄e_xcvr
(
skfd
, *
i‚ame
, 
maybe
)

343 
mii_d©a
 *
mii
 = (mii_d©®*)&
i‰
.
i‰_d©a
;

346 
	`°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

347 i‡(
	`io˘l
(
skfd
, 
SIOCGMIIPHY
, &
i‰
) < 0) {

348 i‡(!
maybe
 || (
î∫o
 !
ENODEV
))

349 
	`Ârötf
(
°dîr
, "SIOCGMIIPHY on '%s' failed: %s\n",

350 
i‚ame
, 
	`°ªº‹
(
î∫o
));

354 i‡(
ovîride_phy
 >= 0) {

355 
	`¥ötf
("usögÅhê•ecifõd MII index %d.\n", 
ovîride_phy
);

356 
mii
->
phy_id
 = 
ovîride_phy
;

359 i‡(
›t_ª£t
) {

360 
	`¥ötf
("resettingÅheÅransceiver...\n");

361 
	`mdio_wrôe
(
skfd
, 
MII_BMCR
, 
MII_BMCR_RESET
);

363 i‡(
nway_advîti£
 > 0) {

364 
	`mdio_wrôe
(
skfd
, 
MII_ANAR
, 
nway_advîti£
 | 1);

365 
›t_ª°¨t
 = 1;

367 i‡(
›t_ª°¨t
) {

368 
	`¥ötf
("restartingáutonegotiation...\n");

369 
	`mdio_wrôe
(
skfd
, 
MII_BMCR
, 0x0000);

370 
	`mdio_wrôe
(
skfd
, 
MII_BMCR
, 
MII_BMCR_AN_ENA
|
MII_BMCR_RESTART
);

372 i‡(
fixed_•ìd
) {

373 
bm¸
 = 0;

374 i‡(
fixed_•ìd
 & (
MII_AN_100BASETX_FD
|
MII_AN_100BASETX_HD
))

375 
bm¸
 |
MII_BMCR_100MBIT
;

376 i‡(
fixed_•ìd
 & (
MII_AN_100BASETX_FD
|
MII_AN_10BASET_FD
))

377 
bm¸
 |
MII_BMCR_DUPLEX
;

378 
	`mdio_wrôe
(
skfd
, 
MII_BMCR
, 
bm¸
);

381 i‡(!
›t_ª°¨t
 && !
›t_ª£t
 && !
fixed_•ìd
 && !
nway_advîti£
)

382 
	`show_basic_mii
(
skfd
, 
mii
->
phy_id
);

385 
	}
}

389 
	$w©ch_⁄e_xcvr
(
skfd
, *
i‚ame
, 
ödex
)

391 
mii_d©a
 *
mii
 = (mii_d©®*)&
i‰
.
i‰_d©a
;

392 
°©us
[
MAX_ETH
] = { 0, };

393 
now
;

396 
	`°∫˝y
(
i‰
.
i‰_«me
, 
i‚ame
, 
IFNAMSIZ
);

397 i‡(
	`io˘l
(
skfd
, 
SIOCGMIIPHY
, &
i‰
) < 0) {

398 i‡(
î∫o
 !
ENODEV
)

399 
	`Ârötf
(
°dîr
, "SIOCGMIIPHY on '%s' failed: %s\n",

400 
i‚ame
, 
	`°ªº‹
(
î∫o
));

403 
now
 = (
	`mdio_ªad
(
skfd
, 
MII_BMCR
) |

404 (
	`mdio_ªad
(
skfd
, 
MII_BMSR
) << 16));

405 i‡(
°©us
[
ödex
] && (°©us[ödex] !
now
))

406 
	`show_basic_mii
(
skfd
, 
mii
->
phy_id
);

407 
°©us
[
ödex
] = 
now
;

408 
	}
}

412 c⁄° *
	gußge
 =

428 
	$vîsi⁄
()

430 
	`Ârötf
(
°dîr
, "%s\n%s\n", 
Vîsi⁄
, 
RELEASE
);

431 
	`exô
(5);

432 
	}
}

435 
	$maö
(
¨gc
, **
¨gv
)

437 
i
, 
c
, 
ªt
, 
îrÊag
 = 0;

438 
s
[6];

439 
˘æ1000
 = 0;

441 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "A:F:p:ÃRvVw?", 
l⁄g›ts
, 0)Ë!
EOF
)

442 
c
) {

443 'A': 
nway_advîti£
 = 
	`∑r£_medü
(
›èrg
, &
˘æ1000
); ;

444 'F': 
fixed_•ìd
 = 
	`∑r£_medü
(
›èrg
, &
˘æ1000
); ;

445 'p': 
ovîride_phy
 = 
	`©oi
(
›èrg
); ;

446 'r': 
›t_ª°¨t
++; ;

447 'R': 
›t_ª£t
++; ;

448 'v': 
vîbo£
++; ;

449 'V': 
›t_vîsi⁄
++; ;

450 'w': 
›t_w©ch
++; ;

451 'l': 
›t_log
++; ;

452 '?': 
îrÊag
++;

455 i‡(
›t_w©ch
Ë
vîbo£
 = 0;

457 i‡((
nway_advîti£
 < 0Ë|| (
fixed_•ìd
 < 0))

460 i‡(
îrÊag
 || (
fixed_•ìd
 & (fixed_speed-1)) ||

461 (
fixed_•ìd
 && (
›t_ª°¨t
 || 
nway_advîti£
))) {

462 
	`Ârötf
(
°dîr
, 
ußge
, 
¨gv
[0]);

466 i‡(
›t_vîsi⁄
)

467 
	`vîsi⁄
();

470 i‡((
skfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
,0)) < 0) {

471 
	`≥º‹
("socket");

472 
	`exô
(-1);

475 i‡(
vîbo£
 > 1)

476 
	`¥ötf
("Usög SIOCGMIIPHY=0x%x\n", 
SIOCGMIIPHY
);

479 i‡(
›töd
 =
¨gc
) {

480 
ªt
 = 1;

481 
i
 = 0; i < 
MAX_ETH
; i++) {

482 
	`•rötf
(
s
, "ëh%d", 
i
);

483 
ªt
 &
	`do_⁄e_xcvr
(
skfd
, 
s
, 1);

485 i‡(
ªt
)

486 
	`Ârötf
(
°dîr
, "no MII interfaces found\n");

488 
ªt
 = 0;

489 
i
 = 
›töd
; i < 
¨gc
; i++) {

490 
ªt
 |
	`do_⁄e_xcvr
(
skfd
, 
¨gv
[
i
], 0);

494 i‡(
›t_w©ch
 && (
ªt
 == 0)) {

496 
	`¶ìp
(1);

497 i‡(
›töd
 =
¨gc
) {

498 
i
 = 0; i < 
MAX_ETH
; i++) {

499 
	`•rötf
(
s
, "ëh%d", 
i
);

500 
	`w©ch_⁄e_xcvr
(
skfd
, 
s
, 
i
);

503 
i
 = 
›töd
; i < 
¨gc
; i++)

504 
	`w©ch_⁄e_xcvr
(
skfd
, 
¨gv
[
i
], i-
›töd
);

509 
	`˛o£
(
skfd
);

510  
ªt
;

511 
	}
}

	@interface/net-tools/nameif.c

8 #i‚de‡
_GNU_SOURCE


9 
	#_GNU_SOURCE


	)

11 
	~<°dio.h
>

12 
	~<gë›t.h
>

13 
	~<sys/sy¶og.h
>

14 
	~<î∫o.h
>

15 
	~<°dlib.h
>

16 
	~<˘y≥.h
>

17 
	~<°rög.h
>

18 
	~<°d¨g.h
>

19 
	~<sys/sockë.h
>

20 
	~<sys/io˘l.h
>

21 
	~<√t/if.h
>

22 
	~<löux/sockios.h
>

23 
	~<î∫o.h
>

24 
	~"öé.h
"

26 c⁄° 
	gdeÁu…_c⁄f
[] = "/etc/mactab";

27 c⁄° *
	g‚ame
 = 
deÁu…_c⁄f
;

28 
	gu£_sy¶og
;

29 
	g˘l_sk
 = -1;

31 
	$îr
(*
msg
)

33 i‡(
u£_sy¶og
) {

34 
	`sy¶og
(
LOG_ERR
,"%s: %m", 
msg
);

36 
	`≥º‹
(
msg
);

38 
	`exô
(1);

39 
	}
}

41 
	$com∂aö
(*
fmt
, ...)

43 
va_li°
 
≠
;

44 
	`va_°¨t
(
≠
,
fmt
);

45 i‡(
u£_sy¶og
) {

46 
	`vsy¶og
(
LOG_ERR
,
fmt
,
≠
);

48 
	`vÂrötf
(
°dîr
,
fmt
,
≠
);

49 
	`Âutc
('\n',
°dîr
);

51 
	`va_íd
(
≠
);

52 
	`exô
(1);

53 
	}
}

55 
	$w¨nög
(*
fmt
, ...)

57 
va_li°
 
≠
;

58 
	`va_°¨t
(
≠
,
fmt
);

59 i‡(
u£_sy¶og
) {

60 
	`vsy¶og
(
LOG_ERR
,
fmt
,
≠
);

62 
	`vÂrötf
(
°dîr
,
fmt
,
≠
);

63 
	`Âutc
('\n',
°dîr
);

65 
	`va_íd
(
≠
);

66 
	}
}

68 
	$∑r£mac
(*
°r
, *
mac
)

70 *
s
;

71 (
s
 = 
	`°r£p
(&
°r
, ":")Ë!
NULL
) {

72 
byã
;

73 i‡(
	`ssˇnf
(
s
,"%x", &
byã
)!=1 || byte > 0xff)

75 *
mac
++ = 
byã
;

78 
	}
}

80 *
	$xmÆloc
(
sz
)

82 *
p
 = 
	`ˇŒoc
(
sz
,1);

83 i‡(!
p
Ë
î∫o
=
ENOMEM
, 
	`îr
("xmalloc");

84  
p
;

85 
	}
}

87 
	$›ísock
()

89 i‡(
˘l_sk
 < 0)

90 
˘l_sk
 = 
	`sockë
(
PF_INET
,
SOCK_DGRAM
,0);

91 
	}
}

93 #i‚de‡
i‰_√w«me


94 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_¶ave


	)

97 
	$£äame
(*
ﬁd«me
, *
√w«me
)

99 
i‰eq
 
i‰
;

100 
	`›ísock
();

101 
	`mem£t
(&
i‰
,0,(
i‰eq
));

102 
	`°r˝y
(
i‰
.
i‰_«me
, 
ﬁd«me
);

103 
	`°r˝y
(
i‰
.
i‰_√w«me
, 
√w«me
);

104  
	`io˘l
(
˘l_sk
, 
SIOCSIFNAME
, &
i‰
);

105 
	}
}

107 
	$gëmac
(*
«me
, *
mac
)

109 
r
;

110 
i‰eq
 
i‰
;

111 
	`›ísock
();

112 
	`mem£t
(&
i‰
,0,(
i‰eq
));

113 
	`°r˝y
(
i‰
.
i‰_«me
, 
«me
);

114 
r
 = 
	`io˘l
(
˘l_sk
, 
SIOCGIFHWADDR
, &
i‰
);

115 
	`mem˝y
(
mac
, 
i‰
.
i‰_hwaddr
.
ß_d©a
, 6);

116  
r
;

117 
	}
}

119 
	sch™ge
 {

120 
ch™ge
 *
	m√xt
;

121 
	mfound
;

122 
	mi‚ame
[
IFNAMSIZ
+1];

123 
	mmac
[6];

125 
ch™ge
 *
	g˛i°
;

127 
ch™ge
 *
	$lookupmac
(*
mac
)

129 
ch™ge
 *
ch
;

130 
ch
 = 
˛i°
;ch;ch = ch->
√xt
)

131 i‡(!
	`memcmp
(
ch
->
mac
, mac, 6))

132  
ch
;

133  
NULL
;

134 
	}
}

136 
	$addch™ge
(*
p
, 
ch™ge
 *
ch
, *
pos
)

138 i‡(
	`°rchr
(
ch
->
i‚ame
, ':'))

139 
	`w¨nög
(
	`_
("alias device %sát %sÖrobably hasÇo mac"),

140 
ch
->
i‚ame
, 
pos
);

141 i‡(
	`∑r£mac
(
p
,
ch
->
mac
) < 0)

142 
	`com∂aö
(
	`_
("ˇ¬ŸÖ¨£ MAC `%s'áà%s"), 
p
, 
pos
);

143 
ch
->
√xt
 = 
˛i°
;

144 
˛i°
 = 
ch
;

146 
	}
}

148 
	$ªadc⁄f
()

150 *
löe
;

151 
size_t
 
löñ
;

152 
löíum
;

153 
FILE
 *
ifh
;

154 *
p
;

155 
n
;

157 
ifh
 = 
	`f›í
(
‚ame
, "r");

158 i‡(!
ifh
)

159 
	`com∂aö
(
	`_
("›íög c⁄figuøti⁄ fûê%s: %s"),
‚ame
,
	`°ªº‹
(
î∫o
));

161 
löe
 = 
NULL
;

162 
löñ
 = 0;

163 
löíum
 = 1;

164 
	`gëdñim
(&
löe
, &
löñ
, '\n', 
ifh
) > 0) {

165 
ch™ge
 *
ch
 = 
	`xmÆloc
((change));

166 
pos
[20];

168 
	`•rötf
(
pos
, 
	`_
("löê%d"), 
löíum
);

170 i‡((
p
 = 
	`°rchr
(
löe
,'#')Ë!
NULL
)

171 *
p
 = '\0';

172 
p
 = 
löe
;

173 
	`is•a˚
(*
p
))

174 ++
p
;

175 i‡(*
p
 == '\0')

177 
n
 = 
	`°rc•n
(
p
, " \t");

178 i‡(
n
 > 
IFNAMSIZ
-1)

179 
	`com∂aö
(
	`_
("öãrÁ˚Çamêtoÿl⁄gáàlöê%d"), 
löe
);

180 
	`mem˝y
(
ch
->
i‚ame
, 
p
, 
n
);

181 
ch
->
i‚ame
[
n
] = 0;

182 
p
 +
n
;

183 
p
 +
	`°r•n
(p, " \t");

184 
n
 = 
	`°r•n
(
p
, "0123456789ABCDEFabcdef:");

185 
p
[
n
] = 0;

186 
	`addch™ge
(
p
, 
ch
, 
pos
);

187 
löíum
++;

189 
	`f˛o£
(
ifh
);

190 
	}
}

192 
›ti⁄
 
	gl›t
[] = {

193 {"sy¶og", 0, 
NULL
, 's' },

194 {"c⁄fig-fûe", 1, 
NULL
, 'c' },

195 {"hñp", 0, 
NULL
, '?' },

196 {
NULL
},

199 
	$ußge
()

201 
	`Ârötf
(
°dîr
, 
	`_
("usage:Çameif [-c configurationfile] [-s] {ifname macaddress}\n"));

202 
	`exô
(1);

203 
	}
}

205 
	$maö
(
ac
, **
av
)

207 
FILE
 *
ifh
;

208 *
p
;

209 
n
;

210 
löíum
;

211 *
löe
 = 
NULL
;

212 
size_t
 
löñ
 = 0;

215 
c
 = 
	`gë›t_l⁄g
(
ac
,
av
,"c:s",
l›t
,
NULL
);

216 i‡(
c
 == -1) ;

217 
c
) {

220 
	`ußge
();

222 
‚ame
 = 
›èrg
;

225 
u£_sy¶og
 = 1;

230 i‡(
u£_sy¶og
)

231 
	`›ílog
("«meif",0,
LOG_LOCAL0
);

233 
›töd
 < 
ac
) {

234 
ch™ge
 *
ch
 = 
	`xmÆloc
((change));

235 
pos
[30];

237 i‡((
ac
-
›töd
) & 1)

238 
	`ußge
();

239 i‡(
	`°æí
(
av
[
›töd
])+1>
IFNAMSIZ
)

240 
	`com∂aö
(
	`_
("öãrÁ˚Çamê`%s'Åoÿl⁄g"), 
av
[
›töd
]);

241 
	`°r˝y
(
ch
->
i‚ame
, 
av
[
›töd
]);

242 
›töd
++;

243 
	`•rötf
(
pos
,
	`_
("¨gumíà%d"),
›töd
);

244 
	`addch™ge
(
av
[
›töd
], 
ch
, 
pos
);

245 
›töd
++;

248 i‡(!
˛i°
 || 
‚ame
 !
deÁu…_c⁄f
)

249 
	`ªadc⁄f
();

251 
ifh
 = 
	`f›í
("/proc/net/dev", "r");

252 i‡(!
ifh
Ë
	`com∂aö
(
	`_
("›í o‡/¥oc/√t/dev: %s"), 
	`°ªº‹
(
î∫o
));

255 
löíum
 = 0;

256 
	`gëdñim
(&
löe
, &
löñ
, '\n', 
ifh
) > 0) {

257 
ch™ge
 *
ch
;

258 
mac
[6];

260 i‡(
löíum
++ < 2)

263 
p
 = 
löe
;

264 
	`is•a˚
(*
p
))

265 ++
p
;

266 
n
 = 
	`°rc•n
(
p
, ": \t");

267 
p
[
n
] = 0;

269 i‡(
n
 > 
IFNAMSIZ
-1)

270 
	`com∂aö
(
	`_
("öãrÁ˚Çamê`%s'Åoÿl⁄g"), 
p
);

272 i‡(
	`gëmac
(
p
, 
mac
) < 0)

275 
ch
 = 
	`lookupmac
(
mac
);

276 i‡(!
ch
)

279 
ch
->
found
 = 1;

280 i‡(
	`°rcmp
(
p
, 
ch
->
i‚ame
)) {

281 i‡(
	`£äame
(
p
, 
ch
->
i‚ame
) < 0)

282 
	`com∂aö
(
	`_
("cannot changeÇame of %sÅo %s: %s"),

283 
p
, 
ch
->
i‚ame
, 
	`°ªº‹
(
î∫o
));

286 
	`f˛o£
(
ifh
);

288 
˛i°
) {

289 
ch™ge
 *
ch
 = 
˛i°
;

290 
˛i°
 = cli°->
√xt
;

291 i‡(!
ch
->
found
)

292 
	`w¨nög
(
	`_
("öãrÁ˚ '%s'ÇŸ found"), 
ch
->
i‚ame
);

293 
	`‰ì
(
ch
);

296 i‡(
u£_sy¶og
)

297 
	`˛o£log
();

299 
	}
}

	@interface/net-tools/netstat.c

71 
	~<î∫o.h
>

72 
	~<°dio.h
>

73 
	~<°dlib.h
>

74 
	~<°rög.h
>

75 
	~<°rögs.h
>

76 
	~<uni°d.h
>

77 
	~<˘y≥.h
>

78 
	~<f˙é.h
>

79 
	~<√tdb.h
>

80 
	~<∑ths.h
>

81 
	~<pwd.h
>

82 
	~<gë›t.h
>

83 
	~<sys/∑øm.h
>

84 
	~<sys/sockë.h
>

85 
	~<¨∑/öë.h
>

86 
	~<√töë/ö.h
>

87 
	~<sys/io˘l.h
>

88 
	~<√t/if.h
>

89 
	~<dúít.h
>

91 
	~"√t-suµ‹t.h
"

92 
	~"∑th«mes.h
"

93 
	~"vîsi⁄.h
"

94 
	~"c⁄fig.h
"

95 
	~"öé.h
"

96 
	~"sockës.h
"

97 
	~"öãrÁ˚.h
"

98 
	~"utû.h
"

99 
	~"¥oc.h
"

101 
	#PROGNAME_WIDTH
 20

	)

103 #i‡!
deföed
(
s6_addr32
Ë&& deföed(
ö6a_w‹ds
)

104 
	#s6_addr32
 
ö6a_w‹ds


	)

108 
∑r£¢mp
(, , );

109 
öôèb
();

110 
∑r£¢mp6
(, , );

111 
öôèb6
();

114 
	mSS_FREE
 = 0,

115 
	mSS_UNCONNECTED
,

116 
	mSS_CONNECTING
,

117 
	mSS_CONNECTED
,

118 
	mSS_DISCONNECTING


119 } 
	tsockë_°©e
;

121 
	#SO_ACCEPTCON
 (1<<16Ë

	)

122 
	#SO_WAITDATA
 (1<<17Ë

	)

123 
	#SO_NOSPACE
 (1<<18Ë

	)

125 
	#DFLT_AF
 "öë"

	)

127 
	#FEATURE_NETSTAT


	)

128 
	~"lib/√t-„©uªs.h
"

130 *
	gRñó£
 = 
RELEASE
, *
	gVîsi⁄
 = "√t°© 1.42 (2001-04-15)", *
	gSig«tuª
 = "Fred Baumgarten, Alan Cox, Bernd Eckenfels, Phil Blundell, Tuan Hoang, Brian Micekánd others";

133 
	#E_READ
 -1

	)

134 
	#E_IOCTL
 -3

	)

136 
	gÊag_öt
 = 0;

137 
	gÊag_rou
 = 0;

138 
	gÊag_mas
 = 0;

139 
	gÊag_°a
 = 0;

141 
	gÊag_Æl
 = 0;

142 
	gÊag_l°
 = 0;

143 
	gÊag_˙t
 = 0;

144 
	gÊag_deb
 = 0;

145 
	gÊag_nŸ
 = 0;

146 
	gÊag_cf
 = 0;

147 
	gÊag_›t
 = 0;

148 
	gÊag_øw
 = 0;

149 
	gÊag_t˝
 = 0;

150 
	gÊag_s˘p
= 0;

151 
	gÊag_udp
 = 0;

152 
	gÊag_ud∂ôe
 = 0;

153 
	gÊag_igmp
= 0;

154 
	gÊag_rom
 = 0;

155 
	gÊag_exp
 = 1;

156 
	gÊag_wide
= 0;

157 
	gÊag_¥g
 = 0;

158 
	gÊag_¨g
 = 0;

159 
	gÊag_vî
 = 0;

161 
FILE
 *
	g¥ocöfo
;

163 
	#INFO_GUTS1
(
fûe
,
«me
,
¥oc
,
¥Ÿ
) \

164 
¥ocöfo
 = 
	`¥oc_f›í
((
fûe
)); \

165 i‡(
¥ocöfo
 =
NULL
) { \

166 i‡(
î∫o
 !
ENOENT
) { \

167 
	`≥º‹
((
fûe
)); \

170 i‡(
Êag_¨g
 || 
Êag_vî
) \

171 
	`ESYSNOT
("√t°©", (
«me
)); \

172 i‡(
Êag_¨g
) \

173 
rc
 = 1; \

176 i‡(
	`fgës
(
buf„r
, (buf„r), 
¥ocöfo
)) \

177 (
¥oc
)(
 r
++, 
buf„r
,
¥Ÿ
); \

178 } !
	`„of
(
¥ocöfo
)); \

179 
	`f˛o£
(
¥ocöfo
); \

180 }

	)

182 #i‡
HAVE_AFINET6


183 
	#INFO_GUTS2
(
fûe
,
¥oc
,
¥Ÿ
) \

184 
 r
 = 0; \

185 
¥ocöfo
 = 
	`¥oc_f›í
((
fûe
)); \

186 i‡(
¥ocöfo
 !
NULL
) { \

188 i‡(
	`fgës
(
buf„r
, (buf„r), 
¥ocöfo
)) \

189 (
¥oc
)(
 r
++, 
buf„r
,
¥Ÿ
); \

190 } !
	`„of
(
¥ocöfo
)); \

191 
	`f˛o£
(
¥ocöfo
); \

192 }

	)

194 
	#INFO_GUTS2
(
fûe
,
¥oc
,
¥Ÿ
)

	)

197 
	#INFO_GUTS3
 \

198  
rc
;

	)

200 
	#INFO_GUTS6
(
fûe
,
fûe6
,
«me
,
¥oc
,
¥Ÿ4
,
¥Ÿ6
) \

201 
buf„r
[8192]; \

202 
rc
 = 0; \

203 
 r
 = 0; \

204 i‡(!
Êag_¨g
 || 
Êag_öë
) { \

205 
	`INFO_GUTS1
(
fûe
,
«me
,
¥oc
,
¥Ÿ4
) \

207 i‡(!
Êag_¨g
 || 
Êag_öë6
) { \

208 
	`INFO_GUTS2
(
fûe6
,
¥oc
,
¥Ÿ6
) \

210 
INFO_GUTS3


	)

212 
	#INFO_GUTS
(
fûe
,
«me
,
¥oc
,
¥Ÿ
) \

213 
buf„r
[8192]; \

214 
rc
 = 0; \

215 
 r
 = 0; \

216 
	`INFO_GUTS1
(
fûe
,
«me
,
¥oc
,
¥Ÿ
) \

217 
INFO_GUTS3


	)

219 
	#PROGNAME_WIDTHs
 
	`PROGNAME_WIDTH1
(
PROGNAME_WIDTH
)

	)

220 
	#PROGNAME_WIDTH1
(
s
Ë
	`PROGNAME_WIDTH2
(s)

	)

221 
	#PROGNAME_WIDTH2
(
s
Ë#s

	)

223 
	#PRG_HASH_SIZE
 211

	)

225 
	s¥g_node
 {

226 
¥g_node
 *
	m√xt
;

227 
	möode
;

228 
	m«me
[
PROGNAME_WIDTH
];

229 } *
	g¥g_hash
[
PRG_HASH_SIZE
];

231 
	g¥g_ˇche_lﬂded
 = 0;

233 
	#PRG_HASHIT
(
x
Ë((xË% 
PRG_HASH_SIZE
)

	)

235 
	#PROGNAME_BANNER
 "PID/ProgømÇame"

	)

237 
	#¥öt_¥og«me_b™√r
(Ëdÿ{ i‡(
Êag_¥g
Ë
	`¥ötf
(" %-" 
PROGNAME_WIDTHs
 "s",
PROGNAME_BANNER
); } 0)

	)

239 
	#PRG_LOCAL_ADDRESS
 "loˇl_addªss"

	)

240 
	#PRG_INODE
 "öode"

	)

241 
	#PRG_SOCKET_PFX
 "sockë:["

	)

242 
	#PRG_SOCKET_PFXl
 (
	`°æí
(
PRG_SOCKET_PFX
))

	)

243 
	#PRG_SOCKET_PFX2
 "[0000]:"

	)

244 
	#PRG_SOCKET_PFX2l
 (
	`°æí
(
PRG_SOCKET_PFX2
))

	)

247 #i‚de‡
LINE_MAX


248 
	#LINE_MAX
 4096

	)

251 
	#PATH_PROC
 "/¥oc"

	)

252 
	#PATH_FD_SUFF
 "fd"

	)

253 
	#PATH_FD_SUFFl
 
	`°æí
(
PATH_FD_SUFF
)

	)

254 
	#PATH_PROC_X_FD
 
PATH_PROC
 "/%s/" 
PATH_FD_SUFF


	)

255 
	#PATH_CMDLINE
 "cmdlöe"

	)

256 
	#PATH_CMDLINEl
 
	`°æí
(
PATH_CMDLINE
)

	)

258 
	$¥g_ˇche_add
(
öode
, *
«me
)

260 
hi
 = 
	`PRG_HASHIT
(
öode
);

261 
¥g_node
 **
≤p
,*
≤
;

263 
¥g_ˇche_lﬂded
=2;

264 
≤p
=
¥g_hash
+
hi
;(
≤
=*≤p);≤p=&≤->
√xt
) {

265 i‡(
≤
->
öode
==inode) {

271 i‡(!(*
≤p
=
	`mÆloc
((**pnp))))

273 
≤
=*
≤p
;

274 
≤
->
√xt
=
NULL
;

275 
≤
->
öode
=inode;

276 i‡(
	`°æí
(
«me
)>(
≤
->name)-1)

277 
«me
[(
≤
->name)-1]='\0';

278 
	`°r˝y
(
≤
->
«me
,name);

279 
	}
}

281 c⁄° *
	$¥g_ˇche_gë
(
öode
)

283 
hi
=
	`PRG_HASHIT
(
öode
);

284 
¥g_node
 *
≤
;

286 
≤
=
¥g_hash
[
hi
];≤;≤ın->
√xt
)

287 i‡(
≤
->
öode
==öodeË’n->
«me
);

289 
	}
}

291 
	$¥g_ˇche_˛ór
()

293 
¥g_node
 **
≤p
,*
≤
;

295 i‡(
¥g_ˇche_lﬂded
 == 2)

296 
≤p
=
¥g_hash
;≤p<¥g_hash+
PRG_HASH_SIZE
;pnp++)

297 (
≤
=*
≤p
)) {

298 *
≤p
=
≤
->
√xt
;

299 
	`‰ì
(
≤
);

301 
¥g_ˇche_lﬂded
=0;

302 
	}
}

304 
	$waô_c⁄töous
()

306 
	`fÊush
(
°dout
);

307 
	`¶ìp
(1);

308 
	}
}

310 
	$exåa˘_ty≥_1_sockë_öode
(c⁄° 
 ame
[], * 
öode_p
) {

316 i‡(
	`°æí
(
 ame
Ë< 
PRG_SOCKET_PFXl
+3) (-1);

318 i‡(
	`memcmp
(
 ame
, 
PRG_SOCKET_PFX
, 
PRG_SOCKET_PFXl
)) (-1);

319 i‡(
 ame
[
	`°æí
(lname)-1] != ']') (-1);

322 
öode_°r
[
	`°æí
(
 ame
 + 1)];

323 c⁄° 
öode_°r_Àn
 = 
	`°æí
(
 ame
Ë- 
PRG_SOCKET_PFXl
 - 1;

324 *
£º
;

326 
	`°∫˝y
(
öode_°r
, 
 ame
+
PRG_SOCKET_PFXl
, 
öode_°r_Àn
);

327 
öode_°r
[
öode_°r_Àn
] = '\0';

328 *
öode_p
 = 
	`°πﬁ
(
öode_°r
,&
£º
,0);

329 i‡(!
£º
 || *£º || *
öode_p
 < 0 || *öode_∞>
LONG_MAX
)

333 
	}
}

337 
	$exåa˘_ty≥_2_sockë_öode
(c⁄° 
 ame
[], * 
öode_p
) {

343 i‡(
	`°æí
(
 ame
Ë< 
PRG_SOCKET_PFX2l
+1) (-1);

344 i‡(
	`memcmp
(
 ame
, 
PRG_SOCKET_PFX2
, 
PRG_SOCKET_PFX2l
)) (-1);

347 *
£º
;

349 *
öode_p
=
	`°πﬁ
(
 ame
 + 
PRG_SOCKET_PFX2l
,&
£º
,0);

350 i‡(!
£º
 || *£º || *
öode_p
 < 0 || *öode_∞>
LONG_MAX
)

354 
	}
}

359 
	$¥g_ˇche_lﬂd
()

361 
löe
[
LINE_MAX
],
óc˚s
=0;

362 
¥ocfdÀn
,
fd
,
cmdŒí
,
 amñí
;

363 
 ame
[30],
cmdlbuf
[512],
föbuf
[
PROGNAME_WIDTH
];

364 
öode
;

365 c⁄° *
cs
,*
cmdÕ
;

366 
DIR
 *
dú¥oc
=
NULL
,*
dúfd
=NULL;

367 
dúít
 *
dúïroc
,*
dúefd
;

369 i‡(
¥g_ˇche_lﬂded
 || !
Êag_¥g
) ;

370 
¥g_ˇche_lﬂded
=1;

371 
cmdlbuf
[(cmdlbuf)-1]='\0';

372 i‡(!(
dú¥oc
=
	`›ídú
(
PATH_PROC
))Ë
Áû
;

373 
î∫o
=0,
dúïroc
=
	`ªaddú
(
dú¥oc
)) {

374 
cs
=
dúïroc
->
d_«me
;*cs;cs++)

375 i‡(!
	`isdigô
(*
cs
))

377 i‡(*
cs
)

379 
¥ocfdÀn
=
	`¢¥ötf
(
löe
,÷öe),
PATH_PROC_X_FD
,
dúïroc
->
d_«me
);

380 i‡(
¥ocfdÀn
<=0 ||ÖrocfdÀn>=(
löe
)-5)

382 
î∫o
=0;

383 
dúfd
=
	`›ídú
(
löe
);

384 i‡(! 
dúfd
) {

385 i‡(
î∫o
==
EACCES
)

386 
óc˚s
=1;

389 
löe
[
¥ocfdÀn
] = '/';

390 
cmdÕ
 = 
NULL
;

391 (
dúefd
 = 
	`ªaddú
(
dúfd
))) {

393 i‡(!
	`isdigô
(
dúefd
->
d_«me
[0]))

395 i‡(
¥ocfdÀn
+1+
	`°æí
(
dúefd
->
d_«me
)+1>(
löe
))

397 
	`mem˝y
(
löe
 + 
¥ocfdÀn
 - 
PATH_FD_SUFFl
, 
PATH_FD_SUFF
 "/",

398 
PATH_FD_SUFFl
+1);

399 
	`°r˝y
(
löe
 + 
¥ocfdÀn
 + 1, 
dúefd
->
d_«me
);

400 
 amñí
=
	`ªadlök
(
löe
,
 ame
,(lname)-1);

401 
 ame
[
 amñí
] = '\0';

403 i‡(
	`exåa˘_ty≥_1_sockë_öode
(
 ame
, &
öode
) < 0)

404 i‡(
	`exåa˘_ty≥_2_sockë_öode
(
 ame
, &
öode
) < 0)

407 i‡(!
cmdÕ
) {

408 i‡(
¥ocfdÀn
 - 
PATH_FD_SUFFl
 + 
PATH_CMDLINEl
 >=

409 (
löe
) - 5)

411 
	`°r˝y
(
löe
 + 
¥ocfdÀn
-
PATH_FD_SUFFl
, 
PATH_CMDLINE
);

412 
fd
 = 
	`›í
(
löe
, 
O_RDONLY
);

413 i‡(
fd
 < 0)

415 
cmdŒí
 = 
	`ªad
(
fd
, 
cmdlbuf
, (cmdlbuf) - 1);

416 i‡(
	`˛o£
(
fd
))

418 i‡(
cmdŒí
 == -1)

420 i‡(
cmdŒí
 < (
cmdlbuf
) - 1)

421 
cmdlbuf
[
cmdŒí
]='\0';

422 i‡((
cmdÕ
 = 
	`°ºchr
(
cmdlbuf
, '/')))

423 
cmdÕ
++;

425 
cmdÕ
 = 
cmdlbuf
;

428 
	`¢¥ötf
(
föbuf
, (föbuf), "%s/%s", 
dúïroc
->
d_«me
, 
cmdÕ
);

429 
	`¥g_ˇche_add
(
öode
, 
föbuf
);

431 
	`˛o£dú
(
dúfd
);

432 
dúfd
 = 
NULL
;

434 i‡(
dú¥oc
)

435 
	`˛o£dú
(
dú¥oc
);

436 i‡(
dúfd
)

437 
	`˛o£dú
(
dúfd
);

438 i‡(!
óc˚s
)

440 i‡(
¥g_ˇche_lﬂded
 == 1) {

441 
Áû
:

442 
	`Ârötf
(
°dîr
,
	`_
("(No info could beÑead for \"-p\": geteuid()=%d but you should beÑoot.)\n"),

443 
	`gëeuid
());

446 
	`Ârötf
(
°dîr
, 
	`_
("(NotállÖrocesses could be identified,Çon-ownedÖrocess info\n"

448 
	}
}

450 #i‡
HAVE_AFNETROM


451 c⁄° *
	g√åom_°©e
[] =

453 
N_
("LISTENING"),

454 
N_
("CONN SENT"),

455 
N_
("DISC SENT"),

456 
N_
("ESTABLISHED")

459 
	$√åom_öfo
()

461 
FILE
 *
f
;

462 
buf„r
[256], 
dev
[16];

463 
°
, 
vs
, 
vr
, 
£ndq
, 
ªcvq
, 
ªt
;

465 
f
 = 
	`¥oc_f›í
(
_PATH_PROCNET_NR
);

466 i‡(
f
 =
NULL
) {

467 i‡(
î∫o
 !
ENOENT
) {

468 
	`≥º‹
(
_PATH_PROCNET_NR
);

471 i‡(
Êag_¨g
 || 
Êag_vî
)

472 
	`ESYSNOT
("netstat", "AF NETROM");

473 i‡(
Êag_¨g
)

478 
	`¥ötf
(
	`_
("Active NET/ROM sockets\n"));

479 
	`¥ötf
(
	`_
("User Dest Source Device State Vr/Vs Send-Q Recv-Q\n"));

480 
	`fgës
(
buf„r
, 256, 
f
);

482 
	`fgës
(
buf„r
, 256, 
f
)) {

483 
buf„r
[9] = 0;

484 
buf„r
[19] = 0;

485 
buf„r
[29] = 0;

486 
ªt
 = 
	`ssˇnf
(
buf„r
 + 30, "%s %*x/%*x %*x/%*x %d %d %d %*d %*d/%*d %*d/%*d %*d/%*d %*d/%*d %*d/%*d %*d %d %d %*d",

487 
dev
, &
°
, &
vs
, &
vr
, &
£ndq
, &
ªcvq
);

488 i‡(
ªt
 != 6) {

489 
	`¥ötf
(
	`_
("ProbÀmÑódög d©®‰om %s\n"), 
_PATH_PROCNET_NR
);

492 
	`¥ötf
("%-9s %-9s %-9s %-6s %-11s %03d/%03d %-6d %-6d\n",

493 
buf„r
, buffer + 10, buffer + 20,

494 
dev
,

495 
	`_
(
√åom_°©e
[
°
]),

496 
vr
, 
vs
, 
£ndq
, 
ªcvq
);

498 
	`f˛o£
(
f
);

500 
	}
}

505 
	mTCP_ESTABLISHED
 = 1,

506 
	mTCP_SYN_SENT
,

507 
	mTCP_SYN_RECV
,

508 
	mTCP_FIN_WAIT1
,

509 
	mTCP_FIN_WAIT2
,

510 
	mTCP_TIME_WAIT
,

511 
	mTCP_CLOSE
,

512 
	mTCP_CLOSE_WAIT
,

513 
	mTCP_LAST_ACK
,

514 
	mTCP_LISTEN
,

515 
	mTCP_CLOSING


518 #i‡
HAVE_AFINET
 || 
HAVE_AFINET6


520 c⁄° *
	gt˝_°©e
[] =

523 
N_
("ESTABLISHED"),

524 
N_
("SYN_SENT"),

525 
N_
("SYN_RECV"),

526 
N_
("FIN_WAIT1"),

527 
N_
("FIN_WAIT2"),

528 
N_
("TIME_WAIT"),

529 
N_
("CLOSE"),

530 
N_
("CLOSE_WAIT"),

531 
N_
("LAST_ACK"),

532 
N_
("LISTEN"),

533 
N_
("CLOSING")

536 
	$föish_this_⁄e
(
uid
, 
öode
, c⁄° *
timîs
)

538 
∑sswd
 *
pw
;

540 i‡(
Êag_exp
 > 1) {

541 i‡(!(
Êag_nŸ
 & 
FLAG_NUM_USER
Ë&& ((
pw
 = 
	`gëpwuid
(
uid
)Ë!
NULL
))

542 
	`¥ötf
(" %-10†", 
pw
->
pw_«me
);

544 
	`¥ötf
(" %-10d ", 
uid
);

545 
	`¥ötf
("%-10lu",
öode
);

547 i‡(
Êag_¥g
)

548 
	`¥ötf
(" %-" 
PROGNAME_WIDTHs
 "s",
	`¥g_ˇche_gë
(
öode
));

549 i‡(
Êag_›t
)

550 
	`¥ötf
(" %s", 
timîs
);

551 
	`putch¨
('\n');

552 
	}
}

554 
	$igmp_do_⁄e
(
 r
, c⁄° *
löe
,c⁄° *
¥Ÿ
)

556 
mˇ°_addr
[128];

557 #i‡
HAVE_AFINET6


558 
sockaddr_ö6
 
mˇ°addr
;

559 
addr6
[
INET6_ADDRSTRLEN
];

560 
ö6_addr
 
ö6
;

561 
a·y≥
 
öë6_a·y≥
;

563 
sockaddr_ö
 
mˇ°addr
;

565 
a·y≥
 *
≠
;

566 
idx_Êag
 = 0;

567 
igmp6_Êag
 = 0;

568 
devi˚
[16];

569 
num
, 
idx
, 
ªf˙t
;

571 i‡(
 r
 == 0) {

574 i‡–
	`°r°r
–
löe
, "Devi˚" ) =
NULL
 ) {

575 
igmp6_Êag
 = 1;

580 i‡–
	`°∫cmp
–
löe
, "Idx", 
	`°æí
("Idx") ) == 0 )

581 
idx_Êag
 = 1;

583 
idx_Êag
 = 0;

588 i‡(
igmp6_Êag
) {

589 #i‡
HAVE_AFINET6


590 
num
 = 
	`ssˇnf
–
löe
, "%d %15†%64[0-9A-Fa-f] %d", &
idx
, 
devi˚
, 
mˇ°_addr
, &
ªf˙t
 );

591 i‡(
num
 == 4) {

593 
	`ssˇnf
(
mˇ°_addr
, "%08X%08X%08X%08X",

594 &
ö6
.
s6_addr32
[0], &in6.s6_addr32[1],

595 &
ö6
.
s6_addr32
[2], &in6.s6_addr32[3]);

596 
ö6
.
s6_addr32
[0] = 
	`ht⁄l
(in6.s6_addr32[0]);

597 
ö6
.
s6_addr32
[1] = 
	`ht⁄l
(in6.s6_addr32[1]);

598 
ö6
.
s6_addr32
[2] = 
	`ht⁄l
(in6.s6_addr32[2]);

599 
ö6
.
s6_addr32
[3] = 
	`ht⁄l
(in6.s6_addr32[3]);

600 
	`öë_¡›
(
AF_INET6
, &
ö6
, 
addr6
, (addr6));

601 
öë6_a·y≥
.
	`öput
(1, 
addr6
, (
sockaddr
 *Ë&
mˇ°addr
);

602 
mˇ°addr
.
sö6_Ámûy
 = 
AF_INET6
;

604 
	`Ârötf
(
°dîr
, 
	`_
("w¨nög, gŸ bogu†igmp6Üöê%d.\n"), 
 r
);

608 i‡((
≠
 = 
	`gë_a‚ty≥
(((
sockaddr
 *Ë&
mˇ°addr
)->
ß_Ámûy
)Ë=
NULL
) {

609 
	`Ârötf
(
°dîr
, 
	`_
("netstat: unsupportedáddress family %d !\n"),

610 ((
sockaddr
 *Ë&
mˇ°addr
)->
ß_Ámûy
);

613 
	`ß„_°∫˝y
(
mˇ°_addr
, 
≠
->
	`•röt
((
sockaddr
 *Ë&
mˇ°addr
,

614 
Êag_nŸ
), (
mˇ°_addr
));

615 
	`¥ötf
("%-15†%-6d %s\n", 
devi˚
, 
ªf˙t
, 
mˇ°_addr
);

618 #i‡
HAVE_AFINET


619 i‡(
löe
[0] != '\t') {

620 i‡(
idx_Êag
) {

621 i‡((
num
 = 
	`ssˇnf
–
löe
, "%d\t%10c", &
idx
, 
devi˚
)) < 2) {

622 
	`Ârötf
(
°dîr
, 
	`_
("w¨nög, gŸ bogu†igm∞löê%d.\n"), 
 r
);

626 i‡–(
num
 = 
	`ssˇnf
–
löe
, "%10c", 
devi˚
 )) < 1 ) {

627 
	`Ârötf
(
°dîr
, 
	`_
("w¨nög, gŸ bogu†igm∞löê%d.\n"), 
 r
);

631 
devi˚
[10] = '\0';

633 } i‡–
löe
[0] == '\t' ) {

634 i‡–(
num
 = 
	`ssˇnf
(
löe
, "\t%8[0-9A-Fa-f] %d", 
mˇ°_addr
, &
ªf˙t
)) < 2 ) {

635 
	`Ârötf
(
°dîr
, 
	`_
("w¨nög, gŸ bogu†igm∞löê%d.\n"), 
 r
);

638 
	`ssˇnf
–
mˇ°_addr
, "%X",

639 &((
sockaddr_ö
 *Ë&
mˇ°addr
)->
sö_addr
.
s_addr
 );

640 ((
sockaddr
 *Ë&
mˇ°addr
)->
ß_Ámûy
 = 
AF_INET
;

642 
	`Ârötf
(
°dîr
, 
	`_
("w¨nög, gŸ bogu†igm∞löê%d.\n"), 
 r
);

646 i‡((
≠
 = 
	`gë_a‚ty≥
(((
sockaddr
 *Ë&
mˇ°addr
)->
ß_Ámûy
)Ë=
NULL
) {

647 
	`Ârötf
(
°dîr
, 
	`_
("netstat: unsupportedáddress family %d !\n"),

648 ((
sockaddr
 *Ë&
mˇ°addr
)->
ß_Ámûy
);

651 
	`ß„_°∫˝y
(
mˇ°_addr
, 
≠
->
	`•röt
((
sockaddr
 *Ë&
mˇ°addr
,

652 
Êag_nŸ
), (
mˇ°_addr
));

653 
	`¥ötf
("%-15†%-6d %s\n", 
devi˚
, 
ªf˙t
, 
mˇ°_addr
 );

656 
	}
}

658 #i‡
HAVE_AFX25


659 
	$x25_öfo
()

661 
FILE
 *
f
=
	`¥oc_f›í
(
_PATH_PROCNET_X25
);

662 
buf„r
[256],
dev
[16];

663 
°
,
vs
,
vr
,
£ndq
,
ªcvq
,
lci
;

664 *
x25_°©e
[5]=

672 if(!(
f
=
	`¥oc_f›í
(
_PATH_PROCNET_X25
)))

674 i‡(
î∫o
 !
ENOENT
) {

675 
	`≥º‹
(
_PATH_PROCNET_X25
);

678 i‡(
Êag_¨g
 || 
Êag_vî
)

679 
	`ESYSNOT
("netstat","AF X25");

680 i‡(
Êag_¨g
)

685 
	`¥ötf
–
	`_
("Active X.25 sockets\n"));

687 
	`¥ötf
–
	`_
("Dest Source Device LCI State Vr/Vs Send-Q Recv-Q\n"));

688 
	`fgës
(
buf„r
,256,
f
);

689 
	`fgës
(
buf„r
,256,
f
))

691 
buf„r
[10]=0;

692 
buf„r
[20]=0;

693 
	`ssˇnf
(
buf„r
+22,"%s %d %d %d %d %*d %*d %*d %*d %*d %*d %d %d %*d",

694 
dev
,&
lci
,&
°
,&
vs
,&
vr
,&
£ndq
,&
ªcvq
);

695 i‡(!(
Êag_Æl
 || 
lci
))

697 
	`¥ötf
("%-15s %-15s %-7s %-3d %-11s %02d/%02d %-6d %-6d\n",

698 
buf„r
,buffer+11,

699 
dev
,

700 
lci
,

701 
x25_°©e
[
°
],

702 
vr
,
vs
,
£ndq
,
ªcvq
);

704 
	`f˛o£
(
f
);

706 
	}
}

709 
	$igmp_öfo
()

711 
	`INFO_GUTS6
(
_PATH_PROCNET_IGMP
, 
_PATH_PROCNET_IGMP6
, "AF INET (igmp)",

712 
igmp_do_⁄e
, "igmp", "igmp6");

713 
	}
}

715 
	$ù_∑r£_dŸs
(
uöt32_t
 *
addr
, c⁄° *
§c
) {

716 
a
, 
b
, 
c
, 
d
;

717 
ªt
 = 4-
	`ssˇnf
(
§c
, "%u.%u.%u.%u", &
a
, &
b
, &
c
, &
d
);

718 *
addr
 = 
	`ht⁄l
((
a
 << 24)|(
b
 << 16)|(
c
 << 8)|
d
);

719  
ªt
;

720 
	}
}

722 
	$¥öt_ù_£rvi˚
(
sockaddr_ö
 *
addr
, c⁄° *
¥Ÿ«me
,

723 *
buf
, 
size
) {

724 
a·y≥
 *
≠
;

726 if(
size
 == 0) ;

729 if((
≠
 = 
	`gë_a‚ty≥
(
addr
->
sö_Ámûy
)Ë=
NULL
) {

730 
	`Ârötf
(
°dîr
, 
	`_
("netstat: unsupportedáddress family %d !\n"),

731 
addr
->
sö_Ámûy
);

734 
	`ß„_°∫˝y
(
buf
, 
≠
->
	`•röt
((
sockaddr
*)
addr
, 
Êag_nŸ
), 
size
);

737 if(
Êag_Æl
 || (
Êag_l°
 && !
addr
->
sö_p‹t
) || (!flag_lst &&áddr->sin_port)) {

738 
bfs
[32];

740 
	`¢¥ötf
(
bfs
, (bfs), "%s",

741 
	`gë_¢ame
(
addr
->
sö_p‹t
, (*)
¥Ÿ«me
, 
Êag_nŸ
 & 
FLAG_NUM_PORT
));

745 c⁄° 
buÊ
 = 
	`°æí
(
buf
);

746 c⁄° 
bf¶
 = 
	`°æí
(
bfs
);

748 if(
buÊ
+
bf¶
+2 > 
size
) {

749 c⁄° 
hÆf
 = (
size
-2)>>1;

750 if(
buÊ
 > 
hÆf
) {

751 if(
bf¶
 > 
hÆf
) {

752 
buf
[
size
-2-
hÆf
] = '\0';

753 
bfs
[
hÆf
+1] = '\0';

755 
buf
[
size
-2-
bf¶
] = '\0';

757 
bfs
[
size
-2-
buÊ
] = '\0';

760 
	`°rˇt
(
buf
, ":");

761 
	`°rˇt
(
buf
, 
bfs
);

763 
	}
}

766 
	$s˘p_do_ït
(
 r
, c⁄° *
löe
, c⁄° *
¥Ÿ
)

768 
sockaddr_ö
 
œddr
, 
øddr
;

769 
uid
, 
öode
;

771 
l_addr
[23], 
r_addr
[23];

775 
Õ‹t
;

776 
©e
;

778 if(
 r
 == 0) ;

779 if(
	`ssˇnf
(
löe
, "%*X %*X %*u %*u %*u %u %u %u %n",

780 &
Õ‹t
, &
uid
, &
öode
, &
©e
Ë< 3Ë
îr
;

783 if(
	`ù_∑r£_dŸs
(&
œddr
.
sö_addr
.
s_addr
, 
löe
+
©e
)Ë
îr
;

784 
øddr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(0);

785 
œddr
.
sö_Ámûy
 = 
øddr
.sö_Ámûy = 
AF_INET
;

786 
œddr
.
sö_p‹t
 = 
	`ht⁄s
(
Õ‹t
);

787 
øddr
.
sö_p‹t
 = 
	`ht⁄s
(0);

791 
	`¥öt_ù_£rvi˚
(&
œddr
, 
¥Ÿ
, 
l_addr
, (l_addr));

792 
	`¥öt_ù_£rvi˚
(&
øddr
, 
¥Ÿ
, 
r_addr
, (r_addr));

795 
	`¥ötf
("%-4s %6d %6d %-*s %-*s %-11s",

796 
¥Ÿ
, 0, 0,

797 ()
	`√tmax
(23,
	`°æí
(
l_addr
)),Ü_addr,

798 ()
	`√tmax
(23,
	`°æí
(
r_addr
)),Ñ_addr,

799 
	`_
(
t˝_°©e
[
TCP_LISTEN
]));

800 
	`föish_this_⁄e
(
uid
, 
öode
, "");

802 
îr
:

803 
	`Ârötf
(
°dîr
, "SCTPÉº‹ i¿löe: %d\n", 
 r
);

804 
	}
}

807 
	$s˘p_do_assoc
(
 r
, c⁄° *
löe
, c⁄° *
¥Ÿ
)

809 
sockaddr_ö
 
œddr
, 
øddr
;

810 
rxq
, 
txq
;

811 
uid
, 
öode
;

813 
l_addr
[23], 
r_addr
[23];

817 
Õ‹t
, 
Ω‹t
;

818 
©e
;

819 c⁄° *
addr
;

821 if(
 r
 == 0) ;

822 if(
	`ssˇnf
(
löe
, "%*X %*X %*u %*u %*u %*u %*u %lu %lu %u %u %u %u %n",

823 &
txq
, &
rxq
, &
uid
, &
öode
, &
Õ‹t
, &
Ω‹t
, &
©e
Ë< 6Ë
îr
;

826 
addr
 = 
	`°rchr
(
löe
+
©e
, '*');

827 if(
addr
 =0Ë
îr
;

828 if(
	`ù_∑r£_dŸs
(&
œddr
.
sö_addr
.
s_addr
, ++
addr
)Ë
îr
;

829 
addr
 = 
	`°rchr
(addr, '*');

830 if(
addr
 =0Ë
îr
;

831 if(
	`ù_∑r£_dŸs
(&
øddr
.
sö_addr
.
s_addr
, ++
addr
)Ë
îr
;

834 
œddr
.
sö_Ámûy
 = 
øddr
.sö_Ámûy = 
AF_INET
;

835 
œddr
.
sö_p‹t
 = 
	`ht⁄s
(
Õ‹t
);

836 
øddr
.
sö_p‹t
 = 
	`ht⁄s
(
Ω‹t
);

840 
	`¥öt_ù_£rvi˚
(&
œddr
, 
¥Ÿ
, 
l_addr
, (l_addr));

841 
	`¥öt_ù_£rvi˚
(&
øddr
, 
¥Ÿ
, 
r_addr
, (r_addr));

844 
	`¥ötf
("%-4s %6ld %6ld %-*s %-*s %-11s",

845 
¥Ÿ
, 
rxq
, 
txq
,

846 ()
	`√tmax
(23,
	`°æí
(
l_addr
)),Ü_addr,

847 ()
	`√tmax
(23,
	`°æí
(
r_addr
)),Ñ_addr,

848 
	`_
(
t˝_°©e
[
TCP_ESTABLISHED
]));

849 
	`föish_this_⁄e
(
uid
, 
öode
, "");

851 
îr
:

852 
	`Ârötf
(
°dîr
, "SCTPÉº‹ i¿löe: %d\n", 
 r
);

853 
	}
}

855 
	$s˘p_öfo_ïts
() {

856 
	`INFO_GUTS6
(
_PATH_PROCNET_SCTPEPTS
, 
_PATH_PROCNET_SCTP6EPTS
, "AF INET (sctp)",

857 
s˘p_do_ït
, "sctp", "sctp6");

858 
	}
}

860 
	$s˘p_öfo_assocs
() {

861 
	`INFO_GUTS6
(
_PATH_PROCNET_SCTPASSOCS
, 
_PATH_PROCNET_SCTP6ASSOCS
, "AF INET (sctp)",

862 
s˘p_do_assoc
, "sctp", "sctp6");

863 
	}
}

865 
	$s˘p_öfo
() {

866 
ªs
;

867 
ªs
 = 
	`s˘p_öfo_ïts
();

868 if(
ªs
) Ñes;

869  
	`s˘p_öfo_assocs
();

870 
	}
}

872 
	$t˝_do_⁄e
(
 r
, c⁄° *
löe
, c⁄° *
¥Ÿ
)

874 
rxq
, 
txq
, 
time_Àn
, 
ªå
, 
öode
;

875 
num
, 
loˇl_p‹t
, 
ªm_p‹t
, 
d
, 
°©e
, 
uid
, 
timî_run
, 
timeout
;

876 
ªm_addr
[128], 
loˇl_addr
[128], 
timîs
[64], 
buf„r
[1024], 
m‹e
[512];

877 
a·y≥
 *
≠
;

878 #i‡
HAVE_AFINET6


879 
sockaddr_ö6
 
loˇœddr
, 
ªmaddr
;

880 
addr6
[
INET6_ADDRSTRLEN
];

881 
ö6_addr
 
ö6
;

882 
a·y≥
 
öë6_a·y≥
;

884 
sockaddr_ö
 
loˇœddr
, 
ªmaddr
;

887 i‡(
 r
 == 0)

890 
num
 = 
	`ssˇnf
(
löe
,

892 &
d
, 
loˇl_addr
, &
loˇl_p‹t
, 
ªm_addr
, &
ªm_p‹t
, &
°©e
,

893 &
txq
, &
rxq
, &
timî_run
, &
time_Àn
, &
ªå
, &
uid
, &
timeout
, &
öode
, 
m‹e
);

895 i‡(!
Êag_Æl
 && ((
Êag_l°
 && 
ªm_p‹t
) || (!flag_lst && !rem_port)))

898 i‡(
	`°æí
(
loˇl_addr
) > 8) {

899 #i‡
HAVE_AFINET6


901 
	`ssˇnf
(
loˇl_addr
, "%08X%08X%08X%08X",

902 &
ö6
.
s6_addr32
[0], &in6.s6_addr32[1],

903 &
ö6
.
s6_addr32
[2], &in6.s6_addr32[3]);

904 
	`öë_¡›
(
AF_INET6
, &
ö6
, 
addr6
, (addr6));

905 
öë6_a·y≥
.
	`öput
(1, 
addr6
, (
sockaddr
 *Ë&
loˇœddr
);

906 
	`ssˇnf
(
ªm_addr
, "%08X%08X%08X%08X",

907 &
ö6
.
s6_addr32
[0], &in6.s6_addr32[1],

908 &
ö6
.
s6_addr32
[2], &in6.s6_addr32[3]);

909 
	`öë_¡›
(
AF_INET6
, &
ö6
, 
addr6
, (addr6));

910 
öë6_a·y≥
.
	`öput
(1, 
addr6
, (
sockaddr
 *Ë&
ªmaddr
);

911 
loˇœddr
.
sö6_Ámûy
 = 
AF_INET6
;

912 
ªmaddr
.
sö6_Ámûy
 = 
AF_INET6
;

915 
	`ssˇnf
(
loˇl_addr
, "%X",

916 &((
sockaddr_ö
 *Ë&
loˇœddr
)->
sö_addr
.
s_addr
);

917 
	`ssˇnf
(
ªm_addr
, "%X",

918 &((
sockaddr_ö
 *Ë&
ªmaddr
)->
sö_addr
.
s_addr
);

919 ((
sockaddr
 *Ë&
loˇœddr
)->
ß_Ámûy
 = 
AF_INET
;

920 ((
sockaddr
 *Ë&
ªmaddr
)->
ß_Ámûy
 = 
AF_INET
;

923 i‡(
num
 < 11) {

924 
	`Ârötf
(
°dîr
, 
	`_
("warning, got bogusÅcpÜine.\n"));

927 i‡((
≠
 = 
	`gë_a‚ty≥
(((
sockaddr
 *Ë&
loˇœddr
)->
ß_Ámûy
)Ë=
NULL
) {

928 
	`Ârötf
(
°dîr
, 
	`_
("netstat: unsupportedáddress family %d !\n"),

929 ((
sockaddr
 *Ë&
loˇœddr
)->
ß_Ámûy
);

932 
	`ß„_°∫˝y
(
loˇl_addr
, 
≠
->
	`•röt
((
sockaddr
 *Ë&
loˇœddr
,

933 
Êag_nŸ
), (
loˇl_addr
));

934 
	`ß„_°∫˝y
(
ªm_addr
, 
≠
->
	`•röt
((
sockaddr
 *Ë&
ªmaddr
, 
Êag_nŸ
),

935 (
ªm_addr
));

937 
	`¢¥ötf
(
buf„r
, (buffer), "%s",

938 
	`gë_¢ame
(
	`ht⁄s
(
loˇl_p‹t
), "tcp",

939 
Êag_nŸ
 & 
FLAG_NUM_PORT
));

941 i‡(!
Êag_wide
) {

942 i‡((
	`°æí
(
loˇl_addr
Ë+ såÀn(
buf„r
)) > 22)

943 
loˇl_addr
[22 - 
	`°æí
(
buf„r
)] = '\0';

946 
	`°rˇt
(
loˇl_addr
, ":");

947 
	`°rˇt
(
loˇl_addr
, 
buf„r
);

948 
	`¢¥ötf
(
buf„r
, (buffer), "%s",

949 
	`gë_¢ame
(
	`ht⁄s
(
ªm_p‹t
), "t˝", 
Êag_nŸ
 & 
FLAG_NUM_PORT
));

951 i‡(!
Êag_wide
) {

952 i‡((
	`°æí
(
ªm_addr
Ë+ såÀn(
buf„r
)) > 22)

953 
ªm_addr
[22 - 
	`°æí
(
buf„r
)] = '\0';

956 
	`°rˇt
(
ªm_addr
, ":");

957 
	`°rˇt
(
ªm_addr
, 
buf„r
);

958 
timîs
[0] = '\0';

960 i‡(
Êag_›t
)

961 
timî_run
) {

963 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("of‡(0.00/%ld/%d)"), 
ªå
, 
timeout
);

967 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("on (%2.2f/%ld/%d)"),

968 (Ë
time_Àn
 / 
HZ
, 
ªå
, 
timeout
);

972 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("keepalive (%2.2f/%ld/%d)"),

973 (Ë
time_Àn
 / 
HZ
, 
ªå
, 
timeout
);

977 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("timewait (%2.2f/%ld/%d)"),

978 (Ë
time_Àn
 / 
HZ
, 
ªå
, 
timeout
);

982 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("unkn-%d (%2.2f/%ld/%d)"),

983 
timî_run
, (Ë
time_Àn
 / 
HZ
, 
ªå
, 
timeout
);

986 
	`¥ötf
("%-4s %6ld %6ld %-*s %-*s %-11s",

987 
¥Ÿ
, 
rxq
, 
txq
, ()
	`√tmax
(23,
	`°æí
(
loˇl_addr
)),Üoˇl_addr, (Íëmax(23,°æí(
ªm_addr
)),Ñem_addr, 
	`_
(
t˝_°©e
[
°©e
]));

989 
	`föish_this_⁄e
(
uid
,
öode
,
timîs
);

990 
	}
}

992 
	$t˝_öfo
()

994 
	`INFO_GUTS6
(
_PATH_PROCNET_TCP
, 
_PATH_PROCNET_TCP6
, "AF INET (tcp)",

995 
t˝_do_⁄e
, "tcp", "tcp6");

996 
	}
}

998 
	$udp_do_⁄e
(
 r
, c⁄° *
löe
,c⁄° *
¥Ÿ
)

1000 
buf„r
[8192], 
loˇl_addr
[64], 
ªm_addr
[64];

1001 *
udp_°©e
, 
timîs
[64], 
m‹e
[512];

1002 
num
, 
loˇl_p‹t
, 
ªm_p‹t
, 
d
, 
°©e
, 
timî_run
, 
uid
, 
timeout
;

1003 #i‡
HAVE_AFINET6


1004 
sockaddr_ö6
 
loˇœddr
, 
ªmaddr
;

1005 
addr6
[
INET6_ADDRSTRLEN
];

1006 
ö6_addr
 
ö6
;

1007 
a·y≥
 
öë6_a·y≥
;

1009 
sockaddr_ö
 
loˇœddr
, 
ªmaddr
;

1011 
a·y≥
 *
≠
;

1012 
rxq
, 
txq
, 
time_Àn
, 
ªå
, 
öode
;

1014 i‡(
 r
 == 0)

1017 
m‹e
[0] = '\0';

1018 
num
 = 
	`ssˇnf
(
löe
,

1020 &
d
, 
loˇl_addr
, &
loˇl_p‹t
,

1021 
ªm_addr
, &
ªm_p‹t
, &
°©e
,

1022 &
txq
, &
rxq
, &
timî_run
, &
time_Àn
, &
ªå
, &
uid
, &
timeout
, &
öode
, 
m‹e
);

1024 i‡(
	`°æí
(
loˇl_addr
) > 8) {

1025 #i‡
HAVE_AFINET6


1026 
	`ssˇnf
(
loˇl_addr
, "%08X%08X%08X%08X",

1027 &
ö6
.
s6_addr32
[0], &in6.s6_addr32[1],

1028 &
ö6
.
s6_addr32
[2], &in6.s6_addr32[3]);

1029 
	`öë_¡›
(
AF_INET6
, &
ö6
, 
addr6
, (addr6));

1030 
öë6_a·y≥
.
	`öput
(1, 
addr6
, (
sockaddr
 *Ë&
loˇœddr
);

1031 
	`ssˇnf
(
ªm_addr
, "%08X%08X%08X%08X",

1032 &
ö6
.
s6_addr32
[0], &in6.s6_addr32[1],

1033 &
ö6
.
s6_addr32
[2], &in6.s6_addr32[3]);

1034 
	`öë_¡›
(
AF_INET6
, &
ö6
, 
addr6
, (addr6));

1035 
öë6_a·y≥
.
	`öput
(1, 
addr6
, (
sockaddr
 *Ë&
ªmaddr
);

1036 
loˇœddr
.
sö6_Ámûy
 = 
AF_INET6
;

1037 
ªmaddr
.
sö6_Ámûy
 = 
AF_INET6
;

1040 
	`ssˇnf
(
loˇl_addr
, "%X",

1041 &((
sockaddr_ö
 *Ë&
loˇœddr
)->
sö_addr
.
s_addr
);

1042 
	`ssˇnf
(
ªm_addr
, "%X",

1043 &((
sockaddr_ö
 *Ë&
ªmaddr
)->
sö_addr
.
s_addr
);

1044 ((
sockaddr
 *Ë&
loˇœddr
)->
ß_Ámûy
 = 
AF_INET
;

1045 ((
sockaddr
 *Ë&
ªmaddr
)->
ß_Ámûy
 = 
AF_INET
;

1048 
ªå
 = 0L;

1049 i‡(!
Êag_›t
)

1050 
m‹e
[0] = '\0';

1052 i‡(
num
 < 10) {

1053 
	`Ârötf
(
°dîr
, 
	`_
("warning, got bogus udpÜine.\n"));

1056 i‡((
≠
 = 
	`gë_a‚ty≥
(((
sockaddr
 *Ë&
loˇœddr
)->
ß_Ámûy
)Ë=
NULL
) {

1057 
	`Ârötf
(
°dîr
, 
	`_
("netstat: unsupportedáddress family %d !\n"),

1058 ((
sockaddr
 *Ë&
loˇœddr
)->
ß_Ámûy
);

1061 
°©e
) {

1062 
TCP_ESTABLISHED
:

1063 
udp_°©e
 = 
	`_
("ESTABLISHED");

1066 
TCP_CLOSE
:

1067 
udp_°©e
 = "";

1071 
udp_°©e
 = 
	`_
("UNKNOWN");

1075 #i‡
HAVE_AFINET6


1076 
	#nŸnuŒ
(
A
Ë(((A.
sö6_Ámûy
 =
AF_INET6
) && \

1077 ((
A
.
sö6_addr
.
s6_addr32
[0]) || \

1078 (
A
.
sö6_addr
.
s6_addr32
[1]) || \

1079 (
A
.
sö6_addr
.
s6_addr32
[2]) || \

1080 (
A
.
sö6_addr
.
s6_addr32
[3]))) || \

1081 ((
A
.
sö6_Ámûy
 =
AF_INET
) && \

1082 ((
sockaddr_ö
 *Ë&
A
)->
sö_addr
.
s_addr
))

	)

1084 
	#nŸnuŒ
(
A
Ë(A.
sö_addr
.
s_addr
)

	)

1087 i‡(
Êag_Æl
 || (
	`nŸnuŒ
(
ªmaddr
Ë&& !
Êag_l°
) || (!notnull(remaddr) && flag_lst))

1089 
	`ß„_°∫˝y
(
loˇl_addr
, 
≠
->
	`•röt
((
sockaddr
 *Ë&
loˇœddr
,

1090 
Êag_nŸ
), (
loˇl_addr
));

1091 
	`¢¥ötf
(
buf„r
, (buffer), "%s",

1092 
	`gë_¢ame
(
	`ht⁄s
(
loˇl_p‹t
), "udp",

1093 
Êag_nŸ
 & 
FLAG_NUM_PORT
));

1094 i‡((
	`°æí
(
loˇl_addr
Ë+ såÀn(
buf„r
)) > 22)

1095 
loˇl_addr
[22 - 
	`°æí
(
buf„r
)] = '\0';

1096 
	`°rˇt
(
loˇl_addr
, ":");

1097 
	`°rˇt
(
loˇl_addr
, 
buf„r
);

1099 
	`¢¥ötf
(
buf„r
, (buffer), "%s",

1100 
	`gë_¢ame
(
	`ht⁄s
(
ªm_p‹t
), "udp", 
Êag_nŸ
 & 
FLAG_NUM_PORT
));

1101 
	`ß„_°∫˝y
(
ªm_addr
, 
≠
->
	`•röt
((
sockaddr
 *Ë&
ªmaddr
,

1102 
Êag_nŸ
), (
ªm_addr
));

1103 i‡((
	`°æí
(
ªm_addr
Ë+ såÀn(
buf„r
)) > 22)

1104 
ªm_addr
[22 - 
	`°æí
(
buf„r
)] = '\0';

1105 
	`°rˇt
(
ªm_addr
, ":");

1106 
	`°rˇt
(
ªm_addr
, 
buf„r
);

1108 
timîs
[0] = '\0';

1109 i‡(
Êag_›t
)

1110 
timî_run
) {

1112 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("of‡(0.00/%ld/%d)"), 
ªå
, 
timeout
);

1117 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("⁄%d (%2.2f/%ld/%d)"), 
timî_run
, (Ë
time_Àn
 / 100, 
ªå
, 
timeout
);

1121 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("unkn-%d (%2.2f/%ld/%d)"), 
timî_run
, (Ë
time_Àn
 / 100,

1122 
ªå
, 
timeout
);

1125 
	`¥ötf
("%-5s %6ld %6ld %-23s %-23s %-11s",

1126 
¥Ÿ
, 
rxq
, 
txq
, 
loˇl_addr
, 
ªm_addr
, 
udp_°©e
);

1128 
	`föish_this_⁄e
(
uid
,
öode
,
timîs
);

1130 
	}
}

1132 
	$udp_öfo
()

1134 
	`INFO_GUTS6
(
_PATH_PROCNET_UDP
, 
_PATH_PROCNET_UDP6
, "AF INET (udp)",

1135 
udp_do_⁄e
, "udp", "udp6");

1136 
	}
}

1138 
	$ud∂ôe_öfo
()

1140 
	`INFO_GUTS6
(
_PATH_PROCNET_UDPLITE
, 
_PATH_PROCNET_UDPLITE6
,

1141 "AF INET (ud∂ôe)", 
udp_do_⁄e
, "udpl", "udpl6" );

1142 
	}
}

1144 
	$øw_do_⁄e
(
 r
, c⁄° *
löe
,c⁄° *
¥Ÿ
)

1146 
buf„r
[8192], 
loˇl_addr
[64], 
ªm_addr
[64];

1147 
timîs
[64], 
m‹e
[512];

1148 
num
, 
loˇl_p‹t
, 
ªm_p‹t
, 
d
, 
°©e
, 
timî_run
, 
uid
, 
timeout
;

1149 #i‡
HAVE_AFINET6


1150 
sockaddr_ö6
 
loˇœddr
, 
ªmaddr
;

1151 
addr6
[
INET6_ADDRSTRLEN
];

1152 
ö6_addr
 
ö6
;

1153 
a·y≥
 
öë6_a·y≥
;

1155 
sockaddr_ö
 
loˇœddr
, 
ªmaddr
;

1157 
a·y≥
 *
≠
;

1158 
rxq
, 
txq
, 
time_Àn
, 
ªå
, 
öode
;

1160 i‡(
 r
 == 0)

1163 
m‹e
[0] = '\0';

1164 
num
 = 
	`ssˇnf
(
löe
,

1166 &
d
, 
loˇl_addr
, &
loˇl_p‹t
, 
ªm_addr
, &
ªm_p‹t
, &
°©e
,

1167 &
txq
, &
rxq
, &
timî_run
, &
time_Àn
, &
ªå
, &
uid
, &
timeout
, &
öode
, 
m‹e
);

1169 i‡(
	`°æí
(
loˇl_addr
) > 8) {

1170 #i‡
HAVE_AFINET6


1171 
	`ssˇnf
(
loˇl_addr
, "%08X%08X%08X%08X",

1172 &
ö6
.
s6_addr32
[0], &in6.s6_addr32[1],

1173 &
ö6
.
s6_addr32
[2], &in6.s6_addr32[3]);

1174 
	`öë_¡›
(
AF_INET6
, &
ö6
, 
addr6
, (addr6));

1175 
öë6_a·y≥
.
	`öput
(1, 
addr6
, (
sockaddr
 *Ë&
loˇœddr
);

1176 
	`ssˇnf
(
ªm_addr
, "%08X%08X%08X%08X",

1177 &
ö6
.
s6_addr32
[0], &in6.s6_addr32[1],

1178 &
ö6
.
s6_addr32
[2], &in6.s6_addr32[3]);

1179 
	`öë_¡›
(
AF_INET6
, &
ö6
, 
addr6
, (addr6));

1180 
öë6_a·y≥
.
	`öput
(1, 
addr6
, (
sockaddr
 *Ë&
ªmaddr
);

1181 
loˇœddr
.
sö6_Ámûy
 = 
AF_INET6
;

1182 
ªmaddr
.
sö6_Ámûy
 = 
AF_INET6
;

1185 
	`ssˇnf
(
loˇl_addr
, "%X",

1186 &((
sockaddr_ö
 *Ë&
loˇœddr
)->
sö_addr
.
s_addr
);

1187 
	`ssˇnf
(
ªm_addr
, "%X",

1188 &((
sockaddr_ö
 *Ë&
ªmaddr
)->
sö_addr
.
s_addr
);

1189 ((
sockaddr
 *Ë&
loˇœddr
)->
ß_Ámûy
 = 
AF_INET
;

1190 ((
sockaddr
 *Ë&
ªmaddr
)->
ß_Ámûy
 = 
AF_INET
;

1192 #i‡
HAVE_AFINET6


1193 i‡((
≠
 = 
	`gë_a‚ty≥
(
loˇœddr
.
sö6_Ámûy
)Ë=
NULL
) {

1194 
	`Ârötf
(
°dîr
, 
	`_
("√t°©: unsuµ‹ãdáddªs†Ámûy %d !\n"), 
loˇœddr
.
sö6_Ámûy
);

1198 i‡((
≠
 = 
	`gë_a‚ty≥
(
loˇœddr
.
sö_Ámûy
)Ë=
NULL
) {

1199 
	`Ârötf
(
°dîr
, 
	`_
("√t°©: unsuµ‹ãdáddªs†Ámûy %d !\n"), 
loˇœddr
.
sö_Ámûy
);

1204 i‡(!
Êag_›t
)

1205 
m‹e
[0] = '\0';

1207 i‡(
num
 < 10) {

1208 
	`Ârötf
(
°dîr
, 
	`_
("warning, got bogusÑawÜine.\n"));

1212 i‡(
Êag_Æl
 || (
	`nŸnuŒ
(
ªmaddr
Ë&& !
Êag_l°
) || (!notnull(remaddr) && flag_lst))

1214 
	`¢¥ötf
(
buf„r
, (buffer), "%s",

1215 
	`gë_¢ame
(
	`ht⁄s
(
loˇl_p‹t
), "raw",

1216 
Êag_nŸ
 & 
FLAG_NUM_PORT
));

1217 
	`ß„_°∫˝y
(
loˇl_addr
, 
≠
->
	`•röt
((
sockaddr
 *Ë&
loˇœddr
,

1218 
Êag_nŸ
), (
loˇl_addr
));

1219 i‡((
	`°æí
(
loˇl_addr
Ë+ såÀn(
buf„r
)) > 22)

1220 
loˇl_addr
[22 - 
	`°æí
(
buf„r
)] = '\0';

1221 
	`°rˇt
(
loˇl_addr
, ":");

1222 
	`°rˇt
(
loˇl_addr
, 
buf„r
);

1224 
	`¢¥ötf
(
buf„r
, (buffer), "%s",

1225 
	`gë_¢ame
(
	`ht⁄s
(
ªm_p‹t
), "øw", 
Êag_nŸ
 & 
FLAG_NUM_PORT
));

1226 
	`ß„_°∫˝y
(
ªm_addr
, 
≠
->
	`•röt
((
sockaddr
 *Ë&
ªmaddr
,

1227 
Êag_nŸ
), (
ªm_addr
));

1228 i‡((
	`°æí
(
ªm_addr
Ë+ såÀn(
buf„r
)) > 22)

1229 
ªm_addr
[22 - 
	`°æí
(
buf„r
)] = '\0';

1230 
	`°rˇt
(
ªm_addr
, ":");

1231 
	`°rˇt
(
ªm_addr
, 
buf„r
);

1233 
timîs
[0] = '\0';

1234 i‡(
Êag_›t
)

1235 
timî_run
) {

1237 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("of‡(0.00/%ld/%d)"), 
ªå
, 
timeout
);

1242 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("⁄%d (%2.2f/%ld/%d)"), 
timî_run
, (Ë
time_Àn
 / 100,

1243 
ªå
, 
timeout
);

1247 
	`¢¥ötf
(
timîs
, —imîs), 
	`_
("unkn-%d (%2.2f/%ld/%d)"),

1248 
timî_run
, (Ë
time_Àn
 / 100,

1249 
ªå
, 
timeout
);

1252 
	`¥ötf
("%-4s %6ld %6ld %-23s %-23s %-11d",

1253 
¥Ÿ
, 
rxq
, 
txq
, 
loˇl_addr
, 
ªm_addr
, 
°©e
);

1255 
	`föish_this_⁄e
(
uid
,
öode
,
timîs
);

1257 
	}
}

1259 
	$øw_öfo
()

1261 
	`INFO_GUTS6
(
_PATH_PROCNET_RAW
, 
_PATH_PROCNET_RAW6
, "AF INET (raw)",

1262 
øw_do_⁄e
, "raw", "raw6");

1263 
	}
}

1268 #i‡
HAVE_AFUNIX


1270 
	#HAS_INODE
 1

	)

1272 
	$unix_do_⁄e
(
ƒ
, c⁄° *
löe
, c⁄° *
¥Ÿ
)

1274 
has
 = 0;

1275 
∑th
[
MAXPATHLEN
], 
ss_Êags
[32];

1276 *
ss_¥Ÿo
, *
ss_°©e
, *
ss_ty≥
;

1277 
num
, 
°©e
, 
ty≥
;

1278 *
d
;

1279 
ªf˙t
, 
¥Ÿo
, 
Êags
, 
öode
;

1281 i‡(
ƒ
 == 0) {

1282 i‡(
	`°r°r
(
löe
, "Inode"))

1283 
has
 |
HAS_INODE
;

1286 
∑th
[0] = '\0';

1287 
num
 = 
	`ssˇnf
(
löe
, "%p: %lX %lX %lX %X %X %lu %s",

1288 &
d
, &
ªf˙t
, &
¥Ÿo
, &
Êags
, &
ty≥
, &
°©e
, &
öode
, 
∑th
);

1289 i‡(
num
 < 6) {

1290 
	`Ârötf
(
°dîr
, 
	`_
("warning, got bogus unixÜine.\n"));

1293 i‡(!(
has
 & 
HAS_INODE
))

1294 
	`¢¥ötf
(
∑th
,’©h),"%lu",
öode
);

1296 i‡(!
Êag_Æl
) {

1297 i‡((
°©e
 =
SS_UNCONNECTED
Ë&& (
Êags
 & 
SO_ACCEPTCON
)) {

1298 i‡(!
Êag_l°
)

1301 i‡(
Êag_l°
)

1306 
¥Ÿo
) {

1308 
ss_¥Ÿo
 = "unix";

1312 
ss_¥Ÿo
 = "??";

1315 
ty≥
) {

1316 
SOCK_STREAM
:

1317 
ss_ty≥
 = 
	`_
("STREAM");

1320 
SOCK_DGRAM
:

1321 
ss_ty≥
 = 
	`_
("DGRAM");

1324 
SOCK_RAW
:

1325 
ss_ty≥
 = 
	`_
("RAW");

1328 
SOCK_RDM
:

1329 
ss_ty≥
 = 
	`_
("RDM");

1332 
SOCK_SEQPACKET
:

1333 
ss_ty≥
 = 
	`_
("SEQPACKET");

1337 
ss_ty≥
 = 
	`_
("UNKNOWN");

1340 
°©e
) {

1341 
SS_FREE
:

1342 
ss_°©e
 = 
	`_
("FREE");

1345 
SS_UNCONNECTED
:

1350 i‡(
Êags
 & 
SO_ACCEPTCON
) {

1351 
ss_°©e
 = 
	`_
("LISTENING");

1353 
ss_°©e
 = "";

1357 
SS_CONNECTING
:

1358 
ss_°©e
 = 
	`_
("CONNECTING");

1361 
SS_CONNECTED
:

1362 
ss_°©e
 = 
	`_
("CONNECTED");

1365 
SS_DISCONNECTING
:

1366 
ss_°©e
 = 
	`_
("DISCONNECTING");

1370 
ss_°©e
 = 
	`_
("UNKNOWN");

1373 
	`°r˝y
(
ss_Êags
, "[ ");

1374 i‡(
Êags
 & 
SO_ACCEPTCON
)

1375 
	`°rˇt
(
ss_Êags
, "ACC ");

1376 i‡(
Êags
 & 
SO_WAITDATA
)

1377 
	`°rˇt
(
ss_Êags
, "W ");

1378 i‡(
Êags
 & 
SO_NOSPACE
)

1379 
	`°rˇt
(
ss_Êags
, "N ");

1381 
	`°rˇt
(
ss_Êags
, "]");

1383 
	`¥ötf
("%-5s %-6ld %-11s %-10s %-13s ",

1384 
ss_¥Ÿo
, 
ªf˙t
, 
ss_Êags
, 
ss_ty≥
, 
ss_°©e
);

1385 i‡(
has
 & 
HAS_INODE
)

1386 
	`¥ötf
("%-8lu",
öode
);

1388 
	`¥ötf
("- ");

1389 i‡(
Êag_¥g
)

1390 
	`¥ötf
(" %-" 
PROGNAME_WIDTHs
 "s",(
has
 & 
HAS_INODE
?
	`¥g_ˇche_gë
(
öode
):"-"));

1392 
	`¥ötf
(" %s\n", 
∑th
);

1393 
	}
}

1395 
	$unix_öfo
()

1398 
	`¥ötf
(
	`_
("Active UNIX domain sockets "));

1399 i‡(
Êag_Æl
)

1400 
	`¥ötf
(
	`_
("(serversándÉstablished)"));

1402 i‡(
Êag_l°
)

1403 
	`¥ötf
(
	`_
("(only servers)"));

1405 
	`¥ötf
(
	`_
("(w/o servers)"));

1408 
	`¥ötf
(
	`_
("\nProto RefCnt Flags Type State I-Node "));

1409 
	`¥öt_¥og«me_b™√r
();

1410 
	`¥ötf
(
	`_
(" Path\n"));

1413 
	`INFO_GUTS
(
_PATH_PROCNET_UNIX
, "AF UNIX", 
unix_do_⁄e
, "unix");

1415 
	}
}

1419 #i‡
HAVE_AFAX25


1420 
	$ax25_öfo
()

1422 
FILE
 *
f
;

1423 
buf„r
[256], 
buf
[16];

1424 *
§c
, *
d°
, *
dev
, *
p
;

1425 
°
, 
vs
, 
vr
, 
£ndq
, 
ªcvq
, 
ªt
;

1426 
√w
 = -1;

1427 *
ax25_°©e
[5] =

1429 
	`N_
("LISTENING"),

1430 
	`N_
("SABM SENT"),

1431 
	`N_
("DISC SENT"),

1432 
	`N_
("ESTABLISHED"),

1433 
	`N_
("RECOVERY")

1435 i‡(!(
f
 = 
	`¥oc_f›í
(
_PATH_PROCNET_AX25
))) {

1436 i‡(
î∫o
 !
ENOENT
) {

1437 
	`≥º‹
(
_PATH_PROCNET_AX25
);

1440 i‡(
Êag_¨g
 || 
Êag_vî
)

1441 
	`ESYSNOT
("netstat", "AF AX25");

1442 i‡(
Êag_¨g
)

1447 
	`¥ötf
(
	`_
("Active AX.25 sockets\n"));

1448 
	`¥ötf
(
	`_
("Dest Source Device State Vr/Vs Send-Q Recv-Q\n"));

1449 
	`fgës
(
buf„r
, 256, 
f
)) {

1450 i‡(
√w
 == -1) {

1451 i‡(!
	`°∫cmp
(
buf„r
, "dest_addr", 9)) {

1452 
√w
 = 0;

1455 
√w
 = 1;

1461 
£ndq
 = 0;

1462 
ªcvq
 = 0;

1463 i‡(
√w
 == 0) {

1464 
d°
 = 
buf„r
;

1465 
§c
 = 
buf„r
 + 10;

1466 
d°
[9] = 0;

1467 
§c
[9] = 0;

1468 
ªt
 = 
	`ssˇnf
(
buf„r
 + 20, "%s %d %d %d %*d %*d/%*d %*d/%*d %*d/%*d %*d/%*d %*d/%*d %*d %*d %*d %d %d %*d",

1469 
buf
, &
°
, &
vs
, &
vr
, &
£ndq
, &
ªcvq
);

1470 i‡(
ªt
 != 4 &&Ñet != 6) {

1471 
	`¥ötf
(
	`_
("ProbÀmÑódög d©®‰om %s\n"), 
_PATH_PROCNET_AX25
);

1474 
dev
 = 
buf
;

1476 
p
 = 
buf„r
;

1477 *
p
 != ' ')Ö++;

1478 
p
++;

1479 
dev
 = 
p
;

1480 *
p
 != ' ')Ö++;

1481 *
p
++ = 0;

1482 
§c
 = 
p
;

1483 *
p
 != ' ')Ö++;

1484 *
p
++ = 0;

1485 
d°
 = 
p
;

1486 *
p
 != ' ')Ö++;

1487 *
p
++ = 0;

1488 
ªt
 = 
	`ssˇnf
(
p
, "%d %d %d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %d %d %*d",

1489 &
°
, &
vs
, &
vr
, &
£ndq
, &
ªcvq
);

1490 i‡(
ªt
 != 3 &&Ñet != 5) {

1491 
	`¥ötf
(
	`_
("¥obÀmÑódög d©®‰om %s\n"), 
_PATH_PROCNET_AX25
);

1498 
p
 = 
d°
;

1499 *
p
 && *p != ',')Ö++;

1500 *
p
 = 0;

1502 
	`¥ötf
("%-9s %-9s %-6s %-11s %03d/%03d %-6d %-6d\n",

1503 
d°
, 
§c
,

1504 
dev
,

1505 
	`_
(
ax25_°©e
[
°
]),

1506 
vr
, 
vs
, 
£ndq
, 
ªcvq
);

1508 
	`f˛o£
(
f
);

1510 
	}
}

1514 #i‡
HAVE_AFIPX


1515 
	$ùx_öfo
()

1517 
FILE
 *
f
;

1518 
buf
[256];

1519 
txq
, 
rxq
;

1520 
°©e
;

1521 
uid
;

1522 *
°
;

1523 
nc
;

1524 
a·y≥
 *
≠
;

1525 
∑sswd
 *
pw
;

1526 
ßd
[50], 
dad
[50];

1527 
sockaddr
 
ß
;

1528 
•‹t
 = 0, 
dp‹t
 = 0;

1529 
°©
 
s
;

1531 
f
 = 
	`¥oc_f›í
(
_PATH_PROCNET_IPX_SOCKET1
);

1532 i‡(!
f
) {

1533 i‡(
î∫o
 !
ENOENT
) {

1534 
	`≥º‹
(
_PATH_PROCNET_IPX_SOCKET1
);

1537 
f
 = 
	`¥oc_f›í
(
_PATH_PROCNET_IPX_SOCKET2
);

1540 i‡(
f
) {

1541 
	`f°©
(
	`fûío
(
f
), &
s
);

1542 i‡(!
	`S_ISREG
(
s
.
°_mode
)) {

1543 
	`f˛o£
(
f
);

1544 
f
=
NULL
;

1548 i‡(!
f
) {

1549 i‡(
î∫o
 !
ENOENT
) {

1550 
	`≥º‹
(
_PATH_PROCNET_IPX_SOCKET2
);

1553 i‡(
Êag_¨g
 || 
Êag_vî
)

1554 
	`ESYSNOT
("netstat", "AF IPX");

1555 i‡(
Êag_¨g
)

1561 
	`¥ötf
(
	`_
("Active IPX sockets\nProto Recv-Q Send-Q Local Address Foreign Address State"));

1562 i‡(
Êag_exp
 > 1)

1563 
	`¥ötf
(
	`_
(" User"));

1564 
	`¥ötf
("\n");

1565 i‡((
≠
 = 
	`gë_a‚ty≥
(
AF_IPX
)Ë=
NULL
) {

1566 
	`EINTERN
("netstat.c", "AF_IPX missing");

1569 
	`fgës
(
buf
, 255, 
f
);

1571 
	`fgës
(
buf
, 255, 
f
Ë!
NULL
) {

1572 
	`ssˇnf
(
buf
, "%s %s %lX %lX %d %d",

1573 
ßd
, 
dad
, &
txq
, &
rxq
, &
°©e
, &
uid
);

1574 i‡((
°
 = 
	`rödex
(
ßd
, ':'))) {

1575 *
°
++ = '\0';

1576 
	`ssˇnf
(
°
, "%X", &
•‹t
);

1577 
•‹t
 = 
	`¡ohs
(sport);

1579 
	`EINTERN
("netstat.c", "ipx socket formatÉrror in sourceÖort");

1582 
nc
 = 0;

1583 i‡(
	`°rcmp
(
dad
, "Not_Connected") != 0) {

1584 i‡((
°
 = 
	`rödex
(
dad
, ':'))) {

1585 *
°
++ = '\0';

1586 
	`ssˇnf
(
°
, "%X", &
dp‹t
);

1587 
dp‹t
 = 
	`¡ohs
(dport);

1589 
	`EINTERN
("netstat.c", "ipx soket formatÉrror in destinationÖort");

1593 
nc
 = 1;

1595 
°©e
) {

1596 
TCP_ESTABLISHED
:

1597 
°
 = 
	`_
("ESTAB");

1600 
TCP_CLOSE
:

1601 
°
 = "";

1605 
°
 = 
	`_
("UNK.");

1610 (Ë
≠
->
	`öput
(4, 
ßd
, &
ß
);

1611 
	`ß„_°∫˝y
(
buf
, 
≠
->
	`•röt
(&
ß
, 
Êag_nŸ
), (buf));

1612 
	`¢¥ötf
(
ßd
, (ßd), "%s:%04X", 
buf
, 
•‹t
);

1614 i‡(!
nc
) {

1616 (Ë
≠
->
	`öput
(4, 
dad
, &
ß
);

1617 
	`ß„_°∫˝y
(
buf
, 
≠
->
	`•röt
(&
ß
, 
Êag_nŸ
), (buf));

1618 
	`¢¥ötf
(
dad
, (dad), "%s:%04X", 
buf
, 
dp‹t
);

1620 
	`°r˝y
(
dad
, "-");

1622 
	`¥ötf
("IPX %6ld %6ld %-26†%-26†%-5s", 
txq
, 
rxq
, 
ßd
, 
dad
, 
°
);

1623 i‡(
Êag_exp
 > 1) {

1624 i‡(!(
Êag_nŸ
 & 
FLAG_NUM_USER
Ë&& ((
pw
 = 
	`gëpwuid
(
uid
)Ë!
NULL
))

1625 
	`¥ötf
(" %-10s", 
pw
->
pw_«me
);

1627 
	`¥ötf
(" %-10d", 
uid
);

1629 
	`¥ötf
("\n");

1631 
	`f˛o£
(
f
);

1633 
	}
}

1636 
	$iÁ˚_öfo
()

1638 i‡(
skfd
 < 0) {

1639 i‡((
skfd
 = 
	`sockës_›í
(0)) < 0) {

1640 
	`≥º‹
("socket");

1641 
	`exô
(1);

1643 
	`¥ötf
(
	`_
("Kernel InterfaceÅable\n"));

1645 i‡(
Êag_exp
 < 2) {

1646 
i„_sh‹t
 = 1;

1647 
	`¥ötf
(
	`_
("Iface MTU Met RX-OK RX-ERR RX-DRP RX-OVR TX-OK TX-ERR TX-DRP TX-OVR Flg\n"));

1650 i‡(
	`f‹_Æl_öãrÁ˚s
(
do_if_¥öt
, &
Êag_Æl
) < 0) {

1651 
	`≥º‹
(
	`_
("missing interface information"));

1652 
	`exô
(1);

1654 i‡(
Êag_˙t
)

1655 
	`if_ˇche_‰ì
();

1657 
	`˛o£
(
skfd
);

1658 
skfd
 = -1;

1662 
	}
}

1665 
	$vîsi⁄
()

1667 
	`¥ötf
("%s\n%s\n%s\n%s\n", 
Rñó£
, 
Vîsi⁄
, 
Sig«tuª
, 
Fótuªs
);

1668 
	`exô
(
E_VERSION
);

1669 
	}
}

1672 
	$ußge
()

1674 
	`Ârötf
(
°dîr
, 
	`_
("usage:Çetstat [-vWeenNcCF] [<Af>] -rÇetstat {-V|--version|-h|--help}\n"));

1675 
	`Ârötf
(
°dîr
, 
	`_
("Çetstat [-vWnNcaeol] [<Socket> ...]\n"));

1676 
	`Ârötf
(
°dîr
, 
	`_
("Çetstat { [-vWeenNac] -i | [-cnNe] -M | -s [-6tuw] }\n\n"));

1678 
	`Ârötf
(
°dîr
, 
	`_
(" -r, --route displayÑoutingÅable\n"));

1679 
	`Ârötf
(
°dîr
, 
	`_
(" -i, --interfaces display interfaceÅable\n"));

1680 
	`Ârötf
(
°dîr
, 
	`_
(" -g, --groups display multicast group memberships\n"));

1681 
	`Ârötf
(
°dîr
, 
	`_
(" -s, --statistics displayÇetworking statistics (like SNMP)\n"));

1682 #i‡
HAVE_FW_MASQUERADE


1683 
	`Ârötf
(
°dîr
, 
	`_
(" -M, --masquerade display masqueraded connections\n\n"));

1685 
	`Ârötf
(
°dîr
, 
	`_
(" -v, --verbose be verbose\n"));

1686 
	`Ârötf
(
°dîr
, 
	`_
(" -W, --wide don'tÅruncate IPáddresses\n"));

1687 
	`Ârötf
(
°dîr
, 
	`_
(" -n, --numeric don'tÑesolveÇames\n"));

1688 
	`Ârötf
(
°dîr
, 
	`_
(" --numeric-hosts don'tÑesolve hostÇames\n"));

1689 
	`Ârötf
(
°dîr
, 
	`_
(" --numeric-ports don'tÑesolveÖortÇames\n"));

1690 
	`Ârötf
(
°dîr
, 
	`_
(" --numeric-users don'tÑesolve userÇames\n"));

1691 
	`Ârötf
(
°dîr
, 
	`_
(" -N, --symbolicÑesolve hardwareÇames\n"));

1692 
	`Ârötf
(
°dîr
, 
	`_
(" -e, --extend display other/more information\n"));

1693 
	`Ârötf
(
°dîr
, 
	`_
(" -p, --programs display PID/ProgramÇame for sockets\n"));

1694 
	`Ârötf
(
°dîr
, 
	`_
(" -c, --continuous continuousÜisting\n\n"));

1695 
	`Ârötf
(
°dîr
, 
	`_
(" -l, --listening displayÜistening server sockets\n"));

1696 
	`Ârötf
(
°dîr
, 
	`_
(" -a, --all, --listening displayáll sockets (default: connected)\n"));

1697 
	`Ârötf
(
°dîr
, 
	`_
(" -o, --timers displayÅimers\n"));

1698 
	`Ârötf
(
°dîr
, 
	`_
(" -F, --fib display Forwarding Information Base (default)\n"));

1699 
	`Ârötf
(
°dîr
, 
	`_
(" -C, --cache displayÑouting cache instead of FIB\n\n"));

1701 
	`Ârötf
(
°dîr
, 
	`_
(" <Socket>={-t|--tcp} {-u|--udp} {-U|--udplite} {-w|--raw} {-x|--unix} --ax25 --ipx --netrom\n"));

1702 
	`Ârötf
(
°dîr
, 
	`_
(" <AF>=U£ '-6|-4' o∏'-A <af>' o∏'--<af>'; deÁu…: %s\n"), 
DFLT_AF
);

1703 
	`Ârötf
(
°dîr
, 
	`_
(" List ofÖossibleáddress families (which supportÑouting):\n"));

1704 
	`¥öt_aÊi°
(1);

1705 
	`exô
(
E_USAGE
);

1706 
	}
}

1709 
	gmaö


1710 (
	g¨gc
, *
	g¨gv
[]) {

1711 
	gi
;

1712 
	gl›
;

1713 
›ti⁄
 
	gl⁄g›ts
[] =

1715 
AFTRANS_OPTS
,

1720 #i‡
HAVE_FW_MASQUERADE


1747 {
NULL
, 0, 0, 0}

1750 #i‡
I18N


1751 
£éoˇÀ
 (
LC_ALL
, "");

1752 
bödãxtdomaö
("net-tools", "/usr/share/locale");

1753 
ãxtdomaö
("net-tools");

1755 
gërouã_öô
();

1757 
	ga‚ame
[0] = '\0';

1758 (
	gi
 = 
gë›t_l⁄g
(
¨gc
, 
¨gv
, "A:CFMacdeghûnN›rsStuUvVWwx64?", 
l⁄g›ts
, &
l›
)Ë!
EOF
)

1759 
i
) {

1763 i‡(
l›
 < 0 ||Ü› >
AFTRANS_CNT
) {

1764 
EINTERN
("netstat.c", "longopts 1Ñange");

1767 i‡(
a·øns_›t
(
l⁄g›ts
[
l›
].
«me
))

1768 
exô
(1);

1771 i‡(
a·øns_›t
(
›èrg
))

1772 
exô
(1);

1775 
Êag_mas
++;

1778 
Êag_Æl
++;

1781 
Êag_l°
++;

1784 
Êag_˙t
++;

1788 
Êag_deb
++;

1791 
Êag_igmp
++;

1794 
Êag_exp
++;

1797 
Êag_¥g
++;

1800 
Êag_öt
++;

1803 
Êag_wide
++;

1806 
Êag_nŸ
 |
FLAG_NUM
;

1809 
Êag_nŸ
 |
FLAG_NUM_HOST
;

1812 
Êag_nŸ
 |
FLAG_NUM_PORT
;

1815 
Êag_nŸ
 |
FLAG_NUM_USER
;

1818 
Êag_nŸ
 |
FLAG_SYM
;

1821 
Êag_cf
 |
FLAG_CACHE
;

1824 
Êag_cf
 |
FLAG_FIB
;

1827 
Êag_›t
++;

1830 i‡(
a·øns_›t
("inet6"))

1831 
exô
(1);

1834 i‡(
a·øns_›t
("inet"))

1835 
exô
(1);

1838 
vîsi⁄
();

1841 
Êag_vî
 |
FLAG_VERBOSE
;

1844 
Êag_rou
++;

1847 
Êag_t˝
++;

1850 
Êag_s˘p
++;

1853 
Êag_udp
++;

1856 
Êag_ud∂ôe
++;

1859 
Êag_øw
++;

1862 i‡(
a·øns_›t
("unix"))

1863 
exô
(1);

1867 
ußge
();

1869 
Êag_°a
++;

1872 i‡(
	gÊag_öt
 + 
	gÊag_rou
 + 
	gÊag_mas
 + 
	gÊag_°a
 > 1)

1873 
ußge
();

1875 i‡((
	gÊag_öë
 || 
	gÊag_öë6
 || 
	gÊag_°a
) &&

1876 !(
	gÊag_t˝
 || 
	gÊag_s˘p
 || 
	gÊag_udp
 || 
	gÊag_ud∂ôe
 || 
	gÊag_øw
))

1877 
	gÊag_t˝
 = 
Êag_s˘p
 = 
Êag_udp
 = 
Êag_ud∂ôe
 = 
Êag_øw
 = 1;

1879 i‡((
	gÊag_t˝
 || 
	gÊag_s˘p
 || 
	gÊag_udp
 || 
	gÊag_ud∂ôe
 || 
	gÊag_øw
 || 
	gÊag_igmp
) &&

1880 !(
	gÊag_öë
 || 
	gÊag_öë6
))

1881 
	gÊag_öë
 = 
Êag_öë6
 = 1;

1883 
	gÊag_¨g
 = 
Êag_t˝
 + 
Êag_s˘p
 + 
Êag_ud∂ôe
 + 
Êag_udp
 + 
Êag_øw
 + 
Êag_unx


1884 + 
Êag_ùx
 + 
Êag_ax25
 + 
Êag_√åom
 + 
Êag_igmp
 + 
Êag_x25
 + 
Êag_ro£
;

1886 i‡(
	gÊag_mas
) {

1887 #i‡
HAVE_FW_MASQUERADE
 && 
HAVE_AFINET


1888 #i‡
MORE_THAN_ONE_MASQ_AF


1889 i‡(!
	ga‚ame
[0])

1890 
°r˝y
(
a‚ame
, 
DFLT_AF
);

1893 
	gi
 = 
ù_masq_öfo
(
Êag_nŸ
 & 
FLAG_NUM_HOST
,

1894 
Êag_nŸ
 & 
FLAG_NUM_PORT
, 
Êag_exp
);

1895 i‡(
	gi
 || !
	gÊag_˙t
)

1897 
waô_c⁄töous
();

1900 
ENOSUPP
("netstat", "FW_MASQUERADE");

1901 
	gi
 = -1;

1903  (
	gi
);

1906 i‡(
	gÊag_°a
) {

1907 i‡(!
	ga‚ame
[0])

1908 
°r˝y
(
a‚ame
, 
DFLT_AF
);

1910 i‡(!
°rcmp
(
a‚ame
, "inet")) {

1911 #i‡
HAVE_AFINET


1912 
öôèb
();

1913 
∑r£¢mp
(
Êag_øw
, 
Êag_t˝
, 
Êag_udp
);

1915 
ENOSUPP
("netstat", "AF INET");

1917 } if(!
°rcmp
(
a‚ame
, "inet6")) {

1918 #i‡
HAVE_AFINET6


1919 
öôèb6
();

1920 
∑r£¢mp6
(
Êag_øw
, 
Êag_t˝
, 
Êag_udp
);

1922 
ENOSUPP
("netstat", "AF INET6");

1925 
¥ötf
(
_
("√t°©: Nÿ°©i°ic†suµ‹àf‹ s≥cifõdáddªs†Ámûy: %s\n"), 
a‚ame
);

1926 
exô
(1);

1928 
exô
(0);

1931 i‡(
	gÊag_rou
) {

1932 
	g›ti⁄s
 = 0;

1934 i‡(!
	ga‚ame
[0])

1935 
°r˝y
(
a‚ame
, 
DFLT_AF
);

1937 i‡(
	gÊag_exp
 == 2)

1938 
Êag_exp
 = 1;

1939 i‡(
	gÊag_exp
 == 1)

1940 
Êag_exp
 = 2;

1942 
	g›ti⁄s
 = (
Êag_exp
 & 
FLAG_EXT
Ë| 
Êag_nŸ
 | 
Êag_cf
 | 
Êag_vî
;

1943 i‡(!
	gÊag_cf
)

1944 
	g›ti⁄s
 |
FLAG_FIB
;

1947 
	gi
 = 
rouã_öfo
(
a‚ame
, 
›ti⁄s
);

1948 i‡(
	gi
 || !
	gÊag_˙t
)

1950 
waô_c⁄töous
();

1952  (
	gi
);

1954 i‡(
	gÊag_öt
) {

1956 
	gi
 = 
iÁ˚_öfo
();

1957 i‡(!
	gÊag_˙t
 || 
	gi
)

1959 
waô_c⁄töous
();

1961  (
	gi
);

1964 i‡(!
	gÊag_¨g
 || 
	gÊag_t˝
 || 
	gÊag_s˘p
 || 
	gÊag_udp
 || 
	gÊag_ud∂ôe
 || 
	gÊag_øw
) {

1965 #i‡
HAVE_AFINET


1966 
¥g_ˇche_lﬂd
();

1967 
¥ötf
(
_
("Active Internet connections "));

1969 i‡(
	gÊag_Æl
)

1970 
¥ötf
(
_
("(serversándÉstablished)"));

1972 i‡(
	gÊag_l°
)

1973 
¥ötf
(
_
("(only servers)"));

1975 
¥ötf
(
_
("(w/o servers)"));

1977 
¥ötf
(
_
("\nProto Recv-Q Send-Q Local Address Foreign Address State "));

1978 i‡(
	gÊag_exp
 > 1)

1979 
¥ötf
(
_
(" User Inode "));

1980 
¥öt_¥og«me_b™√r
();

1981 i‡(
	gÊag_›t
)

1982 
¥ötf
(
_
(" Timer"));

1983 
¥ötf
("\n");

1985 i‡(
	gÊag_¨g
) {

1986 
	gi
 = 1;

1987 
ENOSUPP
("netstat", "AF INET");

1991 #i‡
HAVE_AFINET


1992 i‡(!
	gÊag_¨g
 || 
	gÊag_t˝
) {

1993 
	gi
 = 
t˝_öfo
();

1994 i‡(
	gi
)

1995  (
	gi
);

1998 i‡(!
	gÊag_¨g
 || 
	gÊag_s˘p
) {

1999 
	gi
 = 
s˘p_öfo
();

2000 i‡(
	gi
)

2001  (
	gi
);

2004 i‡(!
	gÊag_¨g
 || 
	gÊag_udp
) {

2005 
	gi
 = 
udp_öfo
();

2006 i‡(
	gi
)

2007  (
	gi
);

2010 i‡(!
	gÊag_¨g
 || 
	gÊag_ud∂ôe
) {

2011 
	gi
 = 
ud∂ôe_öfo
();

2012 i‡(
	gi
)

2013  (
	gi
);

2016 i‡(!
	gÊag_¨g
 || 
	gÊag_øw
) {

2017 
	gi
 = 
øw_öfo
();

2018 i‡(
	gi
)

2019  (
	gi
);

2022 i‡(
	gÊag_igmp
) {

2023 #i‡
HAVE_AFINET6


2024 
¥ötf
( "IPv6/");

2026 
¥ötf
–
_
("IPv4 Group Memberships\n") );

2027 
¥ötf
–
_
("Interface RefCnt Group\n") );

2028 
¥ötf
( "--------------- ------ ---------------------\n" );

2029 
	gi
 = 
igmp_öfo
();

2030 i‡(
	gi
)

2031  (
	gi
);

2035 i‡(!
	gÊag_¨g
 || 
	gÊag_unx
) {

2036 #i‡
HAVE_AFUNIX


2037 
¥g_ˇche_lﬂd
();

2038 
	gi
 = 
unix_öfo
();

2039 i‡(
	gi
)

2040  (
	gi
);

2042 i‡(
	gÊag_¨g
) {

2043 
	gi
 = 1;

2044 
ENOSUPP
("netstat", "AF UNIX");

2048 i‡(!
	gÊag_¨g
 || 
	gÊag_ùx
) {

2049 #i‡
HAVE_AFIPX


2050 
	gi
 = 
ùx_öfo
();

2051 i‡(
	gi
)

2052  (
	gi
);

2054 i‡(
	gÊag_¨g
) {

2055 
	gi
 = 1;

2056 
ENOSUPP
("netstat", "AF IPX");

2060 i‡(!
	gÊag_¨g
 || 
	gÊag_ax25
) {

2061 #i‡
HAVE_AFAX25


2062 
	gi
 = 
ax25_öfo
();

2063 i‡(
	gi
)

2064  (
	gi
);

2066 i‡(
	gÊag_¨g
) {

2067 
	gi
 = 1;

2068 
ENOSUPP
("netstat", "AF AX25");

2072 if(!
	gÊag_¨g
 || 
	gÊag_x25
) {

2073 #i‡
HAVE_AFX25


2075 
	gi
 = 
x25_öfo
();

2076 i‡(
	gi
)

2077 (
	gi
);

2079 i‡(
	gÊag_¨g
) {

2080 
	gi
 = 1;

2081 
ENOSUPP
("netstat", "AF X25");

2085 i‡(!
	gÊag_¨g
 || 
	gÊag_√åom
) {

2086 #i‡
HAVE_AFNETROM


2087 
	gi
 = 
√åom_öfo
();

2088 i‡(
	gi
)

2089  (
	gi
);

2091 i‡(
	gÊag_¨g
) {

2092 
	gi
 = 1;

2093 
ENOSUPP
("netstat", "AF NETROM");

2097 i‡(!
	gÊag_¨g
 || 
	gÊag_ro£
) {

2098 #i‡0 && 
HAVE_AFROSE


2099 
	gi
 = 
ro£_öfo
();

2100 i‡(
	gi
)

2101  (
	gi
);

2103 i‡(
	gÊag_¨g
) {

2104 
	gi
 = 1;

2105 
ENOSUPP
("netstat", "AF ROSE");

2110 i‡(!
	gÊag_˙t
 || 
	gi
)

2112 
waô_c⁄töous
();

2113 
¥g_ˇche_˛ór
();

2115  (
	gi
);

	@interface/net-tools/plipconfig.c

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<uni°d.h
>

36 
	~<sys/sockë.h
>

37 
	~<sys/io˘l.h
>

38 
	~<√t/if.h
>

39 
	~<löux/if_∂ù.h
>

41 
	~"c⁄fig.h
"

42 
	~"öé.h
"

43 
	~"√t-suµ‹t.h
"

44 
	~"vîsi⁄.h
"

46 
	g›t_a
 = 0;

47 
	g›t_i
 = 0;

48 
	g›t_v
 = 0;

49 
	gskfd
 = -1;

51 
i‰eq
 
	gi‰
;

52 
∂ùc⁄f
 *
	g∂ù
;

54 *
	gRñó£
 = 
RELEASE
,

55 *
	gVîsi⁄
 = "plipconfig 0.2",

56 *
	gSig«tuª
 = "John Paul Morrison, Alan CoxÉtál.";

58 
	$vîsi⁄
()

60 
	`¥ötf
("%s\n%s\n%s\n", 
Rñó£
, 
Vîsi⁄
, 
Sig«tuª
);

61 
	`exô
(
E_VERSION
);

62 
	}
}

64 
	$ußge
()

66 
	`Ârötf
(
°dîr
, 
	`_
("Usage:Ölipconfig [-a] [-i] [-v] interface\n"));

67 
	`Ârötf
(
°dîr
, 
	`_
(" [nibble NN] [trigger NN]\n"));

68 
	`Ârötf
(
°dîr
, 
	`_
("Ölipconfig -V | --version\n"));

69 
	`exô
(-1);

70 
	}
}

72 
	$¥öt_∂ù
()

74 
	`¥ötf
(
	`_
("%s\äibbÀ %luÅriggî %lu\n"), 
i‰
.
i‰_«me
, 
∂ù
->
nibbÀ
,Ölù->
åiggî
);

75 
	}
}

77 
	$maö
(
¨gc
, **
¨gv
)

79 
ªt
 = 0;

80 **
•p
;

82 #i‡
I18N


83 
	`£éoˇÀ
 (
LC_ALL
, "");

84 
	`bödãxtdomaö
("net-tools", "/usr/share/locale");

85 
	`ãxtdomaö
("net-tools");

88 i‡((
skfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0) {

89 
	`≥º‹
("socket");

90 
	`exô
(-1);

93 
¨gc
--;

94 
¨gv
++;

95 
¨gv
[0] && *argv[0] == '-') {

96 i‡(!
	`°rcmp
(*
¨gv
, "-a"))

97 
›t_a
 = 1;

98 i‡(!
	`°rcmp
(*
¨gv
, "-v"))

99 
›t_v
 = 1;

100 i‡(!
	`°rcmp
(*
¨gv
, "-V") || !strcmp(*argv, "--version"))

101 
	`vîsi⁄
();

102 
¨gv
++;

103 
¨gc
--;

106 i‡(
¨gc
 == 0)

107 
	`ußge
();

109 
•p
 = 
¨gv
;

110 
	`°∫˝y
(
i‰
.
i‰_«me
, *
•p
++, 
IFNAMSIZ
);

111 
∂ù
=(
∂ùc⁄f
 *)&
i‰
.
i‰_d©a
;

113 
∂ù
->
pcmd
 = 
PLIP_GET_TIMEOUT
;

114 i‡(
	`io˘l
(
skfd
, 
SIOCDEVPLIP
, &
i‰
) < 0) {

115 
	`≥º‹
("ioctl");

116 
	`exô
(-1);

118 i‡(*
•p
 =(*Ë
NULL
) {

119 
	`¥öt_∂ù
();

120 (Ë
	`˛o£
(
skfd
);

121 
	`exô
(0);

123 *
•p
 !(*Ë
NULL
) {

124 i‡(!
	`°rcmp
(*
•p
, "nibble")) {

125 i‡(*++
•p
 =
NULL
)

126 
	`ußge
();

127 
∂ù
->
nibbÀ
 = 
	`©oi
(*
•p
);

128 
•p
++;

131 i‡(!
	`°rcmp
(*
•p
, "trigger")) {

132 i‡(*++
•p
 =
NULL
)

133 
	`ußge
();

134 
∂ù
->
åiggî
 = 
	`©oi
(*
•p
);

135 
•p
++;

138 
	`ußge
();

141 
∂ù
->
pcmd
 = 
PLIP_SET_TIMEOUT
;

142 i‡(
	`io˘l
(
skfd
, 
SIOCDEVPLIP
, &
i‰
) < 0)

143 
	`≥º‹
("ioctl");

145 
	`¥öt_∂ù
();

148 (Ë
	`˛o£
(
skfd
);

150  (
ªt
);

151 
	}
}

	@interface/net-tools/rarp.c

20 
	~<sys/ty≥s.h
>

21 
	~<sys/sockë.h
>

22 
	~<sys/io˘l.h
>

23 
	~<√töë/ö.h
>

24 
	~<¨∑/öë.h
>

25 
	~<√t/if.h
>

26 
	~<√t/if_¨p.h
>

27 
	~<°dlib.h
>

28 
	~<°dio.h
>

29 
	~<î∫o.h
>

30 
	~<f˙é.h
>

31 
	~<√tdb.h
>

32 
	~<°rög.h
>

33 
	~<uni°d.h
>

34 
	~<gë›t.h
>

36 
	#DFLT_HW
 "ëhî"

	)

38 
	~"c⁄fig.h
"

39 
	~"öé.h
"

40 
	~"√t-suµ‹t.h
"

41 
	~"vîsi⁄.h
"

42 
	~"∑th«mes.h
"

43 
	~"¥oc.h
"

45 
	gno_øΩ_mesßge
[] = 
N_
("This kernel doesÇot support RARP.\n");

47 
	gvîsi⁄_°rög
[] = 
RELEASE
 "\nrarp 1.03 (2001-04-04)\n";

49 
hwty≥
 *
	gh¨dw¨e
 = 
NULL
;

52 
	$øΩ_dñëe
(
fd
, 
ho°ít
 *
hp
)

54 
¨¥eq
 
ªq
;

55 
sockaddr_ö
 *
si
;

56 
found
 = 0;

57 **
addr
;

60 
addr
 = 
hp
->
h_addr_li°
; *add∏!
NULL
;áddr++) {

61 
	`mem£t
((*Ë&
ªq
, 0, (req));

62 
si
 = (
sockaddr_ö
 *Ë&
ªq
.
¨p_∑
;

63 
si
->
sö_Ámûy
 = 
hp
->
h_addπy≥
;

64 
	`mem˝y
((*Ë&
si
->
sö_addr
, *
addr
, 
hp
->
h_Àngth
);

67 i‡(
	`io˘l
(
fd
, 
SIOCDRARP
, &
ªq
) == 0) {

68 
found
++;

70 
î∫o
) {

71 
ENXIO
:

73 
ENODEV
:

74 
	`Âuts
(
	`_
(
no_øΩ_mesßge
), 
°dîr
);

77 
	`≥º‹
("SIOCDRARP");

83 i‡(
found
 == 0)

84 
	`¥ötf
(
	`_
("nÿRARPÉ¡ry f‹ %s.\n"), 
hp
->
h_«me
);

86 
	}
}

90 
	$øΩ_£t
(
fd
, 
ho°ít
 *
hp
, *
hw_addr
)

92 
¨¥eq
 
ªq
;

93 
sockaddr_ö
 *
si
;

94 
sockaddr
 
ßp
;

96 i‡(
h¨dw¨e
->
	`öput
(
hw_addr
, &
ßp
)) {

97 
	`Ârötf
(
°dîr
, 
	`_
("%s: bad h¨dw¨êaddªss\n"), 
hw_addr
);

101 
	`mem£t
((*Ë&
ªq
, 0, (req));

102 
si
 = (
sockaddr_ö
 *Ë&
ªq
.
¨p_∑
;

103 
si
->
sö_Ámûy
 = 
hp
->
h_addπy≥
;

104 
	`mem˝y
((*Ë&
si
->
sö_addr
, 
hp
->
h_addr_li°
[0], hp->
h_Àngth
);

105 
ªq
.
¨p_ha
.
ß_Ámûy
 = 
h¨dw¨e
->
ty≥
;

106 
	`mem˝y
(
ªq
.
¨p_ha
.
ß_d©a
, 
ßp
.ß_d©a, 
h¨dw¨e
->
Æí
);

109 i‡(
	`io˘l
(
fd
, 
SIOCSRARP
, &
ªq
) < 0) {

110 i‡(
î∫o
 =
ENODEV
)

111 
	`Âuts
(
	`_
(
no_øΩ_mesßge
), 
°dîr
);

113 
	`≥º‹
("SIOCSRARP");

117 
	}
}

120 
	$øΩ_fûe
(
fd
, c⁄° *
«me
)

122 
buff
[1024];

123 *
ho°
, *
addr
;

124 
löír
;

125 
FILE
 *
Â
;

126 
ho°ít
 *
hp
;

128 i‡((
Â
 = 
	`f›í
(
«me
, "r")Ë=
NULL
) {

129 
	`Ârötf
(
°dîr
, 
	`_
("øΩ: c™nŸ o≥¿fûê%s:%s.\n"), 
«me
, 
	`°ªº‹
(
î∫o
));

133 
löír
 = 0;

134 
	`fgës
(
buff
, (buff), 
Â
)) {

135 ++
löír
;

136 i‡(
buff
[0] == '#' || buff[0] == '\0')

138 i‡((
addr
 = 
	`°πok
(
buff
, "\¿\t")Ë=
NULL
)

140 i‡((
ho°
 = 
	`°πok
(
NULL
, "\n \t")) == NULL) {

141 
	`Ârötf
(
°dîr
, 
	`_
("øΩ: f‹m©Éº‹áà%s:%u\n"), 
«me
, 
löír
);

144 i‡((
hp
 = 
	`gëho°by«me
(
ho°
)Ë=
NULL
) {

145 
	`Ârötf
(
°dîr
, 
	`_
("øΩ: %s: unknow¿ho°\n"), 
ho°
);

147 i‡(
	`øΩ_£t
(
fd
, 
hp
, 
addr
) != 0) {

148 
	`Ârötf
(
°dîr
, 
	`_
("øΩ: c™nŸ sëÉ¡ry from %s:%u\n"), 
«me
, 
löír
);

152 (Ë
	`f˛o£
(
Â
);

154 
	}
}

156 
	$di•œy_ˇche
()

158 
FILE
 *
fd
 = 
	`¥oc_f›í
(
_PATH_PROCNET_RARP
);

159 
buf„r
[256];

160 i‡(
fd
 =
NULL
) {

161 i‡(
î∫o
 =
ENOENT
)

162 
	`Âuts
(
	`_
(
no_øΩ_mesßge
), 
°dîr
);

164 
	`≥º‹
(
_PATH_PROCNET_RARP
);

167 
	`„of
(
fd
) == 0) {

168 i‡(
	`fgës
(
buf„r
, 255, 
fd
))

169 
	`Âuts
(
buf„r
, 
°dout
);

171 
	`f˛o£
(
fd
);

173 
	}
}

175 
	$ußge
()

177 
	`Ârötf
(
°dîr
, 
	`_
("Usage:Ñarp -aÜistÉntries in cache.\n"));

178 
	`Ârötf
(
°dîr
, 
	`_
("Ñarp -d <hostname> deleteÉntry from cache.\n"));

179 
	`Ârötf
(
°dîr
, 
	`_
("Ñarp [<HW>] -s <hostname> <hwaddr>áddÉntryÅo cache.\n"));

180 
	`Ârötf
(
°dîr
, 
	`_
("Ñarp -fáddÉntries from /etc/ethers.\n"));

181 
	`Ârötf
(
°dîr
, 
	`_
("Ñarp -V displayÖrogram version.\n\n"));

183 
	`Ârötf
(
°dîr
, 
	`_
(" <HW>=U£ '-H <hw>'Åÿ•ecify h¨dw¨êaddªs†ty≥. DeÁu…: %s\n"), 
DFLT_HW
);

184 
	`Ârötf
(
°dîr
, 
	`_
(" List ofÖossible hardwareÅypes (which support ARP):\n"));

185 
	`¥öt_hwli°
(1);

186 
	`exô
(
E_USAGE
);

187 
	}
}

189 
	#MODE_DISPLAY
 1

	)

190 
	#MODE_DELETE
 2

	)

191 
	#MODE_SET
 3

	)

192 
	#MODE_ETHERS
 4

	)

194 
›ti⁄
 
	gl⁄g›ts
[] =

196 {"vîsi⁄", 0, 
NULL
, 'V'},

197 {"vîbo£", 0, 
NULL
, 'v'},

198 {"li°", 0, 
NULL
, 'a'},

199 {"£t", 0, 
NULL
, 's'},

200 {"dñëe", 0, 
NULL
, 'd'},

201 {"hñp", 0, 
NULL
, 'h'},

202 {
NULL
, 0, NULL, 0}

205 
	$maö
(
¨gc
, **
¨gv
)

207 
ªsu…
 = 0, 
mode
 = 0, 
c
, 
«rgs
 = 0, 
vîbo£
 = 0;

208 *
¨gs
[3];

209 
ho°ít
 *
hp
;

210 
fd
;

212 #i‡
I18N


213 
	`£éoˇÀ
 (
LC_ALL
, "");

214 
	`bödãxtdomaö
("net-tools", "/usr/share/locale");

215 
	`ãxtdomaö
("net-tools");

219 
h¨dw¨e
 = 
	`gë_hwty≥
(
DFLT_HW
);

222 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "-ht:aHdsVvf", 
l⁄g›ts
, 
NULL
);

223 
c
) {

224 
EOF
:

227 
	`ußge
();

229 
	`Ârötf
(
°dîr
, 
vîsi⁄_°rög
);

230 
	`exô
(
E_VERSION
);

233 
vîbo£
++;

238 i‡(
mode
) {

239 
	`Ârötf
(
°dîr
, 
	`_
("%s: iŒegÆ o±i⁄ mix.\n"), 
¨gv
[0]);

240 
	`ußge
();

242 
mode
 = (
c
 ='a' ? 
MODE_DISPLAY
 : (¯='d' ? 
MODE_DELETE
 : 
MODE_SET
));

246 
mode
 = 
MODE_ETHERS
;

250 i‡(
›èrg
) {

251 
h¨dw¨e
 = 
	`gë_hwty≥
(
›èrg
);

253 
	`ußge
();

257 i‡(
«rgs
 == 2) {

258 
	`ußge
();

259 
	`exô
(1);

261 
¨gs
[
«rgs
++] = 
›èrg
;

265 
	`ußge
();

267 } 
c
 !
EOF
);

269 i‡(
h¨dw¨e
 =
NULL
) {

270 
	`Ârötf
(
°dîr
, 
	`_
("øΩ: %s: unknow¿h¨dw¨êty≥.\n"), 
›èrg
);

271 
	`exô
(1);

273 
mode
) {

275 
	`ußge
();

277 
MODE_DISPLAY
:

278 i‡(
«rgs
 !(
mode
 - 1)) {

279 
	`ußge
();

281 
ªsu…
 = 
	`di•œy_ˇche
();

284 
MODE_DELETE
:

285 
MODE_SET
:

286 i‡(
«rgs
 !(
mode
 - 1)) {

287 
	`ußge
();

289 i‡((
hp
 = 
	`gëho°by«me
(
¨gs
[0])Ë=
NULL
) {

290 
	`Ârötf
(
°dîr
, 
	`_
("øΩ: %s: unknow¿ho°\n"), 
¨gs
[0]);

291 
	`exô
(1);

293 i‡(
fd
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0), fd < 0) {

294 
	`≥º‹
("socket");

295 
	`exô
(1);

297 
ªsu…
 = (
mode
 =
MODE_DELETE
Ë? 
	`øΩ_dñëe
(
fd
, 
hp
Ë: 
	`øΩ_£t
(fd, hp, 
¨gs
[1]);

298 
	`˛o£
(
fd
);

301 
MODE_ETHERS
:

302 i‡(
«rgs
 != 0 &&Çargs != 1)

303 
	`ußge
();

304 i‡(
fd
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0), fd < 0) {

305 
	`≥º‹
("socket");

306 
	`exô
(1);

308 
ªsu…
 = 
	`øΩ_fûe
(
fd
, 
«rgs
 ? 
¨gs
[0] : 
_PATH_ETHERS
);

309 
	`˛o£
(
fd
);

312 
	`exô
(
ªsu…
);

313 
	}
}

	@interface/net-tools/route.c

39 
	~<sys/ty≥s.h
>

40 
	~<sys/io˘l.h
>

41 
	~<sys/sockë.h
>

42 
	~<√t/if.h
>

44 
	~<√töë/ö.h
>

45 
	~<√tdb.h
>

46 
	~<√töë/ö.h
>

47 
	~<¨∑/«me£r.h
>

48 
	~<ªsﬁv.h
>

49 
	~<löux/∑øm.h
>

50 
	~<°dio.h
>

51 
	~<î∫o.h
>

52 
	~<f˙é.h
>

53 
	~<°dlib.h
>

54 
	~<°rög.h
>

55 
	~<gë›t.h
>

56 
	~<uni°d.h
>

57 
	~<˘y≥.h
>

58 
	~"√t-suµ‹t.h
"

59 
	~"c⁄fig.h
"

60 
	~"öé.h
"

61 
	~"∑th«mes.h
"

62 
	~"vîsi⁄.h
"

64 
	#DFLT_AF
 "öë"

	)

66 
	#FEATURE_ROUTE


	)

67 
	~"lib/√t-„©uªs.h
"

69 *
	gRñó£
 = 
RELEASE
, *
	gVîsi⁄
 = "route 1.98 (2001-04-15)";

71 
	g›t_n
 = 0;

72 
	g›t_v
 = 0;

73 
	g›t_e
 = 1;

74 
	g›t_fc
 = 0;

75 
	g›t_h
 = 0;

76 
a·y≥
 *
	g≠
;

78 
	$ußge
()

80 
	`Ârötf
(
°dîr
, 
	`_
("Usage:Ñoute [-nNvee] [-FC] [<AF>] List kernelÑoutingÅables\n"));

81 
	`Ârötf
(
°dîr
, 
	`_
("Ñoute [-v] [-FC] {add|del|flush} ... ModifyÑoutingÅable for AF.\n\n"));

83 
	`Ârötf
(
°dîr
, 
	`_
("Ñoute {-h|--help} [<AF>] Detailed usage syntax for specified AF.\n"));

84 
	`Ârötf
(
°dîr
, 
	`_
("Ñoute {-V|--version} Display version/authorándÉxit.\n\n"));

86 
	`Ârötf
(
°dîr
, 
	`_
(" -v, --verbose be verbose\n"));

87 
	`Ârötf
(
°dîr
, 
	`_
(" -n, --numeric don'tÑesolveÇames\n"));

88 
	`Ârötf
(
°dîr
, 
	`_
(" -e, --extend display other/more information\n"));

89 
	`Ârötf
(
°dîr
, 
	`_
(" -F, --fib display Forwarding Information Base (default)\n"));

90 
	`Ârötf
(
°dîr
, 
	`_
(" -C, --cache displayÑouting cache instead of FIB\n\n"));

92 
	`Ârötf
(
°dîr
, 
	`_
(" <AF>=U£ '-A <af>' o∏'--<af>'; deÁu…: %s\n"), 
DFLT_AF
);

93 
	`Ârötf
(
°dîr
, 
	`_
(" List ofÖossibleáddress families (which supportÑouting):\n"));

94 
	`¥öt_aÊi°
(1);

95 
	`exô
(
E_USAGE
);

96 
	}
}

99 
	$vîsi⁄
()

101 
	`Ârötf
(
°dîr
, "%s\n%s\n%s\n", 
Rñó£
, 
Vîsi⁄
, 
Fótuªs
);

102 
	`exô
(
E_VERSION
);

103 
	}
}

106 
	$maö
(
¨gc
, **
¨gv
)

108 
i
, 
l›
, 
wh©
 = 0;

109 
›ti⁄
 
l⁄g›ts
[] =

111 
AFTRANS_OPTS
,

121 {
NULL
, 0, 0, 0}

123 **
tmp
;

124 *
¥og«me
;

125 
›ti⁄s
;

126 #i‡
I18N


127 
	`£éoˇÀ
 (
LC_ALL
, "");

128 
	`bödãxtdomaö
("net-tools", "/usr/share/locale");

129 
	`ãxtdomaö
("net-tools");

131 
	`gërouã_öô
();

132 
	`£åouã_öô
();

133 
a‚ame
[0] = '\0';

134 
¥og«me
 = 
¨gv
[0];

137 
tmp
 = 
¨gv
; *tmp;Åmp++) {

138 i‡(!
	`°rcmp
(*
tmp
, "-net"))

139 
	`°r˝y
(*
tmp
, "#net");

140 i‡(!
	`°rcmp
(*
tmp
, "-host"))

141 
	`°r˝y
(*
tmp
, "#host");

145 (
i
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "A:eCFhnN64Vv?", 
l⁄g›ts
, &
l›
)Ë!
EOF
)

146 
i
) {

150 
›t_n
 |
FLAG_NUM
;

153 
›t_n
 |
FLAG_SYM
;

156 
›t_v
 |
FLAG_VERBOSE
;

159 
›t_e
++;

162 i‡(
l›
 < 0 ||Ü› >
AFTRANS_CNT
) {

163 
	`EINTERN
("route.c", "longopts 1Ñange");

166 i‡((
i
 = 
	`a·øns_›t
(
l⁄g›ts
[
l›
].
«me
)))

167 
	`exô
(
i
);

170 
›t_fc
 |
FLAG_CACHE
;

173 
›t_fc
 |
FLAG_FIB
;

176 i‡((
i
 = 
	`a·øns_›t
(
›èrg
)))

177 
	`exô
(
i
);

180 i‡((
i
 = 
	`a·øns_›t
("inet6")))

181 
	`exô
(
i
);

184 i‡((
i
 = 
	`a·øns_›t
("inet")))

185 
	`exô
(
i
);

188 
	`vîsi⁄
();

191 
›t_h
++;

194 
	`ußge
();

197 
¨gv
 +
›töd
;

198 
¨gc
 -
›töd
;

200 i‡(
›t_h
) {

201 i‡(!
a‚ame
[0])

202 
	`ußge
();

204 
wh©
 = 
RTACTION_HELP
;

206 i‡(!
a‚ame
[0])

208 
	`a·øns_def
("rouã", 
¥og«me
, 
DFLT_AF
);

211 i‡(*
¨gv
 =
NULL
) {

212 
wh©
 = 
RTACTION_SHOW
;

214 i‡(!
	`°rcmp
(*
¨gv
, "add"))

215 
wh©
 = 
RTACTION_ADD
;

216 i‡(!
	`°rcmp
(*
¨gv
, "del") || !strcmp(*argv, "delete"))

217 
wh©
 = 
RTACTION_DEL
;

218 i‡(!
	`°rcmp
(*
¨gv
, "flush"))

219 
wh©
 = 
RTACTION_FLUSH
;

221 
	`ußge
();

225 
›ti⁄s
 = (
›t_e
 & 
FLAG_EXT
Ë| 
›t_n
 | 
›t_fc
 | 
›t_v
;

226 i‡(!
›t_fc
)

227 
›ti⁄s
 |
FLAG_FIB
;

229 i‡(
wh©
 =
RTACTION_SHOW
)

230 
i
 = 
	`rouã_öfo
(
a‚ame
, 
›ti⁄s
);

232 
i
 = 
	`rouã_edô
(
wh©
, 
a‚ame
, 
›ti⁄s
, ++
¨gv
);

234 i‡(
i
 =
E_OPTERR
)

235 
	`ußge
();

237  (
i
);

238 
	}
}

	@interface/net-tools/slattach.c

31 
	~<sys/∑øm.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<sys/sockë.h
>

34 
	~<sys/io˘l.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<˘y≥.h
>

38 
	~<î∫o.h
>

39 
	~<f˙é.h
>

40 
	~<limôs.h
>

41 
	~<pwd.h
>

42 
	~<sig«l.h
>

43 
	~<°dlib.h
>

44 
	~<°rög.h
>

45 
	~<uni°d.h
>

46 
	~<gë›t.h
>

47 
	~<löux/if_¶ù.h
>

49 #i‡
deföed
(
__GLIBC__
)

50 #i‡
__GLIBC__
 =2 && 
__GLIBC_MINOR__
 == 0

51 
	~<ãrmbôs.h
>

53 
	~<ãrmios.h
>

57 
	~"∑th«mes.h
"

58 
	~"√t-suµ‹t.h
"

59 
	~"vîsi⁄.h
"

60 
	~"c⁄fig.h
"

61 
	~"öé.h
"

62 
	~"utû.h
"

64 #i‚de‡
_PATH_LOCKD


65 
	#_PATH_LOCKD
 "/v¨/lock"

	)

67 #i‚de‡
_UID_UUCP


68 
	#_UID_UUCP
 "uu˝"

	)

72 
	#DEF_PROTO
 "c¶ù"

	)

75 c⁄° *
	gRñó£
 = 
RELEASE
,

76 *
	gVîsi⁄
 = "$Id: slattach.c,v 1.12 2009-09-06 22:59:43 vapier Exp $",

77 *
	gSig«tuª
 = "net-tools, Fred N. van KempenÉtál.";

81 c⁄° *
	m•ìd
;

82 
	mcode
;

83 } 
	gây_•ìds
[] = {

84 { "50", 
B50
 }, { "75", 
B75
 },

85 { "110", 
B110
 }, { "300", 
B300
 },

86 { "600", 
B600
 }, { "1200", 
B1200
 },

87 { "2400", 
B2400
 }, { "4800", 
B4800
 },

88 { "9600", 
B9600
 },

89 #ifde‡
B14400


90 { "14400", 
B14400
 },

92 #ifde‡
B19200


93 { "19200", 
B19200
 },

95 #ifde‡
B38400


96 { "38400", 
B38400
 },

98 #ifde‡
B57600


99 { "57600", 
B57600
 },

101 #ifde‡
B115200


102 { "115200", 
B115200
 },

104 { 
NULL
, 0 }

106 
ãrmios
 
	gây_ßved
,

107 
	gây_cuºít
;

108 
	gây_sdisc
,

109 
	gây_ldisc
,

110 
	gây_fd
 = -1;

111 
	g›t_c
 = 0;

112 
	g›t_e
 = 0;

113 
	g›t_h
 = 0;

114 #ifde‡
SIOCSKEEPALIVE


115 
	g›t_k
 = 0;

117 
	g›t_l
 = 0;

118 
	g›t_L
 = 0;

119 
	g›t_m
 = 0;

120 
	g›t_n
 = 0;

121 #ifde‡
SIOCSOUTFILL


122 
	g›t_o
 = 0;

124 
	g›t_q
 = 0;

125 
	g›t_d
 = 0;

126 
	g›t_v
 = 0;

130 
	$ây_nomesg
(
fd
)

132 i‡(
›t_n
 == 0) (0);

133 (
	`fchmod
(
fd
, 0600));

134 
	}
}

138 
	$ây_Æªady_locked
(*
«m
)

140 
i
 = 0, 
pid
 = 0;

141 
FILE
 *
fd
 = (FILE *)0;

144 i‡((
fd
 = 
	`f›í
(
«m
, "r")Ë=(
FILE
 *)0)

150 
i
 = 
	`fsˇnf
(
fd
, "%d", &
pid
);

151 (Ë
	`f˛o£
(
fd
);

153 i‡(
i
 != 1)

157 i‡(
	`kûl
(
pid
, 0) == 0)

162 
	}
}

166 
	$ây_lock
(*
∑th
, 
mode
)

168 
ßved_∑th
[
PATH_MAX
];

169 
ßved_lock
 = 0;

170 
∑sswd
 *
pw
;

171 
fd
;

172 
≠id
[16];

175 i‡((
›t_l
 =0Ë|| ((
∑th
 =
NULL
Ë&& (
ßved_lock
 == 0))) (0);

177 i‡(
mode
 == 1) {

178 
	`•rötf
(
ßved_∑th
, "%s/LCK..%s", 
_PATH_LOCKD
, 
∑th
);

179 i‡(
	`ây_Æªady_locked
(
ßved_∑th
)) {

180 
	`Ârötf
(
°dîr
, 
	`_
("¶©èch: /dev/%†ÆªadyÜocked!\n"), 
∑th
);

183 i‡((
fd
 = 
	`¸ót
(
ßved_∑th
, 0644)) < 0) {

184 i‡(
î∫o
 !
EEXIST
)

185 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
,

186 
	`_
("slattach:Åty_lock: (%s): %s\n"),

187 
ßved_∑th
, 
	`°ªº‹
(
î∫o
));

190 
	`•rötf
(
≠id
, "%10d\n", 
	`gëpid
());

191 i‡(
	`wrôe
(
fd
, 
≠id
, 
	`°æí
(apid)) != strlen(apid)) {

192 
	`Ârötf
(
°dîr
, 
	`_
("slattach: cannot write PID file\n"));

193 
	`˛o£
(
fd
);

194 
	`u∆ök
(
ßved_∑th
);

199 i‡((
pw
 = 
	`gëpw«m
(
_UID_UUCP
)Ë=
NULL
) {

200 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
, 
	`_
("slattach:Åty_lock: UUCP user %s unknown!\n"),

201 
_UID_UUCP
);

202 (Ë
	`˛o£
(
fd
);

205 (Ë
	`fchown
(
fd
, 
pw
->
pw_uid
,Öw->
pw_gid
);

207 (Ë
	`˛o£
(
fd
);

209 
ßved_lock
 = 1;

211 i‡(
ßved_lock
 != 1) (0);

212 i‡(
	`u∆ök
(
ßved_∑th
) < 0) {

213 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
,

214 "¶©èch:Åty_u∆ock: (%s): %s\n", 
ßved_∑th
,

215 
	`°ªº‹
(
î∫o
));

218 
ßved_lock
 = 0;

222 
	}
}

227 
	$ây_föd_•ìd
(c⁄° *
•ìd
)

229 
i
;

231 
i
 = 0;

232 
ây_•ìds
[
i
].
•ìd
 !
NULL
) {

233 i‡(!
	`°rcmp
(
ây_•ìds
[
i
].
•ìd
, s≥ed)Ë—ty_•ìds[i].
code
);

234 
i
++;

236 (-
EINVAL
);

237 
	}
}

242 
	$ây_£t_°›bôs
(
ãrmios
 *
ây
, *
°›bôs
)

244 i‡(
›t_d
Ë
	`¥ötf
("¶©èch:Åty_£t_°›bôs: %c\n", *
°›bôs
);

245 *
°›bôs
) {

247 
ây
->
c_cÊag
 &~
CSTOPB
;

251 
ây
->
c_cÊag
 |
CSTOPB
;

255 (-
EINVAL
);

258 
	}
}

263 
	$ây_£t_d©abôs
(
ãrmios
 *
ây
, *
d©abôs
)

265 i‡(
›t_d
Ë
	`¥ötf
("¶©èch:Åty_£t_d©abôs: %c\n", *
d©abôs
);

266 
ây
->
c_cÊag
 &~
CSIZE
;

267 *
d©abôs
) {

269 
ây
->
c_cÊag
 |
CS5
;

273 
ây
->
c_cÊag
 |
CS6
;

277 
ây
->
c_cÊag
 |
CS7
;

281 
ây
->
c_cÊag
 |
CS8
;

285 (-
EINVAL
);

288 
	}
}

293 
	$ây_£t_∑rôy
(
ãrmios
 *
ây
, *
∑rôy
)

295 i‡(
›t_d
Ë
	`¥ötf
("¶©èch:Åty_£t_∑rôy: %c\n", *
∑rôy
);

296 
	`touµî
(*
∑rôy
)) {

298 
ây
->
c_cÊag
 &~(
PARENB
 | 
PARODD
);

302 
ây
->
c_cÊag
 &~(
PARENB
 | 
PARODD
);

303 
ây
->
c_cÊag
 |(
PARENB
 | 
PARODD
);

307 
ây
->
c_cÊag
 &~(
PARENB
 | 
PARODD
);

308 
ây
->
c_cÊag
 |(
PARENB
);

312 (-
EINVAL
);

315 
	}
}

320 
	$ây_£t_•ìd
(
ãrmios
 *
ây
, c⁄° *
•ìd
)

322 
code
;

324 i‡(
›t_d
Ë
	`¥ötf
("¶©èch:Åty_£t_•ìd: %s\n", 
•ìd
);

325 i‡((
code
 = 
	`ây_föd_•ìd
(
•ìd
)) < 0) (code);

326 
ây
->
c_cÊag
 &~
CBAUD
;

327 
ây
->
c_cÊag
 |
code
;

329 
	}
}

334 
	$ây_£t_øw
(
ãrmios
 *
ây
)

336 
i
;

337 
•ìd
;

339 
i
 = 0; i < 
NCCS
; i++)

340 
ây
->
c_cc
[
i
] = '\0';

341 
ây
->
c_cc
[
VMIN
] = 1;

342 
ây
->
c_cc
[
VTIME
] = 0;

343 
ây
->
c_iÊag
 = (
IGNBRK
 | 
IGNPAR
);

344 
ây
->
c_oÊag
 = (0);

345 
ây
->
c_lÊag
 = (0);

346 
•ìd
 = (
ây
->
c_cÊag
 & 
CBAUD
);

347 
ây
->
c_cÊag
 = (
HUPCL
 | 
CREAD
);

348 i‡(
›t_L
)

349 
ây
->
c_cÊag
 |
CLOCAL
;

351 
ây
->
c_cÊag
 |
CRTSCTS
;

352 
ây
->
c_cÊag
 |
•ìd
;

354 
	}
}

359 
	$ây_gë_°©e
(
ãrmios
 *
ây
)

361 i‡(
	`io˘l
(
ây_fd
, 
TCGETS
, 
ây
) < 0) {

362 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
,

363 "¶©èch:Åty_gë_°©e: %s\n", 
	`°ªº‹
(
î∫o
));

364 (-
î∫o
);

367 
	}
}

372 
	$ây_£t_°©e
(
ãrmios
 *
ây
)

374 i‡(
	`io˘l
(
ây_fd
, 
TCSETS
, 
ây
) < 0) {

375 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
,

376 "¶©èch:Åty_£t_°©e: %s\n", 
	`°ªº‹
(
î∫o
));

377 (-
î∫o
);

380 
	}
}

385 
	$ây_gë_disc
(*
disc
)

387 i‡(
	`io˘l
(
ây_fd
, 
TIOCGETD
, 
disc
) < 0) {

388 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
,

389 "¶©èch:Åty_gë_disc: %s\n", 
	`°ªº‹
(
î∫o
));

390 (-
î∫o
);

393 
	}
}

398 
	$ây_£t_disc
(
disc
)

400 i‡(
disc
 =-1Ëdis¯
ây_sdisc
;

402 i‡(
	`io˘l
(
ây_fd
, 
TIOCSETD
, &
disc
) < 0) {

403 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
,

404 "¶©èch:Åty_£t_disc(%d, %d): %s\n", 
ây_fd
,

405 
disc
, 
	`°ªº‹
(
î∫o
));

406 (-
î∫o
);

409 
	}
}

414 
	$ây_gë_«me
(*
«me
)

416 i‡(
	`io˘l
(
ây_fd
, 
SIOCGIFNAME
, 
«me
) < 0) {

417 i‡(
›t_q
 == 0)

418 
	`≥º‹
("tty_get_name");

419 (-
î∫o
);

422 
	}
}

427 
	$ây_h™gup
()

429 
ãrmios
 
ây
;

431 
ây
 = 
ây_cuºít
;

432 (Ë
	`ây_£t_•ìd
(&
ây
, "0");

433 i‡(
	`ây_£t_°©e
(&
ây
) < 0) {

434 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
, 
	`_
("¶©èch:Åty_h™gup(DROP): %s\n"), 
	`°ªº‹
(
î∫o
));

435 (-
î∫o
);

438 (Ë
	`¶ìp
(1);

440 i‡(
	`ây_£t_°©e
(&
ây_cuºít
) < 0) {

441 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
, 
	`_
("¶©èch:Åty_h™gup(RAISE): %s\n"), 
	`°ªº‹
(
î∫o
));

442 (-
î∫o
);

445 
	}
}

450 
	$ây_˛o£
()

452 (Ë
	`ây_£t_disc
(
ây_sdisc
);

453 (Ë
	`ây_h™gup
();

454 (Ë
	`ây_lock
(
NULL
, 0);

456 
	}
}

461 
	$ây_›í
(*
«me
, c⁄° *
•ìd
)

463 
∑thbuf
[
PATH_MAX
];

464 *
∑th_›í
, *
∑th_lock
;

465 
fd
;

468 i‡(
«me
 !
NULL
) {

469 i‡(
«me
[0] != '/') {

470 i‡(
	`°æí
(
«me
 + 6Ë> (
∑thbuf
)) {

471 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
,

472 
	`_
("slattach:ÅtyÇameÅooÜong\n"));

475 
	`•rötf
(
∑thbuf
, "/dev/%s", 
«me
);

476 
∑th_›í
 = 
∑thbuf
;

477 
∑th_lock
 = 
«me
;

478 } i‡(!
	`°∫cmp
(
«me
, "/dev/", 5)) {

479 
∑th_›í
 = 
«me
;

480 
∑th_lock
 = 
«me
 + 5;

482 
∑th_›í
 = 
«me
;

483 
∑th_lock
 = 
«me
;

485 i‡(
›t_d
Ë
	`¥ötf
("slattach:Åty_open:Üooking forÜock\n");

486 i‡(
	`ây_lock
(
∑th_lock
, 1)) (-1);

487 i‡(
›t_d
Ë
	`¥ötf
("¶©èch:Åty_›í:ÅryögÅÿ›í %s\n", 
∑th_›í
);

488 i‡((
fd
 = 
	`›í
(
∑th_›í
, 
O_RDWR
|
O_NDELAY
)) < 0) {

489 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
,

491 
∑th_›í
, 
	`°ªº‹
(
î∫o
));

492 (-
î∫o
);

494 
ây_fd
 = 
fd
;

495 i‡(
›t_d
Ë
	`¥ötf
("¶©èch:Åty_›í: %†(fd=%dË", 
∑th_›í
, 
fd
);

497 
ây_fd
 = 0;

501 i‡(
	`ây_gë_°©e
(&
ây_ßved
) < 0) {

502 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
, 
	`_
("slattach:Åty_open: cannot get current state!\n"));

503 (-
î∫o
);

505 
ây_cuºít
 = 
ây_ßved
;

508 i‡(
	`ây_gë_disc
(&
ây_sdisc
) < 0) {

509 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
, 
	`_
("slattach:Åty_open: cannot get currentÜine disc!\n"));

510 (-
î∫o
);

512 
ây_ldisc
 = 
ây_sdisc
;

515 i‡(
›t_m
 == 0) {

516 i‡(
	`ây_£t_øw
(&
ây_cuºít
) < 0) {

517 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
, 
	`_
("slattach:Åty_open: cannot set RAW mode!\n"));

518 (-
î∫o
);

522 i‡(
•ìd
 !
NULL
) {

523 i‡(
	`ây_£t_•ìd
(&
ây_cuºít
, 
•ìd
) != 0) {

524 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
, 
	`_
("slattach:Åty_open: cannot set %s bps!\n"),

525 
•ìd
);

526 (-
î∫o
);

531 i‡(
	`ây_£t_d©abôs
(&
ây_cuºít
, "8") ||

532 
	`ây_£t_°›bôs
(&
ây_cuºít
, "1") ||

533 
	`ây_£t_∑rôy
(&
ây_cuºít
, "N")) {

534 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
, 
	`_
("slattach:Åty_open: cannot set 8N1 mode!\n"));

535 (-
î∫o
);

539 i‡((
fd
 = 
	`ây_£t_°©e
(&
ây_cuºít
)) < 0) (fd);

543 (Ë
	`ây_nomesg
(
ây_fd
);

546 
	}
}

551 
	$sig_ˇtch
(
sig
)

554 
	`ây_˛o£
();

555 
	`exô
(0);

556 
	}
}

560 
	$ußge
()

562 *
ußge_msg
 = "Usage: slattach [-ehlLmnqv] "

563 #ifde‡
SIOCSKEEPALIVE


566 #ifde‡
SIOCSOUTFILL


572 
	`Ârötf
(
°dîr
, 
ußge_msg
);

573 
	`exô
(1);

574 
	}
}

578 
	$vîsi⁄
()

580 
	`¥ötf
("%s\n%s\n%s\n", 
Rñó£
, 
Vîsi⁄
, 
Sig«tuª
);

581 
	`exô
(
E_VERSION
);

582 
	}
}

586 
	$maö
(
¨gc
, *
¨gv
[])

588 
∑th_buf
[128];

589 *
∑th_dev
;

590 
buff
[128];

591 c⁄° *
•ìd
 = 
NULL
;

592 c⁄° *
¥Ÿo
 = 
DEF_PROTO
;

593 c⁄° *
extcmd
 = 
NULL
;

594 
s
;

595 
›ti⁄
 
l⁄g›ts
[] = {

596 { "vîsi⁄", 0, 
NULL
, 'V' },

597 { 
NULL
, 0, NULL, 0 }

600 
	`°r˝y
(
∑th_buf
, "");

601 
∑th_dev
 = 
∑th_buf
;

604 
›ãº
 = 0;

605 (
s
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "c:ehlLm≈:qs:vdVk:o:", 
l⁄g›ts
, 
NULL
)Ë!
EOF
) s) {

607 
extcmd
 = 
›èrg
;

611 
›t_e
 = 1 - opt_e;

615 
›t_h
 = 1 - opt_h;

618 #ifde‡
SIOCSKEEPALIVE


620 
›t_k
 = 
	`©oi
(
›èrg
);

625 
›t_L
 = 1 - opt_L;

629 
›t_l
 = 1 - opt_l;

633 
›t_m
 = 1 - opt_m;

637 
›t_n
 = 1 - opt_n;

640 #ifde‡
SIOCSOUTFILL


642 
›t_o
 = 
	`©oi
(
›èrg
);

647 
¥Ÿo
 = 
›èrg
;

651 
›t_q
 = 1 - opt_q;

655 
•ìd
 = 
›èrg
;

659 
›t_d
 = 1 - opt_d;

663 
›t_v
 = 1 - opt_v;

667 
	`vîsi⁄
();

671 
	`ußge
();

675 i‡(
	`£tvbuf
(
°dout
,0,
_IOLBF
,0)) {

676 i‡(
›t_q
 =0Ë
	`Ârötf
(
°dîr
, 
	`_
("slattach: setvbuf(stdout,0,_IOLBF,0) : %s\n"),

677 
	`°ªº‹
(
î∫o
));

678 
	`exô
(1);

681 
	`a˘iv©e_öô
();

683 i‡(!
	`°rcmp
(
¥Ÿo
, "tty"))

684 
›t_m
++;

687 i‡(
›töd
 !(
¨gc
 - 1)Ë
	`ußge
();

688 
	`ß„_°∫˝y
(
∑th_buf
, 
¨gv
[
›töd
], (path_buf));

689 i‡(!
	`°rcmp
(
∑th_buf
, "-")) {

690 
›t_e
 = 1;

691 
∑th_dev
 = 
NULL
;

692 i‡(
	`ây_›í
(
NULL
, 
•ìd
) < 0) { (3); }

694 
∑th_dev
 = 
∑th_buf
;

695 i‡(
	`ây_›í
(
∑th_dev
, 
•ìd
) < 0) { (3); }

699 i‡(!
	`°rcmp
(
¥Ÿo
, "tty")) {

700 
ây_sdisc
 = 
N_TTY
;

701 
	`ây_˛o£
();

704 i‡(
	`a˘iv©e_ld
(
¥Ÿo
, 
ây_fd
))

706 i‡((
›t_v
 =1Ë|| (
›t_d
 == 1)) {

707 i‡(
	`ây_gë_«me
(
buff
)) { (3); }

708 
	`¥ötf
(
	`_
("%†°¨ãd"), 
¥Ÿo
);

709 i‡(
∑th_dev
 !
NULL
Ë
	`¥ötf
(
	`_
(" on %s"),Öath_dev);

710 
	`¥ötf
(
	`_
(" i¡îÁ˚ %s\n"), 
buff
);

714 #ifde‡
SIOCSKEEPALIVE


715 i‡(
›t_k
 && (
	`io˘l
(
ây_fd
, 
SIOCSKEEPALIVE
, &opt_k) < 0))

716 
	`Ârötf
(
°dîr
, "¶©èch: io˘l(SIOCSKEEPALIVE): %s\n", 
	`°ªº‹
(
î∫o
));

718 #ifde‡
SIOCSOUTFILL


719 i‡(
›t_o
 && (
	`io˘l
(
ây_fd
, 
SIOCSOUTFILL
, &opt_o) < 0))

720 
	`Ârötf
(
°dîr
, "¶©èch: io˘l(SIOCSOUTFILL): %s\n", 
	`°ªº‹
(
î∫o
));

723 (Ë
	`sig«l
(
SIGHUP
, 
sig_ˇtch
);

724 (Ë
	`sig«l
(
SIGINT
, 
sig_ˇtch
);

725 (Ë
	`sig«l
(
SIGQUIT
, 
sig_ˇtch
);

726 (Ë
	`sig«l
(
SIGTERM
, 
sig_ˇtch
);

729 i‡(
›t_e
 == 0) {

731 if(
›t_h
 == 1) {

732 
n
 = 0;

734 
	`io˘l
(
ây_fd
, 
TIOCMGET
, &
n
);

735 if(!(
n
 & 
TIOCM_CAR
))

737 
	`¶ìp
(15);

740 
	`¶ìp
(60);

743 
	`ây_˛o£
();

744 if(
extcmd
)

745 
	`sy°em
(
extcmd
);

747 
	`exô
(0);

748 
	}
}

	@interface/net-tools/statistics.c

8 
	~<˘y≥.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~"c⁄fig.h
"

13 
	~"öé.h
"

14 
	~"¥oc.h
"

18 #ifde‡
WARN


19 
	#UFWARN
(
x
Ë
	)
x

21 
	#UFWARN
(
x
)

	)

24 
	g¥öt_°©ic
,
	gf_øw
,
	gf_t˝
,
	gf_udp
,
	gf_unknown
 = 1;

26 
	eSèã
 {

27 
	mnumbî
 = 0, 
	m›t_numbî
, 
	mi_f‹w¨d
, 
	mi_öp_icmp
, 
	mi_ouç_icmp
, 
	mi_πo_Æg
,

28 
	mMaxSèã


31 
	#n‹mÆ
 
numbî


	)

33 
	síåy
 {

34 *
	mtôÀ
;

35 *
	mout
;

36 
Sèã
 
	mty≥
;

39 
	s°©edesc
 {

40 
	mödít
;

41 *
	mtôÀ
;

44 
°©edesc
 
	g°©es
[] = {

45 [
numbî
] = { 4, 
NULL
 },

46 [
›t_numbî
] = { 4, 
NULL
 },

47 [
i_f‹w¨d
] = { 4, 
NULL
 },

48 [
i_öp_icmp
] = { 8, 
N_
("ICMP input histogram:") },

49 [
i_ouç_icmp
] = { 8, 
N_
("ICMP output histogram:") },

50 [
MaxSèã
] = {0},

53 
Sèã
 
	g°©e
;

55 
	#I_STATIC
 (1<<16Ë

	)

56 
	#I_TITLE
 (1<<17)

	)

64 
íåy
 
	gI±ab
[] =

66 {"F‹w¨dög", 
N_
("F‹w¨dög i†%s"), 
i_f‹w¨d
 | 
I_STATIC
},

67 {"DeÁu…TTL", 
N_
("DeÁu… TTL i†%u"), 
numbî
 | 
I_STATIC
},

68 {"InRe˚ives", 
N_
("%uÅŸÆÖackë†ª˚ived"), 
numbî
},

69 {"InHdrEº‹s", 
N_
("%u wôh invÆid hódîs"), 
›t_numbî
},

70 {"InAddrEº‹s", 
N_
("%u wôh invÆidáddªs£s"), 
›t_numbî
},

71 {"F‹wD©agøms", 
N_
("%u f‹w¨ded"), 
numbî
},

72 {"InUnknownPrŸos", 
N_
("%u wôh unknow¿¥Ÿocﬁ"), 
›t_numbî
},

73 {"InDisˇrds", 
N_
("%u incomögÖackë†disˇrded"), 
numbî
},

74 {"InDñivîs", 
N_
("%u incomögÖackë†dñivîed"), 
numbî
},

75 {"OutReque°s", 
N_
("%uÑeque°†£¡ out"), 
numbî
},

76 {"OutDisˇrds", 
N_
("%u outgoögÖackë†dr›≥d"), 
›t_numbî
},

77 {"OutNoRouãs", 
N_
("%u dr›≥d beˇu£ o‡missögÑouã"), 
›t_numbî
},

78 {"RósmTimeout", 
N_
("%u føgmít†dr›≥dá·îÅimeout"), 
›t_numbî
},

79 {"RósmReqds", 
N_
("%uÑós£mblõ†ªquúed"), 
›t_numbî
},

80 {"RósmOKs", 
N_
("%uÖackë†ªas£mbÀd ok"), 
›t_numbî
},

81 {"RósmFaûs", 
N_
("%uÖackëÑós£mbÀ†Áûed"), 
›t_numbî
},

82 {"FøgOKs", 
N_
("%u føgmít†ª˚ived ok"), 
›t_numbî
},

83 {"FøgFaûs", 
N_
("%u føgmít†Áûed"), 
›t_numbî
},

84 {"FøgCª©es", 
N_
("%u føgmít†¸óãd"), 
›t_numbî
}

87 
íåy
 
	gIp6èb
[] =

89 {"Ip6InRe˚ives", 
N_
("%uÅŸÆÖackë†ª˚ived"), 
numbî
},

90 {"Ip6InHdrEº‹s", 
N_
("%u wôh invÆid hódîs"), 
›t_numbî
},

91 {"Ip6InTooBigEº‹s", 
N_
("%u wôhÖackë†toÿbig"), 
›t_numbî
},

92 {"Ip6InNoRouãs", 
N_
("%u incomögÖackë†wôhÇÿrouã"), 
›t_numbî
},

93 {"Ip6InAddrEº‹s", 
N_
("%u wôh invÆidáddªs£s"), 
›t_numbî
},

94 {"Ip6InUnknownPrŸos", 
N_
("%u wôh unknow¿¥Ÿocﬁ"), 
›t_numbî
},

95 {"Ip6InTrunˇãdPkts", 
N_
("%u wôhÅrunˇãdÖackës"), 
›t_numbî
},

96 {"Ip6InDisˇrds", 
N_
("%u incomögÖackë†disˇrded"), 
numbî
},

97 {"Ip6InDñivîs", 
N_
("%u incomögÖackë†dñivîed"), 
numbî
},

98 {"Ip6OutF‹wD©agøms", 
N_
("%u f‹w¨ded"), 
numbî
},

99 {"Ip6OutReque°s", 
N_
("%uÑeque°†£¡ out"), 
numbî
},

100 {"Ip6OutDisˇrds", 
N_
("%u outgoögÖackë†dr›≥d"), 
›t_numbî
},

101 {"Ip6OutNoRouãs", 
N_
("%u dr›≥d beˇu£ o‡missögÑouã"), 
›t_numbî
},

102 {"Ip6RósmTimeout", 
N_
("%u føgmít†dr›≥dá·îÅimeout"), 
›t_numbî
},

103 {"Ip6RósmReqds", 
N_
("%uÑós£mblõ†ªquúed"), 
›t_numbî
},

104 {"Ip6RósmOKs", 
N_
("%uÖackë†ªas£mbÀd ok"), 
›t_numbî
},

105 {"Ip6RósmFaûs", 
N_
("%uÖackëÑós£mbÀ†Áûed"), 
›t_numbî
},

106 {"Ip6FøgOKs", 
N_
("%u føgmít†ª˚ived ok"), 
›t_numbî
},

107 {"Ip6FøgFaûs", 
N_
("%u føgmít†Áûed"), 
›t_numbî
},

108 {"Ip6FøgCª©es", 
N_
("%u føgmít†¸óãd"), 
›t_numbî
},

109 {"Ip6InMˇ°Pkts", 
N_
("%u incomög mu…iˇ°Öackës"), 
›t_numbî
},

110 {"Ip6OutMˇ°Pkts", 
N_
("%u outgoög mu…iˇ°Öackës"), 
›t_numbî
}

113 
íåy
 
	gIcm±ab
[] =

115 {"InMsgs", 
N_
("%u ICMP mesßge†ª˚ived"), 
numbî
},

116 {"InEº‹s", 
N_
("%u i≈uàICMP mesßgêÁûed."), 
numbî
},

117 {"InDe°Uƒóchs", 
N_
("de°ö©i⁄ uƒóchabÀ: %u"), 
i_öp_icmp
 | 
I_TITLE
},

118 {"InTimeExcds", 
N_
("timeouàöÅønsô: %u"), 
i_öp_icmp
 | 
I_TITLE
},

119 {"InP¨mProbs", 
N_
("wr⁄gÖ¨amëîs: %u"), 
i_öp_icmp
 | 
I_TITLE
},

120 {"InSrcQuíchs", 
N_
("sour˚ quíches: %u"), 
i_öp_icmp
 | 
I_TITLE
},

121 {"InRedúe˘s", 
N_
("ªdúe˘s: %u"), 
i_öp_icmp
 | 
I_TITLE
},

122 {"InEchos", 
N_
("echÿªque°s: %u"), 
i_öp_icmp
 | 
I_TITLE
},

123 {"InEchoRïs", 
N_
("echÿª∂õs: %u"), 
i_öp_icmp
 | 
I_TITLE
},

124 {"InTime°amps", 
N_
("time°am∞ªque°: %u"), 
i_öp_icmp
 | 
I_TITLE
},

125 {"InTime°ampRïs", 
N_
("time°am∞ª∂y: %u"), 
i_öp_icmp
 | 
I_TITLE
},

126 {"InAddrMasks", 
N_
("addªs†maskÑeque°: %u"), 
i_öp_icmp
 | 
I_TITLE
},

127 {"InAddrMaskRïs", 
N_
("addªs†maskÑïlõs: %u"), 
i_öp_icmp
 | 
I_TITLE
},

128 {"OutMsgs", 
N_
("%u ICMP mesßge†£¡"), 
numbî
},

129 {"OutEº‹s", 
N_
("%u ICMP mesßge†Áûed"), 
numbî
},

130 {"OutDe°Uƒóchs", 
N_
("de°ö©i⁄ uƒóchabÀ: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

131 {"OutTimeExcds", 
N_
("timêex˚eded: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

132 {"OutP¨mProbs", 
N_
("wr⁄gÖ¨amëîs: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

133 {"OutSrcQuíchs", 
N_
("sour˚ quích: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

134 {"OutRedúe˘s", 
N_
("ªdúe˘: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

135 {"OutEchos", 
N_
("echÿªque°: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

136 {"OutEchoRïs", 
N_
("echÿª∂õs: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

137 {"OutTime°amps", 
N_
("time°am∞ªque°s: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

138 {"OutTime°ampRïs", 
N_
("time°am∞ª∂õs: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

139 {"OutAddrMasks", 
N_
("addªs†maskÑeque°s: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

140 {"OutAddrMaskRïs", 
N_
("addªs†maskÑïlõs: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

143 
íåy
 
	gIcmp6èb
[] =

145 {"Icmp6InMsgs", 
N_
("%u ICMP mesßge†ª˚ived"), 
numbî
},

146 {"Icmp6InEº‹s", 
N_
("%u i≈uàICMP mesßgêÁûed."), 
numbî
},

147 {"Icmp6InDe°Uƒóchs", 
N_
("de°ö©i⁄ uƒóchabÀ: %u"), 
i_öp_icmp
 | 
I_TITLE
},

148 {"Icmp6InPktTooBigs", 
N_
("∑ckë†toÿbig: %u"), 
i_öp_icmp
 | 
I_TITLE
},

149 {"Icmp6InTimeExcds", 
N_
("ª˚ived ICMPv6Åimêex˚eded: %u"), 
i_öp_icmp
 | 
I_TITLE
},

150 {"Icmp6InP¨mProbÀms", 
N_
("∑ømëîÖrobÀm: %u"), 
i_öp_icmp
 | 
I_TITLE
},

151 {"Icmp6InEchos", 
N_
("echÿªque°s: %u"), 
i_öp_icmp
 | 
I_TITLE
},

152 {"Icmp6InEchoRïlõs", 
N_
("echÿª∂õs: %u"), 
i_öp_icmp
 | 
I_TITLE
},

153 {"Icmp6InGroupMembQuîõs", 
N_
("grou∞membî quîõs: %u"), 
i_öp_icmp
 | 
I_TITLE
},

154 {"Icmp6InGroupMembRe•⁄£s", 
N_
("grou∞membîÑe•⁄£s: %u"), 
i_öp_icmp
 | 
I_TITLE
},

155 {"Icmp6InGroupMembRedu˘i⁄s", 
N_
("grou∞membîÑedu˘i⁄s: %u"), 
i_öp_icmp
 | 
I_TITLE
},

156 {"Icmp6InRouãrSﬁicôs", 
N_
("rouã∏sﬁicôs: %u"), 
i_öp_icmp
 | 
I_TITLE
},

157 {"Icmp6InRouãrAdvîti£míts", 
N_
("rouã∏advîti£mít: %u"), 
i_öp_icmp
 | 
I_TITLE
},

158 {"Icmp6InNeighb‹Sﬁicôs", 
N_
("√ighbou∏sﬁicôs: %u"), 
i_öp_icmp
 | 
I_TITLE
},

159 {"Icmp6InNeighb‹Advîti£míts", 
N_
("√ighbou∏advîti£mít: %u"), 
i_öp_icmp
 | 
I_TITLE
},

160 {"Icmp6InRedúe˘s", 
N_
("ªdúe˘s: %u"), 
i_öp_icmp
 | 
I_TITLE
},

161 {"Icmp6OutMsgs", 
N_
("%u ICMP mesßge†£¡"), 
numbî
},

162 {"Icmp6OutDe°Uƒóchs", 
N_
("de°ö©i⁄ uƒóchabÀ: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

163 {"Icmp6OutPktTooBigs", 
N_
("∑ckë†toÿbig: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

164 {"Icmp6OutTimeExcds", 
N_
("£¡ ICMPv6Åimêex˚eded: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

165 {"Icmp6OutP¨mProbÀms", 
N_
("∑ømëîÖrobÀm: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

166 {"Icmp6OutEchos", 
N_
("echÿªque°s: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

167 {"Icmp6OutEchoRïlõs", 
N_
("echÿª∂õs: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

168 {"Icmp6OutGroupMembQuîõs", 
N_
("grou∞membî quîõs: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

169 {"Icmp6OutGroupMembRe•⁄£s", 
N_
("grou∞membîÑe•⁄£s: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

170 {"Icmp6OutGroupMembRedu˘i⁄s", 
N_
("grou∞membîÑedu˘i⁄s: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

171 {"Icmp6OutRouãrSﬁicôs", 
N_
("rouã∏sﬁicôs: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

172 {"Icmp6OutRouãrAdvîti£mít†", 
N_
("rouã∏advîti£mít: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

173 {"Icmp6OutNeighb‹Sﬁicôs", 
N_
("√ighb‹ sﬁicôs: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

174 {"Icmp6OutNeighb‹Advîti£míts", 
N_
("√ighb‹ádvîti£míts: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

175 {"Icmp6OutRedúe˘s", 
N_
("ªdúe˘s: %u"), 
i_ouç_icmp
 | 
I_TITLE
},

178 
íåy
 
	gT˝èb
[] =

180 {"RtoAlg‹ôhm", 
N_
("RTOálg‹ôhm i†%s"), 
i_πo_Æg
 | 
I_STATIC
},

181 {"RtoMö", "", 
numbî
},

182 {"RtoMax", "", 
numbî
},

183 {"MaxC⁄n", "", 
numbî
},

184 {"A˘iveO≥ns", 
N_
("%uá˘ivêc⁄√˘i⁄†›íögs"), 
numbî
},

185 {"PassiveO≥ns", 
N_
("%uÖassivêc⁄√˘i⁄ o≥nögs"), 
numbî
},

186 {"Aâem±Faûs", 
N_
("%u faûed c⁄√˘i⁄áâem±s"), 
numbî
},

187 {"E°abRe£ts", 
N_
("%u c⁄√˘i⁄Ñe£t†ª˚ived"), 
numbî
},

188 {"CuºE°ab", 
N_
("%u c⁄√˘i⁄†e°ablished"), 
numbî
},

189 {"InSegs", 
N_
("%u segmít†ª˚ived"), 
numbî
},

190 {"OutSegs", 
N_
("%u segmít†£nd out"), 
numbî
},

191 {"RëønsSegs", 
N_
("%u segmít†ªå™smôed"), 
numbî
},

192 {"InEºs", 
N_
("%u bad segmít†ª˚ived."), 
numbî
},

193 {"OutR°s", 
N_
("%uÑe£t†£¡"), 
numbî
},

196 
íåy
 
	gUd±ab
[] =

198 {"InD©agøms", 
N_
("%uÖackë†ª˚ived"), 
numbî
},

199 {"NoP‹ts", 
N_
("%uÖackë†tÿunknow¿p‹àª˚ived."), 
numbî
},

200 {"InEº‹s", 
N_
("%uÖackëÑe˚ivêîr‹s"), 
numbî
},

201 {"OutD©agøms", 
N_
("%uÖackë†£¡"), 
numbî
},

204 
íåy
 
	gUdp6èb
[] =

206 {"Udp6InD©agøms", 
N_
("%uÖackë†ª˚ived"), 
numbî
},

207 {"Udp6NoP‹ts", 
N_
("%uÖackë†tÿunknow¿p‹àª˚ived."), 
numbî
},

208 {"Udp6InEº‹s", 
N_
("%uÖackëÑe˚ivêîr‹s"), 
numbî
},

209 {"Udp6OutD©agøms", 
N_
("%uÖackë†£¡"), 
numbî
},

212 
íåy
 
	gT˝exâab
[] =

214 {"SyncookõsSít", 
N_
("%u SYN cookõ†£¡"), 
›t_numbî
},

215 {"SyncookõsRecv", 
N_
("%u SYN cookõ†ª˚ived"), 
›t_numbî
},

216 {"SyncookõsFaûed", 
N_
("%u invÆid SYN cookõ†ª˚ived"), 
›t_numbî
},

218 { "Embry⁄icR°s", 
N_
("%uÑesetsÑeceived forÉmbryonic SYN_RECV sockets"),

219 
›t_numbî
 },

220 { "Pru√CÆÀd", 
N_
("%uÖacketsÖruned fromÑeceive queue because of socket"

221 " buf„∏ovîrun"), 
›t_numbî
 },

223 { "RcvPru√d", 
N_
("%uÖackë†¥u√d fromÑe˚ivêqueue"), 
›t_numbî
 },

224 { "OfoPru√d", 
N_
("%uÖackets dropped from out-of-order queue because of"

225 " sockë buf„∏ovîrun"), 
›t_numbî
 },

226 { "OutOfWödowIcmps", 
N_
("%u ICMPÖackets dropped becauseÅhey were "

227 "out-of-wödow"), 
›t_numbî
 },

228 { "LockDr›≥dIcmps", 
N_
("%u ICMPÖackets dropped because"

229 " sockë wa†locked"), 
›t_numbî
 },

230 { "TW", 
N_
("%u TCP sockë†föishedÅimêwaô i¿Á°Åimî"), 
›t_numbî
 },

231 { "TWRecy˛ed", 
N_
("%uÅimêwaô sockë†ªcy˛ed byÅimê°amp"), 
›t_numbî
 },

232 { "TWKûÀd", 
N_
("%u TCP sockë†föishedÅimêwaô i¿¶owÅimî"), 
›t_numbî
 },

233 { "PAWSPassive", 
N_
("%uÖassive connectionsÑejected because of"

234 "Åimê°amp"), 
›t_numbî
 },

235 { "PAWSA˘ive", 
N_
("%uáctive connectionsÑejected because of "

236 "timê°amp"), 
›t_numbî
 },

237 { "PAWSE°ab", 
N_
("%uÖacketsÑejects inÉstablished connections because of"

238 "Åime°amp"), 
›t_numbî
 },

239 { "DñayedACKs", 
N_
("%u dñayedáck†£¡"), 
›t_numbî
 },

240 { "DñayedACKLocked", 
N_
("%u delayedácks further delayed because of"

241 "Üocked sockë"), 
›t_numbî
 },

242 { "DñayedACKLo°", 
N_
("Quickáck modêwa†a˘iv©ed %uÅimes"), 
›t_numbî
 },

243 { "Li°íOvîÊows", 
N_
("%uÅimesÅheÜisten queue ofá socket overflowed"),

244 
›t_numbî
 },

245 { "Li°íDr›s", 
N_
("%u SYN†tÿLISTEN sockë†dr›≥d"), 
›t_numbî
 },

246 { "TCPPªqueued", 
N_
("%uÖackets directly queuedÅoÑecvmsgÖrequeue."),

247 
›t_numbî
 },

248 { "TCPDúe˘C›yFromBacklog", 
N_
("%u byã†dúe˘ly i¿¥o˚s†c⁄ãxà‰om backlog"), 
›t_numbî
 },

249 { "TCPDúe˘C›yFromPªqueue", 
N_
("%u bytes directlyÑeceived inÖrocess context fromÖrequeue"),

250 
›t_numbî
 },

251 { "TCPPªqueueDr›≥d", 
N_
("%uÖackë†dr›≥d fromÖªqueue"), 
›t_numbî
 },

252 { "TCPHPHôs", 
N_
("%uÖackë hódî†¥edi˘ed"), 
numbî
 },

253 { "TCPHPHôsToU£r", 
N_
("%uÖackets headerÖredictedánd "

254 "dúe˘ly queuedÅÿu£r"), 
›t_numbî
 },

255 { "SockMÆlocOOM", 
N_
("Ran %uÅimes out of system memory during "

256 "∑ckë sídög"), 
›t_numbî
 },

257 { "TCPPuªAcks", 
N_
("%uácknowÀdgmít†nŸ c⁄èöög d©®∑ylﬂdÑe˚ived"), 
›t_numbî
 },

258 { "TCPHPAcks", 
N_
("%uÖªdi˘edácknowÀdgmíts"), 
›t_numbî
 },

259 { "TCPRíoRecovîy", 
N_
("%uÅime†ªcovîed fromÖackëÜos†duêtÿÁ°Ñëønsmô"), 
›t_numbî
 },

260 { "TCPSackRecovîy", 
N_
("%uÅime†ªcovîed fromÖackëÜos†by sñe˘ivêacknowÀdgemíts"), 
›t_numbî
 },

261 { "TCPSACKRíegög", 
N_
("%u bad SACK block†ª˚ived"), 
›t_numbî
 },

262 { "TCPFACKRe‹dî", 
N_
("Dëe˘edÑe‹dîög %uÅime†usög FACK"), 
›t_numbî
 },

263 { "TCPSACKRe‹dî", 
N_
("Dëe˘edÑe‹dîög %uÅime†usög SACK"), 
›t_numbî
 },

264 { "TCPTSRe‹dî", 
N_
("Dëe˘edÑe‹dîög %uÅime†usögÅimê°amp"), 
›t_numbî
 },

265 { "TCPRíoRe‹dî", 
N_
("Dëe˘edÑe‹dîög %uÅime†usögÑíÿÁ°Ñëønsmô"), 
›t_numbî
 },

266 { "TCPFuŒUndo", 
N_
("%u c⁄ge°i⁄ wödow†fuŒyÑecovîed wôhouà¶ow sèπ"), 
›t_numbî
 },

267 { "TCPP¨tülUndo", 
N_
("%u c⁄ge°i⁄ wödow†∑πüŒyÑecovîed usög H€ heuri°ic"), 
›t_numbî
 },

268 { "TCPDSackUndo", 
N_
("%u c⁄ge°i⁄ wödowÑecovîed wôhouà¶ow sèπ usög DSACK"), 
›t_numbî
 },

269 { "TCPLossUndo", 
N_
("%u c⁄ge°i⁄ wödow†ªcovîed wôhouà¶ow sèπá·îÖ¨tü»ack"), 
›t_numbî
 },

270 { "TCPLo°Rëønsmôs", 
N_
("%uÑëønsmô†lo°"), 
›t_numbî
 },

271 { "TCPRíoFaûuªs", 
N_
("%uÅimeout†a·îÑíÿÁ°Ñëønsmô"), 
›t_numbî
 },

272 { "TCPSackFaûuªs", 
N_
("%uÅimeout†a·î SACKÑecovîy"), 
›t_numbî
 },

273 { "TCPLossFaûuªs", 
N_
("%uÅimeout†öÜos†°©e"), 
›t_numbî
 },

274 { "TCPFa°Rëøns", 
N_
("%u fa°Ñëønsmôs"), 
›t_numbî
 },

275 { "TCPF‹w¨dRëøns", 
N_
("%u f‹w¨dÑëønsmôs"), 
›t_numbî
 },

276 { "TCPSlowSèπRëøns", 
N_
("%uÑëønsmô†ö slow sèπ"), 
›t_numbî
 },

277 { "TCPTimeouts", 
N_
("%u othî TCPÅimeouts"), 
›t_numbî
 },

278 { "TCPRíoRecovîyFaûed", 
N_
("%uÑíÿÁ°Ñëønsmô†Áûed"), 
›t_numbî
 },

279 { "TCPSackRecovîyFaû", 
N_
("%u SACKÑëønsmô†Áûed"), 
›t_numbî
 },

280 { "TCPScheduÀrFaûed", 
N_
("%uÅime†ª˚ivî scheduÀdÅoÿœã f‹ dúe˘Öro˚ssög"), 
›t_numbî
 },

281 { "TCPRcvCﬁœp£d", 
N_
("%uÖackë†cﬁœp£d i¿ª˚ivêqueuêduêtÿlow sockë buf„r"), 
›t_numbî
 },

282 { "TCPDSACKOldSít", 
N_
("%u DSACK†£¡ f‹ oldÖackës"), 
›t_numbî
 },

283 { "TCPDSACKOfoSít", 
N_
("%u DSACK†£¡ f‹ ouào‡‹dîÖackës"), 
›t_numbî
 },

284 { "TCPDSACKRecv", 
N_
("%u DSACK†ª˚ived"), 
›t_numbî
 },

285 { "TCPDSACKOfoRecv", 
N_
("%u DSACK†f‹ ouào‡‹dîÖackë†ª˚ived"), 
›t_numbî
 },

286 { "TCPAb‹tOnSyn", 
N_
("%u c⁄√˘i⁄†ª£àduêtÿu√x≥˘ed SYN"), 
›t_numbî
 },

287 { "TCPAb‹tOnD©a", 
N_
("%u c⁄√˘i⁄†ª£àduêtÿu√x≥˘ed d©a"), 
›t_numbî
 },

288 { "TCPAb‹tOnClo£", 
N_
("%u c⁄√˘i⁄†ª£àduêtÿóæy u£∏˛o£"), 
›t_numbî
 },

289 { "TCPAb‹tOnMem‹y", 
N_
("%u c⁄√˘i⁄†ab‹ãd duêtÿmem‹yÖªssuª"), 
›t_numbî
 },

290 { "TCPAb‹tOnTimeout", 
N_
("%u c⁄√˘i⁄†ab‹ãd duêtÿtimeout"), 
›t_numbî
 },

291 { "TCPAb‹tOnLögî", 
N_
("%u c⁄√˘i⁄†ab‹ãdá·î u£∏˛o£ i¿lögîÅimeout"), 
›t_numbî
 },

292 { "TCPAb‹tFaûed", 
N_
("%uÅime†u«bÀdÅÿ£nd RST duêtÿnÿmem‹y"), 
›t_numbî
 },

293 { "TCPMem‹yPªssuªs", 
N_
("TCPÑ™Üow o¿mem‹y %uÅimes"), 
›t_numbî
 },

294 { "TCPLoss", 
N_
("%u TCP d©®los†evíts"), 
›t_numbî
 },

295 { "TCPDSACKUndo", 
N_
("%u congestion windowsÑecovered without slow start by DSACK"),

296 
›t_numbî
 },

297 { "TCPRíoRecovîyFaû", 
N_
("%u cœssi¯RíÿÁ°Ñëønsmô†Áûed"), 
›t_numbî
 },

300 
	sèbèb
 {

301 *
	mtôÀ
;

302 
íåy
 *
	mèb
;

303 
size_t
 
	msize
;

304 *
	mÊag
;

307 
èbèb
 
	g¢m±abs
[] =

309 {"Ip", 
I±ab
, (I±ab), &
f_øw
},

310 {"Icmp", 
Icm±ab
, (Icm±ab), &
f_øw
},

311 {"T˝", 
T˝èb
, (T˝èb), &
f_t˝
},

312 {"Udp", 
Ud±ab
, (Ud±ab), &
f_udp
},

313 {"T˝Ext", 
T˝exâab
, (T˝exâab), &
f_t˝
},

314 {
NULL
}

317 
èbèb
 
	g¢mp6èbs
[] =

319 {"Ip6", 
Ip6èb
, (Ip6èb), &
f_øw
},

320 {"Icmp6", 
Icmp6èb
, (Icmp6èb), &
f_øw
},

321 {"Udp6", 
Udp6èb
, (Udp6èb), &
f_udp
},

322 {"T˝6", 
T˝èb
, (T˝èb), &
f_t˝
},

323 {
NULL
}

328 
	$cm≥¡rõs
(c⁄° *
a
, c⁄° *
b
)

330  
	`°rcmp
(((
íåy
 *Ë
a
)->
tôÀ
, ((íåy *Ë
b
)->title);

331 
	}
}

333 
	$¥ötvÆ
(
èbèb
 *
èb
, *
tôÀ
, 
vÆ
)

335 
íåy
 *
ít
 = 
NULL
, 
key
;

336 
ty≥
;

337 
buf
[512];

339 
key
.
tôÀ
 =Åitle;

340 i‡(
èb
->tab)

341 
ít
 = 
	`b£¨ch
(&
key
, 
èb
->èb,Åab->
size
 / (
íåy
),

342 (
íåy
), 
cm≥¡rõs
);

343 i‡(!
ít
) {

344 i‡(
vÆ
)

345 
	`¥ötf
("%*s%s: %d\n", 
°©es
[
°©e
].
ödít
, "", 
tôÀ
, 
vÆ
);

348 
ty≥
 = 
ít
->type;

349 i‡(
ty≥
 & 
I_STATIC
) {

350 
ty≥
 &~
I_STATIC
;

351 i‡(!
¥öt_°©ic
)

354 i‡(*
ít
->
out
 == '\0')

357 i‡(
ty≥
 & 
I_TITLE
) {

358 
ty≥
 &~
I_TITLE
;

359 i‡(
°©e
 !
ty≥
)

360 
	`¥ötf
("%*s%s\n", 
°©es
[
°©e
].
ödít
, "", 
	`_
(°©es[
ty≥
].
tôÀ
));

362 
buf
[0] = '\0';

363 
ty≥
) {

364 
›t_numbî
:

365 i‡(
vÆ
 == 0)

368 
numbî
:

369 
	`¢¥ötf
(
buf
, (buf), 
	`_
(
ít
->
out
), 
vÆ
);

371 
i_f‹w¨d
:

372 
ty≥
 = 
n‹mÆ
;

373 
	`¢¥ötf
(
buf
, (buf), 
	`_
(
ít
->
out
), 
vÆ
 == 2 ? _("enabled") : _("disabled"));

375 
i_ouç_icmp
:

376 
i_öp_icmp
:

377 i‡(
vÆ
 > 0)

378 
	`¢¥ötf
(
buf
, (buf), 
	`_
(
ít
->
out
), 
vÆ
);

380 
i_πo_Æg
:

383 
	`ab‹t
();

385 i‡(
buf
[0])

386 
	`¥ötf
("%*s%s\n", 
°©es
[
ty≥
].
ödít
, "", 
buf
);

388 
°©e
 = 
ty≥
;

389 
	}
}

391 
èbèb
 *
	$√wèbÀ
(
èbèb
 *
èbs
, *
tôÀ
)

393 
èbèb
 *
t
;

394 
èbèb
 
dummyèb
;

396 
t
 = 
èbs
;Å->
tôÀ
;Å++) {

397 i‡(!
	`°rcmp
(
tôÀ
, 
t
->title)) {

398 i‡(*(
t
->
Êag
))

399 
	`¥ötf
("%s:\n", 
	`_
(
tôÀ
));

400 
°©e
 = 
n‹mÆ
;

401  
t
;

404 i‡(!
f_unknown
)

405  
NULL
;

406 
	`¥ötf
("%s:\n", 
	`_
(
tôÀ
));

407 
dummyèb
.
tôÀ
 =Åitle;

408 
dummyèb
.
Êag
 = &
f_unknown
;

409  &
dummyèb
;

410 
	}
}

412 
	$¥o˚ss_fd
(
FILE
 *
f
, 
Æl
, *
fûãr
)

414 
buf1
[2048], 
buf2
[2048];

415 *
•
, *
≈
, *
p
;

416 
	`fgës
(
buf1
,  buf1, 
f
)) {

417 
ídÊag
;

418 
èbèb
 *
èb
;

420 i‡(
buf1
[0] == '\n')

423 i‡(!
	`fgës
(
buf2
,  buf2, 
f
))

425 
•
 = 
	`°rchr
(
buf1
, ':');

426 
≈
 = 
	`°rchr
(
buf2
, ':');

427 i‡(!
≈
 || !
•
)

428 
f‹m©îr
;

429 *
•
 = '\0';

431 i‡(!
Æl
)

432 i‡(
	`°∫cmp
(
buf1
, 
fûãr
, 
	`°æí
(filter)))

435 
èb
 = 
	`√wèbÀ
(
¢m±abs
, 
buf1
);

436 i‡(
èb
 =
NULL
) {

437 
	`¥ötf
("unknow¿%s\n", 
buf1
);

440 
≈
++;

441 
•
++;

443 
ídÊag
 = 0;

444 !
ídÊag
) {

445 
•
 +
	`°r•n
(sp, " \t\n");

446 
≈
 +
	`°r•n
(np, " \t\n");

449 
p
 = 
•
+
	`°rc•n
(sp, " \t\n");

450 i‡(*
p
 == '\0')

451 
ídÊag
 = 1;

452 *
p
 = '\0';

454 i‡(*
•
 !'\0' && *(
èb
->
Êag
))

455 
	`¥ötvÆ
(
èb
, 
•
, 
	`°πoul
(
≈
, &np, 10));

457 
•
 = 
p
 + 1;

462 
f‹m©îr
:

464 
	}
}

466 
	$˝ytôÀ
(*
‹igöÆ
, *
√w
)

468 *
±r
 = 
‹igöÆ
;

469 *
±r
 != '6' && *ptr != '\0') {

470 *
√w
 = *
±r
;

471 
√w
++;

472 
±r
++;

474 *
√w
 = *
±r
;

475 
√w
++;

476 *
√w
 = '\0';

477 
	}
}

479 
	$¥o˚ss6_fd
(
FILE
 *
f
)

481 
buf1
[1024],
buf2
[50],
buf3
[1024];

482 
vÆ
;

483 
èbèb
 *
èb
 = 
NULL
;

484 
˝Êg
 = 0;

486 
	`fgës
(
buf1
,  buf1, 
f
)) {

487 
	`ssˇnf
(
buf1
, "%†%lu", 
buf2
, &
vÆ
);

488 if(!
˝Êg
) {

489 
	`˝ytôÀ
(
buf2
, 
buf3
);

490 
èb
 = 
	`√wèbÀ
(
¢mp6èbs
, 
buf3
);

491 
˝Êg
 = 1;

493 if(!
	`°r°r
(
buf2
, 
buf3
)) {

494 
	`˝ytôÀ
(
buf2
, 
buf3
);

495 
èb
 = 
	`√wèbÀ
(
¢mp6èbs
, 
buf3
);

497 i‡(*(
èb
->
Êag
))

498 
	`¥ötvÆ
(
èb
, 
buf2
, 
vÆ
);

501 
	}
}

503 
	$∑r£¢mp
(
Êag_øw
, 
Êag_t˝
, 
Êag_udp
)

505 
FILE
 *
f
;

507 
f_øw
 = 
Êag_øw
; 
f_t˝
 = 
Êag_t˝
; 
f_udp
 = 
Êag_udp
;

509 
f
 = 
	`¥oc_f›í
("/proc/net/snmp");

510 i‡(!
f
) {

511 
	`≥º‹
(
	`_
("cannot open /proc/net/snmp"));

515 i‡(
	`¥o˚ss_fd
(
f
, 1, 
NULL
) < 0)

516 
	`Ârötf
(
°dîr
, 
	`_
("Problem whileÖarsing /proc/net/snmp\n"));

518 i‡(
	`„º‹
(
f
))

519 
	`≥º‹
("/proc/net/snmp");

521 
	`f˛o£
(
f
);

523 
f
 = 
	`¥oc_f›í
("/proc/net/netstat");

525 i‡(
f
) {

526 i‡(
	`¥o˚ss_fd
(
f
, 1, 
NULL
) <0)

527 
	`Ârötf
(
°dîr
, 
	`_
("Problem whileÖarsing /proc/net/netstat\n"));

529 i‡(
	`„º‹
(
f
))

530 
	`≥º‹
("/proc/net/netstat");

532 
	`f˛o£
(
f
);

535 
	}
}

537 
	$∑r£¢mp6
(
Êag_øw
, 
Êag_t˝
, 
Êag_udp
)

539 
FILE
 *
f
;

541 
f_øw
 = 
Êag_øw
; 
f_t˝
 = 
Êag_t˝
; 
f_udp
 = 
Êag_udp
;

543 
f
 = 
	`f›í
("/proc/net/snmp6", "r");

544 i‡(!
f
) {

545 
	`≥º‹
(
	`_
("cannot open /proc/net/snmp6"));

548 
	`¥o˚ss6_fd
(
f
);

549 i‡(
	`„º‹
(
f
))

550 
	`≥º‹
("/proc/net/snmp6");

552 
	`f˛o£
(
f
);

553 
f
 = 
	`f›í
("/proc/net/snmp", "r");

554 i‡(!
f
) {

555 
	`≥º‹
(
	`_
("cannot open /proc/net/snmp"));

558 
	`¥o˚ss_fd
(
f
, 0, "Tcp");

559 i‡(
	`„º‹
(
f
))

560 
	`≥º‹
("/proc/net/snmp");

562 
	`f˛o£
(
f
);

563 
	}
}

565 
	$öôèb
()

567 
èbèb
 *
t
;

570 
t
 = 
¢m±abs
;Å->
tôÀ
;Å++)

571 
	`qs‹t
(
t
->
èb
,Å->
size
 / (
íåy
),

572 (
íåy
), 
cm≥¡rõs
);

573 
	}
}

575 
	$öôèb6
()

577 
èbèb
 *
t
;

579 
t
 = 
¢mp6èbs
;Å->
tôÀ
;Å++)

580 
	`qs‹t
(
t
->
èb
,Å->
size
 / (
íåy
),

581 (
íåy
), 
cm≥¡rõs
);

582 
	}
}

	@interface/net-tools/version.h

1 
	#RELEASE
 "√t-toﬁ†1.60"

	)

	@libnl/example_c/interface.c

33 
	~<√éök/√éök.h
>

34 
	~<√éök/gíl/gíl.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<uni°d.h
>

39 
	~<sy¶og.h
>

40 
	~<f˙é.h
>

41 
	~<sys/io˘l.h
>

42 
	~<sys/sockë.h
>

43 
	~<sys/io˘l.h
>

44 
	~<√töë/ö.h
>

45 
	~<¨∑/öë.h
>

46 
	~<°rög.h
>

48 
	~<löux/√tdevi˚.h
>

49 
	~<löux/if_¨p.h
>

50 
	~<löux/sockios.h
>

52 
	#SPRINT_BSIZE
 64

	)

53 
	#SPRINT_BUF
(
x
Ëx[
SPRINT_BSIZE
]

	)

56 c⁄° *
	$Œ_addr_n2a
(*
addr
, 
Æí
, 
ty≥
, *
buf
, 
bÀn
)

58 
i
;

59 
l
;

61 i‡(
Æí
 == 4 &&

62 (
ty≥
 =
ARPHRD_TUNNEL
 ||Åy≥ =
ARPHRD_SIT
 ||Åy≥ =
ARPHRD_IPGRE
)) {

63  
	`öë_¡›
(
AF_INET
, 
addr
, 
buf
, 
bÀn
);

65 i‡(
Æí
 =16 && 
ty≥
 =
ARPHRD_TUNNEL6
) {

66  
	`öë_¡›
(
AF_INET6
, 
addr
, 
buf
, 
bÀn
);

68 
l
 = 0;

69 
i
=0; i<
Æí
; i++) {

70 i‡(
i
==0) {

71 
	`¢¥ötf
(
buf
+
l
, 
bÀn
, "%02x", 
addr
[
i
]);

72 
bÀn
 -= 2;

73 
l
 += 2;

75 
	`¢¥ötf
(
buf
+
l
, 
bÀn
, ":%02x", 
addr
[
i
]);

76 
bÀn
 -= 3;

77 
l
 += 3;

80  
buf
;

81 
	}
}

84 
	$∑r£_π©å
(
π©å
 *
tb
[], 
max
, π©å *
πa
, 
Àn
)

86 
	`mem£t
(
tb
, 0, (
π©å
 *Ë* (
max
 + 1));

87 
	`RTA_OK
(
πa
, 
Àn
)) {

88 i‡((
πa
->
πa_ty≥
 <
max
Ë&& (!
tb
[rta->rta_type]))

89 
tb
[
πa
->
πa_ty≥
] =Ñta;

90 
πa
 = 
	`RTA_NEXT
‘è,
Àn
);

92 i‡(
Àn
)

93 
	`Ârötf
(
°dîr
, "!!!Deficô %d,Ñè_Àn=%d\n", 
Àn
, 
πa
->
πa_Àn
);

95 
	}
}

99 c⁄° *
	$π_addr_n2a
(
af
, 
Àn
, c⁄° *
addr
, *
buf
, 
buÊí
)

101 
af
) {

102 
AF_INET
:

103 
AF_INET6
:

104  
	`öë_¡›
(
af
, 
addr
, 
buf
, 
buÊí
);

106 
AF_IPX
:

107  
	`ùx_¡›
(
af
, 
addr
, 
buf
, 
buÊí
);

108 
AF_DEC√t
:

110 
dn_«ddr
 
d«
 = { 2, { 0, 0, }};

111 
	`mem˝y
(
d«
.
a_addr
, 
addr
, 2);

112  
	`d√t_¡›
(
af
, &
d«
, 
buf
, 
buÊí
);

118 
	}
}

122 
	$ˇŒback
(
∆_msg
 *
msg
, *
¨g
)

124 
∆msghdr
 *
∆h
 = 
	`∆msg_hdr
(
msg
);

125 
iföfomsg
 *
iÁ˚
 = 
	`NLMSG_DATA
(
∆h
);

126 
π©å
 *
hdr
 = 
	`IFLA_RTA
(
iÁ˚
);

127 
ªmaöög
 = 
∆h
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
((*
iÁ˚
));

128 
Àn
 = 
∆h
->
∆msg_Àn
;

129 
	`SPRINT_BUF
(
b1
);

131 
π©å
 * 
tb
[
IFLA_MAX
+1];

133 
	`¥ötf
("Got something.\n");

134 
	`∆_msg_dump
(
msg
, 
°dout
);

137 
Àn
 -
	`NLMSG_LENGTH
((*
iÁ˚
));

138 i‡(
Àn
 < 0)

142 
	`∑r£_π©å
(
tb
, 
IFLA_MAX
, 
	`IFLA_RTA
(
iÁ˚
), 
Àn
);

143 i‡(
tb
[
IFLA_IFNAME
] =
NULL
)

145 
	`Ârötf
(
°dîr
, "BUG: devi˚ wôh ifödex %d ha†nû i‚ame\n", 
iÁ˚
->
ifi_ödex
);

148 
	`¥ötf
("devi˚ index %d,Çamê%s\r\n", 
iÁ˚
->
ifi_ödex
, (*)
	`RTA_DATA
(
tb
[
IFLA_IFNAME
]));

149 i‡(
tb
[
IFLA_ADDRESS
])

151 
	`¥ötf
–"ma¯addªss:%s\r\n", 
	`Œ_addr_n2a
(
	`RTA_DATA
(
tb
[
IFLA_ADDRESS
]),

152 
	`RTA_PAYLOAD
(
tb
[
IFLA_ADDRESS
]),

153 
iÁ˚
->
ifi_ty≥
,

154 
b1
, (b1)));

156 i‡(
tb
[
IFA_LOCAL
])

158 
	`¥ötf
("ùádd∏%s\r\n", 
	`π_addr_n2a
(
iÁ˚
->
ifi_Ámûy
,

159 
	`RTA_PAYLOAD
(
tb
[
IFA_LOCAL
]),

160 
	`RTA_DATA
(
tb
[
IFA_LOCAL
]),

161 
b1
, (1)));

163 i‡(
tb
[
IFA_ADDRESS
] =
NULL
 ||

164 
	`memcmp
(
	`RTA_DATA
(
tb
[
IFA_ADDRESS
]), RTA_DATA—b[
IFA_LOCAL
]), 4) == 0) {

165 
	`Ârötf
(
Â
, "/%d ", 
iÁ˚
->
iÁ_¥efixÀn
);

167 
	`Ârötf
(
Â
, "Öeer %s/%d ",

168 
	`π_addr_n2a
(
iÁ˚
->
ifi_Ámûy
,

169 
	`RTA_PAYLOAD
(
tb
[
IFA_ADDRESS
]),

170 
	`RTA_DATA
(
tb
[
IFA_ADDRESS
]),

171 
buf
, (buf)),

172 
iÁ˚
->
iÁ_¥efixÀn
);

175 
	`¥ötf
("endl\r\n");

177 
	`RTA_OK
(
hdr
, 
ªmaöög
)) {

180 i‡(
hdr
->
πa_ty≥
 =
IFLA_IFNAME
) {

181 
	`¥ötf
("FoundÇëw‹k i¡îÁ˚ %d: %s\n", 
iÁ˚
->
ifi_ödex
, (*Ë
	`RTA_DATA
(
hdr
));

184 
hdr
 = 
	`RTA_NEXT
(hdr, 
ªmaöög
);

187  
NL_OK
;

188 
	}
}

190 
	$maö
() {

192 
∆_sock
 *
sockë
 = 
	`∆_sockë_Æloc
();

193 
	`∆_c⁄√˘
(
sockë
, 
NETLINK_ROUTE
);

196 
πgímsg
 
π_hdr
 = { .
πgí_Ámûy
 = 
AF_PACKET
, };

197 
ªt
 = 
	`∆_£nd_sim∂e
(
sockë
, 
RTM_GETLINK
, 
NLM_F_REQUEST
 | 
NLM_F_DUMP
, &
π_hdr
, (rt_hdr));

198 
	`¥ötf
("∆_£nd_sim∂êªtu∫ed %d\n", 
ªt
);

201 
	`∆_sockë_modify_cb
(
sockë
, 
NL_CB_VALID
, 
NL_CB_CUSTOM
, 
ˇŒback
, 
NULL
);

202 
	`∆_ªcvmsgs_deÁu…
(
sockë
);

205 
	}
}

	@libnl/example_c/scan_access_points.c

48 
	~<î∫o.h
>

49 
	~<√éök/gíl/gíl.h
>

50 
	~<löux/∆80211.h
>

53 
	såiggî_ªsu…s
 {

54 
	md⁄e
;

55 
	mab‹ãd
;

59 
	$îr‹_h™dÀr
(
sockaddr_∆
 *
∆a
, 
∆msgîr
 *
îr
, *
¨g
) {

61 
	`¥ötf
("error_handler() called.\n");

62 *
ªt
 = 
¨g
;

63 *
ªt
 = 
îr
->
îr‹
;

64  
NL_STOP
;

65 
	}
}

68 
	$föish_h™dÀr
(
∆_msg
 *
msg
, *
¨g
) {

70 *
ªt
 = 
¨g
;

71 *
ªt
 = 0;

72  
NL_SKIP
;

73 
	}
}

76 
	$ack_h™dÀr
(
∆_msg
 *
msg
, *
¨g
) {

78 *
ªt
 = 
¨g
;

79 *
ªt
 = 0;

80  
NL_STOP
;

81 
	}
}

84 
	$no_£q_check
(
∆_msg
 *
msg
, *
¨g
) {

86  
NL_OK
;

87 
	}
}

90 
	$mac_addr_n2a
(*
mac_addr
, *
¨g
) {

92 
i
, 
l
;

94 
l
 = 0;

95 
i
 = 0; i < 6; i++) {

96 i‡(
i
 == 0) {

97 
	`•rötf
(
mac_addr
+
l
, "%02x", 
¨g
[
i
]);

98 
l
 += 2;

100 
	`•rötf
(
mac_addr
+
l
, ":%02x", 
¨g
[
i
]);

101 
l
 += 3;

104 
	}
}

107 
	$¥öt_ssid
(*
õ
, 
õÀn
) {

108 
uöt8_t
 
Àn
;

109 
uöt8_t
 *
d©a
;

110 
i
;

112 
õÀn
 >2 && iñí >
õ
[1]) {

113 i‡(
õ
[0] == 0 && ie[1] >= 0 && ie[1] <= 32) {

114 
Àn
 = 
õ
[1];

115 
d©a
 = 
õ
 + 2;

116 
i
 = 0; i < 
Àn
; i++) {

117 i‡(
	`i•röt
(
d©a
[
i
]Ë&& d©a[i] !' ' && d©a[i] !'\\'Ë
	`¥ötf
("%c", data[i]);

118 i‡(
d©a
[
i
] =' ' && (ò!0 && i !
Àn
 -1)Ë
	`¥ötf
(" ");

119 
	`¥ötf
("\\x%.2x", 
d©a
[
i
]);

123 
õÀn
 -
õ
[1] + 2;

124 
õ
 += ie[1] + 2;

126 
	}
}

129 
	$ˇŒback_åiggî
(
∆_msg
 *
msg
, *
¨g
) {

131 
gílmsghdr
 *
g∆h
 = 
	`∆msg_d©a
(
	`∆msg_hdr
(
msg
));

132 
åiggî_ªsu…s
 *
ªsu…s
 = 
¨g
;

138 i‡(
g∆h
->
cmd
 =
NL80211_CMD_SCAN_ABORTED
) {

139 
	`¥ötf
("Got NL80211_CMD_SCAN_ABORTED.\n");

140 
ªsu…s
->
d⁄e
 = 1;

141 
ªsu…s
->
ab‹ãd
 = 1;

142 } i‡(
g∆h
->
cmd
 =
NL80211_CMD_NEW_SCAN_RESULTS
) {

143 
	`¥ötf
("Got NL80211_CMD_NEW_SCAN_RESULTS.\n");

144 
ªsu…s
->
d⁄e
 = 1;

145 
ªsu…s
->
ab‹ãd
 = 0;

148  
NL_SKIP
;

149 
	}
}

152 
	$ˇŒback_dump
(
∆_msg
 *
msg
, *
¨g
) {

154 
gílmsghdr
 *
g∆h
 = 
	`∆msg_d©a
(
	`∆msg_hdr
(
msg
));

155 
mac_addr
[20];

156 
∆©å
 *
tb
[
NL80211_ATTR_MAX
 + 1];

157 
∆©å
 *
bss
[
NL80211_BSS_MAX
 + 1];

158 
∆a_pﬁicy
 
bss_pﬁicy
[
NL80211_BSS_MAX
 + 1] = {

159 [
NL80211_BSS_TSF
] = { .
ty≥
 = 
NLA_U64
 },

160 [
NL80211_BSS_FREQUENCY
] = { .
ty≥
 = 
NLA_U32
 },

161 [
NL80211_BSS_BSSID
] = { },

162 [
NL80211_BSS_BEACON_INTERVAL
] = { .
ty≥
 = 
NLA_U16
 },

163 [
NL80211_BSS_CAPABILITY
] = { .
ty≥
 = 
NLA_U16
 },

164 [
NL80211_BSS_INFORMATION_ELEMENTS
] = { },

165 [
NL80211_BSS_SIGNAL_MBM
] = { .
ty≥
 = 
NLA_U32
 },

166 [
NL80211_BSS_SIGNAL_UNSPEC
] = { .
ty≥
 = 
NLA_U8
 },

167 [
NL80211_BSS_STATUS
] = { .
ty≥
 = 
NLA_U32
 },

168 [
NL80211_BSS_SEEN_MS_AGO
] = { .
ty≥
 = 
NLA_U32
 },

169 [
NL80211_BSS_BEACON_IES
] = { },

173 
	`∆a_∑r£
(
tb
, 
NL80211_ATTR_MAX
, 
	`gílmsg_©åd©a
(
g∆h
, 0), 
	`gílmsg_©åÀn
(g∆h, 0), 
NULL
);

174 i‡(!
tb
[
NL80211_ATTR_BSS
]) {

175 
	`¥ötf
("bss info missing!\n");

176  
NL_SKIP
;

178 i‡(
	`∆a_∑r£_√°ed
(
bss
, 
NL80211_BSS_MAX
, 
tb
[
NL80211_ATTR_BSS
], 
bss_pﬁicy
)) {

179 
	`¥ötf
("failedÅoÖarseÇestedáttributes!\n");

180  
NL_SKIP
;

182 i‡(!
bss
[
NL80211_BSS_BSSID
]Ë 
NL_SKIP
;

183 i‡(!
bss
[
NL80211_BSS_INFORMATION_ELEMENTS
]Ë 
NL_SKIP
;

186 
	`mac_addr_n2a
(
mac_addr
, 
	`∆a_d©a
(
bss
[
NL80211_BSS_BSSID
]));

187 
	`¥ötf
("%s, ", 
mac_addr
);

188 
	`¥ötf
("%d MHz, ", 
	`∆a_gë_u32
(
bss
[
NL80211_BSS_FREQUENCY
]));

189 
	`¥öt_ssid
(
	`∆a_d©a
(
bss
[
NL80211_BSS_INFORMATION_ELEMENTS
]), 
	`∆a_Àn
(bss[NL80211_BSS_INFORMATION_ELEMENTS]));

190 
	`¥ötf
("\n");

192  
NL_SKIP
;

193 
	}
}

196 
	$do_sˇn_åiggî
(
∆_sock
 *
sockë
, 
if_ödex
, 
drivî_id
) {

198 
åiggî_ªsu…s
 
ªsu…s
 = { .
d⁄e
 = 0, .
ab‹ãd
 = 0 };

199 
∆_msg
 *
msg
;

200 
∆_cb
 *
cb
;

201 
∆_msg
 *
ssids_to_sˇn
;

202 
îr
;

203 
ªt
;

204 
mcid
 = 
	`gíl_˘æ_ªsﬁve_gΩ
(
sockë
, "nl80211", "scan");

205 
	`∆_sockë_add_membîshù
(
sockë
, 
mcid
);

208 
msg
 = 
	`∆msg_Æloc
();

209 i‡(!
msg
) {

210 
	`¥ötf
("ERROR: FailedÅoállocateÇetlink message for msg.\n");

211  -
ENOMEM
;

213 
ssids_to_sˇn
 = 
	`∆msg_Æloc
();

214 i‡(!
ssids_to_sˇn
) {

215 
	`¥ötf
("ERROR: FailedÅoállocateÇetlink message for ssids_to_scan.\n");

216 
	`∆msg_‰ì
(
msg
);

217  -
ENOMEM
;

219 
cb
 = 
	`∆_cb_Æloc
(
NL_CB_DEFAULT
);

220 i‡(!
cb
) {

221 
	`¥ötf
("ERROR: FailedÅoállocateÇetlink callbacks.\n");

222 
	`∆msg_‰ì
(
msg
);

223 
	`∆msg_‰ì
(
ssids_to_sˇn
);

224  -
ENOMEM
;

228 
	`gílmsg_put
(
msg
, 0, 0, 
drivî_id
, 0, 0, 
NL80211_CMD_TRIGGER_SCAN
, 0);

229 
	`∆a_put_u32
(
msg
, 
NL80211_ATTR_IFINDEX
, 
if_ödex
);

230 
	`∆a_put
(
ssids_to_sˇn
, 1, 0, "");

231 
	`∆a_put_√°ed
(
msg
, 
NL80211_ATTR_SCAN_SSIDS
, 
ssids_to_sˇn
);

232 
	`∆msg_‰ì
(
ssids_to_sˇn
);

233 
	`∆_cb_£t
(
cb
, 
NL_CB_VALID
, 
NL_CB_CUSTOM
, 
ˇŒback_åiggî
, &
ªsu…s
);

234 
	`∆_cb_îr
(
cb
, 
NL_CB_CUSTOM
, 
îr‹_h™dÀr
, &
îr
);

235 
	`∆_cb_£t
(
cb
, 
NL_CB_FINISH
, 
NL_CB_CUSTOM
, 
föish_h™dÀr
, &
îr
);

236 
	`∆_cb_£t
(
cb
, 
NL_CB_ACK
, 
NL_CB_CUSTOM
, 
ack_h™dÀr
, &
îr
);

237 
	`∆_cb_£t
(
cb
, 
NL_CB_SEQ_CHECK
, 
NL_CB_CUSTOM
, 
no_£q_check
, 
NULL
);

241 
îr
 = 1;

242 
ªt
 = 
	`∆_£nd_auto
(
sockë
, 
msg
);

243 
	`¥ötf
("NL80211_CMD_TRIGGER_SCAN síà%d byã†tÿthêkî√l.\n", 
ªt
);

244 
	`¥ötf
("Waiting for scanÅo complete...\n");

245 
îr
 > 0Ë
ªt
 = 
	`∆_ªcvmsgs
(
sockë
, 
cb
);

246 i‡(
îr
 < 0) {

247 
	`¥ötf
("WARNING:Éº ha†®vÆuêo‡%d.\n", 
îr
);

249 i‡(
ªt
 < 0) {

250 
	`¥ötf
("ERROR:Çl_ªcvmsgs(Ëªtu∫ed %d (%s).\n", 
ªt
, 
	`∆_gëîr‹
(-ret));

251  
ªt
;

253 !
ªsu…s
.
d⁄e
Ë
	`∆_ªcvmsgs
(
sockë
, 
cb
);

254 i‡(
ªsu…s
.
ab‹ãd
) {

255 
	`¥ötf
("ERROR: Kerneláborted scan.\n");

258 
	`¥ötf
("Scan is done.\n");

261 
	`∆msg_‰ì
(
msg
);

262 
	`∆_cb_put
(
cb
);

263 
	`∆_sockë_dr›_membîshù
(
sockë
, 
mcid
);

265 
	}
}

268 
	$maö
() {

269 
if_ödex
 = 
	`if_«mëoödex
("wlan0");

272 
∆_sock
 *
sockë
 = 
	`∆_sockë_Æloc
();

273 
	`gíl_c⁄√˘
(
sockë
);

274 
drivî_id
 = 
	`gíl_˘æ_ªsﬁve
(
sockë
, "nl80211");

277 
îr
 = 
	`do_sˇn_åiggî
(
sockë
, 
if_ödex
, 
drivî_id
);

278 i‡(
îr
 != 0) {

279 
	`¥ötf
("do_sˇn_åiggî(ËÁûed wôh %d.\n", 
îr
);

280  
îr
;

284 
∆_msg
 *
msg
 = 
	`∆msg_Æloc
();

285 
	`gílmsg_put
(
msg
, 0, 0, 
drivî_id
, 0, 
NLM_F_DUMP
, 
NL80211_CMD_GET_SCAN
, 0);

286 
	`∆a_put_u32
(
msg
, 
NL80211_ATTR_IFINDEX
, 
if_ödex
);

287 
	`∆_sockë_modify_cb
(
sockë
, 
NL_CB_VALID
, 
NL_CB_CUSTOM
, 
ˇŒback_dump
, 
NULL
);

288 
ªt
 = 
	`∆_£nd_auto
(
sockë
, 
msg
);

289 
	`¥ötf
("NL80211_CMD_GET_SCAN síà%d byã†tÿthêkî√l.\n", 
ªt
);

290 
ªt
 = 
	`∆_ªcvmsgs_deÁu…
(
sockë
);

291 
	`∆msg_‰ì
(
msg
);

292 i‡(
ªt
 < 0) {

293 
	`¥ötf
("ERROR:Çl_ªcvmsgs_deÁu…(Ëªtu∫ed %d (%s).\n", 
ªt
, 
	`∆_gëîr‹
(-ret));

294  
ªt
;

298 
	}
}

	@libnl/example_c/show_wifi_interface.c

62 
	~<√éök/√éök.h
>

63 
	~<√éök/gíl/gíl.h
>

64 
	~<löux/∆80211.h
>

67 
	$ˇŒback
(
∆_msg
 *
msg
, *
¨g
) {

68 
gílmsghdr
 *
g∆h
 = 
	`∆msg_d©a
(
	`∆msg_hdr
(
msg
));

69 
∆©å
 *
tb_msg
[
NL80211_ATTR_MAX
 + 1];

70 *
wùhy
 = 
¨g
;

77 
	`∆a_∑r£
(
tb_msg
, 
NL80211_ATTR_MAX
, 
	`gílmsg_©åd©a
(
g∆h
, 0), 
	`gílmsg_©åÀn
(g∆h, 0), 
NULL
);

80 i‡(
tb_msg
[
NL80211_ATTR_IFNAME
]) {

81 
	`¥ötf
("I¡îÁ˚ %s\n", 
	`∆a_gë_°rög
(
tb_msg
[
NL80211_ATTR_IFNAME
]));

83 
	`¥ötf
("Unnamed/non-netdev interface\n");

85 i‡(
wùhy
 && 
tb_msg
[
NL80211_ATTR_WIPHY
]) {

86 
	`¥ötf
("List mode,Ço interface specified.\n");

87 
thiswùhy
 = 
	`∆a_gë_u32
(
tb_msg
[
NL80211_ATTR_WIPHY
]);

88 i‡(*
wùhy
 !
thiswùhy
Ë
	`¥ötf
("phy#%d\n",Åhiswiphy);

89 *
wùhy
 = 
thiswùhy
;

90 } i‡(
tb_msg
[
NL80211_ATTR_WIPHY
]) {

91 
	`¥ötf
("wùhy %d\n", 
	`∆a_gë_u32
(
tb_msg
[
NL80211_ATTR_WIPHY
]));

93 i‡(
tb_msg
[
NL80211_ATTR_MAC
]) {

96 
	`¥ötf
("NOT IMPLEMENTED\n");

99 i‡(
tb_msg
[
NL80211_ATTR_SSID
]) {

102 
	`¥ötf
("NOT IMPLEMENTED\n");

107 i‡(
tb_msg
[
NL80211_ATTR_IFINDEX
]Ë
	`¥ötf
("ifödex %d\n", 
	`∆a_gë_u32
(tb_msg[NL80211_ATTR_IFINDEX]));

109 i‡(
tb_msg
[
NL80211_ATTR_IFTYPE
])

110 
	`¥ötf
("NOT IMPLEMENTED\n");

114 i‡(
tb_msg
[
NL80211_ATTR_WIPHY_FREQ
]) {

115 
uöt32_t
 
‰eq
 = 
	`∆a_gë_u32
(
tb_msg
[
NL80211_ATTR_WIPHY_FREQ
]);

117 
	`¥ötf
("NOT IMPLEMENTED");

133 
	`¥ötf
("\n");

136 
	`¥ötf
("------------------------------\n");

138  
NL_SKIP
;

139 
	}
}

141 
	$maö
() {

142 
∆_msg
 *
msg
;

143 
ªt
;

146 
∆_sock
 *
sockë
 = 
	`∆_sockë_Æloc
();

147 
	`gíl_c⁄√˘
(
sockë
);

148 
drivî_id
 = 
	`gíl_˘æ_ªsﬁve
(
sockë
, "nl80211");

151 
	`¥ötf
(">>> Getting info for wlan0:\n");

152 
	`∆_sockë_modify_cb
(
sockë
, 
NL_CB_VALID
, 
NL_CB_CUSTOM
, 
ˇŒback
, 
NULL
);

153 
msg
 = 
	`∆msg_Æloc
();

154 
if_ödex
 = 
	`if_«mëoödex
("wlan0");

155 
	`gílmsg_put
(
msg
, 0, 0, 
drivî_id
, 0, 0, 
NL80211_CMD_GET_INTERFACE
, 0);

156 
	`NLA_PUT_U32
(
msg
, 
NL80211_ATTR_IFINDEX
, 
if_ödex
);

157 
ªt
 = 
	`∆_£nd_auto_com∂ëe
(
sockë
, 
msg
);

158 
	`¥ötf
("∆_£nd_auto_com∂ëêªtu∫ed %d\n", 
ªt
);

159 
	`∆_ªcvmsgs_deÁu…
(
sockë
);

160 
	`∆_waô_f‹_ack
(
sockë
);

163 
	`¥ötf
(">>> Getting info foráll interfaces:\n");

164 
dev_dump_wùhy
 = -1;

165 
	`∆_sockë_modify_cb
(
sockë
, 
NL_CB_VALID
, 
NL_CB_CUSTOM
, 
ˇŒback
, &
dev_dump_wùhy
);

166 
msg
 = 
	`∆msg_Æloc
();

167 
	`gílmsg_put
(
msg
, 0, 0, 
drivî_id
, 0, 
NLM_F_DUMP
, 
NL80211_CMD_GET_INTERFACE
, 0);

168 
ªt
 = 
	`∆_£nd_auto_com∂ëe
(
sockë
, 
msg
);

169 
	`¥ötf
("∆_£nd_auto_com∂ëêªtu∫ed %d\n", 
ªt
);

170 
	`∆_ªcvmsgs_deÁu…
(
sockë
);

172 
	`¥ötf
(">>> ProgramÉxit.\n");

176 
∆a_put_Áûuª
:

177 
	`∆msg_‰ì
(
msg
);

179 
	}
}

	@mylibnl/libnl-3.2.25/include/linux/can/netlink.h

10 #i‚de‡
CAN_NETLINK_H


11 
	#CAN_NETLINK_H


	)

13 
	~<löux/ty≥s.h
>

22 
	sˇn_bôtimög
 {

23 
__u32
 
	mbôøã
;

24 
__u32
 
	mßm∂e_poöt
;

25 
__u32
 
	mtq
;

26 
__u32
 
	m¥›_£g
;

27 
__u32
 
	mpha£_£g1
;

28 
__u32
 
	mpha£_£g2
;

29 
__u32
 
	msjw
;

30 
__u32
 
	mbΩ
;

38 
	sˇn_bôtimög_c⁄°
 {

39 
	m«me
[16];

40 
__u32
 
	mt£g1_mö
;

41 
__u32
 
	mt£g1_max
;

42 
__u32
 
	mt£g2_mö
;

43 
__u32
 
	mt£g2_max
;

44 
__u32
 
	msjw_max
;

45 
__u32
 
	mbΩ_mö
;

46 
__u32
 
	mbΩ_max
;

47 
__u32
 
	mbΩ_öc
;

53 
	sˇn_˛ock
 {

54 
__u32
 
	m‰eq
;

60 
	eˇn_°©e
 {

61 
	mCAN_STATE_ERROR_ACTIVE
 = 0,

62 
	mCAN_STATE_ERROR_WARNING
,

63 
	mCAN_STATE_ERROR_PASSIVE
,

64 
	mCAN_STATE_BUS_OFF
,

65 
	mCAN_STATE_STOPPED
,

66 
	mCAN_STATE_SLEEPING
,

67 
	mCAN_STATE_MAX


73 
	sˇn_bîr_cou¡î
 {

74 
__u16
 
	mtxîr
;

75 
__u16
 
	mrxîr
;

81 
	sˇn_˘æmode
 {

82 
__u32
 
	mmask
;

83 
__u32
 
	mÊags
;

86 
	#CAN_CTRLMODE_LOOPBACK
 0x01

	)

87 
	#CAN_CTRLMODE_LISTENONLY
 0x02

	)

88 
	#CAN_CTRLMODE_3_SAMPLES
 0x04

	)

89 
	#CAN_CTRLMODE_ONE_SHOT
 0x08

	)

90 
	#CAN_CTRLMODE_BERR_REPORTING
 0x10

	)

95 
	sˇn_devi˚_°©s
 {

96 
__u32
 
	mbus_îr‹
;

97 
__u32
 
	mîr‹_w¨nög
;

98 
__u32
 
	mîr‹_∑ssive
;

99 
__u32
 
	mbus_off
;

100 
__u32
 
	m¨bôøti⁄_lo°
;

101 
__u32
 
	mª°¨ts
;

108 
	mIFLA_CAN_UNSPEC
,

109 
	mIFLA_CAN_BITTIMING
,

110 
	mIFLA_CAN_BITTIMING_CONST
,

111 
	mIFLA_CAN_CLOCK
,

112 
	mIFLA_CAN_STATE
,

113 
	mIFLA_CAN_CTRLMODE
,

114 
	mIFLA_CAN_RESTART_MS
,

115 
	mIFLA_CAN_RESTART
,

116 
	mIFLA_CAN_BERR_COUNTER
,

117 
	m__IFLA_CAN_MAX


120 
	#IFLA_CAN_MAX
 (
__IFLA_CAN_MAX
 - 1)

	)

	@mylibnl/libnl-3.2.25/include/linux/fib_rules.h

1 #i‚de‡
__LINUX_FIB_RULES_H


2 
	#__LINUX_FIB_RULES_H


	)

5 
	#FIB_RULE_PERMANENT
 0x00000001

	)

6 
	#FIB_RULE_INVERT
 0x00000002

	)

7 
	#FIB_RULE_UNRESOLVED
 0x00000004

	)

8 
	#FIB_RULE_IIF_DETACHED
 0x00000008

	)

9 
	#FIB_RULE_DEV_DETACHED
 
FIB_RULE_IIF_DETACHED


	)

10 
	#FIB_RULE_OIF_DETACHED
 0x00000010

	)

13 
	#FIB_RULE_FIND_SADDR
 0x00010000

	)

15 
	sfib_ruÀ_hdr
 {

16 
__u8
 
	mÁmûy
;

17 
__u8
 
	md°_Àn
;

18 
__u8
 
	m§c_Àn
;

19 
__u8
 
	mtos
;

21 
__u8
 
	mèbÀ
;

22 
__u8
 
	mªs1
;

23 
__u8
 
	mªs2
;

24 
__u8
 
	ma˘i⁄
;

26 
__u32
 
	mÊags
;

30 
	mFRA_UNSPEC
,

31 
	mFRA_DST
,

32 
	mFRA_SRC
,

33 
	mFRA_IIFNAME
,

34 
	#FRA_IFNAME
 
FRA_IIFNAME


	)

35 
	mFRA_GOTO
,

36 
	mFRA_UNUSED2
,

37 
	mFRA_PRIORITY
,

38 
	mFRA_UNUSED3
,

39 
	mFRA_UNUSED4
,

40 
	mFRA_UNUSED5
,

41 
	mFRA_FWMARK
,

42 
	mFRA_FLOW
,

43 
	mFRA_UNUSED6
,

44 
	mFRA_UNUSED7
,

45 
	mFRA_UNUSED8
,

46 
	mFRA_TABLE
,

47 
	mFRA_FWMASK
,

48 
	mFRA_OIFNAME
,

49 
	m__FRA_MAX


52 
	#FRA_MAX
 (
__FRA_MAX
 - 1)

	)

55 
	mFR_ACT_UNSPEC
,

56 
	mFR_ACT_TO_TBL
,

57 
	mFR_ACT_GOTO
,

58 
	mFR_ACT_NOP
,

59 
	mFR_ACT_RES3
,

60 
	mFR_ACT_RES4
,

61 
	mFR_ACT_BLACKHOLE
,

62 
	mFR_ACT_UNREACHABLE
,

63 
	mFR_ACT_PROHIBIT
,

64 
	m__FR_ACT_MAX
,

67 
	#FR_ACT_MAX
 (
__FR_ACT_MAX
 - 1)

	)

	@mylibnl/libnl-3.2.25/include/linux/gen_stats.h

1 #i‚de‡
__LINUX_GEN_STATS_H


2 
	#__LINUX_GEN_STATS_H


	)

4 
	~<löux/ty≥s.h
>

7 
	mTCA_STATS_UNSPEC
,

8 
	mTCA_STATS_BASIC
,

9 
	mTCA_STATS_RATE_EST
,

10 
	mTCA_STATS_QUEUE
,

11 
	mTCA_STATS_APP
,

12 
	m__TCA_STATS_MAX
,

14 
	#TCA_STATS_MAX
 (
__TCA_STATS_MAX
 - 1)

	)

21 
	sg√t_°©s_basic
 {

22 
__u64
 
	mbyãs
;

23 
__u32
 
	m∑ckës
;

25 
	sg√t_°©s_basic_∑cked
 {

26 
__u64
 
	mbyãs
;

27 
__u32
 
	m∑ckës
;

28 } 
__©åibuã__
 ((
∑cked
));

35 
	sg√t_°©s_øã_e°
 {

36 
__u32
 
	mbps
;

37 
__u32
 
	mµs
;

48 
	sg√t_°©s_queue
 {

49 
__u32
 
	mqÀn
;

50 
__u32
 
	mbacklog
;

51 
__u32
 
	mdr›s
;

52 
__u32
 
	mªqueues
;

53 
__u32
 
	movîlimôs
;

61 
	sg√t_e°im©‹
 {

62 sig√d 
	möãrvÆ
;

63 
	mewma_log
;

	@mylibnl/libnl-3.2.25/include/linux/genetlink.h

1 #i‚de‡
__LINUX_GENERIC_NETLINK_H


2 
	#__LINUX_GENERIC_NETLINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	#GENL_NAMSIZ
 16

	)

9 
	#GENL_MIN_ID
 
NLMSG_MIN_TYPE


	)

10 
	#GENL_MAX_ID
 1023

	)

12 
	sgílmsghdr
 {

13 
__u8
 
	mcmd
;

14 
__u8
 
	mvîsi⁄
;

15 
__u16
 
	mª£rved
;

18 
	#GENL_HDRLEN
 
	`NLMSG_ALIGN
((
gílmsghdr
))

	)

20 
	#GENL_ADMIN_PERM
 0x01

	)

21 
	#GENL_CMD_CAP_DO
 0x02

	)

22 
	#GENL_CMD_CAP_DUMP
 0x04

	)

23 
	#GENL_CMD_CAP_HASPOL
 0x08

	)

28 
	#GENL_ID_GENERATE
 0

	)

29 
	#GENL_ID_CTRL
 
NLMSG_MIN_TYPE


	)

36 
	mCTRL_CMD_UNSPEC
,

37 
	mCTRL_CMD_NEWFAMILY
,

38 
	mCTRL_CMD_DELFAMILY
,

39 
	mCTRL_CMD_GETFAMILY
,

40 
	mCTRL_CMD_NEWOPS
,

41 
	mCTRL_CMD_DELOPS
,

42 
	mCTRL_CMD_GETOPS
,

43 
	mCTRL_CMD_NEWMCAST_GRP
,

44 
	mCTRL_CMD_DELMCAST_GRP
,

45 
	mCTRL_CMD_GETMCAST_GRP
,

46 
	m__CTRL_CMD_MAX
,

49 
	#CTRL_CMD_MAX
 (
__CTRL_CMD_MAX
 - 1)

	)

52 
	mCTRL_ATTR_UNSPEC
,

53 
	mCTRL_ATTR_FAMILY_ID
,

54 
	mCTRL_ATTR_FAMILY_NAME
,

55 
	mCTRL_ATTR_VERSION
,

56 
	mCTRL_ATTR_HDRSIZE
,

57 
	mCTRL_ATTR_MAXATTR
,

58 
	mCTRL_ATTR_OPS
,

59 
	mCTRL_ATTR_MCAST_GROUPS
,

60 
	m__CTRL_ATTR_MAX
,

63 
	#CTRL_ATTR_MAX
 (
__CTRL_ATTR_MAX
 - 1)

	)

66 
	mCTRL_ATTR_OP_UNSPEC
,

67 
	mCTRL_ATTR_OP_ID
,

68 
	mCTRL_ATTR_OP_FLAGS
,

69 
	m__CTRL_ATTR_OP_MAX
,

72 
	#CTRL_ATTR_OP_MAX
 (
__CTRL_ATTR_OP_MAX
 - 1)

	)

75 
	mCTRL_ATTR_MCAST_GRP_UNSPEC
,

76 
	mCTRL_ATTR_MCAST_GRP_NAME
,

77 
	mCTRL_ATTR_MCAST_GRP_ID
,

78 
	m__CTRL_ATTR_MCAST_GRP_MAX
,

81 
	#CTRL_ATTR_MCAST_GRP_MAX
 (
__CTRL_ATTR_MCAST_GRP_MAX
 - 1)

	)

	@mylibnl/libnl-3.2.25/include/linux/if.h

19 #i‚de‡
_LINUX_IF_H


20 
	#_LINUX_IF_H


	)

22 
	#IFNAMSIZ
 16

	)

23 
	#IFALIASZ
 256

	)

26 
	#IFF_UP
 0x1

	)

27 
	#IFF_BROADCAST
 0x2

	)

28 
	#IFF_DEBUG
 0x4

	)

29 
	#IFF_LOOPBACK
 0x8

	)

30 
	#IFF_POINTOPOINT
 0x10

	)

31 
	#IFF_NOTRAILERS
 0x20

	)

32 
	#IFF_RUNNING
 0x40

	)

33 
	#IFF_NOARP
 0x80

	)

34 
	#IFF_PROMISC
 0x100

	)

35 
	#IFF_ALLMULTI
 0x200

	)

37 
	#IFF_MASTER
 0x400

	)

38 
	#IFF_SLAVE
 0x800

	)

40 
	#IFF_MULTICAST
 0x1000

	)

42 
	#IFF_PORTSEL
 0x2000

	)

43 
	#IFF_AUTOMEDIA
 0x4000

	)

44 
	#IFF_DYNAMIC
 0x8000

	)

46 
	#IFF_LOWER_UP
 0x10000

	)

47 
	#IFF_DORMANT
 0x20000

	)

49 
	#IFF_ECHO
 0x40000

	)

51 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|
IFF_ECHO
|\

52 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

55 
	#IFF_802_1Q_VLAN
 0x1

	)

56 
	#IFF_EBRIDGE
 0x2

	)

57 
	#IFF_SLAVE_INACTIVE
 0x4

	)

58 
	#IFF_MASTER_8023AD
 0x8

	)

59 
	#IFF_MASTER_ALB
 0x10

	)

60 
	#IFF_BONDING
 0x20

	)

61 
	#IFF_SLAVE_NEEDARP
 0x40

	)

62 
	#IFF_ISATAP
 0x80

	)

63 
	#IFF_MASTER_ARPMON
 0x100

	)

64 
	#IFF_WAN_HDLC
 0x200

	)

65 
	#IFF_XMIT_DST_RELEASE
 0x400

	)

68 
	#IFF_DONT_BRIDGE
 0x800

	)

69 
	#IFF_IN_NETPOLL
 0x1000

	)

70 
	#IFF_DISABLE_NETPOLL
 0x2000

	)

71 
	#IFF_MACVLAN_PORT
 0x4000

	)

72 
	#IFF_BRIDGE_PORT
 0x8000

	)

73 
	#IFF_OVS_DATAPATH
 0x10000

	)

76 
	#IF_GET_IFACE
 0x0001

	)

77 
	#IF_GET_PROTO
 0x0002

	)

80 
	#IF_IFACE_V35
 0x1000

	)

81 
	#IF_IFACE_V24
 0x1001

	)

82 
	#IF_IFACE_X21
 0x1002

	)

83 
	#IF_IFACE_T1
 0x1003

	)

84 
	#IF_IFACE_E1
 0x1004

	)

85 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

86 
	#IF_IFACE_X21D
 0x1006

	)

89 
	#IF_PROTO_HDLC
 0x2000

	)

90 
	#IF_PROTO_PPP
 0x2001

	)

91 
	#IF_PROTO_CISCO
 0x2002

	)

92 
	#IF_PROTO_FR
 0x2003

	)

93 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

94 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

95 
	#IF_PROTO_X25
 0x2006

	)

96 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

97 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

98 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

99 
	#IF_PROTO_FR_PVC
 0x200A

	)

100 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

101 
	#IF_PROTO_RAW
 0x200C

	)

105 
	mIF_OPER_UNKNOWN
,

106 
	mIF_OPER_NOTPRESENT
,

107 
	mIF_OPER_DOWN
,

108 
	mIF_OPER_LOWERLAYERDOWN
,

109 
	mIF_OPER_TESTING
,

110 
	mIF_OPER_DORMANT
,

111 
	mIF_OPER_UP
,

116 
	mIF_LINK_MODE_DEFAULT
,

117 
	mIF_LINK_MODE_DORMANT
,

122 
	mIF_CARRIER_DOWN
,

123 
	mIF_CARRIER_UP


136 
	sifm≠
 {

137 
	mmem_°¨t
;

138 
	mmem_íd
;

139 
	mba£_addr
;

140 
	múq
;

141 
	mdma
;

142 
	mp‹t
;

	@mylibnl/libnl-3.2.25/include/linux/if_addr.h

1 #i‚de‡
__LINUX_IF_ADDR_H


2 
	#__LINUX_IF_ADDR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	siÁddrmsg
 {

8 
__u8
 
	miÁ_Ámûy
;

9 
__u8
 
	miÁ_¥efixÀn
;

10 
__u8
 
	miÁ_Êags
;

11 
__u8
 
	miÁ_sc›e
;

12 
__u32
 
	miÁ_ödex
;

26 
	mIFA_UNSPEC
,

27 
	mIFA_ADDRESS
,

28 
	mIFA_LOCAL
,

29 
	mIFA_LABEL
,

30 
	mIFA_BROADCAST
,

31 
	mIFA_ANYCAST
,

32 
	mIFA_CACHEINFO
,

33 
	mIFA_MULTICAST
,

34 
	mIFA_FLAGS
,

35 
	m__IFA_MAX
,

38 
	#IFA_MAX
 (
__IFA_MAX
 - 1)

	)

41 
	#IFA_F_SECONDARY
 0x01

	)

42 
	#IFA_F_TEMPORARY
 
IFA_F_SECONDARY


	)

44 
	#IFA_F_NODAD
 0x02

	)

45 
	#IFA_F_OPTIMISTIC
 0x04

	)

46 
	#IFA_F_DADFAILED
 0x08

	)

47 
	#IFA_F_HOMEADDRESS
 0x10

	)

48 
	#IFA_F_DEPRECATED
 0x20

	)

49 
	#IFA_F_TENTATIVE
 0x40

	)

50 
	#IFA_F_PERMANENT
 0x80

	)

51 
	#IFA_F_MANAGETEMPADDR
 0x100

	)

52 
	#IFA_F_NOPREFIXROUTE
 0x200

	)

54 
	siÁ_ˇcheöfo
 {

55 
__u32
 
	miÁ_¥e„ªd
;

56 
__u32
 
	miÁ_vÆid
;

57 
__u32
 
	mc°amp
;

58 
__u32
 
	mt°amp
;

	@mylibnl/libnl-3.2.25/include/linux/if_arp.h

23 #i‚de‡
_LINUX_IF_ARP_H


24 
	#_LINUX_IF_ARP_H


	)

26 
	~<löux/√tdevi˚.h
>

29 
	#ARPHRD_NETROM
 0

	)

30 
	#ARPHRD_ETHER
 1

	)

31 
	#ARPHRD_EETHER
 2

	)

32 
	#ARPHRD_AX25
 3

	)

33 
	#ARPHRD_PRONET
 4

	)

34 
	#ARPHRD_CHAOS
 5

	)

35 
	#ARPHRD_IEEE802
 6

	)

36 
	#ARPHRD_ARCNET
 7

	)

37 
	#ARPHRD_APPLETLK
 8

	)

38 
	#ARPHRD_DLCI
 15

	)

39 
	#ARPHRD_ATM
 19

	)

40 
	#ARPHRD_METRICOM
 23

	)

41 
	#ARPHRD_IEEE1394
 24

	)

42 
	#ARPHRD_EUI64
 27

	)

43 
	#ARPHRD_INFINIBAND
 32

	)

46 
	#ARPHRD_SLIP
 256

	)

47 
	#ARPHRD_CSLIP
 257

	)

48 
	#ARPHRD_SLIP6
 258

	)

49 
	#ARPHRD_CSLIP6
 259

	)

50 
	#ARPHRD_RSRVD
 260

	)

51 
	#ARPHRD_ADAPT
 264

	)

52 
	#ARPHRD_ROSE
 270

	)

53 
	#ARPHRD_X25
 271

	)

54 
	#ARPHRD_HWX25
 272

	)

55 
	#ARPHRD_CAN
 280

	)

56 
	#ARPHRD_PPP
 512

	)

57 
	#ARPHRD_CISCO
 513

	)

58 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

59 
	#ARPHRD_LAPB
 516

	)

60 
	#ARPHRD_DDCMP
 517

	)

61 
	#ARPHRD_RAWHDLC
 518

	)

63 
	#ARPHRD_TUNNEL
 768

	)

64 
	#ARPHRD_TUNNEL6
 769

	)

65 
	#ARPHRD_FRAD
 770

	)

66 
	#ARPHRD_SKIP
 771

	)

67 
	#ARPHRD_LOOPBACK
 772

	)

68 
	#ARPHRD_LOCALTLK
 773

	)

69 
	#ARPHRD_FDDI
 774

	)

70 
	#ARPHRD_BIF
 775

	)

71 
	#ARPHRD_SIT
 776

	)

72 
	#ARPHRD_IPDDP
 777

	)

73 
	#ARPHRD_IPGRE
 778

	)

74 
	#ARPHRD_PIMREG
 779

	)

75 
	#ARPHRD_HIPPI
 780

	)

76 
	#ARPHRD_ASH
 781

	)

77 
	#ARPHRD_ECONET
 782

	)

78 
	#ARPHRD_IRDA
 783

	)

80 
	#ARPHRD_FCPP
 784

	)

81 
	#ARPHRD_FCAL
 785

	)

82 
	#ARPHRD_FCPL
 786

	)

83 
	#ARPHRD_FCFABRIC
 787

	)

85 
	#ARPHRD_IEEE802_TR
 800

	)

86 
	#ARPHRD_IEEE80211
 801

	)

87 
	#ARPHRD_IEEE80211_PRISM
 802

	)

88 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

89 
	#ARPHRD_IEEE802154
 804

	)

91 
	#ARPHRD_PHONET
 820

	)

92 
	#ARPHRD_PHONET_PIPE
 821

	)

93 
	#ARPHRD_CAIF
 822

	)

95 
	#ARPHRD_VOID
 0xFFFF

	)

96 
	#ARPHRD_NONE
 0xFFFE

	)

99 
	#ARPOP_REQUEST
 1

	)

100 
	#ARPOP_REPLY
 2

	)

101 
	#ARPOP_RREQUEST
 3

	)

102 
	#ARPOP_RREPLY
 4

	)

103 
	#ARPOP_InREQUEST
 8

	)

104 
	#ARPOP_InREPLY
 9

	)

105 
	#ARPOP_NAK
 10

	)

109 
	s¨¥eq
 {

110 
sockaddr
 
	m¨p_∑
;

111 
sockaddr
 
	m¨p_ha
;

112 
	m¨p_Êags
;

113 
sockaddr
 
	m¨p_√tmask
;

114 
	m¨p_dev
[16];

117 
	s¨¥eq_ﬁd
 {

118 
sockaddr
 
	m¨p_∑
;

119 
sockaddr
 
	m¨p_ha
;

120 
	m¨p_Êags
;

121 
sockaddr
 
	m¨p_√tmask
;

125 
	#ATF_COM
 0x02

	)

126 
	#ATF_PERM
 0x04

	)

127 
	#ATF_PUBL
 0x08

	)

128 
	#ATF_USETRAILERS
 0x10

	)

129 
	#ATF_NETMASK
 0x20

	)

131 
	#ATF_DONTPUB
 0x40

	)

137 
	s¨phdr
 {

138 
__be16
 
	m¨_hrd
;

139 
__be16
 
	m¨_¥o
;

140 
	m¨_h 
;

141 
	m¨_∂n
;

142 
__be16
 
	m¨_›
;

148 
	m¨_sha
[
ETH_ALEN
];

149 
	m¨_sù
[4];

150 
	m¨_tha
[
ETH_ALEN
];

151 
	m¨_tù
[4];

	@mylibnl/libnl-3.2.25/include/linux/if_bridge.h

13 #i‚de‡
_UAPI_LINUX_IF_BRIDGE_H


14 
	#_UAPI_LINUX_IF_BRIDGE_H


	)

16 
	~<löux/ty≥s.h
>

18 
	#SYSFS_BRIDGE_ATTR
 "bridge"

	)

19 
	#SYSFS_BRIDGE_FDB
 "brf‹w¨d"

	)

20 
	#SYSFS_BRIDGE_PORT_SUBDIR
 "brif"

	)

21 
	#SYSFS_BRIDGE_PORT_ATTR
 "bΩ‹t"

	)

22 
	#SYSFS_BRIDGE_PORT_LINK
 "bridge"

	)

24 
	#BRCTL_VERSION
 1

	)

26 
	#BRCTL_GET_VERSION
 0

	)

27 
	#BRCTL_GET_BRIDGES
 1

	)

28 
	#BRCTL_ADD_BRIDGE
 2

	)

29 
	#BRCTL_DEL_BRIDGE
 3

	)

30 
	#BRCTL_ADD_IF
 4

	)

31 
	#BRCTL_DEL_IF
 5

	)

32 
	#BRCTL_GET_BRIDGE_INFO
 6

	)

33 
	#BRCTL_GET_PORT_LIST
 7

	)

34 
	#BRCTL_SET_BRIDGE_FORWARD_DELAY
 8

	)

35 
	#BRCTL_SET_BRIDGE_HELLO_TIME
 9

	)

36 
	#BRCTL_SET_BRIDGE_MAX_AGE
 10

	)

37 
	#BRCTL_SET_AGEING_TIME
 11

	)

38 
	#BRCTL_SET_GC_INTERVAL
 12

	)

39 
	#BRCTL_GET_PORT_INFO
 13

	)

40 
	#BRCTL_SET_BRIDGE_STP_STATE
 14

	)

41 
	#BRCTL_SET_BRIDGE_PRIORITY
 15

	)

42 
	#BRCTL_SET_PORT_PRIORITY
 16

	)

43 
	#BRCTL_SET_PATH_COST
 17

	)

44 
	#BRCTL_GET_FDB_ENTRIES
 18

	)

46 
	#BR_STATE_DISABLED
 0

	)

47 
	#BR_STATE_LISTENING
 1

	)

48 
	#BR_STATE_LEARNING
 2

	)

49 
	#BR_STATE_FORWARDING
 3

	)

50 
	#BR_STATE_BLOCKING
 4

	)

52 
	s__bridge_öfo
 {

53 
__u64
 
	mdesig«ãd_roŸ
;

54 
__u64
 
	mbridge_id
;

55 
__u32
 
	mroŸ_∑th_co°
;

56 
__u32
 
	mmax_age
;

57 
__u32
 
	mhñlo_time
;

58 
__u32
 
	mf‹w¨d_dñay
;

59 
__u32
 
	mbridge_max_age
;

60 
__u32
 
	mbridge_hñlo_time
;

61 
__u32
 
	mbridge_f‹w¨d_dñay
;

62 
__u8
 
	mt›ﬁogy_ch™ge
;

63 
__u8
 
	mt›ﬁogy_ch™ge_dëe˘ed
;

64 
__u8
 
	mroŸ_p‹t
;

65 
__u8
 
	m°p_íabÀd
;

66 
__u32
 
	mageög_time
;

67 
__u32
 
	mgc_öãrvÆ
;

68 
__u32
 
	mhñlo_timî_vÆue
;

69 
__u32
 
	mt˙_timî_vÆue
;

70 
__u32
 
	mt›ﬁogy_ch™ge_timî_vÆue
;

71 
__u32
 
	mgc_timî_vÆue
;

74 
	s__p‹t_öfo
 {

75 
__u64
 
	mdesig«ãd_roŸ
;

76 
__u64
 
	mdesig«ãd_bridge
;

77 
__u16
 
	mp‹t_id
;

78 
__u16
 
	mdesig«ãd_p‹t
;

79 
__u32
 
	m∑th_co°
;

80 
__u32
 
	mdesig«ãd_co°
;

81 
__u8
 
	m°©e
;

82 
__u8
 
	mt›_ch™ge_ack
;

83 
__u8
 
	mc⁄fig_≥ndög
;

84 
__u8
 
	munu£d0
;

85 
__u32
 
	mmesßge_age_timî_vÆue
;

86 
__u32
 
	mf‹w¨d_dñay_timî_vÆue
;

87 
__u32
 
	mhﬁd_timî_vÆue
;

90 
	s__fdb_íåy
 {

91 
__u8
 
	mmac_addr
[6];

92 
__u8
 
	mp‹t_no
;

93 
__u8
 
	mis_loˇl
;

94 
__u32
 
	mageög_timî_vÆue
;

95 
__u8
 
	mp‹t_hi
;

96 
__u8
 
	m∑d0
;

97 
__u16
 
	munu£d
;

101 
	#BRIDGE_FLAGS_MASTER
 1

	)

102 
	#BRIDGE_FLAGS_SELF
 2

	)

104 
	#BRIDGE_MODE_VEB
 0

	)

105 
	#BRIDGE_MODE_VEPA
 1

	)

114 
	mIFLA_BRIDGE_FLAGS
,

115 
	mIFLA_BRIDGE_MODE
,

116 
	m__IFLA_BRIDGE_MAX
,

118 
	#IFLA_BRIDGE_MAX
 (
__IFLA_BRIDGE_MAX
 - 1)

	)

131 
	mMDBA_UNSPEC
,

132 
	mMDBA_MDB
,

133 
	mMDBA_ROUTER
,

134 
	m__MDBA_MAX
,

136 
	#MDBA_MAX
 (
__MDBA_MAX
 - 1)

	)

139 
	mMDBA_MDB_UNSPEC
,

140 
	mMDBA_MDB_ENTRY
,

141 
	m__MDBA_MDB_MAX
,

143 
	#MDBA_MDB_MAX
 (
__MDBA_MDB_MAX
 - 1)

	)

146 
	mMDBA_MDB_ENTRY_UNSPEC
,

147 
	mMDBA_MDB_ENTRY_INFO
,

148 
	m__MDBA_MDB_ENTRY_MAX
,

150 
	#MDBA_MDB_ENTRY_MAX
 (
__MDBA_MDB_ENTRY_MAX
 - 1)

	)

153 
	mMDBA_ROUTER_UNSPEC
,

154 
	mMDBA_ROUTER_PORT
,

155 
	m__MDBA_ROUTER_MAX
,

157 
	#MDBA_ROUTER_MAX
 (
__MDBA_ROUTER_MAX
 - 1)

	)

159 
	sbr_p‹t_msg
 {

160 
__u8
 
	mÁmûy
;

161 
__u32
 
	mifödex
;

164 
	sbr_mdb_íåy
 {

165 
__u32
 
	mifödex
;

166 
	#MDB_TEMPORARY
 0

	)

167 
	#MDB_PERMANENT
 1

	)

168 
__u8
 
	m°©e
;

171 
__be32
 
	mù4
;

172 
ö6_addr
 
	mù6
;

173 } 
	mu
;

174 
__be16
 
	m¥Ÿo
;

175 } 
	maddr
;

179 
	mMDBA_SET_ENTRY_UNSPEC
,

180 
	mMDBA_SET_ENTRY
,

181 
	m__MDBA_SET_ENTRY_MAX
,

183 
	#MDBA_SET_ENTRY_MAX
 (
__MDBA_SET_ENTRY_MAX
 - 1)

	)

	@mylibnl/libnl-3.2.25/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_IP
 0x0800

	)

46 
	#ETH_P_X25
 0x0805

	)

47 
	#ETH_P_ARP
 0x0806

	)

48 
	#ETH_P_BPQ
 0x08FF

	)

49 
	#ETH_P_IEEEPUP
 0x0a00

	)

50 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

51 
	#ETH_P_DEC
 0x6000

	)

52 
	#ETH_P_DNA_DL
 0x6001

	)

53 
	#ETH_P_DNA_RC
 0x6002

	)

54 
	#ETH_P_DNA_RT
 0x6003

	)

55 
	#ETH_P_LAT
 0x6004

	)

56 
	#ETH_P_DIAG
 0x6005

	)

57 
	#ETH_P_CUST
 0x6006

	)

58 
	#ETH_P_SCA
 0x6007

	)

59 
	#ETH_P_TEB
 0x6558

	)

60 
	#ETH_P_RARP
 0x8035

	)

61 
	#ETH_P_ATALK
 0x809B

	)

62 
	#ETH_P_AARP
 0x80F3

	)

63 
	#ETH_P_8021Q
 0x8100

	)

64 
	#ETH_P_IPX
 0x8137

	)

65 
	#ETH_P_IPV6
 0x86DD

	)

66 
	#ETH_P_PAUSE
 0x8808

	)

67 
	#ETH_P_SLOW
 0x8809

	)

68 
	#ETH_P_WCCP
 0x883E

	)

70 
	#ETH_P_PPP_DISC
 0x8863

	)

71 
	#ETH_P_PPP_SES
 0x8864

	)

72 
	#ETH_P_MPLS_UC
 0x8847

	)

73 
	#ETH_P_MPLS_MC
 0x8848

	)

74 
	#ETH_P_ATMMPOA
 0x884¯

	)

75 
	#ETH_P_LINK_CTL
 0x886¯

	)

76 
	#ETH_P_ATMFATE
 0x8884

	)

79 
	#ETH_P_PAE
 0x888E

	)

80 
	#ETH_P_AOE
 0x88A2

	)

81 
	#ETH_P_TIPC
 0x88CA

	)

82 
	#ETH_P_1588
 0x88F7

	)

83 
	#ETH_P_FCOE
 0x8906

	)

84 
	#ETH_P_FIP
 0x8914

	)

85 
	#ETH_P_EDSA
 0xDADA

	)

91 
	#ETH_P_802_3
 0x0001

	)

92 
	#ETH_P_AX25
 0x0002

	)

93 
	#ETH_P_ALL
 0x0003

	)

94 
	#ETH_P_802_2
 0x0004

	)

95 
	#ETH_P_SNAP
 0x0005

	)

96 
	#ETH_P_DDCMP
 0x0006

	)

97 
	#ETH_P_WAN_PPP
 0x0007

	)

98 
	#ETH_P_PPP_MP
 0x0008

	)

99 
	#ETH_P_LOCALTALK
 0x0009

	)

100 
	#ETH_P_CAN
 0x000C

	)

101 
	#ETH_P_PPPTALK
 0x0010

	)

102 
	#ETH_P_TR_802_2
 0x0011

	)

103 
	#ETH_P_MOBITEX
 0x0015

	)

104 
	#ETH_P_CONTROL
 0x0016

	)

105 
	#ETH_P_IRDA
 0x0017

	)

106 
	#ETH_P_ECONET
 0x0018

	)

107 
	#ETH_P_HDLC
 0x0019

	)

108 
	#ETH_P_ARCNET
 0x001A

	)

109 
	#ETH_P_DSA
 0x001B

	)

110 
	#ETH_P_TRAILER
 0x001C

	)

111 
	#ETH_P_PHONET
 0x00F5

	)

112 
	#ETH_P_IEEE802154
 0x00F6

	)

113 
	#ETH_P_CAIF
 0x00F7

	)

119 
	sëhhdr
 {

120 
	mh_de°
[
ETH_ALEN
];

121 
	mh_sour˚
[
ETH_ALEN
];

122 
__be16
 
	mh_¥Ÿo
;

123 } 
__©åibuã__
((
∑cked
));

	@mylibnl/libnl-3.2.25/include/linux/if_link.h

1 #i‚de‡
_UAPI_LINUX_IF_LINK_H


2 
	#_UAPI_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s
 {

9 
__u32
 
	mrx_∑ckës
;

10 
__u32
 
	mtx_∑ckës
;

11 
__u32
 
	mrx_byãs
;

12 
__u32
 
	mtx_byãs
;

13 
__u32
 
	mrx_îr‹s
;

14 
__u32
 
	mtx_îr‹s
;

15 
__u32
 
	mrx_dr›≥d
;

16 
__u32
 
	mtx_dr›≥d
;

17 
__u32
 
	mmu…iˇ°
;

18 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

41 
	sπ∆_lök_°©s64
 {

42 
__u64
 
	mrx_∑ckës
;

43 
__u64
 
	mtx_∑ckës
;

44 
__u64
 
	mrx_byãs
;

45 
__u64
 
	mtx_byãs
;

46 
__u64
 
	mrx_îr‹s
;

47 
__u64
 
	mtx_îr‹s
;

48 
__u64
 
	mrx_dr›≥d
;

49 
__u64
 
	mtx_dr›≥d
;

50 
__u64
 
	mmu…iˇ°
;

51 
__u64
 
	mcﬁlisi⁄s
;

54 
__u64
 
	mrx_Àngth_îr‹s
;

55 
__u64
 
	mrx_ovî_îr‹s
;

56 
__u64
 
	mrx_¸c_îr‹s
;

57 
__u64
 
	mrx_‰ame_îr‹s
;

58 
__u64
 
	mrx_fifo_îr‹s
;

59 
__u64
 
	mrx_mis£d_îr‹s
;

62 
__u64
 
	mtx_ab‹ãd_îr‹s
;

63 
__u64
 
	mtx_ˇºõr_îr‹s
;

64 
__u64
 
	mtx_fifo_îr‹s
;

65 
__u64
 
	mtx_hóπbót_îr‹s
;

66 
__u64
 
	mtx_wödow_îr‹s
;

69 
__u64
 
	mrx_com¥es£d
;

70 
__u64
 
	mtx_com¥es£d
;

74 
	sπ∆_lök_ifm≠
 {

75 
__u64
 
	mmem_°¨t
;

76 
__u64
 
	mmem_íd
;

77 
__u64
 
	mba£_addr
;

78 
__u16
 
	múq
;

79 
__u8
 
	mdma
;

80 
__u8
 
	mp‹t
;

102 
	mIFLA_UNSPEC
,

103 
	mIFLA_ADDRESS
,

104 
	mIFLA_BROADCAST
,

105 
	mIFLA_IFNAME
,

106 
	mIFLA_MTU
,

107 
	mIFLA_LINK
,

108 
	mIFLA_QDISC
,

109 
	mIFLA_STATS
,

110 
	mIFLA_COST
,

111 
	#IFLA_COST
 
IFLA_COST


	)

112 
	mIFLA_PRIORITY
,

113 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

114 
	mIFLA_MASTER
,

115 
	#IFLA_MASTER
 
IFLA_MASTER


	)

116 
	mIFLA_WIRELESS
,

117 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

118 
	mIFLA_PROTINFO
,

119 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

120 
	mIFLA_TXQLEN
,

121 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

122 
	mIFLA_MAP
,

123 
	#IFLA_MAP
 
IFLA_MAP


	)

124 
	mIFLA_WEIGHT
,

125 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

126 
	mIFLA_OPERSTATE
,

127 
	mIFLA_LINKMODE
,

128 
	mIFLA_LINKINFO
,

129 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

130 
	mIFLA_NET_NS_PID
,

131 
	mIFLA_IFALIAS
,

132 
	mIFLA_NUM_VF
,

133 
	mIFLA_VFINFO_LIST
,

134 
	mIFLA_STATS64
,

135 
	mIFLA_VF_PORTS
,

136 
	mIFLA_PORT_SELF
,

137 
	mIFLA_AF_SPEC
,

138 
	mIFLA_GROUP
,

139 
	mIFLA_NET_NS_FD
,

140 
	mIFLA_EXT_MASK
,

141 
	mIFLA_PROMISCUITY
,

142 
	#IFLA_PROMISCUITY
 
IFLA_PROMISCUITY


	)

143 
	mIFLA_NUM_TX_QUEUES
,

144 
	mIFLA_NUM_RX_QUEUES
,

145 
	mIFLA_CARRIER
,

146 
	mIFLA_PHYS_PORT_ID
,

147 
	m__IFLA_MAX


151 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

154 
	mIFLA_INET_UNSPEC
,

155 
	mIFLA_INET_CONF
,

156 
	m__IFLA_INET_MAX
,

159 
	#IFLA_INET_MAX
 (
__IFLA_INET_MAX
 - 1)

	)

192 
	mIFLA_INET6_UNSPEC
,

193 
	mIFLA_INET6_FLAGS
,

194 
	mIFLA_INET6_CONF
,

195 
	mIFLA_INET6_STATS
,

196 
	mIFLA_INET6_MCAST
,

197 
	mIFLA_INET6_CACHEINFO
,

198 
	mIFLA_INET6_ICMP6STATS
,

199 
	m__IFLA_INET6_MAX


202 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

205 
	mBRIDGE_MODE_UNSPEC
,

206 
	mBRIDGE_MODE_HAIRPIN
,

210 
	mIFLA_BRPORT_UNSPEC
,

211 
	mIFLA_BRPORT_STATE
,

212 
	mIFLA_BRPORT_PRIORITY
,

213 
	mIFLA_BRPORT_COST
,

214 
	mIFLA_BRPORT_MODE
,

215 
	mIFLA_BRPORT_GUARD
,

216 
	mIFLA_BRPORT_PROTECT
,

217 
	mIFLA_BRPORT_FAST_LEAVE
,

218 
	m__IFLA_BRPORT_MAX


220 
	#IFLA_BRPORT_MAX
 (
__IFLA_BRPORT_MAX
 - 1)

	)

222 
	siÊa_ˇcheöfo
 {

223 
__u32
 
	mmax_ªasm_Àn
;

224 
__u32
 
	mt°amp
;

225 
__u32
 
	mªachabÀ_time
;

226 
__u32
 
	mªå™s_time
;

230 
	mIFLA_INFO_UNSPEC
,

231 
	mIFLA_INFO_KIND
,

232 
	mIFLA_INFO_DATA
,

233 
	mIFLA_INFO_XSTATS
,

234 
	m__IFLA_INFO_MAX
,

237 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

242 
	mIFLA_VLAN_UNSPEC
,

243 
	mIFLA_VLAN_ID
,

244 
	mIFLA_VLAN_FLAGS
,

245 
	mIFLA_VLAN_EGRESS_QOS
,

246 
	mIFLA_VLAN_INGRESS_QOS
,

247 
	mIFLA_VLAN_PROTOCOL
,

248 
	m__IFLA_VLAN_MAX
,

251 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

253 
	siÊa_vœn_Êags
 {

254 
__u32
 
	mÊags
;

255 
__u32
 
	mmask
;

259 
	mIFLA_VLAN_QOS_UNSPEC
,

260 
	mIFLA_VLAN_QOS_MAPPING
,

261 
	m__IFLA_VLAN_QOS_MAX


264 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

266 
	siÊa_vœn_qos_m≠pög
 {

267 
__u32
 
	m‰om
;

268 
__u32
 
	mto
;

273 
	mIFLA_MACVLAN_UNSPEC
,

274 
	mIFLA_MACVLAN_MODE
,

275 
	mIFLA_MACVLAN_FLAGS
,

276 
	m__IFLA_MACVLAN_MAX
,

279 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

281 
	emacvœn_mode
 {

282 
	mMACVLAN_MODE_PRIVATE
 = 1,

283 
	mMACVLAN_MODE_VEPA
 = 2,

284 
	mMACVLAN_MODE_BRIDGE
 = 4,

285 
	mMACVLAN_MODE_PASSTHRU
 = 8,

288 
	#MACVLAN_FLAG_NOPROMISC
 1

	)

292 
	mIFLA_VXLAN_UNSPEC
,

293 
	mIFLA_VXLAN_ID
,

294 
	mIFLA_VXLAN_GROUP
,

295 
	mIFLA_VXLAN_LINK
,

296 
	mIFLA_VXLAN_LOCAL
,

297 
	mIFLA_VXLAN_TTL
,

298 
	mIFLA_VXLAN_TOS
,

299 
	mIFLA_VXLAN_LEARNING
,

300 
	mIFLA_VXLAN_AGEING
,

301 
	mIFLA_VXLAN_LIMIT
,

302 
	mIFLA_VXLAN_PORT_RANGE
,

303 
	mIFLA_VXLAN_PROXY
,

304 
	mIFLA_VXLAN_RSC
,

305 
	mIFLA_VXLAN_L2MISS
,

306 
	mIFLA_VXLAN_L3MISS
,

307 
	m__IFLA_VXLAN_MAX


309 
	#IFLA_VXLAN_MAX
 (
__IFLA_VXLAN_MAX
 - 1)

	)

311 
	siÊa_vxœn_p‹t_ønge
 {

312 
__be16
 
	mlow
;

313 
__be16
 
	mhigh
;

317 
	mVETH_INFO_UNSPEC
,

318 
	mVETH_INFO_PEER
,

320 
	m__VETH_INFO_MAX


321 
	#VETH_INFO_MAX
 (
__VETH_INFO_MAX
 - 1)

	)

327 
	mIFLA_VF_INFO_UNSPEC
,

328 
	mIFLA_VF_INFO
,

329 
	m__IFLA_VF_INFO_MAX
,

332 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

335 
	mIFLA_VF_UNSPEC
,

336 
	mIFLA_VF_MAC
,

337 
	mIFLA_VF_VLAN
,

338 
	mIFLA_VF_TX_RATE
,

339 
	mIFLA_VF_SPOOFCHK
,

340 
	m__IFLA_VF_MAX
,

343 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

345 
	siÊa_vf_mac
 {

346 
__u32
 
	mvf
;

347 
__u8
 
	mmac
[32];

350 
	siÊa_vf_vœn
 {

351 
__u32
 
	mvf
;

352 
__u32
 
	mvœn
;

353 
__u32
 
	mqos
;

356 
	siÊa_vf_tx_øã
 {

357 
__u32
 
	mvf
;

358 
__u32
 
	møã
;

361 
	siÊa_vf_•oofchk
 {

362 
__u32
 
	mvf
;

363 
__u32
 
	m£âög
;

382 
	mIFLA_VF_PORT_UNSPEC
,

383 
	mIFLA_VF_PORT
,

384 
	m__IFLA_VF_PORT_MAX
,

387 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

390 
	mIFLA_PORT_UNSPEC
,

391 
	mIFLA_PORT_VF
,

392 
	mIFLA_PORT_PROFILE
,

393 
	mIFLA_PORT_VSI_TYPE
,

394 
	mIFLA_PORT_INSTANCE_UUID
,

395 
	mIFLA_PORT_HOST_UUID
,

396 
	mIFLA_PORT_REQUEST
,

397 
	mIFLA_PORT_RESPONSE
,

398 
	m__IFLA_PORT_MAX
,

401 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

403 
	#PORT_PROFILE_MAX
 40

	)

404 
	#PORT_UUID_MAX
 16

	)

405 
	#PORT_SELF_VF
 -1

	)

408 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

409 
	mPORT_REQUEST_PREASSOCIATE_RR
,

410 
	mPORT_REQUEST_ASSOCIATE
,

411 
	mPORT_REQUEST_DISASSOCIATE
,

415 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

416 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

417 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

418 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

419 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

420 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

421 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

423 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

424 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

425 
	mPORT_PROFILE_RESPONSE_INVALID
,

426 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

427 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

428 
	mPORT_PROFILE_RESPONSE_ERROR
,

431 
	siÊa_p‹t_vsi
 {

432 
__u8
 
	mvsi_mgr_id
;

433 
__u8
 
	mvsi_ty≥_id
[3];

434 
__u8
 
	mvsi_ty≥_vîsi⁄
;

435 
__u8
 
	m∑d
[3];

442 
	mIFLA_IPOIB_UNSPEC
,

443 
	mIFLA_IPOIB_PKEY
,

444 
	mIFLA_IPOIB_MODE
,

445 
	mIFLA_IPOIB_UMCAST
,

446 
	m__IFLA_IPOIB_MAX


450 
	mIPOIB_MODE_DATAGRAM
 = 0,

451 
	mIPOIB_MODE_CONNECTED
 = 1,

454 
	#IFLA_IPOIB_MAX
 (
__IFLA_IPOIB_MAX
 - 1)

	)

	@mylibnl/libnl-3.2.25/include/linux/if_tunnel.h

1 #i‚de‡
_UAPI_IF_TUNNEL_H_


2 
	#_UAPI_IF_TUNNEL_H_


	)

4 
	~<löux/ty≥s.h
>

5 
	~<asm/byã‹dî.h
>

8 
	#SIOCGETTUNNEL
 (
SIOCDEVPRIVATE
 + 0)

	)

9 
	#SIOCADDTUNNEL
 (
SIOCDEVPRIVATE
 + 1)

	)

10 
	#SIOCDELTUNNEL
 (
SIOCDEVPRIVATE
 + 2)

	)

11 
	#SIOCCHGTUNNEL
 (
SIOCDEVPRIVATE
 + 3)

	)

12 
	#SIOCGETPRL
 (
SIOCDEVPRIVATE
 + 4)

	)

13 
	#SIOCADDPRL
 (
SIOCDEVPRIVATE
 + 5)

	)

14 
	#SIOCDELPRL
 (
SIOCDEVPRIVATE
 + 6)

	)

15 
	#SIOCCHGPRL
 (
SIOCDEVPRIVATE
 + 7)

	)

16 
	#SIOCGET6RD
 (
SIOCDEVPRIVATE
 + 8)

	)

17 
	#SIOCADD6RD
 (
SIOCDEVPRIVATE
 + 9)

	)

18 
	#SIOCDEL6RD
 (
SIOCDEVPRIVATE
 + 10)

	)

19 
	#SIOCCHG6RD
 (
SIOCDEVPRIVATE
 + 11)

	)

21 
	#GRE_CSUM
 
	`__˝u_to_be16
(0x8000)

	)

22 
	#GRE_ROUTING
 
	`__˝u_to_be16
(0x4000)

	)

23 
	#GRE_KEY
 
	`__˝u_to_be16
(0x2000)

	)

24 
	#GRE_SEQ
 
	`__˝u_to_be16
(0x1000)

	)

25 
	#GRE_STRICT
 
	`__˝u_to_be16
(0x0800)

	)

26 
	#GRE_REC
 
	`__˝u_to_be16
(0x0700)

	)

27 
	#GRE_FLAGS
 
	`__˝u_to_be16
(0x00F8)

	)

28 
	#GRE_VERSION
 
	`__˝u_to_be16
(0x0007)

	)

30 
	sù_tu¬ñ_∑rm
 {

31 
	m«me
[
IFNAMSIZ
];

32 
	mlök
;

33 
__be16
 
	mi_Êags
;

34 
__be16
 
	mo_Êags
;

35 
__be32
 
	mi_key
;

36 
__be32
 
	mo_key
;

37 
ùhdr
 
	mùh
;

41 
	mIFLA_IPTUN_UNSPEC
,

42 
	mIFLA_IPTUN_LINK
,

43 
	mIFLA_IPTUN_LOCAL
,

44 
	mIFLA_IPTUN_REMOTE
,

45 
	mIFLA_IPTUN_TTL
,

46 
	mIFLA_IPTUN_TOS
,

47 
	mIFLA_IPTUN_ENCAP_LIMIT
,

48 
	mIFLA_IPTUN_FLOWINFO
,

49 
	mIFLA_IPTUN_FLAGS
,

50 
	mIFLA_IPTUN_PROTO
,

51 
	mIFLA_IPTUN_PMTUDISC
,

52 
	mIFLA_IPTUN_6RD_PREFIX
,

53 
	mIFLA_IPTUN_6RD_RELAY_PREFIX
,

54 
	mIFLA_IPTUN_6RD_PREFIXLEN
,

55 
	mIFLA_IPTUN_6RD_RELAY_PREFIXLEN
,

56 
	m__IFLA_IPTUN_MAX
,

58 
	#IFLA_IPTUN_MAX
 (
__IFLA_IPTUN_MAX
 - 1)

	)

61 
	#SIT_ISATAP
 0x0001

	)

63 
	sù_tu¬ñ_¥l
 {

64 
__be32
 
	maddr
;

65 
__u16
 
	mÊags
;

66 
__u16
 
	m__ª£rved
;

67 
__u32
 
	md©Æí
;

68 
__u32
 
	m__ª£rved2
;

73 
	#PRL_DEFAULT
 0x0001

	)

75 
	sù_tu¬ñ_6rd
 {

76 
ö6_addr
 
	m¥efix
;

77 
__be32
 
	mªœy_¥efix
;

78 
__u16
 
	m¥efixÀn
;

79 
__u16
 
	mªœy_¥efixÀn
;

83 
	mIFLA_GRE_UNSPEC
,

84 
	mIFLA_GRE_LINK
,

85 
	mIFLA_GRE_IFLAGS
,

86 
	mIFLA_GRE_OFLAGS
,

87 
	mIFLA_GRE_IKEY
,

88 
	mIFLA_GRE_OKEY
,

89 
	mIFLA_GRE_LOCAL
,

90 
	mIFLA_GRE_REMOTE
,

91 
	mIFLA_GRE_TTL
,

92 
	mIFLA_GRE_TOS
,

93 
	mIFLA_GRE_PMTUDISC
,

94 
	mIFLA_GRE_ENCAP_LIMIT
,

95 
	mIFLA_GRE_FLOWINFO
,

96 
	mIFLA_GRE_FLAGS
,

97 
	m__IFLA_GRE_MAX
,

100 
	#IFLA_GRE_MAX
 (
__IFLA_GRE_MAX
 - 1)

	)

103 
	#VTI_ISVTI
 0x0001

	)

106 
	mIFLA_VTI_UNSPEC
,

107 
	mIFLA_VTI_LINK
,

108 
	mIFLA_VTI_IKEY
,

109 
	mIFLA_VTI_OKEY
,

110 
	mIFLA_VTI_LOCAL
,

111 
	mIFLA_VTI_REMOTE
,

112 
	m__IFLA_VTI_MAX
,

115 
	#IFLA_VTI_MAX
 (
__IFLA_VTI_MAX
 - 1)

	)

	@mylibnl/libnl-3.2.25/include/linux/if_vlan.h

13 #i‚de‡
_LINUX_IF_VLAN_H_


14 
	#_LINUX_IF_VLAN_H_


	)

19 
	evœn_io˘l_cmds
 {

20 
	mADD_VLAN_CMD
,

21 
	mDEL_VLAN_CMD
,

22 
	mSET_VLAN_INGRESS_PRIORITY_CMD
,

23 
	mSET_VLAN_EGRESS_PRIORITY_CMD
,

24 
	mGET_VLAN_INGRESS_PRIORITY_CMD
,

25 
	mGET_VLAN_EGRESS_PRIORITY_CMD
,

26 
	mSET_VLAN_NAME_TYPE_CMD
,

27 
	mSET_VLAN_FLAG_CMD
,

28 
	mGET_VLAN_REALDEV_NAME_CMD
,

29 
	mGET_VLAN_VID_CMD


32 
	evœn_Êags
 {

33 
	mVLAN_FLAG_REORDER_HDR
 = 0x1,

34 
	mVLAN_FLAG_GVRP
 = 0x2,

35 
	mVLAN_FLAG_LOOSE_BINDING
 = 0x4,

38 
	evœn_«me_ty≥s
 {

39 
	mVLAN_NAME_TYPE_PLUS_VID
,

40 
	mVLAN_NAME_TYPE_RAW_PLUS_VID
,

41 
	mVLAN_NAME_TYPE_PLUS_VID_NO_PAD
,

42 
	mVLAN_NAME_TYPE_RAW_PLUS_VID_NO_PAD
,

43 
	mVLAN_NAME_TYPE_HIGHEST


46 
	svœn_io˘l_¨gs
 {

47 
	mcmd
;

48 
	mdevi˚1
[24];

51 
	mdevi˚2
[24];

52 
	mVID
;

53 
	mskb_¥i‹ôy
;

54 
	m«me_ty≥
;

55 
	mböd_ty≥
;

56 
	mÊag
;

57 } 
	mu
;

59 
	mvœn_qos
;

	@mylibnl/libnl-3.2.25/include/linux/ip.h

17 #i‚de‡
_UAPI_LINUX_IP_H


18 
	#_UAPI_LINUX_IP_H


	)

19 
	~<löux/ty≥s.h
>

20 
	~<asm/byã‹dî.h
>

22 
	#IPTOS_TOS_MASK
 0x1E

	)

23 
	#IPTOS_TOS
(
tos
Ë(—os)&
IPTOS_TOS_MASK
)

	)

24 
	#IPTOS_LOWDELAY
 0x10

	)

25 
	#IPTOS_THROUGHPUT
 0x08

	)

26 
	#IPTOS_RELIABILITY
 0x04

	)

27 
	#IPTOS_MINCOST
 0x02

	)

29 
	#IPTOS_PREC_MASK
 0xE0

	)

30 
	#IPTOS_PREC
(
tos
Ë(—os)&
IPTOS_PREC_MASK
)

	)

31 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

32 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

33 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

34 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

35 
	#IPTOS_PREC_FLASH
 0x60

	)

36 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

37 
	#IPTOS_PREC_PRIORITY
 0x20

	)

38 
	#IPTOS_PREC_ROUTINE
 0x00

	)

42 
	#IPOPT_COPY
 0x80

	)

43 
	#IPOPT_CLASS_MASK
 0x60

	)

44 
	#IPOPT_NUMBER_MASK
 0x1f

	)

46 
	#IPOPT_COPIED
(
o
Ë((o)&
IPOPT_COPY
)

	)

47 
	#IPOPT_CLASS
(
o
Ë((o)&
IPOPT_CLASS_MASK
)

	)

48 
	#IPOPT_NUMBER
(
o
Ë((o)&
IPOPT_NUMBER_MASK
)

	)

50 
	#IPOPT_CONTROL
 0x00

	)

51 
	#IPOPT_RESERVED1
 0x20

	)

52 
	#IPOPT_MEASUREMENT
 0x40

	)

53 
	#IPOPT_RESERVED2
 0x60

	)

55 
	#IPOPT_END
 (0 |
IPOPT_CONTROL
)

	)

56 
	#IPOPT_NOOP
 (1 |
IPOPT_CONTROL
)

	)

57 
	#IPOPT_SEC
 (2 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

58 
	#IPOPT_LSRR
 (3 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

59 
	#IPOPT_TIMESTAMP
 (4 |
IPOPT_MEASUREMENT
)

	)

60 
	#IPOPT_CIPSO
 (6 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

61 
	#IPOPT_RR
 (7 |
IPOPT_CONTROL
)

	)

62 
	#IPOPT_SID
 (8 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

63 
	#IPOPT_SSRR
 (9 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

64 
	#IPOPT_RA
 (20|
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

66 
	#IPVERSION
 4

	)

67 
	#MAXTTL
 255

	)

68 
	#IPDEFTTL
 64

	)

70 
	#IPOPT_OPTVAL
 0

	)

71 
	#IPOPT_OLEN
 1

	)

72 
	#IPOPT_OFFSET
 2

	)

73 
	#IPOPT_MINOFF
 4

	)

74 
	#MAX_IPOPTLEN
 40

	)

75 
	#IPOPT_NOP
 
IPOPT_NOOP


	)

76 
	#IPOPT_EOL
 
IPOPT_END


	)

77 
	#IPOPT_TS
 
IPOPT_TIMESTAMP


	)

79 
	#IPOPT_TS_TSONLY
 0

	)

80 
	#IPOPT_TS_TSANDADDR
 1

	)

81 
	#IPOPT_TS_PRESPEC
 3

	)

83 
	#IPV4_BEET_PHMAXLEN
 8

	)

85 
	sùhdr
 {

86 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

87 
__u8
 
	mihl
:4,

88 
	mvîsi⁄
:4;

89 #ñi‡
deföed
 (
__BIG_ENDIAN_BITFIELD
)

90 
__u8
 
	mvîsi⁄
:4,

91 
	mihl
:4;

95 
__u8
 
	mtos
;

96 
__be16
 
	mtŸ_Àn
;

97 
__be16
 
	mid
;

98 
__be16
 
	m‰ag_off
;

99 
__u8
 
	mâl
;

100 
__u8
 
	m¥Ÿocﬁ
;

101 
__sum16
 
	mcheck
;

102 
__be32
 
	mßddr
;

103 
__be32
 
	mdaddr
;

108 
	sù_auth_hdr
 {

109 
__u8
 
	m√xthdr
;

110 
__u8
 
	mhdæí
;

111 
__be16
 
	mª£rved
;

112 
__be32
 
	m•i
;

113 
__be32
 
	m£q_no
;

114 
__u8
 
	mauth_d©a
[0];

117 
	sù_e•_hdr
 {

118 
__be32
 
	m•i
;

119 
__be32
 
	m£q_no
;

120 
__u8
 
	míc_d©a
[0];

123 
	sù_comp_hdr
 {

124 
__u8
 
	m√xthdr
;

125 
__u8
 
	mÊags
;

126 
__be16
 
	m˝i
;

129 
	sù_bìt_phdr
 {

130 
__u8
 
	m√xthdr
;

131 
__u8
 
	mhdæí
;

132 
__u8
 
	m∑dÀn
;

133 
__u8
 
	mª£rved
;

139 
	mIPV4_DEVCONF_FORWARDING
=1,

140 
	mIPV4_DEVCONF_MC_FORWARDING
,

141 
	mIPV4_DEVCONF_PROXY_ARP
,

142 
	mIPV4_DEVCONF_ACCEPT_REDIRECTS
,

143 
	mIPV4_DEVCONF_SECURE_REDIRECTS
,

144 
	mIPV4_DEVCONF_SEND_REDIRECTS
,

145 
	mIPV4_DEVCONF_SHARED_MEDIA
,

146 
	mIPV4_DEVCONF_RP_FILTER
,

147 
	mIPV4_DEVCONF_ACCEPT_SOURCE_ROUTE
,

148 
	mIPV4_DEVCONF_BOOTP_RELAY
,

149 
	mIPV4_DEVCONF_LOG_MARTIANS
,

150 
	mIPV4_DEVCONF_TAG
,

151 
	mIPV4_DEVCONF_ARPFILTER
,

152 
	mIPV4_DEVCONF_MEDIUM_ID
,

153 
	mIPV4_DEVCONF_NOXFRM
,

154 
	mIPV4_DEVCONF_NOPOLICY
,

155 
	mIPV4_DEVCONF_FORCE_IGMP_VERSION
,

156 
	mIPV4_DEVCONF_ARP_ANNOUNCE
,

157 
	mIPV4_DEVCONF_ARP_IGNORE
,

158 
	mIPV4_DEVCONF_PROMOTE_SECONDARIES
,

159 
	mIPV4_DEVCONF_ARP_ACCEPT
,

160 
	mIPV4_DEVCONF_ARP_NOTIFY
,

161 
	mIPV4_DEVCONF_ACCEPT_LOCAL
,

162 
	mIPV4_DEVCONF_SRC_VMARK
,

163 
	mIPV4_DEVCONF_PROXY_ARP_PVLAN
,

164 
	mIPV4_DEVCONF_ROUTE_LOCALNET
,

165 
	mIPV4_DEVCONF_IGMPV2_UNSOLICITED_REPORT_INTERVAL
,

166 
	mIPV4_DEVCONF_IGMPV3_UNSOLICITED_REPORT_INTERVAL
,

167 
	m__IPV4_DEVCONF_MAX


170 
	#IPV4_DEVCONF_MAX
 (
__IPV4_DEVCONF_MAX
 - 1)

	)

	@mylibnl/libnl-3.2.25/include/linux/ip_mp_alg.h

7 #i‚de‡
_LINUX_IP_MP_ALG_H


8 
	#_LINUX_IP_MP_ALG_H


	)

10 
	eù_mp_Æg
 {

11 
	mIP_MP_ALG_NONE
,

12 
	mIP_MP_ALG_RR
,

13 
	mIP_MP_ALG_DRR
,

14 
	mIP_MP_ALG_RANDOM
,

15 
	mIP_MP_ALG_WRANDOM
,

16 
	m__IP_MP_ALG_MAX


19 
	#IP_MP_ALG_MAX
 (
__IP_MP_ALG_MAX
 - 1)

	)

	@mylibnl/libnl-3.2.25/include/linux/ipv6.h

1 #i‚de‡
_IPV6_H


2 
	#_IPV6_H


	)

4 
	~<asm/byã‹dî.h
>

8 
	#IPV6_MIN_MTU
 1280

	)

17 
	#IPV6_SRCRT_STRICT
 0x01

	)

18 
	#IPV6_SRCRT_TYPE_0
 0

	)

19 
	#IPV6_SRCRT_TYPE_2
 2

	)

24 
	sùv6_π_hdr
 {

25 
__u8
 
	m√xthdr
;

26 
__u8
 
	mhdæí
;

27 
__u8
 
	mty≥
;

28 
__u8
 
	m£gmíts_À·
;

37 
	sùv6_›t_hdr
 {

38 
__u8
 
	m√xthdr
;

39 
__u8
 
	mhdæí
;

43 } 
__©åibuã__
((
∑cked
));

45 
	#ùv6_de°›t_hdr
 
ùv6_›t_hdr


	)

46 
	#ùv6_h››t_hdr
 
ùv6_›t_hdr


	)

53 
	sπ0_hdr
 {

54 
ùv6_π_hdr
 
	mπ_hdr
;

55 
__u32
 
	mª£rved
;

56 
ö6_addr
 
	maddr
[0];

58 
	#π0_ty≥
 
π_hdr
.
ty≥


	)

65 
	sπ2_hdr
 {

66 
ùv6_π_hdr
 
	mπ_hdr
;

67 
__u32
 
	mª£rved
;

68 
ö6_addr
 
	maddr
;

70 
	#π2_ty≥
 
π_hdr
.
ty≥


	)

77 
	sùv6_de°›t_hao
 {

78 
__u8
 
	mty≥
;

79 
__u8
 
	mÀngth
;

80 
ö6_addr
 
	maddr
;

81 } 
__©åibuã__
((
∑cked
));

90 
	sùv6hdr
 {

91 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

92 
__u8
 
	m¥i‹ôy
:4,

93 
	mvîsi⁄
:4;

94 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

95 
__u8
 
	mvîsi⁄
:4,

96 
	m¥i‹ôy
:4;

100 
__u8
 
	mÊow_lbl
[3];

102 
__be16
 
	m∑ylﬂd_Àn
;

103 
__u8
 
	m√xthdr
;

104 
__u8
 
	mh›_limô
;

106 
ö6_addr
 
	mßddr
;

107 
ö6_addr
 
	mdaddr
;

113 
	mDEVCONF_FORWARDING
 = 0,

114 
	mDEVCONF_HOPLIMIT
,

115 
	mDEVCONF_MTU6
,

116 
	mDEVCONF_ACCEPT_RA
,

117 
	mDEVCONF_ACCEPT_REDIRECTS
,

118 
	mDEVCONF_AUTOCONF
,

119 
	mDEVCONF_DAD_TRANSMITS
,

120 
	mDEVCONF_RTR_SOLICITS
,

121 
	mDEVCONF_RTR_SOLICIT_INTERVAL
,

122 
	mDEVCONF_RTR_SOLICIT_DELAY
,

123 
	mDEVCONF_USE_TEMPADDR
,

124 
	mDEVCONF_TEMP_VALID_LFT
,

125 
	mDEVCONF_TEMP_PREFERED_LFT
,

126 
	mDEVCONF_REGEN_MAX_RETRY
,

127 
	mDEVCONF_MAX_DESYNC_FACTOR
,

128 
	mDEVCONF_MAX_ADDRESSES
,

129 
	mDEVCONF_FORCE_MLD_VERSION
,

130 
	mDEVCONF_ACCEPT_RA_DEFRTR
,

131 
	mDEVCONF_ACCEPT_RA_PINFO
,

132 
	mDEVCONF_ACCEPT_RA_RTR_PREF
,

133 
	mDEVCONF_RTR_PROBE_INTERVAL
,

134 
	mDEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN
,

135 
	mDEVCONF_PROXY_NDP
,

136 
	mDEVCONF_OPTIMISTIC_DAD
,

137 
	mDEVCONF_ACCEPT_SOURCE_ROUTE
,

138 
	mDEVCONF_MC_FORWARDING
,

139 
	mDEVCONF_DISABLE_IPV6
,

140 
	mDEVCONF_ACCEPT_DAD
,

141 
	mDEVCONF_FORCE_TLLAO
,

142 
	mDEVCONF_MAX


	@mylibnl/libnl-3.2.25/include/linux/neighbour.h

1 #i‚de‡
__LINUX_NEIGHBOUR_H


2 
	#__LINUX_NEIGHBOUR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	sndmsg
 {

8 
__u8
 
	mndm_Ámûy
;

9 
__u8
 
	mndm_∑d1
;

10 
__u16
 
	mndm_∑d2
;

11 
__s32
 
	mndm_ifödex
;

12 
__u16
 
	mndm_°©e
;

13 
__u8
 
	mndm_Êags
;

14 
__u8
 
	mndm_ty≥
;

18 
	mNDA_UNSPEC
,

19 
	mNDA_DST
,

20 
	mNDA_LLADDR
,

21 
	mNDA_CACHEINFO
,

22 
	mNDA_PROBES
,

23 
	m__NDA_MAX


26 
	#NDA_MAX
 (
__NDA_MAX
 - 1)

	)

32 
	#NTF_USE
 0x01

	)

33 
	#NTF_PROXY
 0x08

	)

34 
	#NTF_ROUTER
 0x80

	)

40 
	#NUD_INCOMPLETE
 0x01

	)

41 
	#NUD_REACHABLE
 0x02

	)

42 
	#NUD_STALE
 0x04

	)

43 
	#NUD_DELAY
 0x08

	)

44 
	#NUD_PROBE
 0x10

	)

45 
	#NUD_FAILED
 0x20

	)

48 
	#NUD_NOARP
 0x40

	)

49 
	#NUD_PERMANENT
 0x80

	)

50 
	#NUD_NONE
 0x00

	)

57 
	snda_ˇcheöfo
 {

58 
__u32
 
	mndm_c⁄fúmed
;

59 
__u32
 
	mndm_u£d
;

60 
__u32
 
	mndm_upd©ed
;

61 
__u32
 
	mndm_ªf˙t
;

89 
	sndt_°©s
 {

90 
__u64
 
	mndts_Ælocs
;

91 
__u64
 
	mndts_de°roys
;

92 
__u64
 
	mndts_hash_grows
;

93 
__u64
 
	mndts_ªs_Áûed
;

94 
__u64
 
	mndts_lookups
;

95 
__u64
 
	mndts_hôs
;

96 
__u64
 
	mndts_rcv_¥obes_mˇ°
;

97 
__u64
 
	mndts_rcv_¥obes_uˇ°
;

98 
__u64
 
	mndts_≥riodic_gc_runs
;

99 
__u64
 
	mndts_f‹˚d_gc_runs
;

103 
	mNDTPA_UNSPEC
,

104 
	mNDTPA_IFINDEX
,

105 
	mNDTPA_REFCNT
,

106 
	mNDTPA_REACHABLE_TIME
,

107 
	mNDTPA_BASE_REACHABLE_TIME
,

108 
	mNDTPA_RETRANS_TIME
,

109 
	mNDTPA_GC_STALETIME
,

110 
	mNDTPA_DELAY_PROBE_TIME
,

111 
	mNDTPA_QUEUE_LEN
,

112 
	mNDTPA_APP_PROBES
,

113 
	mNDTPA_UCAST_PROBES
,

114 
	mNDTPA_MCAST_PROBES
,

115 
	mNDTPA_ANYCAST_DELAY
,

116 
	mNDTPA_PROXY_DELAY
,

117 
	mNDTPA_PROXY_QLEN
,

118 
	mNDTPA_LOCKTIME
,

119 
	m__NDTPA_MAX


121 
	#NDTPA_MAX
 (
__NDTPA_MAX
 - 1)

	)

123 
	sndtmsg
 {

124 
__u8
 
	mndtm_Ámûy
;

125 
__u8
 
	mndtm_∑d1
;

126 
__u16
 
	mndtm_∑d2
;

129 
	sndt_c⁄fig
 {

130 
__u16
 
	mndtc_key_Àn
;

131 
__u16
 
	mndtc_íåy_size
;

132 
__u32
 
	mndtc_íåõs
;

133 
__u32
 
	mndtc_œ°_Êush
;

134 
__u32
 
	mndtc_œ°_ønd
;

135 
__u32
 
	mndtc_hash_∫d
;

136 
__u32
 
	mndtc_hash_mask
;

137 
__u32
 
	mndtc_hash_chaö_gc
;

138 
__u32
 
	mndtc_¥oxy_qÀn
;

142 
	mNDTA_UNSPEC
,

143 
	mNDTA_NAME
,

144 
	mNDTA_THRESH1
,

145 
	mNDTA_THRESH2
,

146 
	mNDTA_THRESH3
,

147 
	mNDTA_CONFIG
,

148 
	mNDTA_PARMS
,

149 
	mNDTA_STATS
,

150 
	mNDTA_GC_INTERVAL
,

151 
	m__NDTA_MAX


153 
	#NDTA_MAX
 (
__NDTA_MAX
 - 1)

	)

	@mylibnl/libnl-3.2.25/include/linux/netfilter.h

1 #i‚de‡
__LINUX_NETFILTER_H


2 
	#__LINUX_NETFILTER_H


	)

4 
	~<löux/ty≥s.h
>

7 
	#NF_DROP
 0

	)

8 
	#NF_ACCEPT
 1

	)

9 
	#NF_STOLEN
 2

	)

10 
	#NF_QUEUE
 3

	)

11 
	#NF_REPEAT
 4

	)

12 
	#NF_STOP
 5

	)

13 
	#NF_MAX_VERDICT
 
NF_STOP


	)

17 
	#NF_VERDICT_MASK
 0x0000ffff

	)

18 
	#NF_VERDICT_BITS
 16

	)

20 
	#NF_VERDICT_QMASK
 0xffff0000

	)

21 
	#NF_VERDICT_QBITS
 16

	)

23 
	#NF_QUEUE_NR
(
x
Ë((((xË<< 
NF_VERDICT_BITS
Ë& 
NF_VERDICT_QMASK
Ë| 
NF_QUEUE
)

	)

27 
	#NFC_UNKNOWN
 0x4000

	)

28 
	#NFC_ALTERED
 0x8000

	)

30 
	enf_öë_hooks
 {

31 
	mNF_INET_PRE_ROUTING
,

32 
	mNF_INET_LOCAL_IN
,

33 
	mNF_INET_FORWARD
,

34 
	mNF_INET_LOCAL_OUT
,

35 
	mNF_INET_POST_ROUTING
,

36 
	mNF_INET_NUMHOOKS


40 
	mNFPROTO_UNSPEC
 = 0,

41 
	mNFPROTO_IPV4
 = 2,

42 
	mNFPROTO_ARP
 = 3,

43 
	mNFPROTO_BRIDGE
 = 7,

44 
	mNFPROTO_IPV6
 = 10,

45 
	mNFPROTO_DECNET
 = 12,

46 
	mNFPROTO_NUMPROTO
,

49 
	unf_öë_addr
 {

50 
__u32
 
	mÆl
[4];

51 
__be32
 
	mù
;

52 
__be32
 
	mù6
[4];

53 
ö_addr
 
	mö
;

54 
ö6_addr
 
	mö6
;

	@mylibnl/libnl-3.2.25/include/linux/netfilter/nf_conntrack_common.h

1 #i‚de‡
_UAPI_NF_CONNTRACK_COMMON_H


2 
	#_UAPI_NF_CONNTRACK_COMMON_H


	)

6 
	eù_c⁄¡øck_öfo
 {

8 
	mIP_CT_ESTABLISHED
,

12 
	mIP_CT_RELATED
,

16 
	mIP_CT_NEW
,

19 
	mIP_CT_IS_REPLY
,

21 
	mIP_CT_ESTABLISHED_REPLY
 = 
IP_CT_ESTABLISHED
 + 
IP_CT_IS_REPLY
,

22 
	mIP_CT_RELATED_REPLY
 = 
IP_CT_RELATED
 + 
IP_CT_IS_REPLY
,

23 
	mIP_CT_NEW_REPLY
 = 
IP_CT_NEW
 + 
IP_CT_IS_REPLY
,

25 
	mIP_CT_NUMBER
 = 
IP_CT_IS_REPLY
 * 2 - 1

29 
	eù_c⁄¡øck_°©us
 {

31 
	mIPS_EXPECTED_BIT
 = 0,

32 
	mIPS_EXPECTED
 = (1 << 
IPS_EXPECTED_BIT
),

35 
	mIPS_SEEN_REPLY_BIT
 = 1,

36 
	mIPS_SEEN_REPLY
 = (1 << 
IPS_SEEN_REPLY_BIT
),

39 
	mIPS_ASSURED_BIT
 = 2,

40 
	mIPS_ASSURED
 = (1 << 
IPS_ASSURED_BIT
),

43 
	mIPS_CONFIRMED_BIT
 = 3,

44 
	mIPS_CONFIRMED
 = (1 << 
IPS_CONFIRMED_BIT
),

47 
	mIPS_SRC_NAT_BIT
 = 4,

48 
	mIPS_SRC_NAT
 = (1 << 
IPS_SRC_NAT_BIT
),

51 
	mIPS_DST_NAT_BIT
 = 5,

52 
	mIPS_DST_NAT
 = (1 << 
IPS_DST_NAT_BIT
),

55 
	mIPS_NAT_MASK
 = (
IPS_DST_NAT
 | 
IPS_SRC_NAT
),

58 
	mIPS_SEQ_ADJUST_BIT
 = 6,

59 
	mIPS_SEQ_ADJUST
 = (1 << 
IPS_SEQ_ADJUST_BIT
),

62 
	mIPS_SRC_NAT_DONE_BIT
 = 7,

63 
	mIPS_SRC_NAT_DONE
 = (1 << 
IPS_SRC_NAT_DONE_BIT
),

65 
	mIPS_DST_NAT_DONE_BIT
 = 8,

66 
	mIPS_DST_NAT_DONE
 = (1 << 
IPS_DST_NAT_DONE_BIT
),

69 
	mIPS_NAT_DONE_MASK
 = (
IPS_DST_NAT_DONE
 | 
IPS_SRC_NAT_DONE
),

72 
	mIPS_DYING_BIT
 = 9,

73 
	mIPS_DYING
 = (1 << 
IPS_DYING_BIT
),

76 
	mIPS_FIXED_TIMEOUT_BIT
 = 10,

77 
	mIPS_FIXED_TIMEOUT
 = (1 << 
IPS_FIXED_TIMEOUT_BIT
),

80 
	mIPS_TEMPLATE_BIT
 = 11,

81 
	mIPS_TEMPLATE
 = (1 << 
IPS_TEMPLATE_BIT
),

84 
	mIPS_UNTRACKED_BIT
 = 12,

85 
	mIPS_UNTRACKED
 = (1 << 
IPS_UNTRACKED_BIT
),

88 
	mIPS_HELPER_BIT
 = 13,

89 
	mIPS_HELPER
 = (1 << 
IPS_HELPER_BIT
),

93 
	eù_c⁄¡øck_evíts
 {

94 
	mIPCT_NEW
,

95 
	mIPCT_RELATED
,

96 
	mIPCT_DESTROY
,

97 
	mIPCT_REPLY
,

98 
	mIPCT_ASSURED
,

99 
	mIPCT_PROTOINFO
,

100 
	mIPCT_HELPER
,

101 
	mIPCT_MARK
,

102 
	mIPCT_NATSEQADJ
,

103 
	mIPCT_SECMARK
,

106 
	eù_c⁄¡øck_ex≥˘_evíts
 {

107 
	mIPEXP_NEW
,

108 
	mIPEXP_DESTROY
,

112 
	#NF_CT_EXPECT_PERMANENT
 0x1

	)

113 
	#NF_CT_EXPECT_INACTIVE
 0x2

	)

114 
	#NF_CT_EXPECT_USERSPACE
 0x4

	)

	@mylibnl/libnl-3.2.25/include/linux/netfilter/nfnetlink.h

1 #i‚de‡
_UAPI_NFNETLINK_H


2 
	#_UAPI_NFNETLINK_H


	)

3 
	~<löux/ty≥s.h
>

4 
	~<löux/√tfûãr/n‚ëlök_com∑t.h
>

6 
	en‚ëlök_groups
 {

7 
	mNFNLGRP_NONE
,

8 
	#NFNLGRP_NONE
 
NFNLGRP_NONE


	)

9 
	mNFNLGRP_CONNTRACK_NEW
,

10 
	#NFNLGRP_CONNTRACK_NEW
 
NFNLGRP_CONNTRACK_NEW


	)

11 
	mNFNLGRP_CONNTRACK_UPDATE
,

12 
	#NFNLGRP_CONNTRACK_UPDATE
 
NFNLGRP_CONNTRACK_UPDATE


	)

13 
	mNFNLGRP_CONNTRACK_DESTROY
,

14 
	#NFNLGRP_CONNTRACK_DESTROY
 
NFNLGRP_CONNTRACK_DESTROY


	)

15 
	mNFNLGRP_CONNTRACK_EXP_NEW
,

16 
	#NFNLGRP_CONNTRACK_EXP_NEW
 
NFNLGRP_CONNTRACK_EXP_NEW


	)

17 
	mNFNLGRP_CONNTRACK_EXP_UPDATE
,

18 
	#NFNLGRP_CONNTRACK_EXP_UPDATE
 
NFNLGRP_CONNTRACK_EXP_UPDATE


	)

19 
	mNFNLGRP_CONNTRACK_EXP_DESTROY
,

20 
	#NFNLGRP_CONNTRACK_EXP_DESTROY
 
NFNLGRP_CONNTRACK_EXP_DESTROY


	)

21 
	m__NFNLGRP_MAX
,

23 
	#NFNLGRP_MAX
 (
__NFNLGRP_MAX
 - 1)

	)

27 
	snfgímsg
 {

28 
__u8
 
	mnfgí_Ámûy
;

29 
__u8
 
	mvîsi⁄
;

30 
__be16
 
	mªs_id
;

33 
	#NFNETLINK_V0
 0

	)

39 
	#NFNL_SUBSYS_ID
(
x
Ë((x & 0xff00Ë>> 8)

	)

40 
	#NFNL_MSG_TYPE
(
x
Ë(x & 0x00ff)

	)

44 
	#NFNL_SUBSYS_NONE
 0

	)

45 
	#NFNL_SUBSYS_CTNETLINK
 1

	)

46 
	#NFNL_SUBSYS_CTNETLINK_EXP
 2

	)

47 
	#NFNL_SUBSYS_QUEUE
 3

	)

48 
	#NFNL_SUBSYS_ULOG
 4

	)

49 
	#NFNL_SUBSYS_OSF
 5

	)

50 
	#NFNL_SUBSYS_IPSET
 6

	)

51 
	#NFNL_SUBSYS_ACCT
 7

	)

52 
	#NFNL_SUBSYS_CTNETLINK_TIMEOUT
 8

	)

53 
	#NFNL_SUBSYS_CTHELPER
 9

	)

54 
	#NFNL_SUBSYS_COUNT
 10

	)

	@mylibnl/libnl-3.2.25/include/linux/netfilter/nfnetlink_compat.h

1 #i‚de‡
_NFNETLINK_COMPAT_H


2 
	#_NFNETLINK_COMPAT_H


	)

4 
	~<löux/ty≥s.h
>

6 #i‚de‡
__KERNEL__


10 
	#NF_NETLINK_CONNTRACK_NEW
 0x00000001

	)

11 
	#NF_NETLINK_CONNTRACK_UPDATE
 0x00000002

	)

12 
	#NF_NETLINK_CONNTRACK_DESTROY
 0x00000004

	)

13 
	#NF_NETLINK_CONNTRACK_EXP_NEW
 0x00000008

	)

14 
	#NF_NETLINK_CONNTRACK_EXP_UPDATE
 0x00000010

	)

15 
	#NF_NETLINK_CONNTRACK_EXP_DESTROY
 0x00000020

	)

24 
	snÁâr
 {

25 
__u16
 
	mnÁ_Àn
;

26 
__u16
 
	mnÁ_ty≥
;

33 
	#NFNL_NFA_NEST
 0x8000

	)

34 
	#NFA_TYPE
(
©å
Ë(◊âr)->
nÁ_ty≥
 & 0x7fff)

	)

36 
	#NFA_ALIGNTO
 4

	)

37 
	#NFA_ALIGN
(
Àn
Ë((÷íË+ 
NFA_ALIGNTO
 - 1Ë& ~(NFA_ALIGNTO - 1))

	)

38 
	#NFA_OK
(
nÁ
,
Àn
Ë(÷íË> 0 && (nÁ)->
nÁ_Àn
 >(
nÁâr
) \

39 && (
nÁ
)->
nÁ_Àn
 <(
Àn
))

	)

40 
	#NFA_NEXT
(
nÁ
,
©åÀn
Ë(◊âæíË-
	`NFA_ALIGN
(“Á)->
nÁ_Àn
), \

41 (
nÁâr
 *)(((*)(
nÁ
)Ë+ 
	`NFA_ALIGN
(“Á)->
nÁ_Àn
)))

	)

42 
	#NFA_LENGTH
(
Àn
Ë(
	`NFA_ALIGN
((
nÁâr
)Ë+ (Àn))

	)

43 
	#NFA_SPACE
(
Àn
Ë
	`NFA_ALIGN
(
	`NFA_LENGTH
÷í))

	)

44 
	#NFA_DATA
(
nÁ
Ë((*)(((*)“Á)Ë+ 
	`NFA_LENGTH
(0)))

	)

45 
	#NFA_PAYLOAD
(
nÁ
Ë(()(“Á)->
nÁ_Àn
Ë- 
	`NFA_LENGTH
(0))

	)

46 
	#NFA_NEST
(
skb
, 
ty≥
) \

47 ({ 
nÁâr
 *
__°¨t
 = (nÁâ∏*)
	`skb_èû_poöãr
(
skb
); \

48 
	`NFA_PUT
(
skb
, (
NFNL_NFA_NEST
 | 
ty≥
), 0, 
NULL
); \

49 
__°¨t
; })

	)

50 
	#NFA_NEST_END
(
skb
, 
°¨t
) \

51 ({ (
°¨t
)->
nÁ_Àn
 = 
	`skb_èû_poöãr
(
skb
) - (*)(start); \

52 (
skb
)->
Àn
; })

	)

53 
	#NFA_NEST_CANCEL
(
skb
, 
°¨t
) \

54 ({ i‡(
°¨t
) \

55 
	`skb_åim
(
skb
, (*Ë(
°¨t
Ë- (skb)->
d©a
); \

56 -1; })

	)

58 
	#NFM_NFA
(
n
Ë((
nÁâr
 *)(((*)(n)) \

59 + 
	`NLMSG_ALIGN
((
nfgímsg
))))

	)

60 
	#NFM_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“, (
nfgímsg
))

	)

	@mylibnl/libnl-3.2.25/include/linux/netfilter/nfnetlink_conntrack.h

1 #i‚de‡
_IPCONNTRACK_NETLINK_H


2 
	#_IPCONNTRACK_NETLINK_H


	)

3 
	~<löux/√tfûãr/n‚ëlök.h
>

5 
	e˙é_msg_ty≥s
 {

6 
	mIPCTNL_MSG_CT_NEW
,

7 
	mIPCTNL_MSG_CT_GET
,

8 
	mIPCTNL_MSG_CT_DELETE
,

9 
	mIPCTNL_MSG_CT_GET_CTRZERO
,

10 
	mIPCTNL_MSG_CT_GET_STATS_CPU
,

11 
	mIPCTNL_MSG_CT_GET_STATS
,

13 
	mIPCTNL_MSG_MAX


16 
	e˘∆_exp_msg_ty≥s
 {

17 
	mIPCTNL_MSG_EXP_NEW
,

18 
	mIPCTNL_MSG_EXP_GET
,

19 
	mIPCTNL_MSG_EXP_DELETE
,

20 
	mIPCTNL_MSG_EXP_GET_STATS_CPU
,

22 
	mIPCTNL_MSG_EXP_MAX


26 
	e˘©å_ty≥
 {

27 
	mCTA_UNSPEC
,

28 
	mCTA_TUPLE_ORIG
,

29 
	mCTA_TUPLE_REPLY
,

30 
	mCTA_STATUS
,

31 
	mCTA_PROTOINFO
,

32 
	mCTA_HELP
,

33 
	mCTA_NAT_SRC
,

34 
	#CTA_NAT
 
CTA_NAT_SRC


	)

35 
	mCTA_TIMEOUT
,

36 
	mCTA_MARK
,

37 
	mCTA_COUNTERS_ORIG
,

38 
	mCTA_COUNTERS_REPLY
,

39 
	mCTA_USE
,

40 
	mCTA_ID
,

41 
	mCTA_NAT_DST
,

42 
	mCTA_TUPLE_MASTER
,

43 
	mCTA_NAT_SEQ_ADJ_ORIG
,

44 
	mCTA_NAT_SEQ_ADJ_REPLY
,

45 
	mCTA_SECMARK
,

46 
	mCTA_ZONE
,

47 
	mCTA_SECCTX
,

48 
	mCTA_TIMESTAMP
,

49 
	mCTA_MARK_MASK
,

50 
	m__CTA_MAX


52 
	#CTA_MAX
 (
__CTA_MAX
 - 1)

	)

54 
	e˘©å_tu∂e
 {

55 
	mCTA_TUPLE_UNSPEC
,

56 
	mCTA_TUPLE_IP
,

57 
	mCTA_TUPLE_PROTO
,

58 
	m__CTA_TUPLE_MAX


60 
	#CTA_TUPLE_MAX
 (
__CTA_TUPLE_MAX
 - 1)

	)

62 
	e˘©å_ù
 {

63 
	mCTA_IP_UNSPEC
,

64 
	mCTA_IP_V4_SRC
,

65 
	mCTA_IP_V4_DST
,

66 
	mCTA_IP_V6_SRC
,

67 
	mCTA_IP_V6_DST
,

68 
	m__CTA_IP_MAX


70 
	#CTA_IP_MAX
 (
__CTA_IP_MAX
 - 1)

	)

72 
	e˘©å_l4¥Ÿo
 {

73 
	mCTA_PROTO_UNSPEC
,

74 
	mCTA_PROTO_NUM
,

75 
	mCTA_PROTO_SRC_PORT
,

76 
	mCTA_PROTO_DST_PORT
,

77 
	mCTA_PROTO_ICMP_ID
,

78 
	mCTA_PROTO_ICMP_TYPE
,

79 
	mCTA_PROTO_ICMP_CODE
,

80 
	mCTA_PROTO_ICMPV6_ID
,

81 
	mCTA_PROTO_ICMPV6_TYPE
,

82 
	mCTA_PROTO_ICMPV6_CODE
,

83 
	m__CTA_PROTO_MAX


85 
	#CTA_PROTO_MAX
 (
__CTA_PROTO_MAX
 - 1)

	)

87 
	e˘©å_¥Ÿoöfo
 {

88 
	mCTA_PROTOINFO_UNSPEC
,

89 
	mCTA_PROTOINFO_TCP
,

90 
	mCTA_PROTOINFO_DCCP
,

91 
	mCTA_PROTOINFO_SCTP
,

92 
	m__CTA_PROTOINFO_MAX


94 
	#CTA_PROTOINFO_MAX
 (
__CTA_PROTOINFO_MAX
 - 1)

	)

96 
	e˘©å_¥Ÿoöfo_t˝
 {

97 
	mCTA_PROTOINFO_TCP_UNSPEC
,

98 
	mCTA_PROTOINFO_TCP_STATE
,

99 
	mCTA_PROTOINFO_TCP_WSCALE_ORIGINAL
,

100 
	mCTA_PROTOINFO_TCP_WSCALE_REPLY
,

101 
	mCTA_PROTOINFO_TCP_FLAGS_ORIGINAL
,

102 
	mCTA_PROTOINFO_TCP_FLAGS_REPLY
,

103 
	m__CTA_PROTOINFO_TCP_MAX


105 
	#CTA_PROTOINFO_TCP_MAX
 (
__CTA_PROTOINFO_TCP_MAX
 - 1)

	)

107 
	e˘©å_¥Ÿoöfo_dc˝
 {

108 
	mCTA_PROTOINFO_DCCP_UNSPEC
,

109 
	mCTA_PROTOINFO_DCCP_STATE
,

110 
	mCTA_PROTOINFO_DCCP_ROLE
,

111 
	mCTA_PROTOINFO_DCCP_HANDSHAKE_SEQ
,

112 
	m__CTA_PROTOINFO_DCCP_MAX
,

114 
	#CTA_PROTOINFO_DCCP_MAX
 (
__CTA_PROTOINFO_DCCP_MAX
 - 1)

	)

116 
	e˘©å_¥Ÿoöfo_s˘p
 {

117 
	mCTA_PROTOINFO_SCTP_UNSPEC
,

118 
	mCTA_PROTOINFO_SCTP_STATE
,

119 
	mCTA_PROTOINFO_SCTP_VTAG_ORIGINAL
,

120 
	mCTA_PROTOINFO_SCTP_VTAG_REPLY
,

121 
	m__CTA_PROTOINFO_SCTP_MAX


123 
	#CTA_PROTOINFO_SCTP_MAX
 (
__CTA_PROTOINFO_SCTP_MAX
 - 1)

	)

125 
	e˘©å_cou¡îs
 {

126 
	mCTA_COUNTERS_UNSPEC
,

127 
	mCTA_COUNTERS_PACKETS
,

128 
	mCTA_COUNTERS_BYTES
,

129 
	mCTA_COUNTERS32_PACKETS
,

130 
	mCTA_COUNTERS32_BYTES
,

131 
	m__CTA_COUNTERS_MAX


133 
	#CTA_COUNTERS_MAX
 (
__CTA_COUNTERS_MAX
 - 1)

	)

135 
	e˘©å_t°amp
 {

136 
	mCTA_TIMESTAMP_UNSPEC
,

137 
	mCTA_TIMESTAMP_START
,

138 
	mCTA_TIMESTAMP_STOP
,

139 
	m__CTA_TIMESTAMP_MAX


141 
	#CTA_TIMESTAMP_MAX
 (
__CTA_TIMESTAMP_MAX
 - 1)

	)

143 
	e˘©å_«t
 {

144 
	mCTA_NAT_UNSPEC
,

145 
	mCTA_NAT_V4_MINIP
,

146 
	#CTA_NAT_MINIP
 
CTA_NAT_V4_MINIP


	)

147 
	mCTA_NAT_V4_MAXIP
,

148 
	#CTA_NAT_MAXIP
 
CTA_NAT_V4_MAXIP


	)

149 
	mCTA_NAT_PROTO
,

150 
	mCTA_NAT_V6_MINIP
,

151 
	mCTA_NAT_V6_MAXIP
,

152 
	m__CTA_NAT_MAX


154 
	#CTA_NAT_MAX
 (
__CTA_NAT_MAX
 - 1)

	)

156 
	e˘©å_¥Ÿ⁄©
 {

157 
	mCTA_PROTONAT_UNSPEC
,

158 
	mCTA_PROTONAT_PORT_MIN
,

159 
	mCTA_PROTONAT_PORT_MAX
,

160 
	m__CTA_PROTONAT_MAX


162 
	#CTA_PROTONAT_MAX
 (
__CTA_PROTONAT_MAX
 - 1)

	)

164 
	e˘©å_«t£q
 {

165 
	mCTA_NAT_SEQ_UNSPEC
,

166 
	mCTA_NAT_SEQ_CORRECTION_POS
,

167 
	mCTA_NAT_SEQ_OFFSET_BEFORE
,

168 
	mCTA_NAT_SEQ_OFFSET_AFTER
,

169 
	m__CTA_NAT_SEQ_MAX


171 
	#CTA_NAT_SEQ_MAX
 (
__CTA_NAT_SEQ_MAX
 - 1)

	)

173 
	e˘©å_ex≥˘
 {

174 
	mCTA_EXPECT_UNSPEC
,

175 
	mCTA_EXPECT_MASTER
,

176 
	mCTA_EXPECT_TUPLE
,

177 
	mCTA_EXPECT_MASK
,

178 
	mCTA_EXPECT_TIMEOUT
,

179 
	mCTA_EXPECT_ID
,

180 
	mCTA_EXPECT_HELP_NAME
,

181 
	mCTA_EXPECT_ZONE
,

182 
	mCTA_EXPECT_FLAGS
,

183 
	mCTA_EXPECT_CLASS
,

184 
	mCTA_EXPECT_NAT
,

185 
	mCTA_EXPECT_FN
,

186 
	m__CTA_EXPECT_MAX


188 
	#CTA_EXPECT_MAX
 (
__CTA_EXPECT_MAX
 - 1)

	)

190 
	e˘©å_ex≥˘_«t
 {

191 
	mCTA_EXPECT_NAT_UNSPEC
,

192 
	mCTA_EXPECT_NAT_DIR
,

193 
	mCTA_EXPECT_NAT_TUPLE
,

194 
	m__CTA_EXPECT_NAT_MAX


196 
	#CTA_EXPECT_NAT_MAX
 (
__CTA_EXPECT_NAT_MAX
 - 1)

	)

198 
	e˘©å_hñp
 {

199 
	mCTA_HELP_UNSPEC
,

200 
	mCTA_HELP_NAME
,

201 
	mCTA_HELP_INFO
,

202 
	m__CTA_HELP_MAX


204 
	#CTA_HELP_MAX
 (
__CTA_HELP_MAX
 - 1)

	)

206 
	e˘©å_£c˘x
 {

207 
	mCTA_SECCTX_UNSPEC
,

208 
	mCTA_SECCTX_NAME
,

209 
	m__CTA_SECCTX_MAX


211 
	#CTA_SECCTX_MAX
 (
__CTA_SECCTX_MAX
 - 1)

	)

213 
	e˘©å_°©s_˝u
 {

214 
	mCTA_STATS_UNSPEC
,

215 
	mCTA_STATS_SEARCHED
,

216 
	mCTA_STATS_FOUND
,

217 
	mCTA_STATS_NEW
,

218 
	mCTA_STATS_INVALID
,

219 
	mCTA_STATS_IGNORE
,

220 
	mCTA_STATS_DELETE
,

221 
	mCTA_STATS_DELETE_LIST
,

222 
	mCTA_STATS_INSERT
,

223 
	mCTA_STATS_INSERT_FAILED
,

224 
	mCTA_STATS_DROP
,

225 
	mCTA_STATS_EARLY_DROP
,

226 
	mCTA_STATS_ERROR
,

227 
	mCTA_STATS_SEARCH_RESTART
,

228 
	m__CTA_STATS_MAX
,

230 
	#CTA_STATS_MAX
 (
__CTA_STATS_MAX
 - 1)

	)

232 
	e˘©å_°©s_globÆ
 {

233 
	mCTA_STATS_GLOBAL_UNSPEC
,

234 
	mCTA_STATS_GLOBAL_ENTRIES
,

235 
	m__CTA_STATS_GLOBAL_MAX
,

237 
	#CTA_STATS_GLOBAL_MAX
 (
__CTA_STATS_GLOBAL_MAX
 - 1)

	)

239 
	e˘©å_ex≥˘_°©s
 {

240 
	mCTA_STATS_EXP_UNSPEC
,

241 
	mCTA_STATS_EXP_NEW
,

242 
	mCTA_STATS_EXP_CREATE
,

243 
	mCTA_STATS_EXP_DELETE
,

244 
	m__CTA_STATS_EXP_MAX
,

246 
	#CTA_STATS_EXP_MAX
 (
__CTA_STATS_EXP_MAX
 - 1)

	)

	@mylibnl/libnl-3.2.25/include/linux/netfilter/nfnetlink_log.h

1 #i‚de‡
_NFNETLINK_LOG_H


2 
	#_NFNETLINK_LOG_H


	)

8 #i‚de‡
__Æig√d_be64


9 
	#__Æig√d_be64
 
u_öt64_t
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

12 
	~<löux/ty≥s.h
>

13 
	~<löux/√tfûãr/n‚ëlök.h
>

15 
	enfu l_msg_ty≥s
 {

16 
	mNFULNL_MSG_PACKET
,

17 
	mNFULNL_MSG_CONFIG
,

19 
	mNFULNL_MSG_MAX


22 
	snfu l_msg_∑ckë_hdr
 {

23 
__be16
 
	mhw_¥Ÿocﬁ
;

24 
__u8
 
	mhook
;

25 
__u8
 
	m_∑d
;

28 
	snfu l_msg_∑ckë_hw
 {

29 
__be16
 
	mhw_addæí
;

30 
__u16
 
	m_∑d
;

31 
__u8
 
	mhw_addr
[8];

34 
	snfu l_msg_∑ckë_time°amp
 {

35 
__Æig√d_be64
 
	m£c
;

36 
__Æig√d_be64
 
	mu£c
;

39 
	enfu l_©å_ty≥
 {

40 
	mNFULA_UNSPEC
,

41 
	mNFULA_PACKET_HDR
,

42 
	mNFULA_MARK
,

43 
	mNFULA_TIMESTAMP
,

44 
	mNFULA_IFINDEX_INDEV
,

45 
	mNFULA_IFINDEX_OUTDEV
,

46 
	mNFULA_IFINDEX_PHYSINDEV
,

47 
	mNFULA_IFINDEX_PHYSOUTDEV
,

48 
	mNFULA_HWADDR
,

49 
	mNFULA_PAYLOAD
,

50 
	mNFULA_PREFIX
,

51 
	mNFULA_UID
,

52 
	mNFULA_SEQ
,

53 
	mNFULA_SEQ_GLOBAL
,

54 
	mNFULA_GID
,

55 
	mNFULA_HWTYPE
,

56 
	mNFULA_HWHEADER
,

57 
	mNFULA_HWLEN
,

59 
	m__NFULA_MAX


61 
	#NFULA_MAX
 (
__NFULA_MAX
 - 1)

	)

63 
	enfu l_msg_c⁄fig_cmds
 {

64 
	mNFULNL_CFG_CMD_NONE
,

65 
	mNFULNL_CFG_CMD_BIND
,

66 
	mNFULNL_CFG_CMD_UNBIND
,

67 
	mNFULNL_CFG_CMD_PF_BIND
,

68 
	mNFULNL_CFG_CMD_PF_UNBIND
,

71 
	snfu l_msg_c⁄fig_cmd
 {

72 
__u8
 
	mcomm™d
;

73 } 
__©åibuã__
 ((
∑cked
));

75 
	snfu l_msg_c⁄fig_mode
 {

76 
__be32
 
	mc›y_ønge
;

77 
__u8
 
	mc›y_mode
;

78 
__u8
 
	m_∑d
;

79 } 
__©åibuã__
 ((
∑cked
));

81 
	enfu l_©å_c⁄fig
 {

82 
	mNFULA_CFG_UNSPEC
,

83 
	mNFULA_CFG_CMD
,

84 
	mNFULA_CFG_MODE
,

85 
	mNFULA_CFG_NLBUFSIZ
,

86 
	mNFULA_CFG_TIMEOUT
,

87 
	mNFULA_CFG_QTHRESH
,

88 
	mNFULA_CFG_FLAGS
,

89 
	m__NFULA_CFG_MAX


91 
	#NFULA_CFG_MAX
 (
__NFULA_CFG_MAX
 -1)

	)

93 
	#NFULNL_COPY_NONE
 0x00

	)

94 
	#NFULNL_COPY_META
 0x01

	)

95 
	#NFULNL_COPY_PACKET
 0x02

	)

98 
	#NFULNL_CFG_F_SEQ
 0x0001

	)

99 
	#NFULNL_CFG_F_SEQ_GLOBAL
 0x0002

	)

	@mylibnl/libnl-3.2.25/include/linux/netfilter/nfnetlink_queue.h

1 #i‚de‡
_NFNETLINK_QUEUE_H


2 
	#_NFNETLINK_QUEUE_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√tfûãr/n‚ëlök.h
>

7 #i‚de‡
__Æig√d_be64


8 
	#__Æig√d_be64
 
u_öt64_t
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

11 
	enfq∆_msg_ty≥s
 {

12 
	mNFQNL_MSG_PACKET
,

13 
	mNFQNL_MSG_VERDICT
,

14 
	mNFQNL_MSG_CONFIG
,

15 
	mNFQNL_MSG_VERDICT_BATCH
,

17 
	mNFQNL_MSG_MAX


20 
	snfq∆_msg_∑ckë_hdr
 {

21 
__be32
 
	m∑ckë_id
;

22 
__be16
 
	mhw_¥Ÿocﬁ
;

23 
__u8
 
	mhook
;

24 } 
__©åibuã__
 ((
∑cked
));

26 
	snfq∆_msg_∑ckë_hw
 {

27 
__be16
 
	mhw_addæí
;

28 
__u16
 
	m_∑d
;

29 
__u8
 
	mhw_addr
[8];

32 
	snfq∆_msg_∑ckë_time°amp
 {

33 
__Æig√d_be64
 
	m£c
;

34 
__Æig√d_be64
 
	mu£c
;

37 
	enfq∆_©å_ty≥
 {

38 
	mNFQA_UNSPEC
,

39 
	mNFQA_PACKET_HDR
,

40 
	mNFQA_VERDICT_HDR
,

41 
	mNFQA_MARK
,

42 
	mNFQA_TIMESTAMP
,

43 
	mNFQA_IFINDEX_INDEV
,

44 
	mNFQA_IFINDEX_OUTDEV
,

45 
	mNFQA_IFINDEX_PHYSINDEV
,

46 
	mNFQA_IFINDEX_PHYSOUTDEV
,

47 
	mNFQA_HWADDR
,

48 
	mNFQA_PAYLOAD
,

49 
	mNFQA_CT
,

50 
	mNFQA_CT_INFO
,

51 
	mNFQA_CAP_LEN
,

53 
	m__NFQA_MAX


55 
	#NFQA_MAX
 (
__NFQA_MAX
 - 1)

	)

57 
	snfq∆_msg_vîdi˘_hdr
 {

58 
__be32
 
	mvîdi˘
;

59 
__be32
 
	mid
;

63 
	enfq∆_msg_c⁄fig_cmds
 {

64 
	mNFQNL_CFG_CMD_NONE
,

65 
	mNFQNL_CFG_CMD_BIND
,

66 
	mNFQNL_CFG_CMD_UNBIND
,

67 
	mNFQNL_CFG_CMD_PF_BIND
,

68 
	mNFQNL_CFG_CMD_PF_UNBIND
,

71 
	snfq∆_msg_c⁄fig_cmd
 {

72 
__u8
 
	mcomm™d
;

73 
__u8
 
	m_∑d
;

74 
__be16
 
	mpf
;

77 
	enfq∆_c⁄fig_mode
 {

78 
	mNFQNL_COPY_NONE
,

79 
	mNFQNL_COPY_META
,

80 
	mNFQNL_COPY_PACKET
,

83 
	snfq∆_msg_c⁄fig_∑øms
 {

84 
__be32
 
	mc›y_ønge
;

85 
__u8
 
	mc›y_mode
;

86 } 
__©åibuã__
 ((
∑cked
));

89 
	enfq∆_©å_c⁄fig
 {

90 
	mNFQA_CFG_UNSPEC
,

91 
	mNFQA_CFG_CMD
,

92 
	mNFQA_CFG_PARAMS
,

93 
	mNFQA_CFG_QUEUE_MAXLEN
,

94 
	mNFQA_CFG_MASK
,

95 
	mNFQA_CFG_FLAGS
,

96 
	m__NFQA_CFG_MAX


98 
	#NFQA_CFG_MAX
 (
__NFQA_CFG_MAX
-1)

	)

101 
	#NFQA_CFG_F_FAIL_OPEN
 (1 << 0)

	)

102 
	#NFQA_CFG_F_CONNTRACK
 (1 << 1)

	)

103 
	#NFQA_CFG_F_MAX
 (1 << 2)

	)

	@mylibnl/libnl-3.2.25/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/sockë.h
>

5 
	~<löux/ty≥s.h
>

7 
	#NETLINK_ROUTE
 0

	)

8 
	#NETLINK_UNUSED
 1

	)

9 
	#NETLINK_USERSOCK
 2

	)

10 
	#NETLINK_FIREWALL
 3

	)

11 
	#NETLINK_INET_DIAG
 4

	)

12 
	#NETLINK_NFLOG
 5

	)

13 
	#NETLINK_XFRM
 6

	)

14 
	#NETLINK_SELINUX
 7

	)

15 
	#NETLINK_ISCSI
 8

	)

16 
	#NETLINK_AUDIT
 9

	)

17 
	#NETLINK_FIB_LOOKUP
 10

	)

18 
	#NETLINK_CONNECTOR
 11

	)

19 
	#NETLINK_NETFILTER
 12

	)

20 
	#NETLINK_IP6_FW
 13

	)

21 
	#NETLINK_DNRTMSG
 14

	)

22 
	#NETLINK_KOBJECT_UEVENT
 15

	)

23 
	#NETLINK_GENERIC
 16

	)

25 
	#NETLINK_SCSITRANSPORT
 18

	)

26 
	#NETLINK_ECRYPTFS
 19

	)

27 
	#NETLINK_RDMA
 20

	)

29 
	#MAX_LINKS
 32

	)

31 
	ssockaddr_∆
 {

32 
ß_Ámûy_t
 
	m∆_Ámûy
;

33 
	m∆_∑d
;

34 
__u32
 
	m∆_pid
;

35 
__u32
 
	m∆_groups
;

38 
	s∆msghdr
 {

39 
__u32
 
	m∆msg_Àn
;

40 
__u16
 
	m∆msg_ty≥
;

41 
__u16
 
	m∆msg_Êags
;

42 
__u32
 
	m∆msg_£q
;

43 
__u32
 
	m∆msg_pid
;

48 
	#NLM_F_REQUEST
 1

	)

49 
	#NLM_F_MULTI
 2

	)

50 
	#NLM_F_ACK
 4

	)

51 
	#NLM_F_ECHO
 8

	)

52 
	#NLM_F_DUMP_INTR
 16

	)

55 
	#NLM_F_ROOT
 0x100

	)

56 
	#NLM_F_MATCH
 0x200

	)

57 
	#NLM_F_ATOMIC
 0x400

	)

58 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

61 
	#NLM_F_REPLACE
 0x100

	)

62 
	#NLM_F_EXCL
 0x200

	)

63 
	#NLM_F_CREATE
 0x400

	)

64 
	#NLM_F_APPEND
 0x800

	)

75 
	#NLMSG_ALIGNTO
 4U

	)

76 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

77 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

78 
	#NLMSG_LENGTH
(
Àn
Ë(÷í)+
	`NLMSG_ALIGN
(
NLMSG_HDRLEN
))

	)

79 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

80 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

81 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

82 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

83 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

84 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

85 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

86 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

88 
	#NLMSG_NOOP
 0x1

	)

89 
	#NLMSG_ERROR
 0x2

	)

90 
	#NLMSG_DONE
 0x3

	)

91 
	#NLMSG_OVERRUN
 0x4

	)

93 
	#NLMSG_MIN_TYPE
 0x10

	)

95 
	s∆msgîr
 {

96 
	mîr‹
;

97 
∆msghdr
 
	mmsg
;

100 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

101 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

102 
	#NETLINK_PKTINFO
 3

	)

103 
	#NETLINK_BROADCAST_ERROR
 4

	)

104 
	#NETLINK_NO_ENOBUFS
 5

	)

106 
	s∆_pktöfo
 {

107 
__u32
 
	mgroup
;

110 
	#NET_MAJOR
 36

	)

113 
	mNETLINK_UNCONNECTED
 = 0,

114 
	mNETLINK_CONNECTED
,

126 
	s∆©å
 {

127 
__u16
 
	m∆a_Àn
;

128 
__u16
 
	m∆a_ty≥
;

141 
	#NLA_F_NESTED
 (1 << 15)

	)

142 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

143 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

145 
	#NLA_ALIGNTO
 4

	)

146 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

147 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@mylibnl/libnl-3.2.25/include/linux/pkt_cls.h

1 #i‚de‡
__LINUX_PKT_CLS_H


2 
	#__LINUX_PKT_CLS_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_sched.h
>

10 
	#_TC_MAKE32
(
x
Ë((x))

	)

12 
	#_TC_MAKEMASK1
(
n
Ë(
	`_TC_MAKE32
(1Ë<< _TC_MAKE32“))

	)

13 
	#_TC_MAKEMASK
(
v
,
n
Ë(
	`_TC_MAKE32
((_TC_MAKE32(1)<<(v))-1Ë<< _TC_MAKE32“))

	)

14 
	#_TC_MAKEVALUE
(
v
,
n
Ë(
	`_TC_MAKE32
(vË<< _TC_MAKE32“))

	)

15 
	#_TC_GETVALUE
(
v
,
n
,
m
Ë((
	`_TC_MAKE32
(vË& _TC_MAKE32(m)Ë>> _TC_MAKE32“))

	)

38 
	#TC_MUNGED
 
	`_TC_MAKEMASK1
(0)

	)

39 
	#SET_TC_MUNGED
(
v
Ë–
TC_MUNGED
 | (v & ~TC_MUNGED))

	)

40 
	#CLR_TC_MUNGED
(
v
Ë–v & ~
TC_MUNGED
)

	)

42 
	#TC_OK2MUNGE
 
	`_TC_MAKEMASK1
(1)

	)

43 
	#SET_TC_OK2MUNGE
(
v
Ë–
TC_OK2MUNGE
 | (v & ~TC_OK2MUNGE))

	)

44 
	#CLR_TC_OK2MUNGE
(
v
Ë–v & ~
TC_OK2MUNGE
)

	)

46 
	#S_TC_VERD
 
	`_TC_MAKE32
(2)

	)

47 
	#M_TC_VERD
 
	`_TC_MAKEMASK
(4,
S_TC_VERD
)

	)

48 
	#G_TC_VERD
(
x
Ë
	`_TC_GETVALUE
(x,
S_TC_VERD
,
M_TC_VERD
)

	)

49 
	#V_TC_VERD
(
x
Ë
	`_TC_MAKEVALUE
(x,
S_TC_VERD
)

	)

50 
	#SET_TC_VERD
(
v
,
n
Ë((
	`V_TC_VERD
“)Ë| (v & ~
M_TC_VERD
))

	)

52 
	#S_TC_FROM
 
	`_TC_MAKE32
(6)

	)

53 
	#M_TC_FROM
 
	`_TC_MAKEMASK
(2,
S_TC_FROM
)

	)

54 
	#G_TC_FROM
(
x
Ë
	`_TC_GETVALUE
(x,
S_TC_FROM
,
M_TC_FROM
)

	)

55 
	#V_TC_FROM
(
x
Ë
	`_TC_MAKEVALUE
(x,
S_TC_FROM
)

	)

56 
	#SET_TC_FROM
(
v
,
n
Ë((
	`V_TC_FROM
“)Ë| (v & ~
M_TC_FROM
))

	)

57 
	#AT_STACK
 0x0

	)

58 
	#AT_INGRESS
 0x1

	)

59 
	#AT_EGRESS
 0x2

	)

61 
	#TC_NCLS
 
	`_TC_MAKEMASK1
(8)

	)

62 
	#SET_TC_NCLS
(
v
Ë–
TC_NCLS
 | (v & ~TC_NCLS))

	)

63 
	#CLR_TC_NCLS
(
v
Ë–v & ~
TC_NCLS
)

	)

65 
	#S_TC_RTTL
 
	`_TC_MAKE32
(9)

	)

66 
	#M_TC_RTTL
 
	`_TC_MAKEMASK
(3,
S_TC_RTTL
)

	)

67 
	#G_TC_RTTL
(
x
Ë
	`_TC_GETVALUE
(x,
S_TC_RTTL
,
M_TC_RTTL
)

	)

68 
	#V_TC_RTTL
(
x
Ë
	`_TC_MAKEVALUE
(x,
S_TC_RTTL
)

	)

69 
	#SET_TC_RTTL
(
v
,
n
Ë((
	`V_TC_RTTL
“)Ë| (v & ~
M_TC_RTTL
))

	)

71 
	#S_TC_AT
 
	`_TC_MAKE32
(12)

	)

72 
	#M_TC_AT
 
	`_TC_MAKEMASK
(2,
S_TC_AT
)

	)

73 
	#G_TC_AT
(
x
Ë
	`_TC_GETVALUE
(x,
S_TC_AT
,
M_TC_AT
)

	)

74 
	#V_TC_AT
(
x
Ë
	`_TC_MAKEVALUE
(x,
S_TC_AT
)

	)

75 
	#SET_TC_AT
(
v
,
n
Ë((
	`V_TC_AT
“)Ë| (v & ~
M_TC_AT
))

	)

79 
	mTCA_ACT_UNSPEC
,

80 
	mTCA_ACT_KIND
,

81 
	mTCA_ACT_OPTIONS
,

82 
	mTCA_ACT_INDEX
,

83 
	mTCA_ACT_STATS
,

84 
	m__TCA_ACT_MAX


87 
	#TCA_ACT_MAX
 
__TCA_ACT_MAX


	)

88 
	#TCA_OLD_COMPAT
 (
TCA_ACT_MAX
+1)

	)

89 
	#TCA_ACT_MAX_PRIO
 32

	)

90 
	#TCA_ACT_BIND
 1

	)

91 
	#TCA_ACT_NOBIND
 0

	)

92 
	#TCA_ACT_UNBIND
 1

	)

93 
	#TCA_ACT_NOUNBIND
 0

	)

94 
	#TCA_ACT_REPLACE
 1

	)

95 
	#TCA_ACT_NOREPLACE
 0

	)

96 
	#MAX_REC_LOOP
 4

	)

97 
	#MAX_RED_LOOP
 4

	)

99 
	#TC_ACT_UNSPEC
 (-1)

	)

100 
	#TC_ACT_OK
 0

	)

101 
	#TC_ACT_RECLASSIFY
 1

	)

102 
	#TC_ACT_SHOT
 2

	)

103 
	#TC_ACT_PIPE
 3

	)

104 
	#TC_ACT_STOLEN
 4

	)

105 
	#TC_ACT_QUEUED
 5

	)

106 
	#TC_ACT_REPEAT
 6

	)

107 
	#TC_ACT_JUMP
 0x10000000

	)

111 
	mTCA_ID_UNSPEC
=0,

112 
	mTCA_ID_POLICE
=1,

114 
	m__TCA_ID_MAX
=255

117 
	#TCA_ID_MAX
 
__TCA_ID_MAX


	)

119 
	stc_pﬁi˚
 {

120 
__u32
 
	mödex
;

121 
	ma˘i⁄
;

122 
	#TC_POLICE_UNSPEC
 
TC_ACT_UNSPEC


	)

123 
	#TC_POLICE_OK
 
TC_ACT_OK


	)

124 
	#TC_POLICE_RECLASSIFY
 
TC_ACT_RECLASSIFY


	)

125 
	#TC_POLICE_SHOT
 
TC_ACT_SHOT


	)

126 
	#TC_POLICE_PIPE
 
TC_ACT_PIPE


	)

128 
__u32
 
	mlimô
;

129 
__u32
 
	mbur°
;

130 
__u32
 
	mmtu
;

131 
tc_øã•ec
 
	møã
;

132 
tc_øã•ec
 
	m≥akøã
;

133 
	mªf˙t
;

134 
	mböd˙t
;

135 
__u32
 
	mˇ∑b
;

138 
	stcf_t
 {

139 
__u64
 
	mö°Æl
;

140 
__u64
 
	mœ°u£
;

141 
__u64
 
	mexpúes
;

144 
	stc_˙t
 {

145 
	mªf˙t
;

146 
	mböd˙t
;

149 
	#tc_gí
 \

150 
__u32
 
ödex
; \

151 
__u32
 
ˇ∑b
; \

152 
a˘i⁄
; \

153 
ªf˙t
; \

154 
böd˙t


	)

157 
	mTCA_POLICE_UNSPEC
,

158 
	mTCA_POLICE_TBF
,

159 
	mTCA_POLICE_RATE
,

160 
	mTCA_POLICE_PEAKRATE
,

161 
	mTCA_POLICE_AVRATE
,

162 
	mTCA_POLICE_RESULT
,

163 
	m__TCA_POLICE_MAX


164 
	#TCA_POLICE_RESULT
 
TCA_POLICE_RESULT


	)

167 
	#TCA_POLICE_MAX
 (
__TCA_POLICE_MAX
 - 1)

	)

171 
	#TC_U32_HTID
(
h
Ë((h)&0xFFF00000)

	)

172 
	#TC_U32_USERHTID
(
h
Ë(
	`TC_U32_HTID
(h)>>20)

	)

173 
	#TC_U32_HASH
(
h
Ë(((h)>>12)&0xFF)

	)

174 
	#TC_U32_NODE
(
h
Ë((h)&0xFFF)

	)

175 
	#TC_U32_KEY
(
h
Ë((h)&0xFFFFF)

	)

176 
	#TC_U32_UNSPEC
 0

	)

177 
	#TC_U32_ROOT
 (0xFFF00000)

	)

180 
	mTCA_U32_UNSPEC
,

181 
	mTCA_U32_CLASSID
,

182 
	mTCA_U32_HASH
,

183 
	mTCA_U32_LINK
,

184 
	mTCA_U32_DIVISOR
,

185 
	mTCA_U32_SEL
,

186 
	mTCA_U32_POLICE
,

187 
	mTCA_U32_ACT
,

188 
	mTCA_U32_INDEV
,

189 
	mTCA_U32_PCNT
,

190 
	mTCA_U32_MARK
,

191 
	m__TCA_U32_MAX


194 
	#TCA_U32_MAX
 (
__TCA_U32_MAX
 - 1)

	)

196 
	stc_u32_key
 {

197 
__be32
 
	mmask
;

198 
__be32
 
	mvÆ
;

199 
	moff
;

200 
	moffmask
;

203 
	stc_u32_£l
 {

204 
	mÊags
;

205 
	moffshi·
;

206 
	mnkeys
;

208 
__be16
 
	moffmask
;

209 
__u16
 
	moff
;

210 
	moffoff
;

212 
	mhoff
;

213 
__be32
 
	mhmask
;

214 
tc_u32_key
 
	mkeys
[0];

217 
	stc_u32_m¨k
 {

218 
__u32
 
	mvÆ
;

219 
__u32
 
	mmask
;

220 
__u32
 
	msuc˚ss
;

223 
	stc_u32_p˙t
 {

224 
__u64
 
	mr˙t
;

225 
__u64
 
	mrhô
;

226 
__u64
 
	mk˙ts
[0];

231 
	#TC_U32_TERMINAL
 1

	)

232 
	#TC_U32_OFFSET
 2

	)

233 
	#TC_U32_VAROFFSET
 4

	)

234 
	#TC_U32_EAT
 8

	)

236 
	#TC_U32_MAXDEPTH
 8

	)

242 
	mTCA_RSVP_UNSPEC
,

243 
	mTCA_RSVP_CLASSID
,

244 
	mTCA_RSVP_DST
,

245 
	mTCA_RSVP_SRC
,

246 
	mTCA_RSVP_PINFO
,

247 
	mTCA_RSVP_POLICE
,

248 
	mTCA_RSVP_ACT
,

249 
	m__TCA_RSVP_MAX


252 
	#TCA_RSVP_MAX
 (
__TCA_RSVP_MAX
 - 1 )

	)

254 
	stc_rsvp_gpi
 {

255 
__u32
 
	mkey
;

256 
__u32
 
	mmask
;

257 
	moff£t
;

260 
	stc_rsvp_pöfo
 {

261 
tc_rsvp_gpi
 
	mdpi
;

262 
tc_rsvp_gpi
 
	m•i
;

263 
__u8
 
	m¥Ÿocﬁ
;

264 
__u8
 
	mtu¬ñid
;

265 
__u8
 
	mtu¬ñhdr
;

266 
__u8
 
	m∑d
;

272 
	mTCA_ROUTE4_UNSPEC
,

273 
	mTCA_ROUTE4_CLASSID
,

274 
	mTCA_ROUTE4_TO
,

275 
	mTCA_ROUTE4_FROM
,

276 
	mTCA_ROUTE4_IIF
,

277 
	mTCA_ROUTE4_POLICE
,

278 
	mTCA_ROUTE4_ACT
,

279 
	m__TCA_ROUTE4_MAX


282 
	#TCA_ROUTE4_MAX
 (
__TCA_ROUTE4_MAX
 - 1)

	)

288 
	mTCA_FW_UNSPEC
,

289 
	mTCA_FW_CLASSID
,

290 
	mTCA_FW_POLICE
,

291 
	mTCA_FW_INDEV
,

292 
	mTCA_FW_ACT
,

293 
	mTCA_FW_MASK
,

294 
	m__TCA_FW_MAX


297 
	#TCA_FW_MAX
 (
__TCA_FW_MAX
 - 1)

	)

302 
	mTCA_TCINDEX_UNSPEC
,

303 
	mTCA_TCINDEX_HASH
,

304 
	mTCA_TCINDEX_MASK
,

305 
	mTCA_TCINDEX_SHIFT
,

306 
	mTCA_TCINDEX_FALL_THROUGH
,

307 
	mTCA_TCINDEX_CLASSID
,

308 
	mTCA_TCINDEX_POLICE
,

309 
	mTCA_TCINDEX_ACT
,

310 
	m__TCA_TCINDEX_MAX


313 
	#TCA_TCINDEX_MAX
 (
__TCA_TCINDEX_MAX
 - 1)

	)

318 
	mFLOW_KEY_SRC
,

319 
	mFLOW_KEY_DST
,

320 
	mFLOW_KEY_PROTO
,

321 
	mFLOW_KEY_PROTO_SRC
,

322 
	mFLOW_KEY_PROTO_DST
,

323 
	mFLOW_KEY_IIF
,

324 
	mFLOW_KEY_PRIORITY
,

325 
	mFLOW_KEY_MARK
,

326 
	mFLOW_KEY_NFCT
,

327 
	mFLOW_KEY_NFCT_SRC
,

328 
	mFLOW_KEY_NFCT_DST
,

329 
	mFLOW_KEY_NFCT_PROTO_SRC
,

330 
	mFLOW_KEY_NFCT_PROTO_DST
,

331 
	mFLOW_KEY_RTCLASSID
,

332 
	mFLOW_KEY_SKUID
,

333 
	mFLOW_KEY_SKGID
,

334 
	mFLOW_KEY_VLAN_TAG
,

335 
	mFLOW_KEY_RXHASH
,

336 
	m__FLOW_KEY_MAX
,

339 
	#FLOW_KEY_MAX
 (
__FLOW_KEY_MAX
 - 1)

	)

342 
	mFLOW_MODE_MAP
,

343 
	mFLOW_MODE_HASH
,

347 
	mTCA_FLOW_UNSPEC
,

348 
	mTCA_FLOW_KEYS
,

349 
	mTCA_FLOW_MODE
,

350 
	mTCA_FLOW_BASECLASS
,

351 
	mTCA_FLOW_RSHIFT
,

352 
	mTCA_FLOW_ADDEND
,

353 
	mTCA_FLOW_MASK
,

354 
	mTCA_FLOW_XOR
,

355 
	mTCA_FLOW_DIVISOR
,

356 
	mTCA_FLOW_ACT
,

357 
	mTCA_FLOW_POLICE
,

358 
	mTCA_FLOW_EMATCHES
,

359 
	mTCA_FLOW_PERTURB
,

360 
	m__TCA_FLOW_MAX


363 
	#TCA_FLOW_MAX
 (
__TCA_FLOW_MAX
 - 1)

	)

368 
	mTCA_BASIC_UNSPEC
,

369 
	mTCA_BASIC_CLASSID
,

370 
	mTCA_BASIC_EMATCHES
,

371 
	mTCA_BASIC_ACT
,

372 
	mTCA_BASIC_POLICE
,

373 
	m__TCA_BASIC_MAX


376 
	#TCA_BASIC_MAX
 (
__TCA_BASIC_MAX
 - 1)

	)

382 
	mTCA_CGROUP_UNSPEC
,

383 
	mTCA_CGROUP_ACT
,

384 
	mTCA_CGROUP_POLICE
,

385 
	mTCA_CGROUP_EMATCHES
,

386 
	m__TCA_CGROUP_MAX
,

389 
	#TCA_CGROUP_MAX
 (
__TCA_CGROUP_MAX
 - 1)

	)

393 
	stcf_em©ch_åì_hdr
 {

394 
__u16
 
	mnm©ches
;

395 
__u16
 
	m¥ogid
;

399 
	mTCA_EMATCH_TREE_UNSPEC
,

400 
	mTCA_EMATCH_TREE_HDR
,

401 
	mTCA_EMATCH_TREE_LIST
,

402 
	m__TCA_EMATCH_TREE_MAX


404 
	#TCA_EMATCH_TREE_MAX
 (
__TCA_EMATCH_TREE_MAX
 - 1)

	)

406 
	stcf_em©ch_hdr
 {

407 
__u16
 
	mm©chid
;

408 
__u16
 
	mköd
;

409 
__u16
 
	mÊags
;

410 
__u16
 
	m∑d
;

427 
	#TCF_EM_REL_END
 0

	)

428 
	#TCF_EM_REL_AND
 (1<<0)

	)

429 
	#TCF_EM_REL_OR
 (1<<1)

	)

430 
	#TCF_EM_INVERT
 (1<<2)

	)

431 
	#TCF_EM_SIMPLE
 (1<<3)

	)

433 
	#TCF_EM_REL_MASK
 3

	)

434 
	#TCF_EM_REL_VALID
(
v
Ë(((vË& 
TCF_EM_REL_MASK
Ë!TCF_EM_REL_MASK)

	)

437 
	mTCF_LAYER_LINK
,

438 
	mTCF_LAYER_NETWORK
,

439 
	mTCF_LAYER_TRANSPORT
,

440 
	m__TCF_LAYER_MAX


442 
	#TCF_LAYER_MAX
 (
__TCF_LAYER_MAX
 - 1)

	)

448 
	#TCF_EM_CONTAINER
 0

	)

449 
	#TCF_EM_CMP
 1

	)

450 
	#TCF_EM_NBYTE
 2

	)

451 
	#TCF_EM_U32
 3

	)

452 
	#TCF_EM_META
 4

	)

453 
	#TCF_EM_TEXT
 5

	)

454 
	#TCF_EM_VLAN
 6

	)

455 
	#TCF_EM_MAX
 6

	)

458 
	mTCF_EM_PROG_TC


462 
	mTCF_EM_OPND_EQ
,

463 
	mTCF_EM_OPND_GT
,

464 
	mTCF_EM_OPND_LT


	@mylibnl/libnl-3.2.25/include/linux/pkt_sched.h

1 #i‚de‡
__LINUX_PKT_SCHED_H


2 
	#__LINUX_PKT_SCHED_H


	)

4 
	~<löux/ty≥s.h
>

19 
	#TC_PRIO_BESTEFFORT
 0

	)

20 
	#TC_PRIO_FILLER
 1

	)

21 
	#TC_PRIO_BULK
 2

	)

22 
	#TC_PRIO_INTERACTIVE_BULK
 4

	)

23 
	#TC_PRIO_INTERACTIVE
 6

	)

24 
	#TC_PRIO_CONTROL
 7

	)

26 
	#TC_PRIO_MAX
 15

	)

32 
	stc_°©s
 {

33 
__u64
 
	mbyãs
;

34 
__u32
 
	m∑ckës
;

35 
__u32
 
	mdr›s
;

36 
__u32
 
	movîlimôs
;

38 
__u32
 
	mbps
;

39 
__u32
 
	mµs
;

40 
__u32
 
	mqÀn
;

41 
__u32
 
	mbacklog
;

44 
	stc_e°im©‹
 {

45 sig√d 
	möãrvÆ
;

46 
	mewma_log
;

66 
	#TC_H_MAJ_MASK
 (0xFFFF0000U)

	)

67 
	#TC_H_MIN_MASK
 (0x0000FFFFU)

	)

68 
	#TC_H_MAJ
(
h
Ë((h)&
TC_H_MAJ_MASK
)

	)

69 
	#TC_H_MIN
(
h
Ë((h)&
TC_H_MIN_MASK
)

	)

70 
	#TC_H_MAKE
(
maj
,
mö
Ë(((maj)&
TC_H_MAJ_MASK
)|((mö)&
TC_H_MIN_MASK
))

	)

72 
	#TC_H_UNSPEC
 (0U)

	)

73 
	#TC_H_ROOT
 (0xFFFFFFFFU)

	)

74 
	#TC_H_INGRESS
 (0xFFFFFFF1U)

	)

76 
	stc_øã•ec
 {

77 
	m˚Œ_log
;

78 
	m__ª£rved
;

79 
	movîhód
;

80 
	m˚Œ_Æign
;

81 
	mmpu
;

82 
__u32
 
	møã
;

85 
	#TC_RTAB_SIZE
 1024

	)

87 
	stc_size•ec
 {

88 
	m˚Œ_log
;

89 
	msize_log
;

90 
	m˚Œ_Æign
;

91 
	movîhód
;

92 
	mlökœyî
;

93 
	mmpu
;

94 
	mmtu
;

95 
	mtsize
;

99 
	mTCA_STAB_UNSPEC
,

100 
	mTCA_STAB_BASE
,

101 
	mTCA_STAB_DATA
,

102 
	m__TCA_STAB_MAX


105 
	#TCA_STAB_MAX
 (
__TCA_STAB_MAX
 - 1)

	)

109 
	stc_fifo_q›t
 {

110 
__u32
 
	mlimô
;

115 
	#TCQ_PRIO_BANDS
 16

	)

116 
	#TCQ_MIN_PRIO_BANDS
 2

	)

118 
	stc_¥io_q›t
 {

119 
	mb™ds
;

120 
__u8
 
	m¥iom≠
[
TC_PRIO_MAX
+1];

125 
	stc_mu…iq_q›t
 {

126 
__u16
 
	mb™ds
;

127 
__u16
 
	mmax_b™ds
;

132 
	#TCQ_PLUG_BUFFER
 0

	)

133 
	#TCQ_PLUG_RELEASE_ONE
 1

	)

134 
	#TCQ_PLUG_RELEASE_INDEFINITE
 2

	)

135 
	#TCQ_PLUG_LIMIT
 3

	)

137 
	stc_∂ug_q›t
 {

147 
	ma˘i⁄
;

148 
__u32
 
	mlimô
;

153 
	stc_tbf_q›t
 {

154 
tc_øã•ec
 
	møã
;

155 
tc_øã•ec
 
	m≥akøã
;

156 
__u32
 
	mlimô
;

157 
__u32
 
	mbuf„r
;

158 
__u32
 
	mmtu
;

162 
	mTCA_TBF_UNSPEC
,

163 
	mTCA_TBF_PARMS
,

164 
	mTCA_TBF_RTAB
,

165 
	mTCA_TBF_PTAB
,

166 
	m__TCA_TBF_MAX
,

169 
	#TCA_TBF_MAX
 (
__TCA_TBF_MAX
 - 1)

	)

178 
	stc_sfq_q›t
 {

179 
	mqu™tum
;

180 
	m≥πurb_≥riod
;

181 
__u32
 
	mlimô
;

182 
	mdivis‹
;

183 
	mÊows
;

186 
	stc_sfq_x°©s
 {

187 
__s32
 
	mÆlŸ
;

202 
	mTCA_RED_UNSPEC
,

203 
	mTCA_RED_PARMS
,

204 
	mTCA_RED_STAB
,

205 
	m__TCA_RED_MAX
,

208 
	#TCA_RED_MAX
 (
__TCA_RED_MAX
 - 1)

	)

210 
	stc_ªd_q›t
 {

211 
__u32
 
	mlimô
;

212 
__u32
 
	mqth_mö
;

213 
__u32
 
	mqth_max
;

214 
	mWlog
;

215 
	mPlog
;

216 
	mS˚Œ_log
;

217 
	mÊags
;

218 
	#TC_RED_ECN
 1

	)

219 
	#TC_RED_HARDDROP
 2

	)

222 
	stc_ªd_x°©s
 {

223 
__u32
 
	móæy
;

224 
__u32
 
	mpdr›
;

225 
__u32
 
	mŸhî
;

226 
__u32
 
	mm¨ked
;

231 
	#MAX_DPs
 16

	)

234 
	mTCA_GRED_UNSPEC
,

235 
	mTCA_GRED_PARMS
,

236 
	mTCA_GRED_STAB
,

237 
	mTCA_GRED_DPS
,

238 
	m__TCA_GRED_MAX
,

241 
	#TCA_GRED_MAX
 (
__TCA_GRED_MAX
 - 1)

	)

243 
	stc_gªd_q›t
 {

244 
__u32
 
	mlimô
;

245 
__u32
 
	mqth_mö
;

246 
__u32
 
	mqth_max
;

247 
__u32
 
	mDP
;

248 
__u32
 
	mbacklog
;

249 
__u32
 
	mqave
;

250 
__u32
 
	mf‹˚d
;

251 
__u32
 
	móæy
;

252 
__u32
 
	mŸhî
;

253 
__u32
 
	mpdr›
;

254 
__u8
 
	mWlog
;

255 
__u8
 
	mPlog
;

256 
__u8
 
	mS˚Œ_log
;

257 
__u8
 
	m¥io
;

258 
__u32
 
	m∑ckës
;

259 
__u32
 
	mbyãsö
;

263 
	stc_gªd_s›t
 {

264 
__u32
 
	mDPs
;

265 
__u32
 
	mdef_DP
;

266 
__u8
 
	mgrio
;

267 
__u8
 
	mÊags
;

268 
__u16
 
	m∑d1
;

274 
	mTCA_CHOKE_UNSPEC
,

275 
	mTCA_CHOKE_PARMS
,

276 
	mTCA_CHOKE_STAB
,

277 
	m__TCA_CHOKE_MAX
,

280 
	#TCA_CHOKE_MAX
 (
__TCA_CHOKE_MAX
 - 1)

	)

282 
	stc_choke_q›t
 {

283 
__u32
 
	mlimô
;

284 
__u32
 
	mqth_mö
;

285 
__u32
 
	mqth_max
;

286 
	mWlog
;

287 
	mPlog
;

288 
	mS˚Œ_log
;

289 
	mÊags
;

292 
	stc_choke_x°©s
 {

293 
__u32
 
	móæy
;

294 
__u32
 
	mpdr›
;

295 
__u32
 
	mŸhî
;

296 
__u32
 
	mm¨ked
;

297 
__u32
 
	mm©ched
;

301 
	#TC_HTB_NUMPRIO
 8

	)

302 
	#TC_HTB_MAXDEPTH
 8

	)

303 
	#TC_HTB_PROTOVER
 3

	)

305 
	stc_htb_›t
 {

306 
tc_øã•ec
 
	møã
;

307 
tc_øã•ec
 
	m˚û
;

308 
__u32
 
	mbuf„r
;

309 
__u32
 
	mcbuf„r
;

310 
__u32
 
	mqu™tum
;

311 
__u32
 
	mÀvñ
;

312 
__u32
 
	m¥io
;

314 
	stc_htb_glob
 {

315 
__u32
 
	mvîsi⁄
;

316 
__u32
 
	møã2qu™tum
;

317 
__u32
 
	mdef˛s
;

318 
__u32
 
	mdebug
;

321 
__u32
 
	mdúe˘_pkts
;

324 
	mTCA_HTB_UNSPEC
,

325 
	mTCA_HTB_PARMS
,

326 
	mTCA_HTB_INIT
,

327 
	mTCA_HTB_CTAB
,

328 
	mTCA_HTB_RTAB
,

329 
	m__TCA_HTB_MAX
,

332 
	#TCA_HTB_MAX
 (
__TCA_HTB_MAX
 - 1)

	)

334 
	stc_htb_x°©s
 {

335 
__u32
 
	mÀnds
;

336 
__u32
 
	mb‹rows
;

337 
__u32
 
	mgü¡s
;

338 
__u32
 
	mtokís
;

339 
__u32
 
	m˘okís
;

344 
	stc_hfsc_q›t
 {

345 
__u16
 
	mdef˛s
;

348 
	stc_£rvi˚_curve
 {

349 
__u32
 
	mm1
;

350 
__u32
 
	md
;

351 
__u32
 
	mm2
;

354 
	stc_hfsc_°©s
 {

355 
__u64
 
	mw‹k
;

356 
__u64
 
	mπw‹k
;

357 
__u32
 
	m≥riod
;

358 
__u32
 
	mÀvñ
;

362 
	mTCA_HFSC_UNSPEC
,

363 
	mTCA_HFSC_RSC
,

364 
	mTCA_HFSC_FSC
,

365 
	mTCA_HFSC_USC
,

366 
	m__TCA_HFSC_MAX
,

369 
	#TCA_HFSC_MAX
 (
__TCA_HFSC_MAX
 - 1)

	)

374 
	#TC_CBQ_MAXPRIO
 8

	)

375 
	#TC_CBQ_MAXLEVEL
 8

	)

376 
	#TC_CBQ_DEF_EWMA
 5

	)

378 
	stc_cbq_lss›t
 {

379 
	mch™ge
;

380 
	mÊags
;

381 
	#TCF_CBQ_LSS_BOUNDED
 1

	)

382 
	#TCF_CBQ_LSS_ISOLATED
 2

	)

383 
	mewma_log
;

384 
	mÀvñ
;

385 
	#TCF_CBQ_LSS_FLAGS
 1

	)

386 
	#TCF_CBQ_LSS_EWMA
 2

	)

387 
	#TCF_CBQ_LSS_MAXIDLE
 4

	)

388 
	#TCF_CBQ_LSS_MINIDLE
 8

	)

389 
	#TCF_CBQ_LSS_OFFTIME
 0x10

	)

390 
	#TCF_CBQ_LSS_AVPKT
 0x20

	)

391 
__u32
 
	mmaxidÀ
;

392 
__u32
 
	mmöidÀ
;

393 
__u32
 
	mof·ime
;

394 
__u32
 
	mavpkt
;

397 
	stc_cbq_wº›t
 {

398 
	mÊags
;

399 
	m¥i‹ôy
;

400 
	m˝ri‹ôy
;

401 
	m__ª£rved
;

402 
__u32
 
	mÆlŸ
;

403 
__u32
 
	mweight
;

406 
	stc_cbq_ovl
 {

407 
	m°øãgy
;

408 
	#TC_CBQ_OVL_CLASSIC
 0

	)

409 
	#TC_CBQ_OVL_DELAY
 1

	)

410 
	#TC_CBQ_OVL_LOWPRIO
 2

	)

411 
	#TC_CBQ_OVL_DROP
 3

	)

412 
	#TC_CBQ_OVL_RCLASSIC
 4

	)

413 
	m¥i‹ôy2
;

414 
__u16
 
	m∑d
;

415 
__u32
 
	m≥«…y
;

418 
	stc_cbq_pﬁi˚
 {

419 
	mpﬁi˚
;

420 
	m__ªs1
;

421 
	m__ªs2
;

424 
	stc_cbq_f›t
 {

425 
__u32
 
	m•lô
;

426 
__u32
 
	mdefm≠
;

427 
__u32
 
	mdefch™ge
;

430 
	stc_cbq_x°©s
 {

431 
__u32
 
	mb‹rows
;

432 
__u32
 
	movîa˘i⁄s
;

433 
__s32
 
	mavgidÀ
;

434 
__s32
 
	mundîtime
;

438 
	mTCA_CBQ_UNSPEC
,

439 
	mTCA_CBQ_LSSOPT
,

440 
	mTCA_CBQ_WRROPT
,

441 
	mTCA_CBQ_FOPT
,

442 
	mTCA_CBQ_OVL_STRATEGY
,

443 
	mTCA_CBQ_RATE
,

444 
	mTCA_CBQ_RTAB
,

445 
	mTCA_CBQ_POLICE
,

446 
	m__TCA_CBQ_MAX
,

449 
	#TCA_CBQ_MAX
 (
__TCA_CBQ_MAX
 - 1)

	)

454 
	mTCA_DSMARK_UNSPEC
,

455 
	mTCA_DSMARK_INDICES
,

456 
	mTCA_DSMARK_DEFAULT_INDEX
,

457 
	mTCA_DSMARK_SET_TC_INDEX
,

458 
	mTCA_DSMARK_MASK
,

459 
	mTCA_DSMARK_VALUE
,

460 
	m__TCA_DSMARK_MAX
,

463 
	#TCA_DSMARK_MAX
 (
__TCA_DSMARK_MAX
 - 1)

	)

468 
	mTCA_FQ_CODEL_UNSPEC
,

469 
	mTCA_FQ_CODEL_TARGET
,

470 
	mTCA_FQ_CODEL_LIMIT
,

471 
	mTCA_FQ_CODEL_INTERVAL
,

472 
	mTCA_FQ_CODEL_ECN
,

473 
	mTCA_FQ_CODEL_FLOWS
,

474 
	mTCA_FQ_CODEL_QUANTUM
,

475 
	m__TCA_FQ_CODEL_MAX


478 
	#TCA_FQ_CODEL_MAX
 (
__TCA_FQ_CODEL_MAX
 - 1)

	)

483 
	mTCA_ATM_UNSPEC
,

484 
	mTCA_ATM_FD
,

485 
	mTCA_ATM_PTR
,

486 
	mTCA_ATM_HDR
,

487 
	mTCA_ATM_EXCESS
,

488 
	mTCA_ATM_ADDR
,

489 
	mTCA_ATM_STATE
,

490 
	m__TCA_ATM_MAX
,

493 
	#TCA_ATM_MAX
 (
__TCA_ATM_MAX
 - 1)

	)

498 
	mTCA_NETEM_UNSPEC
,

499 
	mTCA_NETEM_CORR
,

500 
	mTCA_NETEM_DELAY_DIST
,

501 
	mTCA_NETEM_REORDER
,

502 
	mTCA_NETEM_CORRUPT
,

503 
	mTCA_NETEM_LOSS
,

504 
	m__TCA_NETEM_MAX
,

507 
	#TCA_NETEM_MAX
 (
__TCA_NETEM_MAX
 - 1)

	)

509 
	stc_√ãm_q›t
 {

510 
__u32
 
	mœãncy
;

511 
__u32
 
	mlimô
;

512 
__u32
 
	mloss
;

513 
__u32
 
	mg≠
;

514 
__u32
 
	mdu∂iˇã
;

515 
__u32
 
	mjôãr
;

518 
	stc_√ãm_c‹r
 {

519 
__u32
 
	mdñay_c‹r
;

520 
__u32
 
	mloss_c‹r
;

521 
__u32
 
	mdup_c‹r
;

524 
	stc_√ãm_ª‹dî
 {

525 
__u32
 
	m¥obabûôy
;

526 
__u32
 
	mc‹ªœti⁄
;

529 
	stc_√ãm_c‹ru±
 {

530 
__u32
 
	m¥obabûôy
;

531 
__u32
 
	mc‹ªœti⁄
;

535 
	mNETEM_LOSS_UNSPEC
,

536 
	mNETEM_LOSS_GI
,

537 
	mNETEM_LOSS_GE
,

538 
	m__NETEM_LOSS_MAX


540 
	#NETEM_LOSS_MAX
 (
__NETEM_LOSS_MAX
 - 1)

	)

543 
	stc_√ãm_gimodñ
 {

544 
__u32
 
	mp13
;

545 
__u32
 
	mp31
;

546 
__u32
 
	mp32
;

547 
__u32
 
	mp14
;

548 
__u32
 
	mp23
;

552 
	stc_√ãm_gemodñ
 {

553 
__u32
 
	mp
;

554 
__u32
 
	mr
;

555 
__u32
 
	mh
;

556 
__u32
 
	mk1
;

559 
	#NETEM_DIST_SCALE
 8192

	)

560 
	#NETEM_DIST_MAX
 16384

	)

565 
	mTCA_DRR_UNSPEC
,

566 
	mTCA_DRR_QUANTUM
,

567 
	m__TCA_DRR_MAX


570 
	#TCA_DRR_MAX
 (
__TCA_DRR_MAX
 - 1)

	)

572 
	stc_dº_°©s
 {

573 
__u32
 
	mdeficô
;

577 
	#TC_QOPT_BITMASK
 15

	)

578 
	#TC_QOPT_MAX_QUEUE
 16

	)

580 
	stc_mq¥io_q›t
 {

581 
__u8
 
	mnum_tc
;

582 
__u8
 
	m¥io_tc_m≠
[
TC_QOPT_BITMASK
 + 1];

583 
__u8
 
	mhw
;

584 
__u16
 
	mcou¡
[
TC_QOPT_MAX_QUEUE
];

585 
__u16
 
	moff£t
[
TC_QOPT_MAX_QUEUE
];

591 
	mTCA_SFB_UNSPEC
,

592 
	mTCA_SFB_PARMS
,

593 
	m__TCA_SFB_MAX
,

596 
	#TCA_SFB_MAX
 (
__TCA_SFB_MAX
 - 1)

	)

601 
	stc_sfb_q›t
 {

602 
__u32
 
	mªhash_öãrvÆ
;

603 
__u32
 
	mw¨mup_time
;

604 
__u32
 
	mmax
;

605 
__u32
 
	mbö_size
;

606 
__u32
 
	mö¸emít
;

607 
__u32
 
	mde¸emít
;

608 
__u32
 
	mlimô
;

609 
__u32
 
	m≥«…y_øã
;

610 
__u32
 
	m≥«…y_bur°
;

613 
	stc_sfb_x°©s
 {

614 
__u32
 
	móæydr›
;

615 
__u32
 
	m≥«…ydr›
;

616 
__u32
 
	mbuckëdr›
;

617 
__u32
 
	mqueuedr›
;

618 
__u32
 
	mchûddr›
;

619 
__u32
 
	mm¨ked
;

620 
__u32
 
	mmaxqÀn
;

621 
__u32
 
	mmax¥ob
;

622 
__u32
 
	mavg¥ob
;

625 
	#SFB_MAX_PROB
 0xFFFF

	)

629 
	mTCA_QFQ_UNSPEC
,

630 
	mTCA_QFQ_WEIGHT
,

631 
	mTCA_QFQ_LMAX
,

632 
	m__TCA_QFQ_MAX


635 
	#TCA_QFQ_MAX
 (
__TCA_QFQ_MAX
 - 1)

	)

637 
	stc_qfq_°©s
 {

638 
__u32
 
	mweight
;

639 
__u32
 
	mlmax
;

	@mylibnl/libnl-3.2.25/include/linux/rtnetlink.h

1 #i‚de‡
__LINUX_RTNETLINK_H


2 
	#__LINUX_RTNETLINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

6 
	~<löux/if_lök.h
>

7 
	~<löux/if_addr.h
>

8 
	~<löux/√ighbour.h
>

13 
	#RTNL_FAMILY_IPMR
 128

	)

14 
	#RTNL_FAMILY_IP6MR
 129

	)

15 
	#RTNL_FAMILY_MAX
 129

	)

24 
	mRTM_BASE
 = 16,

25 
	#RTM_BASE
 
RTM_BASE


	)

27 
	mRTM_NEWLINK
 = 16,

28 
	#RTM_NEWLINK
 
RTM_NEWLINK


	)

29 
	mRTM_DELLINK
,

30 
	#RTM_DELLINK
 
RTM_DELLINK


	)

31 
	mRTM_GETLINK
,

32 
	#RTM_GETLINK
 
RTM_GETLINK


	)

33 
	mRTM_SETLINK
,

34 
	#RTM_SETLINK
 
RTM_SETLINK


	)

36 
	mRTM_NEWADDR
 = 20,

37 
	#RTM_NEWADDR
 
RTM_NEWADDR


	)

38 
	mRTM_DELADDR
,

39 
	#RTM_DELADDR
 
RTM_DELADDR


	)

40 
	mRTM_GETADDR
,

41 
	#RTM_GETADDR
 
RTM_GETADDR


	)

43 
	mRTM_NEWROUTE
 = 24,

44 
	#RTM_NEWROUTE
 
RTM_NEWROUTE


	)

45 
	mRTM_DELROUTE
,

46 
	#RTM_DELROUTE
 
RTM_DELROUTE


	)

47 
	mRTM_GETROUTE
,

48 
	#RTM_GETROUTE
 
RTM_GETROUTE


	)

50 
	mRTM_NEWNEIGH
 = 28,

51 
	#RTM_NEWNEIGH
 
RTM_NEWNEIGH


	)

52 
	mRTM_DELNEIGH
,

53 
	#RTM_DELNEIGH
 
RTM_DELNEIGH


	)

54 
	mRTM_GETNEIGH
,

55 
	#RTM_GETNEIGH
 
RTM_GETNEIGH


	)

57 
	mRTM_NEWRULE
 = 32,

58 
	#RTM_NEWRULE
 
RTM_NEWRULE


	)

59 
	mRTM_DELRULE
,

60 
	#RTM_DELRULE
 
RTM_DELRULE


	)

61 
	mRTM_GETRULE
,

62 
	#RTM_GETRULE
 
RTM_GETRULE


	)

64 
	mRTM_NEWQDISC
 = 36,

65 
	#RTM_NEWQDISC
 
RTM_NEWQDISC


	)

66 
	mRTM_DELQDISC
,

67 
	#RTM_DELQDISC
 
RTM_DELQDISC


	)

68 
	mRTM_GETQDISC
,

69 
	#RTM_GETQDISC
 
RTM_GETQDISC


	)

71 
	mRTM_NEWTCLASS
 = 40,

72 
	#RTM_NEWTCLASS
 
RTM_NEWTCLASS


	)

73 
	mRTM_DELTCLASS
,

74 
	#RTM_DELTCLASS
 
RTM_DELTCLASS


	)

75 
	mRTM_GETTCLASS
,

76 
	#RTM_GETTCLASS
 
RTM_GETTCLASS


	)

78 
	mRTM_NEWTFILTER
 = 44,

79 
	#RTM_NEWTFILTER
 
RTM_NEWTFILTER


	)

80 
	mRTM_DELTFILTER
,

81 
	#RTM_DELTFILTER
 
RTM_DELTFILTER


	)

82 
	mRTM_GETTFILTER
,

83 
	#RTM_GETTFILTER
 
RTM_GETTFILTER


	)

85 
	mRTM_NEWACTION
 = 48,

86 
	#RTM_NEWACTION
 
RTM_NEWACTION


	)

87 
	mRTM_DELACTION
,

88 
	#RTM_DELACTION
 
RTM_DELACTION


	)

89 
	mRTM_GETACTION
,

90 
	#RTM_GETACTION
 
RTM_GETACTION


	)

92 
	mRTM_NEWPREFIX
 = 52,

93 
	#RTM_NEWPREFIX
 
RTM_NEWPREFIX


	)

95 
	mRTM_GETMULTICAST
 = 58,

96 
	#RTM_GETMULTICAST
 
RTM_GETMULTICAST


	)

98 
	mRTM_GETANYCAST
 = 62,

99 
	#RTM_GETANYCAST
 
RTM_GETANYCAST


	)

101 
	mRTM_NEWNEIGHTBL
 = 64,

102 
	#RTM_NEWNEIGHTBL
 
RTM_NEWNEIGHTBL


	)

103 
	mRTM_GETNEIGHTBL
 = 66,

104 
	#RTM_GETNEIGHTBL
 
RTM_GETNEIGHTBL


	)

105 
	mRTM_SETNEIGHTBL
,

106 
	#RTM_SETNEIGHTBL
 
RTM_SETNEIGHTBL


	)

108 
	mRTM_NEWNDUSEROPT
 = 68,

109 
	#RTM_NEWNDUSEROPT
 
RTM_NEWNDUSEROPT


	)

111 
	mRTM_NEWADDRLABEL
 = 72,

112 
	#RTM_NEWADDRLABEL
 
RTM_NEWADDRLABEL


	)

113 
	mRTM_DELADDRLABEL
,

114 
	#RTM_DELADDRLABEL
 
RTM_DELADDRLABEL


	)

115 
	mRTM_GETADDRLABEL
,

116 
	#RTM_GETADDRLABEL
 
RTM_GETADDRLABEL


	)

118 
	mRTM_GETDCB
 = 78,

119 
	#RTM_GETDCB
 
RTM_GETDCB


	)

120 
	mRTM_SETDCB
,

121 
	#RTM_SETDCB
 
RTM_SETDCB


	)

123 
	m__RTM_MAX
,

124 
	#RTM_MAX
 (((
__RTM_MAX
 + 3Ë& ~3Ë- 1)

	)

127 
	#RTM_NR_MSGTYPES
 (
RTM_MAX
 + 1 - 
RTM_BASE
)

	)

128 
	#RTM_NR_FAMILIES
 (
RTM_NR_MSGTYPES
 >> 2)

	)

129 
	#RTM_FAM
(
cmd
Ë(((cmdË- 
RTM_BASE
Ë>> 2)

	)

137 
	sπ©å
 {

138 
	mπa_Àn
;

139 
	mπa_ty≥
;

144 
	#RTA_ALIGNTO
 4

	)

145 
	#RTA_ALIGN
(
Àn
Ë–(÷í)+
RTA_ALIGNTO
-1Ë& ~(RTA_ALIGNTO-1Ë)

	)

146 
	#RTA_OK
(
πa
,
Àn
Ë(÷íË>()(
π©å
) && \

147 (
πa
)->
πa_Àn
 >(
π©å
) && \

148 (
πa
)->
πa_Àn
 <(
Àn
))

	)

149 
	#RTA_NEXT
(
πa
,
©åÀn
Ë(◊âæíË-
	`RTA_ALIGN
(‘è)->
πa_Àn
), \

150 (
π©å
*)(((*)(
πa
)Ë+ 
	`RTA_ALIGN
(‘è)->
πa_Àn
)))

	)

151 
	#RTA_LENGTH
(
Àn
Ë(
	`RTA_ALIGN
((
π©å
)Ë+ (Àn))

	)

152 
	#RTA_SPACE
(
Àn
Ë
	`RTA_ALIGN
(
	`RTA_LENGTH
÷í))

	)

153 
	#RTA_DATA
(
πa
Ë((*)(((*)‘è)Ë+ 
	`RTA_LENGTH
(0)))

	)

154 
	#RTA_PAYLOAD
(
πa
Ë(()(‘è)->
πa_Àn
Ë- 
	`RTA_LENGTH
(0))

	)

163 
	sπmsg
 {

164 
	mπm_Ámûy
;

165 
	mπm_d°_Àn
;

166 
	mπm_§c_Àn
;

167 
	mπm_tos
;

169 
	mπm_èbÀ
;

170 
	mπm_¥Ÿocﬁ
;

171 
	mπm_sc›e
;

172 
	mπm_ty≥
;

174 
	mπm_Êags
;

180 
	mRTN_UNSPEC
,

181 
	mRTN_UNICAST
,

182 
	mRTN_LOCAL
,

183 
	mRTN_BROADCAST
,

185 
	mRTN_ANYCAST
,

187 
	mRTN_MULTICAST
,

188 
	mRTN_BLACKHOLE
,

189 
	mRTN_UNREACHABLE
,

190 
	mRTN_PROHIBIT
,

191 
	mRTN_THROW
,

192 
	mRTN_NAT
,

193 
	mRTN_XRESOLVE
,

194 
	m__RTN_MAX


197 
	#RTN_MAX
 (
__RTN_MAX
 - 1)

	)

202 
	#RTPROT_UNSPEC
 0

	)

203 
	#RTPROT_REDIRECT
 1

	)

205 
	#RTPROT_KERNEL
 2

	)

206 
	#RTPROT_BOOT
 3

	)

207 
	#RTPROT_STATIC
 4

	)

216 
	#RTPROT_GATED
 8

	)

217 
	#RTPROT_RA
 9

	)

218 
	#RTPROT_MRT
 10

	)

219 
	#RTPROT_ZEBRA
 11

	)

220 
	#RTPROT_BIRD
 12

	)

221 
	#RTPROT_DNROUTED
 13

	)

222 
	#RTPROT_XORP
 14

	)

223 
	#RTPROT_NTK
 15

	)

224 
	#RTPROT_DHCP
 16

	)

237 
	eπ_sc›e_t
 {

238 
	mRT_SCOPE_UNIVERSE
=0,

240 
	mRT_SCOPE_SITE
=200,

241 
	mRT_SCOPE_LINK
=253,

242 
	mRT_SCOPE_HOST
=254,

243 
	mRT_SCOPE_NOWHERE
=255

248 
	#RTM_F_NOTIFY
 0x100

	)

249 
	#RTM_F_CLONED
 0x200

	)

250 
	#RTM_F_EQUALIZE
 0x400

	)

251 
	#RTM_F_PREFIX
 0x800

	)

255 
	eπ_˛ass_t
 {

256 
	mRT_TABLE_UNSPEC
=0,

258 
	mRT_TABLE_COMPAT
=252,

259 
	mRT_TABLE_DEFAULT
=253,

260 
	mRT_TABLE_MAIN
=254,

261 
	mRT_TABLE_LOCAL
=255,

262 
	mRT_TABLE_MAX
=0xFFFFFFFF

268 
	eπ©å_ty≥_t
 {

269 
	mRTA_UNSPEC
,

270 
	mRTA_DST
,

271 
	mRTA_SRC
,

272 
	mRTA_IIF
,

273 
	mRTA_OIF
,

274 
	mRTA_GATEWAY
,

275 
	mRTA_PRIORITY
,

276 
	mRTA_PREFSRC
,

277 
	mRTA_METRICS
,

278 
	mRTA_MULTIPATH
,

279 
	mRTA_PROTOINFO
,

280 
	mRTA_FLOW
,

281 
	mRTA_CACHEINFO
,

282 
	mRTA_SESSION
,

283 
	mRTA_MP_ALGO
,

284 
	mRTA_TABLE
,

285 
	mRTA_MARK
,

286 
	m__RTA_MAX


289 
	#RTA_MAX
 (
__RTA_MAX
 - 1)

	)

291 
	#RTM_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
πmsg
))))

	)

292 
	#RTM_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
πmsg
))

	)

303 
	sπ√xth›
 {

304 
	mπnh_Àn
;

305 
	mπnh_Êags
;

306 
	mπnh_h›s
;

307 
	mπnh_ifödex
;

312 
	#RTNH_F_DEAD
 1

	)

313 
	#RTNH_F_PERVASIVE
 2

	)

314 
	#RTNH_F_ONLINK
 4

	)

318 
	#RTNH_ALIGNTO
 4

	)

319 
	#RTNH_ALIGN
(
Àn
Ë–(÷í)+
RTNH_ALIGNTO
-1Ë& ~(RTNH_ALIGNTO-1Ë)

	)

320 
	#RTNH_OK
(
πnh
,
Àn
Ë(‘äh)->
πnh_Àn
 >(
π√xth›
) && \

321 (()(
πnh
)->
πnh_Àn
Ë<(
Àn
))

	)

322 
	#RTNH_NEXT
(
πnh
Ë((
π√xth›
*)(((*)‘äh)Ë+ 
	`RTNH_ALIGN
(‘äh)->
πnh_Àn
)))

	)

323 
	#RTNH_LENGTH
(
Àn
Ë(
	`RTNH_ALIGN
((
π√xth›
)Ë+ (Àn))

	)

324 
	#RTNH_SPACE
(
Àn
Ë
	`RTNH_ALIGN
(
	`RTNH_LENGTH
÷í))

	)

325 
	#RTNH_DATA
(
πnh
Ë((
π©å
*)(((*)‘äh)Ë+ 
	`RTNH_LENGTH
(0)))

	)

329 
	sπa_ˇcheöfo
 {

330 
__u32
 
	mπa_˛¡ªf
;

331 
__u32
 
	mπa_œ°u£
;

332 
__s32
 
	mπa_expúes
;

333 
__u32
 
	mπa_îr‹
;

334 
__u32
 
	mπa_u£d
;

336 
	#RTNETLINK_HAVE_PEERINFO
 1

	)

337 
__u32
 
	mπa_id
;

338 
__u32
 
	mπa_ts
;

339 
__u32
 
	mπa_tßge
;

345 
	mRTAX_UNSPEC
,

346 
	#RTAX_UNSPEC
 
RTAX_UNSPEC


	)

347 
	mRTAX_LOCK
,

348 
	#RTAX_LOCK
 
RTAX_LOCK


	)

349 
	mRTAX_MTU
,

350 
	#RTAX_MTU
 
RTAX_MTU


	)

351 
	mRTAX_WINDOW
,

352 
	#RTAX_WINDOW
 
RTAX_WINDOW


	)

353 
	mRTAX_RTT
,

354 
	#RTAX_RTT
 
RTAX_RTT


	)

355 
	mRTAX_RTTVAR
,

356 
	#RTAX_RTTVAR
 
RTAX_RTTVAR


	)

357 
	mRTAX_SSTHRESH
,

358 
	#RTAX_SSTHRESH
 
RTAX_SSTHRESH


	)

359 
	mRTAX_CWND
,

360 
	#RTAX_CWND
 
RTAX_CWND


	)

361 
	mRTAX_ADVMSS
,

362 
	#RTAX_ADVMSS
 
RTAX_ADVMSS


	)

363 
	mRTAX_REORDERING
,

364 
	#RTAX_REORDERING
 
RTAX_REORDERING


	)

365 
	mRTAX_HOPLIMIT
,

366 
	#RTAX_HOPLIMIT
 
RTAX_HOPLIMIT


	)

367 
	mRTAX_INITCWND
,

368 
	#RTAX_INITCWND
 
RTAX_INITCWND


	)

369 
	mRTAX_FEATURES
,

370 
	#RTAX_FEATURES
 
RTAX_FEATURES


	)

371 
	mRTAX_RTO_MIN
,

372 
	#RTAX_RTO_MIN
 
RTAX_RTO_MIN


	)

373 
	mRTAX_INITRWND
,

374 
	#RTAX_INITRWND
 
RTAX_INITRWND


	)

375 
	m__RTAX_MAX


378 
	#RTAX_MAX
 (
__RTAX_MAX
 - 1)

	)

380 
	#RTAX_FEATURE_ECN
 0x00000001

	)

381 
	#RTAX_FEATURE_SACK
 0x00000002

	)

382 
	#RTAX_FEATURE_TIMESTAMP
 0x00000004

	)

383 
	#RTAX_FEATURE_ALLFRAG
 0x00000008

	)

385 
	sπa_£ssi⁄
 {

386 
__u8
 
	m¥Ÿo
;

387 
__u8
 
	m∑d1
;

388 
__u16
 
	m∑d2
;

392 
__u16
 
	m•‹t
;

393 
__u16
 
	mdp‹t
;

394 } 
	mp‹ts
;

397 
__u8
 
	mty≥
;

398 
__u8
 
	mcode
;

399 
__u16
 
	midít
;

400 } 
	micm±
;

402 
__u32
 
	m•i
;

403 } 
	mu
;

410 
	sπgímsg
 {

411 
	mπgí_Ámûy
;

423 
	siföfomsg
 {

424 
	mifi_Ámûy
;

425 
	m__ifi_∑d
;

426 
	mifi_ty≥
;

427 
	mifi_ödex
;

428 
	mifi_Êags
;

429 
	mifi_ch™ge
;

436 
	s¥efixmsg
 {

437 
	m¥efix_Ámûy
;

438 
	m¥efix_∑d1
;

439 
	m¥efix_∑d2
;

440 
	m¥efix_ifödex
;

441 
	m¥efix_ty≥
;

442 
	m¥efix_Àn
;

443 
	m¥efix_Êags
;

444 
	m¥efix_∑d3
;

449 
	mPREFIX_UNSPEC
,

450 
	mPREFIX_ADDRESS
,

451 
	mPREFIX_CACHEINFO
,

452 
	m__PREFIX_MAX


455 
	#PREFIX_MAX
 (
__PREFIX_MAX
 - 1)

	)

457 
	s¥efix_ˇcheöfo
 {

458 
__u32
 
	m¥e„ºed_time
;

459 
__u32
 
	mvÆid_time
;

467 
	stcmsg
 {

468 
	mtcm_Ámûy
;

469 
	mtcm__∑d1
;

470 
	mtcm__∑d2
;

471 
	mtcm_ifödex
;

472 
__u32
 
	mtcm_h™dÀ
;

473 
__u32
 
	mtcm_∑ª¡
;

474 
__u32
 
	mtcm_öfo
;

478 
	mTCA_UNSPEC
,

479 
	mTCA_KIND
,

480 
	mTCA_OPTIONS
,

481 
	mTCA_STATS
,

482 
	mTCA_XSTATS
,

483 
	mTCA_RATE
,

484 
	mTCA_FCNT
,

485 
	mTCA_STATS2
,

486 
	mTCA_STAB
,

487 
	m__TCA_MAX


490 
	#TCA_MAX
 (
__TCA_MAX
 - 1)

	)

492 
	#TCA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tcmsg
))))

	)

493 
	#TCA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tcmsg
))

	)

499 
	sndu£r›tmsg
 {

500 
	mndu£r›t_Ámûy
;

501 
	mndu£r›t_∑d1
;

502 
	mndu£r›t_›ts_Àn
;

503 
	mndu£r›t_ifödex
;

504 
__u8
 
	mndu£r›t_icmp_ty≥
;

505 
__u8
 
	mndu£r›t_icmp_code
;

506 
	mndu£r›t_∑d2
;

507 
	mndu£r›t_∑d3
;

512 
	mNDUSEROPT_UNSPEC
,

513 
	mNDUSEROPT_SRCADDR
,

514 
	m__NDUSEROPT_MAX


517 
	#NDUSEROPT_MAX
 (
__NDUSEROPT_MAX
 - 1)

	)

519 #i‚de‡
__KERNEL__


521 
	#RTMGRP_LINK
 1

	)

522 
	#RTMGRP_NOTIFY
 2

	)

523 
	#RTMGRP_NEIGH
 4

	)

524 
	#RTMGRP_TC
 8

	)

526 
	#RTMGRP_IPV4_IFADDR
 0x10

	)

527 
	#RTMGRP_IPV4_MROUTE
 0x20

	)

528 
	#RTMGRP_IPV4_ROUTE
 0x40

	)

529 
	#RTMGRP_IPV4_RULE
 0x80

	)

531 
	#RTMGRP_IPV6_IFADDR
 0x100

	)

532 
	#RTMGRP_IPV6_MROUTE
 0x200

	)

533 
	#RTMGRP_IPV6_ROUTE
 0x400

	)

534 
	#RTMGRP_IPV6_IFINFO
 0x800

	)

536 
	#RTMGRP_DEC√t_IFADDR
 0x1000

	)

537 
	#RTMGRP_DEC√t_ROUTE
 0x4000

	)

539 
	#RTMGRP_IPV6_PREFIX
 0x20000

	)

543 
	eπ√éök_groups
 {

544 
	mRTNLGRP_NONE
,

545 
	#RTNLGRP_NONE
 
RTNLGRP_NONE


	)

546 
	mRTNLGRP_LINK
,

547 
	#RTNLGRP_LINK
 
RTNLGRP_LINK


	)

548 
	mRTNLGRP_NOTIFY
,

549 
	#RTNLGRP_NOTIFY
 
RTNLGRP_NOTIFY


	)

550 
	mRTNLGRP_NEIGH
,

551 
	#RTNLGRP_NEIGH
 
RTNLGRP_NEIGH


	)

552 
	mRTNLGRP_TC
,

553 
	#RTNLGRP_TC
 
RTNLGRP_TC


	)

554 
	mRTNLGRP_IPV4_IFADDR
,

555 
	#RTNLGRP_IPV4_IFADDR
 
RTNLGRP_IPV4_IFADDR


	)

556 
	mRTNLGRP_IPV4_MROUTE
,

557 
	#RTNLGRP_IPV4_MROUTE
 
RTNLGRP_IPV4_MROUTE


	)

558 
	mRTNLGRP_IPV4_ROUTE
,

559 
	#RTNLGRP_IPV4_ROUTE
 
RTNLGRP_IPV4_ROUTE


	)

560 
	mRTNLGRP_IPV4_RULE
,

561 
	#RTNLGRP_IPV4_RULE
 
RTNLGRP_IPV4_RULE


	)

562 
	mRTNLGRP_IPV6_IFADDR
,

563 
	#RTNLGRP_IPV6_IFADDR
 
RTNLGRP_IPV6_IFADDR


	)

564 
	mRTNLGRP_IPV6_MROUTE
,

565 
	#RTNLGRP_IPV6_MROUTE
 
RTNLGRP_IPV6_MROUTE


	)

566 
	mRTNLGRP_IPV6_ROUTE
,

567 
	#RTNLGRP_IPV6_ROUTE
 
RTNLGRP_IPV6_ROUTE


	)

568 
	mRTNLGRP_IPV6_IFINFO
,

569 
	#RTNLGRP_IPV6_IFINFO
 
RTNLGRP_IPV6_IFINFO


	)

570 
	mRTNLGRP_DEC√t_IFADDR
,

571 
	#RTNLGRP_DEC√t_IFADDR
 
RTNLGRP_DEC√t_IFADDR


	)

572 
	mRTNLGRP_NOP2
,

573 
	mRTNLGRP_DEC√t_ROUTE
,

574 
	#RTNLGRP_DEC√t_ROUTE
 
RTNLGRP_DEC√t_ROUTE


	)

575 
	mRTNLGRP_DEC√t_RULE
,

576 
	#RTNLGRP_DEC√t_RULE
 
RTNLGRP_DEC√t_RULE


	)

577 
	mRTNLGRP_NOP4
,

578 
	mRTNLGRP_IPV6_PREFIX
,

579 
	#RTNLGRP_IPV6_PREFIX
 
RTNLGRP_IPV6_PREFIX


	)

580 
	mRTNLGRP_IPV6_RULE
,

581 
	#RTNLGRP_IPV6_RULE
 
RTNLGRP_IPV6_RULE


	)

582 
	mRTNLGRP_ND_USEROPT
,

583 
	#RTNLGRP_ND_USEROPT
 
RTNLGRP_ND_USEROPT


	)

584 
	mRTNLGRP_PHONET_IFADDR
,

585 
	#RTNLGRP_PHONET_IFADDR
 
RTNLGRP_PHONET_IFADDR


	)

586 
	mRTNLGRP_PHONET_ROUTE
,

587 
	#RTNLGRP_PHONET_ROUTE
 
RTNLGRP_PHONET_ROUTE


	)

588 
	m__RTNLGRP_MAX


590 
	#RTNLGRP_MAX
 (
__RTNLGRP_MAX
 - 1)

	)

593 
	stˇmsg
 {

594 
	mtˇ_Ámûy
;

595 
	mtˇ__∑d1
;

596 
	mtˇ__∑d2
;

598 
	#TA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tˇmsg
))))

	)

599 
	#TA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tˇmsg
))

	)

600 
	#TCA_ACT_TAB
 1

	)

601 
	#TCAA_MAX
 1

	)

	@mylibnl/libnl-3.2.25/include/linux/snmp.h

7 #i‚de‡
_LINUX_SNMP_H


8 
	#_LINUX_SNMP_H


	)

20 
	mIPSTATS_MIB_NUM
 = 0,

22 
	mIPSTATS_MIB_INPKTS
,

23 
	mIPSTATS_MIB_INOCTETS
,

24 
	mIPSTATS_MIB_INDELIVERS
,

25 
	mIPSTATS_MIB_OUTFORWDATAGRAMS
,

26 
	mIPSTATS_MIB_OUTPKTS
,

27 
	mIPSTATS_MIB_OUTOCTETS
,

29 
	mIPSTATS_MIB_INHDRERRORS
,

30 
	mIPSTATS_MIB_INTOOBIGERRORS
,

31 
	mIPSTATS_MIB_INNOROUTES
,

32 
	mIPSTATS_MIB_INADDRERRORS
,

33 
	mIPSTATS_MIB_INUNKNOWNPROTOS
,

34 
	mIPSTATS_MIB_INTRUNCATEDPKTS
,

35 
	mIPSTATS_MIB_INDISCARDS
,

36 
	mIPSTATS_MIB_OUTDISCARDS
,

37 
	mIPSTATS_MIB_OUTNOROUTES
,

38 
	mIPSTATS_MIB_REASMTIMEOUT
,

39 
	mIPSTATS_MIB_REASMREQDS
,

40 
	mIPSTATS_MIB_REASMOKS
,

41 
	mIPSTATS_MIB_REASMFAILS
,

42 
	mIPSTATS_MIB_FRAGOKS
,

43 
	mIPSTATS_MIB_FRAGFAILS
,

44 
	mIPSTATS_MIB_FRAGCREATES
,

45 
	mIPSTATS_MIB_INMCASTPKTS
,

46 
	mIPSTATS_MIB_OUTMCASTPKTS
,

47 
	mIPSTATS_MIB_INBCASTPKTS
,

48 
	mIPSTATS_MIB_OUTBCASTPKTS
,

49 
	mIPSTATS_MIB_INMCASTOCTETS
,

50 
	mIPSTATS_MIB_OUTMCASTOCTETS
,

51 
	mIPSTATS_MIB_INBCASTOCTETS
,

52 
	mIPSTATS_MIB_OUTBCASTOCTETS
,

53 
	mIPSTATS_MIB_CSUMERRORS
,

54 
	mIPSTATS_MIB_NOECTPKTS
,

55 
	mIPSTATS_MIB_ECT1PKTS
,

56 
	mIPSTATS_MIB_ECT0PKTS
,

57 
	mIPSTATS_MIB_CEPKTS
,

58 
	m__IPSTATS_MIB_MAX


68 
	mICMP_MIB_NUM
 = 0,

69 
	mICMP_MIB_INMSGS
,

70 
	mICMP_MIB_INERRORS
,

71 
	mICMP_MIB_INDESTUNREACHS
,

72 
	mICMP_MIB_INTIMEEXCDS
,

73 
	mICMP_MIB_INPARMPROBS
,

74 
	mICMP_MIB_INSRCQUENCHS
,

75 
	mICMP_MIB_INREDIRECTS
,

76 
	mICMP_MIB_INECHOS
,

77 
	mICMP_MIB_INECHOREPS
,

78 
	mICMP_MIB_INTIMESTAMPS
,

79 
	mICMP_MIB_INTIMESTAMPREPS
,

80 
	mICMP_MIB_INADDRMASKS
,

81 
	mICMP_MIB_INADDRMASKREPS
,

82 
	mICMP_MIB_OUTMSGS
,

83 
	mICMP_MIB_OUTERRORS
,

84 
	mICMP_MIB_OUTDESTUNREACHS
,

85 
	mICMP_MIB_OUTTIMEEXCDS
,

86 
	mICMP_MIB_OUTPARMPROBS
,

87 
	mICMP_MIB_OUTSRCQUENCHS
,

88 
	mICMP_MIB_OUTREDIRECTS
,

89 
	mICMP_MIB_OUTECHOS
,

90 
	mICMP_MIB_OUTECHOREPS
,

91 
	mICMP_MIB_OUTTIMESTAMPS
,

92 
	mICMP_MIB_OUTTIMESTAMPREPS
,

93 
	mICMP_MIB_OUTADDRMASKS
,

94 
	mICMP_MIB_OUTADDRMASKREPS
,

95 
	mICMP_MIB_CSUMERRORS
,

96 
	m__ICMP_MIB_MAX


99 
	#__ICMPMSG_MIB_MAX
 512

	)

107 
	mICMP6_MIB_NUM
 = 0,

108 
	mICMP6_MIB_INMSGS
,

109 
	mICMP6_MIB_INERRORS
,

110 
	mICMP6_MIB_OUTMSGS
,

111 
	mICMP6_MIB_OUTERRORS
,

112 
	mICMP6_MIB_CSUMERRORS
,

113 
	m__ICMP6_MIB_MAX


116 
	#__ICMP6MSG_MIB_MAX
 512

	)

125 
	mTCP_MIB_NUM
 = 0,

126 
	mTCP_MIB_RTOALGORITHM
,

127 
	mTCP_MIB_RTOMIN
,

128 
	mTCP_MIB_RTOMAX
,

129 
	mTCP_MIB_MAXCONN
,

130 
	mTCP_MIB_ACTIVEOPENS
,

131 
	mTCP_MIB_PASSIVEOPENS
,

132 
	mTCP_MIB_ATTEMPTFAILS
,

133 
	mTCP_MIB_ESTABRESETS
,

134 
	mTCP_MIB_CURRESTAB
,

135 
	mTCP_MIB_INSEGS
,

136 
	mTCP_MIB_OUTSEGS
,

137 
	mTCP_MIB_RETRANSSEGS
,

138 
	mTCP_MIB_INERRS
,

139 
	mTCP_MIB_OUTRSTS
,

140 
	mTCP_MIB_CSUMERRORS
,

141 
	m__TCP_MIB_MAX


151 
	mUDP_MIB_NUM
 = 0,

152 
	mUDP_MIB_INDATAGRAMS
,

153 
	mUDP_MIB_NOPORTS
,

154 
	mUDP_MIB_INERRORS
,

155 
	mUDP_MIB_OUTDATAGRAMS
,

156 
	mUDP_MIB_RCVBUFERRORS
,

157 
	mUDP_MIB_SNDBUFERRORS
,

158 
	mUDP_MIB_CSUMERRORS
,

159 
	m__UDP_MIB_MAX


165 
	mLINUX_MIB_NUM
 = 0,

166 
	mLINUX_MIB_SYNCOOKIESSENT
,

167 
	mLINUX_MIB_SYNCOOKIESRECV
,

168 
	mLINUX_MIB_SYNCOOKIESFAILED
,

169 
	mLINUX_MIB_EMBRYONICRSTS
,

170 
	mLINUX_MIB_PRUNECALLED
,

171 
	mLINUX_MIB_RCVPRUNED
,

172 
	mLINUX_MIB_OFOPRUNED
,

173 
	mLINUX_MIB_OUTOFWINDOWICMPS
,

174 
	mLINUX_MIB_LOCKDROPPEDICMPS
,

175 
	mLINUX_MIB_ARPFILTER
,

176 
	mLINUX_MIB_TIMEWAITED
,

177 
	mLINUX_MIB_TIMEWAITRECYCLED
,

178 
	mLINUX_MIB_TIMEWAITKILLED
,

179 
	mLINUX_MIB_PAWSPASSIVEREJECTED
,

180 
	mLINUX_MIB_PAWSACTIVEREJECTED
,

181 
	mLINUX_MIB_PAWSESTABREJECTED
,

182 
	mLINUX_MIB_DELAYEDACKS
,

183 
	mLINUX_MIB_DELAYEDACKLOCKED
,

184 
	mLINUX_MIB_DELAYEDACKLOST
,

185 
	mLINUX_MIB_LISTENOVERFLOWS
,

186 
	mLINUX_MIB_LISTENDROPS
,

187 
	mLINUX_MIB_TCPPREQUEUED
,

188 
	mLINUX_MIB_TCPDIRECTCOPYFROMBACKLOG
,

189 
	mLINUX_MIB_TCPDIRECTCOPYFROMPREQUEUE
,

190 
	mLINUX_MIB_TCPPREQUEUEDROPPED
,

191 
	mLINUX_MIB_TCPHPHITS
,

192 
	mLINUX_MIB_TCPHPHITSTOUSER
,

193 
	mLINUX_MIB_TCPPUREACKS
,

194 
	mLINUX_MIB_TCPHPACKS
,

195 
	mLINUX_MIB_TCPRENORECOVERY
,

196 
	mLINUX_MIB_TCPSACKRECOVERY
,

197 
	mLINUX_MIB_TCPSACKRENEGING
,

198 
	mLINUX_MIB_TCPFACKREORDER
,

199 
	mLINUX_MIB_TCPSACKREORDER
,

200 
	mLINUX_MIB_TCPRENOREORDER
,

201 
	mLINUX_MIB_TCPTSREORDER
,

202 
	mLINUX_MIB_TCPFULLUNDO
,

203 
	mLINUX_MIB_TCPPARTIALUNDO
,

204 
	mLINUX_MIB_TCPDSACKUNDO
,

205 
	mLINUX_MIB_TCPLOSSUNDO
,

206 
	mLINUX_MIB_TCPLOSTRETRANSMIT
,

207 
	mLINUX_MIB_TCPRENOFAILURES
,

208 
	mLINUX_MIB_TCPSACKFAILURES
,

209 
	mLINUX_MIB_TCPLOSSFAILURES
,

210 
	mLINUX_MIB_TCPFASTRETRANS
,

211 
	mLINUX_MIB_TCPFORWARDRETRANS
,

212 
	mLINUX_MIB_TCPSLOWSTARTRETRANS
,

213 
	mLINUX_MIB_TCPTIMEOUTS
,

214 
	mLINUX_MIB_TCPLOSSPROBES
,

215 
	mLINUX_MIB_TCPLOSSPROBERECOVERY
,

216 
	mLINUX_MIB_TCPRENORECOVERYFAIL
,

217 
	mLINUX_MIB_TCPSACKRECOVERYFAIL
,

218 
	mLINUX_MIB_TCPSCHEDULERFAILED
,

219 
	mLINUX_MIB_TCPRCVCOLLAPSED
,

220 
	mLINUX_MIB_TCPDSACKOLDSENT
,

221 
	mLINUX_MIB_TCPDSACKOFOSENT
,

222 
	mLINUX_MIB_TCPDSACKRECV
,

223 
	mLINUX_MIB_TCPDSACKOFORECV
,

224 
	mLINUX_MIB_TCPABORTONDATA
,

225 
	mLINUX_MIB_TCPABORTONCLOSE
,

226 
	mLINUX_MIB_TCPABORTONMEMORY
,

227 
	mLINUX_MIB_TCPABORTONTIMEOUT
,

228 
	mLINUX_MIB_TCPABORTONLINGER
,

229 
	mLINUX_MIB_TCPABORTFAILED
,

230 
	mLINUX_MIB_TCPMEMORYPRESSURES
,

231 
	mLINUX_MIB_TCPSACKDISCARD
,

232 
	mLINUX_MIB_TCPDSACKIGNOREDOLD
,

233 
	mLINUX_MIB_TCPDSACKIGNOREDNOUNDO
,

234 
	mLINUX_MIB_TCPSPURIOUSRTOS
,

235 
	mLINUX_MIB_TCPMD5NOTFOUND
,

236 
	mLINUX_MIB_TCPMD5UNEXPECTED
,

237 
	mLINUX_MIB_SACKSHIFTED
,

238 
	mLINUX_MIB_SACKMERGED
,

239 
	mLINUX_MIB_SACKSHIFTFALLBACK
,

240 
	mLINUX_MIB_TCPBACKLOGDROP
,

241 
	mLINUX_MIB_TCPMINTTLDROP
,

242 
	mLINUX_MIB_TCPDEFERACCEPTDROP
,

243 
	mLINUX_MIB_IPRPFILTER
,

244 
	mLINUX_MIB_TCPTIMEWAITOVERFLOW
,

245 
	mLINUX_MIB_TCPREQQFULLDOCOOKIES
,

246 
	mLINUX_MIB_TCPREQQFULLDROP
,

247 
	mLINUX_MIB_TCPRETRANSFAIL
,

248 
	mLINUX_MIB_TCPRCVCOALESCE
,

249 
	mLINUX_MIB_TCPOFOQUEUE
,

250 
	mLINUX_MIB_TCPOFODROP
,

251 
	mLINUX_MIB_TCPOFOMERGE
,

252 
	mLINUX_MIB_TCPCHALLENGEACK
,

253 
	mLINUX_MIB_TCPSYNCHALLENGE
,

254 
	mLINUX_MIB_TCPFASTOPENACTIVE
,

255 
	mLINUX_MIB_TCPFASTOPENPASSIVE
,

256 
	mLINUX_MIB_TCPFASTOPENPASSIVEFAIL
,

257 
	mLINUX_MIB_TCPFASTOPENLISTENOVERFLOW
,

258 
	mLINUX_MIB_TCPFASTOPENCOOKIEREQD
,

259 
	mLINUX_MIB_TCPSPURIOUS_RTX_HOSTQUEUES
,

260 
	mLINUX_MIB_BUSYPOLLRXPACKETS
,

261 
	m__LINUX_MIB_MAX


267 
	mLINUX_MIB_XFRMNUM
 = 0,

268 
	mLINUX_MIB_XFRMINERROR
,

269 
	mLINUX_MIB_XFRMINBUFFERERROR
,

270 
	mLINUX_MIB_XFRMINHDRERROR
,

271 
	mLINUX_MIB_XFRMINNOSTATES
,

272 
	mLINUX_MIB_XFRMINSTATEPROTOERROR
,

273 
	mLINUX_MIB_XFRMINSTATEMODEERROR
,

274 
	mLINUX_MIB_XFRMINSTATESEQERROR
,

275 
	mLINUX_MIB_XFRMINSTATEEXPIRED
,

276 
	mLINUX_MIB_XFRMINSTATEMISMATCH
,

277 
	mLINUX_MIB_XFRMINSTATEINVALID
,

278 
	mLINUX_MIB_XFRMINTMPLMISMATCH
,

279 
	mLINUX_MIB_XFRMINNOPOLS
,

280 
	mLINUX_MIB_XFRMINPOLBLOCK
,

281 
	mLINUX_MIB_XFRMINPOLERROR
,

282 
	mLINUX_MIB_XFRMOUTERROR
,

283 
	mLINUX_MIB_XFRMOUTBUNDLEGENERROR
,

284 
	mLINUX_MIB_XFRMOUTBUNDLECHECKERROR
,

285 
	mLINUX_MIB_XFRMOUTNOSTATES
,

286 
	mLINUX_MIB_XFRMOUTSTATEPROTOERROR
,

287 
	mLINUX_MIB_XFRMOUTSTATEMODEERROR
,

288 
	mLINUX_MIB_XFRMOUTSTATESEQERROR
,

289 
	mLINUX_MIB_XFRMOUTSTATEEXPIRED
,

290 
	mLINUX_MIB_XFRMOUTPOLBLOCK
,

291 
	mLINUX_MIB_XFRMOUTPOLDEAD
,

292 
	mLINUX_MIB_XFRMOUTPOLERROR
,

293 
	mLINUX_MIB_XFRMFWDHDRERROR
,

294 
	mLINUX_MIB_XFRMOUTSTATEINVALID
,

295 
	mLINUX_MIB_XFRMACQUIREERROR
,

296 
	m__LINUX_MIB_XFRMMAX


	@mylibnl/libnl-3.2.25/include/linux/tc_act/tc_mirred.h

1 #i‚de‡
__LINUX_TC_MIR_H


2 
	#__LINUX_TC_MIR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

7 
	#TCA_ACT_MIRRED
 8

	)

8 
	#TCA_EGRESS_REDIR
 1

	)

9 
	#TCA_EGRESS_MIRROR
 2

	)

10 
	#TCA_INGRESS_REDIR
 3

	)

11 
	#TCA_INGRESS_MIRROR
 4

	)

13 
	stc_múªd
 {

14 
	mtc_gí
;

15 
	mó˘i⁄
;

16 
__u32
 
	mifödex
;

20 
	mTCA_MIRRED_UNSPEC
,

21 
	mTCA_MIRRED_TM
,

22 
	mTCA_MIRRED_PARMS
,

23 
	m__TCA_MIRRED_MAX


25 
	#TCA_MIRRED_MAX
 (
__TCA_MIRRED_MAX
 - 1)

	)

	@mylibnl/libnl-3.2.25/include/linux/tc_ematch/tc_em_meta.h

1 #i‚de‡
__LINUX_TC_EM_META_H


2 
	#__LINUX_TC_EM_META_H


	)

5 
	mTCA_EM_META_UNSPEC
,

6 
	mTCA_EM_META_HDR
,

7 
	mTCA_EM_META_LVALUE
,

8 
	mTCA_EM_META_RVALUE
,

9 
	m__TCA_EM_META_MAX


11 
	#TCA_EM_META_MAX
 (
__TCA_EM_META_MAX
 - 1)

	)

13 
	stcf_mëa_vÆ
 {

14 
__u16
 
	mköd
;

15 
__u8
 
	mshi·
;

16 
__u8
 
	m›
;

19 
	#TCF_META_TYPE_MASK
 (0x‡<< 12)

	)

20 
	#TCF_META_TYPE
(
köd
Ë(((ködË& 
TCF_META_TYPE_MASK
Ë>> 12)

	)

21 
	#TCF_META_ID_MASK
 0x7ff

	)

22 
	#TCF_META_ID
(
köd
Ë((ködË& 
TCF_META_ID_MASK
)

	)

25 
	mTCF_META_TYPE_VAR
,

26 
	mTCF_META_TYPE_INT
,

27 
	m__TCF_META_TYPE_MAX


29 
	#TCF_META_TYPE_MAX
 (
__TCF_META_TYPE_MAX
 - 1)

	)

32 
	mTCF_META_ID_VALUE
,

33 
	mTCF_META_ID_RANDOM
,

34 
	mTCF_META_ID_LOADAVG_0
,

35 
	mTCF_META_ID_LOADAVG_1
,

36 
	mTCF_META_ID_LOADAVG_2
,

37 
	mTCF_META_ID_DEV
,

38 
	mTCF_META_ID_PRIORITY
,

39 
	mTCF_META_ID_PROTOCOL
,

40 
	mTCF_META_ID_PKTTYPE
,

41 
	mTCF_META_ID_PKTLEN
,

42 
	mTCF_META_ID_DATALEN
,

43 
	mTCF_META_ID_MACLEN
,

44 
	mTCF_META_ID_NFMARK
,

45 
	mTCF_META_ID_TCINDEX
,

46 
	mTCF_META_ID_RTCLASSID
,

47 
	mTCF_META_ID_RTIIF
,

48 
	mTCF_META_ID_SK_FAMILY
,

49 
	mTCF_META_ID_SK_STATE
,

50 
	mTCF_META_ID_SK_REUSE
,

51 
	mTCF_META_ID_SK_BOUND_IF
,

52 
	mTCF_META_ID_SK_REFCNT
,

53 
	mTCF_META_ID_SK_SHUTDOWN
,

54 
	mTCF_META_ID_SK_PROTO
,

55 
	mTCF_META_ID_SK_TYPE
,

56 
	mTCF_META_ID_SK_RCVBUF
,

57 
	mTCF_META_ID_SK_RMEM_ALLOC
,

58 
	mTCF_META_ID_SK_WMEM_ALLOC
,

59 
	mTCF_META_ID_SK_OMEM_ALLOC
,

60 
	mTCF_META_ID_SK_WMEM_QUEUED
,

61 
	mTCF_META_ID_SK_RCV_QLEN
,

62 
	mTCF_META_ID_SK_SND_QLEN
,

63 
	mTCF_META_ID_SK_ERR_QLEN
,

64 
	mTCF_META_ID_SK_FORWARD_ALLOCS
,

65 
	mTCF_META_ID_SK_SNDBUF
,

66 
	mTCF_META_ID_SK_ALLOCS
,

67 
	mTCF_META_ID_SK_ROUTE_CAPS
,

68 
	mTCF_META_ID_SK_HASH
,

69 
	mTCF_META_ID_SK_LINGERTIME
,

70 
	mTCF_META_ID_SK_ACK_BACKLOG
,

71 
	mTCF_META_ID_SK_MAX_ACK_BACKLOG
,

72 
	mTCF_META_ID_SK_PRIO
,

73 
	mTCF_META_ID_SK_RCVLOWAT
,

74 
	mTCF_META_ID_SK_RCVTIMEO
,

75 
	mTCF_META_ID_SK_SNDTIMEO
,

76 
	mTCF_META_ID_SK_SENDMSG_OFF
,

77 
	mTCF_META_ID_SK_WRITE_PENDING
,

78 
	mTCF_META_ID_VLAN_TAG
,

79 
	mTCF_META_ID_RXHASH
,

80 
	m__TCF_META_ID_MAX


82 
	#TCF_META_ID_MAX
 (
__TCF_META_ID_MAX
 - 1)

	)

84 
	stcf_mëa_hdr
 {

85 
tcf_mëa_vÆ
 
	mÀ·
;

86 
tcf_mëa_vÆ
 
	mright
;

	@mylibnl/libnl-3.2.25/include/netlink-private/cache-api.h

12 #i‚de‡
NETLINK_CACHE_API_H_


13 
	#NETLINK_CACHE_API_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/ˇche.h
>

18 #ifde‡
__˝lu•lus


112 
	#END_OF_MSGTYPES_LIST
 { -1, -1, 
NULL
 }

	)

117 
	s∆_msgty≥


120 
mt_id
;

123 
mt_a˘
;

126 * 
mt_«me
;

132 
	s∆_af_group


135 
ag_Ámûy
;

138 
ag_group
;

141 
	#END_OF_GROUP_LIST
 
AF_UNSPEC
, 0

	)

149 
	s∆_∑r£r_∑øm


152 (*
µ_cb
)(
∆_obje˘
 *, 
∆_∑r£r_∑øm
 *);

155 * 
µ_¨g
;

165 
	s∆_ˇche_›s


168 * 
co_«me
;

171 
co_hdrsize
;

174 
co_¥Ÿocﬁ
;

177 
co_hash_size
;

180 
co_Êags
;

183 
co_ªf˙t
;

186 
∆_af_group
 * 
co_groups
;

192 (*
co_ªque°_upd©e
)(
∆_ˇche
 *, 
∆_sock
 *);

199 (*
co_msg_∑r£r
)(
∆_ˇche_›s
 *, 
sockaddr_∆
 *,

200 
∆msghdr
 *, 
∆_∑r£r_∑øm
 *);

224 (*
co_evít_fûãr
)(
∆_ˇche
 *, 
∆_obje˘
 *
obj
);

239 (*
co_ö˛ude_evít
)(
∆_ˇche
 *
ˇche
, 
∆_obje˘
 *
obj
,

240 
ch™ge_func_t
 
ch™ge_cb
, *
d©a
);

242 (*
ª£rved_1
)();

243 (*
ª£rved_2
)();

244 (*
ª£rved_3
)();

245 (*
ª£rved_4
)();

246 (*
ª£rved_5
)();

247 (*
ª£rved_6
)();

248 (*
ª£rved_7
)();

249 (*
ª£rved_8
)();

252 
∆_obje˘_›s
 * 
co_obj_›s
;

255 
∆_ˇche_›s
 *
co_√xt
;

257 
∆_ˇche
 *
co_maj‹_ˇche
;

258 
gíl_›s
 * 
co_gíl
;

261 
∆_msgty≥
 
co_msgty≥s
[];

266 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink-private/genl.h

12 #i‚de‡
NETLINK_GENL_PRIV_H_


13 
	#NETLINK_GENL_PRIV_H_


	)

15 
	~<√éök-¥iv©e/√éök.h
>

16 
	~<√éök/√éök.h
>

18 
	#GENL_HDRSIZE
(
hdæí
Ë(
GENL_HDRLEN
 + (hdæí))

	)

20 
gíl_ªsﬁve_id
(
gíl_›s
 *
›s
);

	@mylibnl/libnl-3.2.25/include/netlink-private/netlink.h

12 #i‚de‡
NETLINK_LOCAL_H_


13 
	#NETLINK_LOCAL_H_


	)

15 
	~<°dio.h
>

16 
	~<î∫o.h
>

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

19 
	~<uni°d.h
>

20 
	~<f˙é.h
>

21 
	~<m©h.h
>

22 
	~<time.h
>

23 
	~<°d¨g.h
>

24 
	~<˘y≥.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/°©.h
>

27 
	~<sys/sockë.h
>

28 
	~<öây≥s.h
>

29 
	~<as£π.h
>

30 
	~<limôs.h
>

31 
	~<£¨ch.h
>

33 
	~<¨∑/öë.h
>

34 
	~<√tdb.h
>

36 
	~<defs.h
>

38 #i‚de‡
SOL_NETLINK


39 
	#SOL_NETLINK
 270

	)

42 
	~<löux/ty≥s.h
>

45 
	~<löux/if.h
>

46 
	~<löux/if_¨p.h
>

47 
	~<löux/if_ëhî.h
>

48 
	~<löux/ëhtoﬁ.h
>

49 
	~<löux/pkt_sched.h
>

50 
	~<löux/pkt_˛s.h
>

51 
	~<löux/gí_°©s.h
>

52 
	~<löux/ù_mp_Æg.h
>

53 
	~<löux/©m.h
>

54 
	~<löux/ù.h
>

55 
	~<löux/ùv6.h
>

56 
	~<löux/¢mp.h
>

58 #i‚de‡
DISABLE_PTHREADS


59 
	~<±hªad.h
>

62 
	~<√éök/√éök.h
>

63 
	~<√éök/h™dÀrs.h
>

64 
	~<√éök/ˇche.h
>

65 
	~<√éök/rouã/tc.h
>

66 
	~<√éök-¥iv©e/obje˘-≠i.h
>

67 
	~<√éök-¥iv©e/ˇche-≠i.h
>

68 
	~<√éök-¥iv©e/ty≥s.h
>

70 
	#NSEC_PER_SEC
 1000000000L

	)

72 
	så™s_tbl
 {

73 
	mi
;

74 c⁄° *
	ma
;

77 
	#__ADD
(
id
, 
«me
Ë{ .
i
 = id, .
a
 = #«mê},

	)

79 
	så™s_li°
 {

80 
	mi
;

81 *
	ma
;

82 
∆_li°_hód
 
	mli°
;

85 #ifde‡
NL_DEBUG


86 
	#NL_DBG
(
LVL
,
FMT
,
ARG
...) \

88 i‡(
LVL
 <
∆_debug
) \

89 
	`Ârötf
(
°dîr
, \

90 "DBG<" #LVL ">%20s:%-4u %s: " 
FMT
, \

91 
__FILE__
, 
__LINE__
, \

92 
__PRETTY_FUNCTION__
, ##
ARG
); \

93 } 0)

	)

95 
	#NL_DBG
(
LVL
,
FMT
,
ARG
...Ëdÿ{ } 0)

	)

98 
	#BUG
() \

100 
	`Ârötf
(
°dîr
, "BUGát fileÖosition %s:%d:%s\n", \

101 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
); \

102 
	`as£π
(0); \

103 } 0)

	)

105 
	#BUG_ON
(
c⁄dôi⁄
) \

107 i‡(
c⁄dôi⁄
) \

108 
	`BUG
(); \

109 } 0)

	)

112 
	#APPBUG
(
msg
) \

114 
	`Ârötf
(
°dîr
, "APPLICATION BUG: %s:%d:%s: %s\n", \

115 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
, 
msg
); \

116 
	`as£π
(0); \

117 } 0)

	)

119 
__∆_ªad_num_°r_fûe
(c⁄° *
∑th
,

120 (*
cb
)(, const *));

122 
	`__å™s_li°_add
(, c⁄° *, 
∆_li°_hód
 *);

123 
	`__å™s_li°_˛ór
(
∆_li°_hód
 *);

125 *
	`__ty≥2°r
(, *, 
size_t
, c⁄° 
å™s_tbl
 *, size_t);

126 
	`__°r2ty≥
(c⁄° *, c⁄° 
å™s_tbl
 *, 
size_t
);

128 *
	`__li°_ty≥2°r
(, *, 
size_t
, 
∆_li°_hód
 *);

129 
	`__li°_°r2ty≥
(c⁄° *, 
∆_li°_hód
 *);

131 *
	`__Êags2°r
(, *, 
size_t
, c⁄° 
å™s_tbl
 *, size_t);

132 
	`__°r2Êags
(c⁄° *, c⁄° 
å™s_tbl
 *, 
size_t
);

134 
	`dump_‰om_›s
(
∆_obje˘
 *, 
∆_dump_∑øms
 *);

136 
ölöe
 
	$∆_cb_ˇŒ
(
∆_cb
 *
cb
, 
ty≥
, 
∆_msg
 *
msg
)

138 
ªt
;

140 
cb
->
cb_a˘ive
 = 
ty≥
;

141 
ªt
 = 
cb
->
cb_£t
[
ty≥
](
msg
, cb->
cb_¨gs
[type]);

142 
cb
->
cb_a˘ive
 = 
__NL_CB_TYPE_MAX
;

143  
ªt
;

144 
	}
}

146 
	#ARRAY_SIZE
(
X
Ë((XË/ ((X)[0]))

	)

149 #i‚de‡
off£tof


150 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

153 
	#__öô
 
	`__©åibuã__
 ((
c⁄°ru˘‹
))

	)

154 
	#__exô
 
	`__©åibuã__
 ((
de°ru˘‹
))

	)

155 #unde‡
__dïªˇãd


156 
	#__dïªˇãd
 
	`__©åibuã__
 ((
dïªˇãd
))

	)

158 
	#mö
(
x
,
y
) ({ \

159 
	`ty≥of
(
x
Ë
_x
 = (x); \

160 
	`ty≥of
(
y
Ë
_y
 = (y); \

161 (Ë(&
_x
 =&
_y
); \

162 
_x
 < 
_y
 ? _x : _y; })

	)

164 
	#max
(
x
,
y
) ({ \

165 
	`ty≥of
(
x
Ë
_x
 = (x); \

166 
	`ty≥of
(
y
Ë
_y
 = (y); \

167 (Ë(&
_x
 =&
_y
); \

168 
_x
 > 
_y
 ? _x : _y; })

	)

170 
	#mö_t
(
ty≥
,
x
,
y
) \

171 ({ 
ty≥
 
__x
 = (
x
);Åy≥ 
__y
 = (
y
); __x < __y ? __x: __y; })

	)

172 
	#max_t
(
ty≥
,
x
,
y
) \

173 ({ 
ty≥
 
__x
 = (
x
);Åy≥ 
__y
 = (
y
); __x > __y ? __x: __y; })

	)

175 
∆_ˇche_∑r£
(
∆_ˇche_›s
 *, 
sockaddr_∆
 *,

176 
∆msghdr
 *, 
∆_∑r£r_∑øm
 *);

179 
ölöe
 
	$π∆_c›y_øã•ec
(
π∆_øã•ec
 *
d°
,

180 
tc_øã•ec
 *
§c
)

182 
d°
->
rs_˚Œ_log
 = 
§c
->
˚Œ_log
;

183 
d°
->
rs_ovîhód
 = 
§c
->
ovîhód
;

184 
d°
->
rs_˚Œ_Æign
 = 
§c
->
˚Œ_Æign
;

185 
d°
->
rs_mpu
 = 
§c
->
mpu
;

186 
d°
->
rs_øã
 = 
§c
->
øã
;

187 
	}
}

189 
ölöe
 
	$π∆_rc›y_øã•ec
(
tc_øã•ec
 *
d°
,

190 
π∆_øã•ec
 *
§c
)

192 
d°
->
˚Œ_log
 = 
§c
->
rs_˚Œ_log
;

193 
d°
->
ovîhód
 = 
§c
->
rs_ovîhód
;

194 
d°
->
˚Œ_Æign
 = 
§c
->
rs_˚Œ_Æign
;

195 
d°
->
mpu
 = 
§c
->
rs_mpu
;

196 
d°
->
øã
 = 
§c
->
rs_øã
;

197 
	}
}

199 
ölöe
 *
	$∆_ˇche_«me
(
∆_ˇche
 *
ˇche
)

201  
ˇche
->
c_›s
 ? cache->c_›s->
co_«me
 : "unknown";

202 
	}
}

204 
	#GENL_FAMILY
(
id
, 
«me
) \

206 { 
id
, 
NL_ACT_UNSPEC
, 
«me
 }, \

207 
END_OF_MSGTYPES_LIST
, \

208 }

	)

210 
ölöe
 
	$waô_f‹_ack
(
∆_sock
 *
sk
)

212 i‡(
sk
->
s_Êags
 & 
NL_NO_AUTO_ACK
)

215  
	`∆_waô_f‹_ack
(
sk
);

216 
	}
}

218 
ölöe
 
	$buûd_sysc⁄f_∑th
(**
°Ω
, c⁄° *
fûíame
)

220 *
sysc⁄fdú
;

222 
sysc⁄fdú
 = 
	`gëív
("NLSYSCONFDIR");

224 i‡(!
sysc⁄fdú
)

225 
sysc⁄fdú
 = 
SYSCONFDIR
;

227  
	`a•rötf
(
°Ω
, "%s/%s", 
sysc⁄fdú
, 
fûíame
);

228 
	}
}

230 #i‚de‡
DISABLE_PTHREADS


231 
	#NL_LOCK
(
NAME
Ë
	`±hªad_muãx_t
 (NAMEË
PTHREAD_MUTEX_INITIALIZER


	)

232 
	#NL_RW_LOCK
(
NAME
Ë
	`±hªad_rwlock_t
 (NAMEË
PTHREAD_RWLOCK_INITIALIZER


	)

234 
ölöe
 
	$∆_lock
(
±hªad_muãx_t
 *
lock
)

236 
	`±hªad_muãx_lock
(
lock
);

237 
	}
}

239 
ölöe
 
	$∆_u∆ock
(
±hªad_muãx_t
 *
lock
)

241 
	`±hªad_muãx_u∆ock
(
lock
);

242 
	}
}

244 
ölöe
 
	$∆_ªad_lock
(
±hªad_rwlock_t
 *
lock
)

246 
	`±hªad_rwlock_rdlock
(
lock
);

247 
	}
}

249 
ölöe
 
	$∆_ªad_u∆ock
(
±hªad_rwlock_t
 *
lock
)

251 
	`±hªad_rwlock_u∆ock
(
lock
);

252 
	}
}

254 
ölöe
 
	$∆_wrôe_lock
(
±hªad_rwlock_t
 *
lock
)

256 
	`±hªad_rwlock_wæock
(
lock
);

257 
	}
}

259 
ölöe
 
	$∆_wrôe_u∆ock
(
±hªad_rwlock_t
 *
lock
)

261 
	`±hªad_rwlock_u∆ock
(
lock
);

262 
	}
}

265 
	#NL_LOCK
(
NAME
Ë
__unu£d_lock_
 ##NAME 
	`__©åibuã__
((
unu£d
))

	)

266 
	#NL_RW_LOCK
(
NAME
Ë
__unu£d_lock_
 ##NAME 
	`__©åibuã__
((
unu£d
))

	)

268 
	#∆_lock
(
LOCK
Ëdÿ{ } 0)

	)

269 
	#∆_u∆ock
(
LOCK
Ëdÿ{ } 0)

	)

270 
	#∆_ªad_lock
(
LOCK
Ëdÿ{ } 0)

	)

271 
	#∆_ªad_u∆ock
(
LOCK
Ëdÿ{ } 0)

	)

272 
	#∆_wrôe_lock
(
LOCK
Ëdÿ{ } 0)

	)

273 
	#∆_wrôe_u∆ock
(
LOCK
Ëdÿ{ } 0)

	)

	@mylibnl/libnl-3.2.25/include/netlink-private/object-api.h

12 #i‚de‡
NETLINK_OBJECT_API_H_


13 
	#NETLINK_OBJECT_API_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/utûs.h
>

17 
	~<√éök/obje˘.h
>

19 #ifde‡
__˝lu•lus


185 
	#NLHDR_COMMON
 \

186 
˚_ªf˙t
; \

187 
∆_obje˘_›s
 * 
˚_›s
; \

188 
∆_ˇche
 * 
˚_ˇche
; \

189 
∆_li°_hód
 
˚_li°
; \

190 
˚_msgty≥
; \

191 
˚_Êags
; \

192 
uöt32_t
 
˚_mask
;

	)

194 
	s∆_obje˘


196 
NLHDR_COMMON


208 
	#AVAILABLE
(
A
, 
B
, 
ATTR
Ë(((A)->
˚_mask
 & (B)->˚_maskË& (ATTR))

	)

219 
	#AVAILABLE_MISMATCH
(
A
, 
B
, 
ATTR
Ë(((A)->
˚_mask
 ^ (B)->˚_maskË& (ATTR))

	)

236 
	#ATTR_MISMATCH
(
A
, 
B
, 
ATTR
, 
EXPR
Ë(
	`AVAILABLE_MISMATCH
(A, B, ATTR) || \

237 (
	`AVAILABLE
(
A
, 
B
, 
ATTR
Ë&& (
EXPR
)))

	)

260 
	#ATTR_DIFF
(
LIST
, 
ATTR
, 
A
, 
B
, 
EXPR
) \

261 ({ 
diff
 = 0; \

262 i‡(((
LIST
Ë& (
ATTR
)Ë&& 
	`ATTR_MISMATCH
(
A
, 
B
, ATTR, 
EXPR
)) \

263 
diff
 = 
ATTR
; \

264 
diff
; })

	)

269 
	s∆_obje˘_›s


276 * 
oo_«me
;

279 
size_t
 
oo_size
;

282 
uöt32_t
 
oo_id_©ås
;

290 (*
oo_c⁄°ru˘‹
)(
∆_obje˘
 *);

299 (*
oo_‰ì_d©a
)(
∆_obje˘
 *);

311 (*
oo_˛⁄e
)(
∆_obje˘
 *, nl_object *);

322 (*
oo_dump
[
NL_DUMP_MAX
+1])(
∆_obje˘
 *,

323 
∆_dump_∑øms
 *);

336 (*
oo_com∑ª
)(
∆_obje˘
 *, nl_object *,

337 
uöt32_t
, );

350 (*
oo_upd©e
)(
∆_obje˘
 *, nl_object *);

360 (*
oo_keygí
)(
∆_obje˘
 *, 
uöt32_t
 *, uint32_t);

362 *(*
oo_©ås2°r
)(, *, 
size_t
);

367 
uöt32_t
 (*
oo_id_©ås_gë
)(
∆_obje˘
 *);

372 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink-private/route/link/api.h

12 #i‚de‡
NETLINK_LINK_API_H_


13 
	#NETLINK_LINK_API_H_


	)

15 
	~<√éök/√éök.h
>

17 #ifde‡
__˝lu•lus


26 
	sπ∆_lök_öfo_›s


29 * 
io_«me
;

32 
io_ªf˙t
;

37 (*
io_Æloc
)(
π∆_lök
 *);

42 (*
io_∑r£
)(
π∆_lök
 *,

43 
∆©å
 *,

44 
∆©å
 *);

48 (*
io_dump
[
NL_DUMP_MAX
+1])(
π∆_lök
 *,

49 
∆_dump_∑øms
 *);

53 (*
io_˛⁄e
)(
π∆_lök
 *, rtnl_link *);

57 (*
io_put_©ås
)(
∆_msg
 *, 
π∆_lök
 *);

61 (*
io_‰ì
)(
π∆_lök
 *);

63 
∆_li°_hód
 
io_li°
;

66 
π∆_lök_öfo_›s
 *
π∆_lök_öfo_›s_lookup
(const *);

67 
π∆_lök_öfo_›s_put
(
π∆_lök_öfo_›s
 *);

68 
π∆_lök_ªgi°î_öfo
(
π∆_lök_öfo_›s
 *);

69 
π∆_lök_uƒegi°î_öfo
(
π∆_lök_öfo_›s
 *);

77 
	sπ∆_lök_af_›s


80 c⁄° 
	gao_Ámûy
;

83 
	gao_ªf˙t
;

89 c⁄° 
∆a_pﬁicy
 *
	gao_¥Ÿöfo_pﬁicy
;

94 * (*
	gao_Æloc
)(
	gπ∆_lök
 *);

98 * (*
	gao_˛⁄e
)(
	gπ∆_lök
 *, *);

101 (*
	gao_‰ì
)(
	gπ∆_lök
 *, *);

105 (*
	gao_∑r£_¥Ÿöfo
)(
	gπ∆_lök
 *,

106 
	g∆©å
 *, *);

110 (*
	gao_∑r£_af
)(
	gπ∆_lök
 *,

111 
	g∆©å
 *, *);

115 (*
	gao_fûl_af
)(
	gπ∆_lök
 *,

116 
∆_msg
 *
	gmsg
, *);

119 (*
	gao_dump
[
NL_DUMP_MAX
+1])(
	gπ∆_lök
 *,

120 
	g∆_dump_∑øms
 *,

133 (*
	gao_com∑ª
)(
	gπ∆_lök
 *,

134 
	gπ∆_lök
 *, , 
	guöt32_t
, );

137 
π∆_lök_af_›s
 *
π∆_lök_af_›s_lookup
();

138 
π∆_lök_af_›s_put
(
π∆_lök_af_›s
 *);

139 * 
π∆_lök_af_Æloc
(
π∆_lök
 *,

140 c⁄° 
π∆_lök_af_›s
 *);

141 * 
π∆_lök_af_d©a
(c⁄° 
π∆_lök
 *,

142 c⁄° 
π∆_lök_af_›s
 *);

143 
π∆_lök_af_ªgi°î
(
π∆_lök_af_›s
 *);

144 
π∆_lök_af_uƒegi°î
(
π∆_lök_af_›s
 *);

145 
π∆_lök_af_d©a_com∑ª
(
π∆_lök
 *
a
,

146 
π∆_lök
 *
b
,

147 
Ámûy
);

149 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink-private/route/tc-api.h

12 #i‚de‡
NETLINK_TC_API_H_


13 
	#NETLINK_TC_API_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/msg.h
>

17 
	~<√éök/rouã/tc.h
>

19 #ifde‡
__˝lu•lus


30 
	sπ∆_tc_›s


35 *
to_köd
;

40 
π∆_tc_ty≥
 
to_ty≥
;

46 
size_t
 
to_size
;

51 (*
to_dump
[
NL_DUMP_MAX
+1])(
π∆_tc
 *, *,

52 
∆_dump_∑øms
 *);

56 (*
to_msg_fûl
)(
π∆_tc
 *, *, 
∆_msg
 *);

63 (*
to_msg_fûl_øw
)(
π∆_tc
 *, *, 
∆_msg
 *);

68 (*
to_msg_∑r£r
)(
π∆_tc
 *, *);

73 (*
to_‰ì_d©a
)(
π∆_tc
 *, *);

78 (*
to_˛⁄e
)(*, *);

83 
∆_li°_hód
 
to_li°
;

86 
	sπ∆_tc_ty≥_›s


88 
π∆_tc_ty≥
 
â_ty≥
;

90 *
â_dump_¥efix
;

95 (*
â_dump
[
NL_DUMP_MAX
+1])(
π∆_tc
 *,

96 
∆_dump_∑øms
 *);

99 
π∆_tc_msg_∑r£
(
∆msghdr
 *,

100 
π∆_tc
 *);

101 
π∆_tc_msg_buûd
(
π∆_tc
 *, ,

102 , 
∆_msg
 **);

104 
π∆_tc_‰ì_d©a
(
∆_obje˘
 *);

105 
π∆_tc_˛⁄e
(
∆_obje˘
 *,

106 
∆_obje˘
 *);

107 
π∆_tc_dump_löe
(
∆_obje˘
 *,

108 
∆_dump_∑øms
 *);

109 
π∆_tc_dump_dëaûs
(
∆_obje˘
 *,

110 
∆_dump_∑øms
 *);

111 
π∆_tc_dump_°©s
(
∆_obje˘
 *,

112 
∆_dump_∑øms
 *);

113 
π∆_tc_com∑ª
(
∆_obje˘
 *,

114 
∆_obje˘
 *,

115 
uöt32_t
, );

117 * 
π∆_tc_d©a
(
π∆_tc
 *);

118 * 
π∆_tc_d©a_check
(
π∆_tc
 *,

119 
π∆_tc_›s
 *);

121 
π∆_tc_›s
 * 
π∆_tc_lookup_›s
(
π∆_tc_ty≥
,

123 
π∆_tc_›s
 * 
π∆_tc_gë_›s
(
π∆_tc
 *);

124 
π∆_tc_ªgi°î
(
π∆_tc_›s
 *);

125 
π∆_tc_uƒegi°î
(
π∆_tc_›s
 *);

127 
π∆_tc_ty≥_ªgi°î
(
π∆_tc_ty≥_›s
 *);

128 
π∆_tc_ty≥_uƒegi°î
(
π∆_tc_ty≥_›s
 *);

130 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink-private/socket.h

12 #i‚de‡
NETLINK_SOCKET_PRIV_H_


13 
	#NETLINK_SOCKET_PRIV_H_


	)

15 
	~<√éök-¥iv©e/√éök.h
>

17 #ifde‡
__˝lu•lus


21 
_∆_sockë_is_loˇl_p‹t_un•ecifõd
 (
∆_sock
 *
sk
);

22 
uöt32_t
 
_∆_sockë_gíî©e_loˇl_p‹t_no_ªÀa£
(
∆_sock
 *
sk
);

24 
_∆_sockë_u£d_p‹ts_ªÀa£_Æl
(c⁄° 
uöt32_t
 *
u£d_p‹ts
);

25 
_∆_sockë_u£d_p‹ts_£t
(
uöt32_t
 *
u£d_p‹ts
, uöt32_à
p‹t
);

27 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink-private/tc.h

12 #i‚de‡
NETLINK_TC_PRIV_H_


13 
	#NETLINK_TC_PRIV_H_


	)

15 
	~<√éök-¥iv©e/√éök.h
>

17 #ifde‡
__˝lu•lus


21 
	#TCA_ATTR_HANDLE
 0x0001

	)

22 
	#TCA_ATTR_PARENT
 0x0002

	)

23 
	#TCA_ATTR_IFINDEX
 0x0004

	)

24 
	#TCA_ATTR_KIND
 0x0008

	)

25 
	#TCA_ATTR_FAMILY
 0x0010

	)

26 
	#TCA_ATTR_INFO
 0x0020

	)

27 
	#TCA_ATTR_OPTS
 0x0040

	)

28 
	#TCA_ATTR_STATS
 0x0080

	)

29 
	#TCA_ATTR_XSTATS
 0x0100

	)

30 
	#TCA_ATTR_LINK
 0x0200

	)

31 
	#TCA_ATTR_MTU
 0x0400

	)

32 
	#TCA_ATTR_MPU
 0x0800

	)

33 
	#TCA_ATTR_OVERHEAD
 0x1000

	)

34 
	#TCA_ATTR_LINKTYPE
 0x2000

	)

35 
	#TCA_ATTR_MAX
 
TCA_ATTR_LINKTYPE


	)

37 
tˇ_∑r£
(
∆©å
 **, , 
π∆_tc
 *,

38 
∆a_pﬁicy
 *);

40 
	#RTNL_TC_RTABLE_SIZE
 256

	)

42 
π∆_tc_buûd_øã_èbÀ
(
π∆_tc
 *
tc
, 
π∆_øã•ec
 *,

43 
uöt32_t
 *);

46 
ölöe
 *
tˇ_x°©s
(
π∆_tc
 *
tˇ
)

48  
	gtˇ
->
	gtc_x°©s
->
	gd_d©a
;

51 
∆_af_group
 
tc_groups
[];

53 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink-private/types.h

13 #i‚de‡
NETLINK_LOCAL_TYPES_H_


14 
	#NETLINK_LOCAL_TYPES_H_


	)

16 
	~<√éök/li°.h
>

17 
	~<√éök/rouã/lök.h
>

18 
	~<√éök/rouã/qdisc.h
>

19 
	~<√éök/rouã/π∆.h
>

20 
	~<√éök/rouã/rouã.h
>

21 
	~<√éök/idüg/idüg∆.h
>

22 
	~<√éök/√tfûãr/˘.h
>

23 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

24 
	~<löux/tc_a˘/tc_múªd.h
>

26 
	#NL_SOCK_BUFSIZE_SET
 (1<<0)

	)

27 
	#NL_SOCK_PASSCRED
 (1<<1)

	)

28 
	#NL_OWN_PORT
 (1<<2)

	)

29 
	#NL_MSG_PEEK
 (1<<3)

	)

30 
	#NL_NO_AUTO_ACK
 (1<<4)

	)

32 
	#NL_MSG_CRED_PRESENT
 1

	)

34 
	g∆_ˇche_›s
;

35 
	g∆_sock
;

36 
	g∆_obje˘
;

37 
	g∆_hash_èbÀ
;

39 
	s∆_cb


41 
∆_ªcvmsg_msg_cb_t
 
	mcb_£t
[
NL_CB_TYPE_MAX
+1];

42 * 
	mcb_¨gs
[
NL_CB_TYPE_MAX
+1];

44 
∆_ªcvmsg_îr_cb_t
 
	mcb_îr
;

45 * 
	mcb_îr_¨g
;

49 (*
	mcb_ªcvmsgs_ow
)(
	m∆_sock
 *,

50 
	m∆_cb
 *);

54 (*
	mcb_ªcv_ow
)(
	m∆_sock
 *,

55 
	msockaddr_∆
 *,

57 
	mu¸ed
 **);

61 (*
	mcb_£nd_ow
)(
	m∆_sock
 *,

62 
	m∆_msg
 *);

64 
	mcb_ªf˙t
;

66 
∆_cb_ty≥
 
	mcb_a˘ive
;

69 
	s∆_sock


71 
sockaddr_∆
 
	ms_loˇl
;

72 
sockaddr_∆
 
	ms_≥î
;

73 
	ms_fd
;

74 
	ms_¥Ÿo
;

75 
	ms_£q_√xt
;

76 
	ms_£q_ex≥˘
;

77 
	ms_Êags
;

78 
∆_cb
 * 
	ms_cb
;

79 
size_t
 
	ms_bufsize
;

82 
	s∆_ˇche


84 
∆_li°_hód
 
	mc_ôems
;

85 
	mc_nôems
;

86 
	mc_ürg1
;

87 
	mc_ürg2
;

88 
	mc_ªf˙t
;

89 
	mc_Êags
;

90 
∆_hash_èbÀ
 * 
	mhashèbÀ
;

91 
∆_ˇche_›s
 * 
	mc_›s
;

94 
	s∆_ˇche_assoc


96 
∆_ˇche
 * 
	mˇ_ˇche
;

97 
ch™ge_func_t
 
	mˇ_ch™ge
;

98 * 
	mˇ_ch™ge_d©a
;

101 
	s∆_ˇche_mngr


103 
	mcm_¥Ÿocﬁ
;

104 
	mcm_Êags
;

105 
	mcm_«ssocs
;

106 
∆_sock
 * 
	mcm_sock
;

107 
∆_sock
 * 
	mcm_sync_sock
;

108 
∆_ˇche_assoc
 * 
	mcm_assocs
;

111 
	g∆_∑r£r_∑øm
;

113 
	#LOOSE_COMPARISON
 1

	)

115 
	#NL_OBJ_MARK
 1

	)

117 
	s∆_d©a


119 
size_t
 
	md_size
;

120 * 
	md_d©a
;

123 
	s∆_addr


125 
	ma_Ámûy
;

126 
	ma_maxsize
;

127 
	ma_Àn
;

128 
	ma_¥efixÀn
;

129 
	ma_ªf˙t
;

130 
	ma_addr
[0];

133 
	s∆_msg


135 
	mnm_¥Ÿocﬁ
;

136 
	mnm_Êags
;

137 
sockaddr_∆
 
	mnm_§c
;

138 
sockaddr_∆
 
	mnm_d°
;

139 
u¸ed
 
	mnm_¸eds
;

140 
∆msghdr
 * 
	mnm_∆h
;

141 
size_t
 
	mnm_size
;

142 
	mnm_ªf˙t
;

145 
	sπ∆_lök_m≠


147 
uöt64_t
 
	mlm_mem_°¨t
;

148 
uöt64_t
 
	mlm_mem_íd
;

149 
uöt64_t
 
	mlm_ba£_addr
;

150 
uöt16_t
 
	mlm_úq
;

151 
uöt8_t
 
	mlm_dma
;

152 
uöt8_t
 
	mlm_p‹t
;

155 
	#IFQDISCSIZ
 32

	)

157 
	sπ∆_lök


159 
NLHDR_COMMON


161 
	ml_«me
[
IFNAMSIZ
];

162 
uöt32_t
 
	ml_Ámûy
;

163 
uöt32_t
 
	ml_¨±y≥
;

164 
uöt32_t
 
	ml_ödex
;

165 
uöt32_t
 
	ml_Êags
;

166 
uöt32_t
 
	ml_ch™ge
;

167 
uöt32_t
 
	ml_mtu
;

168 
uöt32_t
 
	ml_lök
;

169 
uöt32_t
 
	ml_txqÀn
;

170 
uöt32_t
 
	ml_weight
;

171 
uöt32_t
 
	ml_ma°î
;

172 
∆_addr
 * 
	ml_addr
;

173 
∆_addr
 * 
	ml_bˇ°
;

174 
	ml_qdisc
[
IFQDISCSIZ
];

175 
π∆_lök_m≠
 
	ml_m≠
;

176 
uöt64_t
 
	ml_°©s
[
RTNL_LINK_STATS_MAX
+1];

177 
uöt32_t
 
	ml_Êag_mask
;

178 
uöt32_t
 
	ml_num_vf
;

179 
uöt8_t
 
	ml_›î°©e
;

180 
uöt8_t
 
	ml_lökmode
;

182 * 
	ml_öfo_köd
;

183 
π∆_lök_öfo_›s
 * 
	ml_öfo_›s
;

184 * 
	ml_af_d©a
[
AF_MAX
];

185 * 
	ml_öfo
;

186 * 
	ml_iÁlüs
;

187 
uöt32_t
 
	ml_¥omiscuôy
;

188 
uöt32_t
 
	ml_num_tx_queues
;

189 
uöt32_t
 
	ml_num_rx_queues
;

190 
uöt32_t
 
	ml_group
;

191 
uöt8_t
 
	ml_ˇºõr
;

193 
π∆_lök_af_›s
 * 
	ml_af_›s
;

194 
∆_d©a
 * 
	ml_phys_p‹t_id
;

195 
	ml_ns_fd
;

196 
pid_t
 
	ml_ns_pid
;

199 
	sπ∆_nˇcheöfo


201 
uöt32_t
 
	mnci_c⁄fúmed
;

202 
uöt32_t
 
	mnci_u£d
;

203 
uöt32_t
 
	mnci_upd©ed
;

204 
uöt32_t
 
	mnci_ªf˙t
;

208 
	sπ∆_√igh


210 
NLHDR_COMMON


211 
uöt32_t
 
	mn_Ámûy
;

212 
uöt32_t
 
	mn_ifödex
;

213 
uöt16_t
 
	mn_°©e
;

214 
uöt8_t
 
	mn_Êags
;

215 
uöt8_t
 
	mn_ty≥
;

216 
∆_addr
 *
	mn_Œaddr
;

217 
∆_addr
 *
	mn_d°
;

218 
uöt32_t
 
	mn_¥obes
;

219 
π∆_nˇcheöfo
 
	mn_ˇcheöfo
;

220 
uöt32_t
 
	mn_°©e_mask
;

221 
uöt32_t
 
	mn_Êag_mask
;

222 
uöt32_t
 
	mn_ma°î
;

226 
	sπ∆_addr_ˇcheöfo


229 
uöt32_t
 
	maci_¥e„ªd
;

232 
uöt32_t
 
	maci_vÆid
;

235 
uöt32_t
 
	maci_c°amp
;

238 
uöt32_t
 
	maci_t°amp
;

241 
	sπ∆_addr


243 
NLHDR_COMMON


245 
uöt8_t
 
	ma_Ámûy
;

246 
uöt8_t
 
	ma_¥efixÀn
;

247 
uöt8_t
 
	ma_sc›e
;

248 
uöt32_t
 
	ma_Êags
;

249 
uöt32_t
 
	ma_ifödex
;

251 
∆_addr
 *
	ma_≥î
;

252 
∆_addr
 *
	ma_loˇl
;

253 
∆_addr
 *
	ma_bˇ°
;

254 
∆_addr
 *
	ma_™yˇ°
;

255 
∆_addr
 *
	ma_mu…iˇ°
;

257 
π∆_addr_ˇcheöfo
 
	ma_ˇcheöfo
;

259 
	ma_œbñ
[
IFNAMSIZ
];

260 
uöt32_t
 
	ma_Êag_mask
;

261 
π∆_lök
 *
	ma_lök
;

264 
	sπ∆_√xth›


266 
uöt8_t
 
	mπnh_Êags
;

267 
uöt8_t
 
	mπnh_Êag_mask
;

268 
uöt8_t
 
	mπnh_weight
;

270 
uöt32_t
 
	mπnh_ifödex
;

271 
∆_addr
 * 
	mπnh_g©eway
;

272 
uöt32_t
 
	m˚_mask
;

273 
∆_li°_hód
 
	mπnh_li°
;

274 
uöt32_t
 
	mπnh_ªÆms
;

277 
	sπ∆_rouã


279 
NLHDR_COMMON


281 
uöt8_t
 
	mπ_Ámûy
;

282 
uöt8_t
 
	mπ_d°_Àn
;

283 
uöt8_t
 
	mπ_§c_Àn
;

284 
uöt8_t
 
	mπ_tos
;

285 
uöt8_t
 
	mπ_¥Ÿocﬁ
;

286 
uöt8_t
 
	mπ_sc›e
;

287 
uöt8_t
 
	mπ_ty≥
;

288 
uöt8_t
 
	mπ_nmërics
;

289 
uöt32_t
 
	mπ_Êags
;

290 
∆_addr
 * 
	mπ_d°
;

291 
∆_addr
 * 
	mπ_§c
;

292 
uöt32_t
 
	mπ_èbÀ
;

293 
uöt32_t
 
	mπ_iif
;

294 
uöt32_t
 
	mπ_¥io
;

295 
uöt32_t
 
	mπ_mërics
[
RTAX_MAX
];

296 
uöt32_t
 
	mπ_mërics_mask
;

297 
uöt32_t
 
	mπ_ƒ_nh
;

298 
∆_addr
 * 
	mπ_¥ef_§c
;

299 
∆_li°_hód
 
	mπ_√xth›s
;

300 
π∆_πˇcheöfo
 
	mπ_ˇcheöfo
;

301 
uöt32_t
 
	mπ_Êag_mask
;

304 
	sπ∆_ruÀ


306 
NLHDR_COMMON


307 
uöt8_t
 
	mr_Ámûy
;

308 
uöt8_t
 
	mr_a˘i⁄
;

309 
uöt8_t
 
	mr_dsfõld
;

310 
uöt8_t
 
	mr_unu£d
;

311 
uöt32_t
 
	mr_èbÀ
;

312 
uöt32_t
 
	mr_Êags
;

313 
uöt32_t
 
	mr_¥io
;

314 
uöt32_t
 
	mr_m¨k
;

315 
uöt32_t
 
	mr_mask
;

316 
uöt32_t
 
	mr_gŸo
;

317 
uöt32_t
 
	mr_Êow
;

318 
∆_addr
 *
	mr_§c
;

319 
∆_addr
 *
	mr_d°
;

320 
	mr_ii‚ame
[
IFNAMSIZ
];

321 
	mr_oi‚ame
[
IFNAMSIZ
];

324 
	sπ∆_√ightbl_∑rms


330 
uöt32_t
 
	m¡p_ifödex
;

335 
uöt32_t
 
	m¡p_ªf˙t
;

342 
uöt32_t
 
	m¡p_queue_Àn
;

348 
uöt32_t
 
	m¡p_≠p_¥obes
;

353 
uöt32_t
 
	m¡p_uˇ°_¥obes
;

358 
uöt32_t
 
	m¡p_mˇ°_¥obes
;

363 
uöt64_t
 
	m¡p_ba£_ªachabÀ_time
;

368 
uöt64_t
 
	m¡p_ªachabÀ_time
;

374 
uöt64_t
 
	m¡p_ªå™s_time
;

380 
uöt64_t
 
	m¡p_gc_°Æe_time
;

386 
uöt64_t
 
	m¡p_¥obe_dñay
;

392 
uöt64_t
 
	m¡p_™yˇ°_dñay
;

398 
uöt64_t
 
	m¡p_locktime
;

404 
uöt64_t
 
	m¡p_¥oxy_dñay
;

409 
uöt32_t
 
	m¡p_¥oxy_qÀn
;

414 
uöt32_t
 
	m¡p_mask
;

417 
	#NTBLNAMSIZ
 32

	)

423 
	sπ∆_√ightbl


425 
NLHDR_COMMON


427 
	m¡_«me
[
NTBLNAMSIZ
];

428 
uöt32_t
 
	m¡_Ámûy
;

429 
uöt32_t
 
	m¡_gc_thªsh1
;

430 
uöt32_t
 
	m¡_gc_thªsh2
;

431 
uöt32_t
 
	m¡_gc_thªsh3
;

432 
uöt64_t
 
	m¡_gc_öãrvÆ
;

433 
ndt_c⁄fig
 
	m¡_c⁄fig
;

434 
π∆_√ightbl_∑rms
 
	m¡_∑rms
;

435 
ndt_°©s
 
	m¡_°©s
;

438 
	sπ∆_øã•ec


440 
uöt8_t
 
	mrs_˚Œ_log
;

441 
uöt16_t
 
	mrs_ovîhód
;

442 
öt16_t
 
	mrs_˚Œ_Æign
;

443 
uöt16_t
 
	mrs_mpu
;

444 
uöt32_t
 
	mrs_øã
;

447 
	sπ∆_t°©s


450 
uöt64_t
 
	mbyãs
;

451 
uöt64_t
 
	m∑ckës
;

452 } 
	mtcs_basic
;

455 
uöt32_t
 
	mbps
;

456 
uöt32_t
 
	mµs
;

457 } 
	mtcs_øã_e°
;

460 
uöt32_t
 
	mqÀn
;

461 
uöt32_t
 
	mbacklog
;

462 
uöt32_t
 
	mdr›s
;

463 
uöt32_t
 
	mªqueues
;

464 
uöt32_t
 
	movîlimôs
;

465 } 
	mtcs_queue
;

468 
	#TCKINDSIZ
 32

	)

470 
	#NL_TC_GENERIC
(
¥e
) \

471 
NLHDR_COMMON
 \

472 
uöt32_t
 
¥e
 ##
_Ámûy
; \

473 
uöt32_t
 
¥e
 ##
_ifödex
; \

474 
uöt32_t
 
¥e
 ##
_h™dÀ
; \

475 
uöt32_t
 
¥e
 ##
_∑ª¡
; \

476 
uöt32_t
 
¥e
 ##
_öfo
; \

477 
uöt32_t
 
¥e
 ##
_mtu
; \

478 
uöt32_t
 
¥e
 ##
_mpu
; \

479 
uöt32_t
 
¥e
 ##
_ovîhód
; \

480 
uöt32_t
 
¥e
 ##
_lökty≥
; \

481 
¥e
 ##
_köd
[
TCKINDSIZ
]; \

482 
∆_d©a
 * 
¥e
 ##
_›ts
; \

483 
uöt64_t
 
¥e
 ##
_°©s
[
RTNL_TC_STATS_MAX
+1]; \

484 
∆_d©a
 * 
¥e
 ##
_x°©s
; \

485 
∆_d©a
 * 
¥e
 ##
_subd©a
; \

486 
π∆_lök
 * 
¥e
 ##
_lök
; \

487 
π∆_tc_›s
 * 
¥e
 ##
_›s
; \

488 
π∆_tc_ty≥
 
¥e
 ##
_ty≥


	)

490 
	sπ∆_tc


492 
NL_TC_GENERIC
(
tc
);

495 
	sπ∆_qdisc


497 
NL_TC_GENERIC
(
q
);

500 
	sπ∆_˛ass


502 
NL_TC_GENERIC
(
c
);

505 
	sπ∆_˛s


507 
NL_TC_GENERIC
(
c
);

508 
uöt16_t
 
	mc_¥io
;

509 
uöt16_t
 
	mc_¥Ÿocﬁ
;

512 
	sπ∆_a˘


514 
NL_TC_GENERIC
(
c
);

515 
π∆_a˘
 * 
	ma_√xt
;

518 
	sπ∆_múªd


520 
tc_múªd
 
	mm_∑rm
;

523 
	sπ∆_u32


525 
uöt32_t
 
	mcu_divis‹
;

526 
uöt32_t
 
	mcu_hash
;

527 
uöt32_t
 
	mcu_˛assid
;

528 
uöt32_t
 
	mcu_lök
;

529 
∆_d©a
 * 
	mcu_p˙t
;

530 
∆_d©a
 * 
	mcu_£À˘‹
;

531 
π∆_a˘
* 
	mcu_a˘
;

532 
∆_d©a
 * 
	mcu_pﬁi˚
;

533 
	mcu_ödev
[
IFNAMSIZ
];

534 
	mcu_mask
;

537 
	sπ∆_cgroup


539 
π∆_em©ch_åì
 *
	mcg_em©ch
;

540 
	mcg_mask
;

543 
	sπ∆_fw


545 
uöt32_t
 
	mcf_˛assid
;

546 
∆_d©a
 * 
	mcf_a˘
;

547 
∆_d©a
 * 
	mcf_pﬁi˚
;

548 
	mcf_ödev
[
IFNAMSIZ
];

549 
uöt32_t
 
	mcf_fwmask
;

550 
	mcf_mask
;

553 
	sπ∆_em©ch


555 
uöt16_t
 
	me_id
;

556 
uöt16_t
 
	me_köd
;

557 
uöt16_t
 
	me_Êags
;

558 
uöt16_t
 
	me_ödex
;

559 
size_t
 
	me_d©Æí
;

561 
∆_li°_hód
 
	me_chûds
;

562 
∆_li°_hód
 
	me_li°
;

563 
π∆_em©ch_›s
 *
	me_›s
;

565 * 
	me_d©a
;

568 
	sπ∆_em©ch_åì


570 
uöt16_t
 
	më_¥ogid
;

571 
∆_li°_hód
 
	më_li°
;

575 
	sπ∆_dsm¨k_qdisc


577 
uöt16_t
 
	mqdm_ödi˚s
;

578 
uöt16_t
 
	mqdm_deÁu…_ödex
;

579 
uöt32_t
 
	mqdm_£t_tc_ödex
;

580 
uöt32_t
 
	mqdm_mask
;

583 
	sπ∆_dsm¨k_˛ass


585 
uöt8_t
 
	mcdm_bmask
;

586 
uöt8_t
 
	mcdm_vÆue
;

587 
uöt32_t
 
	mcdm_mask
;

590 
	sπ∆_fifo


592 
uöt32_t
 
	mqf_limô
;

593 
uöt32_t
 
	mqf_mask
;

596 
	sπ∆_¥io


598 
uöt32_t
 
	mqp_b™ds
;

599 
uöt8_t
 
	mqp_¥iom≠
[
TC_PRIO_MAX
+1];

600 
uöt32_t
 
	mqp_mask
;

603 
	sπ∆_tbf


605 
uöt32_t
 
	mqt_limô
;

606 
π∆_øã•ec
 
	mqt_øã
;

607 
uöt32_t
 
	mqt_øã_buckë
;

608 
uöt32_t
 
	mqt_øã_txtime
;

609 
π∆_øã•ec
 
	mqt_≥akøã
;

610 
uöt32_t
 
	mqt_≥akøã_buckë
;

611 
uöt32_t
 
	mqt_≥akøã_txtime
;

612 
uöt32_t
 
	mqt_mask
;

615 
	sπ∆_sfq


617 
uöt32_t
 
	mqs_qu™tum
;

618 
uöt32_t
 
	mqs_≥πurb
;

619 
uöt32_t
 
	mqs_limô
;

620 
uöt32_t
 
	mqs_divis‹
;

621 
uöt32_t
 
	mqs_Êows
;

622 
uöt32_t
 
	mqs_mask
;

625 
	sπ∆_√ãm_c‹r


627 
uöt32_t
 
	mnmc_dñay
;

628 
uöt32_t
 
	mnmc_loss
;

629 
uöt32_t
 
	mnmc_du∂iˇã
;

632 
	sπ∆_√ãm_ªo


634 
uöt32_t
 
	mnmro_¥obabûôy
;

635 
uöt32_t
 
	mnmro_c‹ªœti⁄
;

638 
	sπ∆_√ãm_¸±


640 
uöt32_t
 
	mnm¸_¥obabûôy
;

641 
uöt32_t
 
	mnm¸_c‹ªœti⁄
;

644 
	sπ∆_√ãm_di°


646 
öt16_t
 * 
	mdi°_d©a
;

647 
size_t
 
	mdi°_size
;

650 
	sπ∆_√ãm


652 
uöt32_t
 
	mqnm_œãncy
;

653 
uöt32_t
 
	mqnm_limô
;

654 
uöt32_t
 
	mqnm_loss
;

655 
uöt32_t
 
	mqnm_g≠
;

656 
uöt32_t
 
	mqnm_du∂iˇã
;

657 
uöt32_t
 
	mqnm_jôãr
;

658 
uöt32_t
 
	mqnm_mask
;

659 
π∆_√ãm_c‹r
 
	mqnm_c‹r
;

660 
π∆_√ãm_ªo
 
	mqnm_ro
;

661 
π∆_√ãm_¸±
 
	mqnm_¸±
;

662 
π∆_√ãm_di°
 
	mqnm_di°
;

665 
	sπ∆_htb_qdisc


667 
uöt32_t
 
	mqh_øã2qu™tum
;

668 
uöt32_t
 
	mqh_def˛s
;

669 
uöt32_t
 
	mqh_mask
;

670 
uöt32_t
 
	mqh_dúe˘_pkts
;

673 
	sπ∆_htb_˛ass


675 
uöt32_t
 
	mch_¥io
;

676 
π∆_øã•ec
 
	mch_øã
;

677 
π∆_øã•ec
 
	mch_˚û
;

678 
uöt32_t
 
	mch_rbuf„r
;

679 
uöt32_t
 
	mch_cbuf„r
;

680 
uöt32_t
 
	mch_qu™tum
;

681 
uöt32_t
 
	mch_mask
;

682 
uöt32_t
 
	mch_Àvñ
;

685 
	sπ∆_cbq


687 
tc_cbq_lss›t
 
	mcbq_lss
;

688 
tc_øã•ec
 
	mcbq_øã
;

689 
tc_cbq_wº›t
 
	mcbq_wº
;

690 
tc_cbq_ovl
 
	mcbq_ovl
;

691 
tc_cbq_f›t
 
	mcbq_f›t
;

692 
tc_cbq_pﬁi˚
 
	mcbq_pﬁi˚
;

695 
	sπ∆_ªd


697 
uöt32_t
 
	mqr_limô
;

698 
uöt32_t
 
	mqr_qth_mö
;

699 
uöt32_t
 
	mqr_qth_max
;

700 
uöt8_t
 
	mqr_Êags
;

701 
uöt8_t
 
	mqr_wlog
;

702 
uöt8_t
 
	mqr_∂og
;

703 
uöt8_t
 
	mqr_s˚Œ_log
;

704 
uöt32_t
 
	mqr_mask
;

707 
	sπ∆_∂ug


709 
	ma˘i⁄
;

710 
uöt32_t
 
	mlimô
;

713 
	sπ∆_fq_codñ


715 
	mfq_limô
;

716 
uöt32_t
 
	mfq_èrgë
;

717 
uöt32_t
 
	mfq_öãrvÆ
;

718 
	mfq_Êows
;

719 
uöt32_t
 
	mfq_qu™tum
;

720 
	mfq_e˙
;

721 
uöt32_t
 
	mfq_mask
;

724 
	sÊ∆_ªque°


726 
NLHDR_COMMON


728 
∆_addr
 * 
	mÃ_addr
;

729 
uöt32_t
 
	mÃ_fwm¨k
;

730 
uöt8_t
 
	mÃ_tos
;

731 
uöt8_t
 
	mÃ_sc›e
;

732 
uöt8_t
 
	mÃ_èbÀ
;

736 
	sÊ∆_ªsu…


738 
NLHDR_COMMON


740 
Ê∆_ªque°
 * 
	m‰_ªq
;

741 
uöt8_t
 
	m‰_èbÀ_id
;

742 
uöt8_t
 
	m‰_¥efixÀn
;

743 
uöt8_t
 
	m‰_nh_£l
;

744 
uöt8_t
 
	m‰_ty≥
;

745 
uöt8_t
 
	m‰_sc›e
;

746 
uöt32_t
 
	m‰_îr‹
;

749 
	#GENL_OP_HAS_POLICY
 1

	)

750 
	#GENL_OP_HAS_DOIT
 2

	)

751 
	#GENL_OP_HAS_DUMPIT
 4

	)

753 
	sgíl_Ámûy_›


755 
uöt32_t
 
	mo_id
;

756 
uöt32_t
 
	mo_Êags
;

758 
∆_li°_hód
 
	mo_li°
;

761 
	sgíl_Ámûy_gΩ
 {

762 
gíl_Ámûy
 *
	mÁmûy
;

763 
∆_li°_hód
 
	mli°
;

764 
	m«me
[
GENL_NAMSIZ
];

765 
u_öt32_t
 
	mid
;

768 
	sgíl_Ámûy


770 
NLHDR_COMMON


772 
uöt16_t
 
	mgf_id
;

773 
	mgf_«me
[
GENL_NAMSIZ
];

774 
uöt32_t
 
	mgf_vîsi⁄
;

775 
uöt32_t
 
	mgf_hdrsize
;

776 
uöt32_t
 
	mgf_max©å
;

778 
∆_li°_hód
 
	mgf_›s
;

779 
∆_li°_hód
 
	mgf_mc_gΩs
;

782 
	un‚l_˘_¥Ÿo


785 
uöt16_t
 
	m§c
;

786 
uöt16_t
 
	md°
;

787 } 
	mp‹t
;

789 
uöt16_t
 
	mid
;

790 
uöt8_t
 
	mty≥
;

791 
uöt8_t
 
	mcode
;

792 } 
	micmp
;

795 
	sn‚l_˘_dú
 {

796 
∆_addr
 * 
	m§c
;

797 
∆_addr
 * 
	md°
;

798 
n‚l_˘_¥Ÿo
 
	m¥Ÿo
;

799 
uöt64_t
 
	m∑ckës
;

800 
uöt64_t
 
	mbyãs
;

803 
	un‚l_˘_¥Ÿoöfo
 {

805 
uöt8_t
 
	m°©e
;

806 } 
	mt˝
;

809 
	sn‚l_˘
 {

810 
NLHDR_COMMON


812 
uöt8_t
 
	m˘_Ámûy
;

813 
uöt8_t
 
	m˘_¥Ÿo
;

814 
n‚l_˘_¥Ÿoöfo
 
	m˘_¥Ÿoöfo
;

816 
uöt32_t
 
	m˘_°©us
;

817 
uöt32_t
 
	m˘_°©us_mask
;

818 
uöt32_t
 
	m˘_timeout
;

819 
uöt32_t
 
	m˘_m¨k
;

820 
uöt32_t
 
	m˘_u£
;

821 
uöt32_t
 
	m˘_id
;

822 
uöt16_t
 
	m˘_z⁄e
;

824 
n‚l_˘_dú
 
	m˘_‹ig
;

825 
n‚l_˘_dú
 
	m˘_ª∂
;

827 
n‚l_˘_time°amp
 
	m˘_t°amp
;

830 
	un‚l_exp_¥Ÿod©a
 {

832 
uöt16_t
 
	m§c
;

833 
uöt16_t
 
	md°
;

834 } 
	mp‹t
;

836 
uöt16_t
 
	mid
;

837 
uöt8_t
 
	mty≥
;

838 
uöt8_t
 
	mcode
;

839 } 
	micmp
;

843 
	sn‚l_exp_¥Ÿo


845 
uöt8_t
 
	ml4¥Ÿ⁄um
;

846 
n‚l_exp_¥Ÿod©a
 
	ml4¥Ÿod©a
;

849 
	sn‚l_exp_dú
 {

850 
∆_addr
 * 
	m§c
;

851 
∆_addr
 * 
	md°
;

852 
n‚l_exp_¥Ÿo
 
	m¥Ÿo
;

855 
	sn‚l_exp
 {

856 
NLHDR_COMMON


858 
uöt8_t
 
	mexp_Ámûy
;

859 
uöt32_t
 
	mexp_timeout
;

860 
uöt32_t
 
	mexp_id
;

861 
uöt16_t
 
	mexp_z⁄e
;

862 
uöt32_t
 
	mexp_˛ass
;

863 
uöt32_t
 
	mexp_Êags
;

864 * 
	mexp_hñ≥r_«me
;

865 * 
	mexp_‚
;

866 
uöt8_t
 
	mexp_«t_dú
;

868 
n‚l_exp_dú
 
	mexp_ex≥˘
;

869 
n‚l_exp_dú
 
	mexp_ma°î
;

870 
n‚l_exp_dú
 
	mexp_mask
;

871 
n‚l_exp_dú
 
	mexp_«t
;

874 
	sn‚l_log
 {

875 
NLHDR_COMMON


877 
uöt16_t
 
	mlog_group
;

878 
uöt8_t
 
	mlog_c›y_mode
;

879 
uöt32_t
 
	mlog_c›y_ønge
;

880 
uöt32_t
 
	mlog_Êush_timeout
;

881 
uöt32_t
 
	mlog_Æloc_size
;

882 
uöt32_t
 
	mlog_queue_thªshﬁd
;

883 
uöt32_t
 
	mlog_Êags
;

884 
uöt32_t
 
	mlog_Êag_mask
;

887 
	sn‚l_log_msg
 {

888 
NLHDR_COMMON


890 
uöt8_t
 
	mlog_msg_Ámûy
;

891 
uöt8_t
 
	mlog_msg_hook
;

892 
uöt16_t
 
	mlog_msg_hw¥Ÿo
;

893 
uöt32_t
 
	mlog_msg_m¨k
;

894 
timevÆ
 
	mlog_msg_time°amp
;

895 
uöt32_t
 
	mlog_msg_ödev
;

896 
uöt32_t
 
	mlog_msg_outdev
;

897 
uöt32_t
 
	mlog_msg_physödev
;

898 
uöt32_t
 
	mlog_msg_physoutdev
;

899 
uöt8_t
 
	mlog_msg_hwaddr
[8];

900 
	mlog_msg_hwaddr_Àn
;

901 * 
	mlog_msg_∑ylﬂd
;

902 
	mlog_msg_∑ylﬂd_Àn
;

903 * 
	mlog_msg_¥efix
;

904 
uöt32_t
 
	mlog_msg_uid
;

905 
uöt32_t
 
	mlog_msg_gid
;

906 
uöt32_t
 
	mlog_msg_£q
;

907 
uöt32_t
 
	mlog_msg_£q_globÆ
;

910 
	sn‚l_queue
 {

911 
NLHDR_COMMON


913 
uöt16_t
 
	mqueue_group
;

914 
uöt32_t
 
	mqueue_maxÀn
;

915 
uöt32_t
 
	mqueue_c›y_ønge
;

916 
uöt8_t
 
	mqueue_c›y_mode
;

919 
	sn‚l_queue_msg
 {

920 
NLHDR_COMMON


922 
uöt16_t
 
	mqueue_msg_group
;

923 
uöt8_t
 
	mqueue_msg_Ámûy
;

924 
uöt8_t
 
	mqueue_msg_hook
;

925 
uöt16_t
 
	mqueue_msg_hw¥Ÿo
;

926 
uöt32_t
 
	mqueue_msg_∑ckëid
;

927 
uöt32_t
 
	mqueue_msg_m¨k
;

928 
timevÆ
 
	mqueue_msg_time°amp
;

929 
uöt32_t
 
	mqueue_msg_ödev
;

930 
uöt32_t
 
	mqueue_msg_outdev
;

931 
uöt32_t
 
	mqueue_msg_physödev
;

932 
uöt32_t
 
	mqueue_msg_physoutdev
;

933 
uöt8_t
 
	mqueue_msg_hwaddr
[8];

934 
	mqueue_msg_hwaddr_Àn
;

935 * 
	mqueue_msg_∑ylﬂd
;

936 
	mqueue_msg_∑ylﬂd_Àn
;

937 
uöt32_t
 
	mqueue_msg_vîdi˘
;

940 
	sem©ch_quŸed
 {

941 * 
	md©a
;

942 
size_t
 
	mÀn
;

943 
	mödex
;

946 
	sidüg∆_memöfo
 {

947 
NLHDR_COMMON


949 
uöt32_t
 
	midüg_rmem
;

950 
uöt32_t
 
	midüg_wmem
;

951 
uöt32_t
 
	midüg_fmem
;

952 
uöt32_t
 
	midüg_tmem
;

955 
	sidüg∆_vegasöfo
 {

956 
NLHDR_COMMON


958 
uöt32_t
 
	mt˝v_íabÀd
;

959 
uöt32_t
 
	mt˝v_πt˙t
;

960 
uöt32_t
 
	mt˝v_πt
;

961 
uöt32_t
 
	mt˝v_möπt
;

964 
	sidüg∆_msg
 {

965 
NLHDR_COMMON


967 
uöt8_t
 
	midüg_Ámûy
;

968 
uöt8_t
 
	midüg_°©e
;

969 
uöt8_t
 
	midüg_timî
;

970 
uöt8_t
 
	midüg_ªå™s
;

971 
uöt16_t
 
	midüg_•‹t
;

972 
uöt16_t
 
	midüg_dp‹t
;

973 
∆_addr
 * 
	midüg_§c
;

974 
∆_addr
 * 
	midüg_d°
;

975 
uöt32_t
 
	midüg_ifödex
;

976 
uöt32_t
 
	midüg_expúes
;

977 
uöt32_t
 
	midüg_rqueue
;

978 
uöt32_t
 
	midüg_wqueue
;

979 
uöt32_t
 
	midüg_uid
;

980 
uöt32_t
 
	midüg_öode
;

982 
uöt8_t
 
	midüg_tos
;

983 
uöt8_t
 
	midüg_t˛ass
;

984 
uöt8_t
 
	midüg_shutdown
;

985 * 
	midüg_c⁄g
;

986 
idüg∆_memöfo
 * 
	midüg_memöfo
;

987 
idüg∆_vegasöfo
 * 
	midüg_vegasöfo
;

988 
t˝_öfo
 
	midüg_t˝öfo
;

989 
uöt32_t
 
	midüg_skmemöfo
[
IDIAG_SK_MEMINFO_VARS
];

992 
	sidüg∆_ªq
 {

993 
NLHDR_COMMON


995 
uöt8_t
 
	midüg_Ámûy
;

996 
uöt8_t
 
	midüg_ext
;

997 
∆_addr
 * 
	midüg_§c
;

998 
∆_addr
 * 
	midüg_d°
;

999 
uöt32_t
 
	midüg_ifödex
;

1000 
uöt32_t
 
	midüg_°©es
;

1001 
uöt32_t
 
	midüg_dbs
;

	@mylibnl/libnl-3.2.25/include/netlink/addr.h

12 #i‚de‡
NETLINK_ADDR_H_


13 
	#NETLINK_ADDR_H_


	)

15 
	~<√éök/√éök.h
>

17 #ifde‡
__˝lu•lus


21 
∆_addr
;

24 
∆_addr
 * 
∆_addr_Æloc
(
size_t
);

25 
∆_addr
 * 
∆_addr_Æloc_©å
(
∆©å
 *, );

26 
∆_addr
 * 
∆_addr_buûd
(, *, 
size_t
);

27 
∆_addr_∑r£
(c⁄° *, , 
∆_addr
 **);

28 
∆_addr
 * 
∆_addr_˛⁄e
(nl_addr *);

31 
∆_addr
 * 
∆_addr_gë
(nl_addr *);

32 
∆_addr_put
(
∆_addr
 *);

33 
∆_addr_sh¨ed
(
∆_addr
 *);

35 
∆_addr_cmp
(
∆_addr
 *, nl_addr *);

36 
∆_addr_cmp_¥efix
(
∆_addr
 *, nl_addr *);

37 
∆_addr_iszîo
(
∆_addr
 *);

38 
∆_addr_vÆid
(*, );

39 
∆_addr_guess_Ámûy
(
∆_addr
 *);

40 
∆_addr_fûl_sockaddr
(
∆_addr
 *,

41 
sockaddr
 *, 
sockÀn_t
 *);

42 
∆_addr_öfo
(
∆_addr
 *, 
addröfo
 **);

43 
∆_addr_ªsﬁve
(
∆_addr
 *, *, 
size_t
);

46 
∆_addr_£t_Ámûy
(
∆_addr
 *, );

47 
∆_addr_gë_Ámûy
(
∆_addr
 *);

48 
∆_addr_£t_bö¨y_addr
(
∆_addr
 *, *,

49 
size_t
);

50 * 
∆_addr_gë_bö¨y_addr
(
∆_addr
 *);

51 
∆_addr_gë_Àn
(
∆_addr
 *);

52 
∆_addr_£t_¥efixÀn
(
∆_addr
 *, );

53 
∆_addr_gë_¥efixÀn
(
∆_addr
 *);

56 * 
∆_af2°r
(, *, 
size_t
);

57 
∆_°r2af
(const *);

60 * 
∆_addr2°r
(
∆_addr
 *, *, 
size_t
);

62 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/attr.h

12 #i‚de‡
NETLINK_ATTR_H_


13 
	#NETLINK_ATTR_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/obje˘.h
>

17 
	~<√éök/addr.h
>

18 
	~<√éök/d©a.h
>

20 #ifde‡
__˝lu•lus


24 
∆_msg
;

38 
NLA_UNSPEC
,

39 
NLA_U8
,

40 
NLA_U16
,

41 
NLA_U32
,

42 
NLA_U64
,

43 
NLA_STRING
,

44 
NLA_FLAG
,

45 
NLA_MSECS
,

46 
NLA_NESTED
,

47 
__NLA_TYPE_MAX
,

50 
	#NLA_TYPE_MAX
 (
__NLA_TYPE_MAX
 - 1)

	)

60 
	s∆a_pﬁicy
 {

62 
uöt16_t
 
ty≥
;

65 
uöt16_t
 
möÀn
;

68 
uöt16_t
 
maxÀn
;

72 
∆a_©å_size
(
∑ylﬂd
);

73 
∆a_tŸÆ_size
(
∑ylﬂd
);

74 
∆a_∑dÀn
(
∑ylﬂd
);

77 
∆a_ty≥
(c⁄° 
∆©å
 *);

78 * 
∆a_d©a
(c⁄° 
∆©å
 *);

79 
∆a_Àn
(c⁄° 
∆©å
 *);

80 
∆a_ok
(c⁄° 
∆©å
 *, );

81 
∆©å
 * 
∆a_√xt
(const nlattr *, *);

82 
∆a_∑r£
(
∆©å
 **, , nlattr *,

83 , 
∆a_pﬁicy
 *);

84 
∆a_vÆid©e
(
∆©å
 *, , ,

85 
∆a_pﬁicy
 *);

86 
∆©å
 * 
∆a_föd
(nlattr *, , );

89 
∆a_mem˝y
(*, 
∆©å
 *, );

90 
size_t
 
∆a_°æ˝y
(*, c⁄° 
∆©å
 *, size_t);

91 
∆a_memcmp
(c⁄° 
∆©å
 *, c⁄° *, 
size_t
);

92 
∆a_°rcmp
(c⁄° 
∆©å
 *, const *);

95 
∆©å
 * 
∆a_ª£rve
(
∆_msg
 *, , );

96 
∆a_put
(
∆_msg
 *, , , const *);

97 
∆a_put_d©a
(
∆_msg
 *, , 
∆_d©a
 *);

98 
∆a_put_addr
(
∆_msg
 *, , 
∆_addr
 *);

101 
uöt8_t
 
∆a_gë_u8
(
∆©å
 *);

102 
∆a_put_u8
(
∆_msg
 *, , 
uöt8_t
);

103 
uöt16_t
 
∆a_gë_u16
(
∆©å
 *);

104 
∆a_put_u16
(
∆_msg
 *, , 
uöt16_t
);

105 
uöt32_t
 
∆a_gë_u32
(
∆©å
 *);

106 
∆a_put_u32
(
∆_msg
 *, , 
uöt32_t
);

107 
uöt64_t
 
∆a_gë_u64
(
∆©å
 *);

108 
∆a_put_u64
(
∆_msg
 *, , 
uöt64_t
);

111 * 
∆a_gë_°rög
(
∆©å
 *);

112 * 
∆a_°rdup
(
∆©å
 *);

113 
∆a_put_°rög
(
∆_msg
 *, , const *);

116 
∆a_gë_Êag
(
∆©å
 *);

117 
∆a_put_Êag
(
∆_msg
 *, );

120 
∆a_gë_m£cs
(
∆©å
 *);

121 
∆a_put_m£cs
(
∆_msg
 *, , );

124 
∆a_put_√°ed
(
∆_msg
 *, , nl_msg *);

125 
∆©å
 * 
∆a_√°_°¨t
(
∆_msg
 *, );

126 
∆a_√°_íd
(
∆_msg
 *, 
∆©å
 *);

127 
∆a_√°_ˇn˚l
(
∆_msg
 *, 
∆©å
 *);

128 
∆a_∑r£_√°ed
(
∆©å
 **, , nlattr *,

129 
∆a_pﬁicy
 *);

130 
∆a_is_√°ed
(
∆©å
 *);

145 
	#NLA_PUT
(
msg
, 
©åty≥
, 
©åÀn
, 
d©a
) \

147 i‡(
	`∆a_put
(
msg
, 
©åty≥
, 
©åÀn
, 
d©a
) < 0) \

148 
∆a_put_Áûuª
; \

149 } 0)

	)

159 
	#NLA_PUT_TYPE
(
msg
, 
ty≥
, 
©åty≥
, 
vÆue
) \

161 
ty≥
 
__tmp
 = 
vÆue
; \

162 
	`NLA_PUT
(
msg
, 
©åty≥
, (
ty≥
), &
__tmp
); \

163 } 0)

	)

171 
	#NLA_PUT_U8
(
msg
, 
©åty≥
, 
vÆue
) \

172 
	`NLA_PUT_TYPE
(
msg
, 
uöt8_t
, 
©åty≥
, 
vÆue
)

	)

180 
	#NLA_PUT_U16
(
msg
, 
©åty≥
, 
vÆue
) \

181 
	`NLA_PUT_TYPE
(
msg
, 
uöt16_t
, 
©åty≥
, 
vÆue
)

	)

189 
	#NLA_PUT_U32
(
msg
, 
©åty≥
, 
vÆue
) \

190 
	`NLA_PUT_TYPE
(
msg
, 
uöt32_t
, 
©åty≥
, 
vÆue
)

	)

198 
	#NLA_PUT_U64
(
msg
, 
©åty≥
, 
vÆue
) \

199 
	`NLA_PUT_TYPE
(
msg
, 
uöt64_t
, 
©åty≥
, 
vÆue
)

	)

207 
	#NLA_PUT_STRING
(
msg
, 
©åty≥
, 
vÆue
) \

208 
	`NLA_PUT
(
msg
, 
©åty≥
, (Ë
	`°æí
(
vÆue
Ë+ 1, vÆue)

	)

215 
	#NLA_PUT_FLAG
(
msg
, 
©åty≥
) \

216 
	`NLA_PUT
(
msg
, 
©åty≥
, 0, 
NULL
)

	)

224 
	#NLA_PUT_MSECS
(
msg
, 
©åty≥
, 
m£cs
) \

225 
	`NLA_PUT_U64
(
msg
, 
©åty≥
, 
m£cs
)

	)

233 
	#NLA_PUT_ADDR
(
msg
, 
©åty≥
, 
addr
) \

234 
	`NLA_PUT
(
msg
, 
©åty≥
, 
	`∆_addr_gë_Àn
(
addr
), \

235 
	`∆_addr_gë_bö¨y_addr
(
addr
))

	)

243 
	#NLA_PUT_DATA
(
msg
, 
©åty≥
, 
d©a
) \

244 
	`NLA_PUT
(
msg
, 
©åty≥
, 
	`∆_d©a_gë_size
(
d©a
), \

245 
	`∆_d©a_gë
(
d©a
))

	)

262 
	#∆a_f‹_óch_©å
(
pos
, 
hód
, 
Àn
, 
ªm
) \

263 
pos
 = 
hód
, 
ªm
 = 
Àn
; \

264 
	`∆a_ok
(
pos
, 
ªm
); \

265 
pos
 = 
	`∆a_√xt
’os, &(
ªm
)))

	)

274 
	#∆a_f‹_óch_√°ed
(
pos
, 
∆a
, 
ªm
) \

275 
pos
 = 
	`∆a_d©a
(
∆a
), 
ªm
 = 
	`∆a_Àn
(nla); \

276 
	`∆a_ok
(
pos
, 
ªm
); \

277 
pos
 = 
	`∆a_√xt
’os, &(
ªm
)))

	)

281 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/cache-api.h

12 #i‚de‡
NETLINK_DUMMY_CACHE_API_H_


13 
	#NETLINK_DUMMY_CACHE_API_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/ˇche.h
>

	@mylibnl/libnl-3.2.25/include/netlink/cache.h

12 #i‚de‡
NETLINK_CACHE_H_


13 
	#NETLINK_CACHE_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/msg.h
>

17 
	~<√éök/utûs.h
>

18 
	~<√éök/obje˘.h
>

20 #ifde‡
__˝lu•lus


25 
NL_ACT_UNSPEC
,

26 
NL_ACT_NEW
,

27 
NL_ACT_DEL
,

28 
NL_ACT_GET
,

29 
NL_ACT_SET
,

30 
NL_ACT_CHANGE
,

31 
__NL_ACT_MAX
,

34 
	#NL_ACT_MAX
 (
__NL_ACT_MAX
 - 1)

	)

36 
∆_ˇche
;

37 (*
ch™ge_func_t
)(
	t∆_ˇche
 *, 
	t∆_obje˘
 *, , *);

43 
	#NL_CACHE_AF_ITER
 0x0001

	)

46 
∆_ˇche_nôems
(
∆_ˇche
 *);

47 
∆_ˇche_nôems_fûãr
(
∆_ˇche
 *,

48 
∆_obje˘
 *);

49 
∆_ˇche_›s
 * 
∆_ˇche_gë_›s
(
∆_ˇche
 *);

50 
∆_obje˘
 * 
∆_ˇche_gë_fú°
(
∆_ˇche
 *);

51 
∆_obje˘
 * 
∆_ˇche_gë_œ°
(
∆_ˇche
 *);

52 
∆_obje˘
 * 
∆_ˇche_gë_√xt
(nl_object *);

53 
∆_obje˘
 * 
∆_ˇche_gë_¥ev
(nl_object *);

55 
∆_ˇche
 * 
∆_ˇche_Æloc
(
∆_ˇche_›s
 *);

56 
∆_ˇche_Æloc_™d_fûl
(
∆_ˇche_›s
 *,

57 
∆_sock
 *,

58 
∆_ˇche
 **);

59 
∆_ˇche_Æloc_«me
(const *,

60 
∆_ˇche
 **);

61 
∆_ˇche
 * 
∆_ˇche_sub£t
(nl_cache *,

62 
∆_obje˘
 *);

63 
∆_ˇche
 * 
∆_ˇche_˛⁄e
(nl_cache *);

64 
∆_ˇche_˛ór
(
∆_ˇche
 *);

65 
∆_ˇche_gë
(
∆_ˇche
 *);

66 
∆_ˇche_‰ì
(
∆_ˇche
 *);

67 
∆_ˇche_put
(
∆_ˇche
 *
ˇche
);

70 
∆_ˇche_add
(
∆_ˇche
 *,

71 
∆_obje˘
 *);

72 
∆_ˇche_∑r£_™d_add
(
∆_ˇche
 *,

73 
∆_msg
 *);

74 
∆_ˇche_move
(
∆_ˇche
 *,

75 
∆_obje˘
 *);

76 
∆_ˇche_ªmove
(
∆_obje˘
 *);

77 
∆_ˇche_ªfûl
(
∆_sock
 *,

78 
∆_ˇche
 *);

79 
∆_ˇche_pickup
(
∆_sock
 *,

80 
∆_ˇche
 *);

81 
∆_ˇche_ªsync
(
∆_sock
 *,

82 
∆_ˇche
 *,

83 
ch™ge_func_t
,

85 
∆_ˇche_ö˛ude
(
∆_ˇche
 *,

86 
∆_obje˘
 *,

87 
ch™ge_func_t
,

89 
∆_ˇche_£t_¨g1
(
∆_ˇche
 *, );

90 
∆_ˇche_£t_¨g2
(
∆_ˇche
 *, );

91 
∆_ˇche_£t_Êags
(
∆_ˇche
 *, );

94 
∆_ˇche_is_em±y
(
∆_ˇche
 *);

95 
∆_obje˘
 * 
∆_ˇche_£¨ch
(
∆_ˇche
 *,

96 
∆_obje˘
 *);

97 
∆_obje˘
 *
∆_ˇche_föd
(
∆_ˇche
 *,

98 
∆_obje˘
 *);

99 
∆_ˇche_m¨k_Æl
(
∆_ˇche
 *);

102 
∆_ˇche_dump
(
∆_ˇche
 *,

103 
∆_dump_∑øms
 *);

104 
∆_ˇche_dump_fûãr
(
∆_ˇche
 *,

105 
∆_dump_∑øms
 *,

106 
∆_obje˘
 *);

109 
∆_ˇche_f‹óch
(
∆_ˇche
 *,

110 (*
cb
)(
∆_obje˘
 *,

112 *
¨g
);

113 
∆_ˇche_f‹óch_fûãr
(
∆_ˇche
 *,

114 
∆_obje˘
 *,

115 (*
cb
)(

116 
∆_obje˘
 *,

118 *
¨g
);

123 
∆_ˇche_›s
 * 
∆_ˇche_›s_lookup
(const *);

124 
∆_ˇche_›s
 * 
∆_ˇche_›s_lookup_ß„
(const *);

125 
∆_ˇche_›s
 * 
∆_ˇche_›s_assocüã
(, );

126 
∆_ˇche_›s
 * 
∆_ˇche_›s_assocüã_ß„
(, );

127 
∆_msgty≥
 * 
∆_msgty≥_lookup
(
∆_ˇche_›s
 *, );

128 
∆_ˇche_›s_f‹óch
((*
cb
)(
∆_ˇche_›s
 *, *), *);

129 
∆_ˇche_mngt_ªgi°î
(
∆_ˇche_›s
 *);

130 
∆_ˇche_mngt_uƒegi°î
(
∆_ˇche_›s
 *);

133 
∆_ˇche_mngt_¥ovide
(
∆_ˇche
 *);

134 
∆_ˇche_mngt_u≈rovide
(
∆_ˇche
 *);

135 
∆_ˇche
 * 
∆_ˇche_mngt_ªquúe
(const *);

136 
∆_ˇche
 * 
∆_ˇche_mngt_ªquúe_ß„
(const *);

137 
∆_ˇche
 * 
__∆_ˇche_mngt_ªquúe
(const *);

139 
	g∆_ˇche_mngr
;

141 
	#NL_AUTO_PROVIDE
 1

	)

142 
	#NL_ALLOCATED_SOCK
 2

	)

144 
∆_ˇche_mngr_Æloc
(
∆_sock
 *,

146 
∆_ˇche_mngr
 **);

147 
∆_ˇche_mngr_add
(
∆_ˇche_mngr
 *,

149 
ch™ge_func_t
,

151 
∆_ˇche
 **);

152 
∆_ˇche_mngr_add_ˇche
(
∆_ˇche_mngr
 *
mngr
,

153 
∆_ˇche
 *
ˇche
,

154 
ch™ge_func_t
 
cb
, *
d©a
);

155 
∆_ˇche_mngr_gë_fd
(
∆_ˇche_mngr
 *);

156 
∆_ˇche_mngr_pﬁl
(
∆_ˇche_mngr
 *,

158 
∆_ˇche_mngr_d©a_ªady
(
∆_ˇche_mngr
 *);

159 
∆_ˇche_mngr_öfo
(
∆_ˇche_mngr
 *,

160 
∆_dump_∑øms
 *);

161 
∆_ˇche_mngr_‰ì
(
∆_ˇche_mngr
 *);

163 
∆_ˇche_›s_gë
(
∆_ˇche_›s
 *);

164 
∆_ˇche_›s_put
(
∆_ˇche_›s
 *);

166 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/cli/addr.h

12 #i‚de‡
__NETLINK_CLI_ADDR_H_


13 
	#__NETLINK_CLI_ADDR_H_


	)

15 
	~<√éök/rouã/addr.h
>

17 
	#∆_˛i_addr_Æloc_ˇche
(
sk
) \

18 
	`∆_˛i_Æloc_ˇche
((
sk
), "addªss", 
π∆_addr_Æloc_ˇche
)

	)

20 
π∆_addr
 *
∆_˛i_addr_Æloc
();

22 
∆_˛i_addr_∑r£_Ámûy
(
π∆_addr
 *, *);

23 
∆_˛i_addr_∑r£_loˇl
(
π∆_addr
 *, *);

24 
∆_˛i_addr_∑r£_dev
(
π∆_addr
 *, 
∆_ˇche
 *,*);

25 
∆_˛i_addr_∑r£_œbñ
(
π∆_addr
 *, *);

26 
∆_˛i_addr_∑r£_≥î
(
π∆_addr
 *, *);

27 
∆_˛i_addr_∑r£_sc›e
(
π∆_addr
 *, *);

28 
∆_˛i_addr_∑r£_brﬂdˇ°
(
π∆_addr
 *, *);

29 
∆_˛i_addr_∑r£_¥e„ºed
(
π∆_addr
 *, *);

30 
∆_˛i_addr_∑r£_vÆid
(
π∆_addr
 *, *);

	@mylibnl/libnl-3.2.25/include/netlink/cli/class.h

12 #i‚de‡
__NETLINK_CLI_CLASS_H_


13 
	#__NETLINK_CLI_CLASS_H_


	)

15 
	~<√éök/rouã/˛ass.h
>

16 
	~<√éök/˛i/tc.h
>

18 
π∆_˛ass
 *
∆_˛i_˛ass_Æloc
();

19 
∆_ˇche
 *
∆_˛i_˛ass_Æloc_ˇche
(
∆_sock
 *, );

	@mylibnl/libnl-3.2.25/include/netlink/cli/cls.h

12 #i‚de‡
__NETLINK_CLI_CLS_H_


13 
	#__NETLINK_CLI_CLS_H_


	)

15 
	~<√éök/rouã/˛assifõr.h
>

16 
	~<√éök/˛i/tc.h
>

18 
π∆_˛s
 * 
∆_˛i_˛s_Æloc
();

19 
∆_ˇche
 * 
∆_˛i_˛s_Æloc_ˇche
(
∆_sock
 *,

20 , 
uöt32_t
);

21 
∆_˛i_˛s_∑r£_¥Ÿo
(
π∆_˛s
 *, *);

22 
π∆_em©ch_åì
 *
∆_˛i_˛s_∑r£_em©ch
(
π∆_˛s
 *, *);

	@mylibnl/libnl-3.2.25/include/netlink/cli/ct.h

12 #i‚de‡
__NETLINK_CLI_CT_H_


13 
	#__NETLINK_CLI_CT_H_


	)

15 
	~<√éök/√tfûãr/˘.h
>

16 
	~<löux/√tfûãr/nf_c⁄¡øck_comm⁄.h
>

18 
n‚l_˘
 *
∆_˛i_˘_Æloc
();

19 
∆_ˇche
 *
∆_˛i_˘_Æloc_ˇche
(
∆_sock
 *);

21 
∆_˛i_˘_∑r£_Ámûy
(
n‚l_˘
 *, *);

22 
∆_˛i_˘_∑r£_¥Ÿocﬁ
(
n‚l_˘
 *, *);

23 
∆_˛i_˘_∑r£_m¨k
(
n‚l_˘
 *, *);

24 
∆_˛i_˘_∑r£_timeout
(
n‚l_˘
 *, *);

25 
∆_˛i_˘_∑r£_id
(
n‚l_˘
 *, *);

26 
∆_˛i_˘_∑r£_u£
(
n‚l_˘
 *, *);

27 
∆_˛i_˘_∑r£_§c
(
n‚l_˘
 *, , *);

28 
∆_˛i_˘_∑r£_d°
(
n‚l_˘
 *, , *);

29 
∆_˛i_˘_∑r£_§c_p‹t
(
n‚l_˘
 *, , *);

30 
∆_˛i_˘_∑r£_d°_p‹t
(
n‚l_˘
 *, , *);

31 
∆_˛i_˘_∑r£_t˝_°©e
(
n‚l_˘
 *, *);

32 
∆_˛i_˘_∑r£_°©us
(
n‚l_˘
 *, *);

33 
∆_˛i_˘_∑r£_z⁄e
(
n‚l_˘
 *, *);

	@mylibnl/libnl-3.2.25/include/netlink/cli/exp.h

13 #i‚de‡
__NETLINK_CLI_EXP_H_


14 
	#__NETLINK_CLI_EXP_H_


	)

16 
	~<√éök/√tfûãr/exp.h
>

17 
	~<löux/√tfûãr/nf_c⁄¡øck_comm⁄.h
>

19 
n‚l_exp
 *
∆_˛i_exp_Æloc
();

20 
∆_ˇche
 *
∆_˛i_exp_Æloc_ˇche
(
∆_sock
 *);

22 
∆_˛i_exp_∑r£_Ámûy
(
n‚l_exp
 *, *);

23 
∆_˛i_exp_∑r£_timeout
(
n‚l_exp
 *, *);

24 
∆_˛i_exp_∑r£_id
(
n‚l_exp
 *, *);

25 
∆_˛i_exp_∑r£_hñ≥r_«me
(
n‚l_exp
 *, *);

26 
∆_˛i_exp_∑r£_z⁄e
(
n‚l_exp
 *, *);

27 
∆_˛i_exp_∑r£_Êags
(
n‚l_exp
 *, *);

28 
∆_˛i_exp_∑r£_˛ass
(
n‚l_exp
 *, *);

29 
∆_˛i_exp_∑r£_«t_dú
(
n‚l_exp
 *, *);

30 
∆_˛i_exp_∑r£_‚
(
n‚l_exp
 *, *);

32 
∆_˛i_exp_∑r£_§c
(
n‚l_exp
 *, , *);

33 
∆_˛i_exp_∑r£_d°
(
n‚l_exp
 *, , *);

34 
∆_˛i_exp_∑r£_l4¥Ÿ⁄um
(
n‚l_exp
 *, , *);

35 
∆_˛i_exp_∑r£_§c_p‹t
(
n‚l_exp
 *, , *);

36 
∆_˛i_exp_∑r£_d°_p‹t
(
n‚l_exp
 *, , *);

37 
∆_˛i_exp_∑r£_icmp_id
(
n‚l_exp
 *, , *);

38 
∆_˛i_exp_∑r£_icmp_ty≥
(
n‚l_exp
 *, , *);

39 
∆_˛i_exp_∑r£_icmp_code
(
n‚l_exp
 *, , *);

	@mylibnl/libnl-3.2.25/include/netlink/cli/link.h

12 #i‚de‡
__NETLINK_CLI_LINK_H_


13 
	#__NETLINK_CLI_LINK_H_


	)

15 
	~<√éök/rouã/lök.h
>

16 
	~<√éök/˛i/utûs.h
>

18 
π∆_lök
 *
∆_˛i_lök_Æloc
();

19 
∆_ˇche
 *
∆_˛i_lök_Æloc_ˇche_Ámûy
(
∆_sock
 *, );

20 
∆_ˇche
 *
∆_˛i_lök_Æloc_ˇche
(
∆_sock
 *);

22 
∆_˛i_lök_∑r£_Ámûy
(
π∆_lök
 *, *);

23 
∆_˛i_lök_∑r£_«me
(
π∆_lök
 *, *);

24 
∆_˛i_lök_∑r£_mtu
(
π∆_lök
 *, *);

25 
∆_˛i_lök_∑r£_ifödex
(
π∆_lök
 *, *);

26 
∆_˛i_lök_∑r£_txqÀn
(
π∆_lök
 *, *);

27 
∆_˛i_lök_∑r£_weight
(
π∆_lök
 *, *);

28 
∆_˛i_lök_∑r£_iÁlüs
(
π∆_lök
 *, *);

	@mylibnl/libnl-3.2.25/include/netlink/cli/neigh.h

12 #i‚de‡
__NETLINK_CLI_NEIGH_H_


13 
	#__NETLINK_CLI_NEIGH_H_


	)

15 
	~<√éök/rouã/√ighbour.h
>

17 
	#∆_˛i_√igh_Æloc_ˇche
(
sk
) \

18 
	`∆_˛i_Æloc_ˇche
((
sk
), "√ighbour", 
π∆_√igh_Æloc_ˇche
)

	)

20 
π∆_√igh
 *
∆_˛i_√igh_Æloc
();

21 
∆_˛i_√igh_∑r£_d°
(
π∆_√igh
 *, *);

22 
∆_˛i_√igh_∑r£_Œaddr
(
π∆_√igh
 *, *);

23 
∆_˛i_√igh_∑r£_dev
(
π∆_√igh
 *, 
∆_ˇche
 *, *);

24 
∆_˛i_√igh_∑r£_Ámûy
(
π∆_√igh
 *, *);

25 
∆_˛i_√igh_∑r£_°©e
(
π∆_√igh
 *, *);

	@mylibnl/libnl-3.2.25/include/netlink/cli/qdisc.h

12 #i‚de‡
__NETLINK_CLI_QDISC_H_


13 
	#__NETLINK_CLI_QDISC_H_


	)

15 
	~<√éök/rouã/qdisc.h
>

17 
	#∆_˛i_qdisc_Æloc_ˇche
(
sk
) \

18 
	`∆_˛i_Æloc_ˇche
((
sk
), "queueing disciplines", \

19 
π∆_qdisc_Æloc_ˇche
)

	)

21 
π∆_qdisc
 *
∆_˛i_qdisc_Æloc
();

	@mylibnl/libnl-3.2.25/include/netlink/cli/route.h

12 #i‚de‡
__NETLINK_CLI_ROUTE_H_


13 
	#__NETLINK_CLI_ROUTE_H_


	)

15 
	~<√éök/rouã/rouã.h
>

17 
π∆_rouã
 *
∆_˛i_rouã_Æloc
();

19 
∆_ˇche
 *
∆_˛i_rouã_Æloc_ˇche
(
∆_sock
 *, );

21 
∆_˛i_rouã_∑r£_Ámûy
(
π∆_rouã
 *, *);

22 
∆_˛i_rouã_∑r£_d°
(
π∆_rouã
 *, *);

23 
∆_˛i_rouã_∑r£_§c
(
π∆_rouã
 *, *);

24 
∆_˛i_rouã_∑r£_¥ef_§c
(
π∆_rouã
 *, *);

25 
∆_˛i_rouã_∑r£_mëric
(
π∆_rouã
 *, *);

26 
∆_˛i_rouã_∑r£_√xth›
(
π∆_rouã
 *, *, 
∆_ˇche
 *);

27 
∆_˛i_rouã_∑r£_èbÀ
(
π∆_rouã
 *, *);

28 
∆_˛i_rouã_∑r£_¥io
(
π∆_rouã
 *, *);

29 
∆_˛i_rouã_∑r£_sc›e
(
π∆_rouã
 *, *);

30 
∆_˛i_rouã_∑r£_¥Ÿocﬁ
(
π∆_rouã
 *, *);

31 
∆_˛i_rouã_∑r£_ty≥
(
π∆_rouã
 *, *);

32 
∆_˛i_rouã_∑r£_iif
(
π∆_rouã
 *, *, 
∆_ˇche
 *);

	@mylibnl/libnl-3.2.25/include/netlink/cli/rule.h

12 #i‚de‡
__NETLINK_CLI_RULE_H_


13 
	#__NETLINK_CLI_RULE_H_


	)

15 
	~<√éök/rouã/ruÀ.h
>

17 
π∆_ruÀ
 *
∆_˛i_ruÀ_Æloc
();

18 
∆_ˇche
 *
∆_˛i_ruÀ_Æloc_ˇche
(
∆_sock
 *);

19 
∆_˛i_ruÀ_∑r£_Ámûy
(
π∆_ruÀ
 *, *);

	@mylibnl/libnl-3.2.25/include/netlink/cli/tc.h

12 #i‚de‡
__NETLINK_CLI_TC_H_


13 
	#__NETLINK_CLI_TC_H_


	)

15 
	~<√éök/rouã/tc.h
>

17 
	gπ∆_tc_›s
;

19 
∆_˛i_tc_∑r£_dev
(
π∆_tc
 *, 
∆_ˇche
 *, *);

20 
∆_˛i_tc_∑r£_∑ª¡
(
π∆_tc
 *, *);

21 
∆_˛i_tc_∑r£_h™dÀ
(
π∆_tc
 *, *, );

22 
∆_˛i_tc_∑r£_mtu
(
π∆_tc
 *, *);

23 
∆_˛i_tc_∑r£_mpu
(
π∆_tc
 *, *);

24 
∆_˛i_tc_∑r£_ovîhód
(
π∆_tc
 *, *);

25 
∆_˛i_tc_∑r£_lökty≥
(
π∆_tc
 *, *);

26 
∆_˛i_tc_∑r£_köd
(
π∆_tc
 *, *);

28 
	s∆_˛i_tc_moduÀ


30 c⁄° * 
	mtm_«me
;

31 
π∆_tc_ty≥
 
	mtm_ty≥
;

32 
π∆_tc_›s
 * 
	mtm_›s
;

33 (*
	mtm_∑r£_¨gv
)(
	mπ∆_tc
 *, , **);

34 
∆_li°_hód
 
	mtm_li°
;

37 
∆_˛i_tc_moduÀ
 *
∆_˛i_tc_lookup
(
π∆_tc_›s
 *);

38 
∆_˛i_tc_ªgi°î
(
∆_˛i_tc_moduÀ
 *);

39 
∆_˛i_tc_uƒegi°î
(
∆_˛i_tc_moduÀ
 *);

	@mylibnl/libnl-3.2.25/include/netlink/cli/utils.h

12 #i‚de‡
__NETLINK_CLI_UTILS_H_


13 
	#__NETLINK_CLI_UTILS_H_


	)

15 
	~<°dio.h
>

16 
	~<°rög.h
>

17 
	~<°dlib.h
>

18 
	~<°d¨g.h
>

19 
	~<limôs.h
>

20 
	~<öây≥s.h
>

21 
	~<î∫o.h
>

22 
	~<°döt.h
>

23 
	~<˘y≥.h
>

24 
	~<gë›t.h
>

25 
	~<dlf˙.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sys/sockë.h
>

29 
	~<√éök/√éök.h
>

30 
	~<√éök/utûs.h
>

31 
	~<√éök/addr.h
>

32 
	~<√éök/li°.h
>

33 
	~<√éök/rouã/π∆.h
>

34 
	~<√éök/rouã/lök.h
>

35 
	~<√éök/rouã/addr.h
>

36 
	~<√éök/rouã/√ighbour.h
>

37 
	~<√éök/rouã/√ightbl.h
>

38 
	~<√éök/rouã/rouã.h
>

39 
	~<√éök/rouã/ruÀ.h
>

40 
	~<√éök/rouã/qdisc.h
>

41 
	~<√éök/rouã/˛ass.h
>

42 
	~<√éök/rouã/˛assifõr.h
>

43 
	~<√éök/rouã/˛s/em©ch.h
>

44 
	~<√éök/fib_lookup/lookup.h
>

45 
	~<√éök/fib_lookup/ªque°.h
>

46 
	~<√éök/gíl/gíl.h
>

47 
	~<√éök/gíl/˘æ.h
>

48 
	~<√éök/gíl/mngt.h
>

49 
	~<√éök/√tfûãr/˘.h
>

51 #ifde‡
__˝lu•lus


55 #i‚de‡
__öô


56 
	#__öô
 
	`__©åibuã__
((
c⁄°ru˘‹
))

	)

59 #i‚de‡
__exô


60 
	#__exô
 
	`__©åibuã__
((
de°ru˘‹
))

	)

63 
uöt32_t
 
∆_˛i_∑r£_u32
(const *);

64 
∆_˛i_¥öt_vîsi⁄
();

65 
∆_˛i_Áèl
(, const *, ...);

66 
∆_addr
 * 
∆_˛i_addr_∑r£
(const *, );

67 
∆_˛i_c⁄√˘
(
∆_sock
 *, );

68 
∆_sock
 * 
∆_˛i_Æloc_sockë
();

69 
∆_˛i_∑r£_dum±y≥
(const *);

70 
∆_˛i_c⁄fúm
(
∆_obje˘
 *,

71 
∆_dump_∑øms
 *, );

73 
∆_ˇche
 *
∆_˛i_Æloc_ˇche
(
∆_sock
 *, const *,

74 (*
ac
)(
∆_sock
 *, 
∆_ˇche
 **));

76 
∆_˛i_lﬂd_moduÀ
(const *, const *);

78 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/data.h

12 #i‚de‡
NETLINK_DATA_H_


13 
	#NETLINK_DATA_H_


	)

15 
	~<√éök/√éök.h
>

17 #ifde‡
__˝lu•lus


21 
∆_d©a
;

24 
∆_d©a
 * 
∆_d©a_Æloc
(*, 
size_t
);

25 
∆_d©a
 * 
∆_d©a_Æloc_©å
(
∆©å
 *);

26 
∆_d©a
 * 
∆_d©a_˛⁄e
(nl_data *);

27 
∆_d©a_≠≥nd
(
∆_d©a
 *, *, 
size_t
);

28 
∆_d©a_‰ì
(
∆_d©a
 *);

31 * 
∆_d©a_gë
(
∆_d©a
 *);

32 
size_t
 
∆_d©a_gë_size
(
∆_d©a
 *);

35 
∆_d©a_cmp
(
∆_d©a
 *, nl_data *);

37 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/errno.h

12 #i‚de‡
NETLINK_ERRNO_H_


13 
	#NETLINK_ERRNO_H_


	)

15 #ifde‡
__˝lu•lus


19 
	#NLE_SUCCESS
 0

	)

20 
	#NLE_FAILURE
 1

	)

21 
	#NLE_INTR
 2

	)

22 
	#NLE_BAD_SOCK
 3

	)

23 
	#NLE_AGAIN
 4

	)

24 
	#NLE_NOMEM
 5

	)

25 
	#NLE_EXIST
 6

	)

26 
	#NLE_INVAL
 7

	)

27 
	#NLE_RANGE
 8

	)

28 
	#NLE_MSGSIZE
 9

	)

29 
	#NLE_OPNOTSUPP
 10

	)

30 
	#NLE_AF_NOSUPPORT
 11

	)

31 
	#NLE_OBJ_NOTFOUND
 12

	)

32 
	#NLE_NOATTR
 13

	)

33 
	#NLE_MISSING_ATTR
 14

	)

34 
	#NLE_AF_MISMATCH
 15

	)

35 
	#NLE_SEQ_MISMATCH
 16

	)

36 
	#NLE_MSG_OVERFLOW
 17

	)

37 
	#NLE_MSG_TRUNC
 18

	)

38 
	#NLE_NOADDR
 19

	)

39 
	#NLE_SRCRT_NOSUPPORT
 20

	)

40 
	#NLE_MSG_TOOSHORT
 21

	)

41 
	#NLE_MSGTYPE_NOSUPPORT
 22

	)

42 
	#NLE_OBJ_MISMATCH
 23

	)

43 
	#NLE_NOCACHE
 24

	)

44 
	#NLE_BUSY
 25

	)

45 
	#NLE_PROTO_MISMATCH
 26

	)

46 
	#NLE_NOACCESS
 27

	)

47 
	#NLE_PERM
 28

	)

48 
	#NLE_PKTLOC_FILE
 29

	)

49 
	#NLE_PARSE_ERR
 30

	)

50 
	#NLE_NODEV
 31

	)

51 
	#NLE_IMMUTABLE
 32

	)

52 
	#NLE_DUMP_INTR
 33

	)

54 
	#NLE_MAX
 
NLE_DUMP_INTR


	)

56 c⁄° * 
∆_gëîr‹
();

57 
∆_≥º‹
(, const *);

58 
∆_sy£º2∆îr
();

60 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/fib_lookup/lookup.h

12 #i‚de‡
NETLINK_FIB_LOOKUP_H_


13 
	#NETLINK_FIB_LOOKUP_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/ˇche.h
>

17 
	~<√éök/addr.h
>

18 
	~<√éök/fib_lookup/ªque°.h
>

20 #ifde‡
__˝lu•lus


24 
Ê∆_ªsu…
;

26 
Ê∆_ªsu…
 * 
Ê∆_ªsu…_Æloc
();

27 
Ê∆_ªsu…_put
(
Ê∆_ªsu…
 *);

29 
∆_ˇche
 * 
Ê∆_ªsu…_Æloc_ˇche
();

31 
Ê∆_lookup_buûd_ªque°
(
Ê∆_ªque°
 *,

33 
∆_msg
 **);

34 
Ê∆_lookup
(
∆_sock
 *,

35 
Ê∆_ªque°
 *,

36 
∆_ˇche
 *);

38 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/fib_lookup/request.h

12 #i‚de‡
NETLINK_FIB_LOOKUP_REQUEST_H_


13 
	#NETLINK_FIB_LOOKUP_REQUEST_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/addr.h
>

18 #ifde‡
__˝lu•lus


22 
Ê∆_ªque°
;

24 
	#REQUEST_CAST
(
±r
Ë((
Ê∆_ªque°
 *Ë’å))

	)

26 
Ê∆_ªque°
 * 
Ê∆_ªque°_Æloc
();

28 
Ê∆_ªque°_£t_fwm¨k
(
Ê∆_ªque°
 *,

29 
uöt64_t
);

30 
uöt64_t
 
Ê∆_ªque°_gë_fwm¨k
(
Ê∆_ªque°
 *);

31 
Ê∆_ªque°_£t_tos
(
Ê∆_ªque°
 *,

33 
Ê∆_ªque°_gë_tos
(
Ê∆_ªque°
 *);

34 
Ê∆_ªque°_£t_sc›e
(
Ê∆_ªque°
 *,

36 
Ê∆_ªque°_gë_sc›e
(
Ê∆_ªque°
 *);

37 
Ê∆_ªque°_£t_èbÀ
(
Ê∆_ªque°
 *,

39 
Ê∆_ªque°_gë_èbÀ
(
Ê∆_ªque°
 *);

40 
Ê∆_ªque°_£t_addr
(
Ê∆_ªque°
 *,

41 
∆_addr
 *);

42 
∆_addr
 * 
Ê∆_ªque°_gë_addr
(
Ê∆_ªque°
 *);

44 
Ê∆_ªque°_cmp
(
Ê∆_ªque°
 *,

45 
Ê∆_ªque°
 *);

47 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/genl/ctrl.h

12 #i‚de‡
NETLINK_GENL_CTRL_H_


13 
	#NETLINK_GENL_CTRL_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/ˇche.h
>

17 
	~<√éök/addr.h
>

19 #ifde‡
__˝lu•lus


23 
gíl_Ámûy
;

25 
gíl_˘æ_Æloc_ˇche
(
∆_sock
 *,

26 
∆_ˇche
 **);

27 
gíl_Ámûy
 * 
gíl_˘æ_£¨ch
(
∆_ˇche
 *, );

28 
gíl_Ámûy
 * 
gíl_˘æ_£¨ch_by_«me
(
∆_ˇche
 *,

30 
gíl_˘æ_ªsﬁve
(
∆_sock
 *,

32 
gíl_˘æ_ªsﬁve_gΩ
(
∆_sock
 *
sk
,

33 c⁄° *
Ámûy
,

34 c⁄° *
gΩ
);

36 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/genl/family.h

12 #i‚de‡
NETLINK_GENL_FAMILY_H_


13 
	#NETLINK_GENL_FAMILY_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/ˇche.h
>

18 #ifde‡
__˝lu•lus


22 
gíl_Ámûy
;

24 
gíl_Ámûy
 * 
gíl_Ámûy_Æloc
();

25 
gíl_Ámûy_put
(
gíl_Ámûy
 *);

27 
gíl_Ámûy_gë_id
(
gíl_Ámûy
 *);

28 
gíl_Ámûy_£t_id
(
gíl_Ámûy
 *, );

29 * 
gíl_Ámûy_gë_«me
(
gíl_Ámûy
 *);

30 
gíl_Ámûy_£t_«me
(
gíl_Ámûy
 *, const *);

31 
uöt8_t
 
gíl_Ámûy_gë_vîsi⁄
(
gíl_Ámûy
 *);

32 
gíl_Ámûy_£t_vîsi⁄
(
gíl_Ámûy
 *, 
uöt8_t
);

33 
uöt32_t
 
gíl_Ámûy_gë_hdrsize
(
gíl_Ámûy
 *);

34 
gíl_Ámûy_£t_hdrsize
(
gíl_Ámûy
 *, 
uöt32_t
);

35 
uöt32_t
 
gíl_Ámûy_gë_max©å
(
gíl_Ámûy
 *);

36 
gíl_Ámûy_£t_max©å
(
gíl_Ámûy
 *, 
uöt32_t
);

38 
gíl_Ámûy_add_›
(
gíl_Ámûy
 *, , );

39 
gíl_Ámûy_add_gΩ
(
gíl_Ámûy
 *, 
uöt32_t
 ,

43 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/genl/genl.h

12 #i‚de‡
NETLINK_GENL_H_


13 
	#NETLINK_GENL_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/msg.h
>

17 
	~<√éök/©å.h
>

19 #ifde‡
__˝lu•lus


23 
gíl_c⁄√˘
(
∆_sock
 *);

24 
gíl_£nd_sim∂e
(
∆_sock
 *, , ,

27 * 
gílmsg_put
(
∆_msg
 *, 
uöt32_t
, uint32_t,

28 , , , 
uöt8_t
, uint8_t);

30 
gílmsg_vÆid_hdr
(
∆msghdr
 *, );

31 
gílmsg_vÆid©e
(
∆msghdr
 *, , ,

32 
∆a_pﬁicy
 *);

33 
gílmsg_∑r£
(
∆msghdr
 *, , 
∆©å
 **,

34 , 
∆a_pﬁicy
 *);

35 
gílmsghdr
 *

36 
gílmsg_hdr
(
∆msghdr
 *);

37 * 
gílmsg_d©a
(c⁄° 
gílmsghdr
 *);

38 * 
gílmsg_u£r_hdr
(c⁄° 
gílmsghdr
 *);

39 * 
gílmsg_u£r_d©a
(c⁄° 
gílmsghdr
 *, const );

40 
gílmsg_u£r_d©Æí
(c⁄° 
gílmsghdr
 *,

42 
gílmsg_Àn
(c⁄° 
gílmsghdr
 *);

43 
∆©å
 * 
gílmsg_©åd©a
(c⁄° 
gílmsghdr
 *, );

44 
gílmsg_©åÀn
(c⁄° 
gílmsghdr
 *, );

46 * 
gíl_›2«me
(, , *, 
size_t
);

48 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/genl/mngt.h

12 #i‚de‡
NETLINK_GENL_MNGT_H_


13 
	#NETLINK_GENL_MNGT_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/©å.h
>

17 
	~<√éök/li°.h
>

19 #ifde‡
__˝lu•lus


23 
∆_ˇche_›s
;

37 
	sgíl_öfo


40 
sockaddr_∆
 * 
who
;

43 
∆msghdr
 * 
∆h
;

46 
gílmsghdr
 * 
gílhdr
;

49 * 
u£rhdr
;

52 
∆©å
 ** 
©ås
;

87 
	sgíl_cmd


90 
c_id
;

93 * 
c_«me
;

96 
c_max©å
;

99 (*
c_msg_∑r£r
)(
∆_ˇche_›s
 *,

100 
gíl_cmd
 *,

101 
gíl_öfo
 *, *);

104 
∆a_pﬁicy
 * 
c_©å_pﬁicy
;

132 
	sgíl_›s


135 
o_hdrsize
;

138 
o_id
;

141 * 
o_«me
;

147 
∆_ˇche_›s
 * 
o_ˇche_›s
;

150 
gíl_cmd
 * 
o_cmds
;

153 
o_ncmds
;

159 
∆_li°_hód
 
o_li°
;

162 
gíl_ªgi°î_Ámûy
(
gíl_›s
 *);

163 
gíl_uƒegi°î_Ámûy
(
gíl_›s
 *);

164 
gíl_h™dÀ_msg
(
∆_msg
 *, *);

166 
gíl_ªgi°î
(
∆_ˇche_›s
 *);

167 
gíl_uƒegi°î
(
∆_ˇche_›s
 *);

169 
gíl_›s_ªsﬁve
(
∆_sock
 *, 
gíl_›s
 *);

170 
gíl_mngt_ªsﬁve
(
∆_sock
 *);

172 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/handlers.h

12 #i‚de‡
NETLINK_HANDLERS_H_


13 
	#NETLINK_HANDLERS_H_


	)

15 
	~<°dio.h
>

16 
	~<°döt.h
>

17 
	~<sys/ty≥s.h
>

18 
	~<√éök/√éök-com∑t.h
>

19 
	~<√éök/√éök-kî√l.h
>

21 #ifde‡
__˝lu•lus


25 
∆_cb
;

26 
∆_sock
;

27 
∆_msg
;

28 
u¸ed
;

41 (*
∆_ªcvmsg_msg_cb_t
)(
	t∆_msg
 *
	tmsg
, *
	t¨g
);

50 (*
∆_ªcvmsg_îr_cb_t
)(
	tsockaddr_∆
 *
	t∆a
,

51 
	t∆msgîr
 *
	t∆îr
, *
	t¨g
);

59 
	e∆_cb_a˘i⁄
 {

61 
NL_OK
,

63 
NL_SKIP
,

65 
NL_STOP
,

72 
	e∆_cb_köd
 {

74 
NL_CB_DEFAULT
,

76 
NL_CB_VERBOSE
,

78 
NL_CB_DEBUG
,

80 
NL_CB_CUSTOM
,

81 
__NL_CB_KIND_MAX
,

84 
	#NL_CB_KIND_MAX
 (
__NL_CB_KIND_MAX
 - 1)

	)

90 
	e∆_cb_ty≥
 {

92 
NL_CB_VALID
,

94 
NL_CB_FINISH
,

96 
NL_CB_OVERRUN
,

98 
NL_CB_SKIPPED
,

100 
NL_CB_ACK
,

102 
NL_CB_MSG_IN
,

104 
NL_CB_MSG_OUT
,

106 
NL_CB_INVALID
,

108 
NL_CB_SEQ_CHECK
,

110 
NL_CB_SEND_ACK
,

112 
NL_CB_DUMP_INTR
,

113 
__NL_CB_TYPE_MAX
,

116 
	#NL_CB_TYPE_MAX
 (
__NL_CB_TYPE_MAX
 - 1)

	)

118 
∆_cb
 * 
∆_cb_Æloc
(
∆_cb_köd
);

119 
∆_cb
 * 
∆_cb_˛⁄e
(nl_cb *);

120 
∆_cb
 * 
∆_cb_gë
(nl_cb *);

121 
∆_cb_put
(
∆_cb
 *);

123 
∆_cb_£t
(
∆_cb
 *, 
∆_cb_ty≥
, 
∆_cb_köd
,

124 
∆_ªcvmsg_msg_cb_t
, *);

125 
∆_cb_£t_Æl
(
∆_cb
 *, 
∆_cb_köd
,

126 
∆_ªcvmsg_msg_cb_t
, *);

127 
∆_cb_îr
(
∆_cb
 *, 
∆_cb_köd
, 
∆_ªcvmsg_îr_cb_t
,

130 
∆_cb_ovîwrôe_ªcvmsgs
(
∆_cb
 *,

131 (*
func
)(
∆_sock
 *,

132 
∆_cb
 *));

133 
∆_cb_ovîwrôe_ªcv
(
∆_cb
 *,

134 (*
func
)(
∆_sock
 *,

135 
sockaddr_∆
 *,

137 
u¸ed
 **));

138 
∆_cb_ovîwrôe_£nd
(
∆_cb
 *,

139 (*
func
)(
∆_sock
 *,

140 
∆_msg
 *));

142 
∆_cb_ty≥
 
∆_cb_a˘ive_ty≥
(
∆_cb
 *
cb
);

144 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/hash.h

6 #i‚de‡
CCAN_HASH_H


7 
	#CCAN_HASH_H


	)

8 
	~<°döt.h
>

9 
	~<°dlib.h
>

10 
	~<ídün.h
>

17 #ifde‡
__LITTLE_ENDIAN


18 
	#HAVE_LITTLE_ENDIAN
 1

	)

19 #ñi‡
__BIG_ENDIAN


20 
	#HAVE_BIG_ENDIAN
 1

	)

22 #îr‹ 
Unknown
 
ídü¬ess
. 
Faûuª
 
ö
 
ídün
.
h


64 
	#__∆_hash
(
p
, 
num
, 
ba£
Ë
	`∆_hash_™y
(’), (num)*(*’)), (ba£))

	)

67 
uöt32_t
 
∆_hash_™y
(c⁄° *
key
, 
size_t
 
Àngth
, uöt32_à
ba£
);

	@mylibnl/libnl-3.2.25/include/netlink/hashtable.h

12 #i‚de‡
NETLINK_HASHTABLE_H_


13 
	#NETLINK_HASHTABLE_H_


	)

15 #ifde‡
__˝lu•lus


19 
	s∆_hash_node
 {

20 
uöt32_t
 
key
;

21 
uöt32_t
 
key_size
;

22 
∆_obje˘
 * 
obj
;

23 
∆_hash_node
 * 
√xt
;

24 } 
	t∆_hash_node_t
;

26 
	s∆_hash_èbÀ
 {

27 
size
;

28 
∆_hash_node_t
 ** 
nodes
;

29 } 
	t∆_hash_èbÀ_t
;

32 
	#NL_MAX_HASH_ENTRIES
 1024

	)

35 
∆_hash_èbÀ_t
 * 
∆_hash_èbÀ_Æloc
(
size
);

36 
∆_hash_èbÀ_‰ì
(
∆_hash_èbÀ_t
 *
ht
);

38 
∆_hash_èbÀ_add
(
∆_hash_èbÀ_t
 *
ht
,

39 
∆_obje˘
 *
obj
);

40 
∆_hash_èbÀ_dñ
(
∆_hash_èbÀ_t
 *
ht
,

41 
∆_obje˘
 *
obj
);

43 
∆_obje˘
 * 
∆_hash_èbÀ_lookup
(
∆_hash_èbÀ_t
 *
ht
,

44 
∆_obje˘
 *
obj
);

45 
uöt32_t
 
∆_hash
(*
k
, 
size_t
 
Àngth
,

46 
uöt32_t
 
öôvÆ
);

48 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/idiag/idiagnl.h

12 #i‚de‡
NETLINK_IDIAGNL_H_


13 
	#NETLINK_IDIAGNL_H_


	)

15 
	~<√éök/√éök.h
>

17 #ifde‡
__˝lu•lus


24 
	#IDIAG_TCPDIAG_GETSOCK
 18

	)

25 
	#IDIAG_DCCPDIAG_GETSOCK
 19

	)

26 
	#IDIAG_GETSOCK_MAX
 24

	)

33 
IDIAG_SS_UNKNOWN
,

34 
IDIAG_SS_ESTABLISHED
,

35 
IDIAG_SS_SYN_SENT
,

36 
IDIAG_SS_SYN_RECV
,

37 
IDIAG_SS_FIN_WAIT1
,

38 
IDIAG_SS_FIN_WAIT2
,

39 
IDIAG_SS_TIME_WAIT
,

40 
IDIAG_SS_CLOSE
,

41 
IDIAG_SS_CLOSE_WAIT
,

42 
IDIAG_SS_LAST_ACK
,

43 
IDIAG_SS_LISTEN
,

44 
IDIAG_SS_CLOSING
,

45 
IDIAG_SS_MAX


52 
	#IDIAG_SS_ALL
 ((1<<
IDIAG_SS_MAX
)-1)

	)

59 
IDIAG_ATTR_NONE
,

60 
IDIAG_ATTR_MEMINFO
,

61 
IDIAG_ATTR_INFO
,

62 
IDIAG_ATTR_VEGASINFO
,

63 
IDIAG_ATTR_CONG
,

64 
IDIAG_ATTR_TOS
,

65 
IDIAG_ATTR_TCLASS
,

66 
IDIAG_ATTR_SKMEMINFO
,

67 
IDIAG_ATTR_SHUTDOWN
,

68 
IDIAG_ATTR_MAX
,

75 
	#IDIAG_ATTR_ALL
 ((1<<
IDIAG_ATTR_MAX
)-1)

	)

82 
IDIAG_SK_MEMINFO_RMEM_ALLOC
,

83 
IDIAG_SK_MEMINFO_RCVBUF
,

84 
IDIAG_SK_MEMINFO_WMEM_ALLOC
,

85 
IDIAG_SK_MEMINFO_SNDBUF
,

86 
IDIAG_SK_MEMINFO_FWD_ALLOC
,

87 
IDIAG_SK_MEMINFO_WMEM_QUEUED
,

88 
IDIAG_SK_MEMINFO_OPTMEM
,

89 
IDIAG_SK_MEMINFO_BACKLOG
,

91 
IDIAG_SK_MEMINFO_VARS
,

99 
IDIAG_TIMER_OFF
,

100 
IDIAG_TIMER_ON
,

101 
IDIAG_TIMER_KEEPALIVE
,

102 
IDIAG_TIMER_TIMEWAIT
,

103 
IDIAG_TIMER_PERSIST
,

104 
IDIAG_TIMER_UNKNOWN
,

107 * 
idüg∆_°©e2°r
(, *, 
size_t
);

108 
idüg∆_°r2°©e
(const *);

110 
idüg∆_c⁄√˘
(
∆_sock
 *);

111 
idüg∆_£nd_sim∂e
(
∆_sock
 *, , 
uöt8_t
, 
uöt16_t
,

112 
uöt16_t
);

114 * 
idüg∆_timî2°r
(, *, 
size_t
);

115 
idüg∆_°r2timî
(const *);

116 * 
idüg∆_©ås2°r
(, *, 
size_t
);

117 * 
idüg∆_t˝°©e2°r
(
uöt8_t
, *, 
size_t
);

118 * 
idüg∆_t˝›ts2°r
(
uöt8_t
, *, 
size_t
);

119 * 
idüg∆_shutdown2°r
(
uöt8_t
, *, 
size_t
);

120 * 
idüg∆_exts2°r
(
uöt8_t
, *, 
size_t
);

122 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/idiag/meminfo.h

12 #i‚de‡
NETLINK_IDIAGNL_MEMINFO_H_


13 
	#NETLINK_IDIAGNL_MEMINFO_H_


	)

15 
	~<√éök/√éök.h
>

17 #ifde‡
__˝lu•lus


21 
∆_obje˘_›s
 
idüg∆_memöfo_obj_›s
;

23 
idüg∆_memöfo
 *
idüg∆_memöfo_Æloc
();

24 
idüg∆_memöfo_gë
(
idüg∆_memöfo
 *);

25 
idüg∆_memöfo_put
(
idüg∆_memöfo
 *);

27 
uöt32_t
 
idüg∆_memöfo_gë_rmem
(c⁄° 
idüg∆_memöfo
 *);

28 
uöt32_t
 
idüg∆_memöfo_gë_wmem
(c⁄° 
idüg∆_memöfo
 *);

29 
uöt32_t
 
idüg∆_memöfo_gë_fmem
(c⁄° 
idüg∆_memöfo
 *);

30 
uöt32_t
 
idüg∆_memöfo_gë_tmem
(c⁄° 
idüg∆_memöfo
 *);

32 
idüg∆_memöfo_£t_rmem
(
idüg∆_memöfo
 *, 
uöt32_t
);

33 
idüg∆_memöfo_£t_wmem
(
idüg∆_memöfo
 *, 
uöt32_t
);

34 
idüg∆_memöfo_£t_fmem
(
idüg∆_memöfo
 *, 
uöt32_t
);

35 
idüg∆_memöfo_£t_tmem
(
idüg∆_memöfo
 *, 
uöt32_t
);

37 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/idiag/msg.h

12 #i‚de‡
NETLINK_IDIAGNL_MSG_H_


13 
	#NETLINK_IDIAGNL_MSG_H_


	)

15 
	~<√éök/√éök.h
>

17 #ifde‡
__˝lu•lus


21 
idüg∆_msg
;

22 
∆_obje˘_›s
 
idüg∆_msg_obj_›s
;

24 
idüg∆_msg
 * 
idüg∆_msg_Æloc
();

25 
idüg∆_msg_Æloc_ˇche
(
∆_sock
 *, , ,

26 
∆_ˇche
**);

27 
idüg∆_msg_gë
(
idüg∆_msg
 *);

28 
idüg∆_msg_put
(
idüg∆_msg
 *);

29 
uöt8_t
 
idüg∆_msg_gë_Ámûy
(c⁄° 
idüg∆_msg
 *);

30 
idüg∆_msg_£t_Ámûy
(
idüg∆_msg
 *, 
uöt8_t
);

31 
uöt8_t
 
idüg∆_msg_gë_°©e
(c⁄° 
idüg∆_msg
 *);

32 
idüg∆_msg_£t_°©e
(
idüg∆_msg
 *, 
uöt8_t
);

33 
uöt8_t
 
idüg∆_msg_gë_timî
(c⁄° 
idüg∆_msg
 *);

34 
idüg∆_msg_£t_timî
(
idüg∆_msg
 *, 
uöt8_t
);

35 
uöt8_t
 
idüg∆_msg_gë_ªå™s
(c⁄° 
idüg∆_msg
 *);

36 
idüg∆_msg_£t_ªå™s
(
idüg∆_msg
 *, 
uöt8_t
);

37 
uöt16_t
 
idüg∆_msg_gë_•‹t
(
idüg∆_msg
 *);

38 
idüg∆_msg_£t_•‹t
(
idüg∆_msg
 *, 
uöt16_t
);

39 
uöt16_t
 
idüg∆_msg_gë_dp‹t
(
idüg∆_msg
 *);

40 
idüg∆_msg_£t_dp‹t
(
idüg∆_msg
 *, 
uöt16_t
);

41 
∆_addr
 * 
idüg∆_msg_gë_§c
(c⁄° 
idüg∆_msg
 *);

42 
idüg∆_msg_£t_§c
(
idüg∆_msg
 *,

43 
∆_addr
 *);

44 
∆_addr
 * 
idüg∆_msg_gë_d°
(c⁄° 
idüg∆_msg
 *);

45 
idüg∆_msg_£t_d°
(
idüg∆_msg
 *,

46 
∆_addr
 *);

47 
uöt32_t
 
idüg∆_msg_gë_ifödex
(c⁄° 
idüg∆_msg
 *);

48 
idüg∆_msg_£t_ifödex
(
idüg∆_msg
 *, 
uöt32_t
);

49 
uöt32_t
 
idüg∆_msg_gë_expúes
(c⁄° 
idüg∆_msg
 *);

50 
idüg∆_msg_£t_expúes
(
idüg∆_msg
 *, 
uöt32_t
);

51 
uöt32_t
 
idüg∆_msg_gë_rqueue
(c⁄° 
idüg∆_msg
 *);

52 
idüg∆_msg_£t_rqueue
(
idüg∆_msg
 *, 
uöt32_t
);

53 
uöt32_t
 
idüg∆_msg_gë_wqueue
(c⁄° 
idüg∆_msg
 *);

54 
idüg∆_msg_£t_wqueue
(
idüg∆_msg
 *, 
uöt32_t
);

55 
uöt32_t
 
idüg∆_msg_gë_uid
(c⁄° 
idüg∆_msg
 *);

56 
idüg∆_msg_£t_uid
(
idüg∆_msg
 *, 
uöt32_t
);

57 
uöt32_t
 
idüg∆_msg_gë_öode
(c⁄° 
idüg∆_msg
 *);

58 
idüg∆_msg_£t_öode
(
idüg∆_msg
 *, 
uöt32_t
);

59 
uöt8_t
 
idüg∆_msg_gë_tos
(c⁄° 
idüg∆_msg
 *);

60 
idüg∆_msg_£t_tos
(
idüg∆_msg
 *, 
uöt8_t
);

61 
uöt8_t
 
idüg∆_msg_gë_t˛ass
(c⁄° 
idüg∆_msg
 *);

62 
idüg∆_msg_£t_t˛ass
(
idüg∆_msg
 *, 
uöt8_t
);

63 
uöt8_t
 
idüg∆_msg_gë_shutdown
(c⁄° 
idüg∆_msg
 *);

64 
idüg∆_msg_£t_shutdown
(
idüg∆_msg
 *, 
uöt8_t
);

65 * 
idüg∆_msg_gë_c⁄g
(c⁄° 
idüg∆_msg
 *);

66 
idüg∆_msg_£t_c⁄g
(
idüg∆_msg
 *, *);

67 
idüg∆_memöfo
 *
idüg∆_msg_gë_memöfo
(c⁄° 
idüg∆_msg
 *);

68 
idüg∆_msg_£t_memöfo
(
idüg∆_msg
 *,

69 
idüg∆_memöfo
 *);

70 
idüg∆_vegasöfo
 *
idüg∆_msg_gë_vegasöfo
(c⁄° 
idüg∆_msg
 *);

71 
idüg∆_msg_£t_vegasöfo
(
idüg∆_msg
 *,

72 
idüg∆_vegasöfo
 *);

73 
t˝_öfo
 
idüg∆_msg_gë_t˝öfo
(c⁄° 
idüg∆_msg
 *);

74 
idüg∆_msg_£t_t˝öfo
(
idüg∆_msg
 *,

75 
t˝_öfo
 *);

77 
idüg∆_msg_∑r£
(
∆msghdr
 *,

78 
idüg∆_msg
 **);

79 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/idiag/req.h

12 #i‚de‡
NETLINK_IDIAGNL_REQ_H_


13 
	#NETLINK_IDIAGNL_REQ_H_


	)

15 
	~<√éök/√éök.h
>

17 #ifde‡
__˝lu•lus


21 
idüg∆_ªq
;

22 
∆_obje˘_›s
 
idüg∆_ªq_obj_›s
;

24 
idüg∆_ªq
 * 
idüg∆_ªq_Æloc
();

25 
idüg∆_ªq_gë
(
idüg∆_ªq
 *);

26 
idüg∆_ªq_put
(
idüg∆_ªq
 *);

27 
uöt8_t
 
idüg∆_ªq_gë_Ámûy
(c⁄° 
idüg∆_ªq
 *);

28 
idüg∆_ªq_£t_Ámûy
(
idüg∆_ªq
 *,

29 
uöt8_t
);

30 
uöt8_t
 
idüg∆_ªq_gë_ext
(c⁄° 
idüg∆_ªq
 *);

31 
idüg∆_ªq_£t_ext
(
idüg∆_ªq
 *, 
uöt8_t
);

32 
uöt32_t
 
idüg∆_ªq_gë_ifödex
(c⁄° 
idüg∆_ªq
 *);

33 
idüg∆_ªq_£t_ifödex
(
idüg∆_ªq
 *,

34 
uöt32_t
);

35 
uöt32_t
 
idüg∆_ªq_gë_°©es
(c⁄° 
idüg∆_ªq
 *);

36 
idüg∆_ªq_£t_°©es
(
idüg∆_ªq
 *,

37 
uöt32_t
);

38 
uöt32_t
 
idüg∆_ªq_gë_dbs
(c⁄° 
idüg∆_ªq
 *);

39 
idüg∆_ªq_£t_dbs
(
idüg∆_ªq
 *, 
uöt32_t
);

40 
∆_addr
 * 
idüg∆_ªq_gë_§c
(c⁄° 
idüg∆_ªq
 *);

41 
idüg∆_ªq_£t_§c
(
idüg∆_ªq
 *,

42 
∆_addr
 *);

43 
∆_addr
 * 
idüg∆_ªq_gë_d°
(c⁄° 
idüg∆_ªq
 *);

44 
idüg∆_ªq_£t_d°
(
idüg∆_ªq
 *,

45 
∆_addr
 *);

46 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/idiag/vegasinfo.h

12 #i‚de‡
NETLINK_IDIAGNL_VEGASINFO_H_


13 
	#NETLINK_IDIAGNL_VEGASINFO_H_


	)

15 
	~<√éök/√éök.h
>

17 #ifde‡
__˝lu•lus


21 
∆_obje˘_›s
 
idüg∆_vegasöfo_obj_›s
;

22 
idüg∆_vegasöfo
 * 
idüg∆_vegasöfo_Æloc
();

23 
idüg∆_vegasöfo_gë
(
idüg∆_vegasöfo
 *);

24 
idüg∆_vegasöfo_put
(
idüg∆_vegasöfo
 *);

26 
uöt32_t
 
idüg∆_vegasöfo_gë_íabÀd
(c⁄° 
idüg∆_vegasöfo
 *);

27 
uöt32_t
 
idüg∆_vegasöfo_gë_πt˙t
(c⁄° 
idüg∆_vegasöfo
 *);

28 
uöt32_t
 
idüg∆_vegasöfo_gë_πt
(c⁄° 
idüg∆_vegasöfo
 *);

29 
uöt32_t
 
idüg∆_vegasöfo_gë_möπt
(c⁄° 
idüg∆_vegasöfo
 *);

31 
idüg∆_vegasöfo_£t_íabÀd
(
idüg∆_vegasöfo
 *,

32 
uöt32_t
);

33 
idüg∆_vegasöfo_£t_πt˙t
(
idüg∆_vegasöfo
 *,

34 
uöt32_t
);

35 
idüg∆_vegasöfo_£t_πt
(
idüg∆_vegasöfo
 *, 
uöt32_t
);

36 
idüg∆_vegasöfo_£t_möπt
(
idüg∆_vegasöfo
 *,

37 
uöt32_t
);

39 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/list.h

12 #i‚de‡
NETLINK_LIST_H_


13 
	#NETLINK_LIST_H_


	)

15 
	s∆_li°_hód


17 
∆_li°_hód
 * 
	m√xt
;

18 
∆_li°_hód
 * 
	m¥ev
;

21 
ölöe
 
	$NL_INIT_LIST_HEAD
(
∆_li°_hód
 *
li°
)

23 
li°
->
√xt
 =Üist;

24 
li°
->
¥ev
 =Üist;

25 
	}
}

27 
ölöe
 
	$__∆_li°_add
(
∆_li°_hód
 *
obj
,

28 
∆_li°_hód
 *
¥ev
,

29 
∆_li°_hód
 *
√xt
)

31 
¥ev
->
√xt
 = 
obj
;

32 
obj
->
¥ev
 =Örev;

33 
√xt
->
¥ev
 = 
obj
;

34 
obj
->
√xt
 =Çext;

35 
	}
}

37 
ölöe
 
	$∆_li°_add_èû
(
∆_li°_hód
 *
obj
,

38 
∆_li°_hód
 *
hód
)

40 
	`__∆_li°_add
(
obj
, 
hód
->
¥ev
, head);

41 
	}
}

43 
ölöe
 
	$∆_li°_add_hód
(
∆_li°_hód
 *
obj
,

44 
∆_li°_hód
 *
hód
)

46 
	`__∆_li°_add
(
obj
, 
hód
, hód->
√xt
);

47 
	}
}

49 
ölöe
 
	$∆_li°_dñ
(
∆_li°_hód
 *
obj
)

51 
obj
->
√xt
->
¥ev
 = obj->prev;

52 
obj
->
¥ev
->
√xt
 = obj->next;

53 
	}
}

55 
ölöe
 
	$∆_li°_em±y
(
∆_li°_hód
 *
hód
)

57  
hód
->
√xt
 == head;

58 
	}
}

60 
	#∆_c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ({ \

61 c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

62 (
ty≥
 *)–(*)
__m±r
 - ((
size_t
Ë&(—y≥ *)0)->
membî
));})

	)

64 
	#∆_li°_íåy
(
±r
, 
ty≥
, 
membî
) \

65 
	`∆_c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

67 
	#∆_li°_©_èû
(
pos
, 
hód
, 
membî
) \

68 ((
pos
)->
membî
.
√xt
 =(
hód
))

	)

70 
	#∆_li°_©_hód
(
pos
, 
hód
, 
membî
) \

71 ((
pos
)->
membî
.
¥ev
 =(
hód
))

	)

73 
	#NL_LIST_HEAD
(
«me
) \

74 
∆_li°_hód
 
«me
 = { &“ame), &“ameË}

	)

76 
	#∆_li°_fú°_íåy
(
hód
, 
ty≥
, 
membî
) \

77 
	`∆_li°_íåy
((
hód
)->
√xt
, 
ty≥
, 
membî
)

	)

79 
	#∆_li°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

80 
pos
 = 
	`∆_li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
); \

81 &(
pos
)->
membî
 !(
hód
); \

82 (
pos
Ë
	`∆_li°_íåy
(’os)->
membî
.
√xt
, 
	`ty≥of
(*’os)), membî))

	)

84 
	#∆_li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
membî
) \

85 
pos
 = 
	`∆_li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
), \

86 
n
 = 
	`∆_li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

87 &(
pos
)->
membî
 !(
hód
); \

88 
pos
 = 
n
,Ç = 
	`∆_li°_íåy
“->
membî
.
√xt
, 
	`ty≥of
(*n), membî))

	)

90 
	#∆_öô_li°_hód
(
hód
) \

91 dÿ{ (
hód
)->
√xt
 = (hód); (hód)->
¥ev
 = (hód); } 0)

	)

	@mylibnl/libnl-3.2.25/include/netlink/msg.h

12 #i‚de‡
NETLINK_MSG_H_


13 
	#NETLINK_MSG_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/obje˘.h
>

17 
	~<√éök/©å.h
>

19 #ifde‡
__˝lu•lus


23 
	#NL_DONTPAD
 0

	)

33 
	#NL_AUTO_PORT
 0

	)

34 
	#NL_AUTO_PID
 
NL_AUTO_PORT


	)

44 
	#NL_AUTO_SEQ
 0

	)

46 
∆_msg
;

47 
∆_åì
;

48 
u¸ed
;

50 
∆msg_size
();

51 
∆msg_tŸÆ_size
();

52 
∆msg_∑dÀn
();

54 * 
∆msg_d©a
(c⁄° 
∆msghdr
 *);

55 
∆msg_d©Æí
(c⁄° 
∆msghdr
 *);

56 * 
∆msg_èû
(c⁄° 
∆msghdr
 *);

59 
∆©å
 * 
∆msg_©åd©a
(c⁄° 
∆msghdr
 *, );

60 
∆msg_©åÀn
(c⁄° 
∆msghdr
 *, );

63 
∆msg_vÆid_hdr
(c⁄° 
∆msghdr
 *, );

64 
∆msg_ok
(c⁄° 
∆msghdr
 *, );

65 
∆msghdr
 * 
∆msg_√xt
(nlmsghdr *, *);

66 
∆msg_∑r£
(
∆msghdr
 *, , 
∆©å
 **,

67 , 
∆a_pﬁicy
 *);

68 
∆©å
 * 
∆msg_föd_©å
(
∆msghdr
 *, , );

69 
∆msg_vÆid©e
(
∆msghdr
 *, , ,

70 
∆a_pﬁicy
 *);

72 
∆_msg
 * 
∆msg_Æloc
();

73 
∆_msg
 * 
∆msg_Æloc_size
(
size_t
);

74 
∆_msg
 * 
∆msg_Æloc_sim∂e
(, );

75 
∆msg_£t_deÁu…_size
(
size_t
);

76 
∆_msg
 * 
∆msg_öhîô
(
∆msghdr
 *);

77 
∆_msg
 * 
∆msg_c⁄vît
(
∆msghdr
 *);

78 * 
∆msg_ª£rve
(
∆_msg
 *, 
size_t
, );

79 
∆msg_≠≥nd
(
∆_msg
 *, *, 
size_t
, );

80 
∆msg_ex∑nd
(
∆_msg
 *, 
size_t
);

82 
∆msghdr
 * 
∆msg_put
(
∆_msg
 *, 
uöt32_t
, uint32_t,

84 
∆msghdr
 * 
∆msg_hdr
(
∆_msg
 *);

85 
∆msg_gë
(
∆_msg
 *);

86 
∆msg_‰ì
(
∆_msg
 *);

89 
∆msg_£t_¥Ÿo
(
∆_msg
 *, );

90 
∆msg_gë_¥Ÿo
(
∆_msg
 *);

91 
size_t
 
∆msg_gë_max_size
(
∆_msg
 *);

92 
∆msg_£t_§c
(
∆_msg
 *, 
sockaddr_∆
 *);

93 
sockaddr_∆
 *
∆msg_gë_§c
(
∆_msg
 *);

94 
∆msg_£t_d°
(
∆_msg
 *, 
sockaddr_∆
 *);

95 
sockaddr_∆
 *
∆msg_gë_d°
(
∆_msg
 *);

96 
∆msg_£t_¸eds
(
∆_msg
 *, 
u¸ed
 *);

97 
u¸ed
 * 
∆msg_gë_¸eds
(
∆_msg
 *);

99 * 
∆_∆msgty≥2°r
(, *, 
size_t
);

100 
∆_°r2∆msgty≥
(const *);

102 * 
∆_∆msg_Êags2°r
(, *, 
size_t
);

104 
∆_msg_∑r£
(
∆_msg
 *,

105 (*
cb
)(
∆_obje˘
 *, *),

108 
∆_msg_dump
(
∆_msg
 *, 
FILE
 *);

123 
	#∆msg_f‹_óch_©å
(
pos
, 
∆h
, 
hdæí
, 
ªm
) \

124 
	`∆a_f‹_óch_©å
(
pos
, 
	`∆msg_©åd©a
(
∆h
, 
hdæí
), \

125 
	`∆msg_©åÀn
(
∆h
, 
hdæí
), 
ªm
)

	)

133 
	#∆msg_f‹_óch
(
pos
, 
hód
, 
Àn
) \

134 
ªm
 = 
Àn
, 
pos
 = 
hód
; \

135 
	`∆msg_ok
(
pos
, 
ªm
); \

136 
pos
 = 
	`∆msg_√xt
’os, &
ªm
))

	)

138 
	#∆msg_f‹_óch_msg
(
pos
, 
hód
, 
Àn
, 
ªm
) \

139 
	`∆msg_f‹_óch
(
pos
, 
hód
, 
Àn
)

	)

143 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/netfilter/ct.h

14 #i‚de‡
NETLINK_CT_H_


15 
	#NETLINK_CT_H_


	)

17 
	~<√éök/√éök.h
>

18 
	~<√éök/addr.h
>

19 
	~<√éök/ˇche.h
>

20 
	~<√éök/msg.h
>

22 #ifde‡
__˝lu•lus


26 
n‚l_˘
;

28 
	sn‚l_˘_time°amp
 {

29 
uöt64_t
 
°¨t
;

30 
uöt64_t
 
°›
;

33 
∆_obje˘_›s
 
˘_obj_›s
;

35 
n‚l_˘
 * 
n‚l_˘_Æloc
();

36 
n‚l_˘_Æloc_ˇche
(
∆_sock
 *, 
∆_ˇche
 **);

38 
n‚lmsg_˘_group
(
∆msghdr
 *);

39 
n‚lmsg_˘_∑r£
(
∆msghdr
 *, 
n‚l_˘
 **);

41 
n‚l_˘_gë
(
n‚l_˘
 *);

42 
n‚l_˘_put
(
n‚l_˘
 *);

44 
n‚l_˘_dump_ªque°
(
∆_sock
 *);

46 
n‚l_˘_buûd_add_ªque°
(c⁄° 
n‚l_˘
 *, ,

47 
∆_msg
 **);

48 
n‚l_˘_add
(
∆_sock
 *, c⁄° 
n‚l_˘
 *, );

50 
n‚l_˘_buûd_dñëe_ªque°
(c⁄° 
n‚l_˘
 *, ,

51 
∆_msg
 **);

52 
n‚l_˘_dñ
(
∆_sock
 *, c⁄° 
n‚l_˘
 *, );

54 
n‚l_˘_buûd_quîy_ªque°
(c⁄° 
n‚l_˘
 *, ,

55 
∆_msg
 **);

56 
n‚l_˘_quîy
(
∆_sock
 *, c⁄° 
n‚l_˘
 *, );

58 
n‚l_˘_£t_Ámûy
(
n‚l_˘
 *, 
uöt8_t
);

59 
uöt8_t
 
n‚l_˘_gë_Ámûy
(c⁄° 
n‚l_˘
 *);

61 
n‚l_˘_£t_¥Ÿo
(
n‚l_˘
 *, 
uöt8_t
);

62 
n‚l_˘_ã°_¥Ÿo
(c⁄° 
n‚l_˘
 *);

63 
uöt8_t
 
n‚l_˘_gë_¥Ÿo
(c⁄° 
n‚l_˘
 *);

65 
n‚l_˘_£t_t˝_°©e
(
n‚l_˘
 *, 
uöt8_t
);

66 
n‚l_˘_ã°_t˝_°©e
(c⁄° 
n‚l_˘
 *);

67 
uöt8_t
 
n‚l_˘_gë_t˝_°©e
(c⁄° 
n‚l_˘
 *);

68 * 
n‚l_˘_t˝_°©e2°r
(
uöt8_t
, *, 
size_t
);

69 
n‚l_˘_°r2t˝_°©e
(c⁄° *
«me
);

71 
n‚l_˘_£t_°©us
(
n‚l_˘
 *, 
uöt32_t
);

72 
n‚l_˘_un£t_°©us
(
n‚l_˘
 *, 
uöt32_t
);

73 
n‚l_˘_ã°_°©us
(c⁄° 
n‚l_˘
 *
˘
);

74 
uöt32_t
 
n‚l_˘_gë_°©us
(c⁄° 
n‚l_˘
 *);

75 * 
n‚l_˘_°©us2°r
(, *, 
size_t
);

76 
n‚l_˘_°r2°©us
(const *);

78 
n‚l_˘_£t_timeout
(
n‚l_˘
 *, 
uöt32_t
);

79 
n‚l_˘_ã°_timeout
(c⁄° 
n‚l_˘
 *);

80 
uöt32_t
 
n‚l_˘_gë_timeout
(c⁄° 
n‚l_˘
 *);

82 
n‚l_˘_£t_m¨k
(
n‚l_˘
 *, 
uöt32_t
);

83 
n‚l_˘_ã°_m¨k
(c⁄° 
n‚l_˘
 *);

84 
uöt32_t
 
n‚l_˘_gë_m¨k
(c⁄° 
n‚l_˘
 *);

86 
n‚l_˘_£t_u£
(
n‚l_˘
 *, 
uöt32_t
);

87 
n‚l_˘_ã°_u£
(c⁄° 
n‚l_˘
 *);

88 
uöt32_t
 
n‚l_˘_gë_u£
(c⁄° 
n‚l_˘
 *);

90 
n‚l_˘_£t_id
(
n‚l_˘
 *, 
uöt32_t
);

91 
n‚l_˘_ã°_id
(c⁄° 
n‚l_˘
 *);

92 
uöt32_t
 
n‚l_˘_gë_id
(c⁄° 
n‚l_˘
 *);

94 
n‚l_˘_£t_z⁄e
(
n‚l_˘
 *, 
uöt16_t
);

95 
n‚l_˘_ã°_z⁄e
(c⁄° 
n‚l_˘
 *);

96 
uöt16_t
 
n‚l_˘_gë_z⁄e
(c⁄° 
n‚l_˘
 *);

98 
n‚l_˘_£t_§c
(
n‚l_˘
 *, , 
∆_addr
 *);

99 
∆_addr
 * 
n‚l_˘_gë_§c
(c⁄° 
n‚l_˘
 *, );

101 
n‚l_˘_£t_d°
(
n‚l_˘
 *, , 
∆_addr
 *);

102 
∆_addr
 * 
n‚l_˘_gë_d°
(c⁄° 
n‚l_˘
 *, );

104 
n‚l_˘_£t_§c_p‹t
(
n‚l_˘
 *, , 
uöt16_t
);

105 
n‚l_˘_ã°_§c_p‹t
(c⁄° 
n‚l_˘
 *, );

106 
uöt16_t
 
n‚l_˘_gë_§c_p‹t
(c⁄° 
n‚l_˘
 *, );

108 
n‚l_˘_£t_d°_p‹t
(
n‚l_˘
 *, , 
uöt16_t
);

109 
n‚l_˘_ã°_d°_p‹t
(c⁄° 
n‚l_˘
 *, );

110 
uöt16_t
 
n‚l_˘_gë_d°_p‹t
(c⁄° 
n‚l_˘
 *, );

112 
n‚l_˘_£t_icmp_id
(
n‚l_˘
 *, , 
uöt16_t
);

113 
n‚l_˘_ã°_icmp_id
(c⁄° 
n‚l_˘
 *, );

114 
uöt16_t
 
n‚l_˘_gë_icmp_id
(c⁄° 
n‚l_˘
 *, );

116 
n‚l_˘_£t_icmp_ty≥
(
n‚l_˘
 *, , 
uöt8_t
);

117 
n‚l_˘_ã°_icmp_ty≥
(c⁄° 
n‚l_˘
 *, );

118 
uöt8_t
 
n‚l_˘_gë_icmp_ty≥
(c⁄° 
n‚l_˘
 *, );

120 
n‚l_˘_£t_icmp_code
(
n‚l_˘
 *, , 
uöt8_t
);

121 
n‚l_˘_ã°_icmp_code
(c⁄° 
n‚l_˘
 *, );

122 
uöt8_t
 
n‚l_˘_gë_icmp_code
(c⁄° 
n‚l_˘
 *, );

124 
n‚l_˘_£t_∑ckës
(
n‚l_˘
 *, , 
uöt64_t
);

125 
n‚l_˘_ã°_∑ckës
(c⁄° 
n‚l_˘
 *, );

126 
uöt64_t
 
n‚l_˘_gë_∑ckës
(c⁄° 
n‚l_˘
 *,);

128 
n‚l_˘_£t_byãs
(
n‚l_˘
 *, , 
uöt64_t
);

129 
n‚l_˘_ã°_byãs
(c⁄° 
n‚l_˘
 *, );

130 
uöt64_t
 
n‚l_˘_gë_byãs
(c⁄° 
n‚l_˘
 *, );

132 
n‚l_˘_£t_time°amp
(
n‚l_˘
 *, 
uöt64_t
, uint64_t);

133 
n‚l_˘_ã°_time°amp
(c⁄° 
n‚l_˘
 *);

134 c⁄° 
n‚l_˘_time°amp
 *
n‚l_˘_gë_time°amp
(c⁄° 
n‚l_˘
 *);

136 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/netfilter/exp.h

15 #i‚de‡
NETLINK_EXP_H_


16 
	#NETLINK_EXP_H_


	)

18 
	~<√éök/√éök.h
>

19 
	~<√éök/addr.h
>

20 
	~<√éök/ˇche.h
>

21 
	~<√éök/msg.h
>

23 
	~<löux/vîsi⁄.h
>

25 #ifde‡
__˝lu•lus


29 
n‚l_exp
;

31 
	en‚l_exp_tu∂es
 {

32 
NFNL_EXP_TUPLE_EXPECT
,

33 
NFNL_EXP_TUPLE_MASTER
,

34 
NFNL_EXP_TUPLE_MASK
,

35 
NFNL_EXP_TUPLE_NAT
,

36 
NFNL_EXP_TUPLE_MAX


39 
∆_obje˘_›s
 
exp_obj_›s
;

41 
n‚l_exp
 * 
n‚l_exp_Æloc
();

42 
n‚l_exp_Æloc_ˇche
(
∆_sock
 *, 
∆_ˇche
 **);

44 
n‚lmsg_exp_group
(
∆msghdr
 *);

45 
n‚lmsg_exp_∑r£
(
∆msghdr
 *, 
n‚l_exp
 **);

47 
n‚l_exp_gë
(
n‚l_exp
 *);

48 
n‚l_exp_put
(
n‚l_exp
 *);

50 
n‚l_exp_dump_ªque°
(
∆_sock
 *);

52 
n‚l_exp_buûd_add_ªque°
(c⁄° 
n‚l_exp
 *, ,

53 
∆_msg
 **);

54 
n‚l_exp_add
(
∆_sock
 *, c⁄° 
n‚l_exp
 *, );

56 
n‚l_exp_buûd_dñëe_ªque°
(c⁄° 
n‚l_exp
 *, ,

57 
∆_msg
 **);

58 
n‚l_exp_dñ
(
∆_sock
 *, c⁄° 
n‚l_exp
 *, );

60 
n‚l_exp_buûd_quîy_ªque°
(c⁄° 
n‚l_exp
 *, ,

61 
∆_msg
 **);

62 
n‚l_exp_quîy
(
∆_sock
 *, c⁄° 
n‚l_exp
 *, );

64 
n‚l_exp_£t_Ámûy
(
n‚l_exp
 *, 
uöt8_t
);

65 
uöt8_t
 
n‚l_exp_gë_Ámûy
(c⁄° 
n‚l_exp
 *);

67 
n‚l_exp_£t_timeout
(
n‚l_exp
 *, 
uöt32_t
);

68 
n‚l_exp_ã°_timeout
(c⁄° 
n‚l_exp
 *);

69 
uöt32_t
 
n‚l_exp_gë_timeout
(c⁄° 
n‚l_exp
 *);

71 
n‚l_exp_£t_id
(
n‚l_exp
 *, 
uöt32_t
);

72 
n‚l_exp_ã°_id
(c⁄° 
n‚l_exp
 *);

73 
uöt32_t
 
n‚l_exp_gë_id
(c⁄° 
n‚l_exp
 *);

75 
n‚l_exp_£t_hñ≥r_«me
(
n‚l_exp
 *, *);

76 
n‚l_exp_ã°_hñ≥r_«me
(c⁄° 
n‚l_exp
 *);

77 c⁄° * 
n‚l_exp_gë_hñ≥r_«me
(c⁄° 
n‚l_exp
 *);

79 
n‚l_exp_£t_z⁄e
(
n‚l_exp
 *, 
uöt16_t
);

80 
n‚l_exp_ã°_z⁄e
(c⁄° 
n‚l_exp
 *);

81 
uöt16_t
 
n‚l_exp_gë_z⁄e
(c⁄° 
n‚l_exp
 *);

83 
n‚l_exp_£t_Êags
(
n‚l_exp
 *, 
uöt32_t
);

84 
n‚l_exp_ã°_Êags
(c⁄° 
n‚l_exp
 *);

85 
uöt32_t
 
n‚l_exp_gë_Êags
(c⁄° 
n‚l_exp
 *);

87 
n‚l_exp_£t_˛ass
(
n‚l_exp
 *, 
uöt32_t
);

88 
n‚l_exp_ã°_˛ass
(c⁄° 
n‚l_exp
 *);

89 
uöt32_t
 
n‚l_exp_gë_˛ass
(c⁄° 
n‚l_exp
 *);

91 
n‚l_exp_£t_‚
(
n‚l_exp
 *, *);

92 
n‚l_exp_ã°_‚
(c⁄° 
n‚l_exp
 *);

93 c⁄° * 
n‚l_exp_gë_‚
(c⁄° 
n‚l_exp
 *);

95 
n‚l_exp_£t_«t_dú
(
n‚l_exp
 *, 
uöt8_t
);

96 
n‚l_exp_ã°_«t_dú
(c⁄° 
n‚l_exp
 *);

97 
uöt8_t
 
n‚l_exp_gë_«t_dú
(c⁄° 
n‚l_exp
 *);

102 
n‚l_exp_£t_§c
(
n‚l_exp
 *, , 
∆_addr
 *);

103 
n‚l_exp_ã°_§c
(c⁄° 
n‚l_exp
 *, );

104 
∆_addr
 * 
n‚l_exp_gë_§c
(c⁄° 
n‚l_exp
 *, );

106 
n‚l_exp_£t_d°
(
n‚l_exp
 *, , 
∆_addr
 *);

107 
n‚l_exp_ã°_d°
(c⁄° 
n‚l_exp
 *, );

108 
∆_addr
 * 
n‚l_exp_gë_d°
(c⁄° 
n‚l_exp
 *, );

110 
n‚l_exp_£t_l4¥Ÿ⁄um
(
n‚l_exp
 *, , 
uöt8_t
);

111 
n‚l_exp_ã°_l4¥Ÿ⁄um
(c⁄° 
n‚l_exp
 *, );

112 
uöt8_t
 
n‚l_exp_gë_l4¥Ÿ⁄um
(c⁄° 
n‚l_exp
 *, );

114 
n‚l_exp_£t_p‹ts
(
n‚l_exp
 *, , 
uöt16_t
, uint16_t);

115 
n‚l_exp_ã°_p‹ts
(c⁄° 
n‚l_exp
 *, );

116 
uöt16_t
 
n‚l_exp_gë_§c_p‹t
(c⁄° 
n‚l_exp
 *, );

117 
uöt16_t
 
n‚l_exp_gë_d°_p‹t
(c⁄° 
n‚l_exp
 *, );

119 
n‚l_exp_£t_icmp
(
n‚l_exp
 *, , 
uöt16_t
, 
uöt8_t
, uint8_t);

120 
n‚l_exp_ã°_icmp
(c⁄° 
n‚l_exp
 *, );

121 
uöt16_t
 
n‚l_exp_gë_icmp_id
(c⁄° 
n‚l_exp
 *, );

122 
uöt8_t
 
n‚l_exp_gë_icmp_ty≥
(c⁄° 
n‚l_exp
 *, );

123 
uöt8_t
 
n‚l_exp_gë_icmp_code
(c⁄° 
n‚l_exp
 *, );

125 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/netfilter/log.h

15 #i‚de‡
NETLINK_LOG_H_


16 
	#NETLINK_LOG_H_


	)

18 
	~<√éök/√éök.h
>

20 #ifde‡
__˝lu•lus


24 
∆_sock
;

25 
∆msghdr
;

26 
n‚l_log
;

28 
∆_obje˘_›s
 
log_obj_›s
;

30 
	en‚l_log_c›y_mode
 {

31 
	gNFNL_LOG_COPY_NONE
,

32 
	gNFNL_LOG_COPY_META
,

33 
	gNFNL_LOG_COPY_PACKET
,

36 
	en‚l_log_Êags
 {

37 
	gNFNL_LOG_FLAG_SEQ
 = 0x1,

38 
	gNFNL_LOG_FLAG_SEQ_GLOBAL
 = 0x2,

42 
n‚l_log
 * 
n‚l_log_Æloc
();

43 
n‚lmsg_log_∑r£
(
∆msghdr
 *,

44 
n‚l_log
 **);

46 
n‚l_log_gë
(
n‚l_log
 *);

47 
n‚l_log_put
(
n‚l_log
 *);

50 
n‚l_log_£t_group
(
n‚l_log
 *, 
uöt16_t
);

51 
n‚l_log_ã°_group
(c⁄° 
n‚l_log
 *);

52 
uöt16_t
 
n‚l_log_gë_group
(c⁄° 
n‚l_log
 *);

54 
n‚l_log_£t_c›y_mode
(
n‚l_log
 *,

55 
n‚l_log_c›y_mode
);

56 
n‚l_log_ã°_c›y_mode
(c⁄° 
n‚l_log
 *);

57 
n‚l_log_c›y_mode
 
n‚l_log_gë_c›y_mode
(c⁄° 
n‚l_log
 *);

59 * 
n‚l_log_c›y_mode2°r
(
n‚l_log_c›y_mode
,

60 *, 
size_t
);

61 
n‚l_log_c›y_mode
 
n‚l_log_°r2c›y_mode
(const *);

63 
n‚l_log_£t_c›y_ønge
(
n‚l_log
 *, 
uöt32_t
);

64 
n‚l_log_ã°_c›y_ønge
(c⁄° 
n‚l_log
 *);

65 
uöt32_t
 
n‚l_log_gë_c›y_ønge
(c⁄° 
n‚l_log
 *);

67 
n‚l_log_£t_Êush_timeout
(
n‚l_log
 *, 
uöt32_t
);

68 
n‚l_log_ã°_Êush_timeout
(c⁄° 
n‚l_log
 *);

69 
uöt32_t
 
n‚l_log_gë_Êush_timeout
(c⁄° 
n‚l_log
 *);

71 
n‚l_log_£t_Æloc_size
(
n‚l_log
 *, 
uöt32_t
);

72 
n‚l_log_ã°_Æloc_size
(c⁄° 
n‚l_log
 *);

73 
uöt32_t
 
n‚l_log_gë_Æloc_size
(c⁄° 
n‚l_log
 *);

75 
n‚l_log_£t_queue_thªshﬁd
(
n‚l_log
 *, 
uöt32_t
);

76 
n‚l_log_ã°_queue_thªshﬁd
(c⁄° 
n‚l_log
 *);

77 
uöt32_t
 
n‚l_log_gë_queue_thªshﬁd
(c⁄° 
n‚l_log
 *);

79 
n‚l_log_£t_Êags
(
n‚l_log
 *, );

80 
n‚l_log_un£t_Êags
(
n‚l_log
 *, );

81 
n‚l_log_gë_Êags
(c⁄° 
n‚l_log
 *);

83 * 
n‚l_log_Êags2°r
(, *, 
size_t
);

84 
n‚l_log_°r2Êags
(const *);

86 
n‚l_log_buûd_pf_böd
(
uöt8_t
, 
∆_msg
 **);

87 
n‚l_log_pf_böd
(
∆_sock
 *, 
uöt8_t
);

89 
n‚l_log_buûd_pf_unböd
(
uöt8_t
, 
∆_msg
 **);

90 
n‚l_log_pf_unböd
(
∆_sock
 *, 
uöt8_t
);

92 
n‚l_log_buûd_¸óã_ªque°
(c⁄° 
n‚l_log
 *,

93 
∆_msg
 **);

94 
n‚l_log_¸óã
(
∆_sock
 *, c⁄° 
n‚l_log
 *);

96 
n‚l_log_buûd_ch™ge_ªque°
(c⁄° 
n‚l_log
 *,

97 
∆_msg
 **);

98 
n‚l_log_ch™ge
(
∆_sock
 *, c⁄° 
n‚l_log
 *);

100 
n‚l_log_buûd_dñëe_ªque°
(c⁄° 
n‚l_log
 *,

101 
∆_msg
 **);

102 
n‚l_log_dñëe
(
∆_sock
 *, c⁄° 
n‚l_log
 *);

104 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/netfilter/log_msg.h

15 #i‚de‡
NETLINK_LOG_MSG_H_


16 
	#NETLINK_LOG_MSG_H_


	)

18 
	~<√éök/√éök.h
>

20 #ifde‡
__˝lu•lus


24 
∆msghdr
;

25 
n‚l_log_msg
;

27 
∆_obje˘_›s
 
log_msg_obj_›s
;

30 
n‚l_log_msg
 *
n‚l_log_msg_Æloc
();

31 
n‚lmsg_log_msg_∑r£
(
∆msghdr
 *,

32 
n‚l_log_msg
 **);

34 
n‚l_log_msg_gë
(
n‚l_log_msg
 *);

35 
n‚l_log_msg_put
(
n‚l_log_msg
 *);

37 
n‚l_log_msg_£t_Ámûy
(
n‚l_log_msg
 *, 
uöt8_t
);

38 
uöt8_t
 
n‚l_log_msg_gë_Ámûy
(c⁄° 
n‚l_log_msg
 *);

40 
n‚l_log_msg_£t_hw¥Ÿo
(
n‚l_log_msg
 *, 
uöt16_t
);

41 
n‚l_log_msg_ã°_hw¥Ÿo
(c⁄° 
n‚l_log_msg
 *);

42 
uöt16_t
 
n‚l_log_msg_gë_hw¥Ÿo
(c⁄° 
n‚l_log_msg
 *);

44 
n‚l_log_msg_£t_hook
(
n‚l_log_msg
 *, 
uöt8_t
);

45 
n‚l_log_msg_ã°_hook
(c⁄° 
n‚l_log_msg
 *);

46 
uöt8_t
 
n‚l_log_msg_gë_hook
(c⁄° 
n‚l_log_msg
 *);

48 
n‚l_log_msg_£t_m¨k
(
n‚l_log_msg
 *, 
uöt32_t
);

49 
n‚l_log_msg_ã°_m¨k
(c⁄° 
n‚l_log_msg
 *);

50 
uöt32_t
 
n‚l_log_msg_gë_m¨k
(c⁄° 
n‚l_log_msg
 *);

52 
n‚l_log_msg_£t_time°amp
(
n‚l_log_msg
 *,

53 
timevÆ
 *);

54 c⁄° 
timevÆ
 *
n‚l_log_msg_gë_time°amp
(c⁄° 
n‚l_log_msg
 *);

56 
n‚l_log_msg_£t_ödev
(
n‚l_log_msg
 *, 
uöt32_t
);

57 
uöt32_t
 
n‚l_log_msg_gë_ödev
(c⁄° 
n‚l_log_msg
 *);

59 
n‚l_log_msg_£t_outdev
(
n‚l_log_msg
 *, 
uöt32_t
);

60 
uöt32_t
 
n‚l_log_msg_gë_outdev
(c⁄° 
n‚l_log_msg
 *);

62 
n‚l_log_msg_£t_physödev
(
n‚l_log_msg
 *, 
uöt32_t
);

63 
uöt32_t
 
n‚l_log_msg_gë_physödev
(c⁄° 
n‚l_log_msg
 *);

65 
n‚l_log_msg_£t_physoutdev
(
n‚l_log_msg
 *, 
uöt32_t
);

66 
uöt32_t
 
n‚l_log_msg_gë_physoutdev
(c⁄° 
n‚l_log_msg
 *);

68 
n‚l_log_msg_£t_hwaddr
(
n‚l_log_msg
 *, 
uöt8_t
 *, );

69 c⁄° 
uöt8_t
 * 
n‚l_log_msg_gë_hwaddr
(c⁄° 
n‚l_log_msg
 *, *);

71 
n‚l_log_msg_£t_∑ylﬂd
(
n‚l_log_msg
 *, 
uöt8_t
 *, );

72 c⁄° * 
n‚l_log_msg_gë_∑ylﬂd
(c⁄° 
n‚l_log_msg
 *, *);

74 
n‚l_log_msg_£t_¥efix
(
n‚l_log_msg
 *, *);

75 c⁄° * 
n‚l_log_msg_gë_¥efix
(c⁄° 
n‚l_log_msg
 *);

77 
n‚l_log_msg_£t_uid
(
n‚l_log_msg
 *, 
uöt32_t
);

78 
n‚l_log_msg_ã°_uid
(c⁄° 
n‚l_log_msg
 *);

79 
uöt32_t
 
n‚l_log_msg_gë_uid
(c⁄° 
n‚l_log_msg
 *);

81 
n‚l_log_msg_£t_gid
(
n‚l_log_msg
 *, 
uöt32_t
);

82 
n‚l_log_msg_ã°_gid
(c⁄° 
n‚l_log_msg
 *);

83 
uöt32_t
 
n‚l_log_msg_gë_gid
(c⁄° 
n‚l_log_msg
 *);

85 
n‚l_log_msg_£t_£q
(
n‚l_log_msg
 *, 
uöt32_t
);

86 
n‚l_log_msg_ã°_£q
(c⁄° 
n‚l_log_msg
 *);

87 
uöt32_t
 
n‚l_log_msg_gë_£q
(c⁄° 
n‚l_log_msg
 *);

89 
n‚l_log_msg_£t_£q_globÆ
(
n‚l_log_msg
 *, 
uöt32_t
);

90 
n‚l_log_msg_ã°_£q_globÆ
(c⁄° 
n‚l_log_msg
 *);

91 
uöt32_t
 
n‚l_log_msg_gë_£q_globÆ
(c⁄° 
n‚l_log_msg
 *);

93 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/netfilter/netfilter.h

12 #i‚de‡
NETLINK_NETFILTER_H_


13 
	#NETLINK_NETFILTER_H_


	)

15 
	~<√éök/√éök.h
>

17 #ifde‡
__˝lu•lus


21 * 
n‚l_vîdi˘2°r
(, *, 
size_t
);

22 
n‚l_°r2vîdi˘
(const *);

24 * 
n‚l_öë_hook2°r
(, *, 
size_t
);

25 
n‚l_°r2öë_hook
(const *);

27 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/netfilter/nfnl.h

14 #i‚de‡
NETLINK_NFNL_H_


15 
	#NETLINK_NFNL_H_


	)

17 
	~<√éök/√éök.h
>

19 #ifde‡
__˝lu•lus


23 
	#NFNL_HDRLEN
 
	`NLMSG_ALIGN
((
nfgímsg
))

	)

24 
	#NFNLMSG_TYPE
(
subsys
, 
subty≥
Ë(((subsysË<< 8Ë| (subty≥))

	)

26 
n‚l_c⁄√˘
(
∆_sock
 *);

28 
uöt8_t
 
n‚lmsg_subsys
(
∆msghdr
 *);

29 
uöt8_t
 
n‚lmsg_subty≥
(
∆msghdr
 *);

30 
uöt8_t
 
n‚lmsg_Ámûy
(
∆msghdr
 *);

31 
uöt16_t
 
n‚lmsg_ªs_id
(
∆msghdr
 *);

33 
n‚l_£nd_sim∂e
(
∆_sock
 *, 
uöt8_t
, uint8_t,

34 , 
uöt8_t
, 
uöt16_t
);

35 
∆_msg
 * 
n‚lmsg_Æloc_sim∂e
(
uöt8_t
, uint8_t, ,

36 
uöt8_t
, 
uöt16_t
);

37 
n‚lmsg_put
(
∆_msg
 *, 
uöt32_t
, uint32_t,

38 
uöt8_t
, uöt8_t, , uöt8_t, 
uöt16_t
);

40 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/netfilter/queue.h

12 #i‚de‡
NETLINK_QUEUE_H_


13 
	#NETLINK_QUEUE_H_


	)

15 
	~<√éök/√éök.h
>

17 #ifde‡
__˝lu•lus


21 
∆_sock
;

22 
∆msghdr
;

23 
n‚l_queue
;

25 
∆_obje˘_›s
 
queue_obj_›s
;

27 
	en‚l_queue_c›y_mode
 {

28 
	gNFNL_QUEUE_COPY_NONE
,

29 
	gNFNL_QUEUE_COPY_META
,

30 
	gNFNL_QUEUE_COPY_PACKET
,

34 
∆_sock
 * 
n‚l_queue_sockë_Æloc
();

36 
n‚l_queue
 * 
n‚l_queue_Æloc
();

38 
n‚l_queue_gë
(
n‚l_queue
 *);

39 
n‚l_queue_put
(
n‚l_queue
 *);

42 
n‚l_queue_£t_group
(
n‚l_queue
 *, 
uöt16_t
);

43 
n‚l_queue_ã°_group
(c⁄° 
n‚l_queue
 *);

44 
uöt16_t
 
n‚l_queue_gë_group
(c⁄° 
n‚l_queue
 *);

46 
n‚l_queue_£t_maxÀn
(
n‚l_queue
 *, 
uöt32_t
);

47 
n‚l_queue_ã°_maxÀn
(c⁄° 
n‚l_queue
 *);

48 
uöt32_t
 
n‚l_queue_gë_maxÀn
(c⁄° 
n‚l_queue
 *);

50 
n‚l_queue_£t_c›y_mode
(
n‚l_queue
 *,

51 
n‚l_queue_c›y_mode
);

52 
n‚l_queue_ã°_c›y_mode
(c⁄° 
n‚l_queue
 *);

53 
n‚l_queue_c›y_mode
 
n‚l_queue_gë_c›y_mode
(c⁄° 
n‚l_queue
 *);

55 * 
n‚l_queue_c›y_mode2°r
(
n‚l_queue_c›y_mode
,

56 *, 
size_t
);

57 
n‚l_queue_c›y_mode
 
n‚l_queue_°r2c›y_mode
(const *);

59 
n‚l_queue_£t_c›y_ønge
(
n‚l_queue
 *,

60 
uöt32_t
);

61 
n‚l_queue_ã°_c›y_ønge
(c⁄° 
n‚l_queue
 *);

62 
uöt32_t
 
n‚l_queue_gë_c›y_ønge
(c⁄° 
n‚l_queue
 *);

64 
n‚l_queue_buûd_pf_böd
(
uöt8_t
, 
∆_msg
 **);

65 
n‚l_queue_pf_böd
(
∆_sock
 *, 
uöt8_t
);

67 
n‚l_queue_buûd_pf_unböd
(
uöt8_t
, 
∆_msg
 **);

68 
n‚l_queue_pf_unböd
(
∆_sock
 *, 
uöt8_t
);

70 
n‚l_queue_buûd_¸óã_ªque°
(c⁄° 
n‚l_queue
 *,

71 
∆_msg
 **);

72 
n‚l_queue_¸óã
(
∆_sock
 *,

73 c⁄° 
n‚l_queue
 *);

75 
n‚l_queue_buûd_ch™ge_ªque°
(c⁄° 
n‚l_queue
 *,

76 
∆_msg
 **);

77 
n‚l_queue_ch™ge
(
∆_sock
 *,

78 c⁄° 
n‚l_queue
 *);

80 
n‚l_queue_buûd_dñëe_ªque°
(c⁄° 
n‚l_queue
 *,

81 
∆_msg
 **);

82 
n‚l_queue_dñëe
(
∆_sock
 *,

83 c⁄° 
n‚l_queue
 *);

85 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/netfilter/queue_msg.h

12 #i‚de‡
NETLINK_QUEUE_MSG_H_


13 
	#NETLINK_QUEUE_MSG_H_


	)

15 
	~<√éök/√éök.h
>

17 #ifde‡
__˝lu•lus


21 
∆_sock
;

22 
∆msghdr
;

23 
n‚l_queue_msg
;

25 
∆_obje˘_›s
 
queue_msg_obj_›s
;

28 
n‚l_queue_msg
 * 
n‚l_queue_msg_Æloc
();

29 
n‚lmsg_queue_msg_∑r£
(
∆msghdr
 *,

30 
n‚l_queue_msg
 **);

32 
n‚l_queue_msg_gë
(
n‚l_queue_msg
 *);

33 
n‚l_queue_msg_put
(
n‚l_queue_msg
 *);

35 
n‚l_queue_msg_£t_group
(
n‚l_queue_msg
 *, 
uöt16_t
);

36 
n‚l_queue_msg_ã°_group
(c⁄° 
n‚l_queue_msg
 *);

37 
uöt16_t
 
n‚l_queue_msg_gë_group
(c⁄° 
n‚l_queue_msg
 *);

39 
n‚l_queue_msg_£t_Ámûy
(
n‚l_queue_msg
 *, 
uöt8_t
);

40 
n‚l_queue_msg_ã°_Ámûy
(c⁄° 
n‚l_queue_msg
 *);

41 
uöt8_t
 
n‚l_queue_msg_gë_Ámûy
(c⁄° 
n‚l_queue_msg
 *);

43 
n‚l_queue_msg_£t_∑ckëid
(
n‚l_queue_msg
 *, 
uöt32_t
);

44 
n‚l_queue_msg_ã°_∑ckëid
(c⁄° 
n‚l_queue_msg
 *);

45 
uöt32_t
 
n‚l_queue_msg_gë_∑ckëid
(c⁄° 
n‚l_queue_msg
 *);

47 
n‚l_queue_msg_£t_hw¥Ÿo
(
n‚l_queue_msg
 *, 
uöt16_t
);

48 
n‚l_queue_msg_ã°_hw¥Ÿo
(c⁄° 
n‚l_queue_msg
 *);

49 
uöt16_t
 
n‚l_queue_msg_gë_hw¥Ÿo
(c⁄° 
n‚l_queue_msg
 *);

51 
n‚l_queue_msg_£t_hook
(
n‚l_queue_msg
 *, 
uöt8_t
);

52 
n‚l_queue_msg_ã°_hook
(c⁄° 
n‚l_queue_msg
 *);

53 
uöt8_t
 
n‚l_queue_msg_gë_hook
(c⁄° 
n‚l_queue_msg
 *);

55 
n‚l_queue_msg_£t_m¨k
(
n‚l_queue_msg
 *, 
uöt32_t
);

56 
n‚l_queue_msg_ã°_m¨k
(c⁄° 
n‚l_queue_msg
 *);

57 
uöt32_t
 
n‚l_queue_msg_gë_m¨k
(c⁄° 
n‚l_queue_msg
 *);

59 
n‚l_queue_msg_£t_time°amp
(
n‚l_queue_msg
 *,

60 
timevÆ
 *);

61 
n‚l_queue_msg_ã°_time°amp
(c⁄° 
n‚l_queue_msg
 *);

62 c⁄° 
timevÆ
 * 
n‚l_queue_msg_gë_time°amp
(c⁄° 
n‚l_queue_msg
 *);

64 
n‚l_queue_msg_£t_ödev
(
n‚l_queue_msg
 *, 
uöt32_t
);

65 
n‚l_queue_msg_ã°_ödev
(c⁄° 
n‚l_queue_msg
 *);

66 
uöt32_t
 
n‚l_queue_msg_gë_ödev
(c⁄° 
n‚l_queue_msg
 *);

68 
n‚l_queue_msg_£t_outdev
(
n‚l_queue_msg
 *, 
uöt32_t
);

69 
n‚l_queue_msg_ã°_outdev
(c⁄° 
n‚l_queue_msg
 *);

70 
uöt32_t
 
n‚l_queue_msg_gë_outdev
(c⁄° 
n‚l_queue_msg
 *);

72 
n‚l_queue_msg_£t_physödev
(
n‚l_queue_msg
 *, 
uöt32_t
);

73 
n‚l_queue_msg_ã°_physödev
(c⁄° 
n‚l_queue_msg
 *);

74 
uöt32_t
 
n‚l_queue_msg_gë_physödev
(c⁄° 
n‚l_queue_msg
 *);

76 
n‚l_queue_msg_£t_physoutdev
(
n‚l_queue_msg
 *, 
uöt32_t
);

77 
n‚l_queue_msg_ã°_physoutdev
(c⁄° 
n‚l_queue_msg
 *);

78 
uöt32_t
 
n‚l_queue_msg_gë_physoutdev
(c⁄° 
n‚l_queue_msg
 *);

80 
n‚l_queue_msg_£t_hwaddr
(
n‚l_queue_msg
 *, 
uöt8_t
 *, );

81 
n‚l_queue_msg_ã°_hwaddr
(c⁄° 
n‚l_queue_msg
 *);

82 c⁄° 
uöt8_t
 * 
n‚l_queue_msg_gë_hwaddr
(c⁄° 
n‚l_queue_msg
 *, *);

84 
n‚l_queue_msg_£t_∑ylﬂd
(
n‚l_queue_msg
 *, 
uöt8_t
 *, );

85 
n‚l_queue_msg_ã°_∑ylﬂd
(c⁄° 
n‚l_queue_msg
 *);

86 c⁄° * 
n‚l_queue_msg_gë_∑ylﬂd
(c⁄° 
n‚l_queue_msg
 *, *);

88 
n‚l_queue_msg_£t_vîdi˘
(
n‚l_queue_msg
 *,

90 
n‚l_queue_msg_ã°_vîdi˘
(c⁄° 
n‚l_queue_msg
 *);

91 
n‚l_queue_msg_gë_vîdi˘
(c⁄° 
n‚l_queue_msg
 *);

93 
∆_msg
 * 
n‚l_queue_msg_buûd_vîdi˘
(c⁄° 
n‚l_queue_msg
 *);

94 
n‚l_queue_msg_£nd_vîdi˘
(
∆_sock
 *,

95 c⁄° 
n‚l_queue_msg
 *);

96 
n‚l_queue_msg_£nd_vîdi˘_b©ch
(
∆_sock
 *,

97 c⁄° 
n‚l_queue_msg
 *);

98 
n‚l_queue_msg_£nd_vîdi˘_∑ylﬂd
(
∆_sock
 *,

99 c⁄° 
n‚l_queue_msg
 *,

101 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/netlink-compat.h

12 #i‚de‡
NETLINK_COMPAT_H_


13 
	#NETLINK_COMPAT_H_


	)

15 #i‡!
deföed
 
_LINUX_SOCKET_H
 && !deföed 
_BITS_SOCKADDR_H


16 
	tß_Ámûy_t
;

19 #i‚de‡
IFNAMSIZ


21 
	#IFNAMSIZ
 16

	)

25 #i‚de‡
ARPHRD_INFINIBAND


26 
	#ARPHRD_INFINIBAND
 32

	)

30 #i‚de‡
ETH_P_MPLS_UC


31 
	#ETH_P_MPLS_UC
 0x8847

	)

34 #i‚de‡
ETH_P_MPLS_MC


35 
	#ETH_P_MPLS_MC
 0x8848

	)

38 #i‚de‡ 
ETH_P_EDP2


39 
	#ETH_P_EDP2
 0x88A2

	)

42 #i‚de‡
ETH_P_HDLC


43 
	#ETH_P_HDLC
 0x0019

	)

46 #i‚de‡
AF_LLC


47 
	#AF_LLC
 26

	)

	@mylibnl/libnl-3.2.25/include/netlink/netlink-kernel.h

1 #i‚de‡
__NETLINK_KERNEL_H_


2 
	#__NETLINK_KERNEL_H_


	)

16 
	ssockaddr_∆


19 
ß_Ámûy_t
 
	m∆_Ámûy
;

22 
	m∆_∑d
;

25 
uöt32_t
 
	m∆_pid
;

28 
uöt32_t
 
	m∆_groups
;

40 
	s∆msghdr


43 
uöt32_t
 
	m∆msg_Àn
;

46 
uöt16_t
 
	m∆msg_ty≥
;

49 
uöt16_t
 
	m∆msg_Êags
;

52 
uöt32_t
 
	m∆msg_£q
;

55 
uöt32_t
 
	m∆msg_pid
;

67 
	#NLM_F_REQUEST
 1

	)

73 
	#NLM_F_MULTI
 2

	)

78 
	#NLM_F_ACK
 4

	)

83 
	#NLM_F_ECHO
 8

	)

95 
	#NLM_F_ROOT
 0x100

	)

100 
	#NLM_F_MATCH
 0x200

	)

107 
	#NLM_F_ATOMIC
 0x400

	)

112 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

124 
	#NLM_F_REPLACE
 0x100

	)

129 
	#NLM_F_EXCL
 0x200

	)

134 
	#NLM_F_CREATE
 0x400

	)

139 
	#NLM_F_APPEND
 0x800

	)

151 
	#NLMSG_NOOP
 0x1

	)

158 
	#NLMSG_ERROR
 0x2

	)

163 
	#NLMSG_DONE
 0x3

	)

168 
	#NLMSG_OVERRUN
 0x4

	)

173 
	#NLMSG_MIN_TYPE
 0x10

	)

180 
	s∆msgîr


183 
	mîr‹
;

186 
∆msghdr
 
	mmsg
;

189 
	s∆_pktöfo


191 
__u32
 
	mgroup
;

199 
	#NLMSG_ALIGNTO
 4

	)

206 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

213 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

237 
	s∆©å
 {

241 
__u16
 
	m∆a_Àn
;

246 
__u16
 
	m∆a_ty≥
;

268 
	#NLA_F_NESTED
 (1 << 15)

	)

269 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

270 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

274 
	#NLA_ALIGNTO
 4

	)

281 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

288 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@mylibnl/libnl-3.2.25/include/netlink/netlink.h

12 #i‚de‡
NETLINK_NETLINK_H_


13 
	#NETLINK_NETLINK_H_


	)

15 
	~<°dio.h
>

16 
	~<°döt.h
>

17 
	~<°rög.h
>

18 
	~<°dlib.h
>

19 
	~<sys/pﬁl.h
>

20 
	~<sys/sockë.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/time.h
>

23 
	~<√tdb.h
>

24 
	~<√éök/√éök-com∑t.h
>

25 
	~<löux/√éök.h
>

26 
	~<löux/π√éök.h
>

27 
	~<löux/gíëlök.h
>

28 
	~<löux/√tfûãr/n‚ëlök.h
>

29 
	~<√töë/t˝.h
>

30 
	~<√éök/vîsi⁄.h
>

31 
	~<√éök/î∫o.h
>

32 
	~<√éök/ty≥s.h
>

33 
	~<√éök/h™dÀrs.h
>

34 
	~<√éök/sockë.h
>

35 
	~<√éök/obje˘.h
>

37 #ifde‡
__˝lu•lus


41 
u¸ed
;

42 
∆_ˇche_›s
;

43 
∆_∑r£r_∑øm
;

44 
∆_obje˘
;

45 
∆_sock
;

47 
∆_debug
;

48 
∆_dump_∑øms
 
∆_debug_dp
;

51 
∆_c⁄√˘
(
∆_sock
 *, );

52 
∆_˛o£
(
∆_sock
 *);

55 
∆_£ndto
(
∆_sock
 *, *, 
size_t
);

56 
∆_£ndmsg
(
∆_sock
 *, 
∆_msg
 *,

57 
msghdr
 *);

58 
∆_£nd
(
∆_sock
 *, 
∆_msg
 *);

59 
∆_£nd_iovec
(
∆_sock
 *, 
∆_msg
 *,

60 
iovec
 *, );

61 
∆_com∂ëe_msg
(
∆_sock
 *,

62 
∆_msg
 *);

63 
∆_auto_com∂ëe
(
∆_sock
 *,

64 
∆_msg
 *);

65 
∆_£nd_auto
(
∆_sock
 *, 
∆_msg
 *);

66 
∆_£nd_auto_com∂ëe
(
∆_sock
 *,

67 
∆_msg
 *);

68 
∆_£nd_sync
(
∆_sock
 *, 
∆_msg
 *);

69 
∆_£nd_sim∂e
(
∆_sock
 *, , ,

70 *, 
size_t
);

73 
∆_ªcv
(
∆_sock
 *,

74 
sockaddr_∆
 *, **,

75 
u¸ed
 **);

77 
∆_ªcvmsgs
(
∆_sock
 *, 
∆_cb
 *);

78 
∆_ªcvmsgs_ªp‹t
(
∆_sock
 *, 
∆_cb
 *);

80 
∆_ªcvmsgs_deÁu…
(
∆_sock
 *);

82 
∆_waô_f‹_ack
(
∆_sock
 *);

84 
∆_pickup
(
∆_sock
 *,

85 (*
∑r£r
)(
∆_ˇche_›s
 *,

86 
sockaddr_∆
 *,

87 
∆msghdr
 *,

88 
∆_∑r£r_∑øm
 *),

89 
∆_obje˘
 **);

91 * 
∆_∆Ámûy2°r
(, *, 
size_t
);

92 
∆_°r2∆Ámûy
(const *);

94 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/object-api.h

12 #i‚de‡
NETLINK_DUMMY_OBJECT_API_H_


13 
	#NETLINK_DUMMY_OBJECT_API_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/utûs.h
>

17 
	~<√éök/obje˘.h
>

	@mylibnl/libnl-3.2.25/include/netlink/object.h

12 #i‚de‡
NETLINK_OBJECT_H_


13 
	#NETLINK_OBJECT_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/utûs.h
>

18 #ifde‡
__˝lu•lus


22 
∆_ˇche
;

23 
∆_obje˘
;

24 
∆_obje˘_›s
;

26 
	#OBJ_CAST
(
±r
Ë((
∆_obje˘
 *Ë’å))

	)

29 
∆_obje˘
 * 
∆_obje˘_Æloc
(
∆_obje˘_›s
 *);

30 
∆_obje˘_Æloc_«me
(const *,

31 
∆_obje˘
 **);

32 
∆_obje˘_‰ì
(
∆_obje˘
 *);

33 
∆_obje˘
 * 
∆_obje˘_˛⁄e
(∆_obje˘ *
obj
);

34 
∆_obje˘_upd©e
(
∆_obje˘
 *
d°
,

35 
∆_obje˘
 *
§c
);

36 
∆_obje˘_gë
(
∆_obje˘
 *);

37 
∆_obje˘_put
(
∆_obje˘
 *);

38 
∆_obje˘_sh¨ed
(
∆_obje˘
 *);

39 
∆_obje˘_dump
(
∆_obje˘
 *,

40 
∆_dump_∑øms
 *);

41 
∆_obje˘_dump_buf
(
∆_obje˘
 *, *, 
size_t
);

42 
∆_obje˘_idítiˇl
(
∆_obje˘
 *,

43 
∆_obje˘
 *);

44 
uöt32_t
 
∆_obje˘_diff
(
∆_obje˘
 *,

45 
∆_obje˘
 *);

46 
∆_obje˘_m©ch_fûãr
(
∆_obje˘
 *,

47 
∆_obje˘
 *);

48 * 
∆_obje˘_©ås2°r
(
∆_obje˘
 *,

49 
uöt32_t
 
©ås
, *
buf
,

50 
size_t
);

51 * 
∆_obje˘_©å_li°
(
∆_obje˘
 *,

52 *, 
size_t
);

53 
∆_obje˘_keygí
(
∆_obje˘
 *,

54 
uöt32_t
 *, uint32_t);

57 
∆_obje˘_m¨k
(
∆_obje˘
 *);

58 
∆_obje˘_unm¨k
(
∆_obje˘
 *);

59 
∆_obje˘_is_m¨ked
(
∆_obje˘
 *);

62 
∆_obje˘_gë_ªf˙t
(
∆_obje˘
 *);

63 
∆_ˇche
 * 
∆_obje˘_gë_ˇche
(
∆_obje˘
 *);

64 c⁄° * 
∆_obje˘_gë_ty≥
(c⁄° 
∆_obje˘
 *);

65 
∆_obje˘_gë_msgty≥
(c⁄° 
∆_obje˘
 *);

66 
∆_obje˘_›s
 * 
∆_obje˘_gë_›s
(c⁄° 
∆_obje˘
 *);

67 
uöt32_t
 
∆_obje˘_gë_id_©ås
(
∆_obje˘
 *
obj
);

70 
ölöe
 * 
∆_obje˘_¥iv
(
∆_obje˘
 *
obj
)

72  
	gobj
;

76 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/act/mirred.h

12 #i‚de‡
NETLINK_MIRRED_H_


13 
	#NETLINK_MIRRED_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/ˇche.h
>

17 
	~<√éök/rouã/a˘i⁄.h
>

18 
	~<löux/tc_a˘/tc_múªd.h
>

20 #ifde‡
__˝lu•lus


24 
π∆_múªd_£t_a˘i⁄
(
π∆_a˘
 *, );

25 
π∆_múªd_gë_a˘i⁄
(
π∆_a˘
 *);

26 
π∆_múªd_£t_ifödex
(
π∆_a˘
 *, 
uöt32_t
);

27 
uöt32_t
 
π∆_múªd_gë_ifödex
(
π∆_a˘
 *);

28 
π∆_múªd_£t_pﬁicy
(
π∆_a˘
 *, );

29 
π∆_múªd_gë_pﬁicy
(
π∆_a˘
 *);

31 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/action.h

12 #i‚de‡
NETLINK_ACTION_H_


13 
	#NETLINK_ACTION_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/ˇche.h
>

17 
	~<√éök/rouã/tc.h
>

18 
	~<√éök/utûs.h
>

20 #ifde‡
__˝lu•lus


24 
π∆_a˘
 *
π∆_a˘_Æloc
();

25 
π∆_a˘_gë
(
π∆_a˘
 *);

26 
π∆_a˘_put
(
π∆_a˘
 *);

27 
π∆_a˘_buûd_add_ªque°
(
π∆_a˘
 *, ,

28 
∆_msg
 **);

29 
π∆_a˘_add
(
∆_sock
 *, 
π∆_a˘
 *, );

31 
π∆_a˘_buûd_ch™ge_ªque°
(
π∆_a˘
 *, ,

32 
∆_msg
 **);

33 
π∆_a˘_buûd_dñëe_ªque°
(
π∆_a˘
 *, ,

34 
∆_msg
 **);

35 
π∆_a˘_dñëe
(
∆_sock
 *, 
π∆_a˘
 *,

37 
π∆_a˘_≠≥nd
(
π∆_a˘
 **, rtnl_act *);

38 
π∆_a˘_ªmove
(
π∆_a˘
 **, rtnl_act *);

39 
π∆_a˘_fûl
(
∆_msg
 *, , 
π∆_a˘
 *);

40 
π∆_a˘_put_Æl
(
π∆_a˘
 **);

41 
π∆_a˘_∑r£
(
π∆_a˘
 **, 
∆©å
 *);

42 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/addr.h

14 #i‚de‡
NETADDR_ADDR_H_


15 
	#NETADDR_ADDR_H_


	)

17 
	~<√éök/√éök.h
>

18 
	~<√éök/ˇche.h
>

19 
	~<√éök/addr.h
>

20 
	~<√éök/rouã/lök.h
>

22 #ifde‡
__˝lu•lus


26 
π∆_addr
;

29 
π∆_addr
 *
π∆_addr_Æloc
();

30 
π∆_addr_put
(
π∆_addr
 *);

32 
π∆_addr_Æloc_ˇche
(
∆_sock
 *, 
∆_ˇche
 **);

33 
π∆_addr
 *

34 
π∆_addr_gë
(
∆_ˇche
 *, , 
∆_addr
 *);

36 
π∆_addr_buûd_add_ªque°
(
π∆_addr
 *, ,

37 
∆_msg
 **);

38 
π∆_addr_add
(
∆_sock
 *, 
π∆_addr
 *, );

40 
π∆_addr_buûd_dñëe_ªque°
(
π∆_addr
 *, ,

41 
∆_msg
 **);

42 
π∆_addr_dñëe
(
∆_sock
 *,

43 
π∆_addr
 *, );

45 * 
π∆_addr_Êags2°r
(, *, 
size_t
);

46 
π∆_addr_°r2Êags
(const *);

48 
π∆_addr_£t_œbñ
(
π∆_addr
 *, const *);

49 * 
π∆_addr_gë_œbñ
(
π∆_addr
 *);

51 
π∆_addr_£t_ifödex
(
π∆_addr
 *, );

52 
π∆_addr_gë_ifödex
(
π∆_addr
 *);

54 
π∆_addr_£t_lök
(
π∆_addr
 *, 
π∆_lök
 *);

55 
π∆_lök
 *

56 
π∆_addr_gë_lök
(
π∆_addr
 *);

58 
π∆_addr_£t_Ámûy
(
π∆_addr
 *, );

59 
π∆_addr_gë_Ámûy
(
π∆_addr
 *);

61 
π∆_addr_£t_¥efixÀn
(
π∆_addr
 *, );

62 
π∆_addr_gë_¥efixÀn
(
π∆_addr
 *);

64 
π∆_addr_£t_sc›e
(
π∆_addr
 *, );

65 
π∆_addr_gë_sc›e
(
π∆_addr
 *);

67 
π∆_addr_£t_Êags
(
π∆_addr
 *, );

68 
π∆_addr_un£t_Êags
(
π∆_addr
 *, );

69 
π∆_addr_gë_Êags
(
π∆_addr
 *);

71 
π∆_addr_£t_loˇl
(
π∆_addr
 *,

72 
∆_addr
 *);

73 
∆_addr
 *
π∆_addr_gë_loˇl
(
π∆_addr
 *);

75 
π∆_addr_£t_≥î
(
π∆_addr
 *, 
∆_addr
 *);

76 
∆_addr
 *
π∆_addr_gë_≥î
(
π∆_addr
 *);

78 
π∆_addr_£t_brﬂdˇ°
(
π∆_addr
 *, 
∆_addr
 *);

79 
∆_addr
 *
π∆_addr_gë_brﬂdˇ°
(
π∆_addr
 *);

81 
π∆_addr_£t_mu…iˇ°
(
π∆_addr
 *, 
∆_addr
 *);

82 
∆_addr
 *
π∆_addr_gë_mu…iˇ°
(
π∆_addr
 *);

84 
π∆_addr_£t_™yˇ°
(
π∆_addr
 *, 
∆_addr
 *);

85 
∆_addr
 *
π∆_addr_gë_™yˇ°
(
π∆_addr
 *);

87 
uöt32_t
 
π∆_addr_gë_vÆid_li„time
(
π∆_addr
 *);

88 
π∆_addr_£t_vÆid_li„time
(
π∆_addr
 *, 
uöt32_t
);

89 
uöt32_t
 
π∆_addr_gë_¥e„ºed_li„time
(
π∆_addr
 *);

90 
π∆_addr_£t_¥e„ºed_li„time
(
π∆_addr
 *, 
uöt32_t
);

91 
uöt32_t
 
π∆_addr_gë_¸óã_time
(
π∆_addr
 *);

92 
uöt32_t
 
π∆_addr_gë_œ°_upd©e_time
(
π∆_addr
 *);

94 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/class.h

12 #i‚de‡
NETLINK_CLASS_H_


13 
	#NETLINK_CLASS_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/tc.h
>

17 
	~<√éök/rouã/qdisc.h
>

19 #ifde‡
__˝lu•lus


23 
π∆_˛ass
;

25 
π∆_˛ass
 *

26 
π∆_˛ass_Æloc
();

27 
π∆_˛ass_put
(
π∆_˛ass
 *);

29 
π∆_˛ass_Æloc_ˇche
(
∆_sock
 *, ,

30 
∆_ˇche
 **);

31 
π∆_˛ass
 *

32 
π∆_˛ass_gë
(
∆_ˇche
 *, , 
uöt32_t
);

34 
π∆_qdisc
 *

35 
π∆_˛ass_Àaf_qdisc
(
π∆_˛ass
 *,

36 
∆_ˇche
 *);

38 
π∆_˛ass_buûd_add_ªque°
(
π∆_˛ass
 *, ,

39 
∆_msg
 **);

40 
π∆_˛ass_add
(
∆_sock
 *, 
π∆_˛ass
 *,

43 
π∆_˛ass_buûd_dñëe_ªque°
(
π∆_˛ass
 *,

44 
∆_msg
 **);

45 
π∆_˛ass_dñëe
(
∆_sock
 *,

46 
π∆_˛ass
 *);

49 
π∆_˛ass_f‹óch_chûd
(
π∆_˛ass
 *,

50 
∆_ˇche
 *,

51 (*
cb
)(
∆_obje˘
 *,

54 
__©åibuã__
((
dïªˇãd
));

55 
π∆_˛ass_f‹óch_˛s
(
π∆_˛ass
 *,

56 
∆_ˇche
 *,

57 (*
cb
)(
∆_obje˘
 *,

60 
__©åibuã__
((
dïªˇãd
));

62 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/classifier.h

12 #i‚de‡
NETLINK_CLASSIFIER_H_


13 
	#NETLINK_CLASSIFIER_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/ˇche.h
>

17 
	~<√éök/rouã/tc.h
>

18 
	~<√éök/utûs.h
>

20 #ifde‡
__˝lu•lus


24 
π∆_˛s
 *
π∆_˛s_Æloc
();

25 
π∆_˛s_put
(
π∆_˛s
 *);

27 
π∆_˛s_Æloc_ˇche
(
∆_sock
 *, , 
uöt32_t
,

28 
∆_ˇche
 **);

30 
π∆_˛s_buûd_add_ªque°
(
π∆_˛s
 *, ,

31 
∆_msg
 **);

32 
π∆_˛s_add
(
∆_sock
 *, 
π∆_˛s
 *, );

33 
π∆_˛s_ch™ge
(
∆_sock
 *, 
π∆_˛s
 *, );

35 
π∆_˛s_buûd_ch™ge_ªque°
(
π∆_˛s
 *, ,

36 
∆_msg
 **);

37 
π∆_˛s_buûd_dñëe_ªque°
(
π∆_˛s
 *, ,

38 
∆_msg
 **);

39 
π∆_˛s_dñëe
(
∆_sock
 *, 
π∆_˛s
 *,

42 
π∆_˛s_£t_¥io
(
π∆_˛s
 *, 
uöt16_t
);

43 
uöt16_t
 
π∆_˛s_gë_¥io
(
π∆_˛s
 *);

45 
π∆_˛s_£t_¥Ÿocﬁ
(
π∆_˛s
 *, 
uöt16_t
);

46 
uöt16_t
 
π∆_˛s_gë_¥Ÿocﬁ
(
π∆_˛s
 *);

48 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/cls/basic.h

12 #i‚de‡
NETLINK_BASIC_H_


13 
	#NETLINK_BASIC_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/˛assifõr.h
>

17 
	~<√éök/rouã/˛s/em©ch.h
>

18 
	~<√éök/rouã/a˘i⁄.h
>

20 #ifde‡
__˝lu•lus


24 
π∆_basic_£t_èrgë
(
π∆_˛s
 *, 
uöt32_t
);

25 
uöt32_t
 
π∆_basic_gë_èrgë
(
π∆_˛s
 *);

26 
π∆_basic_£t_em©ch
(
π∆_˛s
 *,

27 
π∆_em©ch_åì
 *);

28 
π∆_em©ch_åì
 *
π∆_basic_gë_em©ch
(
π∆_˛s
 *);

29 
π∆_basic_add_a˘i⁄
(
π∆_˛s
 *, 
π∆_a˘
 *);

30 
π∆_basic_dñ_a˘i⁄
(
π∆_˛s
 *, 
π∆_a˘
 *);

32 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/cls/cgroup.h

12 #i‚de‡
NETLINK_CLS_CGROUP_H_


13 
	#NETLINK_CLS_CGROUP_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/ˇche.h
>

17 
	~<√éök/rouã/˛assifõr.h
>

18 
	~<√éök/rouã/˛s/em©ch.h
>

20 #ifde‡
__˝lu•lus


24 
π∆_cgroup_£t_em©ch
(
π∆_˛s
 *,

25 
π∆_em©ch_åì
 *);

26 
π∆_em©ch_åì
 * 
π∆_cgroup_gë_em©ch
(
π∆_˛s
 *);

28 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/cls/ematch.h

12 #i‚de‡
NETLINK_CLS_EMATCH_H_


13 
	#NETLINK_CLS_EMATCH_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/msg.h
>

17 
	~<√éök/rouã/˛assifõr.h
>

18 
	~<löux/pkt_˛s.h
>

20 #ifde‡
__˝lu•lus


25 
	#RTNL_EMATCH_PROGID
 2

	)

27 
π∆_em©ch
;

28 
π∆_em©ch_åì
;

33 
	sπ∆_em©ch_›s


35 
eo_köd
;

36 c⁄° * 
eo_«me
;

37 
size_t
 
eo_möÀn
;

38 
size_t
 
eo_d©Æí
;

40 (*
eo_∑r£
)(
π∆_em©ch
 *, *, 
size_t
);

41 (*
eo_dump
)(
π∆_em©ch
 *,

42 
∆_dump_∑øms
 *);

43 (*
eo_fûl
)(
π∆_em©ch
 *, 
∆_msg
 *);

44 (*
eo_‰ì
)(
π∆_em©ch
 *);

45 
∆_li°_hód
 
eo_li°
;

48 
π∆_em©ch_ªgi°î
(
π∆_em©ch_›s
 *);

49 
π∆_em©ch_›s
 * 
π∆_em©ch_lookup_›s
();

50 
π∆_em©ch_›s
 * 
π∆_em©ch_lookup_›s_by_«me
(const *);

52 
π∆_em©ch
 * 
π∆_em©ch_Æloc
();

53 
π∆_em©ch_add_chûd
(
π∆_em©ch
 *,

54 
π∆_em©ch
 *);

55 
π∆_em©ch_u∆ök
(
π∆_em©ch
 *);

56 
π∆_em©ch_‰ì
(
π∆_em©ch
 *);

58 * 
π∆_em©ch_d©a
(
π∆_em©ch
 *);

59 
π∆_em©ch_£t_Êags
(
π∆_em©ch
 *,

60 
uöt16_t
);

61 
π∆_em©ch_un£t_Êags
(
π∆_em©ch
 *,

62 
uöt16_t
);

63 
uöt16_t
 
π∆_em©ch_gë_Êags
(
π∆_em©ch
 *);

64 
π∆_em©ch_£t_›s
(
π∆_em©ch
 *,

65 
π∆_em©ch_›s
 *);

66 
π∆_em©ch_£t_köd
(
π∆_em©ch
 *,

67 
uöt16_t
);

68 
π∆_em©ch_£t_«me
(
π∆_em©ch
 *,

71 
π∆_em©ch_åì
 *
π∆_em©ch_åì_Æloc
(
uöt16_t
);

72 
π∆_em©ch_åì_‰ì
(
π∆_em©ch_åì
 *);

73 
π∆_em©ch_åì_add
(
π∆_em©ch_åì
 *,

74 
π∆_em©ch
 *);

76 
π∆_em©ch_∑r£_©å
(
∆©å
 *,

77 
π∆_em©ch_åì
 **);

78 
π∆_em©ch_fûl_©å
(
∆_msg
 *, ,

79 
π∆_em©ch_åì
 *);

80 
π∆_em©ch_åì_dump
(
π∆_em©ch_åì
 *,

81 
∆_dump_∑øms
 *);

84 
π∆_em©ch_∑r£_ex¥
(const *, **,

85 
π∆_em©ch_åì
 **);

87 * 
π∆_em©ch_off£t2txt
(
uöt8_t
, 
uöt16_t
,

88 *, 
size_t
);

89 * 
π∆_em©ch_›nd2txt
(
uöt8_t
, *, 
size_t
);

91 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/cls/ematch/cmp.h

12 #i‚de‡
NETLINK_CLS_EMATCH_CMP_H_


13 
	#NETLINK_CLS_EMATCH_CMP_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/˛s/em©ch.h
>

17 
	~<löux/tc_em©ch/tc_em_cmp.h
>

19 #ifde‡
__˝lu•lus


23 
π∆_em©ch_cmp_£t
(
π∆_em©ch
 *,

24 
tcf_em_cmp
 *);

25 
tcf_em_cmp
 *

26 
π∆_em©ch_cmp_gë
(
π∆_em©ch
 *);

28 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/cls/ematch/meta.h

12 #i‚de‡
NETLINK_CLS_EMATCH_META_H_


13 
	#NETLINK_CLS_EMATCH_META_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/˛s/em©ch.h
>

17 
	~<löux/tc_em©ch/tc_em_mëa.h
>

19 #ifde‡
__˝lu•lus


23 
π∆_mëa_vÆue
;

25 
π∆_mëa_vÆue
 * 
π∆_mëa_vÆue_Æloc_öt
(
uöt64_t
);

26 
π∆_mëa_vÆue
 * 
π∆_mëa_vÆue_Æloc_v¨
(*, 
size_t
);

27 
π∆_mëa_vÆue
 * 
π∆_mëa_vÆue_Æloc_id
(
uöt8_t
, 
uöt16_t
,

28 
uöt8_t
, 
uöt64_t
);

29 
π∆_mëa_vÆue_put
(
π∆_mëa_vÆue
 *);

31 
π∆_em©ch_mëa_£t_lvÆue
(
π∆_em©ch
 *,

32 
π∆_mëa_vÆue
 *);

33 
π∆_em©ch_mëa_£t_rvÆue
(
π∆_em©ch
 *,

34 
π∆_mëa_vÆue
 *);

35 
π∆_em©ch_mëa_£t_›î™d
(
π∆_em©ch
 *, 
uöt8_t
);

37 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/cls/ematch/nbyte.h

12 #i‚de‡
NETLINK_CLS_EMATCH_NBYTE_H_


13 
	#NETLINK_CLS_EMATCH_NBYTE_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/˛s/em©ch.h
>

17 
	~<löux/tc_em©ch/tc_em_nbyã.h
>

19 #ifde‡
__˝lu•lus


23 
π∆_em©ch_nbyã_£t_off£t
(
π∆_em©ch
 *,

24 
uöt8_t
, 
uöt16_t
);

25 
uöt16_t
 
π∆_em©ch_nbyã_gë_off£t
(
π∆_em©ch
 *);

26 
uöt8_t
 
π∆_em©ch_nbyã_gë_œyî
(
π∆_em©ch
 *);

27 
π∆_em©ch_nbyã_£t_∑âîn
(
π∆_em©ch
 *,

28 
uöt8_t
 *, 
size_t
);

29 
uöt8_t
 * 
π∆_em©ch_nbyã_gë_∑âîn
(
π∆_em©ch
 *);

30 
size_t
 
π∆_em©ch_nbyã_gë_Àn
(
π∆_em©ch
 *);

32 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/cls/ematch/text.h

12 #i‚de‡
NETLINK_CLS_EMATCH_TEXT_H_


13 
	#NETLINK_CLS_EMATCH_TEXT_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/˛s/em©ch.h
>

17 
	~<löux/tc_em©ch/tc_em_ãxt.h
>

19 #ifde‡
__˝lu•lus


23 
π∆_em©ch_ãxt_£t_‰om
(
π∆_em©ch
 *,

24 
uöt8_t
, 
uöt16_t
);

25 
uöt16_t
 
π∆_em©ch_ãxt_gë_‰om_off£t
(
π∆_em©ch
 *);

26 
uöt8_t
 
π∆_em©ch_ãxt_gë_‰om_œyî
(
π∆_em©ch
 *);

27 
π∆_em©ch_ãxt_£t_to
(
π∆_em©ch
 *,

28 
uöt8_t
, 
uöt16_t
);

29 
uöt16_t
 
π∆_em©ch_ãxt_gë_to_off£t
(
π∆_em©ch
 *);

30 
uöt8_t
 
π∆_em©ch_ãxt_gë_to_œyî
(
π∆_em©ch
 *);

31 
π∆_em©ch_ãxt_£t_∑âîn
(
π∆_em©ch
 *,

32 *, 
size_t
);

33 * 
π∆_em©ch_ãxt_gë_∑âîn
(
π∆_em©ch
 *);

34 
size_t
 
π∆_em©ch_ãxt_gë_Àn
(
π∆_em©ch
 *);

35 
π∆_em©ch_ãxt_£t_Ægo
(
π∆_em©ch
 *, const *);

36 * 
π∆_em©ch_ãxt_gë_Ægo
(
π∆_em©ch
 *);

38 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/cls/fw.h

14 #i‚de‡
NETLINK_FW_H_


15 
	#NETLINK_FW_H_


	)

17 
	~<√éök/√éök.h
>

18 
	~<√éök/rouã/˛assifõr.h
>

20 #ifde‡
__˝lu•lus


24 
π∆_fw_£t_˛assid
(
π∆_˛s
 *, 
uöt32_t
);

25 
π∆_fw_£t_mask
(
π∆_˛s
 *, 
uöt32_t
);

27 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/cls/police.h

12 #i‚de‡
NETLINK_CLS_POLICE_H_


13 
	#NETLINK_CLS_POLICE_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/ˇche.h
>

18 #ifde‡
__˝lu•lus


22 * 
∆_pﬁi˚2°r
(, *, 
size_t
);

23 
∆_°r2pﬁi˚
(const *);

25 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/cls/u32.h

12 #i‚de‡
NETLINK_U32_H_


13 
	#NETLINK_U32_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/ˇche.h
>

17 
	~<√éök/rouã/˛assifõr.h
>

18 
	~<√éök/rouã/a˘i⁄.h
>

20 #ifde‡
__˝lu•lus


24 
π∆_u32_£t_h™dÀ
(
π∆_˛s
 *, , , );

25 
π∆_u32_£t_˛assid
(
π∆_˛s
 *, 
uöt32_t
);

26 
π∆_u32_£t_divis‹
(
π∆_˛s
 *, 
uöt32_t
);

27 
π∆_u32_£t_lök
(
π∆_˛s
 *, 
uöt32_t
);

28 
π∆_u32_£t_hashèbÀ
(
π∆_˛s
 *, 
uöt32_t
);

29 
π∆_u32_£t_hashmask
(
π∆_˛s
 *, 
uöt32_t
, uint32_t);

30 
π∆_u32_£t_˛s_ãrmöÆ
(
π∆_˛s
 *);

32 
π∆_u32_£t_Êags
(
π∆_˛s
 *, );

33 
π∆_u32_add_key
(
π∆_˛s
 *, 
uöt32_t
, uint32_t,

35 
π∆_u32_gë_key
(
π∆_˛s
 *, 
uöt8_t
, 
uöt32_t
 *, uint32_t *,

37 
π∆_u32_add_key_uöt8
(
π∆_˛s
 *, 
uöt8_t
, uint8_t,

39 
π∆_u32_add_key_uöt16
(
π∆_˛s
 *, 
uöt16_t
, uint16_t,

41 
π∆_u32_add_key_uöt32
(
π∆_˛s
 *, 
uöt32_t
, uint32_t,

43 
π∆_u32_add_key_ö_addr
(
π∆_˛s
 *, c⁄° 
ö_addr
 *,

44 
uöt8_t
, , );

45 
π∆_u32_add_key_ö6_addr
(
π∆_˛s
 *, c⁄° 
ö6_addr
 *,

46 
uöt8_t
, , );

47 
π∆_u32_add_a˘i⁄
(
π∆_˛s
 *, 
π∆_a˘
 *);

48 
π∆_u32_dñ_a˘i⁄
(
π∆_˛s
 *, 
π∆_a˘
 *);

50 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/link.h

12 #i‚de‡
NETLINK_LINK_H_


13 
	#NETLINK_LINK_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/ˇche.h
>

17 
	~<√éök/addr.h
>

18 
	~<löux/if.h
>

19 
	~<sys/ty≥s.h
>

21 #ifde‡
__˝lu•lus


33 
π∆_lök
;

39 
RTNL_LINK_RX_PACKETS
,

40 
RTNL_LINK_TX_PACKETS
,

41 
RTNL_LINK_RX_BYTES
,

42 
RTNL_LINK_TX_BYTES
,

43 
RTNL_LINK_RX_ERRORS
,

44 
RTNL_LINK_TX_ERRORS
,

45 
RTNL_LINK_RX_DROPPED
,

46 
RTNL_LINK_TX_DROPPED
,

47 
RTNL_LINK_RX_COMPRESSED
,

48 
RTNL_LINK_TX_COMPRESSED
,

49 
RTNL_LINK_RX_FIFO_ERR
,

50 
RTNL_LINK_TX_FIFO_ERR
,

51 
RTNL_LINK_RX_LEN_ERR
,

52 
RTNL_LINK_RX_OVER_ERR
,

53 
RTNL_LINK_RX_CRC_ERR
,

54 
RTNL_LINK_RX_FRAME_ERR
,

55 
RTNL_LINK_RX_MISSED_ERR
,

56 
RTNL_LINK_TX_ABORT_ERR
,

57 
RTNL_LINK_TX_CARRIER_ERR
,

58 
RTNL_LINK_TX_HBEAT_ERR
,

59 
RTNL_LINK_TX_WIN_ERR
,

60 
RTNL_LINK_COLLISIONS
,

61 
RTNL_LINK_MULTICAST
,

62 
RTNL_LINK_IP6_INPKTS
,

63 
RTNL_LINK_IP6_INHDRERRORS
,

64 
RTNL_LINK_IP6_INTOOBIGERRORS
,

65 
RTNL_LINK_IP6_INNOROUTES
,

66 
RTNL_LINK_IP6_INADDRERRORS
,

67 
RTNL_LINK_IP6_INUNKNOWNPROTOS
,

68 
RTNL_LINK_IP6_INTRUNCATEDPKTS
,

69 
RTNL_LINK_IP6_INDISCARDS
,

70 
RTNL_LINK_IP6_INDELIVERS
,

71 
RTNL_LINK_IP6_OUTFORWDATAGRAMS
,

72 
RTNL_LINK_IP6_OUTPKTS
,

73 
RTNL_LINK_IP6_OUTDISCARDS
,

74 
RTNL_LINK_IP6_OUTNOROUTES
,

75 
RTNL_LINK_IP6_REASMTIMEOUT
,

76 
RTNL_LINK_IP6_REASMREQDS
,

77 
RTNL_LINK_IP6_REASMOKS
,

78 
RTNL_LINK_IP6_REASMFAILS
,

79 
RTNL_LINK_IP6_FRAGOKS
,

80 
RTNL_LINK_IP6_FRAGFAILS
,

81 
RTNL_LINK_IP6_FRAGCREATES
,

82 
RTNL_LINK_IP6_INMCASTPKTS
,

83 
RTNL_LINK_IP6_OUTMCASTPKTS
,

84 
RTNL_LINK_IP6_INBCASTPKTS
,

85 
RTNL_LINK_IP6_OUTBCASTPKTS
,

86 
RTNL_LINK_IP6_INOCTETS
,

87 
RTNL_LINK_IP6_OUTOCTETS
,

88 
RTNL_LINK_IP6_INMCASTOCTETS
,

89 
RTNL_LINK_IP6_OUTMCASTOCTETS
,

90 
RTNL_LINK_IP6_INBCASTOCTETS
,

91 
RTNL_LINK_IP6_OUTBCASTOCTETS
,

92 
RTNL_LINK_ICMP6_INMSGS
,

93 
RTNL_LINK_ICMP6_INERRORS
,

94 
RTNL_LINK_ICMP6_OUTMSGS
,

95 
RTNL_LINK_ICMP6_OUTERRORS
,

96 
RTNL_LINK_ICMP6_CSUMERRORS
,

97 
RTNL_LINK_IP6_CSUMERRORS
,

98 
RTNL_LINK_IP6_NOECTPKTS
,

99 
RTNL_LINK_IP6_ECT1PKTS
,

100 
RTNL_LINK_IP6_ECT0PKTS
,

101 
RTNL_LINK_IP6_CEPKTS
,

102 
__RTNL_LINK_STATS_MAX
,

103 } 
	tπ∆_lök_°©_id_t
;

105 
	#RTNL_LINK_STATS_MAX
 (
__RTNL_LINK_STATS_MAX
 - 1)

	)

107 
∆a_pﬁicy
 
π _lök_pﬁicy
[];

109 
π∆_lök
 *
π∆_lök_Æloc
();

110 
π∆_lök_put
(
π∆_lök
 *);

112 
π∆_lök_Æloc_ˇche
(
∆_sock
 *, , 
∆_ˇche
 **);

113 
π∆_lök
 *
π∆_lök_gë
(
∆_ˇche
 *, );

114 
π∆_lök
 *
π∆_lök_gë_by_«me
(
∆_ˇche
 *, const *);

117 
π∆_lök_buûd_add_ªque°
(
π∆_lök
 *, ,

118 
∆_msg
 **);

119 
π∆_lök_add
(
∆_sock
 *, 
π∆_lök
 *, );

120 
π∆_lök_buûd_ch™ge_ªque°
(
π∆_lök
 *,

121 
π∆_lök
 *, ,

122 
∆_msg
 **);

123 
π∆_lök_ch™ge
(
∆_sock
 *, 
π∆_lök
 *,

124 
π∆_lök
 *, );

126 
π∆_lök_buûd_dñëe_ªque°
(c⁄° 
π∆_lök
 *,

127 
∆_msg
 **);

128 
π∆_lök_dñëe
(
∆_sock
 *, c⁄° 
π∆_lök
 *);

129 
π∆_lök_buûd_gë_ªque°
(, const *,

130 
∆_msg
 **);

131 
π∆_lök_gë_kî√l
(
∆_sock
 *, , const *,

132 
π∆_lök
 **);

135 * 
π∆_lök_i2«me
(
∆_ˇche
 *, , *, 
size_t
);

136 
π∆_lök_«me2i
(
∆_ˇche
 *, const *);

139 * 
π∆_lök_°©2°r
(, *, 
size_t
);

140 
π∆_lök_°r2°©
(const *);

143 * 
π∆_lök_Êags2°r
(, *, 
size_t
);

144 
π∆_lök_°r2Êags
(const *);

146 * 
π∆_lök_›î°©e2°r
(
uöt8_t
, *, 
size_t
);

147 
π∆_lök_°r2›î°©e
(const *);

149 * 
π∆_lök_mode2°r
(
uöt8_t
, *, 
size_t
);

150 
π∆_lök_°r2mode
(const *);

153 * 
π∆_lök_ˇºõr2°r
(
uöt8_t
, *, 
size_t
);

154 
π∆_lök_°r2ˇºõr
(const *);

157 
π∆_lök_£t_qdisc
(
π∆_lök
 *, const *);

158 * 
π∆_lök_gë_qdisc
(
π∆_lök
 *);

160 
π∆_lök_£t_«me
(
π∆_lök
 *, const *);

161 * 
π∆_lök_gë_«me
(
π∆_lök
 *);

163 
π∆_lök_£t_group
(
π∆_lök
 *, 
uöt32_t
);

164 
uöt32_t
 
π∆_lök_gë_group
(
π∆_lök
 *);

166 
π∆_lök_£t_Êags
(
π∆_lök
 *, );

167 
π∆_lök_un£t_Êags
(
π∆_lök
 *, );

168 
π∆_lök_gë_Êags
(
π∆_lök
 *);

170 
π∆_lök_£t_mtu
(
π∆_lök
 *, );

171 
π∆_lök_gë_mtu
(
π∆_lök
 *);

173 
π∆_lök_£t_txqÀn
(
π∆_lök
 *, );

174 
π∆_lök_gë_txqÀn
(
π∆_lök
 *);

176 
π∆_lök_£t_ifödex
(
π∆_lök
 *, );

177 
π∆_lök_gë_ifödex
(
π∆_lök
 *);

179 
π∆_lök_£t_Ámûy
(
π∆_lök
 *, );

180 
π∆_lök_gë_Ámûy
(
π∆_lök
 *);

182 
π∆_lök_£t_¨±y≥
(
π∆_lök
 *, );

183 
π∆_lök_gë_¨±y≥
(
π∆_lök
 *);

185 
π∆_lök_£t_addr
(
π∆_lök
 *, 
∆_addr
 *);

186 
∆_addr
 *
π∆_lök_gë_addr
(
π∆_lök
 *);

188 
π∆_lök_£t_brﬂdˇ°
(
π∆_lök
 *, 
∆_addr
 *);

189 
∆_addr
 *
π∆_lök_gë_brﬂdˇ°
(
π∆_lök
 *);

191 
π∆_lök_£t_lök
(
π∆_lök
 *, );

192 
π∆_lök_gë_lök
(
π∆_lök
 *);

194 
π∆_lök_£t_ma°î
(
π∆_lök
 *, );

195 
π∆_lök_gë_ma°î
(
π∆_lök
 *);

197 
π∆_lök_£t_ˇºõr
(
π∆_lök
 *, 
uöt8_t
);

198 
uöt8_t
 
π∆_lök_gë_ˇºõr
(
π∆_lök
 *);

200 
π∆_lök_£t_›î°©e
(
π∆_lök
 *, 
uöt8_t
);

201 
uöt8_t
 
π∆_lök_gë_›î°©e
(
π∆_lök
 *);

203 
π∆_lök_£t_lökmode
(
π∆_lök
 *, 
uöt8_t
);

204 
uöt8_t
 
π∆_lök_gë_lökmode
(
π∆_lök
 *);

206 c⁄° * 
π∆_lök_gë_iÁlüs
(
π∆_lök
 *);

207 
π∆_lök_£t_iÁlüs
(
π∆_lök
 *, const *);

209 
π∆_lök_gë_num_vf
(
π∆_lök
 *, 
uöt32_t
 *);

211 
uöt64_t
 
π∆_lök_gë_°©
(
π∆_lök
 *, 
π∆_lök_°©_id_t
);

212 
π∆_lök_£t_°©
(
π∆_lök
 *, 
π∆_lök_°©_id_t
,

213 c⁄° 
uöt64_t
);

215 
π∆_lök_£t_ty≥
(
π∆_lök
 *, const *);

216 * 
π∆_lök_gë_ty≥
(
π∆_lök
 *);

218 
π∆_lök_£t_¥omiscuôy
(
π∆_lök
 *, 
uöt32_t
);

219 
uöt32_t
 
π∆_lök_gë_¥omiscuôy
(
π∆_lök
 *);

221 
π∆_lök_£t_num_tx_queues
(
π∆_lök
 *, 
uöt32_t
);

222 
uöt32_t
 
π∆_lök_gë_num_tx_queues
(
π∆_lök
 *);

224 
π∆_lök_£t_num_rx_queues
(
π∆_lök
 *, 
uöt32_t
);

225 
uöt32_t
 
π∆_lök_gë_num_rx_queues
(
π∆_lök
 *);

227 
∆_d©a
 * 
π∆_lök_gë_phys_p‹t_id
(
π∆_lök
 *);

229 
π∆_lök_£t_ns_fd
(
π∆_lök
 *, );

230 
π∆_lök_gë_ns_fd
(
π∆_lök
 *);

231 
π∆_lök_£t_ns_pid
(
π∆_lök
 *, 
pid_t
);

232 
pid_t
 
π∆_lök_gë_ns_pid
(
π∆_lök
 *);

234 
π∆_lök_í¶ave_ifödex
(
∆_sock
 *, , );

235 
π∆_lök_í¶ave
(
∆_sock
 *, 
π∆_lök
 *,

236 
π∆_lök
 *);

237 
π∆_lök_ªÀa£_ifödex
(
∆_sock
 *, );

238 
π∆_lök_ªÀa£
(
∆_sock
 *, 
π∆_lök
 *);

239 
π∆_lök_fûl_öfo
(
∆_msg
 *, 
π∆_lök
 *);

240 
π∆_lök_öfo_∑r£
(
π∆_lök
 *, 
∆©å
 **);

244 
π∆_lök_£t_öfo_ty≥
(
π∆_lök
 *, c⁄° *Ë
__©åibuã__
((
dïªˇãd
));

245 * 
π∆_lök_gë_öfo_ty≥
(
π∆_lök
 *Ë
__©åibuã__
((
dïªˇãd
));

246 
π∆_lök_£t_weight
(
π∆_lök
 *, Ë
__©åibuã__
((
dïªˇãd
));

247 
π∆_lök_gë_weight
(
π∆_lök
 *Ë
__©åibuã__
((
dïªˇãd
));

250 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/link/api.h

12 #i‚de‡
NETLINK_DUMMY_LINK_API_H_


13 
	#NETLINK_DUMMY_LINK_API_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/lök.h
>

	@mylibnl/libnl-3.2.25/include/netlink/route/link/bonding.h

12 #i‚de‡
NETLINK_LINK_BONDING_H_


13 
	#NETLINK_LINK_BONDING_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/lök.h
>

18 #ifde‡
__˝lu•lus


22 
π∆_lök
 *
π∆_lök_b⁄d_Æloc
();

24 
π∆_lök_b⁄d_add
(
∆_sock
 *, const *,

25 
π∆_lök
 *);

27 
π∆_lök_b⁄d_í¶ave_ifödex
(
∆_sock
 *, , );

28 
π∆_lök_b⁄d_í¶ave
(
∆_sock
 *, 
π∆_lök
 *,

29 
π∆_lök
 *);

31 
π∆_lök_b⁄d_ªÀa£_ifödex
(
∆_sock
 *, );

32 
π∆_lök_b⁄d_ªÀa£
(
∆_sock
 *, 
π∆_lök
 *);

34 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/link/bridge.h

12 #i‚de‡
NETLINK_LINK_BRIDGE_H_


13 
	#NETLINK_LINK_BRIDGE_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/lök.h
>

18 #ifde‡
__˝lu•lus


26 
	eπ∆_lök_bridge_Êags
 {

27 
RTNL_BRIDGE_HAIRPIN_MODE
 = 0x0001,

28 
RTNL_BRIDGE_BPDU_GUARD
 = 0x0002,

29 
RTNL_BRIDGE_ROOT_BLOCK
 = 0x0004,

30 
RTNL_BRIDGE_FAST_LEAVE
 = 0x0008,

33 
π∆_lök
 *
π∆_lök_bridge_Æloc
();

35 
π∆_lök_is_bridge
(
π∆_lök
 *);

36 
π∆_lök_bridge_has_ext_öfo
(
π∆_lök
 *);

38 
π∆_lök_bridge_£t_p‹t_°©e
(
π∆_lök
 *, 
uöt8_t
 );

39 
π∆_lök_bridge_gë_p‹t_°©e
(
π∆_lök
 *);

41 
π∆_lök_bridge_£t_¥i‹ôy
(
π∆_lök
 *, 
uöt16_t
);

42 
π∆_lök_bridge_gë_¥i‹ôy
(
π∆_lök
 *);

44 
π∆_lök_bridge_£t_co°
(
π∆_lök
 *, 
uöt32_t
);

45 
π∆_lök_bridge_gë_co°
(
π∆_lök
 *, 
uöt32_t
 *);

47 
π∆_lök_bridge_un£t_Êags
(
π∆_lök
 *, );

48 
π∆_lök_bridge_£t_Êags
(
π∆_lök
 *, );

49 
π∆_lök_bridge_gë_Êags
(
π∆_lök
 *);

51 * 
π∆_lök_bridge_Êags2°r
(, *, 
size_t
);

52 
π∆_lök_bridge_°r2Êags
(const *);

54 
π∆_lök_bridge_add
(
∆_sock
 *
sk
, c⁄° *
«me
);

55 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/link/can.h

12 #i‚de‡
NETLINK_LINK_CAN_H_


13 
	#NETLINK_LINK_CAN_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/lök.h
>

17 
	~<löux/ˇn/√éök.h
>

19 #ifde‡
__˝lu•lus


23 
π∆_lök_is_ˇn
(
π∆_lök
 *
lök
);

25 *
π∆_lök_ˇn_˘æmode2°r
(, *, 
size_t
);

26 
π∆_lök_ˇn_°r2˘æmode
(const *);

28 
π∆_lök_ˇn_ª°¨t
(
π∆_lök
 *);

29 
π∆_lök_ˇn_‰eq
(
π∆_lök
 *, 
uöt32_t
 *);

30 
π∆_lök_ˇn_°©e
(
π∆_lök
 *, 
uöt32_t
 *);

32 
π∆_lök_ˇn_bîr_rx
(
π∆_lök
 *);

33 
π∆_lök_ˇn_bîr_tx
(
π∆_lök
 *);

34 
π∆_lök_ˇn_bîr
(
π∆_lök
 *, 
ˇn_bîr_cou¡î
 *);

36 
π∆_lök_ˇn_gë_bt_c⁄°
(
π∆_lök
 *,

37 
ˇn_bôtimög_c⁄°
 *);

38 
π∆_lök_ˇn_gë_bôtimög
(
π∆_lök
 *,

39 
ˇn_bôtimög
 *);

40 
π∆_lök_ˇn_£t_bôtimög
(
π∆_lök
 *,

41 
ˇn_bôtimög
 *);

43 
π∆_lök_ˇn_gë_bôøã
(
π∆_lök
 *, 
uöt32_t
 *);

44 
π∆_lök_ˇn_£t_bôøã
(
π∆_lök
 *, 
uöt32_t
);

46 
π∆_lök_ˇn_gë_ßm∂e_poöt
(
π∆_lök
 *, 
uöt32_t
 *);

47 
π∆_lök_ˇn_£t_ßm∂e_poöt
(
π∆_lök
 *, 
uöt32_t
);

49 
π∆_lök_ˇn_gë_ª°¨t_ms
(
π∆_lök
 *, 
uöt32_t
 *);

50 
π∆_lök_ˇn_£t_ª°¨t_ms
(
π∆_lök
 *, 
uöt32_t
);

52 
π∆_lök_ˇn_gë_˘æmode
(
π∆_lök
 *, 
uöt32_t
 *);

53 
π∆_lök_ˇn_£t_˘æmode
(
π∆_lök
 *, 
uöt32_t
);

54 
π∆_lök_ˇn_un£t_˘æmode
(
π∆_lök
 *, 
uöt32_t
);

56 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/link/inet.h

12 #i‚de‡
NETLINK_LINK_INET_H_


13 
	#NETLINK_LINK_INET_H_


	)

15 
	~<√éök/√éök.h
>

17 #ifde‡
__˝lu•lus


21 c⁄° * 
π∆_lök_öë_devc⁄f2°r
(, *, 
size_t
);

22 
π∆_lök_öë_°r2devc⁄f
(const *);

24 
π∆_lök_öë_gë_c⁄f
(
π∆_lök
 *,

25 c⁄° , 
uöt32_t
 *);

26 
π∆_lök_öë_£t_c⁄f
(
π∆_lök
 *,

27 c⁄° , 
uöt32_t
);

29 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/link/info-api.h

12 #i‚de‡
NETLINK_DUMMY_LINK_INFO_API_H_


13 
	#NETLINK_DUMMY_LINK_INFO_API_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/lök.h
>

	@mylibnl/libnl-3.2.25/include/netlink/route/link/ip6tnl.h

12 #i‚de‡
NETLINK_LINK_IP6TNL_H_


13 
	#NETLINK_LINK_IP6TNL_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/lök.h
>

18 #ifde‡
__˝lu•lus


22 
π∆_lök
 *
π∆_lök_ù6_äl_Æloc
();

23 
π∆_lök_ù6_äl_add
(
∆_sock
 *
sk
, c⁄° *
«me
);

25 
π∆_lök_ù6_äl_£t_lök
(
π∆_lök
 *
lök
, 
uöt32_t
 
ödex
);

26 
uöt32_t
 
π∆_lök_ù6_äl_gë_lök
(
π∆_lök
 *
lök
);

28 
π∆_lök_ù6_äl_£t_loˇl
(
π∆_lök
 *
lök
, 
ö6_addr
 *);

29 
π∆_lök_ù6_äl_gë_loˇl
(
π∆_lök
 *
lök
, 
ö6_addr
 *
addr
);

31 
π∆_lök_ù6_äl_£t_ªmŸe
(
π∆_lök
 *
lök
, 
ö6_addr
 *);

32 
π∆_lök_ù6_äl_gë_ªmŸe
(
π∆_lök
 *
lök
, 
ö6_addr
 *);

34 
π∆_lök_ù6_äl_£t_âl
(
π∆_lök
 *
lök
, 
uöt8_t
 
âl
);

35 
uöt8_t
 
π∆_lök_ù6_äl_gë_âl
(
π∆_lök
 *
lök
);

37 
π∆_lök_ù6_äl_£t_tos
(
π∆_lök
 *
lök
, 
uöt8_t
 
tos
);

38 
uöt8_t
 
π∆_lök_ù6_äl_gë_tos
(
π∆_lök
 *
lök
);

40 
π∆_lök_ù6_äl_£t_íˇ∂imô
(
π∆_lök
 *
lök
, 
uöt8_t
 
íˇp_limô
);

41 
uöt8_t
 
π∆_lök_ù6_äl_gë_íˇ∂imô
(
π∆_lök
 *
lök
);

43 
π∆_lök_ù6_äl_£t_Êags
(
π∆_lök
 *
lök
, 
uöt32_t
 
Êags
);

44 
uöt32_t
 
π∆_lök_ù6_äl_gë_Êags
(
π∆_lök
 *
lök
);

46 
uöt32_t
 
π∆_lök_ù6_äl_gë_Êowöfo
(
π∆_lök
 *
lök
);

47 
π∆_lök_ù6_äl_£t_Êowöfo
(
π∆_lök
 *
lök
, 
uöt32_t
 
Êowöfo
);

49 
π∆_lök_ù6_äl_£t_¥Ÿo
(
π∆_lök
 *
lök
, 
uöt8_t
 
¥Ÿo
);

50 
uöt8_t
 
π∆_lök_ù6_äl_gë_¥Ÿo
(
π∆_lök
 *
lök
);

52 #ifde‡
_˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/link/ipgre.h

12 #i‚de‡
NETLINK_LINK_IPGRE_H_


13 
	#NETLINK_LINK_IPGRE_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/lök.h
>

18 #ifde‡
__˝lu•lus


22 
π∆_lök
 *
π∆_lök_ùgª_Æloc
();

23 
π∆_lök_ùgª_add
(
∆_sock
 *
sk
, c⁄° *
«me
);

25 
π∆_lök_ùgª_£t_lök
(
π∆_lök
 *
lök
, 
uöt32_t
 
ödex
);

26 
uöt32_t
 
π∆_lök_ùgª_gë_lök
(
π∆_lök
 *
lök
);

28 
π∆_lök_ùgª_£t_iÊags
(
π∆_lök
 *
lök
, 
uöt16_t
 
iÊags
);

29 
uöt16_t
 
π∆_lök_ùgª_gë_iÊags
(
π∆_lök
 *
lök
);

31 
π∆_lök_ùgª_£t_oÊags
(
π∆_lök
 *
lök
, 
uöt16_t
 
oÊags
);

32 
uöt16_t
 
π∆_lök_ùgª_gë_oÊags
(
π∆_lök
 *
lök
);

34 
π∆_lök_ùgª_£t_ikey
(
π∆_lök
 *
lök
, 
uöt32_t
 
ikey
);

35 
uöt32_t
 
π∆_lök_ùgª_gë_ikey
(
π∆_lök
 *
lök
);

37 
π∆_lök_ùgª_£t_okey
(
π∆_lök
 *
lök
, 
uöt32_t
 
okey
);

38 
uöt32_t
 
π∆_lök_ùgª_gë_okey
(
π∆_lök
 *
lök
);

40 
π∆_lök_ùgª_£t_loˇl
(
π∆_lök
 *
lök
, 
uöt32_t
 
addr
);

41 
uöt32_t
 
π∆_lök_ùgª_gë_loˇl
(
π∆_lök
 *
lök
);

43 
π∆_lök_ùgª_£t_ªmŸe
(
π∆_lök
 *
lök
, 
uöt32_t
 
addr
);

44 
uöt32_t
 
π∆_lök_ùgª_gë_ªmŸe
(
π∆_lök
 *
lök
);

46 
π∆_lök_ùgª_£t_âl
(
π∆_lök
 *
lök
, 
uöt8_t
 
âl
);

47 
uöt8_t
 
π∆_lök_ùgª_gë_âl
(
π∆_lök
 *
lök
);

49 
π∆_lök_ùgª_£t_tos
(
π∆_lök
 *
lök
, 
uöt8_t
 
tos
);

50 
uöt8_t
 
π∆_lök_ùgª_gë_tos
(
π∆_lök
 *
lök
);

52 
π∆_lök_ùgª_£t_pmtudisc
(
π∆_lök
 *
lök
, 
uöt8_t
 
pmtudisc
);

53 
uöt8_t
 
π∆_lök_ùgª_gë_pmtudisc
(
π∆_lök
 *
lök
);

55 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/link/ipip.h

12 #i‚de‡
NETLINK_LINK_IPIP_H_


13 
	#NETLINK_LINK_IPIP_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/lök.h
>

18 #ifde‡
__˝lu•lus


22 
π∆_lök
 *
π∆_lök_ùù_Æloc
();

23 
π∆_lök_ùù_add
(
∆_sock
 *
sk
, c⁄° *
«me
);

25 
uöt32_t
 
π∆_lök_ùù_gë_lök
(
π∆_lök
 *
lök
);

26 
π∆_lök_ùù_£t_lök
(
π∆_lök
 *
lök
, 
uöt32_t
 
ödex
);

28 
π∆_lök_ùù_£t_loˇl
(
π∆_lök
 *
lök
, 
uöt32_t
 
addr
);

29 
uöt32_t
 
π∆_lök_ùù_gë_loˇl
(
π∆_lök
 *
lök
);

31 
π∆_lök_ùù_£t_ªmŸe
(
π∆_lök
 *
lök
, 
uöt32_t
 
addr
);

32 
uöt32_t
 
π∆_lök_ùù_gë_ªmŸe
(
π∆_lök
 *
lök
);

34 
π∆_lök_ùù_£t_âl
(
π∆_lök
 *
lök
, 
uöt8_t
 
âl
);

35 
uöt8_t
 
π∆_lök_ùù_gë_âl
(
π∆_lök
 *
lök
);

37 
π∆_lök_ùù_£t_tos
(
π∆_lök
 *
lök
, 
uöt8_t
 
tos
);

38 
uöt8_t
 
π∆_lök_ùù_gë_tos
(
π∆_lök
 *
lök
);

40 
π∆_lök_ùù_£t_pmtudisc
(
π∆_lök
 *
lök
, 
uöt8_t
 
pmtudisc
);

41 
uöt8_t
 
π∆_lök_ùù_gë_pmtudisc
(
π∆_lök
 *
lök
);

43 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/link/ipvti.h

12 #i‚de‡
NETLINK_LINK_IPVTI_H_


13 
	#NETLINK_LINK_IPVTI_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/lök.h
>

18 #ifde‡
__˝lu•lus


21 
π∆_lök
 *
π∆_lök_ùvti_Æloc
();

22 
π∆_lök_ùvti_add
(
∆_sock
 *
sk
, c⁄° *
«me
);

24 
π∆_lök_ùvti_£t_lök
(
π∆_lök
 *
lök
, 
uöt32_t
 
ödex
);

25 
uöt32_t
 
π∆_lök_ùvti_gë_lök
(
π∆_lök
 *
lök
);

27 
π∆_lök_ùvti_£t_ikey
(
π∆_lök
 *
lök
, 
uöt32_t
 
ikey
);

28 
uöt32_t
 
π∆_lök_gë_ikey
(
π∆_lök
 *
lök
);

30 
π∆_lök_ùvti_£t_okey
(
π∆_lök
 *
lök
, 
uöt32_t
 
okey
);

31 
uöt32_t
 
π∆_lök_gë_okey
(
π∆_lök
 *
lök
);

33 
π∆_lök_ùvti_£t_loˇl
(
π∆_lök
 *
lök
, 
uöt32_t
 
addr
);

34 
uöt32_t
 
π∆_lök_gë_loˇl
(
π∆_lök
 *
lök
);

36 
π∆_lök_ùvti_£t_ªmŸe
(
π∆_lök
 *
lök
, 
uöt32_t
 
addr
);

37 
uöt32_t
 
π∆_lök_gë_ªmŸe
(
π∆_lök
 *
lök
);

39 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/link/macvlan.h

12 #i‚de‡
NETLINK_LINK_MACVLAN_H_


13 
	#NETLINK_LINK_MACVLAN_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/lök.h
>

18 #ifde‡
__˝lu•lus


22 
π∆_lök
 *
π∆_lök_macvœn_Æloc
();

24 
π∆_lök_is_macvœn
(
π∆_lök
 *);

26 * 
π∆_lök_macvœn_mode2°r
(, *, 
size_t
);

27 
π∆_lök_macvœn_°r2mode
(const *);

29 * 
π∆_lök_macvœn_Êags2°r
(, *, 
size_t
);

30 
π∆_lök_macvœn_°r2Êags
(const *);

32 
π∆_lök_macvœn_£t_mode
(
π∆_lök
 *,

33 
uöt32_t
);

34 
uöt32_t
 
π∆_lök_macvœn_gë_mode
(
π∆_lök
 *);

36 
π∆_lök_macvœn_£t_Êags
(
π∆_lök
 *,

37 
uöt16_t
);

38 
π∆_lök_macvœn_un£t_Êags
(
π∆_lök
 *,

39 
uöt16_t
);

40 
uöt16_t
 
π∆_lök_macvœn_gë_Êags
(
π∆_lök
 *);

42 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/link/sit.h

12 #i‚de‡
NETLINK_LINK_SIT_H_


13 
	#NETLINK_LINK_SIT_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/lök.h
>

18 #ifde‡
__˝lu•lus


22 
π∆_lök
 *
π∆_lök_sô_Æloc
();

23 
π∆_lök_sô_add
(
∆_sock
 *
sk
, c⁄° *
«me
);

25 
π∆_lök_sô_£t_lök
(
π∆_lök
 *
lök
, 
uöt32_t
 
ödex
);

26 
uöt32_t
 
π∆_lök_sô_gë_lök
(
π∆_lök
 *
lök
);

28 
π∆_lök_sô_£t_loˇl
(
π∆_lök
 *
lök
, 
uöt32_t
 
addr
);

29 
uöt32_t
 
π∆_lök_gë_sô_loˇl
(
π∆_lök
 *
lök
);

31 
π∆_lök_sô_£t_ªmŸe
(
π∆_lök
 *
lök
, 
uöt32_t
 
addr
);

32 
uöt32_t
 
π∆_lök_sô_gë_ªmŸe
(
π∆_lök
 *
lök
);

34 
π∆_lök_sô_£t_âl
(
π∆_lök
 *
lök
, 
uöt8_t
 
âl
);

35 
uöt8_t
 
π∆_lök_sô_gë_âl
(
π∆_lök
 *
lök
);

37 
π∆_lök_sô_£t_tos
(
π∆_lök
 *
lök
, 
uöt8_t
 
tos
);

38 
uöt8_t
 
π∆_lök_sô_gë_tos
(
π∆_lök
 *
lök
);

40 
π∆_lök_sô_£t_pmtudisc
(
π∆_lök
 *
lök
, 
uöt8_t
 
pmtudisc
);

41 
uöt8_t
 
π∆_lök_sô_gë_pmtudisc
(
π∆_lök
 *
lök
);

43 
π∆_lök_sô_£t_Êags
(
π∆_lök
 *
lök
, 
uöt16_t
 
Êags
);

44 
uöt16_t
 
π∆_lök_sô_gë_Êags
(
π∆_lök
 *
lök
);

46 
π∆_lök_sô_£t_¥Ÿo
(
π∆_lök
 *
lök
, 
uöt8_t
 
¥Ÿo
);

47 
uöt8_t
 
π∆_lök_gë_¥Ÿo
(
π∆_lök
 *
lök
);

49 #ifde‡
_˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/link/veth.h

12 #i‚de‡
NETLINK_LINK_VETH_H_


13 
	#NETLINK_LINK_VETH_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/lök.h
>

17 
	~<sys/ty≥s.h
>

19 #ifde‡
__˝lu•lus


23 
π∆_lök
 *
π∆_lök_vëh_Æloc
();

24 
π∆_lök_vëh_ªÀa£
(
π∆_lök
 *);

26 
π∆_lök_is_vëh
(
π∆_lök
 *);

28 
π∆_lök
 *
π∆_lök_vëh_gë_≥î
(rtnl_link *);

29 
π∆_lök_vëh_add
(
∆_sock
 *
sock
, c⁄° *
«me
,

30 c⁄° *
≥î
, 
pid_t
 
pid
);

32 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/link/vlan.h

12 #i‚de‡
NETLINK_LINK_VLAN_H_


13 
	#NETLINK_LINK_VLAN_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/lök.h
>

18 #ifde‡
__˝lu•lus


22 
	svœn_m≠


24 
uöt32_t
 
vm_‰om
;

25 
uöt32_t
 
vm_to
;

28 
	#VLAN_PRIO_MAX
 7

	)

30 
π∆_lök
 *
π∆_lök_vœn_Æloc
();

32 
π∆_lök_is_vœn
(
π∆_lök
 *);

34 * 
π∆_lök_vœn_Êags2°r
(, *, 
size_t
);

35 
π∆_lök_vœn_°r2Êags
(const *);

37 
π∆_lök_vœn_£t_¥Ÿocﬁ
(
π∆_lök
 *
lök
, 
uöt16_t
);

38 
π∆_lök_vœn_gë_¥Ÿocﬁ
(
π∆_lök
 *
lök
);

40 
π∆_lök_vœn_£t_id
(
π∆_lök
 *, 
uöt16_t
);

41 
π∆_lök_vœn_gë_id
(
π∆_lök
 *);

43 
π∆_lök_vœn_£t_Êags
(
π∆_lök
 *,

45 
π∆_lök_vœn_un£t_Êags
(
π∆_lök
 *,

47 
π∆_lök_vœn_gë_Êags
(
π∆_lök
 *);

49 
π∆_lök_vœn_£t_ögªss_m≠
(
π∆_lök
 *,

50 , 
uöt32_t
);

51 
uöt32_t
 * 
π∆_lök_vœn_gë_ögªss_m≠
(
π∆_lök
 *);

53 
π∆_lök_vœn_£t_egªss_m≠
(
π∆_lök
 *,

54 
uöt32_t
, );

55 
vœn_m≠
 *
π∆_lök_vœn_gë_egªss_m≠
(
π∆_lök
 *,

58 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/link/vxlan.h

12 #i‚de‡
NETLINK_LINK_VXLAN_H_


13 
	#NETLINK_LINK_VXLAN_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/lök.h
>

18 #ifde‡
__˝lu•lus


22 
	#VXLAN_ID_MAX
 16777215

	)

24 
π∆_lök
 *
π∆_lök_vxœn_Æloc
();

26 
π∆_lök_is_vxœn
(
π∆_lök
 *);

28 
π∆_lök_vxœn_£t_id
(
π∆_lök
 *, 
uöt32_t
);

29 
π∆_lök_vxœn_gë_id
(
π∆_lök
 *, 
uöt32_t
 *);

31 
π∆_lök_vxœn_£t_group
(
π∆_lök
 *, 
∆_addr
 *);

32 
π∆_lök_vxœn_gë_group
(
π∆_lök
 *, 
∆_addr
 **);

34 
π∆_lök_vxœn_£t_lök
(
π∆_lök
 *, 
uöt32_t
);

35 
π∆_lök_vxœn_gë_lök
(
π∆_lök
 *, 
uöt32_t
 *);

37 
π∆_lök_vxœn_£t_loˇl
(
π∆_lök
 *, 
∆_addr
 *);

38 
π∆_lök_vxœn_gë_loˇl
(
π∆_lök
 *, 
∆_addr
 **);

40 
π∆_lök_vxœn_£t_âl
(
π∆_lök
 *, 
uöt8_t
);

41 
π∆_lök_vxœn_gë_âl
(
π∆_lök
 *);

43 
π∆_lök_vxœn_£t_tos
(
π∆_lök
 *, 
uöt8_t
);

44 
π∆_lök_vxœn_gë_tos
(
π∆_lök
 *);

46 
π∆_lök_vxœn_£t_À¨nög
(
π∆_lök
 *, 
uöt8_t
);

47 
π∆_lök_vxœn_gë_À¨nög
(
π∆_lök
 *);

48 
π∆_lök_vxœn_íabÀ_À¨nög
(
π∆_lök
 *);

49 
π∆_lök_vxœn_dißbÀ_À¨nög
(
π∆_lök
 *);

51 
π∆_lök_vxœn_£t_ageög
(
π∆_lök
 *, 
uöt32_t
);

52 
π∆_lök_vxœn_gë_ageög
(
π∆_lök
 *, 
uöt32_t
 *);

54 
π∆_lök_vxœn_£t_limô
(
π∆_lök
 *, 
uöt32_t
);

55 
π∆_lök_vxœn_gë_limô
(
π∆_lök
 *, 
uöt32_t
 *);

57 
π∆_lök_vxœn_£t_p‹t_ønge
(
π∆_lök
 *,

58 
iÊa_vxœn_p‹t_ønge
 *);

59 
π∆_lök_vxœn_gë_p‹t_ønge
(
π∆_lök
 *,

60 
iÊa_vxœn_p‹t_ønge
 *);

62 
π∆_lök_vxœn_£t_¥oxy
(
π∆_lök
 *, 
uöt8_t
);

63 
π∆_lök_vxœn_gë_¥oxy
(
π∆_lök
 *);

64 
π∆_lök_vxœn_íabÀ_¥oxy
(
π∆_lök
 *);

65 
π∆_lök_vxœn_dißbÀ_¥oxy
(
π∆_lök
 *);

67 
π∆_lök_vxœn_£t_rsc
(
π∆_lök
 *, 
uöt8_t
);

68 
π∆_lök_vxœn_gë_rsc
(
π∆_lök
 *);

69 
π∆_lök_vxœn_íabÀ_rsc
(
π∆_lök
 *);

70 
π∆_lök_vxœn_dißbÀ_rsc
(
π∆_lök
 *);

72 
π∆_lök_vxœn_£t_l2miss
(
π∆_lök
 *, 
uöt8_t
);

73 
π∆_lök_vxœn_gë_l2miss
(
π∆_lök
 *);

74 
π∆_lök_vxœn_íabÀ_l2miss
(
π∆_lök
 *);

75 
π∆_lök_vxœn_dißbÀ_l2miss
(
π∆_lök
 *);

77 
π∆_lök_vxœn_£t_l3miss
(
π∆_lök
 *, 
uöt8_t
);

78 
π∆_lök_vxœn_gë_l3miss
(
π∆_lök
 *);

79 
π∆_lök_vxœn_íabÀ_l3miss
(
π∆_lök
 *);

80 
π∆_lök_vxœn_dißbÀ_l3miss
(
π∆_lök
 *);

82 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/neighbour.h

12 #i‚de‡
NETLINK_NEIGHBOUR_H_


13 
	#NETLINK_NEIGHBOUR_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/ˇche.h
>

17 
	~<√éök/addr.h
>

19 #ifde‡
__˝lu•lus


23 
π∆_√igh
;

25 
π∆_√igh
 *
π∆_√igh_Æloc
();

26 
π∆_√igh_put
(
π∆_√igh
 *);

28 
π∆_√igh_Æloc_ˇche
(
∆_sock
 *, 
∆_ˇche
 **);

29 
π∆_√igh
 *
π∆_√igh_gë
(
∆_ˇche
 *, ,

30 
∆_addr
 *);

32 
π∆_√igh_∑r£
(
∆msghdr
 *, 
π∆_√igh
 **);

34 * 
π∆_√igh_°©e2°r
(, *, 
size_t
);

35 
π∆_√igh_°r2°©e
(const *);

37 * 
π∆_√igh_Êags2°r
(, *, 
size_t
);

38 
π∆_√igh_°r2Êag
(const *);

40 
π∆_√igh_add
(
∆_sock
 *, 
π∆_√igh
 *, );

41 
π∆_√igh_buûd_add_ªque°
(
π∆_√igh
 *, ,

42 
∆_msg
 **);

44 
π∆_√igh_dñëe
(
∆_sock
 *, 
π∆_√igh
 *, );

45 
π∆_√igh_buûd_dñëe_ªque°
(
π∆_√igh
 *, ,

46 
∆_msg
 **);

48 
π∆_√igh_£t_°©e
(
π∆_√igh
 *, );

49 
π∆_√igh_gë_°©e
(
π∆_√igh
 *);

50 
π∆_√igh_un£t_°©e
(
π∆_√igh
 *,

53 
π∆_√igh_£t_Êags
(
π∆_√igh
 *,

55 
π∆_√igh_un£t_Êags
(
π∆_√igh
 *,

57 
π∆_√igh_gë_Êags
(
π∆_√igh
 *);

59 
π∆_√igh_£t_ifödex
(
π∆_√igh
 *,

61 
π∆_√igh_gë_ifödex
(
π∆_√igh
 *);

63 
π∆_√igh_£t_Œaddr
(
π∆_√igh
 *,

64 
∆_addr
 *);

65 
∆_addr
 * 
π∆_√igh_gë_Œaddr
(
π∆_√igh
 *);

67 
π∆_√igh_£t_d°
(
π∆_√igh
 *,

68 
∆_addr
 *);

69 
∆_addr
 * 
π∆_√igh_gë_d°
(
π∆_√igh
 *);

71 
π∆_√igh_£t_ty≥
(
π∆_√igh
 *, );

72 
π∆_√igh_gë_ty≥
(
π∆_√igh
 *);

74 
π∆_√igh_£t_Ámûy
(
π∆_√igh
 *, );

75 
π∆_√igh_gë_Ámûy
(
π∆_√igh
 *);

77 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/neightbl.h

12 #i‚de‡
NETLINK_NEIGHTBL_H_


13 
	#NETLINK_NEIGHTBL_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/ˇche.h
>

17 
	~<√éök/addr.h
>

19 #ifde‡
__˝lu•lus


23 
π∆_√ightbl
;

25 
π∆_√ightbl
 *
π∆_√ightbl_Æloc
();

26 
π∆_√ightbl_put
(
π∆_√ightbl
 *);

27 
π∆_√ightbl_‰ì
(
π∆_√ightbl
 *);

28 
π∆_√ightbl_Æloc_ˇche
(
∆_sock
 *, 
∆_ˇche
 **);

29 
π∆_√ightbl
 *
π∆_√ightbl_gë
(
∆_ˇche
 *,

31 
π∆_√ightbl_dump
(
π∆_√ightbl
 *, 
FILE
 *,

32 
∆_dump_∑øms
 *);

34 
π∆_√ightbl_buûd_ch™ge_ªque°
(
π∆_√ightbl
 *,

35 
π∆_√ightbl
 *,

36 
∆_msg
 **);

37 
π∆_√ightbl_ch™ge
(
∆_sock
 *, 
π∆_√ightbl
 *,

38 
π∆_√ightbl
 *);

40 
π∆_√ightbl_£t_Ámûy
(
π∆_√ightbl
 *, );

41 
π∆_√ightbl_£t_gc_åesh1
(
π∆_√ightbl
 *, );

42 
π∆_√ightbl_£t_gc_åesh2
(
π∆_√ightbl
 *, );

43 
π∆_√ightbl_£t_gc_åesh3
(
π∆_√ightbl
 *, );

44 
π∆_√ightbl_£t_«me
(
π∆_√ightbl
 *, const *);

45 
π∆_√ightbl_£t_dev
(
π∆_√ightbl
 *, );

46 
π∆_√ightbl_£t_queue_Àn
(
π∆_√ightbl
 *, );

47 
π∆_√ightbl_£t_¥oxy_queue_Àn
(
π∆_√ightbl
 *, );

48 
π∆_√ightbl_£t_≠p_¥obes
(
π∆_√ightbl
 *, );

49 
π∆_√ightbl_£t_uˇ°_¥obes
(
π∆_√ightbl
 *, );

50 
π∆_√ightbl_£t_mˇ°_¥obes
(
π∆_√ightbl
 *, );

51 
π∆_√ightbl_£t_ba£_ªachabÀ_time
(
π∆_√ightbl
 *,

52 
uöt64_t
);

53 
π∆_√ightbl_£t_ªå™s_time
(
π∆_√ightbl
 *, 
uöt64_t
);

54 
π∆_√ightbl_£t_gc_°Æe_time
(
π∆_√ightbl
 *, 
uöt64_t
);

55 
π∆_√ightbl_£t_dñay_¥obe_time
(
π∆_√ightbl
 *,

56 
uöt64_t
);

57 
π∆_√ightbl_£t_™yˇ°_dñay
(
π∆_√ightbl
 *, 
uöt64_t
);

58 
π∆_√ightbl_£t_¥oxy_dñay
(
π∆_√ightbl
 *, 
uöt64_t
);

59 
π∆_√ightbl_£t_locktime
(
π∆_√ightbl
 *, 
uöt64_t
);

61 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/nexthop.h

12 #i‚de‡
NETLINK_ROUTE_NEXTHOP_H_


13 
	#NETLINK_ROUTE_NEXTHOP_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/addr.h
>

18 #ifde‡
__˝lu•lus


22 
π∆_√xth›
;

25 
NH_DUMP_FROM_ONELINE
 = -2,

26 
NH_DUMP_FROM_DETAILS
 = -1,

27 
NH_DUMP_FROM_ENV
 = 0,

31 
π∆_√xth›
 * 
π∆_rouã_nh_Æloc
();

32 
π∆_√xth›
 * 
π∆_rouã_nh_˛⁄e
(rtnl_nexthop *);

33 
π∆_rouã_nh_‰ì
(
π∆_√xth›
 *);

35 
π∆_rouã_nh_com∑ª
(
π∆_√xth›
 *,

36 
π∆_√xth›
 *,

37 
uöt32_t
, );

39 
π∆_rouã_nh_dump
(
π∆_√xth›
 *,

40 
∆_dump_∑øms
 *);

42 
π∆_rouã_nh_£t_weight
(
π∆_√xth›
 *, 
uöt8_t
);

43 
uöt8_t
 
π∆_rouã_nh_gë_weight
(
π∆_√xth›
 *);

44 
π∆_rouã_nh_£t_ifödex
(
π∆_√xth›
 *, );

45 
π∆_rouã_nh_gë_ifödex
(
π∆_√xth›
 *);

46 
π∆_rouã_nh_£t_g©eway
(
π∆_√xth›
 *,

47 
∆_addr
 *);

48 
∆_addr
 * 
π∆_rouã_nh_gë_g©eway
(
π∆_√xth›
 *);

49 
π∆_rouã_nh_£t_Êags
(
π∆_√xth›
 *,

51 
π∆_rouã_nh_un£t_Êags
(
π∆_√xth›
 *,

53 
π∆_rouã_nh_gë_Êags
(
π∆_√xth›
 *);

54 
π∆_rouã_nh_£t_ªÆms
(
π∆_√xth›
 *,

55 
uöt32_t
);

56 
uöt32_t
 
π∆_rouã_nh_gë_ªÆms
(
π∆_√xth›
 *);

58 * 
π∆_rouã_nh_Êags2°r
(, *, 
size_t
);

59 
π∆_rouã_nh_°r2Êags
(const *);

61 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/pktloc.h

12 #i‚de‡
NETLINK_PKTLOC_H_


13 
	#NETLINK_PKTLOC_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/ˇche.h
>

17 
	~<√éök/rouã/tc.h
>

19 
	~<löux/tc_em©ch/tc_em_cmp.h
>

21 #ifde‡
__˝lu•lus


25 
	sπ∆_pkéoc


27 * 
«me
;

28 
uöt8_t
 
œyî
;

29 
uöt8_t
 
shi·
;

30 
uöt16_t
 
off£t
;

31 
uöt16_t
 
Æign
;

32 
uöt32_t
 
mask
;

33 
uöt32_t
 
ªf˙t
;

35 
∆_li°_hód
 
li°
;

38 
π∆_pkéoc_lookup
(c⁄° *, 
π∆_pkéoc
 **);

39 
π∆_pkéoc
 *
π∆_pkéoc_Æloc
();

40 
π∆_pkéoc_put
(
π∆_pkéoc
 *);

41 
π∆_pkéoc_add
(
π∆_pkéoc
 *);

42 
π∆_pkéoc_f‹óch
((*
cb
)(
π∆_pkéoc
 *, *),

45 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/qdisc.h

12 #i‚de‡
NETLINK_QDISC_H_


13 
	#NETLINK_QDISC_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/ˇche.h
>

17 
	~<√éök/rouã/tc.h
>

19 #ifde‡
__˝lu•lus


23 
π∆_qdisc
;

25 
π∆_qdisc
 *

26 
π∆_qdisc_Æloc
();

27 
π∆_qdisc_put
(
π∆_qdisc
 *);

29 
π∆_qdisc_Æloc_ˇche
(
∆_sock
 *, 
∆_ˇche
 **);

31 
π∆_qdisc
 *

32 
π∆_qdisc_gë
(
∆_ˇche
 *, , 
uöt32_t
);

34 
π∆_qdisc
 *

35 
π∆_qdisc_gë_by_∑ª¡
(
∆_ˇche
 *, , 
uöt32_t
);

37 
π∆_qdisc_buûd_add_ªque°
(
π∆_qdisc
 *, ,

38 
∆_msg
 **);

39 
π∆_qdisc_add
(
∆_sock
 *, 
π∆_qdisc
 *, );

41 
π∆_qdisc_buûd_upd©e_ªque°
(
π∆_qdisc
 *,

42 
π∆_qdisc
 *,

43 , 
∆_msg
 **);

45 
π∆_qdisc_upd©e
(
∆_sock
 *, 
π∆_qdisc
 *,

46 
π∆_qdisc
 *, );

48 
π∆_qdisc_buûd_dñëe_ªque°
(
π∆_qdisc
 *,

49 
∆_msg
 **);

50 
π∆_qdisc_dñëe
(
∆_sock
 *, 
π∆_qdisc
 *);

53 
π∆_qdisc_f‹óch_chûd
(
π∆_qdisc
 *, 
∆_ˇche
 *,

54 (*
cb
)(
∆_obje˘
 *, *),

55 *Ë
__©åibuã__
 ((
dïªˇãd
));

57 
π∆_qdisc_f‹óch_˛s
(
π∆_qdisc
 *, 
∆_ˇche
 *,

58 (*
cb
)(
∆_obje˘
 *, *),

59 *Ë
__©åibuã__
 ((
dïªˇãd
));

61 
π∆_qdisc_buûd_ch™ge_ªque°
(
π∆_qdisc
 *,

62 
π∆_qdisc
 *,

63 
∆_msg
 **)

64 
__©åibuã__
 ((
dïªˇãd
));

66 
π∆_qdisc_ch™ge
(
∆_sock
 *, 
π∆_qdisc
 *,

67 
π∆_qdisc
 *Ë
__©åibuã__
 ((
dïªˇãd
));

69 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/qdisc/cbq.h

12 #i‚de‡
NETLINK_CBQ_H_


13 
	#NETLINK_CBQ_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/ˇche.h
>

17 
	~<√éök/rouã/qdisc.h
>

19 #ifde‡
__˝lu•lus


23 * 
∆_ovl_°øãgy2°r
(, *, 
size_t
);

24 
∆_°r2ovl_°øãgy
(const *);

26 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/qdisc/dsmark.h

12 #i‚de‡
NETLINK_DSMARK_H_


13 
	#NETLINK_DSMARK_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/qdisc.h
>

17 
	~<√éök/rouã/˛ass.h
>

19 #ifde‡
__˝lu•lus


23 
π∆_˛ass_dsm¨k_£t_bômask
(
π∆_˛ass
 *, 
uöt8_t
);

24 
π∆_˛ass_dsm¨k_gë_bômask
(
π∆_˛ass
 *);

26 
π∆_˛ass_dsm¨k_£t_vÆue
(
π∆_˛ass
 *, 
uöt8_t
);

27 
π∆_˛ass_dsm¨k_gë_vÆue
(
π∆_˛ass
 *);

29 
π∆_qdisc_dsm¨k_£t_ödi˚s
(
π∆_qdisc
 *, 
uöt16_t
);

30 
π∆_qdisc_dsm¨k_gë_ödi˚s
(
π∆_qdisc
 *);

32 
π∆_qdisc_dsm¨k_£t_deÁu…_ödex
(
π∆_qdisc
 *,

33 
uöt16_t
);

34 
π∆_qdisc_dsm¨k_gë_deÁu…_ödex
(
π∆_qdisc
 *);

36 
π∆_qdisc_dsm¨k_£t_£t_tc_ödex
(
π∆_qdisc
 *, );

37 
π∆_qdisc_dsm¨k_gë_£t_tc_ödex
(
π∆_qdisc
 *);

39 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/qdisc/fifo.h

12 #i‚de‡
NETLINK_FIFO_H_


13 
	#NETLINK_FIFO_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/qdisc.h
>

18 #ifde‡
__˝lu•lus


22 
π∆_qdisc_fifo_£t_limô
(
π∆_qdisc
 *, );

23 
π∆_qdisc_fifo_gë_limô
(
π∆_qdisc
 *);

25 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/qdisc/fq_codel.h

12 #i‚de‡
NETLINK_FQ_CODEL_H_


13 
	#NETLINK_FQ_CODEL_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/qdisc.h
>

18 #ifde‡
__˝lu•lus


22 
π∆_qdisc_fq_codñ_£t_limô
(
π∆_qdisc
 *, );

23 
π∆_qdisc_fq_codñ_gë_limô
(
π∆_qdisc
 *);

25 
π∆_qdisc_fq_codñ_£t_èrgë
(
π∆_qdisc
 *, 
uöt32_t
);

26 
uöt32_t
 
π∆_qdisc_fq_codñ_gë_èrgë
(
π∆_qdisc
 *);

28 
π∆_qdisc_fq_codñ_£t_öãrvÆ
(
π∆_qdisc
 *, 
uöt32_t
);

29 
uöt32_t
 
π∆_qdisc_fq_codñ_gë_öãrvÆ
(
π∆_qdisc
 *);

31 
π∆_qdisc_fq_codñ_£t_qu™tum
(
π∆_qdisc
 *, 
uöt32_t
);

32 
uöt32_t
 
π∆_qdisc_fq_codñ_gë_qu™tum
(
π∆_qdisc
 *);

34 
π∆_qdisc_fq_codñ_£t_Êows
(
π∆_qdisc
 *, );

35 
π∆_qdisc_fq_codñ_gë_Êows
(
π∆_qdisc
 *);

37 
π∆_qdisc_fq_codñ_£t_e˙
(
π∆_qdisc
 *, );

38 
π∆_qdisc_fq_codñ_gë_e˙
(
π∆_qdisc
 *);

40 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/qdisc/htb.h

14 #i‚de‡
NETLINK_HTB_H_


15 
	#NETLINK_HTB_H_


	)

17 
	~<√éök/√éök.h
>

18 
	~<√éök/rouã/tc.h
>

19 
	~<√éök/rouã/qdisc.h
>

20 
	~<√éök/rouã/˛ass.h
>

22 #ifde‡
__˝lu•lus


26 
uöt32_t
 
π∆_htb_gë_øã2qu™tum
(
π∆_qdisc
 *);

27 
π∆_htb_£t_øã2qu™tum
(
π∆_qdisc
 *, 
uöt32_t
);

28 
uöt32_t
 
π∆_htb_gë_def˛s
(
π∆_qdisc
 *);

29 
π∆_htb_£t_def˛s
(
π∆_qdisc
 *, 
uöt32_t
);

31 
uöt32_t
 
π∆_htb_gë_¥io
(
π∆_˛ass
 *);

32 
π∆_htb_£t_¥io
(
π∆_˛ass
 *, 
uöt32_t
);

33 
uöt32_t
 
π∆_htb_gë_øã
(
π∆_˛ass
 *);

34 
π∆_htb_£t_øã
(
π∆_˛ass
 *, 
uöt32_t
);

35 
uöt32_t
 
π∆_htb_gë_˚û
(
π∆_˛ass
 *);

36 
π∆_htb_£t_˚û
(
π∆_˛ass
 *, 
uöt32_t
);

37 
uöt32_t
 
π∆_htb_gë_rbuf„r
(
π∆_˛ass
 *);

38 
π∆_htb_£t_rbuf„r
(
π∆_˛ass
 *, 
uöt32_t
);

39 
uöt32_t
 
π∆_htb_gë_cbuf„r
(
π∆_˛ass
 *);

40 
π∆_htb_£t_cbuf„r
(
π∆_˛ass
 *, 
uöt32_t
);

41 
uöt32_t
 
π∆_htb_gë_qu™tum
(
π∆_˛ass
 *);

42 
π∆_htb_£t_qu™tum
(
π∆_˛ass
 *, 
uöt32_t
);

43 
π∆_htb_gë_Àvñ
(
π∆_˛ass
 *);

45 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/qdisc/netem.h

12 #i‚de‡
NETLINK_NETEM_H_


13 
	#NETLINK_NETEM_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/qdisc.h
>

18 #ifde‡
__˝lu•lus


22 
π∆_√ãm_£t_limô
(
π∆_qdisc
 *, );

23 
π∆_√ãm_gë_limô
(
π∆_qdisc
 *);

26 
π∆_√ãm_£t_g≠
(
π∆_qdisc
 *, );

27 
π∆_√ãm_gë_g≠
(
π∆_qdisc
 *);

29 
π∆_√ãm_£t_ª‹dî_¥obabûôy
(
π∆_qdisc
 *, );

30 
π∆_√ãm_gë_ª‹dî_¥obabûôy
(
π∆_qdisc
 *);

32 
π∆_√ãm_£t_ª‹dî_c‹ªœti⁄
(
π∆_qdisc
 *, );

33 
π∆_√ãm_gë_ª‹dî_c‹ªœti⁄
(
π∆_qdisc
 *);

36 
π∆_√ãm_£t_c‹ru±i⁄_¥obabûôy
(
π∆_qdisc
 *, );

37 
π∆_√ãm_gë_c‹ru±i⁄_¥obabûôy
(
π∆_qdisc
 *);

39 
π∆_√ãm_£t_c‹ru±i⁄_c‹ªœti⁄
(
π∆_qdisc
 *, );

40 
π∆_√ãm_gë_c‹ru±i⁄_c‹ªœti⁄
(
π∆_qdisc
 *);

43 
π∆_√ãm_£t_loss
(
π∆_qdisc
 *, );

44 
π∆_√ãm_gë_loss
(
π∆_qdisc
 *);

46 
π∆_√ãm_£t_loss_c‹ªœti⁄
(
π∆_qdisc
 *, );

47 
π∆_√ãm_gë_loss_c‹ªœti⁄
(
π∆_qdisc
 *);

50 
π∆_√ãm_£t_du∂iˇã
(
π∆_qdisc
 *, );

51 
π∆_√ãm_gë_du∂iˇã
(
π∆_qdisc
 *);

53 
π∆_√ãm_£t_du∂iˇã_c‹ªœti⁄
(
π∆_qdisc
 *, );

54 
π∆_√ãm_gë_du∂iˇã_c‹ªœti⁄
(
π∆_qdisc
 *);

57 
π∆_√ãm_£t_dñay
(
π∆_qdisc
 *, );

58 
π∆_√ãm_gë_dñay
(
π∆_qdisc
 *);

60 
π∆_√ãm_£t_jôãr
(
π∆_qdisc
 *, );

61 
π∆_√ãm_gë_jôãr
(
π∆_qdisc
 *);

63 
π∆_√ãm_£t_dñay_c‹ªœti⁄
(
π∆_qdisc
 *, );

64 
π∆_√ãm_gë_dñay_c‹ªœti⁄
(
π∆_qdisc
 *);

67 
	#MAXDIST
 65536

	)

68 
π∆_√ãm_£t_dñay_di°ributi⁄
(
π∆_qdisc
 *, const *);

69 
π∆_√ãm_gë_dñay_di°ributi⁄_size
(
π∆_qdisc
 *);

70 
π∆_√ãm_gë_dñay_di°ributi⁄
(
π∆_qdisc
 *, 
öt16_t
 **);

72 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/qdisc/plug.h

12 #i‚de‡
NETLINK_PLUG_H_


13 
	#NETLINK_PLUG_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/qdisc.h
>

18 #ifde‡
__˝lu•lus


22 
π∆_qdisc_∂ug_£t_limô
(
π∆_qdisc
 *, );

23 
π∆_qdisc_∂ug_buf„r
(
π∆_qdisc
 *);

24 
π∆_qdisc_∂ug_ªÀa£_⁄e
(
π∆_qdisc
 *);

25 
π∆_qdisc_∂ug_ªÀa£_ödeföôe
(
π∆_qdisc
 *);

27 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/qdisc/prio.h

12 #i‚de‡
NETLINK_PRIO_H_


13 
	#NETLINK_PRIO_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/qdisc.h
>

18 #ifde‡
__˝lu•lus


31 
	#QDISC_PRIO_DEFAULT_BANDS
 3

	)

37 
	#QDISC_PRIO_DEFAULT_PRIOMAP
 \

38 { 1, 2, 2, 2, 1, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 }

	)

42 
π∆_qdisc_¥io_£t_b™ds
(
π∆_qdisc
 *, );

43 
π∆_qdisc_¥io_gë_b™ds
(
π∆_qdisc
 *);

44 
π∆_qdisc_¥io_£t_¥iom≠
(
π∆_qdisc
 *, 
uöt8_t
[], );

45 
uöt8_t
 *
π∆_qdisc_¥io_gë_¥iom≠
(
π∆_qdisc
 *);

47 * 
π∆_¥io2°r
(, *, 
size_t
);

48 
π∆_°r2¥io
(const *);

50 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/qdisc/red.h

12 #i‚de‡
NETLINK_RED_H_


13 
	#NETLINK_RED_H_


	)

15 
	~<√éök/√éök.h
>

	@mylibnl/libnl-3.2.25/include/netlink/route/qdisc/sfq.h

12 #i‚de‡
NETLINK_SFQ_H_


13 
	#NETLINK_SFQ_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/qdisc.h
>

18 #ifde‡
__˝lu•lus


22 
π∆_sfq_£t_qu™tum
(
π∆_qdisc
 *, );

23 
π∆_sfq_gë_qu™tum
(
π∆_qdisc
 *);

25 
π∆_sfq_£t_limô
(
π∆_qdisc
 *, );

26 
π∆_sfq_gë_limô
(
π∆_qdisc
 *);

28 
π∆_sfq_£t_≥πurb
(
π∆_qdisc
 *, );

29 
π∆_sfq_gë_≥πurb
(
π∆_qdisc
 *);

31 
π∆_sfq_gë_divis‹
(
π∆_qdisc
 *);

33 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/qdisc/tbf.h

12 #i‚de‡
NETLINK_TBF_H_


13 
	#NETLINK_TBF_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/tc.h
>

17 
	~<√éök/rouã/qdisc.h
>

19 #ifde‡
__˝lu•lus


23 
π∆_qdisc_tbf_£t_limô
(
π∆_qdisc
 *, );

24 
π∆_qdisc_tbf_£t_limô_by_œãncy
(
π∆_qdisc
 *, );

25 
π∆_qdisc_tbf_gë_limô
(
π∆_qdisc
 *);

27 
π∆_qdisc_tbf_£t_øã
(
π∆_qdisc
 *, , , );

28 
π∆_qdisc_tbf_gë_øã
(
π∆_qdisc
 *);

29 
π∆_qdisc_tbf_gë_øã_buckë
(
π∆_qdisc
 *);

30 
π∆_qdisc_tbf_gë_øã_˚Œ
(
π∆_qdisc
 *);

32 
π∆_qdisc_tbf_£t_≥akøã
(
π∆_qdisc
 *, , , );

33 
π∆_qdisc_tbf_gë_≥akøã
(
π∆_qdisc
 *);

34 
π∆_qdisc_tbf_gë_≥akøã_buckë
(
π∆_qdisc
 *);

35 
π∆_qdisc_tbf_gë_≥akøã_˚Œ
(
π∆_qdisc
 *);

37 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/route.h

12 #i‚de‡
NETLINK_ROUTE_H_


13 
	#NETLINK_ROUTE_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/ˇche.h
>

17 
	~<√éök/addr.h
>

18 
	~<√éök/d©a.h
>

19 
	~<√éök/rouã/√xth›.h
>

20 
	~<√éök/rouã/π∆.h
>

21 
	~<löux/ö_rouã.h
>

23 #ifde‡
__˝lu•lus


33 
	#ROUTE_CACHE_CONTENT
 1

	)

35 
π∆_rouã
;

37 
	sπ∆_πˇcheöfo


39 
uöt32_t
 
πci_˛¡ªf
;

40 
uöt32_t
 
πci_œ°_u£
;

41 
uöt32_t
 
πci_expúes
;

42 
öt32_t
 
πci_îr‹
;

43 
uöt32_t
 
πci_u£d
;

44 
uöt32_t
 
πci_id
;

45 
uöt32_t
 
πci_ts
;

46 
uöt32_t
 
πci_tßge
;

49 
∆_obje˘_›s
 
rouã_obj_›s
;

51 
π∆_rouã
 * 
π∆_rouã_Æloc
();

52 
π∆_rouã_put
(
π∆_rouã
 *);

53 
π∆_rouã_Æloc_ˇche
(
∆_sock
 *, , ,

54 
∆_ˇche
 **);

56 
π∆_rouã_gë
(
π∆_rouã
 *);

58 
π∆_rouã_∑r£
(
∆msghdr
 *, 
π∆_rouã
 **);

59 
π∆_rouã_buûd_msg
(
∆_msg
 *, 
π∆_rouã
 *);

61 
π∆_rouã_buûd_add_ªque°
(
π∆_rouã
 *, ,

62 
∆_msg
 **);

63 
π∆_rouã_add
(
∆_sock
 *, 
π∆_rouã
 *, );

64 
π∆_rouã_buûd_dñ_ªque°
(
π∆_rouã
 *, ,

65 
∆_msg
 **);

66 
π∆_rouã_dñëe
(
∆_sock
 *, 
π∆_rouã
 *, );

68 
π∆_rouã_£t_èbÀ
(
π∆_rouã
 *, 
uöt32_t
);

69 
uöt32_t
 
π∆_rouã_gë_èbÀ
(
π∆_rouã
 *);

70 
π∆_rouã_£t_sc›e
(
π∆_rouã
 *, 
uöt8_t
);

71 
uöt8_t
 
π∆_rouã_gë_sc›e
(
π∆_rouã
 *);

72 
π∆_rouã_£t_tos
(
π∆_rouã
 *, 
uöt8_t
);

73 
uöt8_t
 
π∆_rouã_gë_tos
(
π∆_rouã
 *);

74 
π∆_rouã_£t_¥Ÿocﬁ
(
π∆_rouã
 *, 
uöt8_t
);

75 
uöt8_t
 
π∆_rouã_gë_¥Ÿocﬁ
(
π∆_rouã
 *);

76 
π∆_rouã_£t_¥i‹ôy
(
π∆_rouã
 *, 
uöt32_t
);

77 
uöt32_t
 
π∆_rouã_gë_¥i‹ôy
(
π∆_rouã
 *);

78 
π∆_rouã_£t_Ámûy
(
π∆_rouã
 *, 
uöt8_t
);

79 
uöt8_t
 
π∆_rouã_gë_Ámûy
(
π∆_rouã
 *);

80 
π∆_rouã_£t_ty≥
(
π∆_rouã
 *, 
uöt8_t
);

81 
uöt8_t
 
π∆_rouã_gë_ty≥
(
π∆_rouã
 *);

82 
π∆_rouã_£t_Êags
(
π∆_rouã
 *, 
uöt32_t
);

83 
π∆_rouã_un£t_Êags
(
π∆_rouã
 *, 
uöt32_t
);

84 
uöt32_t
 
π∆_rouã_gë_Êags
(
π∆_rouã
 *);

85 
π∆_rouã_£t_mëric
(
π∆_rouã
 *, , );

86 
π∆_rouã_un£t_mëric
(
π∆_rouã
 *, );

87 
π∆_rouã_gë_mëric
(
π∆_rouã
 *, , 
uöt32_t
 *);

88 
π∆_rouã_£t_d°
(
π∆_rouã
 *, 
∆_addr
 *);

89 
∆_addr
 *
π∆_rouã_gë_d°
(
π∆_rouã
 *);

90 
π∆_rouã_£t_§c
(
π∆_rouã
 *, 
∆_addr
 *);

91 
∆_addr
 *
π∆_rouã_gë_§c
(
π∆_rouã
 *);

92 
π∆_rouã_£t_¥ef_§c
(
π∆_rouã
 *, 
∆_addr
 *);

93 
∆_addr
 *
π∆_rouã_gë_¥ef_§c
(
π∆_rouã
 *);

94 
π∆_rouã_£t_iif
(
π∆_rouã
 *, );

95 
π∆_rouã_gë_iif
(
π∆_rouã
 *);

96 
π∆_rouã_gë_§c_Àn
(
π∆_rouã
 *);

98 
π∆_rouã_add_√xth›
(
π∆_rouã
 *,

99 
π∆_√xth›
 *);

100 
π∆_rouã_ªmove_√xth›
(
π∆_rouã
 *,

101 
π∆_√xth›
 *);

102 
∆_li°_hód
 *
π∆_rouã_gë_√xth›s
(
π∆_rouã
 *);

103 
π∆_rouã_gë_¬exth›s
(
π∆_rouã
 *);

105 
π∆_rouã_f‹óch_√xth›
(
π∆_rouã
 *
r
,

106 (*
cb
)(
π∆_√xth›
 *, *),

107 *
¨g
);

109 
π∆_√xth›
 * 
π∆_rouã_√xth›_n
(
π∆_rouã
 *
r
, 
n
);

111 
π∆_rouã_guess_sc›e
(
π∆_rouã
 *);

113 * 
π∆_rouã_èbÀ2°r
(, *, 
size_t
);

114 
π∆_rouã_°r2èbÀ
(const *);

115 
π∆_rouã_ªad_èbÀ_«mes
(const *);

117 * 
π∆_rouã_¥Ÿo2°r
(, *, 
size_t
);

118 
π∆_rouã_°r2¥Ÿo
(const *);

119 
π∆_rouã_ªad_¥Ÿocﬁ_«mes
(const *);

121 * 
π∆_rouã_mëric2°r
(, *, 
size_t
);

122 
π∆_rouã_°r2mëric
(const *);

124 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/rtnl.h

12 #i‚de‡
NETLINK_RTNL_H_


13 
	#NETLINK_RTNL_H_


	)

15 
	~<√éök/√éök.h
>

17 #ifde‡
__˝lu•lus


30 
	#RTNL_REALM_MASK
 (0xFFFF)

	)

35 
	#RTNL_REALM_FROM
(
ªÆm
Ë(‘ólmË>> 16)

	)

40 
	#RTNL_REALM_TO
(
ªÆm
Ë(‘ólmË& 
RTNL_REALM_MASK
)

	)

45 
	#RTNL_MAKE_REALM
(
‰om
, 
to
) \

46 ((
	`RTNL_REALM_TO
(
‰om
Ë<< 16Ë& RTNL_REALM_TO(
to
))

	)

52 
∆_πgí_ªque°
(
∆_sock
 *, , , );

55 * 
∆_π¡y≥2°r
(, *, 
size_t
);

56 
∆_°r2π¡y≥
(const *);

59 * 
π∆_sc›e2°r
(, *, 
size_t
);

60 
π∆_°r2sc›e
(const *);

63 * 
π∆_ªÆms2°r
(
uöt32_t
, *, 
size_t
);

65 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/rule.h

12 #i‚de‡
NETLINK_RULE_H_


13 
	#NETLINK_RULE_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/ˇche.h
>

17 
	~<√éök/addr.h
>

18 
	~<√éök/rouã/rouã.h
>

19 
	~<löux/fib_ruÀs.h
>

21 #ifde‡
__˝lu•lus


25 
π∆_ruÀ
;

28 
π∆_ruÀ
 * 
π∆_ruÀ_Æloc
();

29 
π∆_ruÀ_put
(
π∆_ruÀ
 *);

31 
π∆_ruÀ_Æloc_ˇche
(
∆_sock
 *, ,

32 
∆_ˇche
 **);

33 
π∆_ruÀ_dump
(
π∆_ruÀ
 *, 
FILE
 *, 
∆_dump_∑øms
 *);

35 
π∆_ruÀ_buûd_add_ªque°
(
π∆_ruÀ
 *, ,

36 
∆_msg
 **);

37 
π∆_ruÀ_add
(
∆_sock
 *, 
π∆_ruÀ
 *, );

38 
π∆_ruÀ_buûd_dñëe_ªque°
(
π∆_ruÀ
 *, ,

39 
∆_msg
 **);

40 
π∆_ruÀ_dñëe
(
∆_sock
 *, 
π∆_ruÀ
 *, );

44 
π∆_ruÀ_£t_Ámûy
(
π∆_ruÀ
 *, );

45 
π∆_ruÀ_gë_Ámûy
(
π∆_ruÀ
 *);

46 
π∆_ruÀ_£t_¥io
(
π∆_ruÀ
 *, 
uöt32_t
);

47 
uöt32_t
 
π∆_ruÀ_gë_¥io
(
π∆_ruÀ
 *);

48 
π∆_ruÀ_£t_m¨k
(
π∆_ruÀ
 *, 
uöt32_t
);

49 
uöt32_t
 
π∆_ruÀ_gë_m¨k
(
π∆_ruÀ
 *);

50 
π∆_ruÀ_£t_mask
(
π∆_ruÀ
 *, 
uöt32_t
);

51 
uöt32_t
 
π∆_ruÀ_gë_mask
(
π∆_ruÀ
 *);

52 
π∆_ruÀ_£t_èbÀ
(
π∆_ruÀ
 *, 
uöt32_t
);

53 
uöt32_t
 
π∆_ruÀ_gë_èbÀ
(
π∆_ruÀ
 *);

54 
π∆_ruÀ_£t_dsfõld
(
π∆_ruÀ
 *, 
uöt8_t
);

55 
uöt8_t
 
π∆_ruÀ_gë_dsfõld
(
π∆_ruÀ
 *);

56 
π∆_ruÀ_£t_§c
(
π∆_ruÀ
 *, 
∆_addr
 *);

57 
∆_addr
 * 
π∆_ruÀ_gë_§c
(
π∆_ruÀ
 *);

58 
π∆_ruÀ_£t_d°
(
π∆_ruÀ
 *, 
∆_addr
 *);

59 
∆_addr
 * 
π∆_ruÀ_gë_d°
(
π∆_ruÀ
 *);

60 
π∆_ruÀ_£t_a˘i⁄
(
π∆_ruÀ
 *, 
uöt8_t
);

61 
uöt8_t
 
π∆_ruÀ_gë_a˘i⁄
(
π∆_ruÀ
 *);

62 
π∆_ruÀ_£t_iif
(
π∆_ruÀ
 *, const *);

63 * 
π∆_ruÀ_gë_iif
(
π∆_ruÀ
 *);

64 
π∆_ruÀ_£t_oif
(
π∆_ruÀ
 *, const *);

65 * 
π∆_ruÀ_gë_oif
(
π∆_ruÀ
 *);

66 
π∆_ruÀ_£t_ªÆms
(
π∆_ruÀ
 *, 
uöt32_t
);

67 
uöt32_t
 
π∆_ruÀ_gë_ªÆms
(
π∆_ruÀ
 *);

68 
π∆_ruÀ_£t_gŸo
(
π∆_ruÀ
 *, 
uöt32_t
);

69 
uöt32_t
 
π∆_ruÀ_gë_gŸo
(
π∆_ruÀ
 *);

71 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/route/tc-api.h

12 #i‚de‡
NETLINK_DUMMY_TC_API_H_


13 
	#NETLINK_DUMMY_TC_API_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/msg.h
>

17 
	~<√éök/rouã/tc.h
>

	@mylibnl/libnl-3.2.25/include/netlink/route/tc.h

12 #i‚de‡
NETLINK_TC_H_


13 
	#NETLINK_TC_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/ˇche.h
>

17 
	~<√éök/d©a.h
>

18 
	~<√éök/rouã/lök.h
>

19 
	~<löux/pkt_sched.h
>

20 
	~<löux/pkt_˛s.h
>

22 #ifde‡
__˝lu•lus


26 
	eπ∆_tc_ty≥
 {

27 
RTNL_TC_TYPE_QDISC
,

28 
RTNL_TC_TYPE_CLASS
,

29 
RTNL_TC_TYPE_CLS
,

30 
RTNL_TC_TYPE_ACT
,

31 
__RTNL_TC_TYPE_MAX
,

34 
	#RTNL_TC_TYPE_MAX
 (
__RTNL_TC_TYPE_MAX
 - 1)

	)

40 
	#TC_HANDLE
(
maj
, 
mö
Ë(
	`TC_H_MAJ
((majË<< 16Ë| 
	`TC_H_MIN
(mö))

	)

46 
π∆_tc
;

56 
	#TC_CAST
(
±r
Ë((
π∆_tc
 *Ë’å))

	)

66 
	eπ∆_tc_°©
 {

67 
RTNL_TC_PACKETS
,

68 
RTNL_TC_BYTES
,

69 
RTNL_TC_RATE_BPS
,

70 
RTNL_TC_RATE_PPS
,

71 
RTNL_TC_QLEN
,

72 
RTNL_TC_BACKLOG
,

73 
RTNL_TC_DROPS
,

74 
RTNL_TC_REQUEUES
,

75 
RTNL_TC_OVERLIMITS
,

76 
__RTNL_TC_STATS_MAX
,

79 
	#RTNL_TC_STATS_MAX
 (
__RTNL_TC_STATS_MAX
 - 1)

	)

81 
π∆_tc_£t_ifödex
(
π∆_tc
 *, );

82 
π∆_tc_gë_ifödex
(
π∆_tc
 *);

83 
π∆_tc_£t_lök
(
π∆_tc
 *, 
π∆_lök
 *);

84 
π∆_lök
 *
π∆_tc_gë_lök
(
π∆_tc
 *);

85 
π∆_tc_£t_mtu
(
π∆_tc
 *, 
uöt32_t
);

86 
uöt32_t
 
π∆_tc_gë_mtu
(
π∆_tc
 *);

87 
π∆_tc_£t_mpu
(
π∆_tc
 *, 
uöt32_t
);

88 
uöt32_t
 
π∆_tc_gë_mpu
(
π∆_tc
 *);

89 
π∆_tc_£t_ovîhód
(
π∆_tc
 *, 
uöt32_t
);

90 
uöt32_t
 
π∆_tc_gë_ovîhód
(
π∆_tc
 *);

91 
π∆_tc_£t_lökty≥
(
π∆_tc
 *, 
uöt32_t
);

92 
uöt32_t
 
π∆_tc_gë_lökty≥
(
π∆_tc
 *);

93 
π∆_tc_£t_h™dÀ
(
π∆_tc
 *, 
uöt32_t
);

94 
uöt32_t
 
π∆_tc_gë_h™dÀ
(
π∆_tc
 *);

95 
π∆_tc_£t_∑ª¡
(
π∆_tc
 *, 
uöt32_t
);

96 
uöt32_t
 
π∆_tc_gë_∑ª¡
(
π∆_tc
 *);

97 
π∆_tc_£t_köd
(
π∆_tc
 *, const *);

98 * 
π∆_tc_gë_köd
(
π∆_tc
 *);

99 
uöt64_t
 
π∆_tc_gë_°©
(
π∆_tc
 *, 
π∆_tc_°©
);

101 
π∆_tc_ˇlc_txtime
(, );

102 
π∆_tc_ˇlc_bufsize
(, );

103 
π∆_tc_ˇlc_˚Œ_log
();

105 
π∆_tc_ªad_˛assid_fûe
();

106 * 
π∆_tc_h™dÀ2°r
(
uöt32_t
, *, 
size_t
);

107 
π∆_tc_°r2h™dÀ
(c⁄° *, 
uöt32_t
 *);

108 
π∆_˛assid_gíî©e
(c⁄° *, 
uöt32_t
 *,

109 
uöt32_t
);

111 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/socket.h

12 #i‚de‡
NETLINK_SOCKET_H_


13 
	#NETLINK_SOCKET_H_


	)

15 
	~<√éök/ty≥s.h
>

16 
	~<√éök/h™dÀrs.h
>

18 #ifde‡
__˝lu•lus


22 
∆_sock
 * 
∆_sockë_Æloc
();

23 
∆_sock
 * 
∆_sockë_Æloc_cb
(
∆_cb
 *);

24 
∆_sockë_‰ì
(
∆_sock
 *);

26 
uöt32_t
 
∆_sockë_gë_loˇl_p‹t
(c⁄° 
∆_sock
 *);

27 
∆_sockë_£t_loˇl_p‹t
(
∆_sock
 *, 
uöt32_t
);

29 
∆_sockë_add_membîshùs
(
∆_sock
 *, , ...);

30 
∆_sockë_add_membîshù
(
∆_sock
 *, );

31 
∆_sockë_dr›_membîshùs
(
∆_sock
 *, , ...);

32 
∆_sockë_dr›_membîshù
(
∆_sock
 *,

34 
∆_joö_groups
(
∆_sock
 *, );

37 
uöt32_t
 
∆_sockë_gë_≥î_p‹t
(c⁄° 
∆_sock
 *);

38 
∆_sockë_£t_≥î_p‹t
(
∆_sock
 *,

39 
uöt32_t
);

40 
uöt32_t
 
∆_sockë_gë_≥î_groups
(c⁄° 
∆_sock
 *
sk
);

41 
∆_sockë_£t_≥î_groups
(
∆_sock
 *
sk
, 
uöt32_t
 
groups
);

42 
∆_cb
 * 
∆_sockë_gë_cb
(c⁄° 
∆_sock
 *);

43 
∆_sockë_£t_cb
(
∆_sock
 *,

44 
∆_cb
 *);

45 
∆_sockë_modify_cb
(
∆_sock
 *, 
∆_cb_ty≥
,

46 
∆_cb_köd
,

47 
∆_ªcvmsg_msg_cb_t
, *);

48 
∆_sockë_modify_îr_cb
(
∆_sock
 *, 
∆_cb_köd
,

49 
∆_ªcvmsg_îr_cb_t
, *);

51 
∆_sockë_£t_buf„r_size
(
∆_sock
 *, , );

52 
∆_sockë_£t_msg_buf_size
(
∆_sock
 *, 
size_t
);

53 
size_t
 
∆_sockë_gë_msg_buf_size
(
∆_sock
 *);

54 
∆_sockë_£t_∑ss¸ed
(
∆_sock
 *, );

55 
∆_sockë_ªcv_pktöfo
(
∆_sock
 *, );

57 
∆_sockë_dißbÀ_£q_check
(
∆_sock
 *);

58 
∆_sockë_u£_£q
(
∆_sock
 *);

59 
∆_sockë_dißbÀ_auto_ack
(
∆_sock
 *);

60 
∆_sockë_íabÀ_auto_ack
(
∆_sock
 *);

62 
∆_sockë_gë_fd
(c⁄° 
∆_sock
 *);

63 
∆_sockë_£t_n⁄blockög
(c⁄° 
∆_sock
 *);

64 
∆_sockë_íabÀ_msg_≥ek
(
∆_sock
 *);

65 
∆_sockë_dißbÀ_msg_≥ek
(
∆_sock
 *);

67 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/types.h

12 #i‚de‡
__NETLINK_TYPES_H_


13 
	#__NETLINK_TYPES_H_


	)

15 
	~<°dio.h
>

21 
	e∆_dump_ty≥
 {

22 
	mNL_DUMP_LINE
,

23 
	mNL_DUMP_DETAILS
,

24 
	mNL_DUMP_STATS
,

25 
	m__NL_DUMP_MAX
,

27 
	#NL_DUMP_MAX
 (
__NL_DUMP_MAX
 - 1)

	)

33 
	s∆_dump_∑øms


38 
∆_dump_ty≥
 
	mdp_ty≥
;

44 
	mdp_¥efix
;

49 
	mdp_¥öt_ödex
;

54 
	mdp_dump_msgty≥
;

63 (*
	mdp_cb
)(
	m∆_dump_∑øms
 *, *);

73 (*
	mdp_∆_cb
)(
	m∆_dump_∑øms
 *, );

78 *
	mdp_d©a
;

83 
FILE
 * 
	mdp_fd
;

88 * 
	mdp_buf
;

93 
size_t
 
	mdp_buÊí
;

99 
	mdp_¥e_dump
;

105 
	mdp_iv¨
;

107 
	mdp_löe
;

	@mylibnl/libnl-3.2.25/include/netlink/utils.h

12 #i‚de‡
NETLINK_UTILS_H_


13 
	#NETLINK_UTILS_H_


	)

15 
	~<√éök/√éök.h
>

16 
	~<√éök/li°.h
>

18 #ifde‡
__˝lu•lus


31 
	#NL_PROB_MIN
 0x0

	)

37 
	#NL_PROB_MAX
 0xffffffff

	)

42 
NL_BYTE_RATE
,

43 
NL_BIT_RATE
,

47 
∆_ˇn˚l_down_byãs
(, **);

48 
∆_ˇn˚l_down_bôs
(, **);

49 
∆_øã2°r
(, , *, 
size_t
);

50 
∆_ˇn˚l_down_us
(
uöt32_t
, **);

53 
∆_size2öt
(const *);

54 * 
∆_size2°r
(c⁄° 
size_t
, *, const size_t);

55 
∆_¥ob2öt
(const *);

58 
∆_gë_u£r_hz
();

59 
∆_gë_psched_hz
();

60 
uöt32_t
 
∆_us2ticks
(uint32_t);

61 
uöt32_t
 
∆_ticks2us
(uint32_t);

62 
∆_°r2m£c
(c⁄° *, 
uöt64_t
 *);

63 * 
∆_m£c2°r
(
uöt64_t
, *, 
size_t
);

66 * 
∆_Œ¥Ÿo2°r
(, *, 
size_t
);

67 
∆_°r2Œ¥Ÿo
(const *);

70 * 
∆_ëhî_¥Ÿo2°r
(, *, 
size_t
);

71 
∆_°r2ëhî_¥Ÿo
(const *);

74 * 
∆_ù_¥Ÿo2°r
(, *, 
size_t
);

75 
∆_°r2ù_¥Ÿo
(const *);

78 
∆_√w_löe
(
∆_dump_∑øms
 *);

79 
∆_dump
(
∆_dump_∑øms
 *, const *, ...);

80 
∆_dump_löe
(
∆_dump_∑øms
 *, const *, ...);

83 
	gNL_CAPABILITY_NONE
,

90 
	gNL_CAPABILITY_ROUTE_BUILD_MSG_SET_SCOPE
 = 1,

91 
	#NL_CAPABILITY_ROUTE_BUILD_MSG_SET_SCOPE
 
NL_CAPABILITY_ROUTE_BUILD_MSG_SET_SCOPE


	)

97 
	gNL_CAPABILITY_ROUTE_LINK_VETH_GET_PEER_OWN_REFERENCE
 = 2,

98 
	#NL_CAPABILITY_ROUTE_LINK_VETH_GET_PEER_OWN_REFERENCE
 
NL_CAPABILITY_ROUTE_LINK_VETH_GET_PEER_OWN_REFERENCE


	)

104 
	gNL_CAPABILITY_ROUTE_LINK_CLS_ADD_ACT_OWN_REFERENCE
 = 3,

105 
	#NL_CAPABILITY_ROUTE_LINK_CLS_ADD_ACT_OWN_REFERENCE
 
NL_CAPABILITY_ROUTE_LINK_CLS_ADD_ACT_OWN_REFERENCE


	)

113 
	gNL_CAPABILITY_NL_CONNECT_RETRY_GENERATE_PORT_ON_ADDRINUSE
 = 4,

114 
	#NL_CAPABILITY_NL_CONNECT_RETRY_GENERATE_PORT_ON_ADDRINUSE
 
NL_CAPABILITY_NL_CONNECT_RETRY_GENERATE_PORT_ON_ADDRINUSE


	)

116 
	g__NL_CAPABILITY_MAX


117 
	#NL_CAPABILITY_MAX
 (
__NL_CAPABILITY_MAX
 - 1)

	)

119 
∆_has_ˇ∑bûôy
 (
ˇ∑bûôy
);

121 #ifde‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/include/netlink/version.h

12 #i‚de‡
NETLINK_VERSION_H_


13 
	#NETLINK_VERSION_H_


	)

17 
	#LIBNL_STRING
 "lib∆ 3.2.25"

	)

18 
	#LIBNL_VERSION
 "3.2.25"

	)

20 
	#LIBNL_VER_MAJ
 3

	)

21 
	#LIBNL_VER_MIN
 2

	)

22 
	#LIBNL_VER_MIC
 25

	)

23 
	#LIBNL_VER
(
maj
,
mö
Ë((majË<< 8 | (mö))

	)

24 
	#LIBNL_VER_NUM
 
	`LIBNL_VER
(
LIBNL_VER_MAJ
, 
LIBNL_VER_MIN
)

	)

26 
	#LIBNL_CURRENT
 220

	)

27 
	#LIBNL_REVISION
 0

	)

28 
	#LIBNL_AGE
 20

	)

32 c⁄° 
∆_vî_num
;

33 c⁄° 
∆_vî_maj
;

34 c⁄° 
∆_vî_mö
;

35 c⁄° 
∆_vî_mic
;

	@mylibnl/libnl-3.2.25/lib/addr.c

30 
	~<√éök-¥iv©e/√éök.h
>

31 
	~<√éök/√éök.h
>

32 
	~<√éök/utûs.h
>

33 
	~<√éök/addr.h
>

34 
	~<löux/sockë.h
>

38 
ölöe
 
uöt16_t
 
	$dn_¡ohs
(
uöt16_t
 
addr
)

41 
uöt8_t
 
byã
[2];

42 
uöt16_t
 
w‹d
;

43 } 
u
 = {

44 .
w‹d
 = 
addr
,

47  ((
uöt16_t
Ë
u
.
byã
[0]) | (((uint16_t) u.byte[1]) << 8);

48 
	}
}

50 
ölöe
 
	$do_digô
(*
°r
, 
uöt16_t
 *
addr
, uöt16_à
sˇÀ
,

51 
size_t
 *
pos
, size_à
Àn
, *
°¨ãd
)

53 
uöt16_t
 
tmp
 = *
addr
 / 
sˇÀ
;

55 i‡(*
pos
 =
Àn
)

58 i‡(((
tmp
Ë> 0Ë|| *
°¨ãd
 || (
sˇÀ
 == 1)) {

59 *
°r
 = 
tmp
 + '0';

60 *
°¨ãd
 = 1;

61 (*
pos
)++;

62 *
addr
 -(
tmp
 * 
sˇÀ
);

66 
	}
}

68 c⁄° *
	$d√t_¡›
(*
addrbuf
, 
size_t
 
addæí
, *
°r
,

69 
size_t
 
Àn
)

71 
uöt16_t
 
addr
 = 
	`dn_¡ohs
(*(uöt16_à*)
addrbuf
);

72 
uöt16_t
 
¨ó
 = 
addr
 >> 10;

73 
size_t
 
pos
 = 0;

74 
°¨ãd
 = 0;

76 i‡(
addæí
 != 2)

77  
NULL
;

79 
addr
 &= 0x03ff;

81 i‡(
Àn
 == 0)

82  
°r
;

84 i‡(
	`do_digô
(
°r
 + 
pos
, &
¨ó
, 10, &pos, 
Àn
, &
°¨ãd
))

85  
°r
;

87 i‡(
	`do_digô
(
°r
 + 
pos
, &
¨ó
, 1, &pos, 
Àn
, &
°¨ãd
))

88  
°r
;

90 i‡(
pos
 =
Àn
)

91  
°r
;

93 *(
°r
 + 
pos
) = '.';

94 
pos
++;

95 
°¨ãd
 = 0;

97 i‡(
	`do_digô
(
°r
 + 
pos
, &
addr
, 1000, &pos, 
Àn
, &
°¨ãd
))

98  
°r
;

100 i‡(
	`do_digô
(
°r
 + 
pos
, &
addr
, 100, &pos, 
Àn
, &
°¨ãd
))

101  
°r
;

103 i‡(
	`do_digô
(
°r
 + 
pos
, &
addr
, 10, &pos, 
Àn
, &
°¨ãd
))

104  
°r
;

106 i‡(
	`do_digô
(
°r
 + 
pos
, &
addr
, 1, &pos, 
Àn
, &
°¨ãd
))

107  
°r
;

109 i‡(
pos
 =
Àn
)

110  
°r
;

112 *(
°r
 + 
pos
) = 0;

114  
°r
;

115 
	}
}

117 
	$d√t_num
(c⁄° *
§c
, 
uöt16_t
 * 
d°
)

119 
rv
 = 0;

120 
tmp
;

121 *
d°
 = 0;

123 (
tmp
 = *
§c
++) != 0) {

124 
tmp
 -= '0';

125 i‡((
tmp
 < 0) || (tmp > 9))

126  
rv
;

128 
rv
++;

129 (*
d°
) *= 10;

130 (*
d°
Ë+
tmp
;

133  
rv
;

134 
	}
}

136 
ölöe
 
	$d√t_±⁄
(c⁄° *
§c
, *
addrbuf
)

138 
uöt16_t
 
¨ó
 = 0;

139 
uöt16_t
 
node
 = 0;

140 
pos
;

142 
pos
 = 
	`d√t_num
(
§c
, &
¨ó
);

143 i‡((
pos
 =0Ë|| (
¨ó
 > 63) ||

144 ((*(
§c
 + 
pos
) != '.') && (*(src +Öos) != ',')))

145  -
NLE_INVAL
;

147 
pos
 = 
	`d√t_num
(
§c
 +Öo†+ 1, &
node
);

148 i‡((
pos
 =0Ë|| (
node
 > 1023))

149  -
NLE_INVAL
;

151 *(
uöt16_t
 *)
addrbuf
 = 
	`dn_¡ohs
((
¨ó
 << 10Ë| 
node
);

154 
	}
}

156 
	$addr_de°roy
(
∆_addr
 *
addr
)

158 i‡(!
addr
)

161 i‡(
addr
->
a_ªf˙t
 != 1)

162 
	`BUG
();

164 
	`‰ì
(
addr
);

165 
	}
}

185 
∆_addr
 *
	$∆_addr_Æloc
(
size_t
 
maxsize
)

187 
∆_addr
 *
addr
;

189 
addr
 = 
	`ˇŒoc
(1, (*addrË+ 
maxsize
);

190 i‡(!
addr
)

191  
NULL
;

193 
addr
->
a_ªf˙t
 = 1;

194 
addr
->
a_maxsize
 = 
maxsize
;

196  
addr
;

197 
	}
}

216 
∆_addr
 *
	$∆_addr_buûd
(
Ámûy
, *
buf
, 
size_t
 
size
)

218 
∆_addr
 *
addr
;

220 
addr
 = 
	`∆_addr_Æloc
(
size
);

221 i‡(!
addr
)

222  
NULL
;

224 
addr
->
a_Ámûy
 = 
Ámûy
;

225 
addr
->
a_Àn
 = 
size
;

226 
addr
->
a_¥efixÀn
 = 
size
*8;

228 i‡(
size
)

229 
	`mem˝y
(
addr
->
a_addr
, 
buf
, 
size
);

231  
addr
;

232 
	}
}

255 
∆_addr
 *
	$∆_addr_Æloc_©å
(
∆©å
 *
∆a
, 
Ámûy
)

257  
	`∆_addr_buûd
(
Ámûy
, 
	`∆a_d©a
(
∆a
), 
	`∆a_Àn
(nla));

258 
	}
}

291 
	$∆_addr_∑r£
(c⁄° *
addr°r
, 
höt
, 
∆_addr
 **
ªsu…
)

293 
îr
, 
c›y
 = 0, 
Àn
 = 0, 
Ámûy
 = 
AF_UNSPEC
;

294 *
°r
, *
¥efix
, 
buf
[32];

295 
∆_addr
 *
addr
 = 
NULL
;

297 
°r
 = 
	`°rdup
(
addr°r
);

298 i‡(!
°r
) {

299 
îr
 = -
NLE_NOMEM
;

300 
îrout
;

303 
¥efix
 = 
	`°rchr
(
°r
, '/');

304 i‡(
¥efix
)

305 *
¥efix
 = '\0';

307 i‡(!
	`°rˇ£cmp
(
°r
, "none")) {

308 
Ámûy
 = 
höt
;

309 
¥efix
;

312 i‡(!
	`°rˇ£cmp
(
°r
, "default") ||

313 !
	`°rˇ£cmp
(
°r
, "all") ||

314 !
	`°rˇ£cmp
(
°r
, "any")) {

316 
Àn
 = 0;

318 
höt
) {

319 
AF_INET
:

320 
AF_UNSPEC
:

324 
Ámûy
 = 
AF_INET
;

325 
¥efix
;

327 
AF_INET6
:

328 
Ámûy
 = 
AF_INET6
;

329 
¥efix
;

331 
AF_LLC
:

332 
Ámûy
 = 
AF_LLC
;

333 
¥efix
;

336 
îr
 = -
NLE_AF_NOSUPPORT
;

337 
îrout
;

341 
c›y
 = 1;

343 i‡(
höt
 =
AF_INET
 || höà=
AF_UNSPEC
) {

344 i‡(
	`öë_±⁄
(
AF_INET
, 
°r
, 
buf
) > 0) {

345 
Ámûy
 = 
AF_INET
;

346 
Àn
 = 4;

347 
¥efix
;

349 i‡(
höt
 =
AF_INET
) {

350 
îr
 = -
NLE_NOADDR
;

351 
îrout
;

355 i‡(
höt
 =
AF_INET6
 || höà=
AF_UNSPEC
) {

356 i‡(
	`öë_±⁄
(
AF_INET6
, 
°r
, 
buf
) > 0) {

357 
Ámûy
 = 
AF_INET6
;

358 
Àn
 = 16;

359 
¥efix
;

361 i‡(
höt
 =
AF_INET6
) {

362 
îr
 = -
NLE_NOADDR
;

363 
îrout
;

367 i‡((
höt
 =
AF_LLC
 || höà=
AF_UNSPEC
Ë&& 
	`°rchr
(
°r
, ':')) {

368 
a
, 
b
, 
c
, 
d
, 
e
, 
f
;

370 i‡(
	`ssˇnf
(
°r
, "%02x:%02x:%02x:%02x:%02x:%02x",

371 &
a
, &
b
, &
c
, &
d
, &
e
, &
f
) == 6) {

372 
Ámûy
 = 
AF_LLC
;

373 
Àn
 = 6;

374 
buf
[0] = (Ë
a
;

375 
buf
[1] = (Ë
b
;

376 
buf
[2] = (Ë
c
;

377 
buf
[3] = (Ë
d
;

378 
buf
[4] = (Ë
e
;

379 
buf
[5] = (Ë
f
;

380 
¥efix
;

383 i‡(
höt
 =
AF_LLC
) {

384 
îr
 = -
NLE_NOADDR
;

385 
îrout
;

389 i‡((
höt
 =
AF_DEC√t
 || höà=
AF_UNSPEC
) &&

390 (
	`°rchr
(
°r
, '.') || strchr(str, ','))) {

391 i‡(
	`d√t_±⁄
(
°r
, 
buf
) > 0) {

392 
Ámûy
 = 
AF_DEC√t
;

393 
Àn
 = 2;

394 
¥efix
;

396 i‡(
höt
 =
AF_DEC√t
) {

397 
îr
 = -
NLE_NOADDR
;

398 
îrout
;

402 i‡(
höt
 =
AF_UNSPEC
 && 
	`°rchr
(
°r
, ':')) {

403 
size_t
 
i
 = 0;

404 *
s
 = 
°r
, *
p
;

406 
l
 = 
	`°πﬁ
(
s
, &
p
, 16);

408 i‡(
s
 =
p
 || 
l
 > 0xf‡|| 
i
 >(
buf
)) {

409 
îr
 = -
NLE_INVAL
;

410 
îrout
;

413 
buf
[
i
++] = (Ë
l
;

414 i‡(*
p
 == '\0')

416 
s
 = ++
p
;

419 
Àn
 = 
i
;

420 
Ámûy
 = 
AF_UNSPEC
;

421 
¥efix
;

424 
îr
 = -
NLE_NOADDR
;

425 
îrout
;

427 
¥efix
:

428 
addr
 = 
	`∆_addr_Æloc
(
Àn
);

429 i‡(!
addr
) {

430 
îr
 = -
NLE_NOMEM
;

431 
îrout
;

434 
	`∆_addr_£t_Ámûy
(
addr
, 
Ámûy
);

436 i‡(
c›y
)

437 
	`∆_addr_£t_bö¨y_addr
(
addr
, 
buf
, 
Àn
);

439 i‡(
¥efix
) {

440 *
p
;

441 
∂
 = 
	`°πﬁ
(++
¥efix
, &
p
, 0);

442 i‡(
p
 =
¥efix
) {

443 
	`addr_de°roy
(
addr
);

444 
îr
 = -
NLE_INVAL
;

445 
îrout
;

447 
	`∆_addr_£t_¥efixÀn
(
addr
, 
∂
);

449 
	`∆_addr_£t_¥efixÀn
(
addr
, 
Àn
 * 8);

451 *
ªsu…
 = 
addr
;

452 
îr
 = 0;

453 
îrout
:

454 
	`‰ì
(
°r
);

456  
îr
;

457 
	}
}

471 
∆_addr
 *
	$∆_addr_˛⁄e
(
∆_addr
 *
addr
)

473 
∆_addr
 *
√w
;

475 
√w
 = 
	`∆_addr_buûd
(
addr
->
a_Ámûy
,áddr->
a_addr
,áddr->
a_Àn
);

476 i‡(
√w
)

477 
√w
->
a_¥efixÀn
 = 
addr
->a_prefixlen;

479  
√w
;

480 
	}
}

501 
∆_addr
 *
	$∆_addr_gë
(
∆_addr
 *
addr
)

503 
addr
->
a_ªf˙t
++;

505  
addr
;

506 
	}
}

517 
	$∆_addr_put
(
∆_addr
 *
addr
)

519 i‡(!
addr
)

522 i‡(
addr
->
a_ªf˙t
 == 1)

523 
	`addr_de°roy
(
addr
);

525 
addr
->
a_ªf˙t
--;

526 
	}
}

534 
	$∆_addr_sh¨ed
(
∆_addr
 *
addr
)

536  
addr
->
a_ªf˙t
 > 1;

537 
	}
}

563 
	$∆_addr_cmp
(
∆_addr
 *
a
, ∆_add∏*
b
)

565 
d
 = 
a
->
a_Ámûy
 - 
b
->a_family;

567 i‡(
d
 == 0) {

568 
d
 = 
a
->
a_Àn
 - 
b
->a_len;

570 i‡(
a
->
a_Àn
 && 
d
 == 0) {

571 
d
 = 
	`memcmp
(
a
->
a_addr
, 
b
->a_addr,á->
a_Àn
);

573 i‡(
d
 == 0)

574  (
a
->
a_¥efixÀn
 - 
b
->a_prefixlen);

578  
d
;

579 
	}
}

594 
	$∆_addr_cmp_¥efix
(
∆_addr
 *
a
, ∆_add∏*
b
)

596 
d
 = 
a
->
a_Ámûy
 - 
b
->a_family;

598 i‡(
d
 == 0) {

599 
Àn
 = 
	`mö
(
a
->
a_¥efixÀn
, 
b
->a_prefixlen);

600 
byãs
 = 
Àn
 / 8;

602 
d
 = 
	`memcmp
(
a
->
a_addr
, 
b
->a_addr, 
byãs
);

603 i‡(
d
 =0 && (
Àn
 % 8) != 0) {

604 
mask
 = (0xFF00 >> (
Àn
 % 8)) & 0xFF;

606 
d
 = (
a
->
a_addr
[
byãs
] & 
mask
) -

607 (
b
->
a_addr
[
byãs
] & 
mask
);

611  
d
;

612 
	}
}

620 
	$∆_addr_iszîo
(
∆_addr
 *
addr
)

622 
i
;

624 
i
 = 0; i < 
addr
->
a_Àn
; i++)

625 i‡(
addr
->
a_addr
[
i
])

629 
	}
}

639 
	$∆_addr_vÆid
(*
addr
, 
Ámûy
)

641 
ªt
;

642 
buf
[32];

644 
Ámûy
) {

645 
AF_INET
:

646 
AF_INET6
:

647 
ªt
 = 
	`öë_±⁄
(
Ámûy
, 
addr
, 
buf
);

648 i‡(
ªt
 <= 0)

652 
AF_DEC√t
:

653 
ªt
 = 
	`d√t_±⁄
(
addr
, 
buf
);

654 i‡(
ªt
 <= 0)

658 
AF_LLC
:

659 i‡(
	`ssˇnf
(
addr
, "%*02x:%*02x:%*02x:%*02x:%*02x:%*02x") != 6)

665 
	}
}

673 
	$∆_addr_guess_Ámûy
(
∆_addr
 *
addr
)

675 
addr
->
a_Àn
) {

677  
AF_INET
;

679  
AF_LLC
;

681  
AF_INET6
;

683  
AF_UNSPEC
;

685 
	}
}

700 
	$∆_addr_fûl_sockaddr
(
∆_addr
 *
addr
, 
sockaddr
 *
ß
,

701 
sockÀn_t
 *
ßÀn
)

703 
addr
->
a_Ámûy
) {

704 
AF_INET
: {

705 
sockaddr_ö
 *
ßi
 = (sockaddr_ö *Ë
ß
;

707 i‡(*
ßÀn
 < (*
ßi
))

708  -
NLE_INVAL
;

710 
ßi
->
sö_Ámûy
 = 
addr
->
a_Ámûy
;

711 
	`mem˝y
(&
ßi
->
sö_addr
, 
addr
->
a_addr
, 4);

712 *
ßÀn
 = (*
ßi
);

716 
AF_INET6
: {

717 
sockaddr_ö6
 *
ß6
 = (sockaddr_ö6 *Ë
ß
;

719 i‡(*
ßÀn
 < (*
ß6
))

720  -
NLE_INVAL
;

722 
ß6
->
sö6_Ámûy
 = 
addr
->
a_Ámûy
;

723 
	`mem˝y
(&
ß6
->
sö6_addr
, 
addr
->
a_addr
, 16);

724 *
ßÀn
 = (*
ß6
);

729  -
NLE_INVAL
;

733 
	}
}

756 
	$∆_addr_öfo
(
∆_addr
 *
addr
, 
addröfo
 **
ªsu…
)

758 
îr
;

759 
buf
[
INET6_ADDRSTRLEN
+5];

760 
addröfo
 
höt
 = {

761 .
ai_Êags
 = 
AI_NUMERICHOST
,

762 .
ai_Ámûy
 = 
addr
->
a_Ámûy
,

765 
	`∆_addr2°r
(
addr
, 
buf
, (buf));

767 
îr
 = 
	`gëaddröfo
(
buf
, 
NULL
, &
höt
, 
ªsu…
);

768 i‡(
îr
 != 0) {

769 
îr
) {

770 
EAI_ADDRFAMILY
:  -
NLE_AF_NOSUPPORT
;

771 
EAI_AGAIN
:  -
NLE_AGAIN
;

772 
EAI_BADFLAGS
:  -
NLE_INVAL
;

773 
EAI_FAIL
:  -
NLE_NOADDR
;

774 
EAI_FAMILY
:  -
NLE_AF_NOSUPPORT
;

775 
EAI_MEMORY
:  -
NLE_NOMEM
;

776 
EAI_NODATA
:  -
NLE_NOADDR
;

777 
EAI_NONAME
:  -
NLE_OBJ_NOTFOUND
;

778 
EAI_SERVICE
:  -
NLE_OPNOTSUPP
;

779 
EAI_SOCKTYPE
:  -
NLE_BAD_SOCK
;

780 :  -
NLE_FAILURE
;

785 
	}
}

800 
	$∆_addr_ªsﬁve
(
∆_addr
 *
addr
, *
ho°
, 
size_t
 
ho°Àn
)

802 
îr
;

803 
sockaddr_ö6
 
buf
;

804 
sockÀn_t
 
ßÀn
 = (
buf
);

806 
îr
 = 
	`∆_addr_fûl_sockaddr
(
addr
, (
sockaddr
 *Ë&
buf
, &
ßÀn
);

807 i‡(
îr
 < 0)

808  
îr
;

810 
îr
 = 
	`gë«meöfo
((
sockaddr
 *Ë&
buf
, 
ßÀn
, 
ho°
, 
ho°Àn
,

811 
NULL
, 0, 
NI_NAMEREQD
);

812 i‡(
îr
 < 0)

813  
	`∆_sy£º2∆îr
(
îr
);

816 
	}
}

832 
	$∆_addr_£t_Ámûy
(
∆_addr
 *
addr
, 
Ámûy
)

834 
addr
->
a_Ámûy
 = 
Ámûy
;

835 
	}
}

845 
	$∆_addr_gë_Ámûy
(
∆_addr
 *
addr
)

847  
addr
->
a_Ámûy
;

848 
	}
}

870 
	$∆_addr_£t_bö¨y_addr
(
∆_addr
 *
addr
, *
buf
, 
size_t
 
Àn
)

872 i‡(
Àn
 > 
addr
->
a_maxsize
)

873  -
NLE_RANGE
;

875 
addr
->
a_Àn
 = 
Àn
;

876 
	`mem£t
(
addr
->
a_addr
, 0,áddr->
a_maxsize
);

878 i‡(
Àn
)

879 
	`mem˝y
(
addr
->
a_addr
, 
buf
, 
Àn
);

882 
	}
}

893 *
	$∆_addr_gë_bö¨y_addr
(
∆_addr
 *
addr
)

895  
addr
->
a_addr
;

896 
	}
}

905 
	$∆_addr_gë_Àn
(
∆_addr
 *
addr
)

907  
addr
->
a_Àn
;

908 
	}
}

917 
	$∆_addr_£t_¥efixÀn
(
∆_addr
 *
addr
, 
¥efixÀn
)

919 
addr
->
a_¥efixÀn
 = 
¥efixÀn
;

920 
	}
}

928 
	$∆_addr_gë_¥efixÀn
(
∆_addr
 *
addr
)

930  
addr
->
a_¥efixÀn
;

931 
	}
}

951 *
	$∆_addr2°r
(
∆_addr
 *
addr
, *
buf
, 
size_t
 
size
)

953 
i
;

954 
tmp
[16];

956 i‡(!
addr
 || !addr->
a_Àn
) {

957 
	`¢¥ötf
(
buf
, 
size
, "none");

958 i‡(
addr
)

959 
¥efix
;

961  
buf
;

964 
addr
->
a_Ámûy
) {

965 
AF_INET
:

966 
	`öë_¡›
(
AF_INET
, 
addr
->
a_addr
, 
buf
, 
size
);

969 
AF_INET6
:

970 
	`öë_¡›
(
AF_INET6
, 
addr
->
a_addr
, 
buf
, 
size
);

973 
AF_DEC√t
:

974 
	`d√t_¡›
(
addr
->
a_addr
,áddr->
a_Àn
, 
buf
, 
size
);

977 
AF_LLC
:

979 
	`¢¥ötf
(
buf
, 
size
, "%02x",

980 (Ë
addr
->
a_addr
[0]);

981 
i
 = 1; i < 
addr
->
a_Àn
; i++) {

982 
	`¢¥ötf
(
tmp
, (tmp), ":%02x",

983 (Ë
addr
->
a_addr
[
i
]);

984 
	`°∫ˇt
(
buf
, 
tmp
, 
size
 - 
	`°æí
(buf) - 1);

989 
¥efix
:

990 i‡(
addr
->
a_¥efixÀn
 !(8 *áddr->
a_Àn
)) {

991 
	`¢¥ötf
(
tmp
, —mp), "/%u", 
addr
->
a_¥efixÀn
);

992 
	`°∫ˇt
(
buf
, 
tmp
, 
size
 - 
	`°æí
(buf) - 1);

995  
buf
;

996 
	}
}

1005 c⁄° 
å™s_tbl
 
	gafs
[] = {

1006 
__ADD
(
AF_UNSPEC
,
un•ec
)

1007 
__ADD
(
AF_UNIX
,
unix
)

1008 
__ADD
(
AF_INET
,
öë
)

1009 
__ADD
(
AF_AX25
,
ax25
)

1010 
__ADD
(
AF_IPX
,
ùx
)

1011 
__ADD
(
AF_APPLETALK
,
≠∂ëÆk
)

1012 
__ADD
(
AF_NETROM
,
√åom
)

1013 
__ADD
(
AF_BRIDGE
,
bridge
)

1014 
__ADD
(
AF_ATMPVC
,
©mpvc
)

1015 
__ADD
(
AF_X25
,
x25
)

1016 
__ADD
(
AF_INET6
,
öë6
)

1017 
__ADD
(
AF_ROSE
,
ro£
)

1018 
__ADD
(
AF_DEC√t
,
de˙ë
)

1019 
__ADD
(
AF_NETBEUI
,
√tbeui
)

1020 
__ADD
(
AF_SECURITY
,
£curôy
)

1021 
__ADD
(
AF_KEY
,
key
)

1022 
__ADD
(
AF_NETLINK
,
√éök
)

1023 
__ADD
(
AF_PACKET
,
∑ckë
)

1024 
__ADD
(
AF_ASH
,
ash
)

1025 
__ADD
(
AF_ECONET
,
ec⁄ë
)

1026 
__ADD
(
AF_ATMSVC
,
©msvc
)

1027 #ifde‡
AF_RDS


1028 
__ADD
(
AF_RDS
,
rds
)

1030 
__ADD
(
AF_SNA
,
¢a
)

1031 
__ADD
(
AF_IRDA
,
úda
)

1032 
__ADD
(
AF_PPPOX
,
µpox
)

1033 
__ADD
(
AF_WANPIPE
,
w™pùe
)

1034 
__ADD
(
AF_LLC
,
Œc
)

1035 #ifde‡
AF_CAN


1036 
__ADD
(
AF_CAN
,
ˇn
)

1038 #ifde‡
AF_TIPC


1039 
__ADD
(
AF_TIPC
,
tùc
)

1041 
__ADD
(
AF_BLUETOOTH
,
bluëoŸh
)

1042 #ifde‡
AF_IUCV


1043 
__ADD
(
AF_IUCV
,
iucv
)

1045 #ifde‡
AF_RXRPC


1046 
__ADD
(
AF_RXRPC
,
rxΩc
)

1048 #ifde‡
AF_ISDN


1049 
__ADD
(
AF_ISDN
,
isdn
)

1051 #ifde‡
AF_PHONET


1052 
__ADD
(
AF_PHONET
,
ph⁄ë
)

1054 #ifde‡
AF_IEEE802154


1055 
__ADD
(
AF_IEEE802154
,
õì802154
)

1057 #ifde‡
AF_CAIF


1058 
__ADD
(
AF_CAIF
,
ˇif
)

1060 #ifde‡
AF_ALG


1061 
__ADD
(
AF_ALG
,
Æg
)

1063 #ifde‡
AF_NFC


1064 
__ADD
(
AF_NFC
,
nfc
)

1068 *
	$∆_af2°r
(
Ámûy
, *
buf
, 
size_t
 
size
)

1070  
	`__ty≥2°r
(
Ámûy
, 
buf
, 
size
, 
afs
, 
	`ARRAY_SIZE
(afs));

1071 
	}
}

1073 
	$∆_°r2af
(c⁄° *
«me
)

1075 
Ám
 = 
	`__°r2ty≥
(
«me
, 
afs
, 
	`ARRAY_SIZE
(afs));

1076  
Ám
 >0 ? fam : -
EINVAL
;

1077 
	}
}

	@mylibnl/libnl-3.2.25/lib/attr.c

12 
	~<√éök-¥iv©e/√éök.h
>

13 
	~<√éök/√éök.h
>

14 
	~<√éök/utûs.h
>

15 
	~<√éök/addr.h
>

16 
	~<√éök/©å.h
>

17 
	~<√éök/msg.h
>

18 
	~<löux/sockë.h
>

55 
	$∆a_©å_size
(
∑ylﬂd
)

57  
NLA_HDRLEN
 + 
∑ylﬂd
;

58 
	}
}

73 
	$∆a_tŸÆ_size
(
∑ylﬂd
)

75  
	`NLA_ALIGN
(
	`∆a_©å_size
(
∑ylﬂd
));

76 
	}
}

91 
	$∆a_∑dÀn
(
∑ylﬂd
)

93  
	`∆a_tŸÆ_size
(
∑ylﬂd
Ë- 
	`∆a_©å_size
(payload);

94 
	}
}

109 
	$∆a_ty≥
(c⁄° 
∆©å
 *
∆a
)

111  
∆a
->
∆a_ty≥
 & 
NLA_TYPE_MASK
;

112 
	}
}

120 *
	$∆a_d©a
(c⁄° 
∆©å
 *
∆a
)

122  (*Ë
∆a
 + 
NLA_HDRLEN
;

123 
	}
}

131 
	$∆a_Àn
(c⁄° 
∆©å
 *
∆a
)

133  
∆a
->
∆a_Àn
 - 
NLA_HDRLEN
;

134 
	}
}

148 
	$∆a_ok
(c⁄° 
∆©å
 *
∆a
, 
ªmaöög
)

150  
ªmaöög
 >(*
∆a
) &&

151 
∆a
->
∆a_Àn
 >= (*nla) &&

152 
∆a
->
∆a_Àn
 <
ªmaöög
;

153 
	}
}

171 
∆©å
 *
	$∆a_√xt
(c⁄° 
∆©å
 *
∆a
, *
ªmaöög
)

173 
tŸÀn
 = 
	`NLA_ALIGN
(
∆a
->
∆a_Àn
);

175 *
ªmaöög
 -
tŸÀn
;

176  (
∆©å
 *Ë((*Ë
∆a
 + 
tŸÀn
);

177 
	}
}

179 
uöt16_t
 
	g∆a_©å_möÀn
[
NLA_TYPE_MAX
+1] = {

180 [
NLA_U8
] = (
uöt8_t
),

181 [
NLA_U16
] = (
uöt16_t
),

182 [
NLA_U32
] = (
uöt32_t
),

183 [
NLA_U64
] = (
uöt64_t
),

184 [
NLA_STRING
] = 1,

185 [
NLA_FLAG
] = 0,

188 
	$vÆid©e_∆a
(
∆©å
 *
∆a
, 
maxty≥
,

189 
∆a_pﬁicy
 *
pﬁicy
)

191 
∆a_pﬁicy
 *
±
;

192 
möÀn
 = 0;

193 
ty≥
 = 
	`∆a_ty≥
(
∆a
);

195 i‡(
ty≥
 < 0 ||Åy≥ > 
maxty≥
)

198 
±
 = &
pﬁicy
[
ty≥
];

200 i‡(
±
->
ty≥
 > 
NLA_TYPE_MAX
)

201 
	`BUG
();

203 i‡(
±
->
möÀn
)

204 
möÀn
 = 
±
->minlen;

205 i‡(
±
->
ty≥
 !
NLA_UNSPEC
)

206 
möÀn
 = 
∆a_©å_möÀn
[
±
->
ty≥
];

208 i‡(
	`∆a_Àn
(
∆a
Ë< 
möÀn
)

209  -
NLE_RANGE
;

211 i‡(
±
->
maxÀn
 && 
	`∆a_Àn
(
∆a
) >Öt->maxlen)

212  -
NLE_RANGE
;

214 i‡(
±
->
ty≥
 =
NLA_STRING
) {

215 *
d©a
 = 
	`∆a_d©a
(
∆a
);

216 i‡(
d©a
[
	`∆a_Àn
(
∆a
) - 1] != '\0')

217  -
NLE_INVAL
;

221 
	}
}

242 
	$∆a_∑r£
(
∆©å
 *
tb
[], 
maxty≥
, ∆©å *
hód
, 
Àn
,

243 
∆a_pﬁicy
 *
pﬁicy
)

245 
∆©å
 *
∆a
;

246 
ªm
, 
îr
;

248 
	`mem£t
(
tb
, 0, (
∆©å
 *Ë* (
maxty≥
 + 1));

250 
	`∆a_f‹_óch_©å
(
∆a
, 
hód
, 
Àn
, 
ªm
) {

251 
ty≥
 = 
	`∆a_ty≥
(
∆a
);

253 i‡(
ty≥
 > 
maxty≥
)

256 i‡(
pﬁicy
) {

257 
îr
 = 
	`vÆid©e_∆a
(
∆a
, 
maxty≥
, 
pﬁicy
);

258 i‡(
îr
 < 0)

259 
îrout
;

262 i‡(
tb
[
ty≥
])

263 
	`NL_DBG
(1, "Attribute ofÅype %#x found multipleÅimes in message, "

264 "¥eviou†©åibuã i†beög ign‹ed.\n", 
ty≥
);

266 
tb
[
ty≥
] = 
∆a
;

269 i‡(
ªm
 > 0)

270 
	`NL_DBG
(1, "netlink: %d bytesÜeftoveráfterÖarsing "

271 "©åibuãs.\n", 
ªm
);

273 
îr
 = 0;

274 
îrout
:

275  
îr
;

276 
	}
}

294 
	$∆a_vÆid©e
(
∆©å
 *
hód
, 
Àn
, 
maxty≥
,

295 
∆a_pﬁicy
 *
pﬁicy
)

297 
∆©å
 *
∆a
;

298 
ªm
, 
îr
;

300 
	`∆a_f‹_óch_©å
(
∆a
, 
hód
, 
Àn
, 
ªm
) {

301 
îr
 = 
	`vÆid©e_∆a
(
∆a
, 
maxty≥
, 
pﬁicy
);

302 i‡(
îr
 < 0)

303 
îrout
;

306 
îr
 = 0;

307 
îrout
:

308  
îr
;

309 
	}
}

323 
∆©å
 *
	$∆a_föd
(
∆©å
 *
hód
, 
Àn
, 
©åty≥
)

325 
∆©å
 *
∆a
;

326 
ªm
;

328 
	`∆a_f‹_óch_©å
(
∆a
, 
hód
, 
Àn
, 
ªm
)

329 i‡(
	`∆a_ty≥
(
∆a
Ë=
©åty≥
)

330  
∆a
;

332  
NULL
;

333 
	}
}

353 
	$∆a_mem˝y
(*
de°
, 
∆©å
 *
§c
, 
cou¡
)

355 
möÀn
;

357 i‡(!
§c
)

360 
möÀn
 = 
	`mö_t
(, 
cou¡
, 
	`∆a_Àn
(
§c
));

361 
	`mem˝y
(
de°
, 
	`∆a_d©a
(
§c
), 
möÀn
);

363  
möÀn
;

364 
	}
}

378 
size_t
 
	$∆a_°æ˝y
(*
d°
, c⁄° 
∆©å
 *
∆a
, 
size_t
 
d°size
)

380 
size_t
 
§˛í
 = 
	`∆a_Àn
(
∆a
);

381 *
§c
 = 
	`∆a_d©a
(
∆a
);

383 i‡(
§˛í
 > 0 && 
§c
[srclen - 1] == '\0')

384 
§˛í
--;

386 i‡(
d°size
 > 0) {

387 
size_t
 
Àn
 = (
§˛í
 >
d°size
) ? dstsize - 1 : srclen;

389 
	`mem£t
(
d°
, 0, 
d°size
);

390 
	`mem˝y
(
d°
, 
§c
, 
Àn
);

393  
§˛í
;

394 
	}
}

405 
	$∆a_memcmp
(c⁄° 
∆©å
 *
∆a
, c⁄° *
d©a
, 
size_t
 
size
)

407 
d
 = 
	`∆a_Àn
(
∆a
Ë- 
size
;

409 i‡(
d
 == 0)

410 
d
 = 
	`memcmp
(
	`∆a_d©a
(
∆a
), 
d©a
, 
size
);

412  
d
;

413 
	}
}

423 
	$∆a_°rcmp
(c⁄° 
∆©å
 *
∆a
, c⁄° *
°r
)

425 
Àn
 = 
	`°æí
(
°r
) + 1;

426 
d
 = 
	`∆a_Àn
(
∆a
Ë- 
Àn
;

428 i‡(
d
 == 0)

429 
d
 = 
	`memcmp
(
	`∆a_d©a
(
∆a
), 
°r
, 
Àn
);

431  
d
;

432 
	}
}

456 
∆©å
 *
	$∆a_ª£rve
(
∆_msg
 *
msg
, 
©åty≥
, 
©åÀn
)

458 
∆©å
 *
∆a
;

459 
éí
;

461 
éí
 = 
	`NLMSG_ALIGN
(
msg
->
nm_∆h
->
∆msg_Àn
Ë+ 
	`∆a_tŸÆ_size
(
©åÀn
);

463 i‡(
éí
 > 
msg
->
nm_size
)

464  
NULL
;

466 
∆a
 = (
∆©å
 *Ë
	`∆msg_èû
(
msg
->
nm_∆h
);

467 
∆a
->
∆a_ty≥
 = 
©åty≥
;

468 
∆a
->
∆a_Àn
 = 
	`∆a_©å_size
(
©åÀn
);

470 i‡(
©åÀn
)

471 
	`mem£t
((*Ë
∆a
 +Çœ->
∆a_Àn
, 0, 
	`∆a_∑dÀn
(
©åÀn
));

472 
msg
->
nm_∆h
->
∆msg_Àn
 = 
éí
;

474 
	`NL_DBG
(2, "msg %p:áttr <%p> %d: Reserved %d (%d) bytesát offset +%td "

475 "∆msg_Àn=%d\n", 
msg
, 
∆a
,Çœ->
∆a_ty≥
,

476 
	`∆a_tŸÆ_size
(
©åÀn
),áttrlen,

477 (*Ë
∆a
 - 
	`∆msg_d©a
(
msg
->
nm_∆h
),

478 
msg
->
nm_∆h
->
∆msg_Àn
);

480  
∆a
;

481 
	}
}

497 
	$∆a_put
(
∆_msg
 *
msg
, 
©åty≥
, 
d©Æí
, c⁄° *
d©a
)

499 
∆©å
 *
∆a
;

501 
∆a
 = 
	`∆a_ª£rve
(
msg
, 
©åty≥
, 
d©Æí
);

502 i‡(!
∆a
)

503  -
NLE_NOMEM
;

505 i‡(
d©Æí
 > 0) {

506 
	`mem˝y
(
	`∆a_d©a
(
∆a
), 
d©a
, 
d©Æí
);

507 
	`NL_DBG
(2, "msg %p:áttr <%p> %d: Wrote %d bytesát offset +%td\n",

508 
msg
, 
∆a
,Çœ->
∆a_ty≥
, 
d©Æí
,

509 (*Ë
∆a
 - 
	`∆msg_d©a
(
msg
->
nm_∆h
));

513 
	}
}

527 
	$∆a_put_d©a
(
∆_msg
 *
msg
, 
©åty≥
, 
∆_d©a
 *
d©a
)

529  
	`∆a_put
(
msg
, 
©åty≥
, 
	`∆_d©a_gë_size
(
d©a
),

530 
	`∆_d©a_gë
(
d©a
));

531 
	}
}

542 
	$∆a_put_addr
(
∆_msg
 *
msg
, 
©åty≥
, 
∆_addr
 *
addr
)

544  
	`∆a_put
(
msg
, 
©åty≥
, 
	`∆_addr_gë_Àn
(
addr
),

545 
	`∆_addr_gë_bö¨y_addr
(
addr
));

546 
	}
}

563 
	$∆a_put_u8
(
∆_msg
 *
msg
, 
©åty≥
, 
uöt8_t
 
vÆue
)

565  
	`∆a_put
(
msg
, 
©åty≥
, (
uöt8_t
), &
vÆue
);

566 
	}
}

574 
uöt8_t
 
	$∆a_gë_u8
(
∆©å
 *
∆a
)

576  *(
uöt8_t
 *Ë
	`∆a_d©a
(
∆a
);

577 
	}
}

588 
	$∆a_put_u16
(
∆_msg
 *
msg
, 
©åty≥
, 
uöt16_t
 
vÆue
)

590  
	`∆a_put
(
msg
, 
©åty≥
, (
uöt16_t
), &
vÆue
);

591 
	}
}

599 
uöt16_t
 
	$∆a_gë_u16
(
∆©å
 *
∆a
)

601  *(
uöt16_t
 *Ë
	`∆a_d©a
(
∆a
);

602 
	}
}

613 
	$∆a_put_u32
(
∆_msg
 *
msg
, 
©åty≥
, 
uöt32_t
 
vÆue
)

615  
	`∆a_put
(
msg
, 
©åty≥
, (
uöt32_t
), &
vÆue
);

616 
	}
}

624 
uöt32_t
 
	$∆a_gë_u32
(
∆©å
 *
∆a
)

626  *(
uöt32_t
 *Ë
	`∆a_d©a
(
∆a
);

627 
	}
}

638 
	$∆a_put_u64
(
∆_msg
 *
msg
, 
©åty≥
, 
uöt64_t
 
vÆue
)

640  
	`∆a_put
(
msg
, 
©åty≥
, (
uöt64_t
), &
vÆue
);

641 
	}
}

649 
uöt64_t
 
	$∆a_gë_u64
(
∆©å
 *
∆a
)

651 
uöt64_t
 
tmp
 = 0;

653 i‡(
∆a
 && 
	`∆a_Àn
“œË>(
tmp
))

654 
	`mem˝y
(&
tmp
, 
	`∆a_d©a
(
∆a
), (tmp));

656  
tmp
;

657 
	}
}

674 
	$∆a_put_°rög
(
∆_msg
 *
msg
, 
©åty≥
, c⁄° *
°r
)

676  
	`∆a_put
(
msg
, 
©åty≥
, 
	`°æí
(
°r
) + 1, str);

677 
	}
}

685 *
	$∆a_gë_°rög
(
∆©å
 *
∆a
)

687  (*Ë
	`∆a_d©a
(
∆a
);

688 
	}
}

690 *
	$∆a_°rdup
(
∆©å
 *
∆a
)

692  
	`°rdup
(
	`∆a_gë_°rög
(
∆a
));

693 
	}
}

709 
	$∆a_put_Êag
(
∆_msg
 *
msg
, 
©åty≥
)

711  
	`∆a_put
(
msg
, 
©åty≥
, 0, 
NULL
);

712 
	}
}

720 
	$∆a_gë_Êag
(
∆©å
 *
∆a
)

722  !!
∆a
;

723 
	}
}

737 
	$∆a_put_m£cs
(
∆_msg
 *
n
, 
©åty≥
, 
m£cs
)

739  
	`∆a_put_u64
(
n
, 
©åty≥
, 
m£cs
);

740 
	}
}

748 
	$∆a_gë_m£cs
(
∆©å
 *
∆a
)

750  
	`∆a_gë_u64
(
∆a
);

751 
	}
}

772 
	$∆a_put_√°ed
(
∆_msg
 *
msg
, 
©åty≥
, ∆_msg *
√°ed
)

774 
	`NL_DBG
(2, "msg %p:áttr <> %d:ádding msg %pásÇestedáttribute\n",

775 
msg
, 
©åty≥
, 
√°ed
);

777  
	`∆a_put
(
msg
, 
©åty≥
, 
	`∆msg_d©Æí
(
√°ed
->
nm_∆h
),

778 
	`∆msg_d©a
(
√°ed
->
nm_∆h
));

779 
	}
}

789 
∆©å
 *
	$∆a_√°_°¨t
(
∆_msg
 *
msg
, 
©åty≥
)

791 
∆©å
 *
°¨t
 = (∆©å *Ë
	`∆msg_èû
(
msg
->
nm_∆h
);

793 i‡(
	`∆a_put
(
msg
, 
©åty≥
, 0, 
NULL
) < 0)

794  
NULL
;

796 
	`NL_DBG
(2, "msg %p:áttr <%p> %d: startingÇesting\n",

797 
msg
, 
°¨t
, sèπ->
∆a_ty≥
);

799  
°¨t
;

800 
	}
}

811 
	$∆a_√°_íd
(
∆_msg
 *
msg
, 
∆©å
 *
°¨t
)

813 
size_t
 
∑d
, 
Àn
;

815 
Àn
 = (*Ë
	`∆msg_èû
(
msg
->
nm_∆h
Ë- (*Ë
°¨t
;

817 i‡(
Àn
 =
NLA_HDRLEN
) {

822 
	`∆a_√°_ˇn˚l
(
msg
, 
°¨t
);

827 
°¨t
->
∆a_Àn
 = 
Àn
;

829 
∑d
 = 
	`NLMSG_ALIGN
(
msg
->
nm_∆h
->
∆msg_Àn
) - msg->nm_nlh->nlmsg_len;

830 i‡(
∑d
 > 0) {

837 i‡(!
	`∆msg_ª£rve
(
msg
, 
∑d
, 0))

838 
	`BUG
();

840 
	`NL_DBG
(2, "msg %p:áttr <%p> %d:ádded %zu bytes ofÖadding\n",

841 
msg
, 
°¨t
, sèπ->
∆a_ty≥
, 
∑d
);

844 
	`NL_DBG
(2, "msg %p:áttr <%p> %d: closingÇesting,Üen=%u\n",

845 
msg
, 
°¨t
, sèπ->
∆a_ty≥
, sèπ->
∆a_Àn
);

848 
	}
}

859 
	$∆a_√°_ˇn˚l
(
∆_msg
 *
msg
, 
∆©å
 *
©å
)

861 
ssize_t
 
Àn
;

863 
Àn
 = (*Ë
	`∆msg_èû
(
msg
->
nm_∆h
Ë- (*Ë
©å
;

864 i‡(
Àn
 < 0)

865 
	`BUG
();

866 i‡(
Àn
 > 0) {

867 
msg
->
nm_∆h
->
∆msg_Àn
 -
Àn
;

868 
	`mem£t
(
	`∆msg_èû
(
msg
->
nm_∆h
), 0, 
Àn
);

870 
	}
}

885 
	$∆a_∑r£_√°ed
(
∆©å
 *
tb
[], 
maxty≥
, ∆©å *
∆a
,

886 
∆a_pﬁicy
 *
pﬁicy
)

888  
	`∆a_∑r£
(
tb
, 
maxty≥
, 
	`∆a_d©a
(
∆a
), 
	`∆a_Àn
“œ), 
pﬁicy
);

889 
	}
}

897 
	$∆a_is_√°ed
(
∆©å
 *
©å
)

899  !!(
©å
->
∆a_ty≥
 & 
NLA_F_NESTED
);

900 
	}
}

	@mylibnl/libnl-3.2.25/lib/cache.c

52 
	~<√éök-¥iv©e/√éök.h
>

53 
	~<√éök/√éök.h
>

54 
	~<√éök/ˇche.h
>

55 
	~<√éök/obje˘.h
>

56 
	~<√éök/hashèbÀ.h
>

57 
	~<√éök/utûs.h
>

68 
	$∆_ˇche_nôems
(
∆_ˇche
 *
ˇche
)

70  
ˇche
->
c_nôems
;

71 
	}
}

78 
	$∆_ˇche_nôems_fûãr
(
∆_ˇche
 *
ˇche
, 
∆_obje˘
 *
fûãr
)

80 
∆_obje˘
 *
obj
;

81 
nôems
 = 0;

83 i‡(
ˇche
->
c_›s
 =
NULL
)

84 
	`BUG
();

86 
	`∆_li°_f‹_óch_íåy
(
obj
, &
ˇche
->
c_ôems
, 
˚_li°
) {

87 i‡(
fûãr
 && !
	`∆_obje˘_m©ch_fûãr
(
obj
, filter))

90 
nôems
++;

93  
nôems
;

94 
	}
}

101 
	$∆_ˇche_is_em±y
(
∆_ˇche
 *
ˇche
)

103  
	`∆_li°_em±y
(&
ˇche
->
c_ôems
);

104 
	}
}

110 
∆_ˇche_›s
 *
	$∆_ˇche_gë_›s
(
∆_ˇche
 *
ˇche
)

112  
ˇche
->
c_›s
;

113 
	}
}

119 
∆_obje˘
 *
	$∆_ˇche_gë_fú°
(
∆_ˇche
 *
ˇche
)

121 i‡(
	`∆_li°_em±y
(&
ˇche
->
c_ôems
))

122  
NULL
;

124  
	`∆_li°_íåy
(
ˇche
->
c_ôems
.
√xt
,

125 
∆_obje˘
, 
˚_li°
);

126 
	}
}

132 
∆_obje˘
 *
	$∆_ˇche_gë_œ°
(
∆_ˇche
 *
ˇche
)

134 i‡(
	`∆_li°_em±y
(&
ˇche
->
c_ôems
))

135  
NULL
;

137  
	`∆_li°_íåy
(
ˇche
->
c_ôems
.
¥ev
,

138 
∆_obje˘
, 
˚_li°
);

139 
	}
}

145 
∆_obje˘
 *
	$∆_ˇche_gë_√xt
(
∆_obje˘
 *
obj
)

147 i‡(
	`∆_li°_©_èû
(
obj
, &obj->
˚_ˇche
->
c_ôems
, 
˚_li°
))

148  
NULL
;

150  
	`∆_li°_íåy
(
obj
->
˚_li°
.
√xt
,

151 
∆_obje˘
, 
˚_li°
);

152 
	}
}

158 
∆_obje˘
 *
	$∆_ˇche_gë_¥ev
(
∆_obje˘
 *
obj
)

160 i‡(
	`∆_li°_©_hód
(
obj
, &obj->
˚_ˇche
->
c_ôems
, 
˚_li°
))

161  
NULL
;

163  
	`∆_li°_íåy
(
obj
->
˚_li°
.
¥ev
,

164 
∆_obje˘
, 
˚_li°
);

165 
	}
}

183 
∆_ˇche
 *
	$∆_ˇche_Æloc
(
∆_ˇche_›s
 *
›s
)

185 
∆_ˇche
 *
ˇche
;

187 
ˇche
 = 
	`ˇŒoc
(1, (*cache));

188 i‡(!
ˇche
)

189  
NULL
;

191 
	`∆_öô_li°_hód
(&
ˇche
->
c_ôems
);

192 
ˇche
->
c_›s
 = 
›s
;

193 
ˇche
->
c_Êags
 |
›s
->
co_Êags
;

194 
ˇche
->
c_ªf˙t
 = 1;

201 i‡(
›s
->
co_obj_›s
->
oo_keygí
) {

202 
hashèbÀ_size
;

204 i‡(
›s
->
co_hash_size
)

205 
hashèbÀ_size
 = 
›s
->
co_hash_size
;

207 
hashèbÀ_size
 = 
NL_MAX_HASH_ENTRIES
;

209 
ˇche
->
hashèbÀ
 = 
	`∆_hash_èbÀ_Æloc
(
hashèbÀ_size
);

212 
	`NL_DBG
(2, "AŒoˇãd cachê%∞<%s>.\n", 
ˇche
, 
	`∆_ˇche_«me
(cache));

214  
ˇche
;

215 
	}
}

233 
	$∆_ˇche_Æloc_™d_fûl
(
∆_ˇche_›s
 *
›s
, 
∆_sock
 *
sock
,

234 
∆_ˇche
 **
ªsu…
)

236 
∆_ˇche
 *
ˇche
;

237 
îr
;

239 i‡(!(
ˇche
 = 
	`∆_ˇche_Æloc
(
›s
)))

240  -
NLE_NOMEM
;

242 i‡(
sock
 && (
îr
 = 
	`∆_ˇche_ªfûl
(sock, 
ˇche
)) < 0) {

243 
	`∆_ˇche_‰ì
(
ˇche
);

244  
îr
;

247 *
ªsu…
 = 
ˇche
;

249 
	}
}

264 
	$∆_ˇche_Æloc_«me
(c⁄° *
köd
, 
∆_ˇche
 **
ªsu…
)

266 
∆_ˇche_›s
 *
›s
;

267 
∆_ˇche
 *
ˇche
;

269 
›s
 = 
	`∆_ˇche_›s_lookup_ß„
(
köd
);

270 i‡(!
›s
)

271  -
NLE_NOCACHE
;

273 
ˇche
 = 
	`∆_ˇche_Æloc
(
›s
);

274 
	`∆_ˇche_›s_put
(
›s
);

275 i‡(!
ˇche
)

276  -
NLE_NOMEM
;

278 *
ªsu…
 = 
ˇche
;

280 
	}
}

297 
∆_ˇche
 *
	$∆_ˇche_sub£t
(
∆_ˇche
 *
‹ig
,

298 
∆_obje˘
 *
fûãr
)

300 
∆_ˇche
 *
ˇche
;

301 
∆_obje˘
 *
obj
;

303 i‡(!
fûãr
)

304 
	`BUG
();

306 
ˇche
 = 
	`∆_ˇche_Æloc
(
‹ig
->
c_›s
);

307 i‡(!
ˇche
)

308  
NULL
;

310 
	`NL_DBG
(2, "Filling subset of cache %p <%s> with filter %p into %p\n",

311 
‹ig
, 
	`∆_ˇche_«me
(‹ig), 
fûãr
, 
ˇche
);

313 
	`∆_li°_f‹_óch_íåy
(
obj
, &
‹ig
->
c_ôems
, 
˚_li°
) {

314 i‡(!
	`∆_obje˘_m©ch_fûãr
(
obj
, 
fûãr
))

317 
	`∆_ˇche_add
(
ˇche
, 
obj
);

320  
ˇche
;

321 
	}
}

337 
∆_ˇche
 *
	$∆_ˇche_˛⁄e
(
∆_ˇche
 *
ˇche
)

339 
∆_ˇche_›s
 *
›s
 = 
	`∆_ˇche_gë_›s
(
ˇche
);

340 
∆_ˇche
 *
˛⁄e
;

341 
∆_obje˘
 *
obj
;

343 
˛⁄e
 = 
	`∆_ˇche_Æloc
(
›s
);

344 i‡(!
˛⁄e
)

345  
NULL
;

347 
	`NL_DBG
(2, "Cl⁄ög %∞ötÿ%p\n", 
ˇche
, 
˛⁄e
);

349 
	`∆_li°_f‹_óch_íåy
(
obj
, &
ˇche
->
c_ôems
, 
˚_li°
)

350 
	`∆_ˇche_add
(
˛⁄e
, 
obj
);

352  
˛⁄e
;

353 
	}
}

366 
	$∆_ˇche_˛ór
(
∆_ˇche
 *
ˇche
)

368 
∆_obje˘
 *
obj
, *
tmp
;

370 
	`NL_DBG
(2, "CÀ¨ög cachê%∞<%s>...\n", 
ˇche
, 
	`∆_ˇche_«me
(cache));

372 
	`∆_li°_f‹_óch_íåy_ß„
(
obj
, 
tmp
, &
ˇche
->
c_ôems
, 
˚_li°
)

373 
	`∆_ˇche_ªmove
(
obj
);

374 
	}
}

376 
	$__∆_ˇche_‰ì
(
∆_ˇche
 *
ˇche
)

378 
	`∆_ˇche_˛ór
(
ˇche
);

380 i‡(
ˇche
->
hashèbÀ
)

381 
	`∆_hash_èbÀ_‰ì
(
ˇche
->
hashèbÀ
);

383 
	`NL_DBG
(2, "Fªeög cachê%∞<%s>...\n", 
ˇche
, 
	`∆_ˇche_«me
(cache));

384 
	`‰ì
(
ˇche
);

385 
	}
}

391 
	$∆_ˇche_gë
(
∆_ˇche
 *
ˇche
)

393 
ˇche
->
c_ªf˙t
++;

395 
	`NL_DBG
(3, "Incremented cache %p <%s>Ñeference countÅo %d\n",

396 
ˇche
, 
	`∆_ˇche_«me
(ˇche), cache->
c_ªf˙t
);

397 
	}
}

408 
	$∆_ˇche_‰ì
(
∆_ˇche
 *
ˇche
)

410 i‡(!
ˇche
)

413 
ˇche
->
c_ªf˙t
--;

415 
	`NL_DBG
(3, "Decremented cache %p <%s>Ñeference count, %dÑemaining\n",

416 
ˇche
, 
	`∆_ˇche_«me
(ˇche), cache->
c_ªf˙t
);

418 i‡(
ˇche
->
c_ªf˙t
 <= 0)

419 
	`__∆_ˇche_‰ì
(
ˇche
);

420 
	}
}

422 
	$∆_ˇche_put
(
∆_ˇche
 *
ˇche
)

424  
	`∆_ˇche_‰ì
(
ˇche
);

425 
	}
}

434 
	$__ˇche_add
(
∆_ˇche
 *
ˇche
, 
∆_obje˘
 *
obj
)

436 
ªt
;

438 
obj
->
˚_ˇche
 = 
ˇche
;

440 i‡(
ˇche
->
hashèbÀ
) {

441 
ªt
 = 
	`∆_hash_èbÀ_add
(
ˇche
->
hashèbÀ
, 
obj
);

442 i‡(
ªt
 < 0) {

443 
obj
->
˚_ˇche
 = 
NULL
;

444  
ªt
;

448 
	`∆_li°_add_èû
(&
obj
->
˚_li°
, &
ˇche
->
c_ôems
);

449 
ˇche
->
c_nôems
++;

451 
	`NL_DBG
(3, "Added object %pÅo cache %p <%s>,Çitems %d\n",

452 
obj
, 
ˇche
, 
	`∆_ˇche_«me
(ˇche), cache->
c_nôems
);

455 
	}
}

479 
	$∆_ˇche_add
(
∆_ˇche
 *
ˇche
, 
∆_obje˘
 *
obj
)

481 
∆_obje˘
 *
√w
;

482 
ªt
 = 0;

484 i‡(
ˇche
->
c_›s
->
co_obj_›s
 !
obj
->
˚_›s
)

485  -
NLE_OBJ_MISMATCH
;

487 i‡(!
	`∆_li°_em±y
(&
obj
->
˚_li°
)) {

488 
	`NL_DBG
(3, "Obje˘ %∞Æªady i¿ˇche, cl⁄ögÇew obje˘\n", 
obj
);

490 
√w
 = 
	`∆_obje˘_˛⁄e
(
obj
);

491 i‡(!
√w
)

492  -
NLE_NOMEM
;

494 
	`∆_obje˘_gë
(
obj
);

495 
√w
 = 
obj
;

498 
ªt
 = 
	`__ˇche_add
(
ˇche
, 
√w
);

499 i‡(
ªt
 < 0)

500 
	`∆_obje˘_put
(
√w
);

502  
ªt
;

503 
	}
}

523 
	$∆_ˇche_move
(
∆_ˇche
 *
ˇche
, 
∆_obje˘
 *
obj
)

525 i‡(
ˇche
->
c_›s
->
co_obj_›s
 !
obj
->
˚_›s
)

526  -
NLE_OBJ_MISMATCH
;

528 
	`NL_DBG
(3, "Moving object %p from cache %pÅo cache %p\n",

529 
obj
, obj->
˚_ˇche
, 
ˇche
);

533 
	`∆_obje˘_gë
(
obj
);

535 i‡(!
	`∆_li°_em±y
(&
obj
->
˚_li°
))

536 
	`∆_ˇche_ªmove
(
obj
);

538  
	`__ˇche_add
(
ˇche
, 
obj
);

539 
	}
}

551 
	$∆_ˇche_ªmove
(
∆_obje˘
 *
obj
)

553 
ªt
;

554 
∆_ˇche
 *
ˇche
 = 
obj
->
˚_ˇche
;

556 i‡(
ˇche
 =
NULL
)

559 i‡(
ˇche
->
hashèbÀ
) {

560 
ªt
 = 
	`∆_hash_èbÀ_dñ
(
ˇche
->
hashèbÀ
, 
obj
);

561 i‡(
ªt
 < 0)

562 
	`NL_DBG
(2, "FailedÅo delete %p from cache %p <%s>.\n",

563 
obj
, 
ˇche
, 
	`∆_ˇche_«me
(cache));

566 
	`∆_li°_dñ
(&
obj
->
˚_li°
);

567 
obj
->
˚_ˇche
 = 
NULL
;

568 
	`∆_obje˘_put
(
obj
);

569 
ˇche
->
c_nôems
--;

571 
	`NL_DBG
(2, "Deleted object %p from cache %p <%s>.\n",

572 
obj
, 
ˇche
, 
	`∆_ˇche_«me
(cache));

573 
	}
}

590 
	$∆_ˇche_£t_¨g1
(
∆_ˇche
 *
ˇche
, 
¨g
)

592 
ˇche
->
c_ürg1
 = 
¨g
;

593 
	}
}

603 
	$∆_ˇche_£t_¨g2
(
∆_ˇche
 *
ˇche
, 
¨g
)

605 
ˇche
->
c_ürg2
 = 
¨g
;

606 
	}
}

613 
	$∆_ˇche_£t_Êags
(
∆_ˇche
 *
ˇche
, 
Êags
)

615 
ˇche
->
c_Êags
 |
Êags
;

616 
	}
}

642 
	$∆_ˇche_ªque°_fuŒ_dump
(
∆_sock
 *
sk
,

643 
∆_ˇche
 *
ˇche
)

645 i‡(
sk
->
s_¥Ÿo
 !
ˇche
->
c_›s
->
co_¥Ÿocﬁ
)

646  -
NLE_PROTO_MISMATCH
;

648 i‡(
ˇche
->
c_›s
->
co_ªque°_upd©e
 =
NULL
)

649  -
NLE_OPNOTSUPP
;

651 
	`NL_DBG
(2, "Requesting update from kernel for cache %p <%s>\n",

652 
ˇche
, 
	`∆_ˇche_«me
(cache));

654  
ˇche
->
c_›s
->
	`co_ªque°_upd©e
(ˇche, 
sk
);

655 
	}
}

658 
	supd©e_xd©a
 {

659 
∆_ˇche_›s
 *
	m›s
;

660 
∆_∑r£r_∑øm
 *
	m∑øms
;

663 
	$upd©e_msg_∑r£r
(
∆_msg
 *
msg
, *
¨g
)

665 
upd©e_xd©a
 *
x
 = 
¨g
;

666 
ªt
 = 0;

668 
ªt
 = 
	`∆_ˇche_∑r£
(
x
->
›s
, &
msg
->
nm_§c
, msg->
nm_∆h
, x->
∑øms
);

669 i‡(
ªt
 =-
NLE_EXIST
)

670  
NL_SKIP
;

672  
ªt
;

673 
	}
}

682 
	$__ˇche_pickup
(
∆_sock
 *
sk
, 
∆_ˇche
 *
ˇche
,

683 
∆_∑r£r_∑øm
 *
∑øm
)

685 
îr
;

686 
∆_cb
 *
cb
;

687 
upd©e_xd©a
 
x
 = {

688 .
›s
 = 
ˇche
->
c_›s
,

689 .
∑øms
 = 
∑øm
,

692 
	`NL_DBG
(2, "Picking upánswer for cache %p <%s>\n",

693 
ˇche
, 
	`∆_ˇche_«me
(cache));

695 
cb
 = 
	`∆_cb_˛⁄e
(
sk
->
s_cb
);

696 i‡(
cb
 =
NULL
)

697  -
NLE_NOMEM
;

699 
	`∆_cb_£t
(
cb
, 
NL_CB_VALID
, 
NL_CB_CUSTOM
, 
upd©e_msg_∑r£r
, &
x
);

701 
îr
 = 
	`∆_ªcvmsgs
(
sk
, 
cb
);

702 i‡(
îr
 < 0)

703 
	`NL_DBG
(2, "WhileÖicking up for %p <%s>,Ñecvmsgs()Ñeturned %d: %s\n",

704 
ˇche
, 
	`∆_ˇche_«me
(ˇche), 
îr
, 
	`∆_gëîr‹
(err));

706 
	`∆_cb_put
(
cb
);

708  
îr
;

709 
	}
}

711 
	$pickup_cb
(
∆_obje˘
 *
c
, 
∆_∑r£r_∑øm
 *
p
)

713 
∆_ˇche
 *
ˇche
 = (∆_ˇchê*)
p
->
µ_¨g
;

714 
∆_obje˘
 *
ﬁd
;

716 
ﬁd
 = 
	`∆_ˇche_£¨ch
(
ˇche
, 
c
);

717 i‡(
ﬁd
) {

718 i‡(
	`∆_obje˘_upd©e
(
ﬁd
, 
c
) == 0) {

719 
	`∆_obje˘_put
(
ﬁd
);

723 
	`∆_ˇche_ªmove
(
ﬁd
);

724 
	`∆_obje˘_put
(
ﬁd
);

727  
	`∆_ˇche_add
(
ˇche
, 
c
);

728 
	}
}

743 
	$∆_ˇche_pickup
(
∆_sock
 *
sk
, 
∆_ˇche
 *
ˇche
)

745 
∆_∑r£r_∑øm
 
p
 = {

746 .
µ_cb
 = 
pickup_cb
,

747 .
µ_¨g
 = 
ˇche
,

750 i‡(
sk
->
s_¥Ÿo
 !
ˇche
->
c_›s
->
co_¥Ÿocﬁ
)

751  -
NLE_PROTO_MISMATCH
;

753  
	`__ˇche_pickup
(
sk
, 
ˇche
, &
p
);

754 
	}
}

756 
	$ˇche_ö˛ude
(
∆_ˇche
 *
ˇche
, 
∆_obje˘
 *
obj
,

757 
∆_msgty≥
 *
ty≥
, 
ch™ge_func_t
 
cb
, *
d©a
)

759 
∆_obje˘
 *
ﬁd
;

761 
ty≥
->
mt_a˘
) {

762 
NL_ACT_NEW
:

763 
NL_ACT_DEL
:

764 
ﬁd
 = 
	`∆_ˇche_£¨ch
(
ˇche
, 
obj
);

765 i‡(
ﬁd
) {

771 i‡(
	`∆_obje˘_upd©e
(
ﬁd
, 
obj
) == 0) {

772 i‡(
cb
)

773 
	`cb
(
ˇche
, 
ﬁd
, 
NL_ACT_CHANGE
, 
d©a
);

774 
	`∆_obje˘_put
(
ﬁd
);

778 
	`∆_ˇche_ªmove
(
ﬁd
);

779 i‡(
ty≥
->
mt_a˘
 =
NL_ACT_DEL
) {

780 i‡(
cb
)

781 
	`cb
(
ˇche
, 
ﬁd
, 
NL_ACT_DEL
, 
d©a
);

782 
	`∆_obje˘_put
(
ﬁd
);

786 i‡(
ty≥
->
mt_a˘
 =
NL_ACT_NEW
) {

787 
	`∆_ˇche_move
(
ˇche
, 
obj
);

788 i‡(
ﬁd
 =
NULL
 && 
cb
)

789 
	`cb
(
ˇche
, 
obj
, 
NL_ACT_NEW
, 
d©a
);

790 i‡(
ﬁd
) {

791 i‡(
	`∆_obje˘_diff
(
ﬁd
, 
obj
Ë&& 
cb
)

792 
	`cb
(
ˇche
, 
obj
, 
NL_ACT_CHANGE
, 
d©a
);

794 
	`∆_obje˘_put
(
ﬁd
);

799 
	`NL_DBG
(2, "Unknow¿a˘i⁄ássocüãdÅÿobje˘ %p\n", 
obj
);

804 
	}
}

806 
	$∆_ˇche_ö˛ude
(
∆_ˇche
 *
ˇche
, 
∆_obje˘
 *
obj
,

807 
ch™ge_func_t
 
ch™ge_cb
, *
d©a
)

809 
∆_ˇche_›s
 *
›s
 = 
ˇche
->
c_›s
;

810 
i
;

812 i‡(
›s
->
co_obj_›s
 !
obj
->
˚_›s
)

813  -
NLE_OBJ_MISMATCH
;

815 
i
 = 0; 
›s
->
co_msgty≥s
[i].
mt_id
 >= 0; i++)

816 i‡(
›s
->
co_msgty≥s
[
i
].
mt_id
 =
obj
->
˚_msgty≥
)

817  
	`ˇche_ö˛ude
(
ˇche
, 
obj
, &
›s
->
co_msgty≥s
[
i
],

818 
ch™ge_cb
, 
d©a
);

820 
	`NL_DBG
(3, "Object %p doesÇot seemÅo belongÅo cache %p <%s>\n",

821 
obj
, 
ˇche
, 
	`∆_ˇche_«me
(cache));

823  -
NLE_MSGTYPE_NOSUPPORT
;

824 
	}
}

826 
	$ªsync_cb
(
∆_obje˘
 *
c
, 
∆_∑r£r_∑øm
 *
p
)

828 
∆_ˇche_assoc
 *
ˇ
 = 
p
->
µ_¨g
;

830  
	`∆_ˇche_ö˛ude
(
ˇ
->
ˇ_ˇche
, 
c
, ca->
ˇ_ch™ge
, ca->
ˇ_ch™ge_d©a
);

831 
	}
}

833 
	$∆_ˇche_ªsync
(
∆_sock
 *
sk
, 
∆_ˇche
 *
ˇche
,

834 
ch™ge_func_t
 
ch™ge_cb
, *
d©a
)

836 
∆_obje˘
 *
obj
, *
√xt
;

837 
∆_af_group
 *
gΩ
;

838 
∆_ˇche_assoc
 
ˇ
 = {

839 .
ˇ_ˇche
 = 
ˇche
,

840 .
ˇ_ch™ge
 = 
ch™ge_cb
,

841 .
ˇ_ch™ge_d©a
 = 
d©a
,

843 
∆_∑r£r_∑øm
 
p
 = {

844 .
µ_cb
 = 
ªsync_cb
,

845 .
µ_¨g
 = &
ˇ
,

847 
îr
;

849 i‡(
sk
->
s_¥Ÿo
 !
ˇche
->
c_›s
->
co_¥Ÿocﬁ
)

850  -
NLE_PROTO_MISMATCH
;

852 
	`NL_DBG
(1, "Resyncög cachê%∞<%s>...\n", 
ˇche
, 
	`∆_ˇche_«me
(cache));

855 
	`∆_ˇche_m¨k_Æl
(
ˇche
);

857 
gΩ
 = 
ˇche
->
c_›s
->
co_groups
;

859 i‡(
gΩ
 && gΩ->
ag_group
 &&

860 (
ˇche
->
c_Êags
 & 
NL_CACHE_AF_ITER
))

861 
	`∆_ˇche_£t_¨g1
(
ˇche
, 
gΩ
->
ag_Ámûy
);

863 
ª°¨t
:

864 
îr
 = 
	`∆_ˇche_ªque°_fuŒ_dump
(
sk
, 
ˇche
);

865 i‡(
îr
 < 0)

866 
îrout
;

868 
îr
 = 
	`__ˇche_pickup
(
sk
, 
ˇche
, &
p
);

869 i‡(
îr
 =-
NLE_DUMP_INTR
)

870 
ª°¨t
;

871 i‡(
îr
 < 0)

872 
îrout
;

874 i‡(
gΩ
)

875 
gΩ
++;

876 } 
gΩ
 && gΩ->
ag_group
 &&

877 (
ˇche
->
c_Êags
 & 
NL_CACHE_AF_ITER
));

879 
	`∆_li°_f‹_óch_íåy_ß„
(
obj
, 
√xt
, &
ˇche
->
c_ôems
, 
˚_li°
) {

880 i‡(
	`∆_obje˘_is_m¨ked
(
obj
)) {

881 
	`∆_obje˘_gë
(
obj
);

882 
	`∆_ˇche_ªmove
(
obj
);

883 i‡(
ch™ge_cb
)

884 
	`ch™ge_cb
(
ˇche
, 
obj
, 
NL_ACT_DEL
, 
d©a
);

885 
	`∆_obje˘_put
(
obj
);

889 
	`NL_DBG
(1, "FöishedÑesyncög %∞<%s>\n", 
ˇche
, 
	`∆_ˇche_«me
(cache));

891 
îr
 = 0;

892 
îrout
:

893  
îr
;

894 
	}
}

904 
	$∆_ˇche_∑r£
(
∆_ˇche_›s
 *
›s
, 
sockaddr_∆
 *
who
,

905 
∆msghdr
 *
∆h
, 
∆_∑r£r_∑øm
 *
∑øms
)

907 
i
, 
îr
;

909 i‡(!
	`∆msg_vÆid_hdr
(
∆h
, 
›s
->
co_hdrsize
))

910  -
NLE_MSG_TOOSHORT
;

912 
i
 = 0; 
›s
->
co_msgty≥s
[i].
mt_id
 >= 0; i++) {

913 i‡(
›s
->
co_msgty≥s
[
i
].
mt_id
 =
∆h
->
∆msg_ty≥
) {

914 
îr
 = 
›s
->
	`co_msg_∑r£r
(›s, 
who
, 
∆h
, 
∑øms
);

915 i‡(
îr
 !-
NLE_OPNOTSUPP
)

916 
îrout
;

921 
îr
 = -
NLE_MSGTYPE_NOSUPPORT
;

922 
îrout
:

923  
îr
;

924 
	}
}

940 
	$∆_ˇche_∑r£_™d_add
(
∆_ˇche
 *
ˇche
, 
∆_msg
 *
msg
)

942 
∆_∑r£r_∑øm
 
p
 = {

943 .
µ_cb
 = 
pickup_cb
,

944 .
µ_¨g
 = 
ˇche
,

947  
	`∆_ˇche_∑r£
(
ˇche
->
c_›s
, 
NULL
, 
	`∆msg_hdr
(
msg
), &
p
);

948 
	}
}

960 
	$∆_ˇche_ªfûl
(
∆_sock
 *
sk
, 
∆_ˇche
 *
ˇche
)

962 
∆_af_group
 *
gΩ
;

963 
îr
;

965 i‡(
sk
->
s_¥Ÿo
 !
ˇche
->
c_›s
->
co_¥Ÿocﬁ
)

966  -
NLE_PROTO_MISMATCH
;

968 
	`∆_ˇche_˛ór
(
ˇche
);

969 
gΩ
 = 
ˇche
->
c_›s
->
co_groups
;

971 i‡(
gΩ
 && gΩ->
ag_group
 &&

972 (
ˇche
->
c_Êags
 & 
NL_CACHE_AF_ITER
))

973 
	`∆_ˇche_£t_¨g1
(
ˇche
, 
gΩ
->
ag_Ámûy
);

975 
ª°¨t
:

976 
îr
 = 
	`∆_ˇche_ªque°_fuŒ_dump
(
sk
, 
ˇche
);

977 i‡(
îr
 < 0)

978  
îr
;

980 
	`NL_DBG
(2, "Updating cache %p <%s> for family %u,Ñequest sent, waiting forÑeply\n",

981 
ˇche
, 
	`∆_ˇche_«me
(ˇche), 
gΩ
 ? gΩ->
ag_Ámûy
 : 
AF_UNSPEC
);

983 
îr
 = 
	`∆_ˇche_pickup
(
sk
, 
ˇche
);

984 i‡(
îr
 =-
NLE_DUMP_INTR
) {

985 
	`NL_DBG
(2, "Dump interrupted,Ñestarting!\n");

986 
ª°¨t
;

987 } i‡(
îr
 < 0)

990 i‡(
gΩ
)

991 
gΩ
++;

992 } 
gΩ
 && gΩ->
ag_group
 &&

993 (
ˇche
->
c_Êags
 & 
NL_CACHE_AF_ITER
));

995  
îr
;

996 
	}
}

1004 
∆_obje˘
 *
	$__ˇche_Á°_lookup
(
∆_ˇche
 *
ˇche
,

1005 
∆_obje˘
 *
√edÀ
)

1007 
∆_obje˘
 *
obj
;

1009 
obj
 = 
	`∆_hash_èbÀ_lookup
(
ˇche
->
hashèbÀ
, 
√edÀ
);

1010 i‡(
obj
) {

1011 
	`∆_obje˘_gë
(
obj
);

1012  
obj
;

1015  
NULL
;

1016 
	}
}

1033 
∆_obje˘
 *
	$∆_ˇche_£¨ch
(
∆_ˇche
 *
ˇche
,

1034 
∆_obje˘
 *
√edÀ
)

1036 
∆_obje˘
 *
obj
;

1038 i‡(
ˇche
->
hashèbÀ
)

1039  
	`__ˇche_Á°_lookup
(
ˇche
, 
√edÀ
);

1041 
	`∆_li°_f‹_óch_íåy
(
obj
, &
ˇche
->
c_ôems
, 
˚_li°
) {

1042 i‡(
	`∆_obje˘_idítiˇl
(
obj
, 
√edÀ
)) {

1043 
	`∆_obje˘_gë
(
obj
);

1044  
obj
;

1048  
NULL
;

1049 
	}
}

1068 
∆_obje˘
 *
	$∆_ˇche_föd
(
∆_ˇche
 *
ˇche
,

1069 
∆_obje˘
 *
fûãr
)

1071 
∆_obje˘
 *
obj
;

1073 i‡(
ˇche
->
c_›s
 =
NULL
)

1074 
	`BUG
();

1076 i‡((
	`∆_obje˘_gë_id_©ås
(
fûãr
Ë=fûãr->
˚_mask
)

1077 && 
ˇche
->
hashèbÀ
)

1078  
	`__ˇche_Á°_lookup
(
ˇche
, 
fûãr
);

1080 
	`∆_li°_f‹_óch_íåy
(
obj
, &
ˇche
->
c_ôems
, 
˚_li°
) {

1081 i‡(
	`∆_obje˘_m©ch_fûãr
(
obj
, 
fûãr
)) {

1082 
	`∆_obje˘_gë
(
obj
);

1083  
obj
;

1087  
NULL
;

1088 
	}
}

1097 
	$∆_ˇche_m¨k_Æl
(
∆_ˇche
 *
ˇche
)

1099 
∆_obje˘
 *
obj
;

1101 
	`NL_DBG
(2, "Markingáll objects in cache %p <%s>\n",

1102 
ˇche
, 
	`∆_ˇche_«me
(cache));

1104 
	`∆_li°_f‹_óch_íåy
(
obj
, &
ˇche
->
c_ôems
, 
˚_li°
)

1105 
	`∆_obje˘_m¨k
(
obj
);

1106 
	}
}

1122 
	$∆_ˇche_dump
(
∆_ˇche
 *
ˇche
, 
∆_dump_∑øms
 *
∑øms
)

1124 
	`∆_ˇche_dump_fûãr
(
ˇche
, 
∑øms
, 
NULL
);

1125 
	}
}

1136 
	$∆_ˇche_dump_fûãr
(
∆_ˇche
 *
ˇche
,

1137 
∆_dump_∑øms
 *
∑øms
,

1138 
∆_obje˘
 *
fûãr
)

1140 
ty≥
 = 
∑øms
 ?Ö¨ams->
dp_ty≥
 : 
NL_DUMP_DETAILS
;

1141 
∆_obje˘_›s
 *
›s
;

1142 
∆_obje˘
 *
obj
;

1144 
	`NL_DBG
(2, "Dumping cache %p <%s> with filter %p\n",

1145 
ˇche
, 
	`∆_ˇche_«me
(ˇche), 
fûãr
);

1147 i‡(
ty≥
 > 
NL_DUMP_MAX
 ||Åype < 0)

1148 
	`BUG
();

1150 i‡(
ˇche
->
c_›s
 =
NULL
)

1151 
	`BUG
();

1153 
›s
 = 
ˇche
->
c_›s
->
co_obj_›s
;

1154 i‡(!
›s
->
oo_dump
[
ty≥
])

1157 i‡(
∑øms
 &&Ö¨ams->
dp_buf
)

1158 
	`mem£t
(
∑øms
->
dp_buf
, 0,Ö¨ams->
dp_buÊí
);

1160 
	`∆_li°_f‹_óch_íåy
(
obj
, &
ˇche
->
c_ôems
, 
˚_li°
) {

1161 i‡(
fûãr
 && !
	`∆_obje˘_m©ch_fûãr
(
obj
, filter))

1164 
	`NL_DBG
(4, "Dumpög obje˘ %p...\n", 
obj
);

1165 
	`dump_‰om_›s
(
obj
, 
∑øms
);

1167 
	}
}

1185 
∆_ˇche_f‹óch
(
∆_ˇche
 *
ˇche
,

1186 (*
cb
)(
∆_obje˘
 *, *), *
¨g
)

1188 
	`∆_ˇche_f‹óch_fûãr
(
ˇche
, 
NULL
, 
cb
, 
¨g
);

1189 
	}
}

1202 
∆_ˇche_f‹óch_fûãr
(
∆_ˇche
 *
ˇche
, 
∆_obje˘
 *
fûãr
,

1203 (*
cb
)(
∆_obje˘
 *, *), *
¨g
)

1205 
∆_obje˘
 *
obj
, *
tmp
;

1207 i‡(
ˇche
->
c_›s
 =
NULL
)

1208 
	`BUG
();

1210 
	`∆_li°_f‹_óch_íåy_ß„
(
obj
, 
tmp
, &
ˇche
->
c_ôems
, 
˚_li°
) {

1211 i‡(
fûãr
) {

1212 
diff
 = 
	`∆_obje˘_m©ch_fûãr
(
obj
, 
fûãr
);

1214 
	`NL_DBG
(3, "%p<->%p object difference: %x\n",

1215 
obj
, 
fûãr
, 
diff
);

1217 i‡(!
diff
)

1222 
	`∆_obje˘_gë
(
obj
);

1224 
	`cb
(
obj
, 
¨g
);

1226 
	`∆_obje˘_put
(
obj
);

1228 
	}
}

	@mylibnl/libnl-3.2.25/lib/cache_mngr.c

35 
	~<√éök-¥iv©e/√éök.h
>

36 
	~<√éök/√éök.h
>

37 
	~<√éök/ˇche.h
>

38 
	~<√éök/utûs.h
>

41 
	#NASSOC_INIT
 16

	)

42 
	#NASSOC_EXPAND
 8

	)

45 
	$ö˛ude_cb
(
∆_obje˘
 *
obj
, 
∆_∑r£r_∑øm
 *
p
)

47 
∆_ˇche_assoc
 *
ˇ
 = 
p
->
µ_¨g
;

48 
∆_ˇche_›s
 *
›s
 = 
ˇ
->
ˇ_ˇche
->
c_›s
;

50 
	`NL_DBG
(2, "In˛udög obje˘ %∞ötÿˇchê%p\n", 
obj
, 
ˇ
->
ˇ_ˇche
);

51 #ifde‡
NL_DEBUG


52 i‡(
∆_debug
 >= 4)

53 
	`∆_obje˘_dump
(
obj
, &
∆_debug_dp
);

56 i‡(
›s
->
co_evít_fûãr
)

57 i‡(
›s
->
	`co_evít_fûãr
(
ˇ
->
ˇ_ˇche
, 
obj
Ë!
NL_OK
)

60 i‡(
›s
->
co_ö˛ude_evít
)

61  
›s
->
	`co_ö˛ude_evít
(
ˇ
->
ˇ_ˇche
, 
obj
, ca->
ˇ_ch™ge
,

62 
ˇ
->
ˇ_ch™ge_d©a
);

64  
	`∆_ˇche_ö˛ude
(
ˇ
->
ˇ_ˇche
, 
obj
, ca->
ˇ_ch™ge
, ca->
ˇ_ch™ge_d©a
);

65 
	}
}

67 
	$evít_öput
(
∆_msg
 *
msg
, *
¨g
)

69 
∆_ˇche_mngr
 *
mngr
 = 
¨g
;

70 
¥Ÿocﬁ
 = 
	`∆msg_gë_¥Ÿo
(
msg
);

71 
ty≥
 = 
	`∆msg_hdr
(
msg
)->
∆msg_ty≥
;

72 
∆_ˇche_›s
 *
›s
;

73 
i
, 
n
;

74 
∆_∑r£r_∑øm
 
p
 = {

75 .
µ_cb
 = 
ö˛ude_cb
,

78 
	`NL_DBG
(2, "Cache manager %p, handlingÇew message %pásÉvent\n",

79 
mngr
, 
msg
);

80 #ifde‡
NL_DEBUG


81 i‡(
∆_debug
 >= 4)

82 
	`∆_msg_dump
(
msg
, 
°dîr
);

85 i‡(
mngr
->
cm_¥Ÿocﬁ
 !
¥Ÿocﬁ
)

86 
	`BUG
();

88 
i
 = 0; i < 
mngr
->
cm_«ssocs
; i++) {

89 i‡(
mngr
->
cm_assocs
[
i
].
ˇ_ˇche
) {

90 
›s
 = 
mngr
->
cm_assocs
[
i
].
ˇ_ˇche
->
c_›s
;

91 
n
 = 0; 
›s
->
co_msgty≥s
[n].
mt_id
 >= 0;Ç++)

92 i‡(
›s
->
co_msgty≥s
[
n
].
mt_id
 =
ty≥
)

93 
found
;

97  
NL_SKIP
;

99 
found
:

100 
	`NL_DBG
(2, "Associated message %pÅo cache %p\n",

101 
msg
, 
mngr
->
cm_assocs
[
i
].
ˇ_ˇche
);

102 
p
.
µ_¨g
 = &
mngr
->
cm_assocs
[
i
];

104  
	`∆_ˇche_∑r£
(
›s
, 
NULL
, 
	`∆msg_hdr
(
msg
), &
p
);

105 
	}
}

135 
	$∆_ˇche_mngr_Æloc
(
∆_sock
 *
sk
, 
¥Ÿocﬁ
, 
Êags
,

136 
∆_ˇche_mngr
 **
ªsu…
)

138 
∆_ˇche_mngr
 *
mngr
;

139 
îr
 = -
NLE_NOMEM
;

142 i‡(
Êags
 & 
NL_ALLOCATED_SOCK
)

143 
	`BUG
();

145 
mngr
 = 
	`ˇŒoc
(1, (*mngr));

146 i‡(!
mngr
)

147  -
NLE_NOMEM
;

149 i‡(!
sk
) {

150 i‡(!(
sk
 = 
	`∆_sockë_Æloc
()))

151 
îrout
;

153 
Êags
 |
NL_ALLOCATED_SOCK
;

156 
mngr
->
cm_sock
 = 
sk
;

157 
mngr
->
cm_«ssocs
 = 
NASSOC_INIT
;

158 
mngr
->
cm_¥Ÿocﬁ
 = 
¥Ÿocﬁ
;

159 
mngr
->
cm_Êags
 = 
Êags
;

160 
mngr
->
cm_assocs
 = 
	`ˇŒoc
(mngr->
cm_«ssocs
,

161 (
∆_ˇche_assoc
));

162 i‡(!
mngr
->
cm_assocs
)

163 
îrout
;

166 
	`∆_sockë_dißbÀ_£q_check
(
mngr
->
cm_sock
);

168 i‡((
îr
 = 
	`∆_c⁄√˘
(
mngr
->
cm_sock
, 
¥Ÿocﬁ
)) < 0)

169 
îrout
;

171 i‡((
îr
 = 
	`∆_sockë_£t_n⁄blockög
(
mngr
->
cm_sock
)) < 0)

172 
îrout
;

175 
mngr
->
cm_sync_sock
 = 
	`∆_sockë_Æloc
();

176 i‡(!
mngr
->
cm_sync_sock
) {

177 
îr
 = -
NLE_NOMEM
;

178 
îrout
;

180 i‡((
îr
 = 
	`∆_c⁄√˘
(
mngr
->
cm_sync_sock
, 
¥Ÿocﬁ
)) < 0)

181 
îrout_‰ì_sync_sock
;

183 
	`NL_DBG
(1, "Allocated cache manager %p,Örotocol %d, %d caches\n",

184 
mngr
, 
¥Ÿocﬁ
, mngr->
cm_«ssocs
);

186 *
ªsu…
 = 
mngr
;

189 
îrout_‰ì_sync_sock
:

190 
	`∆_sockë_‰ì
(
mngr
->
cm_sync_sock
);

191 
îrout
:

192 
	`∆_ˇche_mngr_‰ì
(
mngr
);

193  
îr
;

194 
	}
}

221 
	$∆_ˇche_mngr_add_ˇche
(
∆_ˇche_mngr
 *
mngr
, 
∆_ˇche
 *
ˇche
,

222 
ch™ge_func_t
 
cb
, *
d©a
)

224 
∆_ˇche_›s
 *
›s
;

225 
∆_af_group
 *
gΩ
;

226 
îr
, 
i
;

228 
›s
 = 
ˇche
->
c_›s
;

229 i‡(!
›s
)

230  -
NLE_INVAL
;

232 i‡(
›s
->
co_¥Ÿocﬁ
 !
mngr
->
cm_¥Ÿocﬁ
)

233  -
NLE_PROTO_MISMATCH
;

235 i‡(
›s
->
co_groups
 =
NULL
)

236  -
NLE_OPNOTSUPP
;

238 
i
 = 0; i < 
mngr
->
cm_«ssocs
; i++)

239 i‡(
mngr
->
cm_assocs
[
i
].
ˇ_ˇche
 &&

240 
mngr
->
cm_assocs
[
i
].
ˇ_ˇche
->
c_›s
 =
›s
)

241  -
NLE_EXIST
;

243 
ªåy
:

244 
i
 = 0; i < 
mngr
->
cm_«ssocs
; i++)

245 i‡(!
mngr
->
cm_assocs
[
i
].
ˇ_ˇche
)

248 i‡(
i
 >
mngr
->
cm_«ssocs
) {

249 
mngr
->
cm_«ssocs
 +
NASSOC_EXPAND
;

250 
mngr
->
cm_assocs
 = 
	`ªÆloc
(mngr->cm_assocs,

251 
mngr
->
cm_«ssocs
 *

252 (
∆_ˇche_assoc
));

253 i‡(
mngr
->
cm_assocs
 =
NULL
)

254  -
NLE_NOMEM
;

256 
	`mem£t
(
mngr
->
cm_assocs
 + (mngr->
cm_«ssocs
 - 
NASSOC_EXPAND
), 0,

257 
NASSOC_EXPAND
 * (
∆_ˇche_assoc
));

259 
	`NL_DBG
(1, "Increased capacity of cache manager %p " \

260 "tÿ%d\n", 
mngr
, mngr->
cm_«ssocs
);

261 
ªåy
;

264 
gΩ
 = 
›s
->
co_groups
; gΩ->
ag_group
; grp++) {

265 
îr
 = 
	`∆_sockë_add_membîshù
(
mngr
->
cm_sock
, 
gΩ
->
ag_group
);

266 i‡(
îr
 < 0)

267  
îr
;

270 
îr
 = 
	`∆_ˇche_ªfûl
(
mngr
->
cm_sync_sock
, 
ˇche
);

271 i‡(
îr
 < 0)

272 
îrout_dr›_membîshù
;

274 
mngr
->
cm_assocs
[
i
].
ˇ_ˇche
 = 
ˇche
;

275 
mngr
->
cm_assocs
[
i
].
ˇ_ch™ge
 = 
cb
;

276 
mngr
->
cm_assocs
[
i
].
ˇ_ch™ge_d©a
 = 
d©a
;

278 i‡(
mngr
->
cm_Êags
 & 
NL_AUTO_PROVIDE
)

279 
	`∆_ˇche_mngt_¥ovide
(
ˇche
);

281 
	`NL_DBG
(1, "Added cache %p <%s>Åo cache manager %p\n",

282 
ˇche
, 
	`∆_ˇche_«me
(ˇche), 
mngr
);

286 
îrout_dr›_membîshù
:

287 
gΩ
 = 
›s
->
co_groups
; gΩ->
ag_group
; grp++)

288 
	`∆_sockë_dr›_membîshù
(
mngr
->
cm_sock
, 
gΩ
->
ag_group
);

290  
îr
;

291 
	}
}

321 
	$∆_ˇche_mngr_add
(
∆_ˇche_mngr
 *
mngr
, c⁄° *
«me
,

322 
ch™ge_func_t
 
cb
, *
d©a
, 
∆_ˇche
 **
ªsu…
)

324 
∆_ˇche_›s
 *
›s
;

325 
∆_ˇche
 *
ˇche
;

326 
îr
;

328 
›s
 = 
	`∆_ˇche_›s_lookup_ß„
(
«me
);

329 i‡(!
›s
)

330  -
NLE_NOCACHE
;

332 
ˇche
 = 
	`∆_ˇche_Æloc
(
›s
);

333 
	`∆_ˇche_›s_put
(
›s
);

334 i‡(!
ˇche
)

335  -
NLE_NOMEM
;

337 
îr
 = 
	`∆_ˇche_mngr_add_ˇche
(
mngr
, 
ˇche
, 
cb
, 
d©a
);

338 i‡(
îr
 < 0)

339 
îrout_‰ì_ˇche
;

341 *
ªsu…
 = 
ˇche
;

344 
îrout_‰ì_ˇche
:

345 
	`∆_ˇche_‰ì
(
ˇche
);

347  
îr
;

348 
	}
}

359 
	$∆_ˇche_mngr_gë_fd
(
∆_ˇche_mngr
 *
mngr
)

361  
	`∆_sockë_gë_fd
(
mngr
->
cm_sock
);

362 
	}
}

383 
	$∆_ˇche_mngr_pﬁl
(
∆_ˇche_mngr
 *
mngr
, 
timeout
)

385 
ªt
;

386 
pﬁlfd
 
fds
 = {

387 .
fd
 = 
	`∆_sockë_gë_fd
(
mngr
->
cm_sock
),

388 .
evíts
 = 
POLLIN
,

391 
	`NL_DBG
(3, "Cachêm™agî %p,Öﬁl(Ëfd %d\n", 
mngr
, 
fds
.
fd
);

392 
ªt
 = 
	`pﬁl
(&
fds
, 1, 
timeout
);

393 
	`NL_DBG
(3, "Cachêm™agî %p,Öﬁl(Ëªtu∫ed %d\n", 
mngr
, 
ªt
);

394 i‡(
ªt
 < 0)

395  -
	`∆_sy£º2∆îr
(
î∫o
);

398 i‡(
ªt
 == 0)

401  
	`∆_ˇche_mngr_d©a_ªady
(
mngr
);

402 
	}
}

419 
	$∆_ˇche_mngr_d©a_ªady
(
∆_ˇche_mngr
 *
mngr
)

421 
îr
, 
ƒód
 = 0;

422 
∆_cb
 *
cb
;

424 
	`NL_DBG
(2, "Cache manager %p,ÑeadingÇew data from fd %d\n",

425 
mngr
, 
	`∆_sockë_gë_fd
(mngr->
cm_sock
));

427 
cb
 = 
	`∆_cb_˛⁄e
(
mngr
->
cm_sock
->
s_cb
);

428 i‡(
cb
 =
NULL
)

429  -
NLE_NOMEM
;

431 
	`∆_cb_£t
(
cb
, 
NL_CB_VALID
, 
NL_CB_CUSTOM
, 
evít_öput
, 
mngr
);

433 (
îr
 = 
	`∆_ªcvmsgs_ªp‹t
(
mngr
->
cm_sock
, 
cb
)) > 0) {

434 
	`NL_DBG
(2, "Cache manager %p,ÑecvmsgsÑead %d messages\n",

435 
mngr
, 
îr
);

436 
ƒód
 +
îr
;

439 
	`∆_cb_put
(
cb
);

440 i‡(
îr
 < 0 &&Éº !-
NLE_AGAIN
)

441  
îr
;

443  
ƒód
;

444 
	}
}

455 
	$∆_ˇche_mngr_öfo
(
∆_ˇche_mngr
 *
mngr
, 
∆_dump_∑øms
 *
p
)

457 
buf
[128];

458 
i
;

460 
	`∆_dump_löe
(
p
, "ˇche-m™agî <%p>\n", 
mngr
);

461 
	`∆_dump_löe
(
p
, " .protocol = %s\n",

462 
	`∆_∆Ámûy2°r
(
mngr
->
cm_¥Ÿocﬁ
, 
buf
, (buf)));

463 
	`∆_dump_löe
(
p
, " .Êag† = %#x\n", 
mngr
->
cm_Êags
);

464 
	`∆_dump_löe
(
p
, " .«ssoc† = %u\n", 
mngr
->
cm_«ssocs
);

465 
	`∆_dump_löe
(
p
, " .sock = <%p>\n", 
mngr
->
cm_sock
);

467 
i
 = 0; i < 
mngr
->
cm_«ssocs
; i++) {

468 
∆_ˇche_assoc
 *
assoc
 = &
mngr
->
cm_assocs
[
i
];

470 i‡(
assoc
->
ˇ_ˇche
) {

471 
	`∆_dump_löe
(
p
, " .ˇche[%d] = <%p> {\n", 
i
, 
assoc
->
ˇ_ˇche
);

472 
	`∆_dump_löe
(
p
, " .«mê%s\n", 
assoc
->
ˇ_ˇche
->
c_›s
->
co_«me
);

473 
	`∆_dump_löe
(
p
, " .ch™ge_fun¯<%p>\n", 
assoc
->
ˇ_ch™ge
);

474 
	`∆_dump_löe
(
p
, " .ch™ge_d©®<%p>\n", 
assoc
->
ˇ_ch™ge_d©a
);

475 
	`∆_dump_löe
(
p
, " .nôem†%u\n", 
	`∆_ˇche_nôems
(
assoc
->
ˇ_ˇche
));

476 
	`∆_dump_löe
(
p
, " .objects = {\n");

478 
p
->
dp_¥efix
 += 6;

479 
	`∆_ˇche_dump
(
assoc
->
ˇ_ˇche
, 
p
);

480 
p
->
dp_¥efix
 -= 6;

482 
	`∆_dump_löe
(
p
, " }\n");

483 
	`∆_dump_löe
(
p
, " }\n");

486 
	}
}

494 
	$∆_ˇche_mngr_‰ì
(
∆_ˇche_mngr
 *
mngr
)

496 
i
;

498 i‡(!
mngr
)

501 i‡(
mngr
->
cm_sock
)

502 
	`∆_˛o£
(
mngr
->
cm_sock
);

504 i‡(
mngr
->
cm_sync_sock
) {

505 
	`∆_˛o£
(
mngr
->
cm_sync_sock
);

506 
	`∆_sockë_‰ì
(
mngr
->
cm_sync_sock
);

509 i‡(
mngr
->
cm_Êags
 & 
NL_ALLOCATED_SOCK
)

510 
	`∆_sockë_‰ì
(
mngr
->
cm_sock
);

512 
i
 = 0; i < 
mngr
->
cm_«ssocs
; i++) {

513 i‡(
mngr
->
cm_assocs
[
i
].
ˇ_ˇche
) {

514 
	`∆_ˇche_mngt_u≈rovide
(
mngr
->
cm_assocs
[
i
].
ˇ_ˇche
);

515 
	`∆_ˇche_‰ì
(
mngr
->
cm_assocs
[
i
].
ˇ_ˇche
);

519 
	`‰ì
(
mngr
->
cm_assocs
);

521 
	`NL_DBG
(1, "Cachêm™agî %∞‰ìd\n", 
mngr
);

523 
	`‰ì
(
mngr
);

524 
	}
}

	@mylibnl/libnl-3.2.25/lib/cache_mngt.c

28 
	~<√éök-¥iv©e/√éök.h
>

29 
	~<√éök/√éök.h
>

30 
	~<√éök/ˇche.h
>

31 
	~<√éök/utûs.h
>

33 
∆_ˇche_›s
 *
	gˇche_›s
;

34 
NL_RW_LOCK
(
ˇche_›s_lock
);

41 
∆_ˇche_›s
 *
	$__∆_ˇche_›s_lookup
(c⁄° *
«me
)

43 
∆_ˇche_›s
 *
›s
;

45 
›s
 = 
ˇche_›s
; ops; op†›s->
co_√xt
)

46 i‡(!
	`°rcmp
(
›s
->
co_«me
, 
«me
))

47  
›s
;

49  
NULL
;

50 
	}
}

56 
	$∆_ˇche_›s_gë
(
∆_ˇche_›s
 *
›s
)

58 
›s
->
co_ªf˙t
++;

59 
	}
}

65 
	$∆_ˇche_›s_put
(
∆_ˇche_›s
 *
›s
)

67 
›s
->
co_ªf˙t
--;

68 
	}
}

79 
∆_ˇche_›s
 *
	$∆_ˇche_›s_lookup
(c⁄° *
«me
)

81 
∆_ˇche_›s
 *
›s
;

83 
	`∆_ªad_lock
(&
ˇche_›s_lock
);

84 
›s
 = 
	`__∆_ˇche_›s_lookup
(
«me
);

85 
	`∆_ªad_u∆ock
(&
ˇche_›s_lock
);

87  
›s
;

88 
	}
}

99 
∆_ˇche_›s
 *
	$∆_ˇche_›s_lookup_ß„
(c⁄° *
«me
)

101 
∆_ˇche_›s
 *
›s
;

103 
	`∆_wrôe_lock
(&
ˇche_›s_lock
);

104 i‡((
›s
 = 
	`__∆_ˇche_›s_lookup
(
«me
)))

105 
	`∆_ˇche_›s_gë
(
›s
);

106 
	`∆_wrôe_u∆ock
(&
ˇche_›s_lock
);

108  
›s
;

109 
	}
}

111 
∆_ˇche_›s
 *
	$__ˇche_›s_assocüã
(
¥Ÿocﬁ
, 
msgty≥
)

113 
i
;

114 
∆_ˇche_›s
 *
›s
;

116 
›s
 = 
ˇche_›s
; ops; op†›s->
co_√xt
) {

117 i‡(
›s
->
co_¥Ÿocﬁ
 !
¥Ÿocﬁ
)

120 
i
 = 0; 
›s
->
co_msgty≥s
[i].
mt_id
 >= 0; i++)

121 i‡(
›s
->
co_msgty≥s
[
i
].
mt_id
 =
msgty≥
)

122  
›s
;

125  
NULL
;

126 
	}
}

140 
∆_ˇche_›s
 *
	$∆_ˇche_›s_assocüã
(
¥Ÿocﬁ
, 
msgty≥
)

142 
∆_ˇche_›s
 *
›s
;

144 
	`∆_ªad_lock
(&
ˇche_›s_lock
);

145 
›s
 = 
	`__ˇche_›s_assocüã
(
¥Ÿocﬁ
, 
msgty≥
);

146 
	`∆_ªad_u∆ock
(&
ˇche_›s_lock
);

148  
›s
;

149 
	}
}

164 
∆_ˇche_›s
 *
	$∆_ˇche_›s_assocüã_ß„
(
¥Ÿocﬁ
, 
msgty≥
)

166 
∆_ˇche_›s
 *
›s
;

168 
	`∆_wrôe_lock
(&
ˇche_›s_lock
);

169 i‡((
›s
 = 
	`__ˇche_›s_assocüã
(
¥Ÿocﬁ
, 
msgty≥
)))

170 
	`∆_ˇche_›s_gë
(
›s
);

171 
	`∆_wrôe_u∆ock
(&
ˇche_›s_lock
);

173  
›s
;

174 
	}
}

189 
∆_msgty≥
 *
	$∆_msgty≥_lookup
(
∆_ˇche_›s
 *
›s
, 
msgty≥
)

191 
i
;

193 
i
 = 0; 
›s
->
co_msgty≥s
[i].
mt_id
 >= 0; i++)

194 i‡(
›s
->
co_msgty≥s
[
i
].
mt_id
 =
msgty≥
)

195  &
›s
->
co_msgty≥s
[
i
];

197  
NULL
;

198 
	}
}

201 
∆_ˇche_›s
 *
	$ˇche_›s_lookup_f‹_obj
(
∆_obje˘_›s
 *
obj_›s
)

203 
∆_ˇche_›s
 *
›s
;

205 
›s
 = 
ˇche_›s
; ops; op†›s->
co_√xt
)

206 i‡(
›s
->
co_obj_›s
 =
obj_›s
)

207  
›s
;

209  
NULL
;

211 
	}
}

218 
∆_ˇche_›s_f‹óch
((*
cb
)(
∆_ˇche_›s
 *, *), *
¨g
)

220 
∆_ˇche_›s
 *
›s
;

222 
	`∆_ªad_lock
(&
ˇche_›s_lock
);

223 
›s
 = 
ˇche_›s
; ops; op†›s->
co_√xt
)

224 
	`cb
(
›s
, 
¨g
);

225 
	`∆_ªad_u∆ock
(&
ˇche_›s_lock
);

226 
	}
}

236 
	$∆_ˇche_›s_£t_Êags
(
∆_ˇche_›s
 *
›s
, 
Êags
)

238 
	`∆_wrôe_lock
(&
ˇche_›s_lock
);

239 
›s
->
co_Êags
 |
Êags
;

240 
	`∆_wrôe_u∆ock
(&
ˇche_›s_lock
);

241 
	}
}

252 
	$∆_ˇche_mngt_ªgi°î
(
∆_ˇche_›s
 *
›s
)

254 i‡(!
›s
->
co_«me
 || !›s->
co_obj_›s
)

255  -
NLE_INVAL
;

257 
	`∆_wrôe_lock
(&
ˇche_›s_lock
);

258 i‡(
	`__∆_ˇche_›s_lookup
(
›s
->
co_«me
)) {

259 
	`∆_wrôe_u∆ock
(&
ˇche_›s_lock
);

260  -
NLE_EXIST
;

263 
›s
->
co_ªf˙t
 = 0;

264 
›s
->
co_√xt
 = 
ˇche_›s
;

265 
ˇche_›s
 = 
›s
;

266 
	`∆_wrôe_u∆ock
(&
ˇche_›s_lock
);

268 
	`NL_DBG
(1, "Regi°îed cachê›î©i⁄†%s\n", 
›s
->
co_«me
);

271 
	}
}

284 
	$∆_ˇche_mngt_uƒegi°î
(
∆_ˇche_›s
 *
›s
)

286 
∆_ˇche_›s
 *
t
, **
ç
;

287 
îr
 = 0;

289 
	`∆_wrôe_lock
(&
ˇche_›s_lock
);

291 i‡(
›s
->
co_ªf˙t
 > 0) {

292 
îr
 = -
NLE_BUSY
;

293 
îrout
;

296 
ç
 = &
ˇche_›s
; (
t
=*çË!
NULL
;Å∞&t->
co_√xt
)

297 i‡(
t
 =
›s
)

300 i‡(!
t
) {

301 
îr
 = -
NLE_NOCACHE
;

302 
îrout
;

305 
	`NL_DBG
(1, "Uƒegi°îed cachê›î©i⁄†%s\n", 
›s
->
co_«me
);

307 *
ç
 = 
t
->
co_√xt
;

308 
îrout
:

309 
	`∆_wrôe_u∆ock
(&
ˇche_›s_lock
);

311  
îr
;

312 
	}
}

329 
	$∆_ˇche_mngt_¥ovide
(
∆_ˇche
 *
ˇche
)

331 
∆_ˇche_›s
 *
›s
;

333 
	`∆_wrôe_lock
(&
ˇche_›s_lock
);

335 
›s
 = 
	`ˇche_›s_lookup_f‹_obj
(
ˇche
->
c_›s
->
co_obj_›s
);

336 i‡(!
›s
)

337 
	`BUG
();

339 
	`∆_ˇche_gë
(
ˇche
);

345 i‡(!
›s
->
co_maj‹_ˇche
)

346 
	`∆_ˇche_›s_gë
(
›s
);

348 
›s
->
co_maj‹_ˇche
 = 
ˇche
;

351 
	`∆_wrôe_u∆ock
(&
ˇche_›s_lock
);

352 
	}
}

362 
	$∆_ˇche_mngt_u≈rovide
(
∆_ˇche
 *
ˇche
)

364 
∆_ˇche_›s
 *
›s
;

366 
	`∆_wrôe_lock
(&
ˇche_›s_lock
);

368 
›s
 = 
	`ˇche_›s_lookup_f‹_obj
(
ˇche
->
c_›s
->
co_obj_›s
);

369 i‡(!
›s
)

370 
	`BUG
();

371 i‡(
›s
->
co_maj‹_ˇche
 =
ˇche
) {

372 
	`∆_ˇche_‰ì
(
›s
->
co_maj‹_ˇche
);

373 
	`∆_ˇche_›s_put
(
›s
);

374 
›s
->
co_maj‹_ˇche
 = 
NULL
;

377 
	`∆_wrôe_u∆ock
(&
ˇche_›s_lock
);

378 
	}
}

380 
∆_ˇche
 *
	$__∆_ˇche_mngt_ªquúe
(c⁄° *
«me
)

382 
∆_ˇche_›s
 *
›s
;

383 
∆_ˇche
 *
ˇche
 = 
NULL
;

385 
›s
 = 
	`∆_ˇche_›s_lookup_ß„
(
«me
);

386 i‡(
›s
) {

387 
ˇche
 = 
›s
->
co_maj‹_ˇche
;

388 
	`∆_ˇche_›s_put
(
›s
);

391  
ˇche
;

392 
	}
}

405 
∆_ˇche
 *
	$∆_ˇche_mngt_ªquúe
(c⁄° *
«me
)

407 
∆_ˇche
 *
ˇche
;

409 i‡(!(
ˇche
 = 
	`__∆_ˇche_mngt_ªquúe
(
«me
)))

410 
	`NL_DBG
(1, "Application BUG: Yourápplication must "

413 " API documíèti⁄ f‹ m‹êdëaûs.\n", 
«me
);

415  
ˇche
;

416 
	}
}

427 
∆_ˇche
 *
	$∆_ˇche_mngt_ªquúe_ß„
(c⁄° *
«me
)

429 
∆_ˇche
 *
ˇche
;

431 i‡((
ˇche
 = 
	`∆_ˇche_mngt_ªquúe
(
«me
)))

432 
	`∆_ˇche_gë
(
ˇche
);

434  
ˇche
;

435 
	}
}

	@mylibnl/libnl-3.2.25/lib/cli/cls/basic.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/tc.h
>

14 
	~<√éök/˛i/˛s.h
>

15 
	~<√éök/rouã/˛s/basic.h
>

17 
	$¥öt_ußge
()

19 
	`¥ötf
(

31 
	}
}

33 
	$∑r£_¨gv
(
π∆_tc
 *
tc
, 
¨gc
, **
¨gv
)

35 
π∆_˛s
 *
˛s
 = (π∆_˛†*Ë
tc
;

36 
π∆_em©ch_åì
 *
åì
;

37 
uöt32_t
 
èrgë
;

38 
îr
;

41 
c
, 
›tidx
 = 0;

43 
ARG_TARGET
 = 257,

44 
ARG_DEFAULT
 = 258,

46 
›ti⁄
 
l⁄g_›ts
[] = {

53 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "ht:e:", 
l⁄g_›ts
, &
›tidx
);

54 i‡(
c
 == -1)

57 
c
) {

59 
	`¥öt_ußge
();

60 
	`exô
(0);

63 i‡((
îr
 = 
	`π∆_tc_°r2h™dÀ
(
›èrg
, &
èrgë
)) < 0)

64 
	`∆_˛i_Áèl
(
îr
, "UnableÅoÖarseÅarget \"%s\":",

65 
›èrg
, 
	`∆_gëîr‹
(
îr
));

67 
	`π∆_basic_£t_èrgë
(
˛s
, 
èrgë
);

71 
åì
 = 
	`∆_˛i_˛s_∑r£_em©ch
(
˛s
, 
›èrg
);

72 
	`π∆_basic_£t_em©ch
(
˛s
, 
åì
);

76 
	}
}

78 
∆_˛i_tc_moduÀ
 
	gbasic_moduÀ
 =

80 .
tm_«me
 = "basic",

81 .
	gtm_ty≥
 = 
RTNL_TC_TYPE_CLS
,

82 .
	gtm_∑r£_¨gv
 = 
∑r£_¨gv
,

85 
__öô
 
	$basic_öô
()

87 
	`∆_˛i_tc_ªgi°î
(&
basic_moduÀ
);

88 
	}
}

90 
__exô
 
	$basic_exô
()

92 
	`∆_˛i_tc_uƒegi°î
(&
basic_moduÀ
);

93 
	}
}

	@mylibnl/libnl-3.2.25/lib/cli/cls/cgroup.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/tc.h
>

14 
	~<√éök/˛i/˛s.h
>

15 
	~<√éök/rouã/˛s/cgroup.h
>

17 
	$¥öt_ußge
()

19 
	`¥ötf
(

28 
	}
}

30 
	$∑r£_¨gv
(
π∆_tc
 *
tc
, 
¨gc
, **
¨gv
)

32 
π∆_˛s
 *
˛s
 = (π∆_˛†*Ë
tc
;

33 
π∆_em©ch_åì
 *
åì
;

36 
c
, 
›tidx
 = 0;

37 
›ti⁄
 
l⁄g_›ts
[] = {

43 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "he:", 
l⁄g_›ts
, &
›tidx
);

44 i‡(
c
 == -1)

47 
c
) {

49 
	`¥öt_ußge
();

50 
	`exô
(0);

53 
åì
 = 
	`∆_˛i_˛s_∑r£_em©ch
(
˛s
, 
›èrg
);

54 
	`π∆_cgroup_£t_em©ch
(
˛s
, 
åì
);

58 
	}
}

60 
∆_˛i_tc_moduÀ
 
	gcgroup_moduÀ
 =

62 .
tm_«me
 = "cgroup",

63 .
	gtm_ty≥
 = 
RTNL_TC_TYPE_CLS
,

64 .
	gtm_∑r£_¨gv
 = 
∑r£_¨gv
,

67 
__öô
 
	$cgroup_öô
()

69 
	`∆_˛i_tc_ªgi°î
(&
cgroup_moduÀ
);

70 
	}
}

72 
__exô
 
	$cgroup_exô
()

74 
	`∆_˛i_tc_uƒegi°î
(&
cgroup_moduÀ
);

75 
	}
}

	@mylibnl/libnl-3.2.25/lib/cli/qdisc/bfifo.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/tc.h
>

14 
	~<√éök/rouã/qdisc/fifo.h
>

16 
	$¥öt_ußge
()

18 
	`¥ötf
(

28 
	}
}

30 
	$bfifo_∑r£_¨gv
(
π∆_tc
 *
tc
, 
¨gc
, **
¨gv
)

32 
π∆_qdisc
 *
qdisc
 = (π∆_qdis¯*Ë
tc
;

33 
limô
;

36 
c
, 
›tidx
 = 0;

38 
ARG_LIMIT
 = 257,

40 
›ti⁄
 
l⁄g_›ts
[] = {

42 { "limô", 1, 0, 
ARG_LIMIT
 },

46 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h", 
l⁄g_›ts
, &
›tidx
);

47 i‡(
c
 == -1)

50 
c
) {

52 
	`¥öt_ußge
();

55 
ARG_LIMIT
:

56 
limô
 = 
	`∆_size2öt
(
›èrg
);

57 i‡(
limô
 < 0) {

58 
	`∆_˛i_Áèl
(
limô
, "UnableÅoÖarse bfifoÜimit "

59 "\"%s\": InvÆid f‹m©.", 
›èrg
);

62 
	`π∆_qdisc_fifo_£t_limô
(
qdisc
, 
limô
);

66 
	}
}

68 
∆_˛i_tc_moduÀ
 
	gbfifo_moduÀ
 =

70 .
tm_«me
 = "bfifo",

71 .
	gtm_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

72 .
	gtm_∑r£_¨gv
 = 
bfifo_∑r£_¨gv
,

75 
__öô
 
	$bfifo_öô
()

77 
	`∆_˛i_tc_ªgi°î
(&
bfifo_moduÀ
);

78 
	}
}

80 
__exô
 
	$bfifo_exô
()

82 
	`∆_˛i_tc_uƒegi°î
(&
bfifo_moduÀ
);

83 
	}
}

	@mylibnl/libnl-3.2.25/lib/cli/qdisc/blackhole.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/tc.h
>

15 
	$¥öt_ußge
()

17 
	`¥ötf
(

26 
	}
}

28 
	$bœckhﬁe_∑r£_¨gv
(
π∆_tc
 *
tc
, 
¨gc
, **
¨gv
)

31 
c
, 
›tidx
 = 0;

32 
›ti⁄
 
l⁄g_›ts
[] = {

37 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h", 
l⁄g_›ts
, &
›tidx
);

38 i‡(
c
 == -1)

41 
c
) {

43 
	`¥öt_ußge
();

47 
	}
}

49 
∆_˛i_tc_moduÀ
 
	gbœckhﬁe_moduÀ
 =

51 .
tm_«me
 = "blackhole",

52 .
	gtm_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

53 .
	gtm_∑r£_¨gv
 = 
bœckhﬁe_∑r£_¨gv
,

56 
__öô
 
	$bœckhﬁe_öô
()

58 
	`∆_˛i_tc_ªgi°î
(&
bœckhﬁe_moduÀ
);

59 
	}
}

61 
__exô
 
	$bœckhﬁe_exô
()

63 
	`∆_˛i_tc_uƒegi°î
(&
bœckhﬁe_moduÀ
);

64 
	}
}

	@mylibnl/libnl-3.2.25/lib/cli/qdisc/fq_codel.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/tc.h
>

14 
	~<√éök/rouã/qdisc/fq_codñ.h
>

16 
	$¥öt_ußge
()

18 
	`¥ötf
(

32 
	}
}

34 
	$fq_codñ_∑r£_¨gv
(
π∆_tc
 *
tc
, 
¨gc
, **
¨gv
)

36 
π∆_qdisc
 *
qdisc
 = (π∆_qdis¯*Ë
tc
;

37 
limô
, 
Êows
;

38 
uöt32_t
 
qu™tum
, 
èrgë
, 
öãrvÆ
;

41 
c
, 
›tidx
 = 0;

43 
ARG_LIMIT
 = 257,

44 
ARG_QUANTUM
 = 258,

45 
ARG_FLOWS
,

46 
ARG_INTERVAL
,

47 
ARG_TARGET
,

49 
›ti⁄
 
l⁄g_›ts
[] = {

51 { "limô", 1, 0, 
ARG_LIMIT
 },

52 { "qu™tum", 1, 0, 
ARG_QUANTUM
 },

53 { "Êows", 1, 0, 
ARG_FLOWS
},

54 { "öãrvÆ", 1, 0, 
ARG_INTERVAL
},

55 { "èrgë", 1, 0, 
ARG_TARGET
},

59 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h", 
l⁄g_›ts
, &
›tidx
);

60 i‡(
c
 == -1)

63 
c
) {

65 
	`¥öt_ußge
();

68 
ARG_LIMIT
:

69 
limô
 = 
	`∆_˛i_∑r£_u32
(
›èrg
);

70 
	`π∆_qdisc_fq_codñ_£t_limô
(
qdisc
, 
limô
);

73 
ARG_QUANTUM
:

74 
qu™tum
 = 
	`∆_˛i_∑r£_u32
(
›èrg
);

75 
	`π∆_qdisc_fq_codñ_£t_qu™tum
(
qdisc
, 
qu™tum
);

78 
ARG_FLOWS
:

79 
Êows
 = 
	`∆_˛i_∑r£_u32
(
›èrg
);

80 
	`π∆_qdisc_fq_codñ_£t_Êows
(
qdisc
, 
Êows
);

83 
ARG_INTERVAL
:

84 
öãrvÆ
 = 
	`∆_˛i_∑r£_u32
(
›èrg
);

85 
	`π∆_qdisc_fq_codñ_£t_öãrvÆ
(
qdisc
, 
öãrvÆ
);

88 
ARG_TARGET
:

89 
èrgë
 = 
	`∆_˛i_∑r£_u32
(
›èrg
);

90 
	`π∆_qdisc_fq_codñ_£t_èrgë
(
qdisc
, 
èrgë
);

95 
	}
}

97 
∆_˛i_tc_moduÀ
 
	gfq_codñ_moduÀ
 =

99 .
tm_«me
 = "fq_codel",

100 .
	gtm_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

101 .
	gtm_∑r£_¨gv
 = 
fq_codñ_∑r£_¨gv
,

104 
__öô
 
	$fq_codñ_öô
()

106 
	`∆_˛i_tc_ªgi°î
(&
fq_codñ_moduÀ
);

107 
	}
}

109 
__exô
 
	$fq_codñ_exô
()

111 
	`∆_˛i_tc_uƒegi°î
(&
fq_codñ_moduÀ
);

112 
	}
}

	@mylibnl/libnl-3.2.25/lib/cli/qdisc/htb.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/tc.h
>

14 
	~<√éök/rouã/qdisc/htb.h
>

16 
	$¥öt_qdisc_ußge
()

18 
	`¥ötf
(

29 
	}
}

31 
	$htb_∑r£_qdisc_¨gv
(
π∆_tc
 *
tc
, 
¨gc
, **
¨gv
)

33 
π∆_qdisc
 *
qdisc
 = (π∆_qdis¯*Ë
tc
;

36 
c
, 
›tidx
 = 0;

38 
ARG_R2Q
 = 257,

39 
ARG_DEFAULT
 = 258,

41 
›ti⁄
 
l⁄g_›ts
[] = {

43 { "r2q", 1, 0, 
ARG_R2Q
 },

44 { "deÁu…", 1, 0, 
ARG_DEFAULT
 },

48 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hv", 
l⁄g_›ts
, &
›tidx
);

49 i‡(
c
 == -1)

52 
c
) {

54 
	`¥öt_qdisc_ußge
();

57 
ARG_R2Q
:

58 
	`π∆_htb_£t_øã2qu™tum
(
qdisc
, 
	`∆_˛i_∑r£_u32
(
›èrg
));

61 
ARG_DEFAULT
:

62 
	`π∆_htb_£t_def˛s
(
qdisc
, 
	`∆_˛i_∑r£_u32
(
›èrg
));

66 
	}
}

68 
	$¥öt_˛ass_ußge
()

70 
	`¥ötf
(

85 
	}
}

87 
	$htb_∑r£_˛ass_¨gv
(
π∆_tc
 *
tc
, 
¨gc
, **
¨gv
)

89 
π∆_˛ass
 *
˛ass
 = (π∆_˛as†*Ë
tc
;

90 
øã
;

93 
c
, 
›tidx
 = 0;

95 
ARG_RATE
 = 257,

96 
ARG_QUANTUM
 = 258,

97 
ARG_CEIL
,

98 
ARG_PRIO
,

99 
ARG_BURST
,

100 
ARG_CBURST
,

102 
›ti⁄
 
l⁄g_›ts
[] = {

104 { "øã", 1, 0, 
ARG_RATE
 },

105 { "qu™tum", 1, 0, 
ARG_QUANTUM
 },

106 { "˚û", 1, 0, 
ARG_CEIL
 },

107 { "¥io", 1, 0, 
ARG_PRIO
 },

108 { "bur°", 1, 0, 
ARG_BURST
 },

109 { "cbur°", 1, 0, 
ARG_CBURST
 },

113 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h", 
l⁄g_›ts
, &
›tidx
);

114 i‡(
c
 == -1)

117 
c
) {

119 
	`¥öt_˛ass_ußge
();

122 
ARG_RATE
:

123 
øã
 = 
	`∆_size2öt
(
›èrg
);

124 i‡(
øã
 < 0) {

125 
	`∆_˛i_Áèl
(
øã
, "UnableÅoÖarse htbÑate "

126 "\"%s\": InvÆid f‹m©.", 
›èrg
);

129 
	`π∆_htb_£t_øã
(
˛ass
, 
øã
);

132 
ARG_CEIL
:

133 
øã
 = 
	`∆_size2öt
(
›èrg
);

134 i‡(
øã
 < 0) {

135 
	`∆_˛i_Áèl
(
øã
, "UnableÅoÖarse htb ceilÑate "

136 "\"%s\": InvÆid f‹m©.", 
›èrg
);

139 
	`π∆_htb_£t_˚û
(
˛ass
, 
øã
);

142 
ARG_PRIO
:

143 
	`π∆_htb_£t_¥io
(
˛ass
, 
	`∆_˛i_∑r£_u32
(
›èrg
));

146 
ARG_QUANTUM
:

147 
øã
 = 
	`∆_size2öt
(
›èrg
);

148 i‡(
øã
 < 0) {

149 
	`∆_˛i_Áèl
(
øã
, "UnableÅoÖarse quantum "

150 "\"%s\": InvÆid f‹m©.", 
›èrg
);

153 
	`π∆_htb_£t_qu™tum
(
˛ass
, 
øã
);

156 
ARG_BURST
:

157 
øã
 = 
	`∆_size2öt
(
›èrg
);

158 i‡(
øã
 < 0) {

159 
	`∆_˛i_Áèl
(
øã
, "UnableÅoÖarse burst "

160 "\"%s\": InvÆid f‹m©.", 
›èrg
);

163 
	`π∆_htb_£t_rbuf„r
(
˛ass
, 
øã
);

166 
ARG_CBURST
:

167 
øã
 = 
	`∆_size2öt
(
›èrg
);

168 i‡(
øã
 < 0) {

169 
	`∆_˛i_Áèl
(
øã
, "UnableÅoÖarse cburst "

170 "\"%s\": InvÆid f‹m©.", 
›èrg
);

173 
	`π∆_htb_£t_cbuf„r
(
˛ass
, 
øã
);

177 
	}
}

179 
∆_˛i_tc_moduÀ
 
	ghtb_qdisc_moduÀ
 =

181 .
tm_«me
 = "htb",

182 .
	gtm_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

183 .
	gtm_∑r£_¨gv
 = 
htb_∑r£_qdisc_¨gv
,

186 
∆_˛i_tc_moduÀ
 
	ghtb_˛ass_moduÀ
 =

188 .
tm_«me
 = "htb",

189 .
	gtm_ty≥
 = 
RTNL_TC_TYPE_CLASS
,

190 .
	gtm_∑r£_¨gv
 = 
htb_∑r£_˛ass_¨gv
,

193 
__öô
 
	$htb_öô
()

195 
	`∆_˛i_tc_ªgi°î
(&
htb_qdisc_moduÀ
);

196 
	`∆_˛i_tc_ªgi°î
(&
htb_˛ass_moduÀ
);

197 
	}
}

199 
__exô
 
	$htb_exô
()

201 
	`∆_˛i_tc_uƒegi°î
(&
htb_˛ass_moduÀ
);

202 
	`∆_˛i_tc_uƒegi°î
(&
htb_qdisc_moduÀ
);

203 
	}
}

	@mylibnl/libnl-3.2.25/lib/cli/qdisc/ingress.c

13 
	~<√éök/˛i/utûs.h
>

14 
	~<√éök/˛i/tc.h
>

16 
	$¥öt_ußge
()

18 
	`¥ötf
(

27 
	}
}

29 
	$ögªss_∑r£_¨gv
(
π∆_tc
 *
tc
, 
¨gc
, **
¨gv
)

32 
c
, 
›tidx
 = 0;

33 
›ti⁄
 
l⁄g_›ts
[] = {

38 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h", 
l⁄g_›ts
, &
›tidx
);

39 i‡(
c
 == -1)

42 
c
) {

44 
	`¥öt_ußge
();

48 
	}
}

50 
∆_˛i_tc_moduÀ
 
	gögªss_moduÀ
 =

52 .
tm_«me
 = "ingress",

53 .
	gtm_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

54 .
	gtm_∑r£_¨gv
 = 
ögªss_∑r£_¨gv
,

57 
__öô
 
	$ögªss_öô
()

59 
	`∆_˛i_tc_ªgi°î
(&
ögªss_moduÀ
);

60 
	}
}

62 
__exô
 
	$ögªss_exô
()

64 
	`∆_˛i_tc_uƒegi°î
(&
ögªss_moduÀ
);

65 
	}
}

	@mylibnl/libnl-3.2.25/lib/cli/qdisc/pfifo.c

13 
	~<√éök/˛i/utûs.h
>

14 
	~<√éök/˛i/tc.h
>

15 
	~<√éök/rouã/qdisc/fifo.h
>

17 
	$¥öt_ußge
()

19 
	`¥ötf
(

29 
	}
}

31 
	$pfifo_∑r£_¨gv
(
π∆_tc
 *
tc
, 
¨gc
, **
¨gv
)

33 
π∆_qdisc
 *
qdisc
 = (π∆_qdis¯*Ë
tc
;

36 
c
, 
›tidx
 = 0;

38 
ARG_LIMIT
 = 257,

40 
›ti⁄
 
l⁄g_›ts
[] = {

42 { "limô", 1, 0, 
ARG_LIMIT
 },

46 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h", 
l⁄g_›ts
, &
›tidx
);

47 i‡(
c
 == -1)

50 
c
) {

52 
	`¥öt_ußge
();

55 
ARG_LIMIT
:

56 
	`π∆_qdisc_fifo_£t_limô
(
qdisc
, 
	`∆_˛i_∑r£_u32
(
›èrg
));

60 
	}
}

62 
∆_˛i_tc_moduÀ
 
	gpfifo_moduÀ
 =

64 .
tm_«me
 = "pfifo",

65 .
	gtm_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

66 .
	gtm_∑r£_¨gv
 = 
pfifo_∑r£_¨gv
,

69 
__öô
 
	$pfifo_öô
()

71 
	`∆_˛i_tc_ªgi°î
(&
pfifo_moduÀ
);

72 
	}
}

74 
__exô
 
	$pfifo_exô
()

76 
	`∆_˛i_tc_uƒegi°î
(&
pfifo_moduÀ
);

77 
	}
}

	@mylibnl/libnl-3.2.25/lib/cli/qdisc/plug.c

13 
	~<√éök/˛i/utûs.h
>

14 
	~<√éök/˛i/tc.h
>

15 
	~<√éök/rouã/qdisc/∂ug.h
>

17 
	$¥öt_ußge
()

19 
	`¥ötf
(

47 
	}
}

49 
	$∂ug_∑r£_¨gv
(
π∆_tc
 *
tc
, 
¨gc
, **
¨gv
)

51 
π∆_qdisc
 *
qdisc
 = (π∆_qdis¯*Ë
tc
;

54 
c
, 
›tidx
 = 0;

56 
ARG_LIMIT
 = 257,

57 
ARG_BUFFER
 = 258,

58 
ARG_RELEASE_ONE
 = 259,

59 
ARG_RELEASE_INDEFINITE
 = 260,

61 
›ti⁄
 
l⁄g_›ts
[] = {

63 { "limô", 1, 0, 
ARG_LIMIT
 },

64 { "buf„r", 0, 0, 
ARG_BUFFER
 },

65 { "ªÀa£-⁄e", 0, 0, 
ARG_RELEASE_ONE
 },

66 { "ªÀa£-ödeföôe", 0, 0, 
ARG_RELEASE_INDEFINITE
 },

70 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h", 
l⁄g_›ts
, &
›tidx
);

71 i‡(
c
 == -1)

74 
c
) {

76 
	`¥öt_ußge
();

79 
ARG_LIMIT
:

80 
	`π∆_qdisc_∂ug_£t_limô
(
qdisc
, 
	`∆_˛i_∑r£_u32
(
›èrg
));

83 
ARG_BUFFER
:

84 
	`π∆_qdisc_∂ug_buf„r
(
qdisc
);

87 
ARG_RELEASE_ONE
:

88 
	`π∆_qdisc_∂ug_ªÀa£_⁄e
(
qdisc
);

91 
ARG_RELEASE_INDEFINITE
:

92 
	`π∆_qdisc_∂ug_ªÀa£_ödeföôe
(
qdisc
);

96 
	}
}

98 
∆_˛i_tc_moduÀ
 
	g∂ug_moduÀ
 =

100 .
tm_«me
 = "plug",

101 .
	gtm_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

102 .
	gtm_∑r£_¨gv
 = 
∂ug_∑r£_¨gv
,

105 
__öô
 
	$∂ug_öô
()

107 
	`∆_˛i_tc_ªgi°î
(&
∂ug_moduÀ
);

108 
	}
}

110 
__exô
 
	$∂ug_exô
()

112 
	`∆_˛i_tc_uƒegi°î
(&
∂ug_moduÀ
);

113 
	}
}

	@mylibnl/libnl-3.2.25/lib/data.c

30 
	~<√éök-¥iv©e/√éök.h
>

31 
	~<√éök/√éök.h
>

32 
	~<√éök/utûs.h
>

33 
	~<löux/sockë.h
>

50 
∆_d©a
 *
	$∆_d©a_Æloc
(*
buf
, 
size_t
 
size
)

52 
∆_d©a
 *
d©a
;

54 
d©a
 = 
	`ˇŒoc
(1, (*data));

55 i‡(!
d©a
)

56 
îrout
;

58 
d©a
->
d_d©a
 = 
	`ˇŒoc
(1, 
size
);

59 i‡(!
d©a
->
d_d©a
) {

60 
	`‰ì
(
d©a
);

61 
îrout
;

64 
d©a
->
d_size
 = 
size
;

66 i‡(
buf
)

67 
	`mem˝y
(
d©a
->
d_d©a
, 
buf
, 
size
);

69  
d©a
;

70 
îrout
:

71  
NULL
;

72 
	}
}

84 
∆_d©a
 *
	$∆_d©a_Æloc_©å
(
∆©å
 *
∆a
)

86  
	`∆_d©a_Æloc
(
	`∆a_d©a
(
∆a
), 
	`∆a_Àn
(nla));

87 
	}
}

95 
∆_d©a
 *
	$∆_d©a_˛⁄e
(
∆_d©a
 *
§c
)

97  
	`∆_d©a_Æloc
(
§c
->
d_d©a
, src->
d_size
);

98 
	}
}

111 
	$∆_d©a_≠≥nd
(
∆_d©a
 *
d©a
, *
buf
, 
size_t
 
size
)

113 i‡(
size
 > 0) {

114 
d©a
->
d_d©a
 = 
	`ªÆloc
(d©a->d_d©a, d©a->
d_size
 + 
size
);

115 i‡(!
d©a
->
d_d©a
)

116  -
NLE_NOMEM
;

118 i‡(
buf
)

119 
	`mem˝y
(
d©a
->
d_d©a
 + d©a->
d_size
, 
buf
, 
size
);

121 
	`mem£t
(
d©a
->
d_d©a
 + d©a->
d_size
, 0, 
size
);

123 
d©a
->
d_size
 +
size
;

127 
	}
}

133 
	$∆_d©a_‰ì
(
∆_d©a
 *
d©a
)

135 i‡(
d©a
)

136 
	`‰ì
(
d©a
->
d_d©a
);

138 
	`‰ì
(
d©a
);

139 
	}
}

153 *
	$∆_d©a_gë
(
∆_d©a
 *
d©a
)

155  
d©a
->
d_size
 > 0 ? d©a->
d_d©a
 : 
NULL
;

156 
	}
}

163 
size_t
 
	$∆_d©a_gë_size
(
∆_d©a
 *
d©a
)

165  
d©a
->
d_size
;

166 
	}
}

183 
	$∆_d©a_cmp
(
∆_d©a
 *
a
, ∆_d©®*
b
)

185 *
a_
 = 
	`∆_d©a_gë
(
a
);

186 *
b_
 = 
	`∆_d©a_gë
(
b
);

188 i‡(
a_
 && 
b_
)

189  
	`memcmp
(
a_
, 
b_
, 
	`∆_d©a_gë_size
(
a
));

192 
	}
}

	@mylibnl/libnl-3.2.25/lib/defs.h

8 
	#HAVE_DLFCN_H
 1

	)

11 
	#HAVE_INTTYPES_H
 1

	)

14 
	#HAVE_LIBM
 1

	)

17 
	#HAVE_LIBPTHREAD
 1

	)

20 
	#HAVE_MEMORY_H
 1

	)

23 
	#HAVE_STDINT_H
 1

	)

26 
	#HAVE_STDLIB_H
 1

	)

29 
	#HAVE_STRINGS_H
 1

	)

32 
	#HAVE_STRING_H
 1

	)

35 
	#HAVE_SYS_STAT_H
 1

	)

38 
	#HAVE_SYS_TYPES_H
 1

	)

41 
	#HAVE_UNISTD_H
 1

	)

45 
	#LT_OBJDIR
 ".libs/"

	)

48 
	#NL_DEBUG
 1

	)

54 
	#PACKAGE
 "lib∆"

	)

57 
	#PACKAGE_BUGREPORT
 ""

	)

60 
	#PACKAGE_NAME
 "lib∆"

	)

63 
	#PACKAGE_STRING
 "lib∆ 3.2.25"

	)

66 
	#PACKAGE_TARNAME
 "lib∆"

	)

69 
	#PACKAGE_URL
 "hâp://www.ö‰adód.‹g/~tgr/lib∆/"

	)

72 
	#PACKAGE_VERSION
 "3.2.25"

	)

75 
	#STDC_HEADERS
 1

	)

78 
	#VERSION
 "3.2.25"

	)

85 #i‚de‡
__˝lu•lus


	@mylibnl/libnl-3.2.25/lib/error.c

12 
	~<√éök-¥iv©e/√éök.h
>

13 
	~<√éök/√éök.h
>

15 c⁄° *
	gîrmsg
[
NLE_MAX
+1] = {

16 [
NLE_SUCCESS
] = "Success",

17 [
NLE_FAILURE
] = "Unspecific failure",

18 [
NLE_INTR
] = "Interrupted system call",

19 [
NLE_BAD_SOCK
] = "Bad socket",

20 [
NLE_AGAIN
] = "Tryágain",

21 [
NLE_NOMEM
] = "Out of memory",

22 [
NLE_EXIST
] = "ObjectÉxists",

23 [
NLE_INVAL
] = "Invalid input data orÖarameter",

24 [
NLE_RANGE
] = "Input data out ofÑange",

25 [
NLE_MSGSIZE
] = "Message sizeÇot sufficient",

26 [
NLE_OPNOTSUPP
] = "OperationÇot supported",

27 [
NLE_AF_NOSUPPORT
] = "Address familyÇot supported",

28 [
NLE_OBJ_NOTFOUND
] = "ObjectÇot found",

29 [
NLE_NOATTR
] = "AttributeÇotávailable",

30 [
NLE_MISSING_ATTR
] = "Missingáttribute",

31 [
NLE_AF_MISMATCH
] = "Address family mismatch",

32 [
NLE_SEQ_MISMATCH
] = "Message sequenceÇumber mismatch",

33 [
NLE_MSG_OVERFLOW
] = "KernelÑeported message overflow",

34 [
NLE_MSG_TRUNC
] = "KernelÑeportedÅruncated message",

35 [
NLE_NOADDR
] = "Invalidáddress for specifiedáddress family",

36 [
NLE_SRCRT_NOSUPPORT
] = "Source basedÑoutingÇot supported",

37 [
NLE_MSG_TOOSHORT
] = "Netlink message isÅoo short",

38 [
NLE_MSGTYPE_NOSUPPORT
] = "Netlink messageÅype isÇot supported",

39 [
NLE_OBJ_MISMATCH
] = "ObjectÅype doesÇot match cache",

40 [
NLE_NOCACHE
] = "Unknown or invalid cacheÅype",

41 [
NLE_BUSY
] = "Object busy",

42 [
NLE_PROTO_MISMATCH
] = "Protocol mismatch",

43 [
NLE_NOACCESS
] = "No Access",

44 [
NLE_PERM
] = "OperationÇotÖermitted",

45 [
NLE_PKTLOC_FILE
] = "UnableÅo openÖacketÜocation file",

46 [
NLE_PARSE_ERR
] = "UnableÅoÖarse object",

47 [
NLE_NODEV
] = "No such device",

48 [
NLE_IMMUTABLE
] = "Immutableáttribute",

49 [
NLE_DUMP_INTR
] = "Dump inconsistency detected, interrupted",

56 c⁄° *
	$∆_gëîr‹
(
îr‹
)

58 
îr‹
 = 
	`abs
(error);

60 i‡(
îr‹
 > 
NLE_MAX
)

61 
îr‹
 = 
NLE_FAILURE
;

63  
îrmsg
[
îr‹
];

64 
	}
}

76 
	$∆_≥º‹
(
îr‹
, c⁄° *
s
)

78 i‡(
s
 && *s)

79 
	`Ârötf
(
°dîr
, "%s: %s\n", 
s
, 
	`∆_gëîr‹
(
îr‹
));

81 
	`Ârötf
(
°dîr
, "%s\n", 
	`∆_gëîr‹
(
îr‹
));

82 
	}
}

84 
	$∆_sy£º2∆îr
(
îr‹
)

86 
îr‹
 = 
	`abs
(error);

88 
îr‹
) {

89 
EBADF
:  
NLE_BAD_SOCK
;

90 
EADDRINUSE
:  
NLE_EXIST
;

91 
EEXIST
:  
NLE_EXIST
;

92 
EADDRNOTAVAIL
:  
NLE_NOADDR
;

93 
ESRCH
:

94 
ENOENT
:  
NLE_OBJ_NOTFOUND
;

95 
EINTR
:  
NLE_INTR
;

96 
EAGAIN
:  
NLE_AGAIN
;

97 
ENOTSOCK
:  
NLE_BAD_SOCK
;

98 
ENOPROTOOPT
:  
NLE_INVAL
;

99 
EFAULT
:  
NLE_INVAL
;

100 
EACCES
:  
NLE_NOACCESS
;

101 
EINVAL
:  
NLE_INVAL
;

102 
ENOBUFS
:  
NLE_NOMEM
;

103 
ENOMEM
:  
NLE_NOMEM
;

104 
EAFNOSUPPORT
:  
NLE_AF_NOSUPPORT
;

105 
EPROTONOSUPPORT
:  
NLE_PROTO_MISMATCH
;

106 
EOPNOTSUPP
:  
NLE_OPNOTSUPP
;

107 
EPERM
:  
NLE_PERM
;

108 
EBUSY
:  
NLE_BUSY
;

109 
ERANGE
:  
NLE_RANGE
;

110 
ENODEV
:  
NLE_NODEV
;

111 :  
NLE_FAILURE
;

113 
	}
}

	@mylibnl/libnl-3.2.25/lib/fib_lookup/lookup.c

19 
	~<√éök-¥iv©e/√éök.h
>

20 
	~<√éök/√éök.h
>

21 
	~<√éök/©å.h
>

22 
	~<√éök/utûs.h
>

23 
	~<√éök/obje˘.h
>

24 
	~<√éök/rouã/π∆.h
>

25 
	~<√éök/rouã/rouã.h
>

26 
	~<√éök/fib_lookup/ªque°.h
>

27 
	~<√éök/fib_lookup/lookup.h
>

30 
∆_ˇche_›s
 
	gfib_lookup_›s
;

31 
∆_obje˘_›s
 
	gªsu…_obj_›s
;

34 
	sfib_ªsu…_∆
 {

35 
uöt32_t
 
	mÊ_addr
;

36 
uöt32_t
 
	mÊ_fwm¨k
;

37 
	mÊ_tos
;

38 
	mÊ_sc›e
;

39 
	mtb_id_ö
;

41 
	mtb_id
;

42 
	m¥efixÀn
;

43 
	mnh_£l
;

44 
	mty≥
;

45 
	msc›e
;

46 
	mîr
;

50 
	$ªsu…_‰ì_d©a
(
∆_obje˘
 *
obj
)

52 
Ê∆_ªsu…
 *
ªs
 = 
	`∆_obje˘_¥iv
(
obj
);

54 i‡(
ªs
 &&Ñes->
‰_ªq
)

55 
	`∆_obje˘_put
(
	`OBJ_CAST
(
ªs
->
‰_ªq
));

56 
	}
}

58 
	$ªsu…_˛⁄e
(
∆_obje˘
 *
_d°
, ∆_obje˘ *
_§c
)

60 
Ê∆_ªsu…
 *
d°
 = 
	`∆_obje˘_¥iv
(
_d°
);

61 
Ê∆_ªsu…
 *
§c
 = 
	`∆_obje˘_¥iv
(
_§c
);

63 i‡(
§c
->
‰_ªq
)

64 i‡(!(
d°
->
‰_ªq
 = (
Ê∆_ªque°
 *)

65 
	`∆_obje˘_˛⁄e
(
	`OBJ_CAST
(
§c
->
‰_ªq
))))

66  -
NLE_NOMEM
;

69 
	}
}

71 
	$ªsu…_msg_∑r£r
(
∆_ˇche_›s
 *
›s
, 
sockaddr_∆
 *
who
,

72 
∆msghdr
 *
n
, 
∆_∑r£r_∑øm
 *
µ
)

74 
Ê∆_ªsu…
 *
ªs
;

75 
fib_ªsu…_∆
 *
‰
;

76 
∆_addr
 *
addr
;

77 
îr
 = -
NLE_INVAL
;

79 
ªs
 = 
	`Ê∆_ªsu…_Æloc
();

80 i‡(!
ªs
)

81 
îrout
;

83 
ªs
->
˚_msgty≥
 = 
n
->
∆msg_ty≥
;

85 
ªs
->
‰_ªq
 = 
	`Ê∆_ªque°_Æloc
();

86 i‡(!
ªs
->
‰_ªq
)

87 
îrout
;

89 
‰
 = 
	`∆msg_d©a
(
n
);

90 
addr
 = 
	`∆_addr_buûd
(
AF_INET
, &
‰
->
Ê_addr
, 4);

91 i‡(!
addr
)

92 
îrout
;

93 
îr
 = 
	`Ê∆_ªque°_£t_addr
(
ªs
->
‰_ªq
, 
addr
);

94 
	`∆_addr_put
(
addr
);

95 i‡(
îr
 < 0)

96 
îrout
;

98 
	`Ê∆_ªque°_£t_fwm¨k
(
ªs
->
‰_ªq
, 
‰
->
Ê_fwm¨k
);

99 
	`Ê∆_ªque°_£t_tos
(
ªs
->
‰_ªq
, 
‰
->
Ê_tos
);

100 
	`Ê∆_ªque°_£t_sc›e
(
ªs
->
‰_ªq
, 
‰
->
Ê_sc›e
);

101 
	`Ê∆_ªque°_£t_èbÀ
(
ªs
->
‰_ªq
, 
‰
->
tb_id_ö
);

103 
ªs
->
‰_èbÀ_id
 = 
‰
->
tb_id
;

104 
ªs
->
‰_¥efixÀn
 = 
‰
->
¥efixÀn
;

105 
ªs
->
‰_nh_£l
 = 
‰
->
nh_£l
;

106 
ªs
->
‰_ty≥
 = 
‰
->
ty≥
;

107 
ªs
->
‰_sc›e
 = 
‰
->
sc›e
;

108 
ªs
->
‰_îr‹
 = 
‰
->
îr
;

110 
îr
 = 
µ
->
	`µ_cb
((
∆_obje˘
 *Ë
ªs
,Öp);

111 i‡(
îr
 < 0)

112 
îrout
;

117 
îr
 = 
NL_STOP
;

119 
îrout
:

120 
	`Ê∆_ªsu…_put
(
ªs
);

121  
îr
;

122 
	}
}

124 
	$ªsu…_dump_löe
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
p
)

126 
Ê∆_ªsu…
 *
ªs
 = (Ê∆_ªsu… *Ë
obj
;

127 
buf
[256];

129 
	`∆_dump_löe
(
p
, "table %sÖrefixlen %uÇext-hop-selector %u\n",

130 
	`π∆_rouã_èbÀ2°r
(
ªs
->
‰_èbÀ_id
, 
buf
, (buf)),

131 
ªs
->
‰_¥efixÀn
,Ñes->
‰_nh_£l
);

132 
	`∆_dump_löe
(
p
, "type %s ",

133 
	`∆_π¡y≥2°r
(
ªs
->
‰_ty≥
, 
buf
, (buf)));

134 
	`∆_dump
(
p
, "scope %sÉrror %s (%d)\n",

135 
	`π∆_sc›e2°r
(
ªs
->
‰_sc›e
, 
buf
, (buf)),

136 
	`°ªº‹_r
(-
ªs
->
‰_îr‹
, 
buf
, (buf)),Ñes->fr_error);

137 
	}
}

139 
	$ªsu…_dump_dëaûs
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
p
)

141 
	`ªsu…_dump_löe
(
obj
, 
p
);

142 
	}
}

144 
	$ªsu…_com∑ª
(
∆_obje˘
 *
_a
, ∆_obje˘ *
_b
,

145 
uöt32_t
 
©ås
, 
Êags
)

148 
	}
}

155 
Ê∆_ªsu…
 *
	$Ê∆_ªsu…_Æloc
()

157  (
Ê∆_ªsu…
 *Ë
	`∆_obje˘_Æloc
(&
ªsu…_obj_›s
);

158 
	}
}

160 
	$Ê∆_ªsu…_put
(
Ê∆_ªsu…
 *
ªs
)

162 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
ªs
);

163 
	}
}

180 
∆_ˇche
 *
	$Ê∆_ªsu…_Æloc_ˇche
()

182  
	`∆_ˇche_Æloc
(&
fib_lookup_›s
);

183 
	}
}

208 
	$Ê∆_lookup_buûd_ªque°
(
Ê∆_ªque°
 *
ªq
, 
Êags
,

209 
∆_msg
 **
ªsu…
)

211 
∆_msg
 *
msg
;

212 
∆_addr
 *
addr
;

213 
uöt64_t
 
fwm¨k
;

214 
tos
, 
sc›e
, 
èbÀ
;

215 
fib_ªsu…_∆
 
‰
 = {0};

217 
fwm¨k
 = 
	`Ê∆_ªque°_gë_fwm¨k
(
ªq
);

218 
tos
 = 
	`Ê∆_ªque°_gë_tos
(
ªq
);

219 
sc›e
 = 
	`Ê∆_ªque°_gë_sc›e
(
ªq
);

220 
èbÀ
 = 
	`Ê∆_ªque°_gë_èbÀ
(
ªq
);

222 
‰
.
Ê_fwm¨k
 = 
fwm¨k
 !
UINT_LEAST64_MAX
 ? fwmark : 0;

223 
‰
.
Ê_tos
 = 
tos
 >= 0 ?Åos : 0;

224 
‰
.
Ê_sc›e
 = 
sc›e
 >0 ? sc›ê: 
RT_SCOPE_UNIVERSE
;

225 
‰
.
tb_id_ö
 = 
èbÀ
 >0 ?ÅabÀ : 
RT_TABLE_UNSPEC
;

227 
addr
 = 
	`Ê∆_ªque°_gë_addr
(
ªq
);

228 i‡(!
addr
)

229  -
NLE_MISSING_ATTR
;

231 
‰
.
Ê_addr
 = *(
uöt32_t
 *Ë
	`∆_addr_gë_bö¨y_addr
(
addr
);

233 
msg
 = 
	`∆msg_Æloc_sim∂e
(0, 
Êags
);

234 i‡(!
msg
)

235  -
NLE_NOMEM
;

237 i‡(
	`∆msg_≠≥nd
(
msg
, &
‰
, (‰), 
NLMSG_ALIGNTO
) < 0)

238 
îrout
;

240 *
ªsu…
 = 
msg
;

243 
îrout
:

244 
	`∆msg_‰ì
(
msg
);

245  -
NLE_MSGSIZE
;

246 
	}
}

259 
	$Ê∆_lookup
(
∆_sock
 *
sk
, 
Ê∆_ªque°
 *
ªq
,

260 
∆_ˇche
 *
ˇche
)

262 
∆_msg
 *
msg
;

263 
îr
;

265 i‡((
îr
 = 
	`Ê∆_lookup_buûd_ªque°
(
ªq
, 0, &
msg
)) < 0)

266  
îr
;

268 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sk
, 
msg
);

269 
	`∆msg_‰ì
(
msg
);

270 i‡(
îr
 < 0)

271  
îr
;

273  
	`∆_ˇche_pickup
(
sk
, 
ˇche
);

274 
	}
}

283 
	$Ê∆_ªsu…_gë_èbÀ_id
(
Ê∆_ªsu…
 *
ªs
)

285  
ªs
->
‰_èbÀ_id
;

286 
	}
}

288 
	$Ê∆_ªsu…_gë_¥efixÀn
(
Ê∆_ªsu…
 *
ªs
)

290  
ªs
->
‰_¥efixÀn
;

291 
	}
}

293 
	$Ê∆_ªsu…_gë_√xth›_£l
(
Ê∆_ªsu…
 *
ªs
)

295  
ªs
->
‰_nh_£l
;

296 
	}
}

298 
	$Ê∆_ªsu…_gë_ty≥
(
Ê∆_ªsu…
 *
ªs
)

300  
ªs
->
‰_ty≥
;

301 
	}
}

303 
	$Ê∆_ªsu…_gë_sc›e
(
Ê∆_ªsu…
 *
ªs
)

305  
ªs
->
‰_sc›e
;

306 
	}
}

308 
	$Ê∆_ªsu…_gë_îr‹
(
Ê∆_ªsu…
 *
ªs
)

310  
ªs
->
‰_îr‹
;

311 
	}
}

315 
∆_obje˘_›s
 
	gªsu…_obj_›s
 = {

316 .
oo_«me
 = "fib_lookup/result",

317 .
	goo_size
 = (
Ê∆_ªsu…
),

318 .
	goo_‰ì_d©a
 = 
ªsu…_‰ì_d©a
,

319 .
	goo_˛⁄e
 = 
ªsu…_˛⁄e
,

320 .
	goo_dump
 = {

321 [
NL_DUMP_LINE
] = 
ªsu…_dump_löe
,

322 [
NL_DUMP_DETAILS
] = 
ªsu…_dump_dëaûs
,

324 .
	goo_com∑ª
 = 
ªsu…_com∑ª
,

327 
∆_ˇche_›s
 
	gfib_lookup_›s
 = {

328 .
co_«me
 = "fib_lookup/fib_lookup",

329 .
	gco_hdrsize
 = (
fib_ªsu…_∆
),

330 .
	gco_msgty≥s
 = {

331 { 0, 
NL_ACT_UNSPEC
, "any" },

332 
END_OF_MSGTYPES_LIST
,

334 .
	gco_¥Ÿocﬁ
 = 
NETLINK_FIB_LOOKUP
,

335 .
	gco_msg_∑r£r
 = 
ªsu…_msg_∑r£r
,

336 .
	gco_obj_›s
 = &
ªsu…_obj_›s
,

339 
__öô
 
	$fib_lookup_öô
()

341 
	`∆_ˇche_mngt_ªgi°î
(&
fib_lookup_›s
);

342 
	}
}

344 
__exô
 
	$fib_lookup_exô
()

346 
	`∆_ˇche_mngt_uƒegi°î
(&
fib_lookup_›s
);

347 
	}
}

	@mylibnl/libnl-3.2.25/lib/fib_lookup/request.c

19 
	~<√éök-¥iv©e/√éök.h
>

20 
	~<√éök/√éök.h
>

21 
	~<√éök/©å.h
>

22 
	~<√éök/utûs.h
>

23 
	~<√éök/obje˘.h
>

24 
	~<√éök/fib_lookup/ªque°.h
>

26 
∆_obje˘_›s
 
	gªque°_obj_›s
;

29 
	#REQUEST_ATTR_ADDR
 0x01

	)

30 
	#REQUEST_ATTR_FWMARK
 0x02

	)

31 
	#REQUEST_ATTR_TOS
 0x04

	)

32 
	#REQUEST_ATTR_SCOPE
 0x08

	)

33 
	#REQUEST_ATTR_TABLE
 0x10

	)

36 
	$ªque°_‰ì_d©a
(
∆_obje˘
 *
obj
)

38 
Ê∆_ªque°
 *
ªq
 = 
	`REQUEST_CAST
(
obj
);

40 i‡(
ªq
)

41 
	`∆_addr_put
(
ªq
->
Ã_addr
);

42 
	}
}

44 
	$ªque°_˛⁄e
(
∆_obje˘
 *
_d°
, ∆_obje˘ *
_§c
)

46 
Ê∆_ªque°
 *
d°
 = 
	`∆_obje˘_¥iv
(
_d°
);

47 
Ê∆_ªque°
 *
§c
 = 
	`∆_obje˘_¥iv
(
_§c
);

49 i‡(
§c
->
Ã_addr
)

50 i‡(!(
d°
->
Ã_addr
 = 
	`∆_addr_˛⁄e
(
§c
->lr_addr)))

51  -
NLE_NOMEM
;

54 
	}
}

56 
	$ªque°_com∑ª
(
∆_obje˘
 *
_a
, ∆_obje˘ *
_b
,

57 
uöt32_t
 
©ås
, 
Êags
)

59 
Ê∆_ªque°
 *
a
 = (Ê∆_ªque° *Ë
_a
;

60 
Ê∆_ªque°
 *
b
 = (Ê∆_ªque° *Ë
_b
;

61 
diff
 = 0;

63 
	#REQ_DIFF
(
ATTR
, 
EXPR
Ë
	`ATTR_DIFF
(
©ås
, 
REQUEST_ATTR_
##ATTR, 
a
, 
b
, EXPR)

	)

65 
diff
 |
	`REQ_DIFF
(
FWMARK
, 
a
->
Ã_fwm¨k
 !
b
->lr_fwmark);

66 
diff
 |
	`REQ_DIFF
(
TOS
, 
a
->
Ã_tos
 !
b
->lr_tos);

67 
diff
 |
	`REQ_DIFF
(
SCOPE
, 
a
->
Ã_sc›e
 !
b
->lr_scope);

68 
diff
 |
	`REQ_DIFF
(
TABLE
, 
a
->
Ã_èbÀ
 !
b
->lr_table);

69 
diff
 |
	`REQ_DIFF
(
ADDR
, 
	`∆_addr_cmp
(
a
->
Ã_addr
, 
b
->lr_addr));

71 #unde‡
REQ_DIFF


73  
diff
;

74 
	}
}

82 
Ê∆_ªque°
 *
	$Ê∆_ªque°_Æloc
()

84  
	`REQUEST_CAST
(
	`∆_obje˘_Æloc
(&
ªque°_obj_›s
));

85 
	}
}

94 
	$Ê∆_ªque°_£t_fwm¨k
(
Ê∆_ªque°
 *
ªq
, 
uöt64_t
 
fwm¨k
)

96 
ªq
->
Ã_fwm¨k
 = 
fwm¨k
;

97 
ªq
->
˚_mask
 |
REQUEST_ATTR_FWMARK
;

98 
	}
}

100 
uöt64_t
 
	$Ê∆_ªque°_gë_fwm¨k
(
Ê∆_ªque°
 *
ªq
)

102 i‡(
ªq
->
˚_mask
 & 
REQUEST_ATTR_FWMARK
)

103  
ªq
->
Ã_fwm¨k
;

105  
UINT_LEAST64_MAX
;

106 
	}
}

108 
	$Ê∆_ªque°_£t_tos
(
Ê∆_ªque°
 *
ªq
, 
tos
)

110 
ªq
->
Ã_tos
 = 
tos
;

111 
ªq
->
˚_mask
 |
REQUEST_ATTR_TOS
;

112 
	}
}

114 
	$Ê∆_ªque°_gë_tos
(
Ê∆_ªque°
 *
ªq
)

116 i‡(
ªq
->
˚_mask
 & 
REQUEST_ATTR_TOS
)

117  
ªq
->
Ã_tos
;

120 
	}
}

122 
	$Ê∆_ªque°_£t_sc›e
(
Ê∆_ªque°
 *
ªq
, 
sc›e
)

124 
ªq
->
Ã_sc›e
 = 
sc›e
;

125 
ªq
->
˚_mask
 |
REQUEST_ATTR_SCOPE
;

126 
	}
}

128 
	$Ê∆_ªque°_gë_sc›e
(
Ê∆_ªque°
 *
ªq
)

130 i‡(
ªq
->
˚_mask
 & 
REQUEST_ATTR_SCOPE
)

131  
ªq
->
Ã_sc›e
;

134 
	}
}

136 
	$Ê∆_ªque°_£t_èbÀ
(
Ê∆_ªque°
 *
ªq
, 
èbÀ
)

138 
ªq
->
Ã_èbÀ
 = 
èbÀ
;

139 
ªq
->
˚_mask
 |
REQUEST_ATTR_TABLE
;

140 
	}
}

142 
	$Ê∆_ªque°_gë_èbÀ
(
Ê∆_ªque°
 *
ªq
)

144 i‡(
ªq
->
˚_mask
 & 
REQUEST_ATTR_TABLE
)

145  
ªq
->
Ã_èbÀ
;

148 
	}
}

150 
	$Ê∆_ªque°_£t_addr
(
Ê∆_ªque°
 *
ªq
, 
∆_addr
 *
addr
)

152 i‡(
addr
->
a_Ámûy
 !
AF_INET
)

153  -
NLE_AF_NOSUPPORT
;

155 i‡(
ªq
->
Ã_addr
)

156 
	`∆_addr_put
(
ªq
->
Ã_addr
);

158 
	`∆_addr_gë
(
addr
);

159 
ªq
->
Ã_addr
 = 
addr
;

161 
ªq
->
˚_mask
 |
REQUEST_ATTR_ADDR
;

164 
	}
}

166 
∆_addr
 *
	$Ê∆_ªque°_gë_addr
(
Ê∆_ªque°
 *
ªq
)

168 i‡(
ªq
->
˚_mask
 & 
REQUEST_ATTR_ADDR
)

169  
ªq
->
Ã_addr
;

171  
NULL
;

172 
	}
}

176 
∆_obje˘_›s
 
	gªque°_obj_›s
 = {

177 .
oo_«me
 = "fib_lookup/request",

178 .
	goo_size
 = (
Ê∆_ªque°
),

179 .
	goo_‰ì_d©a
 = 
ªque°_‰ì_d©a
,

180 .
	goo_˛⁄e
 = 
ªque°_˛⁄e
,

181 .
	goo_com∑ª
 = 
ªque°_com∑ª
,

182 .
	goo_id_©ås
 = ~0,

	@mylibnl/libnl-3.2.25/lib/genl/ctrl.c

24 
	~<√éök-¥iv©e/gíl.h
>

25 
	~<√éök/√éök.h
>

26 
	~<√éök/gíl/gíl.h
>

27 
	~<√éök/gíl/Ámûy.h
>

28 
	~<√éök/gíl/mngt.h
>

29 
	~<√éök/gíl/˘æ.h
>

30 
	~<√éök/utûs.h
>

33 
	#CTRL_VERSION
 0x0001

	)

35 
∆_ˇche_›s
 
	ggíl_˘æ_›s
;

37 
	$˘æ_ªque°_upd©e
(
∆_ˇche
 *
c
, 
∆_sock
 *
h
)

39  
	`gíl_£nd_sim∂e
(
h
, 
GENL_ID_CTRL
, 
CTRL_CMD_GETFAMILY
,

40 
CTRL_VERSION
, 
NLM_F_DUMP
);

41 
	}
}

43 
∆a_pﬁicy
 
	g˘æ_pﬁicy
[
CTRL_ATTR_MAX
+1] = {

44 [
CTRL_ATTR_FAMILY_ID
] = { .
ty≥
 = 
NLA_U16
 },

45 [
CTRL_ATTR_FAMILY_NAME
] = { .
ty≥
 = 
NLA_STRING
,

46 .
	gmaxÀn
 = 
GENL_NAMSIZ
 },

47 [
CTRL_ATTR_VERSION
] = { .
ty≥
 = 
NLA_U32
 },

48 [
CTRL_ATTR_HDRSIZE
] = { .
ty≥
 = 
NLA_U32
 },

49 [
CTRL_ATTR_MAXATTR
] = { .
ty≥
 = 
NLA_U32
 },

50 [
CTRL_ATTR_OPS
] = { .
ty≥
 = 
NLA_NESTED
 },

51 [
CTRL_ATTR_MCAST_GROUPS
] = { .
ty≥
 = 
NLA_NESTED
 },

54 
∆a_pﬁicy
 
	gÁmûy_›_pﬁicy
[
CTRL_ATTR_OP_MAX
+1] = {

55 [
CTRL_ATTR_OP_ID
] = { .
ty≥
 = 
NLA_U32
 },

56 [
CTRL_ATTR_OP_FLAGS
] = { .
ty≥
 = 
NLA_U32
 },

59 
∆a_pﬁicy
 
	gÁmûy_gΩ_pﬁicy
[
CTRL_ATTR_MCAST_GRP_MAX
+1] = {

60 [
CTRL_ATTR_MCAST_GRP_NAME
] = { .
ty≥
 = 
NLA_STRING
 },

61 [
CTRL_ATTR_MCAST_GRP_ID
] = { .
ty≥
 = 
NLA_U32
 },

64 
	$∑r£_mˇ°_gΩs
(
gíl_Ámûy
 *
Ámûy
, 
∆©å
 *
gΩ_©å
)

66 
∆©å
 *
∆a
;

67 
ªmaöög
, 
îr
;

69 i‡(!
gΩ_©å
)

70 
	`BUG
();

72 
	`∆a_f‹_óch_√°ed
(
∆a
, 
gΩ_©å
, 
ªmaöög
) {

73 
∆©å
 *
tb
[
CTRL_ATTR_MCAST_GRP_MAX
+1];

74 
id
;

75 c⁄° * 
«me
;

77 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
CTRL_ATTR_MCAST_GRP_MAX
, 
∆a
,

78 
Ámûy_gΩ_pﬁicy
);

79 i‡(
îr
 < 0)

80 
îrout
;

82 i‡(
tb
[
CTRL_ATTR_MCAST_GRP_ID
] =
NULL
) {

83 
îr
 = -
NLE_MISSING_ATTR
;

84 
îrout
;

86 
id
 = 
	`∆a_gë_u32
(
tb
[
CTRL_ATTR_MCAST_GRP_ID
]);

88 i‡(
tb
[
CTRL_ATTR_MCAST_GRP_NAME
] =
NULL
) {

89 
îr
 = -
NLE_MISSING_ATTR
;

90 
îrout
;

92 
«me
 = 
	`∆a_gë_°rög
(
tb
[
CTRL_ATTR_MCAST_GRP_NAME
]);

94 
îr
 = 
	`gíl_Ámûy_add_gΩ
(
Ámûy
, 
id
, 
«me
);

95 i‡(
îr
 < 0)

96 
îrout
;

99 
îr
 = 0;

101 
îrout
:

102  
îr
;

103 
	}
}

105 
	$˘æ_msg_∑r£r
(
∆_ˇche_›s
 *
›s
, 
gíl_cmd
 *
cmd
,

106 
gíl_öfo
 *
öfo
, *
¨g
)

108 
gíl_Ámûy
 *
Ámûy
;

109 
∆_∑r£r_∑øm
 *
µ
 = 
¨g
;

110 
îr
;

112 
Ámûy
 = 
	`gíl_Ámûy_Æloc
();

113 i‡(
Ámûy
 =
NULL
) {

114 
îr
 = -
NLE_NOMEM
;

115 
îrout
;

118 i‡(
öfo
->
©ås
[
CTRL_ATTR_FAMILY_NAME
] =
NULL
) {

119 
îr
 = -
NLE_MISSING_ATTR
;

120 
îrout
;

123 i‡(
öfo
->
©ås
[
CTRL_ATTR_FAMILY_ID
] =
NULL
) {

124 
îr
 = -
NLE_MISSING_ATTR
;

125 
îrout
;

128 
Ámûy
->
˚_msgty≥
 = 
öfo
->
∆h
->
∆msg_ty≥
;

129 
	`gíl_Ámûy_£t_id
(
Ámûy
,

130 
	`∆a_gë_u16
(
öfo
->
©ås
[
CTRL_ATTR_FAMILY_ID
]));

131 
	`gíl_Ámûy_£t_«me
(
Ámûy
,

132 
	`∆a_gë_°rög
(
öfo
->
©ås
[
CTRL_ATTR_FAMILY_NAME
]));

134 i‡(
öfo
->
©ås
[
CTRL_ATTR_VERSION
]) {

135 
uöt32_t
 
vîsi⁄
 = 
	`∆a_gë_u32
(
öfo
->
©ås
[
CTRL_ATTR_VERSION
]);

136 
	`gíl_Ámûy_£t_vîsi⁄
(
Ámûy
, 
vîsi⁄
);

139 i‡(
öfo
->
©ås
[
CTRL_ATTR_HDRSIZE
]) {

140 
uöt32_t
 
hdrsize
 = 
	`∆a_gë_u32
(
öfo
->
©ås
[
CTRL_ATTR_HDRSIZE
]);

141 
	`gíl_Ámûy_£t_hdrsize
(
Ámûy
, 
hdrsize
);

144 i‡(
öfo
->
©ås
[
CTRL_ATTR_MAXATTR
]) {

145 
uöt32_t
 
max©å
 = 
	`∆a_gë_u32
(
öfo
->
©ås
[
CTRL_ATTR_MAXATTR
]);

146 
	`gíl_Ámûy_£t_max©å
(
Ámûy
, 
max©å
);

149 i‡(
öfo
->
©ås
[
CTRL_ATTR_OPS
]) {

150 
∆©å
 *
∆a
, *
∆a_›s
;

151 
ªmaöög
;

153 
∆a_›s
 = 
öfo
->
©ås
[
CTRL_ATTR_OPS
];

154 
	`∆a_f‹_óch_√°ed
(
∆a
, 
∆a_›s
, 
ªmaöög
) {

155 
∆©å
 *
tb
[
CTRL_ATTR_OP_MAX
+1];

156 
Êags
 = 0, 
id
;

158 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
CTRL_ATTR_OP_MAX
, 
∆a
,

159 
Ámûy_›_pﬁicy
);

160 i‡(
îr
 < 0)

161 
îrout
;

163 i‡(
tb
[
CTRL_ATTR_OP_ID
] =
NULL
) {

164 
îr
 = -
NLE_MISSING_ATTR
;

165 
îrout
;

168 
id
 = 
	`∆a_gë_u32
(
tb
[
CTRL_ATTR_OP_ID
]);

170 i‡(
tb
[
CTRL_ATTR_OP_FLAGS
])

171 
Êags
 = 
	`∆a_gë_u32
(
tb
[
CTRL_ATTR_OP_FLAGS
]);

173 
îr
 = 
	`gíl_Ámûy_add_›
(
Ámûy
, 
id
, 
Êags
);

174 i‡(
îr
 < 0)

175 
îrout
;

180 i‡(
öfo
->
©ås
[
CTRL_ATTR_MCAST_GROUPS
]) {

181 
îr
 = 
	`∑r£_mˇ°_gΩs
(
Ámûy
, 
öfo
->
©ås
[
CTRL_ATTR_MCAST_GROUPS
]);

182 i‡(
îr
 < 0)

183 
îrout
;

186 
îr
 = 
µ
->
	`µ_cb
((
∆_obje˘
 *Ë
Ámûy
,Öp);

187 
îrout
:

188 
	`gíl_Ámûy_put
(
Ámûy
);

189  
îr
;

190 
	}
}

203 
	$¥obe_ª•⁄£
(
∆_msg
 *
msg
, *
¨g
)

205 
∆©å
 *
tb
[
CTRL_ATTR_MAX
+1];

206 
∆msghdr
 *
∆h
 = 
	`∆msg_hdr
(
msg
);

207 
gíl_Ámûy
 *
ªt
 = (gíl_Ámûy *)
¨g
;

209 i‡(
	`gílmsg_∑r£
(
∆h
, 0, 
tb
, 
CTRL_ATTR_MAX
, 
˘æ_pﬁicy
))

210  
NL_SKIP
;

212 i‡(
tb
[
CTRL_ATTR_FAMILY_ID
])

213 
	`gíl_Ámûy_£t_id
(
ªt
, 
	`∆a_gë_u16
(
tb
[
CTRL_ATTR_FAMILY_ID
]));

215 i‡(
tb
[
CTRL_ATTR_MCAST_GROUPS
])

216 i‡(
	`∑r£_mˇ°_gΩs
(
ªt
, 
tb
[
CTRL_ATTR_MCAST_GROUPS
]) < 0)

217  
NL_SKIP
;

219  
NL_STOP
;

220 
	}
}

237 
gíl_Ámûy
 *
	$gíl_˘æ_¥obe_by_«me
(
∆_sock
 *
sk
,

238 c⁄° *
«me
)

240 
∆_msg
 *
msg
;

241 
gíl_Ámûy
 *
ªt
;

242 
∆_cb
 *
cb
, *
‹ig
;

243 
rc
;

245 
ªt
 = 
	`gíl_Ámûy_Æloc
();

246 i‡(!
ªt
)

247 
out
;

249 
	`gíl_Ámûy_£t_«me
(
ªt
, 
«me
);

251 
msg
 = 
	`∆msg_Æloc
();

252 i‡(!
msg
)

253 
out_Ám_‰ì
;

255 i‡(!(
‹ig
 = 
	`∆_sockë_gë_cb
(
sk
)))

256 
out_msg_‰ì
;

258 
cb
 = 
	`∆_cb_˛⁄e
(
‹ig
);

259 
	`∆_cb_put
(
‹ig
);

260 i‡(!
cb
)

261 
out_msg_‰ì
;

263 i‡(!
	`gílmsg_put
(
msg
, 
NL_AUTO_PORT
, 
NL_AUTO_SEQ
, 
GENL_ID_CTRL
,

264 0, 0, 
CTRL_CMD_GETFAMILY
, 1)) {

265 
	`BUG
();

266 
out_cb_‰ì
;

269 i‡(
	`∆a_put_°rög
(
msg
, 
CTRL_ATTR_FAMILY_NAME
, 
«me
) < 0)

270 
out_cb_‰ì
;

272 
rc
 = 
	`∆_cb_£t
(
cb
, 
NL_CB_VALID
, 
NL_CB_CUSTOM
, 
¥obe_ª•⁄£
,

273 (*Ë
ªt
);

274 i‡(
rc
 < 0)

275 
out_cb_‰ì
;

277 
rc
 = 
	`∆_£nd_auto_com∂ëe
(
sk
, 
msg
);

278 i‡(
rc
 < 0)

279 
out_cb_‰ì
;

281 
rc
 = 
	`∆_ªcvmsgs
(
sk
, 
cb
);

282 i‡(
rc
 < 0)

283 
out_cb_‰ì
;

286 
rc
 = 
	`waô_f‹_ack
(
sk
);

287 i‡(
rc
 < 0)

288 
out_cb_‰ì
;

290 i‡(
	`gíl_Ámûy_gë_id
(
ªt
) != 0) {

291 
	`∆msg_‰ì
(
msg
);

292 
	`∆_cb_put
(
cb
);

293  
ªt
;

296 
out_cb_‰ì
:

297 
	`∆_cb_put
(
cb
);

298 
out_msg_‰ì
:

299 
	`∆msg_‰ì
(
msg
);

300 
out_Ám_‰ì
:

301 
	`gíl_Ámûy_put
(
ªt
);

302 
ªt
 = 
NULL
;

303 
out
:

304  
ªt
;

305 
	}
}

333 
	$gíl_˘æ_Æloc_ˇche
(
∆_sock
 *
sk
, 
∆_ˇche
 **
ªsu…
)

335  
	`∆_ˇche_Æloc_™d_fûl
(&
gíl_˘æ_›s
, 
sk
, 
ªsu…
);

336 
	}
}

354 
gíl_Ámûy
 *
	$gíl_˘æ_£¨ch
(
∆_ˇche
 *
ˇche
, 
id
)

356 
gíl_Ámûy
 *
Ám
;

358 i‡(
ˇche
->
c_›s
 !&
gíl_˘æ_›s
)

359 
	`BUG
();

361 
	`∆_li°_f‹_óch_íåy
(
Ám
, &
ˇche
->
c_ôems
, 
˚_li°
) {

362 i‡(
Ám
->
gf_id
 =
id
) {

363 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
Ám
);

364  
Ám
;

368  
NULL
;

369 
	}
}

387 
gíl_Ámûy
 *
	$gíl_˘æ_£¨ch_by_«me
(
∆_ˇche
 *
ˇche
,

388 c⁄° *
«me
)

390 
gíl_Ámûy
 *
Ám
;

392 i‡(
ˇche
->
c_›s
 !&
gíl_˘æ_›s
)

393 
	`BUG
();

395 
	`∆_li°_f‹_óch_íåy
(
Ám
, &
ˇche
->
c_ôems
, 
˚_li°
) {

396 i‡(!
	`°rcmp
(
«me
, 
Ám
->
gf_«me
)) {

397 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
Ám
);

398  
Ám
;

402  
NULL
;

403 
	}
}

429 
	$gíl_˘æ_ªsﬁve
(
∆_sock
 *
sk
, c⁄° *
«me
)

431 
gíl_Ámûy
 *
Ámûy
;

432 
îr
;

434 
Ámûy
 = 
	`gíl_˘æ_¥obe_by_«me
(
sk
, 
«me
);

435 i‡(
Ámûy
 =
NULL
) {

436 
îr
 = -
NLE_OBJ_NOTFOUND
;

437 
îrout
;

440 
îr
 = 
	`gíl_Ámûy_gë_id
(
Ámûy
);

441 
	`gíl_Ámûy_put
(
Ámûy
);

442 
îrout
:

443  
îr
;

444 
	}
}

446 
	$gíl_˘æ_gΩ_by_«me
(c⁄° 
gíl_Ámûy
 *
Ámûy
,

447 c⁄° *
gΩ_«me
)

449 
gíl_Ámûy_gΩ
 *
gΩ
;

451 
	`∆_li°_f‹_óch_íåy
(
gΩ
, &
Ámûy
->
gf_mc_gΩs
, 
li°
) {

452 i‡(!
	`°rcmp
(
gΩ
->
«me
, 
gΩ_«me
)) {

453  
gΩ
->
id
;

457  -
NLE_OBJ_NOTFOUND
;

458 
	}
}

471 
	$gíl_˘æ_ªsﬁve_gΩ
(
∆_sock
 *
sk
, c⁄° *
Ámûy_«me
,

472 c⁄° *
gΩ_«me
)

475 
gíl_Ámûy
 *
Ámûy
;

476 
îr
;

478 
Ámûy
 = 
	`gíl_˘æ_¥obe_by_«me
(
sk
, 
Ámûy_«me
);

479 i‡(
Ámûy
 =
NULL
) {

480 
îr
 = -
NLE_OBJ_NOTFOUND
;

481 
îrout
;

484 
îr
 = 
	`gíl_˘æ_gΩ_by_«me
(
Ámûy
, 
gΩ_«me
);

485 
	`gíl_Ámûy_put
(
Ámûy
);

486 
îrout
:

487  
îr
;

488 
	}
}

493 
gíl_cmd
 
	ggíl_cmds
[] = {

495 .
c_id
 = 
CTRL_CMD_NEWFAMILY
,

496 .
	gc_«me
 = "NEWFAMILY" ,

497 .
	gc_max©å
 = 
CTRL_ATTR_MAX
,

498 .
	gc_©å_pﬁicy
 = 
˘æ_pﬁicy
,

499 .
	gc_msg_∑r£r
 = 
˘æ_msg_∑r£r
,

502 .
	gc_id
 = 
CTRL_CMD_DELFAMILY
,

503 .
	gc_«me
 = "DELFAMILY" ,

506 .
	gc_id
 = 
CTRL_CMD_GETFAMILY
,

507 .
	gc_«me
 = "GETFAMILY" ,

510 .
	gc_id
 = 
CTRL_CMD_NEWOPS
,

511 .
	gc_«me
 = "NEWOPS" ,

514 .
	gc_id
 = 
CTRL_CMD_DELOPS
,

515 .
	gc_«me
 = "DELOPS" ,

519 
gíl_›s
 
	ggíl_›s
 = {

520 .
o_cmds
 = 
gíl_cmds
,

521 .
	go_ncmds
 = 
ARRAY_SIZE
(
gíl_cmds
),

524 
∆_obje˘_›s
 
gíl_Ámûy_›s
;

526 
∆_ˇche_›s
 
	ggíl_˘æ_›s
 = {

527 .
co_«me
 = "genl/family",

528 .
	gco_hdrsize
 = 
GENL_HDRSIZE
(0),

529 .
	gco_msgty≥s
 = 
GENL_FAMILY
(
GENL_ID_CTRL
, "nlctrl"),

530 .
	gco_gíl
 = &
gíl_›s
,

531 .
	gco_¥Ÿocﬁ
 = 
NETLINK_GENERIC
,

532 .
	gco_ªque°_upd©e
 = 
˘æ_ªque°_upd©e
,

533 .
	gco_obj_›s
 = &
gíl_Ámûy_›s
,

536 
__öô
 
	$˘æ_öô
()

538 
	`gíl_ªgi°î
(&
gíl_˘æ_›s
);

539 
	}
}

541 
__exô
 
	$˘æ_exô
()

543 
	`gíl_uƒegi°î
(&
gíl_˘æ_›s
);

544 
	}
}

	@mylibnl/libnl-3.2.25/lib/genl/family.c

21 
	~<√éök-¥iv©e/gíl.h
>

22 
	~<√éök/√éök.h
>

23 
	~<√éök/gíl/gíl.h
>

24 
	~<√éök/gíl/Ámûy.h
>

25 
	~<√éök/utûs.h
>

28 
	#FAMILY_ATTR_ID
 0x01

	)

29 
	#FAMILY_ATTR_NAME
 0x02

	)

30 
	#FAMILY_ATTR_VERSION
 0x04

	)

31 
	#FAMILY_ATTR_HDRSIZE
 0x08

	)

32 
	#FAMILY_ATTR_MAXATTR
 0x10

	)

33 
	#FAMILY_ATTR_OPS
 0x20

	)

35 
∆_obje˘_›s
 
	ggíl_Ámûy_›s
;

37 
	$Ámûy_c⁄°ru˘‹
(
∆_obje˘
 *
c
)

39 
gíl_Ámûy
 *
Ámûy
 = (gíl_Ámûy *Ë
c
;

41 
	`∆_öô_li°_hód
(&
Ámûy
->
gf_›s
);

42 
	`∆_öô_li°_hód
(&
Ámûy
->
gf_mc_gΩs
);

43 
	}
}

45 
	$Ámûy_‰ì_d©a
(
∆_obje˘
 *
c
)

47 
gíl_Ámûy
 *
Ámûy
 = (gíl_Ámûy *Ë
c
;

48 
gíl_Ámûy_›
 *
›s
, *
tmp
;

49 
gíl_Ámûy_gΩ
 *
gΩ
, *
t_gΩ
;

51 i‡(
Ámûy
 =
NULL
)

54 
	`∆_li°_f‹_óch_íåy_ß„
(
›s
, 
tmp
, &
Ámûy
->
gf_›s
, 
o_li°
) {

55 
	`∆_li°_dñ
(&
›s
->
o_li°
);

56 
	`‰ì
(
›s
);

59 
	`∆_li°_f‹_óch_íåy_ß„
(
gΩ
, 
t_gΩ
, &
Ámûy
->
gf_mc_gΩs
, 
li°
) {

60 
	`∆_li°_dñ
(&
gΩ
->
li°
);

61 
	`‰ì
(
gΩ
);

64 
	}
}

66 
	$Ámûy_˛⁄e
(
∆_obje˘
 *
_d°
, ∆_obje˘ *
_§c
)

68 
gíl_Ámûy
 *
d°
 = 
	`∆_obje˘_¥iv
(
_d°
);

69 
gíl_Ámûy
 *
§c
 = 
	`∆_obje˘_¥iv
(
_§c
);

70 
gíl_Ámûy_›
 *
›s
;

71 
gíl_Ámûy_gΩ
 *
gΩ
;

72 
îr
;

74 
	`∆_li°_f‹_óch_íåy
(
›s
, &
§c
->
gf_›s
, 
o_li°
) {

75 
îr
 = 
	`gíl_Ámûy_add_›
(
d°
, 
›s
->
o_id
, ops->
o_Êags
);

76 i‡(
îr
 < 0)

77  
îr
;

80 
	`∆_li°_f‹_óch_íåy
(
gΩ
, &
§c
->
gf_mc_gΩs
, 
li°
) {

81 
îr
 = 
	`gíl_Ámûy_add_gΩ
(
d°
, 
gΩ
->
id
, gΩ->
«me
);

82 i‡(
îr
 < 0)

83  
îr
;

88 
	}
}

90 
	$Ámûy_dump_löe
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
p
)

92 
gíl_Ámûy
 *
Ámûy
 = (gíl_Ámûy *Ë
obj
;

94 
	`∆_dump
(
p
, "0x%04x %s version %u\n",

95 
Ámûy
->
gf_id
, famûy->
gf_«me
, famûy->
gf_vîsi⁄
);

96 
	}
}

98 c⁄° 
å™s_tbl
 
	g›s_Êags
[] = {

99 
__ADD
(
GENL_ADMIN_PERM
, 
admö_≥rm
)

100 
__ADD
(
GENL_CMD_CAP_DO
, 
has_doô
)

101 
__ADD
(
GENL_CMD_CAP_DUMP
, 
has_dump
)

102 
__ADD
(
GENL_CMD_CAP_HASPOL
, 
has_pﬁicy
)

105 *
	$›s_Êags2°r
(
Êags
, *
buf
, 
size_t
 
Àn
)

107  
	`__Êags2°r
(
Êags
, 
buf
, 
Àn
, 
›s_Êags
, 
	`ARRAY_SIZE
(ops_flags));

108 
	}
}

110 
	$Ámûy_dump_dëaûs
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
p
)

112 
gíl_Ámûy_gΩ
 *
gΩ
;

113 
gíl_Ámûy
 *
Ámûy
 = (gíl_Ámûy *Ë
obj
;

115 
	`Ámûy_dump_löe
(
obj
, 
p
);

116 
	`∆_dump_löe
(
p
, " hdrsize %u maxattr %u\n",

117 
Ámûy
->
gf_hdrsize
, famûy->
gf_max©å
);

119 i‡(
Ámûy
->
˚_mask
 & 
FAMILY_ATTR_OPS
) {

120 
gíl_Ámûy_›
 *
›
;

121 
buf
[64];

123 
	`∆_li°_f‹_óch_íåy
(
›
, &
Ámûy
->
gf_›s
, 
o_li°
) {

124 
	`›s_Êags2°r
(
›
->
o_Êags
, 
buf
, (buf));

126 
	`gíl_›2«me
(
Ámûy
->
gf_id
, 
›
->
o_id
, 
buf
, (buf));

128 
	`∆_dump_löe
(
p
, " o∞%†(0x%02x)", 
buf
, 
›
->
o_id
);

130 i‡(
›
->
o_Êags
)

131 
	`∆_dump
(
p
, " <%s>",

132 
	`›s_Êags2°r
(
›
->
o_Êags
, 
buf
,

133 (
buf
)));

135 
	`∆_dump
(
p
, "\n");

139 
	`∆_li°_f‹_óch_íåy
(
gΩ
, &
Ámûy
->
gf_mc_gΩs
, 
li°
) {

140 
	`∆_dump_löe
(
p
, " gΩ %†(0x%02x)\n", 
gΩ
->
«me
, gΩ->
id
);

143 
	}
}

145 
	$Ámûy_dump_°©s
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
p
)

147 
	`Ámûy_dump_dëaûs
(
obj
, 
p
);

148 
	}
}

150 
	$Ámûy_com∑ª
(
∆_obje˘
 *
_a
, ∆_obje˘ *
_b
,

151 
uöt32_t
 
©ås
, 
Êags
)

153 
gíl_Ámûy
 *
a
 = (gíl_Ámûy *Ë
_a
;

154 
gíl_Ámûy
 *
b
 = (gíl_Ámûy *Ë
_b
;

155 
diff
 = 0;

157 
	#FAM_DIFF
(
ATTR
, 
EXPR
Ë
	`ATTR_DIFF
(
©ås
, 
FAMILY_ATTR_
##ATTR, 
a
, 
b
, EXPR)

	)

159 
diff
 |
	`FAM_DIFF
(
ID
, 
a
->
gf_id
 !
b
->gf_id);

160 
diff
 |
	`FAM_DIFF
(
VERSION
, 
a
->
gf_vîsi⁄
 !
b
->gf_version);

161 
diff
 |
	`FAM_DIFF
(
HDRSIZE
, 
a
->
gf_hdrsize
 !
b
->gf_hdrsize);

162 
diff
 |
	`FAM_DIFF
(
MAXATTR
, 
a
->
gf_max©å
 !
b
->gf_maxattr);

163 
diff
 |
	`FAM_DIFF
(
NAME
, 
	`°rcmp
(
a
->
gf_«me
, 
b
->gf_name));

165 #unde‡
FAM_DIFF


167  
diff
;

168 
	}
}

181 
gíl_Ámûy
 *
	$gíl_Ámûy_Æloc
()

183  (
gíl_Ámûy
 *Ë
	`∆_obje˘_Æloc
(&
gíl_Ámûy_›s
);

184 
	}
}

195 
	$gíl_Ámûy_put
(
gíl_Ámûy
 *
Ámûy
)

197 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
Ámûy
);

198 
	}
}

213 
	$gíl_Ámûy_gë_id
(
gíl_Ámûy
 *
Ámûy
)

215 i‡(
Ámûy
->
˚_mask
 & 
FAMILY_ATTR_ID
)

216  
Ámûy
->
gf_id
;

218  
GENL_ID_GENERATE
;

219 
	}
}

226 
	$gíl_Ámûy_£t_id
(
gíl_Ámûy
 *
Ámûy
, 
id
)

228 
Ámûy
->
gf_id
 = 
id
;

229 
Ámûy
->
˚_mask
 |
FAMILY_ATTR_ID
;

230 
	}
}

245 *
	$gíl_Ámûy_gë_«me
(
gíl_Ámûy
 *
Ámûy
)

247 i‡(
Ámûy
->
˚_mask
 & 
FAMILY_ATTR_NAME
)

248  
Ámûy
->
gf_«me
;

250  
NULL
;

251 
	}
}

258 
	$gíl_Ámûy_£t_«me
(
gíl_Ámûy
 *
Ámûy
, c⁄° *
«me
)

260 
	`°∫˝y
(
Ámûy
->
gf_«me
, 
«me
, 
GENL_NAMSIZ
-1);

261 
Ámûy
->
˚_mask
 |
FAMILY_ATTR_NAME
;

262 
	}
}

275 
uöt8_t
 
	$gíl_Ámûy_gë_vîsi⁄
(
gíl_Ámûy
 *
Ámûy
)

277 i‡(
Ámûy
->
˚_mask
 & 
FAMILY_ATTR_VERSION
)

278  
Ámûy
->
gf_vîsi⁄
;

281 
	}
}

288 
	$gíl_Ámûy_£t_vîsi⁄
(
gíl_Ámûy
 *
Ámûy
, 
uöt8_t
 
vîsi⁄
)

290 
Ámûy
->
gf_vîsi⁄
 = 
vîsi⁄
;

291 
Ámûy
->
˚_mask
 |
FAMILY_ATTR_VERSION
;

292 
	}
}

307 
uöt32_t
 
	$gíl_Ámûy_gë_hdrsize
(
gíl_Ámûy
 *
Ámûy
)

309 i‡(
Ámûy
->
˚_mask
 & 
FAMILY_ATTR_HDRSIZE
)

310  
Ámûy
->
gf_hdrsize
;

313 
	}
}

315 
	$gíl_Ámûy_£t_hdrsize
(
gíl_Ámûy
 *
Ámûy
, 
uöt32_t
 
hdrsize
)

317 
Ámûy
->
gf_hdrsize
 = 
hdrsize
;

318 
Ámûy
->
˚_mask
 |
FAMILY_ATTR_HDRSIZE
;

319 
	}
}

328 
uöt32_t
 
	$gíl_Ámûy_gë_max©å
(
gíl_Ámûy
 *
Ámûy
)

330 i‡(
Ámûy
->
˚_mask
 & 
FAMILY_ATTR_MAXATTR
)

331  
Ámûy
->
gf_max©å
;

333  
Ámûy
->
gf_max©å
;

334 
	}
}

336 
	$gíl_Ámûy_£t_max©å
(
gíl_Ámûy
 *
Ámûy
, 
uöt32_t
 
max©å
)

338 
Ámûy
->
gf_max©å
 = 
max©å
;

339 
Ámûy
->
˚_mask
 |
FAMILY_ATTR_MAXATTR
;

340 
	}
}

349 
	$gíl_Ámûy_add_›
(
gíl_Ámûy
 *
Ámûy
, 
id
, 
Êags
)

351 
gíl_Ámûy_›
 *
›
;

353 
›
 = 
	`ˇŒoc
(1, (*op));

354 i‡(
›
 =
NULL
)

355  -
NLE_NOMEM
;

357 
›
->
o_id
 = 
id
;

358 
›
->
o_Êags
 = 
Êags
;

360 
	`∆_li°_add_èû
(&
›
->
o_li°
, &
Ámûy
->
gf_›s
);

361 
Ámûy
->
˚_mask
 |
FAMILY_ATTR_OPS
;

364 
	}
}

366 
	$gíl_Ámûy_add_gΩ
(
gíl_Ámûy
 *
Ámûy
, 
uöt32_t
 
id
,

367 c⁄° *
«me
)

369 
gíl_Ámûy_gΩ
 *
gΩ
;

371 
gΩ
 = 
	`ˇŒoc
(1, (*grp));

372 i‡(
gΩ
 =
NULL
)

373  -
NLE_NOMEM
;

375 
gΩ
->
id
 = id;

376 
	`°∫˝y
(
gΩ
->
«me
,Çame, 
GENL_NAMSIZ
 - 1);

378 
	`∆_li°_add_èû
(&
gΩ
->
li°
, &
Ámûy
->
gf_mc_gΩs
);

381 
	}
}

386 
∆_obje˘_›s
 
	ggíl_Ámûy_›s
 = {

387 .
oo_«me
 = "genl/family",

388 .
	goo_size
 = (
gíl_Ámûy
),

389 .
	goo_c⁄°ru˘‹
 = 
Ámûy_c⁄°ru˘‹
,

390 .
	goo_‰ì_d©a
 = 
Ámûy_‰ì_d©a
,

391 .
	goo_˛⁄e
 = 
Ámûy_˛⁄e
,

392 .
	goo_dump
 = {

393 [
NL_DUMP_LINE
] = 
Ámûy_dump_löe
,

394 [
NL_DUMP_DETAILS
] = 
Ámûy_dump_dëaûs
,

395 [
NL_DUMP_STATS
] = 
Ámûy_dump_°©s
,

397 .
	goo_com∑ª
 = 
Ámûy_com∑ª
,

398 .
	goo_id_©ås
 = 
FAMILY_ATTR_ID
,

	@mylibnl/libnl-3.2.25/lib/genl/genl.c

18 
	~<√éök-¥iv©e/gíl.h
>

19 
	~<√éök/√éök.h
>

20 
	~<√éök/gíl/gíl.h
>

21 
	~<√éök/utûs.h
>

45 
	$gíl_c⁄√˘
(
∆_sock
 *
sk
)

47  
	`∆_c⁄√˘
(
sk
, 
NETLINK_GENERIC
);

48 
	}
}

84 
	$gíl_£nd_sim∂e
(
∆_sock
 *
sk
, 
Ámûy
, 
cmd
,

85 
vîsi⁄
, 
Êags
)

87 
gílmsghdr
 
hdr
 = {

88 .
cmd
 = cmd,

89 .
vîsi⁄
 = version,

92  
	`∆_£nd_sim∂e
(
sk
, 
Ámûy
, 
Êags
, &
hdr
, (hdr));

93 
	}
}

117 
	$gílmsg_vÆid_hdr
(
∆msghdr
 *
∆h
, 
hdæí
)

119 
gílmsghdr
 *
ghdr
;

121 i‡(!
	`∆msg_vÆid_hdr
(
∆h
, 
GENL_HDRLEN
))

124 
ghdr
 = 
	`∆msg_d©a
(
∆h
);

125 i‡(
	`gílmsg_Àn
(
ghdr
Ë< 
	`NLMSG_ALIGN
(
hdæí
))

129 
	}
}

151 
	$gílmsg_vÆid©e
(
∆msghdr
 *
∆h
, 
hdæí
, 
maxty≥
,

152 
∆a_pﬁicy
 *
pﬁicy
)

154 
gílmsghdr
 *
ghdr
;

156 i‡(!
	`gílmsg_vÆid_hdr
(
∆h
, 
hdæí
))

157  -
NLE_MSG_TOOSHORT
;

159 
ghdr
 = 
	`∆msg_d©a
(
∆h
);

160  
	`∆a_vÆid©e
(
	`gílmsg_©åd©a
(
ghdr
, 
hdæí
),

161 
	`gílmsg_©åÀn
(
ghdr
, 
hdæí
), 
maxty≥
, 
pﬁicy
);

162 
	}
}

191 
	$gílmsg_∑r£
(
∆msghdr
 *
∆h
, 
hdæí
, 
∆©å
 *
tb
[],

192 
maxty≥
, 
∆a_pﬁicy
 *
pﬁicy
)

194 
gílmsghdr
 *
ghdr
;

196 i‡(!
	`gílmsg_vÆid_hdr
(
∆h
, 
hdæí
))

197  -
NLE_MSG_TOOSHORT
;

199 
ghdr
 = 
	`∆msg_d©a
(
∆h
);

200  
	`∆a_∑r£
(
tb
, 
maxty≥
, 
	`gílmsg_©åd©a
(
ghdr
, 
hdæí
),

201 
	`gílmsg_©åÀn
(
ghdr
, 
hdæí
), 
pﬁicy
);

202 
	}
}

210 
gílmsghdr
 *
	$gílmsg_hdr
(
∆msghdr
 *
∆h
)

212  
	`∆msg_d©a
(
∆h
);

213 
	}
}

224 
	$gílmsg_Àn
(c⁄° 
gílmsghdr
 *
g∆h
)

226 c⁄° 
∆msghdr
 *
∆h
;

228 
∆h
 = (c⁄° 
∆msghdr
 *)((c⁄° *Ë
g∆h
 - 
NLMSG_HDRLEN
);

229  (
∆h
->
∆msg_Àn
 - 
GENL_HDRLEN
 - 
NLMSG_HDRLEN
);

230 
	}
}

242 *
	$gílmsg_u£r_hdr
(c⁄° 
gílmsghdr
 *
g∆h
)

244  
	`gílmsg_d©a
(
g∆h
);

245 
	}
}

259 *
	$gílmsg_u£r_d©a
(c⁄° 
gílmsghdr
 *
g∆h
, c⁄° 
hdæí
)

261  
	`gílmsg_u£r_hdr
(
g∆h
Ë+ 
	`NLMSG_ALIGN
(
hdæí
);

262 
	}
}

273 
	$gílmsg_u£r_d©Æí
(c⁄° 
gílmsghdr
 *
g∆h
, c⁄° 
hdæí
)

275  
	`gílmsg_Àn
(
g∆h
Ë- 
	`NLMSG_ALIGN
(
hdæí
);

276 
	}
}

287 
∆©å
 *
	$gílmsg_©åd©a
(c⁄° 
gílmsghdr
 *
g∆h
, 
hdæí
)

289  
	`gílmsg_u£r_d©a
(
g∆h
, 
hdæí
);

290 
	}
}

302 
	$gílmsg_©åÀn
(c⁄° 
gílmsghdr
 *
g∆h
, 
hdæí
)

304  
	`gílmsg_Àn
(
g∆h
Ë- 
	`NLMSG_ALIGN
(
hdæí
);

305 
	}
}

348 *
	$gílmsg_put
(
∆_msg
 *
msg
, 
uöt32_t
 
p‹t
, uöt32_à
£q
, 
Ámûy
,

349 
hdæí
, 
Êags
, 
uöt8_t
 
cmd
, uöt8_à
vîsi⁄
)

351 
∆msghdr
 *
∆h
;

352 
gílmsghdr
 
hdr
 = {

353 .
cmd
 = cmd,

354 .
vîsi⁄
 = version,

357 
∆h
 = 
	`∆msg_put
(
msg
, 
p‹t
, 
£q
, 
Ámûy
, 
GENL_HDRLEN
 + 
hdæí
, 
Êags
);

358 i‡(
∆h
 =
NULL
)

359  
NULL
;

361 
	`mem˝y
(
	`∆msg_d©a
(
∆h
), &
hdr
, (hdr));

362 
	`NL_DBG
(2, "msg %p: Added genericÇetlink header cmd=%d version=%d\n",

363 
msg
, 
cmd
, 
vîsi⁄
);

365  
	`∆msg_d©a
(
∆h
Ë+ 
GENL_HDRLEN
;

366 
	}
}

385 *
	$gílmsg_d©a
(c⁄° 
gílmsghdr
 *
g∆h
)

387  ((*Ë
g∆h
 + 
GENL_HDRLEN
);

388 
	}
}

	@mylibnl/libnl-3.2.25/lib/genl/mngt.c

21 
	~<√éök-¥iv©e/gíl.h
>

22 
	~<√éök/√éök.h
>

23 
	~<√éök/gíl/gíl.h
>

24 
	~<√éök/gíl/mngt.h
>

25 
	~<√éök/gíl/Ámûy.h
>

26 
	~<√éök/gíl/˘æ.h
>

27 
	~<√éök/utûs.h
>

31 
NL_LIST_HEAD
(
gíl_›s_li°
);

33 
gíl_cmd
 *
	$lookup_cmd
(
gíl_›s
 *
›s
, 
cmd_id
)

35 
gíl_cmd
 *
cmd
;

36 
i
;

38 
i
 = 0; i < 
›s
->
o_ncmds
; i++) {

39 
cmd
 = &
›s
->
o_cmds
[
i
];

40 i‡(
cmd
->
c_id
 =
cmd_id
)

41  
cmd
;

44  
NULL
;

45 
	}
}

47 
	$cmd_msg_∑r£r
(
sockaddr_∆
 *
who
, 
∆msghdr
 *
∆h
,

48 
gíl_›s
 *
›s
, 
∆_ˇche_›s
 *
ˇche_›s
, *
¨g
)

50 
îr
;

51 
gílmsghdr
 *
ghdr
;

52 
gíl_cmd
 *
cmd
;

54 
ghdr
 = 
	`gílmsg_hdr
(
∆h
);

56 i‡(!(
cmd
 = 
	`lookup_cmd
(
›s
, 
ghdr
->cmd))) {

57 
îr
 = -
NLE_MSGTYPE_NOSUPPORT
;

58 
îrout
;

61 i‡(
cmd
->
c_msg_∑r£r
 =
NULL
)

62 
îr
 = -
NLE_OPNOTSUPP
;

64 
∆©å
 *
tb
[
cmd
->
c_max©å
 + 1];

65 
gíl_öfo
 
öfo
 = {

66 .
who
 = who,

67 .
∆h
 =Çlh,

68 .
gílhdr
 = 
ghdr
,

69 .
u£rhdr
 = 
	`gílmsg_u£r_hdr
(
ghdr
),

70 .
©ås
 = 
tb
,

73 
îr
 = 
	`∆msg_∑r£
(
∆h
, 
	`GENL_HDRSIZE
(
›s
->
o_hdrsize
), 
tb
, 
cmd
->
c_max©å
,

74 
cmd
->
c_©å_pﬁicy
);

75 i‡(
îr
 < 0)

76 
îrout
;

78 
îr
 = 
cmd
->
	`c_msg_∑r£r
(
ˇche_›s
, cmd, &
öfo
, 
¨g
);

80 
îrout
:

81  
îr
;

83 
	}
}

85 
	$gíl_msg_∑r£r
(
∆_ˇche_›s
 *
›s
, 
sockaddr_∆
 *
who
,

86 
∆msghdr
 *
∆h
, 
∆_∑r£r_∑øm
 *
µ
)

88 i‡(
›s
->
co_gíl
 =
NULL
)

89 
	`BUG
();

91  
	`cmd_msg_∑r£r
(
who
, 
∆h
, 
›s
->
co_gíl
, ops, 
µ
);

92 
	}
}

94 
gíl_›s
 *
	$lookup_Ámûy
(
Ámûy
)

96 
gíl_›s
 *
›s
;

98 
	`∆_li°_f‹_óch_íåy
(
›s
, &
gíl_›s_li°
, 
o_li°
) {

99 i‡(
›s
->
o_id
 =
Ámûy
)

100  
›s
;

103  
NULL
;

104 
	}
}

106 
gíl_›s
 *
	$lookup_Ámûy_by_«me
(c⁄° *
«me
)

108 
gíl_›s
 *
›s
;

110 
	`∆_li°_f‹_óch_íåy
(
›s
, &
gíl_›s_li°
, 
o_li°
) {

111 i‡(!
	`°rcmp
(
›s
->
o_«me
, 
«me
))

112  
›s
;

115  
NULL
;

116 
	}
}

118 *
	$gíl_›2«me
(
Ámûy
, 
›
, *
buf
, 
size_t
 
Àn
)

120 
gíl_›s
 *
›s
;

121 
i
;

123 i‡((
›s
 = 
	`lookup_Ámûy
(
Ámûy
))) {

124 
i
 = 0; i < 
›s
->
o_ncmds
; i++) {

125 
gíl_cmd
 *
cmd
;

126 
cmd
 = &
›s
->
o_cmds
[
i
];

128 i‡(
cmd
->
c_id
 =
›
) {

129 
	`°∫˝y
(
buf
, 
cmd
->
c_«me
, 
Àn
 - 1);

130  
buf
;

135 
	`°∫˝y
(
buf
, "unknown", 
Àn
 - 1);

136  
NULL
;

137 
	}
}

164 
	$gíl_ªgi°î_Ámûy
(
gíl_›s
 *
›s
)

166 i‡(!
›s
->
o_«me
)

167  -
NLE_INVAL
;

169 i‡(
›s
->
o_cmds
 && ops->
o_ncmds
 <= 0)

170  -
NLE_INVAL
;

172 i‡(
›s
->
o_id
 && 
	`lookup_Ámûy
(ops->o_id))

173  -
NLE_EXIST
;

175 i‡(
	`lookup_Ámûy_by_«me
(
›s
->
o_«me
))

176  -
NLE_EXIST
;

178 
	`∆_li°_add_èû
(&
›s
->
o_li°
, &
gíl_›s_li°
);

181 
	}
}

194 
	$gíl_uƒegi°î_Ámûy
(
gíl_›s
 *
›s
)

196 
	`∆_li°_dñ
(&
›s
->
o_li°
);

199 
	}
}

208 
	$gíl_h™dÀ_msg
(
∆_msg
 *
msg
, *
¨g
)

210 
∆msghdr
 *
∆h
 = 
	`∆msg_hdr
(
msg
);

211 
gíl_›s
 *
›s
;

213 i‡(!
	`gílmsg_vÆid_hdr
(
∆h
, 0))

214  -
NLE_INVAL
;

216 i‡(!(
›s
 = 
	`lookup_Ámûy
(
∆h
->
∆msg_ty≥
)))

217  -
NLE_MSGTYPE_NOSUPPORT
;

219  
	`cmd_msg_∑r£r
(
	`∆msg_gë_§c
(
msg
), 
∆h
, 
›s
, 
NULL
, 
¨g
);

220 
	}
}

241 
	$gíl_ªgi°î
(
∆_ˇche_›s
 *
›s
)

243 
îr
;

245 i‡(
›s
->
co_¥Ÿocﬁ
 !
NETLINK_GENERIC
) {

246 
îr
 = -
NLE_PROTO_MISMATCH
;

247 
îrout
;

250 i‡(
›s
->
co_hdrsize
 < 
	`GENL_HDRSIZE
(0)) {

251 
îr
 = -
NLE_INVAL
;

252 
îrout
;

255 i‡(
›s
->
co_gíl
 =
NULL
) {

256 
îr
 = -
NLE_INVAL
;

257 
îrout
;

260 
›s
->
co_gíl
->
o_ˇche_›s
 = ops;

261 
›s
->
co_gíl
->
o_hdrsize
 = ops->
co_hdrsize
 - 
GENL_HDRLEN
;

262 
›s
->
co_gíl
->
o_«me
 = ops->
co_msgty≥s
[0].
mt_«me
;

263 
›s
->
co_gíl
->
o_id
 = ops->
co_msgty≥s
[0].
mt_id
;

264 
›s
->
co_msg_∑r£r
 = 
gíl_msg_∑r£r
;

266 i‡((
îr
 = 
	`gíl_ªgi°î_Ámûy
(
›s
->
co_gíl
)) < 0)

267 
îrout
;

269 
îr
 = 
	`∆_ˇche_mngt_ªgi°î
(
›s
);

270 
îrout
:

271  
îr
;

272 
	}
}

278 
	$gíl_uƒegi°î
(
∆_ˇche_›s
 *
›s
)

280 i‡(!
›s
)

283 
	`∆_ˇche_mngt_uƒegi°î
(
›s
);

285 
	`gíl_uƒegi°î_Ámûy
(
›s
->
co_gíl
);

286 
	}
}

291 
	$__gíl_›s_ªsﬁve
(
∆_ˇche
 *
˘æ
, 
gíl_›s
 *
›s
)

293 
gíl_Ámûy
 *
Ámûy
;

295 
Ámûy
 = 
	`gíl_˘æ_£¨ch_by_«me
(
˘æ
, 
›s
->
o_«me
);

296 i‡(
Ámûy
 !
NULL
) {

297 
›s
->
o_id
 = 
	`gíl_Ámûy_gë_id
(
Ámûy
);

299 i‡(
›s
->
o_ˇche_›s
)

300 
›s
->
o_ˇche_›s
->
co_msgty≥s
[0].
mt_id
 = ops->
o_id
;

302 
	`gíl_Ámûy_put
(
Ámûy
);

307  -
NLE_OBJ_NOTFOUND
;

308 
	}
}

310 
	$gíl_ªsﬁve_id
(
gíl_›s
 *
›s
)

312 
∆_sock
 *
sk
;

313 
îr
 = 0;

316 i‡(
›s
->
o_id
 !
GENL_ID_GENERATE
)

319 i‡(!
›s
->
o_«me
)

320  -
NLE_INVAL
;

322 i‡(!(
sk
 = 
	`∆_sockë_Æloc
()))

323  -
NLE_NOMEM
;

325 i‡((
îr
 = 
	`gíl_c⁄√˘
(
sk
)) < 0)

326 
îrout_‰ì
;

328 
îr
 = 
	`gíl_›s_ªsﬁve
(
sk
, 
›s
);

330 
îrout_‰ì
:

331 
	`∆_sockë_‰ì
(
sk
);

333  
îr
;

334 
	}
}

351 
	$gíl_›s_ªsﬁve
(
∆_sock
 *
sk
, 
gíl_›s
 *
›s
)

353 
∆_ˇche
 *
˘æ
;

354 
îr
;

356 i‡((
îr
 = 
	`gíl_˘æ_Æloc_ˇche
(
sk
, &
˘æ
)) < 0)

357 
îrout
;

359 
îr
 = 
	`__gíl_›s_ªsﬁve
(
˘æ
, 
›s
);

361 
	`∆_ˇche_‰ì
(
˘æ
);

362 
îrout
:

363  
îr
;

364 
	}
}

379 
	$gíl_mngt_ªsﬁve
(
∆_sock
 *
sk
)

381 
∆_ˇche
 *
˘æ
;

382 
gíl_›s
 *
›s
;

383 
îr
 = 0;

385 i‡((
îr
 = 
	`gíl_˘æ_Æloc_ˇche
(
sk
, &
˘æ
)) < 0)

386 
îrout
;

388 
	`∆_li°_f‹_óch_íåy
(
›s
, &
gíl_›s_li°
, 
o_li°
) {

389 
îr
 = 
	`__gíl_›s_ªsﬁve
(
˘æ
, 
›s
);

392 
	`∆_ˇche_‰ì
(
˘æ
);

393 
îrout
:

394  
îr
;

395 
	}
}

	@mylibnl/libnl-3.2.25/lib/handlers.c

28 
	~<√éök-¥iv©e/√éök.h
>

29 
	~<√éök/√éök.h
>

30 
	~<√éök/utûs.h
>

31 
	~<√éök/msg.h
>

32 
	~<√éök/h™dÀrs.h
>

34 
	$¥öt_hódî_c⁄ã¡
(
FILE
 *
ofd
, 
∆msghdr
 *
n
)

36 
Êags
[128];

37 
ty≥
[32];

39 
	`Ârötf
(
ofd
, "type=%sÜength=%u flags=<%s> sequence-nr=%uÖid=%u",

40 
	`∆_∆msgty≥2°r
(
n
->
∆msg_ty≥
, 
ty≥
, (type)),

41 
n
->
∆msg_Àn
, 
	`∆_∆msg_Êags2°r
“->
∆msg_Êags
, 
Êags
,

42 (
Êags
)), 
n
->
∆msg_£q
,Ç->
∆msg_pid
);

43 
	}
}

45 
	$∆_vÆid_h™dÀr_vîbo£
(
∆_msg
 *
msg
, *
¨g
)

47 
FILE
 *
ofd
 = 
¨g
 ?árg : 
°dout
;

49 
	`Ârötf
(
ofd
, "-- Warning: unhandled valid message: ");

50 
	`¥öt_hódî_c⁄ã¡
(
ofd
, 
	`∆msg_hdr
(
msg
));

51 
	`Ârötf
(
ofd
, "\n");

53  
NL_OK
;

54 
	}
}

56 
	$∆_övÆid_h™dÀr_vîbo£
(
∆_msg
 *
msg
, *
¨g
)

58 
FILE
 *
ofd
 = 
¨g
 ?árg : 
°dîr
;

60 
	`Ârötf
(
ofd
, "-- Error: Invalid message: ");

61 
	`¥öt_hódî_c⁄ã¡
(
ofd
, 
	`∆msg_hdr
(
msg
));

62 
	`Ârötf
(
ofd
, "\n");

64  
NL_STOP
;

65 
	}
}

67 
	$∆_ovîrun_h™dÀr_vîbo£
(
∆_msg
 *
msg
, *
¨g
)

69 
FILE
 *
ofd
 = 
¨g
 ?árg : 
°dîr
;

71 
	`Ârötf
(
ofd
, "-- Error: Netlink Overrun: ");

72 
	`¥öt_hódî_c⁄ã¡
(
ofd
, 
	`∆msg_hdr
(
msg
));

73 
	`Ârötf
(
ofd
, "\n");

75  
NL_STOP
;

76 
	}
}

78 
	$∆_îr‹_h™dÀr_vîbo£
(
sockaddr_∆
 *
who
,

79 
∆msgîr
 *
e
, *
¨g
)

81 
FILE
 *
ofd
 = 
¨g
 ?árg : 
°dîr
;

82 
buf
[256];

84 
	`Ârötf
(
ofd
, "-- ErrorÑeceived: %s\n-- Original message: ",

85 
	`°ªº‹_r
(-
e
->
îr‹
, 
buf
, (buf)));

86 
	`¥öt_hódî_c⁄ã¡
(
ofd
, &
e
->
msg
);

87 
	`Ârötf
(
ofd
, "\n");

89  -
	`∆_sy£º2∆îr
(
e
->
îr‹
);

90 
	}
}

92 
	$∆_vÆid_h™dÀr_debug
(
∆_msg
 *
msg
, *
¨g
)

94 
FILE
 *
ofd
 = 
¨g
 ?árg : 
°dîr
;

96 
	`Ârötf
(
ofd
, "-- Debug: Unhandled Valid message: ");

97 
	`¥öt_hódî_c⁄ã¡
(
ofd
, 
	`∆msg_hdr
(
msg
));

98 
	`Ârötf
(
ofd
, "\n");

100  
NL_OK
;

101 
	}
}

103 
	$∆_föish_h™dÀr_debug
(
∆_msg
 *
msg
, *
¨g
)

105 
FILE
 *
ofd
 = 
¨g
 ?árg : 
°dîr
;

107 
	`Ârötf
(
ofd
, "-- Debug: End of multipart message block: ");

108 
	`¥öt_hódî_c⁄ã¡
(
ofd
, 
	`∆msg_hdr
(
msg
));

109 
	`Ârötf
(
ofd
, "\n");

111  
NL_STOP
;

112 
	}
}

114 
	$∆_msg_ö_h™dÀr_debug
(
∆_msg
 *
msg
, *
¨g
)

116 
FILE
 *
ofd
 = 
¨g
 ?árg : 
°dîr
;

118 
	`Ârötf
(
ofd
, "-- Debug: Received Message:\n");

119 
	`∆_msg_dump
(
msg
, 
ofd
);

121  
NL_OK
;

122 
	}
}

124 
	$∆_msg_out_h™dÀr_debug
(
∆_msg
 *
msg
, *
¨g
)

126 
FILE
 *
ofd
 = 
¨g
 ?árg : 
°dîr
;

128 
	`Ârötf
(
ofd
, "-- Debug: Sent Message:\n");

129 
	`∆_msg_dump
(
msg
, 
ofd
);

131  
NL_OK
;

132 
	}
}

134 
	$∆_skù≥d_h™dÀr_debug
(
∆_msg
 *
msg
, *
¨g
)

136 
FILE
 *
ofd
 = 
¨g
 ?árg : 
°dîr
;

138 
	`Ârötf
(
ofd
, "-- Debug: Skipped message: ");

139 
	`¥öt_hódî_c⁄ã¡
(
ofd
, 
	`∆msg_hdr
(
msg
));

140 
	`Ârötf
(
ofd
, "\n");

142  
NL_SKIP
;

143 
	}
}

145 
	$∆_ack_h™dÀr_debug
(
∆_msg
 *
msg
, *
¨g
)

147 
FILE
 *
ofd
 = 
¨g
 ?árg : 
°dîr
;

149 
	`Ârötf
(
ofd
, "-- Debug: ACK: ");

150 
	`¥öt_hódî_c⁄ã¡
(
ofd
, 
	`∆msg_hdr
(
msg
));

151 
	`Ârötf
(
ofd
, "\n");

153  
NL_STOP
;

154 
	}
}

156 
∆_ªcvmsg_msg_cb_t
 
	gcb_def
[
NL_CB_TYPE_MAX
+1][
NL_CB_KIND_MAX
+1] = {

157 [
NL_CB_VALID
] = {

158 [
NL_CB_VERBOSE
] = 
∆_vÆid_h™dÀr_vîbo£
,

159 [
NL_CB_DEBUG
] = 
∆_vÆid_h™dÀr_debug
,

161 [
NL_CB_FINISH
] = {

162 [
NL_CB_DEBUG
] = 
∆_föish_h™dÀr_debug
,

164 [
NL_CB_INVALID
] = {

165 [
NL_CB_VERBOSE
] = 
∆_övÆid_h™dÀr_vîbo£
,

166 [
NL_CB_DEBUG
] = 
∆_övÆid_h™dÀr_vîbo£
,

168 [
NL_CB_MSG_IN
] = {

169 [
NL_CB_DEBUG
] = 
∆_msg_ö_h™dÀr_debug
,

171 [
NL_CB_MSG_OUT
] = {

172 [
NL_CB_DEBUG
] = 
∆_msg_out_h™dÀr_debug
,

174 [
NL_CB_OVERRUN
] = {

175 [
NL_CB_VERBOSE
] = 
∆_ovîrun_h™dÀr_vîbo£
,

176 [
NL_CB_DEBUG
] = 
∆_ovîrun_h™dÀr_vîbo£
,

178 [
NL_CB_SKIPPED
] = {

179 [
NL_CB_DEBUG
] = 
∆_skù≥d_h™dÀr_debug
,

181 [
NL_CB_ACK
] = {

182 [
NL_CB_DEBUG
] = 
∆_ack_h™dÀr_debug
,

186 
∆_ªcvmsg_îr_cb_t
 
	gcb_îr_def
[
NL_CB_KIND_MAX
+1] = {

187 [
NL_CB_VERBOSE
] = 
∆_îr‹_h™dÀr_vîbo£
,

188 [
NL_CB_DEBUG
] = 
∆_îr‹_h™dÀr_vîbo£
,

201 
∆_cb
 *
	$∆_cb_Æloc
(
∆_cb_köd
 
köd
)

203 
i
;

204 
∆_cb
 *
cb
;

206 i‡(
köd
 < 0 || köd > 
NL_CB_KIND_MAX
)

207  
NULL
;

209 
cb
 = 
	`ˇŒoc
(1, (*cb));

210 i‡(!
cb
)

211  
NULL
;

213 
cb
->
cb_ªf˙t
 = 1;

214 
cb
->
cb_a˘ive
 = 
NL_CB_TYPE_MAX
 + 1;

216 
i
 = 0; i <
NL_CB_TYPE_MAX
; i++)

217 
	`∆_cb_£t
(
cb
, 
i
, 
köd
, 
NULL
, NULL);

219 
	`∆_cb_îr
(
cb
, 
köd
, 
NULL
, NULL);

221  
cb
;

222 
	}
}

230 
∆_cb
 *
	$∆_cb_˛⁄e
(
∆_cb
 *
‹ig
)

232 
∆_cb
 *
cb
;

234 
cb
 = 
	`∆_cb_Æloc
(
NL_CB_DEFAULT
);

235 i‡(!
cb
)

236  
NULL
;

238 
	`mem˝y
(
cb
, 
‹ig
, (*orig));

239 
cb
->
cb_ªf˙t
 = 1;

241  
cb
;

242 
	}
}

244 
∆_cb
 *
	$∆_cb_gë
(
∆_cb
 *
cb
)

246 
cb
->
cb_ªf˙t
++;

248  
cb
;

249 
	}
}

251 
	$∆_cb_put
(
∆_cb
 *
cb
)

253 i‡(!
cb
)

256 
cb
->
cb_ªf˙t
--;

258 i‡(
cb
->
cb_ªf˙t
 < 0)

259 
	`BUG
();

261 i‡(
cb
->
cb_ªf˙t
 <= 0)

262 
	`‰ì
(
cb
);

263 
	}
}

271 
∆_cb_ty≥
 
	$∆_cb_a˘ive_ty≥
(
∆_cb
 *
cb
)

273  
cb
->
cb_a˘ive
;

274 
	}
}

293 
	$∆_cb_£t
(
∆_cb
 *
cb
, 
∆_cb_ty≥
 
ty≥
, 
∆_cb_köd
 
köd
,

294 
∆_ªcvmsg_msg_cb_t
 
func
, *
¨g
)

296 i‡(
ty≥
 < 0 ||Åy≥ > 
NL_CB_TYPE_MAX
)

297  -
NLE_RANGE
;

299 i‡(
köd
 < 0 || köd > 
NL_CB_KIND_MAX
)

300  -
NLE_RANGE
;

302 i‡(
köd
 =
NL_CB_CUSTOM
) {

303 
cb
->
cb_£t
[
ty≥
] = 
func
;

304 
cb
->
cb_¨gs
[
ty≥
] = 
¨g
;

306 
cb
->
cb_£t
[
ty≥
] = 
cb_def
[ty≥][
köd
];

307 
cb
->
cb_¨gs
[
ty≥
] = 
¨g
;

311 
	}
}

322 
	$∆_cb_£t_Æl
(
∆_cb
 *
cb
, 
∆_cb_köd
 
köd
,

323 
∆_ªcvmsg_msg_cb_t
 
func
, *
¨g
)

325 
i
, 
îr
;

327 
i
 = 0; i <
NL_CB_TYPE_MAX
; i++) {

328 
îr
 = 
	`∆_cb_£t
(
cb
, 
i
, 
köd
, 
func
, 
¨g
);

329 i‡(
îr
 < 0)

330  
îr
;

334 
	}
}

343 
	$∆_cb_îr
(
∆_cb
 *
cb
, 
∆_cb_köd
 
köd
,

344 
∆_ªcvmsg_îr_cb_t
 
func
, *
¨g
)

346 i‡(
köd
 < 0 || köd > 
NL_CB_KIND_MAX
)

347  -
NLE_RANGE
;

349 i‡(
köd
 =
NL_CB_CUSTOM
) {

350 
cb
->
cb_îr
 = 
func
;

351 
cb
->
cb_îr_¨g
 = 
¨g
;

353 
cb
->
cb_îr
 = 
cb_îr_def
[
köd
];

354 
cb
->
cb_îr_¨g
 = 
¨g
;

358 
	}
}

372 
∆_cb_ovîwrôe_ªcvmsgs
(
∆_cb
 *
cb
,

373 (*
func
)(
∆_sock
 *, 
∆_cb
 *))

375 
cb
->
cb_ªcvmsgs_ow
 = 
func
;

376 
	}
}

383 
∆_cb_ovîwrôe_ªcv
(
∆_cb
 *
cb
,

384 (*
func
)(
∆_sock
 *, 
sockaddr_∆
 *,

385 **, 
u¸ed
 **))

387 
cb
->
cb_ªcv_ow
 = 
func
;

388 
	}
}

395 
∆_cb_ovîwrôe_£nd
(
∆_cb
 *
cb
,

396 (*
func
)(
∆_sock
 *, 
∆_msg
 *))

398 
cb
->
cb_£nd_ow
 = 
func
;

399 
	}
}

	@mylibnl/libnl-3.2.25/lib/hash.c

41 
	~<√éök/hash.h
>

43 #i‡
HAVE_LITTLE_ENDIAN


44 
	#HASH_LITTLE_ENDIAN
 1

	)

45 
	#HASH_BIG_ENDIAN
 0

	)

46 #ñi‡
HAVE_BIG_ENDIAN


47 
	#HASH_LITTLE_ENDIAN
 0

	)

48 
	#HASH_BIG_ENDIAN
 1

	)

50 #îr‹ 
Unknown
 
ídün


53 
	#hashsize
(
n
Ë((
uöt32_t
)1<<“))

	)

54 
	#hashmask
(
n
Ë(
	`hashsize
“)-1)

	)

55 
	#rŸ
(
x
,
k
Ë(((x)<<(k)Ë| ((x)>>(32-(k))))

	)

101 
	#mix
(
a
,
b
,
c
) \

103 
a
 -
c
;á ^
	`rŸ
(c, 4); c +
b
; \

104 
b
 -
a
; b ^
	`rŸ
◊, 6);á +
c
; \

105 
c
 -
b
; c ^
	`rŸ
(b, 8); b +
a
; \

106 
a
 -
c
;á ^
	`rŸ
(c,16); c +
b
; \

107 
b
 -
a
; b ^
	`rŸ
◊,19);á +
c
; \

108 
c
 -
b
; c ^
	`rŸ
(b, 4); b +
a
; \

109 }

	)

136 
	#föÆ
(
a
,
b
,
c
) \

138 
c
 ^
b
; c -
	`rŸ
(b,14); \

139 
a
 ^
c
;á -
	`rŸ
(c,11); \

140 
b
 ^
a
; b -
	`rŸ
(a,25); \

141 
c
 ^
b
; c -
	`rŸ
(b,16); \

142 
a
 ^
c
;á -
	`rŸ
(c,4); \

143 
b
 ^
a
; b -
	`rŸ
(a,14); \

144 
c
 ^
b
; c -
	`rŸ
(b,24); \

145 }

	)

175 
uöt32_t
 
	$hashlôée
–c⁄° *
key
, 
size_t
 
Àngth
, 
uöt32_t
 *
vÆ2
 )

177 
uöt32_t
 
a
,
b
,
c
;

178 uni⁄ { c⁄° *
±r
; 
size_t
 
i
; } 
u
;

181 
a
 = 
b
 = 
c
 = 0xdódbì‡+ ((
uöt32_t
)
Àngth
Ë+ *
vÆ2
;

183 
u
.
±r
 = 
key
;

184 i‡(
HASH_LITTLE_ENDIAN
 && ((
u
.
i
 & 0x3) == 0)) {

185 c⁄° 
uöt32_t
 *
k
 = (c⁄° uöt32_à*)
key
;

186 c⁄° 
uöt8_t
 *
k8
;

189 
Àngth
 > 12)

191 
a
 +
k
[0];

192 
b
 +
k
[1];

193 
c
 +
k
[2];

194 
	`mix
(
a
,
b
,
c
);

195 
Àngth
 -= 12;

196 
k
 += 3;

212 
Àngth
)

214 12: 
c
+=
k
[2]; 
b
+=k[1]; 
a
+=k[0]; ;

215 11: 
c
+=
k
[2]&0xffffff; 
b
+=k[1]; 
a
+=k[0]; ;

216 10: 
c
+=
k
[2]&0xffff; 
b
+=k[1]; 
a
+=k[0]; ;

217 9 : 
c
+=
k
[2]&0xff; 
b
+=k[1]; 
a
+=k[0]; ;

218 8 : 
b
+=
k
[1]; 
a
+=k[0]; ;

219 7 : 
b
+=
k
[1]&0xffffff; 
a
+=k[0]; ;

220 6 : 
b
+=
k
[1]&0xffff; 
a
+=k[0]; ;

221 5 : 
b
+=
k
[1]&0xff; 
a
+=k[0]; ;

222 4 : 
a
+=
k
[0]; ;

223 3 : 
a
+=
k
[0]&0xffffff; ;

224 2 : 
a
+=
k
[0]&0xffff; ;

225 1 : 
a
+=
k
[0]&0xff; ;

226 0 :  
c
;

231 
k8
 = (c⁄° 
uöt8_t
 *)
k
;

232 
Àngth
)

234 12: 
c
+=
k
[2]; 
b
+=k[1]; 
a
+=k[0]; ;

235 11: 
c
+=((
uöt32_t
)
k8
[10])<<16;

236 10: 
c
+=((
uöt32_t
)
k8
[9])<<8;

237 9 : 
c
+=
k8
[8];

238 8 : 
b
+=
k
[1]; 
a
+=k[0]; ;

239 7 : 
b
+=((
uöt32_t
)
k8
[6])<<16;

240 6 : 
b
+=((
uöt32_t
)
k8
[5])<<8;

241 5 : 
b
+=
k8
[4];

242 4 : 
a
+=
k
[0]; ;

243 3 : 
a
+=((
uöt32_t
)
k8
[2])<<16;

244 2 : 
a
+=((
uöt32_t
)
k8
[1])<<8;

245 1 : 
a
+=
k8
[0]; ;

246 0 :  
c
;

251 } i‡(
HASH_LITTLE_ENDIAN
 && ((
u
.
i
 & 0x1) == 0)) {

252 c⁄° 
uöt16_t
 *
k
 = (c⁄° uöt16_à*)
key
;

253 c⁄° 
uöt8_t
 *
k8
;

256 
Àngth
 > 12)

258 
a
 +
k
[0] + (((
uöt32_t
)k[1])<<16);

259 
b
 +
k
[2] + (((
uöt32_t
)k[3])<<16);

260 
c
 +
k
[4] + (((
uöt32_t
)k[5])<<16);

261 
	`mix
(
a
,
b
,
c
);

262 
Àngth
 -= 12;

263 
k
 += 6;

267 
k8
 = (c⁄° 
uöt8_t
 *)
k
;

268 
Àngth
)

270 12: 
c
+=
k
[4]+(((
uöt32_t
)k[5])<<16);

271 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

272 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

274 11: 
c
+=((
uöt32_t
)
k8
[10])<<16;

275 10: 
c
+=
k
[4];

276 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

277 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

279 9 : 
c
+=
k8
[8];

280 8 : 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

281 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

283 7 : 
b
+=((
uöt32_t
)
k8
[6])<<16;

284 6 : 
b
+=
k
[2];

285 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

287 5 : 
b
+=
k8
[4];

288 4 : 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

290 3 : 
a
+=((
uöt32_t
)
k8
[2])<<16;

291 2 : 
a
+=
k
[0];

293 1 : 
a
+=
k8
[0];

295 0 :  
c
;

299 c⁄° 
uöt8_t
 *
k
 = (c⁄° uöt8_à*)
key
;

302 
Àngth
 > 12)

304 
a
 +
k
[0];

305 
a
 +((
uöt32_t
)
k
[1])<<8;

306 
a
 +((
uöt32_t
)
k
[2])<<16;

307 
a
 +((
uöt32_t
)
k
[3])<<24;

308 
b
 +
k
[4];

309 
b
 +((
uöt32_t
)
k
[5])<<8;

310 
b
 +((
uöt32_t
)
k
[6])<<16;

311 
b
 +((
uöt32_t
)
k
[7])<<24;

312 
c
 +
k
[8];

313 
c
 +((
uöt32_t
)
k
[9])<<8;

314 
c
 +((
uöt32_t
)
k
[10])<<16;

315 
c
 +((
uöt32_t
)
k
[11])<<24;

316 
	`mix
(
a
,
b
,
c
);

317 
Àngth
 -= 12;

318 
k
 += 12;

322 
Àngth
)

324 12: 
c
+=((
uöt32_t
)
k
[11])<<24;

325 11: 
c
+=((
uöt32_t
)
k
[10])<<16;

326 10: 
c
+=((
uöt32_t
)
k
[9])<<8;

327 9 : 
c
+=
k
[8];

328 8 : 
b
+=((
uöt32_t
)
k
[7])<<24;

329 7 : 
b
+=((
uöt32_t
)
k
[6])<<16;

330 6 : 
b
+=((
uöt32_t
)
k
[5])<<8;

331 5 : 
b
+=
k
[4];

332 4 : 
a
+=((
uöt32_t
)
k
[3])<<24;

333 3 : 
a
+=((
uöt32_t
)
k
[2])<<16;

334 2 : 
a
+=((
uöt32_t
)
k
[1])<<8;

335 1 : 
a
+=
k
[0];

337 0 :  
c
;

341 
	`föÆ
(
a
,
b
,
c
);

342 *
vÆ2
 = 
b
;

343  
c
;

344 
	}
}

352 
uöt32_t
 
	$hashbig
–c⁄° *
key
, 
size_t
 
Àngth
, 
uöt32_t
 *
vÆ2
)

354 
uöt32_t
 
a
,
b
,
c
;

355 uni⁄ { c⁄° *
±r
; 
size_t
 
i
; } 
u
;

358 
a
 = 
b
 = 
c
 = 0xdódbì‡+ ((
uöt32_t
)
Àngth
Ë+ *
vÆ2
;

360 
u
.
±r
 = 
key
;

361 i‡(
HASH_BIG_ENDIAN
 && ((
u
.
i
 & 0x3) == 0)) {

362 c⁄° 
uöt32_t
 *
k
 = (c⁄° uöt32_à*)
key
;

363 c⁄° 
uöt8_t
 *
k8
;

366 
Àngth
 > 12)

368 
a
 +
k
[0];

369 
b
 +
k
[1];

370 
c
 +
k
[2];

371 
	`mix
(
a
,
b
,
c
);

372 
Àngth
 -= 12;

373 
k
 += 3;

389 
Àngth
)

391 12: 
c
+=
k
[2]; 
b
+=k[1]; 
a
+=k[0]; ;

392 11: 
c
+=
k
[2]&0xffffff00; 
b
+=k[1]; 
a
+=k[0]; ;

393 10: 
c
+=
k
[2]&0xffff0000; 
b
+=k[1]; 
a
+=k[0]; ;

394 9 : 
c
+=
k
[2]&0xff000000; 
b
+=k[1]; 
a
+=k[0]; ;

395 8 : 
b
+=
k
[1]; 
a
+=k[0]; ;

396 7 : 
b
+=
k
[1]&0xffffff00; 
a
+=k[0]; ;

397 6 : 
b
+=
k
[1]&0xffff0000; 
a
+=k[0]; ;

398 5 : 
b
+=
k
[1]&0xff000000; 
a
+=k[0]; ;

399 4 : 
a
+=
k
[0]; ;

400 3 : 
a
+=
k
[0]&0xffffff00; ;

401 2 : 
a
+=
k
[0]&0xffff0000; ;

402 1 : 
a
+=
k
[0]&0xff000000; ;

403 0 :  
c
;

408 
k8
 = (c⁄° 
uöt8_t
 *)
k
;

409 
Àngth
)

411 12: 
c
+=
k
[2]; 
b
+=k[1]; 
a
+=k[0]; ;

412 11: 
c
+=((
uöt32_t
)
k8
[10])<<8;

413 10: 
c
+=((
uöt32_t
)
k8
[9])<<16;

414 9 : 
c
+=((
uöt32_t
)
k8
[8])<<24;

415 8 : 
b
+=
k
[1]; 
a
+=k[0]; ;

416 7 : 
b
+=((
uöt32_t
)
k8
[6])<<8;

417 6 : 
b
+=((
uöt32_t
)
k8
[5])<<16;

418 5 : 
b
+=((
uöt32_t
)
k8
[4])<<24;

419 4 : 
a
+=
k
[0]; ;

420 3 : 
a
+=((
uöt32_t
)
k8
[2])<<8;

421 2 : 
a
+=((
uöt32_t
)
k8
[1])<<16;

422 1 : 
a
+=((
uöt32_t
)
k8
[0])<<24; ;

423 0 :  
c
;

429 c⁄° 
uöt8_t
 *
k
 = (c⁄° uöt8_à*)
key
;

432 
Àngth
 > 12)

434 
a
 +((
uöt32_t
)
k
[0])<<24;

435 
a
 +((
uöt32_t
)
k
[1])<<16;

436 
a
 +((
uöt32_t
)
k
[2])<<8;

437 
a
 +((
uöt32_t
)
k
[3]);

438 
b
 +((
uöt32_t
)
k
[4])<<24;

439 
b
 +((
uöt32_t
)
k
[5])<<16;

440 
b
 +((
uöt32_t
)
k
[6])<<8;

441 
b
 +((
uöt32_t
)
k
[7]);

442 
c
 +((
uöt32_t
)
k
[8])<<24;

443 
c
 +((
uöt32_t
)
k
[9])<<16;

444 
c
 +((
uöt32_t
)
k
[10])<<8;

445 
c
 +((
uöt32_t
)
k
[11]);

446 
	`mix
(
a
,
b
,
c
);

447 
Àngth
 -= 12;

448 
k
 += 12;

452 
Àngth
)

454 12: 
c
+=
k
[11];

455 11: 
c
+=((
uöt32_t
)
k
[10])<<8;

456 10: 
c
+=((
uöt32_t
)
k
[9])<<16;

457 9 : 
c
+=((
uöt32_t
)
k
[8])<<24;

458 8 : 
b
+=
k
[7];

459 7 : 
b
+=((
uöt32_t
)
k
[6])<<8;

460 6 : 
b
+=((
uöt32_t
)
k
[5])<<16;

461 5 : 
b
+=((
uöt32_t
)
k
[4])<<24;

462 4 : 
a
+=
k
[3];

463 3 : 
a
+=((
uöt32_t
)
k
[2])<<8;

464 2 : 
a
+=((
uöt32_t
)
k
[1])<<16;

465 1 : 
a
+=((
uöt32_t
)
k
[0])<<24;

467 0 :  
c
;

471 
	`föÆ
(
a
,
b
,
c
);

472 *
vÆ2
 = 
b
;

473  
c
;

474 
	}
}

476 
uöt32_t
 
	$∆_hash_™y
(c⁄° *
key
, 
size_t
 
Àngth
, 
uöt32_t
 
ba£
)

478 i‡(
HASH_BIG_ENDIAN
)

479  
	`hashbig
(
key
, 
Àngth
, &
ba£
);

481  
	`hashlôée
(
key
, 
Àngth
, &
ba£
);

482 
	}
}

	@mylibnl/libnl-3.2.25/lib/hashtable.c

11 
	~<°rög.h
>

12 
	~<√éök-¥iv©e/√éök.h
>

13 
	~<√éök/obje˘.h
>

14 
	~<√éök/hash.h
>

15 
	~<√éök/hashèbÀ.h
>

29 
∆_hash_èbÀ_t
 *
	$∆_hash_èbÀ_Æloc
(
size
)

31 
∆_hash_èbÀ_t
 *
ht
;

33 
ht
 = 
	`ˇŒoc
(1,  (*ht));

34 i‡(!
ht
)

35 
îrout
;

37 
ht
->
nodes
 = 
	`ˇŒoc
(
size
,  (*ht->nodes));

38 i‡(!
ht
->
nodes
) {

39 
	`‰ì
(
ht
);

40 
îrout
;

43 
ht
->
size
 = size;

45  
ht
;

46 
îrout
:

47  
NULL
;

48 
	}
}

56 
	$∆_hash_èbÀ_‰ì
(
∆_hash_èbÀ_t
 *
ht
)

58 
i
;

60 
i
 = 0; i < 
ht
->
size
; i++) {

61 
∆_hash_node_t
 *
node
 = 
ht
->
nodes
[
i
];

62 
∆_hash_node_t
 *
ßved_node
;

64 
node
) {

65 
ßved_node
 = 
node
;

66 
node
 =Çode->
√xt
;

67 
	`∆_obje˘_put
(
ßved_node
->
obj
);

68 
	`‰ì
(
ßved_node
);

72 
	`‰ì
(
ht
->
nodes
);

73 
	`‰ì
(
ht
);

74 
	}
}

86 
∆_obje˘
* 
	$∆_hash_èbÀ_lookup
(
∆_hash_èbÀ_t
 *
ht
,

87 
∆_obje˘
 *
obj
)

89 
∆_hash_node_t
 *
node
;

90 
uöt32_t
 
key_hash
;

92 
	`∆_obje˘_keygí
(
obj
, &
key_hash
, 
ht
->
size
);

93 
node
 = 
ht
->
nodes
[
key_hash
];

95 
node
) {

96 i‡(
	`∆_obje˘_idítiˇl
(
node
->
obj
, obj))

97  
node
->
obj
;

98 
node
 =Çode->
√xt
;

101  
NULL
;

102 
	}
}

117 
	$∆_hash_èbÀ_add
(
∆_hash_èbÀ_t
 *
ht
, 
∆_obje˘
 *
obj
)

119 
∆_hash_node_t
 *
node
;

120 
uöt32_t
 
key_hash
;

122 
	`∆_obje˘_keygí
(
obj
, &
key_hash
, 
ht
->
size
);

123 
node
 = 
ht
->
nodes
[
key_hash
];

125 
node
) {

126 i‡(
	`∆_obje˘_idítiˇl
(
node
->
obj
, obj)) {

127 
	`NL_DBG
(2, "Warning: AddÅo hashtable found duplicate...\n");

128  -
NLE_EXIST
;

130 
node
 =Çode->
√xt
;

133 
	`NL_DBG
 (5, "adding cacheÉntry of obj %p inÅable %p, with hash 0x%x\n",

134 
obj
, 
ht
, 
key_hash
);

136 
node
 = 
	`mÆloc
((
∆_hash_node_t
));

137 i‡(!
node
)

138  -
NLE_NOMEM
;

139 
	`∆_obje˘_gë
(
obj
);

140 
node
->
obj
 = obj;

141 
node
->
key
 = 
key_hash
;

142 
node
->
key_size
 = (
uöt32_t
);

143 
node
->
√xt
 = 
ht
->
nodes
[
key_hash
];

144 
ht
->
nodes
[
key_hash
] = 
node
;

147 
	}
}

161 
	$∆_hash_èbÀ_dñ
(
∆_hash_èbÀ_t
 *
ht
, 
∆_obje˘
 *
obj
)

163 
∆_hash_node_t
 *
node
, *
¥ev
;

164 
uöt32_t
 
key_hash
;

166 
	`∆_obje˘_keygí
(
obj
, &
key_hash
, 
ht
->
size
);

167 
¥ev
 = 
node
 = 
ht
->
nodes
[
key_hash
];

169 
node
) {

170 i‡(
	`∆_obje˘_idítiˇl
(
node
->
obj
, obj)) {

171 
	`∆_obje˘_put
(
obj
);

173 
	`NL_DBG
 (5, "deleting cacheÉntry of obj %p inÅable %p, with"

174 " hash 0x%x\n", 
obj
, 
ht
, 
key_hash
);

176 i‡(
node
 =
ht
->
nodes
[
key_hash
])

177 
ht
->
nodes
[
key_hash
] = 
node
->
√xt
;

179 
¥ev
->
√xt
 = 
node
->next;

181 
	`‰ì
(
node
);

185 
¥ev
 = 
node
;

186 
node
 =Çode->
√xt
;

189  -
NLE_OBJ_NOTFOUND
;

190 
	}
}

192 
uöt32_t
 
	$∆_hash
(*
k
, 
size_t
 
Àngth
, 
uöt32_t
 
öôvÆ
)

194 (
	`__∆_hash
(
k
, 
Àngth
, 
öôvÆ
));

195 
	}
}

	@mylibnl/libnl-3.2.25/lib/idiag/idiag.c

18 
	~<√éök-¥iv©e/√éök.h
>

19 
	~<√éök/√éök.h
>

20 
	~<√éök/ˇche.h
>

21 
	~<√éök/idüg/idüg∆.h
>

22 
	~<löux/öë_düg.h
>

40 
	$idüg∆_c⁄√˘
(
∆_sock
 *
sk
)

42  
	`∆_c⁄√˘
(
sk
, 
NETLINK_INET_DIAG
);

43 
	}
}

62 
	$idüg∆_£nd_sim∂e
(
∆_sock
 *
sk
, 
Êags
, 
uöt8_t
 
Ámûy
,

63 
uöt16_t
 
°©es
, uöt16_à
ext
)

65 
öë_düg_ªq
 
ªq
;

66 
	`mem£t
(&
ªq
, 0, (req));

68 
Êags
 |
NLM_F_ROOT
;

70 
ªq
.
idüg_Ámûy
 = 
Ámûy
;

71 
ªq
.
idüg_°©es
 = 
°©es
;

72 
ªq
.
idüg_ext
 = 
ext
;

74  
	`∆_£nd_sim∂e
(
sk
, 
TCPDIAG_GETSOCK
, 
Êags
, &
ªq
, (req));

75 
	}
}

84 c⁄° 
å™s_tbl
 
	gidüg_°©es
[] = {

85 
__ADD
(
IDIAG_SS_UNKNOWN
, 
unknown
)

86 
__ADD
(
IDIAG_SS_ESTABLISHED
, 
e°ablished
)

87 
__ADD
(
IDIAG_SS_SYN_SENT
, 
syn_£¡
)

88 
__ADD
(
IDIAG_SS_SYN_RECV
, 
syn_ªcv
)

89 
__ADD
(
IDIAG_SS_FIN_WAIT1
, 
fö_waô
)

90 
__ADD
(
IDIAG_SS_FIN_WAIT2
, 
fö_waô2
)

91 
__ADD
(
IDIAG_SS_TIME_WAIT
, 
time_waô
)

92 
__ADD
(
IDIAG_SS_CLOSE
, 
˛o£
)

93 
__ADD
(
IDIAG_SS_CLOSE_WAIT
, 
˛o£_waô
)

94 
__ADD
(
IDIAG_SS_LAST_ACK
, 
œ°_ack
)

95 
__ADD
(
IDIAG_SS_LISTEN
, 
li°í
)

96 
__ADD
(
IDIAG_SS_CLOSING
, 
˛osög
)

97 
__ADD
(
IDIAG_SS_MAX
, 
max
)

98 { ((1<<
IDIAG_SS_MAX
)-1), "all" }

110 * 
	$idüg∆_°©e2°r
(
°©e
, *
buf
, 
size_t
 
Àn
)

112  
	`__ty≥2°r
(
°©e
, 
buf
, 
Àn
, 
idüg_°©es
,

113 
	`ARRAY_SIZE
(
idüg_°©es
));

114 
	}
}

123 
	$idüg∆_°r2°©e
(c⁄° *
«me
)

125  
	`__°r2ty≥
(
«me
, 
idüg_°©es
, 
	`ARRAY_SIZE
(idiag_states));

126 
	}
}

128 c⁄° 
å™s_tbl
 
	gidüg_timîs
[] = {

129 
__ADD
(
IDIAG_TIMER_OFF
, 
off
)

130 
__ADD
(
IDIAG_TIMER_ON
, 
⁄
)

131 
__ADD
(
IDIAG_TIMER_KEEPALIVE
, 
kì∑live
)

132 
__ADD
(
IDIAG_TIMER_TIMEWAIT
, 
timewaô
)

133 
__ADD
(
IDIAG_TIMER_PERSIST
, 
≥rsi°
)

134 
__ADD
(
IDIAG_TIMER_UNKNOWN
, 
unknown
)

145 * 
	$idüg∆_timî2°r
(
timî
, *
buf
, 
size_t
 
Àn
)

147  
	`__ty≥2°r
(
timî
, 
buf
, 
Àn
, 
idüg_timîs
,

148 
	`ARRAY_SIZE
(
idüg_timîs
));

149 
	}
}

157 
	$idüg∆_°r2timî
(c⁄° *
«me
)

159  
	`__°r2ty≥
(
«me
, 
idüg_timîs
, 
	`ARRAY_SIZE
(idiag_timers));

160 
	}
}

162 c⁄° 
å™s_tbl
 
	gidüg_©ås
[] = {

163 
__ADD
(
IDIAG_ATTR_NONE
, 
n⁄e
)

164 
__ADD
(
IDIAG_ATTR_MEMINFO
, 
memöfo
)

165 
__ADD
(
IDIAG_ATTR_INFO
, 
öfo
)

166 
__ADD
(
IDIAG_ATTR_VEGASINFO
, 
vegasöfo
)

167 
__ADD
(
IDIAG_ATTR_CONG
, 
c⁄ge°i⁄
)

168 
__ADD
(
IDIAG_ATTR_TOS
, 
tos
)

169 
__ADD
(
IDIAG_ATTR_TCLASS
, 
t˛ass
)

180 *
	$idüg∆_©ås2°r
(
©ås
, *
buf
, 
size_t
 
Àn
)

182  
	`__ty≥2°r
(
©ås
, 
buf
, 
Àn
, 
idüg_©ås
, 
	`ARRAY_SIZE
(idiag_attrs));

183 
	}
}

185 c⁄° 
å™s_tbl
 
	gidüg∆_t˝°©es
[] = {

186 
__ADD
(
TCP_CA_O≥n
, 
›í
)

187 
__ADD
(
TCP_CA_Dis‹dî
, 
dis‹dî
)

188 
__ADD
(
TCP_CA_CWR
, 
cwr
)

189 
__ADD
(
TCP_CA_Recovîy
, 
ªcovîy
)

190 
__ADD
(
TCP_CA_Loss
, 
loss
)

199 *
	$idüg∆_t˝°©e2°r
(
uöt8_t
 
°©e
, *
buf
, 
size_t
 
Àn
)

201  
	`__ty≥2°r
(
°©e
, 
buf
, 
Àn
, 
idüg∆_t˝°©es
,

202 
	`ARRAY_SIZE
(
idüg∆_t˝°©es
));

203 
	}
}

205 c⁄° 
å™s_tbl
 
	gidüg∆_t˝›t_©ås
[] = {

206 
__ADD
(
TCPI_OPT_TIMESTAMPS
, 
time°amps
)

207 
__ADD
(
TCPI_OPT_SACK
, 
sACK
)

208 
__ADD
(
TCPI_OPT_WSCALE
, 
wsˇÀ
)

209 
__ADD
(
TCPI_OPT_ECN
, 
e˙
)

221 *
	$idüg∆_t˝›ts2°r
(
uöt8_t
 
©ås
, *
buf
, 
size_t
 
Àn
)

223  
	`__Êags2°r
(
©ås
, 
buf
, 
Àn
, 
idüg∆_t˝›t_©ås
,

224 
	`ARRAY_SIZE
(
idüg∆_t˝›t_©ås
));

225 
	}
}

235 * 
	$idüg∆_shutdown2°r
(
uöt8_t
 
shutdown
, *
buf
, 
size_t
 
Àn
)

237 i‡(
shutdown
 == 0) {

238 
	`¢¥ötf
(
buf
, 
Àn
, " ");

239  
buf
;

240 } i‡(
shutdown
 == 1) {

241 
	`¢¥ötf
(
buf
, 
Àn
, "receive shutdown");

242  
buf
;

243 } i‡(
shutdown
 == 2) {

244 
	`¢¥ötf
(
buf
, 
Àn
, "send shutdown");

245  
buf
;

248  
NULL
;

249 
	}
}

251 c⁄° 
å™s_tbl
 
	gidüg_exts
[] = {

252 
__ADD
(
IDIAG_ATTR_NONE
, 
n⁄e
)

253 
__ADD
(
IDIAG_ATTR_MEMINFO
, 
memöfo
)

254 
__ADD
(
IDIAG_ATTR_INFO
, 
öfo
)

255 
__ADD
(
IDIAG_ATTR_VEGASINFO
, 
vegasöfo
)

256 
__ADD
(
IDIAG_ATTR_CONG
, 
c⁄ge°i⁄
)

257 
__ADD
(
IDIAG_ATTR_TOS
, 
tos
)

258 
__ADD
(
IDIAG_ATTR_TCLASS
, 
t˛ass
)

268 *
	$idüg∆_exts2°r
(
uöt8_t
 
©ås
, *
buf
, 
size_t
 
Àn
)

270  
	`__Êags2°r
(
©ås
, 
buf
, 
Àn
, 
idüg_exts
, 
	`ARRAY_SIZE
(idiag_exts));

271 
	}
}

	@mylibnl/libnl-3.2.25/lib/idiag/idiag_meminfo_obj.c

12 
	~<√éök-¥iv©e/√éök.h
>

13 
	~<√éök/idüg/memöfo.h
>

23 
idüg∆_memöfo
 *
	$idüg∆_memöfo_Æloc
()

25  (
idüg∆_memöfo
 *Ë
	`∆_obje˘_Æloc
(&
idüg∆_memöfo_obj_›s
);

26 
	}
}

28 
	$idüg∆_memöfo_gë
(
idüg∆_memöfo
 *
möfo
)

30 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
möfo
);

31 
	}
}

33 
	$idüg∆_memöfo_put
(
idüg∆_memöfo
 *
möfo
)

35 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
möfo
);

36 
	}
}

42 
uöt32_t
 
	$idüg∆_memöfo_gë_rmem
(c⁄° 
idüg∆_memöfo
 *
möfo
)

44  
möfo
->
idüg_rmem
;

45 
	}
}

47 
	$idüg∆_memöfo_£t_rmem
(
idüg∆_memöfo
 *
möfo
, 
uöt32_t
 
rmem
)

49 
möfo
->
idüg_rmem
 = 
rmem
;

50 
	}
}

52 
uöt32_t
 
	$idüg∆_memöfo_gë_wmem
(c⁄° 
idüg∆_memöfo
 *
möfo
)

54  
möfo
->
idüg_wmem
;

55 
	}
}

57 
	$idüg∆_memöfo_£t_wmem
(
idüg∆_memöfo
 *
möfo
, 
uöt32_t
 
wmem
)

59 
möfo
->
idüg_wmem
 = 
wmem
;

60 
	}
}

62 
uöt32_t
 
	$idüg∆_memöfo_gë_fmem
(c⁄° 
idüg∆_memöfo
 *
möfo
)

64  
möfo
->
idüg_fmem
;

65 
	}
}

67 
	$idüg∆_memöfo_£t_fmem
(
idüg∆_memöfo
 *
möfo
, 
uöt32_t
 
fmem
)

69 
möfo
->
idüg_fmem
 = 
fmem
;

70 
	}
}

72 
uöt32_t
 
	$idüg∆_memöfo_gë_tmem
(c⁄° 
idüg∆_memöfo
 *
möfo
)

74  
möfo
->
idüg_tmem
;

75 
	}
}

77 
	$idüg∆_memöfo_£t_tmem
(
idüg∆_memöfo
 *
möfo
, 
uöt32_t
 
tmem
)

79 
möfo
->
idüg_tmem
 = 
tmem
;

80 
	}
}

83 
	$idüg∆_memöfo_˛⁄e
(
∆_obje˘
 *
_d°
, ∆_obje˘ *
_§c
)

85 
idüg∆_memöfo
 *
d°
 = (idüg∆_memöfÿ*Ë
_d°
;

86 
idüg∆_memöfo
 *
§c
 = (idüg∆_memöfÿ*Ë
_§c
;

88 
	`mem˝y
(
d°
, 
§c
, (
idüg∆_memöfo
));

91 
	}
}

94 
∆_obje˘_›s
 
	gidüg∆_memöfo_obj_›s
 = {

95 .
oo_«me
 = "idiag/idiag_meminfo",

96 .
	goo_size
 = (
idüg∆_memöfo
),

97 .
	goo_˛⁄e
 = 
idüg∆_memöfo_˛⁄e
,

	@mylibnl/libnl-3.2.25/lib/idiag/idiag_msg_obj.c

12 
	~<√éök-¥iv©e/√éök.h
>

13 
	~<√éök/idüg/msg.h
>

14 
	~<√éök/idüg/memöfo.h
>

15 
	~<√éök/idüg/vegasöfo.h
>

16 
	~<löux/öë_düg.h
>

26 
idüg∆_msg
 *
	$idüg∆_msg_Æloc
()

28  (
idüg∆_msg
 *Ë
	`∆_obje˘_Æloc
(&
idüg∆_msg_obj_›s
);

29 
	}
}

31 
	$idüg∆_msg_gë
(
idüg∆_msg
 *
msg
)

33 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
msg
);

34 
	}
}

36 
	$idüg∆_msg_put
(
idüg∆_msg
 *
msg
)

38 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
msg
);

39 
	}
}

41 
∆_ˇche_›s
 
	gidüg∆_msg_›s
;

43 
	$idüg∆_msg_∑r£r
(
∆_ˇche_›s
 *
›s
, 
sockaddr_∆
 *
who
,

44 
∆msghdr
 *
∆h
, 
∆_∑r£r_∑øm
 *
µ
)

46 
idüg∆_msg
 *
msg
 = 
NULL
;

47 
îr
 = 0;

49 i‡((
îr
 = 
	`idüg∆_msg_∑r£
(
∆h
, &
msg
)) < 0)

50  
îr
;

52 
îr
 = 
µ
->
	`µ_cb
((
∆_obje˘
 *Ë
msg
,Öp);

53 
	`idüg∆_msg_put
(
msg
);

55  
îr
;

56 
	}
}

58 
	$idüg∆_ªque°_upd©e
(
∆_ˇche
 *
ˇche
, 
∆_sock
 *
sk
)

60 
Ámûy
 = 
ˇche
->
c_ürg1
;

61 
°©es
 = 
ˇche
->
c_ürg2
;

63  
	`idüg∆_£nd_sim∂e
(
sk
, 0, 
Ámûy
, 
°©es
, 
IDIAG_ATTR_ALL
);

64 
	}
}

66 
∆_ˇche_›s
 
	gidüg∆_msg_›s
 = {

67 .
co_«me
 = "idiag/idiag",

68 .
	gco_hdrsize
 = (
öë_düg_msg
),

69 .
	gco_msgty≥s
 = {

70 { 
IDIAG_TCPDIAG_GETSOCK
, 
NL_ACT_NEW
, "new" },

71 { 
IDIAG_DCCPDIAG_GETSOCK
, 
NL_ACT_NEW
, "new" },

72 
END_OF_MSGTYPES_LIST
,

74 .
	gco_¥Ÿocﬁ
 = 
NETLINK_INET_DIAG
,

75 .
	gco_ªque°_upd©e
 = 
idüg∆_ªque°_upd©e
,

76 .
	gco_msg_∑r£r
 = 
idüg∆_msg_∑r£r
,

77 .
	gco_obj_›s
 = &
idüg∆_msg_obj_›s
,

80 
__öô
 
	$idüg∆_öô
()

82 
	`∆_ˇche_mngt_ªgi°î
(&
idüg∆_msg_›s
);

83 
	}
}

85 
__exô
 
	$idüg∆_exô
()

87 
	`∆_ˇche_mngt_uƒegi°î
(&
idüg∆_msg_›s
);

88 
	}
}

106 
	$idüg∆_msg_Æloc_ˇche
(
∆_sock
 *
sk
, 
Ámûy
, 
°©es
,

107 
∆_ˇche
 **
ªsu…
)

109 
∆_ˇche
 *
ˇche
 = 
NULL
;

110 
îr
;

112 i‡(!(
ˇche
 = 
	`∆_ˇche_Æloc
(&
idüg∆_msg_›s
)))

113  -
NLE_NOMEM
;

115 
ˇche
->
c_ürg1
 = 
Ámûy
;

116 
ˇche
->
c_ürg2
 = 
°©es
;

118 i‡(
sk
 && (
îr
 = 
	`∆_ˇche_ªfûl
(sk, 
ˇche
)) < 0) {

119 
	`‰ì
(
ˇche
);

120  
îr
;

123 *
ªsu…
 = 
ˇche
;

125 
	}
}

134 
uöt8_t
 
	$idüg∆_msg_gë_Ámûy
(c⁄° 
idüg∆_msg
 *
msg
)

136  
msg
->
idüg_Ámûy
;

137 
	}
}

139 
	$idüg∆_msg_£t_Ámûy
(
idüg∆_msg
 *
msg
, 
uöt8_t
 
Ámûy
)

141 
msg
->
idüg_Ámûy
 = 
Ámûy
;

142 
	}
}

144 
uöt8_t
 
	$idüg∆_msg_gë_°©e
(c⁄° 
idüg∆_msg
 *
msg
)

146  
msg
->
idüg_°©e
;

147 
	}
}

149 
	$idüg∆_msg_£t_°©e
(
idüg∆_msg
 *
msg
, 
uöt8_t
 
°©e
)

151 
msg
->
idüg_°©e
 = 
°©e
;

152 
	}
}

154 
uöt8_t
 
	$idüg∆_msg_gë_timî
(c⁄° 
idüg∆_msg
 *
msg
)

156  
msg
->
idüg_timî
;

157 
	}
}

159 
	$idüg∆_msg_£t_timî
(
idüg∆_msg
 *
msg
, 
uöt8_t
 
timî
)

161 
msg
->
idüg_timî
 = 
timî
;

162 
	}
}

164 
uöt8_t
 
	$idüg∆_msg_gë_ªå™s
(c⁄° 
idüg∆_msg
 *
msg
)

166  
msg
->
idüg_ªå™s
;

167 
	}
}

169 
	$idüg∆_msg_£t_ªå™s
(
idüg∆_msg
 *
msg
, 
uöt8_t
 
ªå™s
)

171 
msg
->
idüg_ªå™s
 = 
ªå™s
;

172 
	}
}

174 
uöt16_t
 
	$idüg∆_msg_gë_•‹t
(
idüg∆_msg
 *
msg
)

176  
msg
->
idüg_•‹t
;

177 
	}
}

179 
	$idüg∆_msg_£t_•‹t
(
idüg∆_msg
 *
msg
, 
uöt16_t
 
p‹t
)

181 
msg
->
idüg_•‹t
 = 
p‹t
;

182 
	}
}

184 
uöt16_t
 
	$idüg∆_msg_gë_dp‹t
(
idüg∆_msg
 *
msg
)

186  
msg
->
idüg_dp‹t
;

187 
	}
}

189 
	$idüg∆_msg_£t_dp‹t
(
idüg∆_msg
 *
msg
, 
uöt16_t
 
p‹t
)

191 
msg
->
idüg_dp‹t
 = 
p‹t
;

192 
	}
}

194 
∆_addr
 *
	$idüg∆_msg_gë_§c
(c⁄° 
idüg∆_msg
 *
msg
)

196  
msg
->
idüg_§c
;

197 
	}
}

199 
	$idüg∆_msg_£t_§c
(
idüg∆_msg
 *
msg
, 
∆_addr
 *
addr
)

201 i‡(
msg
->
idüg_§c
)

202 
	`∆_addr_put
(
msg
->
idüg_§c
);

204 
	`∆_addr_gë
(
addr
);

205 
msg
->
idüg_§c
 = 
addr
;

208 
	}
}

210 
∆_addr
 *
	$idüg∆_msg_gë_d°
(c⁄° 
idüg∆_msg
 *
msg
)

212  
msg
->
idüg_d°
;

213 
	}
}

215 
	$idüg∆_msg_£t_d°
(
idüg∆_msg
 *
msg
, 
∆_addr
 *
addr
)

217 i‡(
msg
->
idüg_d°
)

218 
	`∆_addr_put
(
msg
->
idüg_d°
);

220 
	`∆_addr_gë
(
addr
);

221 
msg
->
idüg_d°
 = 
addr
;

224 
	}
}

226 
uöt32_t
 
	$idüg∆_msg_gë_ifödex
(c⁄° 
idüg∆_msg
 *
msg
)

228  
msg
->
idüg_ifödex
;

229 
	}
}

231 
	$idüg∆_msg_£t_ifödex
(
idüg∆_msg
 *
msg
, 
uöt32_t
 
ifödex
)

233 
msg
->
idüg_ifödex
 = 
ifödex
;

234 
	}
}

236 
uöt32_t
 
	$idüg∆_msg_gë_expúes
(c⁄° 
idüg∆_msg
 *
msg
)

238  
msg
->
idüg_expúes
;

239 
	}
}

241 
	$idüg∆_msg_£t_expúes
(
idüg∆_msg
 *
msg
, 
uöt32_t
 
expúes
)

243 
msg
->
idüg_expúes
 = 
expúes
;

244 
	}
}

246 
uöt32_t
 
	$idüg∆_msg_gë_rqueue
(c⁄° 
idüg∆_msg
 *
msg
)

248  
msg
->
idüg_rqueue
;

249 
	}
}

251 
	$idüg∆_msg_£t_rqueue
(
idüg∆_msg
 *
msg
, 
uöt32_t
 
rqueue
)

253 
msg
->
idüg_rqueue
 = 
rqueue
;

254 
	}
}

256 
uöt32_t
 
	$idüg∆_msg_gë_wqueue
(c⁄° 
idüg∆_msg
 *
msg
)

258  
msg
->
idüg_wqueue
;

259 
	}
}

261 
	$idüg∆_msg_£t_wqueue
(
idüg∆_msg
 *
msg
, 
uöt32_t
 
wqueue
)

263 
msg
->
idüg_wqueue
 = 
wqueue
;

264 
	}
}

266 
uöt32_t
 
	$idüg∆_msg_gë_uid
(c⁄° 
idüg∆_msg
 *
msg
)

268  
msg
->
idüg_uid
;

269 
	}
}

271 
	$idüg∆_msg_£t_uid
(
idüg∆_msg
 *
msg
, 
uöt32_t
 
uid
)

273 
msg
->
idüg_uid
 = 
uid
;

274 
	}
}

276 
uöt32_t
 
	$idüg∆_msg_gë_öode
(c⁄° 
idüg∆_msg
 *
msg
)

278  
msg
->
idüg_öode
;

279 
	}
}

281 
	$idüg∆_msg_£t_öode
(
idüg∆_msg
 *
msg
, 
uöt32_t
 
öode
)

283 
msg
->
idüg_öode
 = 
öode
;

284 
	}
}

286 
uöt8_t
 
	$idüg∆_msg_gë_tos
(c⁄° 
idüg∆_msg
 *
msg
)

288  
msg
->
idüg_tos
;

289 
	}
}

291 
	$idüg∆_msg_£t_tos
(
idüg∆_msg
 *
msg
, 
uöt8_t
 
tos
)

293 
msg
->
idüg_tos
 = 
tos
;

294 
	}
}

296 
uöt8_t
 
	$idüg∆_msg_gë_t˛ass
(c⁄° 
idüg∆_msg
 *
msg
)

298  
msg
->
idüg_t˛ass
;

299 
	}
}

301 
	$idüg∆_msg_£t_t˛ass
(
idüg∆_msg
 *
msg
, 
uöt8_t
 
t˛ass
)

303 
msg
->
idüg_t˛ass
 = 
t˛ass
;

304 
	}
}

306 
uöt8_t
 
	$idüg∆_msg_gë_shutdown
(c⁄° 
idüg∆_msg
 *
msg
)

308  
msg
->
idüg_shutdown
;

309 
	}
}

311 
	$idüg∆_msg_£t_shutdown
(
idüg∆_msg
 *
msg
, 
uöt8_t
 
shutdown
)

313 
msg
->
idüg_shutdown
 = 
shutdown
;

314 
	}
}

316 *
	$idüg∆_msg_gë_c⁄g
(c⁄° 
idüg∆_msg
 *
msg
)

318  
msg
->
idüg_c⁄g
;

319 
	}
}

321 
	$idüg∆_msg_£t_c⁄g
(
idüg∆_msg
 *
msg
, *
c⁄g
)

323 
msg
->
idüg_c⁄g
 = 
	`°rdup
(
c⁄g
);

324 
	}
}

326 
idüg∆_memöfo
 *
	$idüg∆_msg_gë_memöfo
(c⁄° 
idüg∆_msg
 *
msg
)

328  
msg
->
idüg_memöfo
;

329 
	}
}

331 
	$idüg∆_msg_£t_memöfo
(
idüg∆_msg
 *
msg
, 
idüg∆_memöfo


332 *
möfo
)

334 i‡(
msg
->
idüg_memöfo
)

335 
	`idüg∆_memöfo_put
(
msg
->
idüg_memöfo
);

337 
	`idüg∆_memöfo_gë
(
möfo
);

338 
msg
->
idüg_memöfo
 = 
möfo
;

339 
	}
}

341 
idüg∆_vegasöfo
 *
	$idüg∆_msg_gë_vegasöfo
(c⁄° 
idüg∆_msg
 *
msg
)

343  
msg
->
idüg_vegasöfo
;

344 
	}
}

346 
	$idüg∆_msg_£t_vegasöfo
(
idüg∆_msg
 *
msg
, 
idüg∆_vegasöfo


347 *
vöfo
)

349 i‡(
msg
->
idüg_vegasöfo
)

350 
	`idüg∆_vegasöfo_put
(
msg
->
idüg_vegasöfo
);

352 
	`idüg∆_vegasöfo_gë
(
vöfo
);

353 
msg
->
idüg_vegasöfo
 = 
vöfo
;

354 
	}
}

356 
t˝_öfo
 
	$idüg∆_msg_gë_t˝öfo
(c⁄° 
idüg∆_msg
 *
msg
)

358  
msg
->
idüg_t˝öfo
;

359 
	}
}

361 
	$idüg∆_msg_£t_t˝öfo
(
idüg∆_msg
 *
msg
, 
t˝_öfo
 *
töfo
)

363 
	`mem˝y
(&
msg
->
idüg_t˝öfo
, 
töfo
, (
t˝_öfo
));

364 
	}
}

368 
	$idüg_msg_dump_löe
(
∆_obje˘
 *
a
, 
∆_dump_∑øms
 *
p
)

370 
idüg∆_msg
 *
msg
 = (idüg∆_msg *Ë
a
;

371 
buf
[64] = { 0 };

373 
	`∆_dump_löe
(
p
, "Ámûy: %†", 
	`∆_af2°r
(
msg
->
idüg_Ámûy
, 
buf
, (buf)));

374 
	`∆_dump
(
p
, "§c: %s:%d ", 
	`∆_addr2°r
(
msg
->
idüg_§c
, 
buf
, (buf)),

375 
	`¡ohs
(
msg
->
idüg_•‹t
));

376 
	`∆_dump
(
p
, "d°: %s:%d ", 
	`∆_addr2°r
(
msg
->
idüg_d°
, 
buf
, (buf)),

377 
	`¡ohs
(
msg
->
idüg_dp‹t
));

378 
	`∆_dump
(
p
, "iif: %d ", 
msg
->
idüg_ifödex
);

379 
	`∆_dump
(
p
, "\n");

380 
	}
}

382 
	$idüg_msg_dump_dëaûs
(
∆_obje˘
 *
a
, 
∆_dump_∑øms
 *
p
)

384 
idüg∆_msg
 *
msg
 = (idüg∆_msg *Ë
a
;

385 
buf
[64], 
buf2
[64];

387 
	`∆_dump
(
p
, "\nÁmûy: %s\n", 
	`∆_af2°r
(
msg
->
idüg_Ámûy
, 
buf
, (buf)));

388 
	`∆_dump
(
p
, "state: %s\n",

389 
	`idüg∆_°©e2°r
(
msg
->
idüg_°©e
, 
buf
, (buf)));

390 
	`∆_dump
(
p
, "timer (%s, %s,Ñetransmits: %d)\n",

391 
	`idüg∆_timî2°r
(
msg
->
idüg_timî
, 
buf
, (buf)),

392 
	`∆_m£c2°r
(
msg
->
idüg_expúes
, 
buf2
, (buf2)),

393 
msg
->
idüg_ªå™s
);

395 
	`∆_dump
(
p
, "sour˚: %s:%d\n", 
	`∆_addr2°r
(
msg
->
idüg_§c
, 
buf
, (buf)),

396 
	`¡ohs
(
msg
->
idüg_•‹t
));

397 
	`∆_dump
(
p
, "de°ö©i⁄: %s:%d\n", 
	`∆_addr2°r
(
msg
->
idüg_d°
, 
buf
, (buf)),

398 
	`¡ohs
(
msg
->
idüg_dp‹t
));

400 
	`∆_dump
(
p
, "ifödex: %d\n", 
msg
->
idüg_ifödex
);

401 
	`∆_dump
(
p
, "rqueue: %-6d wqueue: %-6d\n", 
msg
->
idüg_rqueue
, msg->
idüg_wqueue
);

402 
	`∆_dump
(
p
, "uid %d\n", 
msg
->
idüg_uid
);

403 
	`∆_dump
(
p
, "öodê%d\n", 
msg
->
idüg_öode
);

404 i‡(
msg
->
idüg_shutdown
) {

405 
	`∆_dump
(
p
, "socket shutdown: %s\n",

406 
	`idüg∆_shutdown2°r
(
msg
->
idüg_shutdown
,

407 
buf
, (buf)));

410 
	`∆_dump
(
p
, "tos: 0x%x\n", 
msg
->
idüg_tos
);

411 
	`∆_dump
(
p
, "åaffi¯˛ass: %d\n", 
msg
->
idüg_t˛ass
);

412 
	`∆_dump
(
p
, "c⁄ge°i⁄álg‹ôhm: %s\n", 
msg
->
idüg_c⁄g
);

413 
	}
}

415 
	$idüg_msg_dump_°©s
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
p
)

417 
idüg∆_msg
 *
msg
 = (idüg∆_msg *Ë
obj
;

418 
buf
[64];

420 
	`idüg_msg_dump_dëaûs
(
obj
, 
p
);

422 
	`∆_dump
(
p
, "tcp info: [\n");

423 
	`∆_dump
(
p
, "\tsocket state: %s\n",

424 
	`idüg∆_°©e2°r
(
msg
->
idüg_t˝öfo
.
t˝i_°©e
,

425 
buf
, (buf)));

426 
	`∆_dump
(
p
, "\ttcp state: %s\n",

427 
	`idüg∆_t˝°©e2°r
(
msg
->
idüg_t˝öfo
.
t˝i_ˇ_°©e
,

428 
buf
, (buf)));

429 
	`∆_dump
(
p
, "\tretransmits: %d\n",

430 
msg
->
idüg_t˝öfo
.
t˝i_ªå™smôs
);

431 
	`∆_dump
(
p
, "\tprobes: %d\n",

432 
msg
->
idüg_t˝öfo
.
t˝i_¥obes
);

433 
	`∆_dump
(
p
, "\tbackoff: %d\n",

434 
msg
->
idüg_t˝öfo
.
t˝i_backoff
);

435 
	`∆_dump
(
p
, "\toptions: %s\n",

436 
	`idüg∆_t˝›ts2°r
(
msg
->
idüg_t˝öfo
.
t˝i_›ti⁄s
,

437 
buf
, (buf)));

438 
	`∆_dump
(
p
, "\t¢d_wsˇÀ: %d\n", 
msg
->
idüg_t˝öfo
.
t˝i_¢d_wsˇÀ
);

439 
	`∆_dump
(
p
, "\åcv_wsˇÀ: %d\n", 
msg
->
idüg_t˝öfo
.
t˝i_rcv_wsˇÀ
);

440 
	`∆_dump
(
p
, "\åto: %d\n", 
msg
->
idüg_t˝öfo
.
t˝i_πo
);

441 
	`∆_dump
(
p
, "\èto: %d\n", 
msg
->
idüg_t˝öfo
.
t˝i_©o
);

442 
	`∆_dump
(
p
, "\t¢d_mss: %s\n", 
	`∆_size2°r
(
msg
->
idüg_t˝öfo
.
t˝i_¢d_mss
,

443 
buf
, (buf)));

444 
	`∆_dump
(
p
, "\åcv_mss: %s\n", 
	`∆_size2°r
(
msg
->
idüg_t˝öfo
.
t˝i_rcv_mss
,

445 
buf
, (buf)));

446 
	`∆_dump
(
p
, "\tu«cked: %d\n", 
msg
->
idüg_t˝öfo
.
t˝i_u«cked
);

447 
	`∆_dump
(
p
, "\tßcked: %d\n", 
msg
->
idüg_t˝öfo
.
t˝i_ßcked
);

449 
	`∆_dump
(
p
, "\éo°: %d\n", 
msg
->
idüg_t˝öfo
.
t˝i_lo°
);

450 
	`∆_dump
(
p
, "\tretransmit segments: %d\n",

451 
msg
->
idüg_t˝öfo
.
t˝i_ªå™s
);

452 
	`∆_dump
(
p
, "\tfackets: %d\n",

453 
msg
->
idüg_t˝öfo
.
t˝i_Áckës
);

454 
	`∆_dump
(
p
, "\tlast data sent: %s\n",

455 
	`∆_m£c2°r
(
msg
->
idüg_t˝öfo
.
t˝i_œ°_d©a_£¡
, 
buf
,

456 (
buf
)));

457 
	`∆_dump
(
p
, "\tlastáck sent: %s\n",

458 
	`∆_m£c2°r
(
msg
->
idüg_t˝öfo
.
t˝i_œ°_ack_£¡
, 
buf
, (buf)));

459 
	`∆_dump
(
p
, "\tlast dataÑecv: %s\n",

460 
	`∆_m£c2°r
(
msg
->
idüg_t˝öfo
.
t˝i_œ°_d©a_ªcv
, 
buf
,

461 (
buf
)));

462 
	`∆_dump
(
p
, "\tlastáckÑecv: %s\n",

463 
	`∆_m£c2°r
(
msg
->
idüg_t˝öfo
.
t˝i_œ°_ack_ªcv
, 
buf
,

464 (
buf
)));

465 
	`∆_dump
(
p
, "\tpath mtu: %s\n",

466 
	`∆_size2°r
(
msg
->
idüg_t˝öfo
.
t˝i_pmtu
, 
buf
,

467 (
buf
)));

468 
	`∆_dump
(
p
, "\trcv ssÅhreshold: %d\n",

469 
msg
->
idüg_t˝öfo
.
t˝i_rcv_s°hªsh
);

470 
	`∆_dump
(
p
, "\tsmoothedÑoundÅripÅime: %d\n",

471 
msg
->
idüg_t˝öfo
.
t˝i_πt
);

472 
	`∆_dump
(
p
, "\troundÅripÅime variation: %d\n",

473 
msg
->
idüg_t˝öfo
.
t˝i_πtv¨
);

474 
	`∆_dump
(
p
, "\tsnd ssÅhreshold: %s\n",

475 
	`∆_size2°r
(
msg
->
idüg_t˝öfo
.
t˝i_¢d_s°hªsh
, 
buf
,

476 (
buf
)));

477 
	`∆_dump
(
p
, "\tsend congestion window: %d\n",

478 
msg
->
idüg_t˝öfo
.
t˝i_¢d_cwnd
);

479 
	`∆_dump
(
p
, "\tadvertised mss: %s\n",

480 
	`∆_size2°r
(
msg
->
idüg_t˝öfo
.
t˝i_advmss
, 
buf
,

481 (
buf
)));

482 
	`∆_dump
(
p
, "\treordering: %d\n",

483 
msg
->
idüg_t˝öfo
.
t˝i_ª‹dîög
);

484 
	`∆_dump
(
p
, "\trcvÑroundÅripÅime: %d\n",

485 
msg
->
idüg_t˝öfo
.
t˝i_rcv_πt
);

486 
	`∆_dump
(
p
, "\treceive queue space: %s\n",

487 
	`∆_size2°r
(
msg
->
idüg_t˝öfo
.
t˝i_rcv_•a˚
, 
buf
,

488 (
buf
)));

489 
	`∆_dump
(
p
, "\ttotalÑetransmits: %d\n",

490 
msg
->
idüg_t˝öfo
.
t˝i_tŸÆ_ªå™s
);

491 
	`∆_dump
(
p
, "]\n");

493 i‡(
msg
->
idüg_memöfo
) {

494 
	`∆_dump
(
p
, "meminfo: [\n");

495 
	`∆_dump
(
p
, "\trmem: %s\n",

496 
	`∆_size2°r
(
msg
->
idüg_memöfo
->
idüg_rmem
,

497 
buf
,

498 (
buf
)));

499 
	`∆_dump
(
p
, "\twmem: %s\n",

500 
	`∆_size2°r
(
msg
->
idüg_memöfo
->
idüg_wmem
,

501 
buf
,

502 (
buf
)));

503 
	`∆_dump
(
p
, "\tfmem: %s\n",

504 
	`∆_size2°r
(
msg
->
idüg_memöfo
->
idüg_fmem
,

505 
buf
,

506 (
buf
)));

507 
	`∆_dump
(
p
, "\ttmem: %s\n",

508 
	`∆_size2°r
(
msg
->
idüg_memöfo
->
idüg_tmem
,

509 
buf
,

510 (
buf
)));

511 
	`∆_dump
(
p
, "]\n");

514 i‡(
msg
->
idüg_vegasöfo
) {

515 
	`∆_dump
(
p
, "vegasinfo: [\n");

516 
	`∆_dump
(
p
, "\tvegasÉnabled: %d\n",

517 
msg
->
idüg_vegasöfo
->
t˝v_íabÀd
);

518 i‡(
msg
->
idüg_vegasöfo
->
t˝v_íabÀd
) {

519 
	`∆_dump
(
p
, "\trtt cnt: %d",

520 
msg
->
idüg_vegasöfo
->
t˝v_πt˙t
);

521 
	`∆_dump
(
p
, "\trtt (propagation delay): %d",

522 
msg
->
idüg_vegasöfo
->
t˝v_πt
);

523 
	`∆_dump
(
p
, "\tminÑtt: %d",

524 
msg
->
idüg_vegasöfo
->
t˝v_möπt
);

526 
	`∆_dump
(
p
, "]\n");

529 
	`∆_dump
(
p
, "skmeminfo: [\n");

530 
	`∆_dump
(
p
, "\trmemálloc: %d\n",

531 
msg
->
idüg_skmemöfo
[
IDIAG_SK_MEMINFO_RMEM_ALLOC
]);

532 
	`∆_dump
(
p
, "\trcv buf: %s\n",

533 
	`∆_size2°r
(
msg
->
idüg_skmemöfo
[
IDIAG_SK_MEMINFO_RCVBUF
],

534 
buf
, (buf)));

535 
	`∆_dump
(
p
, "\twmemálloc: %d\n",

536 
msg
->
idüg_skmemöfo
[
IDIAG_SK_MEMINFO_WMEM_ALLOC
]);

537 
	`∆_dump
(
p
, "\tsnd buf: %s\n",

538 
	`∆_size2°r
(
msg
->
idüg_skmemöfo
[
IDIAG_SK_MEMINFO_SNDBUF
],

539 
buf
, (buf)));

540 
	`∆_dump
(
p
, "\tfwdálloc: %d\n",

541 
msg
->
idüg_skmemöfo
[
IDIAG_SK_MEMINFO_FWD_ALLOC
]);

542 
	`∆_dump
(
p
, "\twmem queued: %s\n",

543 
	`∆_size2°r
(
msg
->
idüg_skmemöfo
[
IDIAG_SK_MEMINFO_WMEM_QUEUED
],

544 
buf
, (buf)));

545 
	`∆_dump
(
p
, "\topt mem: %d\n",

546 
msg
->
idüg_skmemöfo
[
IDIAG_SK_MEMINFO_OPTMEM
]);

547 
	`∆_dump
(
p
, "\tbacklog: %d\n",

548 
msg
->
idüg_skmemöfo
[
IDIAG_SK_MEMINFO_BACKLOG
]);

549 
	`∆_dump
(
p
, "]\n\n");

550 
	}
}

552 
	$idüg∆_msg_‰ì
(
∆_obje˘
 *
a
)

554 
idüg∆_msg
 *
msg
 = (idüg∆_msg *Ë
a
;

555 i‡(
a
 =
NULL
)

558 
	`‰ì
(
msg
->
idüg_c⁄g
);

559 
	`∆_addr_put
(
msg
->
idüg_§c
);

560 
	`∆_addr_put
(
msg
->
idüg_d°
);

561 
	`idüg∆_memöfo_put
(
msg
->
idüg_memöfo
);

562 
	`idüg∆_vegasöfo_put
(
msg
->
idüg_vegasöfo
);

563 
	}
}

565 
	$idüg∆_msg_˛⁄e
(
∆_obje˘
 *
_d°
, ∆_obje˘ *
_§c
)

567 
idüg∆_msg
 *
d°
 = (idüg∆_msg *Ë
_d°
;

568 
idüg∆_msg
 *
§c
 = (idüg∆_msg *Ë
_§c
;

570 i‡(
§c
->
idüg_§c
)

571 i‡(!(
d°
->
idüg_§c
 = 
	`∆_addr_˛⁄e
(
§c
->idiag_src)))

572  -
NLE_NOMEM
;

574 i‡(
§c
->
idüg_d°
)

575 i‡(!(
d°
->
idüg_d°
 = 
	`∆_addr_˛⁄e
(
§c
->idiag_dst)))

576  -
NLE_NOMEM
;

579 
	}
}

581 
∆a_pﬁicy
 
	gext_pﬁicy
[
IDIAG_ATTR_MAX
] = {

582 [
IDIAG_ATTR_MEMINFO
] = { .
möÀn
 = (
öë_düg_memöfo
) },

583 [
IDIAG_ATTR_INFO
] = { .
möÀn
 = (
t˝_öfo
) },

584 [
IDIAG_ATTR_VEGASINFO
] = { .
möÀn
 = (
t˝vegas_öfo
) },

585 [
IDIAG_ATTR_CONG
] = { .
ty≥
 = 
NLA_STRING
 },

586 [
IDIAG_ATTR_TOS
] = { .
ty≥
 = 
NLA_U8
 },

587 [
IDIAG_ATTR_TCLASS
] = { .
ty≥
 = 
NLA_U8
 },

588 [
IDIAG_ATTR_SKMEMINFO
] = { .
möÀn
 = ((
uöt32_t
Ë* 
IDIAG_SK_MEMINFO_VARS
) },

589 [
IDIAG_ATTR_SHUTDOWN
] = { .
ty≥
 = 
NLA_U8
 },

592 
	$idüg∆_msg_∑r£
(
∆msghdr
 *
∆h
, 
idüg∆_msg
 **
ªsu…
)

594 
idüg∆_msg
 *
msg
 = 
NULL
;

595 
öë_düg_msg
 *
øw_msg
 = 
NULL
;

596 
∆_addr
 *
§c
 = 
NULL
, *
d°
 = NULL;

597 
∆©å
 *
tb
[
IDIAG_ATTR_MAX
];

598 
îr
 = 0;

600 
msg
 = 
	`idüg∆_msg_Æloc
();

601 i‡(!
msg
)

602 
îrout_nomem
;

604 
îr
 = 
	`∆msg_∑r£
(
∆h
, (
öë_düg_msg
), 
tb
, 
IDIAG_ATTR_MAX
,

605 
ext_pﬁicy
);

606 i‡(
îr
 < 0)

607 
îrout
;

609 
øw_msg
 = 
	`∆msg_d©a
(
∆h
);

610 
msg
->
idüg_Ámûy
 = 
øw_msg
->idiag_family;

611 
msg
->
idüg_°©e
 = 
øw_msg
->idiag_state;

612 
msg
->
idüg_timî
 = 
øw_msg
->idiag_timer;

613 
msg
->
idüg_ªå™s
 = 
øw_msg
->idiag_retrans;

614 
msg
->
idüg_expúes
 = 
øw_msg
->idiag_expires;

615 
msg
->
idüg_rqueue
 = 
øw_msg
->idiag_rqueue;

616 
msg
->
idüg_wqueue
 = 
øw_msg
->idiag_wqueue;

617 
msg
->
idüg_uid
 = 
øw_msg
->idiag_uid;

618 
msg
->
idüg_öode
 = 
øw_msg
->idiag_inode;

619 
msg
->
idüg_•‹t
 = 
øw_msg
->
id
.idiag_sport;

620 
msg
->
idüg_dp‹t
 = 
øw_msg
->
id
.idiag_dport;

621 
msg
->
idüg_ifödex
 = 
øw_msg
->
id
.
idüg_if
;

623 
d°
 = 
	`∆_addr_buûd
(
øw_msg
->
idüg_Ámûy
,Ñaw_msg->
id
.
idüg_d°
,

624 (
øw_msg
->
id
.
idüg_d°
));

625 i‡(!
d°
)

626 
îrout_nomem
;

628 
îr
 = 
	`idüg∆_msg_£t_d°
(
msg
, 
d°
);

629 i‡(
îr
 < 0)

630 
îrout
;

632 
	`∆_addr_put
(
d°
);

634 
§c
 = 
	`∆_addr_buûd
(
øw_msg
->
idüg_Ámûy
,Ñaw_msg->
id
.
idüg_§c
,

635 (
øw_msg
->
id
.
idüg_§c
));

636 i‡(!
§c
)

637 
îrout_nomem
;

639 
îr
 = 
	`idüg∆_msg_£t_§c
(
msg
, 
§c
);

640 i‡(
îr
 < 0)

641 
îrout
;

643 
	`∆_addr_put
(
§c
);

645 i‡(
tb
[
IDIAG_ATTR_TOS
])

646 
msg
->
idüg_tos
 = 
	`∆a_gë_u8
(
tb
[
IDIAG_ATTR_TOS
]);

648 i‡(
tb
[
IDIAG_ATTR_TCLASS
])

649 
msg
->
idüg_t˛ass
 = 
	`∆a_gë_u8
(
tb
[
IDIAG_ATTR_TCLASS
]);

651 i‡(
tb
[
IDIAG_ATTR_SHUTDOWN
])

652 
msg
->
idüg_shutdown
 = 
	`∆a_gë_u8
(
tb
[
IDIAG_ATTR_SHUTDOWN
]);

654 i‡(
tb
[
IDIAG_ATTR_CONG
])

655 
msg
->
idüg_c⁄g
 = 
	`∆a_°rdup
(
tb
[
IDIAG_ATTR_CONG
]);

657 i‡(
tb
[
IDIAG_ATTR_INFO
])

658 
	`∆a_mem˝y
(&
msg
->
idüg_t˝öfo
, 
tb
[
IDIAG_ATTR_INFO
],

659 (
msg
->
idüg_t˝öfo
));

661 i‡(
tb
[
IDIAG_ATTR_MEMINFO
]) {

662 
idüg∆_memöfo
 *
möfo
 = 
	`idüg∆_memöfo_Æloc
();

663 
öë_düg_memöfo
 *
øw_möfo
 = 
NULL
;

665 i‡(!
möfo
)

666 
îrout_nomem
;

668 
øw_möfo
 = (
öë_düg_memöfo
 *)

669 
	`∆a_d©a
(
tb
[
IDIAG_ATTR_MEMINFO
]);

671 
	`idüg∆_memöfo_£t_rmem
(
möfo
, 
øw_möfo
->
idüg_rmem
);

672 
	`idüg∆_memöfo_£t_wmem
(
möfo
, 
øw_möfo
->
idüg_wmem
);

673 
	`idüg∆_memöfo_£t_fmem
(
möfo
, 
øw_möfo
->
idüg_fmem
);

674 
	`idüg∆_memöfo_£t_tmem
(
möfo
, 
øw_möfo
->
idüg_tmem
);

676 
msg
->
idüg_memöfo
 = 
möfo
;

679 i‡(
tb
[
IDIAG_ATTR_VEGASINFO
]) {

680 
idüg∆_vegasöfo
 *
vöfo
 = 
	`idüg∆_vegasöfo_Æloc
();

681 
t˝vegas_öfo
 *
øw_vöfo
 = 
NULL
;

683 i‡(!
vöfo
)

684 
îrout_nomem
;

686 
øw_vöfo
 = (
t˝vegas_öfo
 *)

687 
	`∆a_d©a
(
tb
[
IDIAG_ATTR_VEGASINFO
]);

689 
	`idüg∆_vegasöfo_£t_íabÀd
(
vöfo
, 
øw_vöfo
->
t˝v_íabÀd
);

690 
	`idüg∆_vegasöfo_£t_πt˙t
(
vöfo
, 
øw_vöfo
->
t˝v_πt˙t
);

691 
	`idüg∆_vegasöfo_£t_πt
(
vöfo
, 
øw_vöfo
->
t˝v_πt
);

692 
	`idüg∆_vegasöfo_£t_möπt
(
vöfo
, 
øw_vöfo
->
t˝v_möπt
);

694 
msg
->
idüg_vegasöfo
 = 
vöfo
;

697 i‡(
tb
[
IDIAG_ATTR_SKMEMINFO
])

698 
	`∆a_mem˝y
(&
msg
->
idüg_skmemöfo
, 
tb
[
IDIAG_ATTR_SKMEMINFO
],

699 (
msg
->
idüg_skmemöfo
));

701 *
ªsu…
 = 
msg
;

704 
îrout
:

705 
	`idüg∆_msg_put
(
msg
);

706  
îr
;

708 
îrout_nomem
:

709 
îr
 = -
NLE_NOMEM
;

710 
îrout
;

711 
	}
}

714 
∆_obje˘_›s
 
	gidüg∆_msg_obj_›s
 = {

715 .
oo_«me
 = "idiag/idiag_msg",

716 .
	goo_size
 = (
idüg∆_msg
),

717 .
	goo_‰ì_d©a
 = 
idüg∆_msg_‰ì
,

718 .
	goo_˛⁄e
 = 
idüg∆_msg_˛⁄e
,

719 .
	goo_dump
 = {

720 [
NL_DUMP_LINE
] = 
idüg_msg_dump_löe
,

721 [
NL_DUMP_DETAILS
] = 
idüg_msg_dump_dëaûs
,

722 [
NL_DUMP_STATS
] = 
idüg_msg_dump_°©s
,

724 .
	goo_©ås2°r
 = 
idüg∆_©ås2°r
,

725 .
	goo_id_©ås
 = (
IDIAG_ATTR_INFO
)

	@mylibnl/libnl-3.2.25/lib/idiag/idiag_req_obj.c

12 
	~<√éök-¥iv©e/√éök.h
>

13 
	~<√éök/idüg/ªq.h
>

14 
	~<löux/öë_düg.h
>

24 
idüg∆_ªq
 *
	$idüg∆_ªq_Æloc
()

26  (
idüg∆_ªq
 *Ë
	`∆_obje˘_Æloc
(&
idüg∆_ªq_obj_›s
);

27 
	}
}

29 
	$idüg∆_ªq_gë
(
idüg∆_ªq
 *
ªq
)

31 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
ªq
);

32 
	}
}

34 
	$idüg∆_ªq_put
(
idüg∆_ªq
 *
ªq
)

36 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
ªq
);

37 
	}
}

44 
uöt8_t
 
	$idüg∆_ªq_gë_Ámûy
(c⁄° 
idüg∆_ªq
 *
ªq
)

46  
ªq
->
idüg_Ámûy
;

47 
	}
}

49 
	$idüg∆_ªq_£t_Ámûy
(
idüg∆_ªq
 *
ªq
, 
uöt8_t
 
Ámûy
)

51 
ªq
->
idüg_Ámûy
 = 
Ámûy
;

52 
	}
}

54 
uöt8_t
 
	$idüg∆_ªq_gë_ext
(c⁄° 
idüg∆_ªq
 *
ªq
)

56  
ªq
->
idüg_ext
;

57 
	}
}

59 
	$idüg∆_ªq_£t_ext
(
idüg∆_ªq
 *
ªq
, 
uöt8_t
 
ext
)

61 
ªq
->
idüg_ext
 = 
ext
;

62 
	}
}

64 
uöt32_t
 
	$idüg∆_ªq_gë_ifödex
(c⁄° 
idüg∆_ªq
 *
ªq
)

66  
ªq
->
idüg_ifödex
;

67 
	}
}

69 
	$idüg∆_ªq_£t_ifödex
(
idüg∆_ªq
 *
ªq
, 
uöt32_t
 
ifödex
)

71 
ªq
->
idüg_°©es
 = 
ifödex
;

72 
	}
}

74 
uöt32_t
 
	$idüg∆_ªq_gë_°©es
(c⁄° 
idüg∆_ªq
 *
ªq
)

76  
ªq
->
idüg_°©es
;

77 
	}
}

79 
	$idüg∆_ªq_£t_°©es
(
idüg∆_ªq
 *
ªq
, 
uöt32_t
 
°©es
)

81 
ªq
->
idüg_°©es
 = 
°©es
;

82 
	}
}

84 
uöt32_t
 
	$idüg∆_ªq_gë_dbs
(c⁄° 
idüg∆_ªq
 *
ªq
)

86  
ªq
->
idüg_dbs
;

87 
	}
}

89 
	$idüg∆_ªq_£t_dbs
(
idüg∆_ªq
 *
ªq
, 
uöt32_t
 
dbs
)

91 
ªq
->
idüg_dbs
 = 
dbs
;

92 
	}
}

94 
∆_addr
 *
	$idüg∆_ªq_gë_§c
(c⁄° 
idüg∆_ªq
 *
ªq
)

96  
ªq
->
idüg_§c
;

97 
	}
}

99 
	$idüg∆_ªq_£t_§c
(
idüg∆_ªq
 *
ªq
, 
∆_addr
 *
addr
)

101 i‡(
ªq
->
idüg_§c
)

102 
	`∆_addr_put
(
ªq
->
idüg_§c
);

104 
	`∆_addr_gë
(
addr
);

105 
ªq
->
idüg_§c
 = 
addr
;

108 
	}
}

110 
∆_addr
 *
	$idüg∆_ªq_gë_d°
(c⁄° 
idüg∆_ªq
 *
ªq
)

112  
ªq
->
idüg_d°
;

113 
	}
}

115 
	$idüg∆_ªq_£t_d°
(
idüg∆_ªq
 *
ªq
, 
∆_addr
 *
addr
)

117 i‡(
ªq
->
idüg_d°
)

118 
	`∆_addr_put
(
ªq
->
idüg_d°
);

120 
	`∆_addr_gë
(
addr
);

121 
ªq
->
idüg_d°
 = 
addr
;

124 
	}
}

128 
	$idüg_ªq_dump_löe
(
∆_obje˘
 *
a
, 
∆_dump_∑øms
 *
p
)

130 
idüg∆_ªq
 *
ªq
 = (idüg∆_ªq *Ë
a
;

131 
buf
[64] = { 0 };

133 
	`∆_dump_löe
(
p
, "%†", 
	`∆_af2°r
(
ªq
->
idüg_Ámûy
, 
buf
, (buf)));

134 
	`∆_dump
(
p
, "§¯%†", 
	`∆_addr2°r
(
ªq
->
idüg_§c
, 
buf
, (buf)));

135 
	`∆_dump
(
p
, "d° %†", 
	`∆_addr2°r
(
ªq
->
idüg_d°
, 
buf
, (buf)));

136 
	`∆_dump
(
p
, "ii‡%d ", 
ªq
->
idüg_ifödex
);

137 
	`∆_dump
(
p
, "\n");

138 
	}
}

140 
	$idüg_ªq_dump_dëaûs
(
∆_obje˘
 *
a
, 
∆_dump_∑øms
 *
p
)

142 
idüg∆_ªq
 *
ªq
 = (idüg∆_ªq *Ë
a
;

143 
buf
[64];

145 
	`∆_dump_löe
(
p
, " ");

146 
	`∆_dump
(
p
, "%†", 
	`∆_af2°r
(
ªq
->
idüg_Ámûy
, 
buf
, (buf)));

147 
	`∆_dump
(
p
, "exts %s ",

148 
	`idüg∆_exts2°r
(
ªq
->
idüg_ext
, 
buf
, (buf)));

149 
	`∆_dump
(
p
, "§¯%†", 
	`∆_addr2°r
(
ªq
->
idüg_§c
, 
buf
, (buf)));

150 
	`∆_dump
(
p
, "d° %†", 
	`∆_addr2°r
(
ªq
->
idüg_d°
, 
buf
, (buf)));

151 
	`∆_dump
(
p
, "ii‡%d ", 
ªq
->
idüg_ifödex
);

152 
	`∆_dump
(
p
, "°©e†%†", 
	`idüg∆_°©e2°r
(
ªq
->
idüg_°©es
, 
buf
,

153 (
buf
)));

154 
	`∆_dump
(
p
, "db†%d", 
ªq
->
idüg_dbs
);

155 
	`∆_dump
(
p
, "\n");

156 
	}
}

158 
	$idüg_ªq_dump_°©s
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
p
)

160 
	`idüg_ªq_dump_dëaûs
(
obj
, 
p
);

161 
	}
}

163 
	$idüg∆_ªq_‰ì
(
∆_obje˘
 *
a
)

165 
idüg∆_ªq
 *
ªq
 = (idüg∆_ªq *Ë
a
;

166 i‡(
a
 =
NULL
)

169 
	`∆_addr_put
(
ªq
->
idüg_§c
);

170 
	`∆_addr_put
(
ªq
->
idüg_d°
);

171 
	}
}

173 
	$idüg∆_ªq_˛⁄e
(
∆_obje˘
 *
_d°
, ∆_obje˘ *
_§c
)

175 
idüg∆_ªq
 *
d°
 = (idüg∆_ªq *Ë
_d°
;

176 
idüg∆_ªq
 *
§c
 = (idüg∆_ªq *Ë
_§c
;

178 i‡(
§c
->
idüg_§c
)

179 i‡(!(
d°
->
idüg_§c
 = 
	`∆_addr_˛⁄e
(
§c
->idiag_src)))

180  -
NLE_NOMEM
;

182 i‡(
§c
->
idüg_d°
)

183 i‡(!(
d°
->
idüg_d°
 = 
	`∆_addr_˛⁄e
(
§c
->idiag_dst)))

184  -
NLE_NOMEM
;

187 
	}
}

189 
	$idüg∆_ªq_∑r£
(
∆msghdr
 *
∆h
, 
idüg∆_ªq
 **
ªsu…
)

191 
idüg∆_ªq
 *
ªq
 = 
NULL
;

192 
öë_düg_ªq
 *
øw_ªq
 = 
NULL
;

193 
∆_addr
 *
§c
 = 
NULL
, *
d°
 = NULL;

194 
îr
 = 0;

196 
ªq
 = 
	`idüg∆_ªq_Æloc
();

197 i‡(!
ªq
)

198 
îrout_nomem
;

200 
øw_ªq
 = 
	`∆msg_d©a
(
∆h
);

201 
ªq
->
idüg_Ámûy
 = 
øw_ªq
->idiag_family;

202 
ªq
->
idüg_ext
 = 
øw_ªq
->idiag_ext;

203 
ªq
->
idüg_°©es
 = 
øw_ªq
->idiag_states;

204 
ªq
->
idüg_dbs
 = 
øw_ªq
->idiag_dbs;

205 
ªq
->
idüg_ifödex
 = 
øw_ªq
->
id
.
idüg_if
;

207 
d°
 = 
	`∆_addr_buûd
(
øw_ªq
->
idüg_Ámûy
,Ñaw_ªq->
id
.
idüg_d°
,

208 (
øw_ªq
->
id
.
idüg_d°
));

209 i‡(!
d°
)

210 
îrout_nomem
;

212 
îr
 = 
	`idüg∆_ªq_£t_d°
(
ªq
, 
d°
);

213 i‡(
îr
 < 0)

214 
îrout
;

216 
	`∆_addr_put
(
d°
);

218 
§c
 = 
	`∆_addr_buûd
(
øw_ªq
->
idüg_Ámûy
,Ñaw_ªq->
id
.
idüg_§c
,

219 (
øw_ªq
->
id
.
idüg_§c
));

220 i‡(!
§c
)

221 
îrout_nomem
;

223 
îr
 = 
	`idüg∆_ªq_£t_§c
(
ªq
, 
§c
);

224 i‡(
îr
 < 0)

225 
îrout
;

227 
	`∆_addr_put
(
§c
);

229 *
ªsu…
 = 
ªq
;

232 
îrout
:

233 
	`idüg∆_ªq_put
(
ªq
);

234  
îr
;

236 
îrout_nomem
:

237 
îr
 = -
NLE_NOMEM
;

238 
îrout
;

239 
	}
}

242 
∆_obje˘_›s
 
	gidüg∆_ªq_obj_›s
 = {

243 .
oo_«me
 = "idiag/idiag_req",

244 .
	goo_size
 = (
idüg∆_ªq
),

245 .
	goo_‰ì_d©a
 = 
idüg∆_ªq_‰ì
,

246 .
	goo_˛⁄e
 = 
idüg∆_ªq_˛⁄e
,

247 .
	goo_dump
 = {

248 [
NL_DUMP_LINE
] = 
idüg_ªq_dump_löe
,

249 [
NL_DUMP_DETAILS
] = 
idüg_ªq_dump_dëaûs
,

250 [
NL_DUMP_STATS
] = 
idüg_ªq_dump_°©s
,

	@mylibnl/libnl-3.2.25/lib/idiag/idiag_vegasinfo_obj.c

12 
	~<√éök-¥iv©e/√éök.h
>

13 
	~<√éök/idüg/vegasöfo.h
>

23 
idüg∆_vegasöfo
 *
	$idüg∆_vegasöfo_Æloc
()

25  (
idüg∆_vegasöfo
 *Ë
	`∆_obje˘_Æloc
(&
idüg∆_vegasöfo_obj_›s
);

26 
	}
}

28 
	$idüg∆_vegasöfo_gë
(
idüg∆_vegasöfo
 *
vöfo
)

30 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
vöfo
);

31 
	}
}

33 
	$idüg∆_vegasöfo_put
(
idüg∆_vegasöfo
 *
vöfo
)

35 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
vöfo
);

36 
	}
}

42 
uöt32_t
 
	$idüg∆_vegasöfo_gë_íabÀd
(c⁄° 
idüg∆_vegasöfo
 *
vöfo
)

44  
vöfo
->
t˝v_íabÀd
;

45 
	}
}

47 
	$idüg∆_vegasöfo_£t_íabÀd
(
idüg∆_vegasöfo
 *
vöfo
, 
uöt32_t


48 
íabÀd
)

50 
vöfo
->
t˝v_íabÀd
 = 
íabÀd
;

51 
	}
}

53 
uöt32_t
 
	$idüg∆_vegasöfo_gë_πt˙t
(c⁄° 
idüg∆_vegasöfo
 *
vöfo
)

55  
vöfo
->
t˝v_πt˙t
;

56 
	}
}

58 
	$idüg∆_vegasöfo_£t_πt˙t
(
idüg∆_vegasöfo
 *
vöfo
, 
uöt32_t


59 
πt˙t
)

61 
vöfo
->
t˝v_πt˙t
 = 
πt˙t
;

62 
	}
}

64 
uöt32_t
 
	$idüg∆_vegasöfo_gë_πt
(c⁄° 
idüg∆_vegasöfo
 *
vöfo
)

66  
vöfo
->
t˝v_πt
;

67 
	}
}

69 
	$idüg∆_vegasöfo_£t_πt
(
idüg∆_vegasöfo
 *
vöfo
, 
uöt32_t
 
πt
)

71 
vöfo
->
t˝v_πt
 = 
πt
;

72 
	}
}

74 
uöt32_t
 
	$idüg∆_vegasöfo_gë_möπt
(c⁄° 
idüg∆_vegasöfo
 *
vöfo
)

76  
vöfo
->
t˝v_möπt
;

77 
	}
}

79 
	$idüg∆_vegasöfo_£t_möπt
(
idüg∆_vegasöfo
 *
vöfo
, 
uöt32_t


80 
möπt
)

82 
vöfo
->
t˝v_möπt
 = 
möπt
;

83 
	}
}

86 
	$idüg∆_vegasöfo_˛⁄e
(
∆_obje˘
 *
_d°
,

87 
∆_obje˘
 *
_§c
)

89 
idüg∆_vegasöfo
 *
d°
 = (idüg∆_vegasöfÿ*Ë
_d°
;

90 
idüg∆_vegasöfo
 *
§c
 = (idüg∆_vegasöfÿ*Ë
_§c
;

92 
	`mem˝y
(
d°
, 
§c
, (
idüg∆_vegasöfo
));

95 
	}
}

98 
∆_obje˘_›s
 
	gidüg∆_vegasöfo_obj_›s
 = {

99 .
oo_«me
 = "idiag/idiag_vegasinfo",

100 .
	goo_size
 = (
idüg∆_vegasöfo
),

101 .
	goo_˛⁄e
 = 
idüg∆_vegasöfo_˛⁄e
,

	@mylibnl/libnl-3.2.25/lib/msg.c

29 
	~<√éök-¥iv©e/√éök.h
>

30 
	~<√éök/√éök.h
>

31 
	~<√éök/utûs.h
>

32 
	~<√éök/ˇche.h
>

33 
	~<√éök/©å.h
>

34 
	~<löux/sockë.h
>

36 
size_t
 
	gdeÁu…_msg_size
;

38 
__öô
 
	$öô_msg_size
()

40 
deÁu…_msg_size
 = 
	`gë∑gesize
();

41 
	}
}

54 
	$∆msg_size
(
∑ylﬂd
)

56  
NLMSG_HDRLEN
 + 
∑ylﬂd
;

57 
	}
}

59 
	$∆msg_msg_size
(
∑ylﬂd
)

61  
	`∆msg_size
(
∑ylﬂd
);

62 
	}
}

72 
	$∆msg_tŸÆ_size
(
∑ylﬂd
)

74  
	`NLMSG_ALIGN
(
	`∆msg_msg_size
(
∑ylﬂd
));

75 
	}
}

87 
	$∆msg_∑dÀn
(
∑ylﬂd
)

89  
	`∆msg_tŸÆ_size
(
∑ylﬂd
Ë- 
	`∆msg_msg_size
(payload);

90 
	}
}

105 *
	$∆msg_d©a
(c⁄° 
∆msghdr
 *
∆h
)

107  (*Ë
∆h
 + 
NLMSG_HDRLEN
;

108 
	}
}

110 *
	$∆msg_èû
(c⁄° 
∆msghdr
 *
∆h
)

112  (*Ë
∆h
 + 
	`NLMSG_ALIGN
“lh->
∆msg_Àn
);

113 
	}
}

121 
	$∆msg_d©Æí
(c⁄° 
∆msghdr
 *
∆h
)

123  
∆h
->
∆msg_Àn
 - 
NLMSG_HDRLEN
;

124 
	}
}

126 
	$∆msg_Àn
(c⁄° 
∆msghdr
 *
∆h
)

128  
	`∆msg_d©Æí
(
∆h
);

129 
	}
}

143 
∆©å
 *
	$∆msg_©åd©a
(c⁄° 
∆msghdr
 *
∆h
, 
hdæí
)

145 *
d©a
 = 
	`∆msg_d©a
(
∆h
);

146  (
∆©å
 *Ë(
d©a
 + 
	`NLMSG_ALIGN
(
hdæí
));

147 
	}
}

154 
	$∆msg_©åÀn
(c⁄° 
∆msghdr
 *
∆h
, 
hdæí
)

156  
	`max_t
(, 
	`∆msg_Àn
(
∆h
Ë- 
	`NLMSG_ALIGN
(
hdæí
), 0);

157 
	}
}

166 
	$∆msg_vÆid_hdr
(c⁄° 
∆msghdr
 *
∆h
, 
hdæí
)

168 i‡(
∆h
->
∆msg_Àn
 < 
	`∆msg_msg_size
(
hdæí
))

172 
	}
}

179 
	$∆msg_ok
(c⁄° 
∆msghdr
 *
∆h
, 
ªmaöög
)

181  (
ªmaöög
 >()(
∆msghdr
) &&

182 
∆h
->
∆msg_Àn
 >(
∆msghdr
) &&

183 
∆h
->
∆msg_Àn
 <
ªmaöög
);

184 
	}
}

194 
∆msghdr
 *
	$∆msg_√xt
(
∆msghdr
 *
∆h
, *
ªmaöög
)

196 
tŸÀn
 = 
	`NLMSG_ALIGN
(
∆h
->
∆msg_Àn
);

198 *
ªmaöög
 -
tŸÀn
;

200  (
∆msghdr
 *Ë((*Ë
∆h
 + 
tŸÀn
);

201 
	}
}

213 
	$∆msg_∑r£
(
∆msghdr
 *
∆h
, 
hdæí
, 
∆©å
 *
tb
[],

214 
maxty≥
, 
∆a_pﬁicy
 *
pﬁicy
)

216 i‡(!
	`∆msg_vÆid_hdr
(
∆h
, 
hdæí
))

217  -
NLE_MSG_TOOSHORT
;

219  
	`∆a_∑r£
(
tb
, 
maxty≥
, 
	`∆msg_©åd©a
(
∆h
, 
hdæí
),

220 
	`∆msg_©åÀn
(
∆h
, 
hdæí
), 
pﬁicy
);

221 
	}
}

231 
∆©å
 *
	$∆msg_föd_©å
(
∆msghdr
 *
∆h
, 
hdæí
, 
©åty≥
)

233  
	`∆a_föd
(
	`∆msg_©åd©a
(
∆h
, 
hdæí
),

234 
	`∆msg_©åÀn
(
∆h
, 
hdæí
), 
©åty≥
);

235 
	}
}

244 
	$∆msg_vÆid©e
(
∆msghdr
 *
∆h
, 
hdæí
, 
maxty≥
,

245 
∆a_pﬁicy
 *
pﬁicy
)

247 i‡(!
	`∆msg_vÆid_hdr
(
∆h
, 
hdæí
))

248  -
NLE_MSG_TOOSHORT
;

250  
	`∆a_vÆid©e
(
	`∆msg_©åd©a
(
∆h
, 
hdæí
),

251 
	`∆msg_©åÀn
(
∆h
, 
hdæí
), 
maxty≥
, 
pﬁicy
);

252 
	}
}

261 
∆_msg
 *
	$__∆msg_Æloc
(
size_t
 
Àn
)

263 
∆_msg
 *
nm
;

265 i‡(
Àn
 < (
∆msghdr
))

266 
Àn
 = (
∆msghdr
);

268 
nm
 = 
	`ˇŒoc
(1, (*nm));

269 i‡(!
nm
)

270 
îrout
;

272 
nm
->
nm_ªf˙t
 = 1;

274 
nm
->
nm_∆h
 = 
	`ˇŒoc
(1, 
Àn
);

275 i‡(!
nm
->
nm_∆h
)

276 
îrout
;

278 
nm
->
nm_¥Ÿocﬁ
 = -1;

279 
nm
->
nm_size
 = 
Àn
;

280 
nm
->
nm_∆h
->
∆msg_Àn
 = 
	`∆msg_tŸÆ_size
(0);

282 
	`NL_DBG
(2, "msg %p: AŒoˇãdÇew mesßge, maxÀn=%zu\n", 
nm
, 
Àn
);

284  
nm
;

285 
îrout
:

286 
	`‰ì
(
nm
);

287  
NULL
;

288 
	}
}

299 
∆_msg
 *
	$∆msg_Æloc
()

301  
	`__∆msg_Æloc
(
deÁu…_msg_size
);

302 
	}
}

307 
∆_msg
 *
	$∆msg_Æloc_size
(
size_t
 
max
)

309  
	`__∆msg_Æloc
(
max
);

310 
	}
}

322 
∆_msg
 *
	$∆msg_öhîô
(
∆msghdr
 *
hdr
)

324 
∆_msg
 *
nm
;

326 
nm
 = 
	`∆msg_Æloc
();

327 i‡(
nm
 && 
hdr
) {

328 
∆msghdr
 *
√w
 = 
nm
->
nm_∆h
;

330 
√w
->
∆msg_ty≥
 = 
hdr
->nlmsg_type;

331 
√w
->
∆msg_Êags
 = 
hdr
->nlmsg_flags;

332 
√w
->
∆msg_£q
 = 
hdr
->nlmsg_seq;

333 
√w
->
∆msg_pid
 = 
hdr
->nlmsg_pid;

336  
nm
;

337 
	}
}

346 
∆_msg
 *
	$∆msg_Æloc_sim∂e
(
∆msgty≥
, 
Êags
)

348 
∆_msg
 *
msg
;

349 
∆msghdr
 
∆h
 = {

350 .
∆msg_ty≥
 = 
∆msgty≥
,

351 .
∆msg_Êags
 = 
Êags
,

354 
msg
 = 
	`∆msg_öhîô
(&
∆h
);

355 i‡(
msg
)

356 
	`NL_DBG
(2, "msg %p: AŒoˇãdÇew sim∂êmesßge\n", 
msg
);

358  
msg
;

359 
	}
}

365 
	$∆msg_£t_deÁu…_size
(
size_t
 
max
)

367 i‡(
max
 < 
	`∆msg_tŸÆ_size
(0))

368 
max
 = 
	`∆msg_tŸÆ_size
(0);

370 
deÁu…_msg_size
 = 
max
;

371 
	}
}

382 
∆_msg
 *
	$∆msg_c⁄vît
(
∆msghdr
 *
hdr
)

384 
∆_msg
 *
nm
;

386 
nm
 = 
	`__∆msg_Æloc
(
	`NLMSG_ALIGN
(
hdr
->
∆msg_Àn
));

387 i‡(!
nm
)

388  
NULL
;

390 
	`mem˝y
(
nm
->
nm_∆h
, 
hdr
, hdr->
∆msg_Àn
);

392  
nm
;

393 
	}
}

407 *
	$∆msg_ª£rve
(
∆_msg
 *
n
, 
size_t
 
Àn
, 
∑d
)

409 *
buf
 = 
n
->
nm_∆h
;

410 
size_t
 
∆msg_Àn
 = 
n
->
nm_∆h
->nlmsg_len;

411 
size_t
 
éí
;

413 
éí
 = 
∑d
 ? ((
Àn
 + (pad - 1)) & ~(pad - 1)) :Üen;

415 i‡((
éí
 + 
∆msg_Àn
Ë> 
n
->
nm_size
)

416  
NULL
;

418 
buf
 +
∆msg_Àn
;

419 
n
->
nm_∆h
->
∆msg_Àn
 +
éí
;

421 i‡(
éí
 > 
Àn
)

422 
	`mem£t
(
buf
 + 
Àn
, 0, 
éí
 -Üen);

424 
	`NL_DBG
(2, "msg %p: Reserved %zu (%zu) bytes,Öad=%d,Çlmsg_len=%d\n",

425 
n
, 
éí
, 
Àn
, 
∑d
,Ç->
nm_∆h
->
∆msg_Àn
);

427  
buf
;

428 
	}
}

442 
	$∆msg_≠≥nd
(
∆_msg
 *
n
, *
d©a
, 
size_t
 
Àn
, 
∑d
)

444 *
tmp
;

446 
tmp
 = 
	`∆msg_ª£rve
(
n
, 
Àn
, 
∑d
);

447 i‡(
tmp
 =
NULL
)

448  -
NLE_NOMEM
;

450 
	`mem˝y
(
tmp
, 
d©a
, 
Àn
);

451 
	`NL_DBG
(2, "msg %p: Aµíded %zu byã†wôhÖaddög %d\n", 
n
, 
Àn
, 
∑d
);

454 
	}
}

470 
	$∆msg_ex∑nd
(
∆_msg
 *
n
, 
size_t
 
√wÀn
)

472 *
tmp
;

474 i‡(
√wÀn
 <
n
->
nm_size
)

475  -
NLE_INVAL
;

477 
tmp
 = 
	`ªÆloc
(
n
->
nm_∆h
, 
√wÀn
);

478 i‡(
tmp
 =
NULL
)

479  -
NLE_NOMEM
;

481 
n
->
nm_∆h
 = 
tmp
;

482 
n
->
nm_size
 = 
√wÀn
;

485 
	}
}

503 
∆msghdr
 *
	$∆msg_put
(
∆_msg
 *
n
, 
uöt32_t
 
pid
, uöt32_à
£q
,

504 
ty≥
, 
∑ylﬂd
, 
Êags
)

506 
∆msghdr
 *
∆h
;

508 i‡(
n
->
nm_∆h
->
∆msg_Àn
 < 
NLMSG_HDRLEN
)

509 
	`BUG
();

511 
∆h
 = (
∆msghdr
 *Ë
n
->
nm_∆h
;

512 
∆h
->
∆msg_ty≥
 = 
ty≥
;

513 
∆h
->
∆msg_Êags
 = 
Êags
;

514 
∆h
->
∆msg_pid
 = 
pid
;

515 
∆h
->
∆msg_£q
 = 
£q
;

517 
	`NL_DBG
(2, "msg %p: AddedÇetlink headerÅype=%d, flags=%d,Öid=%d, "

518 "£q=%d\n", 
n
, 
ty≥
, 
Êags
, 
pid
, 
£q
);

520 i‡(
∑ylﬂd
 > 0 &&

521 
	`∆msg_ª£rve
(
n
, 
∑ylﬂd
, 
NLMSG_ALIGNTO
Ë=
NULL
)

522  
NULL
;

524  
∆h
;

525 
	}
}

536 
∆msghdr
 *
	$∆msg_hdr
(
∆_msg
 *
n
)

538  
n
->
nm_∆h
;

539 
	}
}

545 
	$∆msg_gë
(
∆_msg
 *
msg
)

547 
msg
->
nm_ªf˙t
++;

548 
	`NL_DBG
(4, "NewÑeferenceÅo message %p,Åotal %d\n",

549 
msg
, msg->
nm_ªf˙t
);

550 
	}
}

558 
	$∆msg_‰ì
(
∆_msg
 *
msg
)

560 i‡(!
msg
)

563 
msg
->
nm_ªf˙t
--;

564 
	`NL_DBG
(4, "Returned messageÑeference %p, %dÑemaining\n",

565 
msg
, msg->
nm_ªf˙t
);

567 i‡(
msg
->
nm_ªf˙t
 < 0)

568 
	`BUG
();

570 i‡(
msg
->
nm_ªf˙t
 <= 0) {

571 
	`‰ì
(
msg
->
nm_∆h
);

572 
	`NL_DBG
(2, "msg %p: Fªed\n", 
msg
);

573 
	`‰ì
(
msg
);

575 
	}
}

584 
	$∆msg_£t_¥Ÿo
(
∆_msg
 *
msg
, 
¥Ÿocﬁ
)

586 
msg
->
nm_¥Ÿocﬁ
 = 
¥Ÿocﬁ
;

587 
	}
}

589 
	$∆msg_gë_¥Ÿo
(
∆_msg
 *
msg
)

591  
msg
->
nm_¥Ÿocﬁ
;

592 
	}
}

594 
size_t
 
	$∆msg_gë_max_size
(
∆_msg
 *
msg
)

596  
msg
->
nm_size
;

597 
	}
}

599 
	$∆msg_£t_§c
(
∆_msg
 *
msg
, 
sockaddr_∆
 *
addr
)

601 
	`mem˝y
(&
msg
->
nm_§c
, 
addr
, (*addr));

602 
	}
}

604 
sockaddr_∆
 *
	$∆msg_gë_§c
(
∆_msg
 *
msg
)

606  &
msg
->
nm_§c
;

607 
	}
}

609 
	$∆msg_£t_d°
(
∆_msg
 *
msg
, 
sockaddr_∆
 *
addr
)

611 
	`mem˝y
(&
msg
->
nm_d°
, 
addr
, (*addr));

612 
	}
}

614 
sockaddr_∆
 *
	$∆msg_gë_d°
(
∆_msg
 *
msg
)

616  &
msg
->
nm_d°
;

617 
	}
}

619 
	$∆msg_£t_¸eds
(
∆_msg
 *
msg
, 
u¸ed
 *
¸eds
)

621 
	`mem˝y
(&
msg
->
nm_¸eds
, 
¸eds
, (*creds));

622 
msg
->
nm_Êags
 |
NL_MSG_CRED_PRESENT
;

623 
	}
}

625 
u¸ed
 *
	$∆msg_gë_¸eds
(
∆_msg
 *
msg
)

627 i‡(
msg
->
nm_Êags
 & 
NL_MSG_CRED_PRESENT
)

628  &
msg
->
nm_¸eds
;

629  
NULL
;

630 
	}
}

639 c⁄° 
å™s_tbl
 
	g∆_msgty≥s
[] = {

640 
__ADD
(
NLMSG_NOOP
,
NOOP
)

641 
__ADD
(
NLMSG_ERROR
,
ERROR
)

642 
__ADD
(
NLMSG_DONE
,
DONE
)

643 
__ADD
(
NLMSG_OVERRUN
,
OVERRUN
)

646 *
	$∆_∆msgty≥2°r
(
ty≥
, *
buf
, 
size_t
 
size
)

648  
	`__ty≥2°r
(
ty≥
, 
buf
, 
size
, 
∆_msgty≥s
,

649 
	`ARRAY_SIZE
(
∆_msgty≥s
));

650 
	}
}

652 
	$∆_°r2∆msgty≥
(c⁄° *
«me
)

654  
	`__°r2ty≥
(
«me
, 
∆_msgty≥s
, 
	`ARRAY_SIZE
(nl_msgtypes));

655 
	}
}

664 *
	$∆_∆msg_Êags2°r
(
Êags
, *
buf
, 
size_t
 
Àn
)

666 
	`mem£t
(
buf
, 0, 
Àn
);

668 
	#PRINT_FLAG
(
f
) \

669 i‡(
Êags
 & 
NLM_F_
##
f
) { \

670 
Êags
 &~
NLM_F_
##
f
; \

671 
	`°∫ˇt
(
buf
, #f, 
Àn
 - 
	`°æí
(buf) - 1); \

672 i‡(
Êags
) \

673 
	`°∫ˇt
(
buf
, ",", 
Àn
 - 
	`°æí
(buf) - 1); \

674 }

	)

676 
	`PRINT_FLAG
(
REQUEST
);

677 
	`PRINT_FLAG
(
MULTI
);

678 
	`PRINT_FLAG
(
ACK
);

679 
	`PRINT_FLAG
(
ECHO
);

680 
	`PRINT_FLAG
(
ROOT
);

681 
	`PRINT_FLAG
(
MATCH
);

682 
	`PRINT_FLAG
(
ATOMIC
);

683 
	`PRINT_FLAG
(
REPLACE
);

684 
	`PRINT_FLAG
(
EXCL
);

685 
	`PRINT_FLAG
(
CREATE
);

686 
	`PRINT_FLAG
(
APPEND
);

688 i‡(
Êags
) {

689 
s
[32];

690 
	`¢¥ötf
(
s
, (s), "0x%x", 
Êags
);

691 
	`°∫ˇt
(
buf
, 
s
, 
Àn
 - 
	`°æí
(buf) - 1);

693 #unde‡
PRINT_FLAG


695  
buf
;

696 
	}
}

706 
	sdp_xd©a
 {

707 (*
	mcb
)(
	m∆_obje˘
 *, *);

708 *
	m¨g
;

712 
	$∑r£_cb
(
∆_obje˘
 *
obj
, 
∆_∑r£r_∑øm
 *
p
)

714 
dp_xd©a
 *
x
 = 
p
->
µ_¨g
;

716 
x
->
	`cb
(
obj
, x->
¨g
);

718 
	}
}

720 
∆_msg_∑r£
(
∆_msg
 *
msg
, (*
cb
)(
∆_obje˘
 *, *),

721 *
¨g
)

723 
∆_ˇche_›s
 *
›s
;

724 
∆_∑r£r_∑øm
 
p
 = {

725 .
µ_cb
 = 
∑r£_cb


727 
dp_xd©a
 
x
 = {

728 .
cb
 = cb,

729 .
¨g
 =árg,

731 
îr
;

733 
›s
 = 
	`∆_ˇche_›s_assocüã_ß„
(
	`∆msg_gë_¥Ÿo
(
msg
),

734 
	`∆msg_hdr
(
msg
)->
∆msg_ty≥
);

735 i‡(
›s
 =
NULL
)

736  -
NLE_MSGTYPE_NOSUPPORT
;

737 
p
.
µ_¨g
 = &
x
;

739 
îr
 = 
	`∆_ˇche_∑r£
(
›s
, 
NULL
, 
	`∆msg_hdr
(
msg
), &
p
);

740 
	`∆_ˇche_›s_put
(
›s
);

742  
îr
;

743 
	}
}

752 
	$¥efix_löe
(
FILE
 *
ofd
, 
¥efix
)

754 
i
;

756 
i
 = 0; i < 
¥efix
; i++)

757 
	`Ârötf
(
ofd
, " ");

758 
	}
}

760 
ölöe
 
	$dump_hex
(
FILE
 *
ofd
, *
°¨t
, 
Àn
, 
¥efix
)

762 
i
, 
a
, 
c
, 
limô
;

763 
ascii
[21] = {0};

765 
limô
 = 16 - (
¥efix
 * 2);

766 
	`¥efix_löe
(
ofd
, 
¥efix
);

767 
	`Ârötf
(
ofd
, " ");

769 
i
 = 0, 
a
 = 0, 
c
 = 0; i < 
Àn
; i++) {

770 
v
 = *(
uöt8_t
 *Ë(
°¨t
 + 
i
);

772 
	`Ârötf
(
ofd
, "%02x ", 
v
);

773 
ascii
[
a
++] = 
	`i•röt
(
v
) ? v : '.';

775 i‡(++
c
 >
limô
) {

776 
	`Ârötf
(
ofd
, "%s\n", 
ascii
);

777 i‡(
i
 < (
Àn
 - 1)) {

778 
	`¥efix_löe
(
ofd
, 
¥efix
);

779 
	`Ârötf
(
ofd
, " ");

781 
a
 = 
c
 = 0;

782 
	`mem£t
(
ascii
, 0, (ascii));

786 i‡(
c
 != 0) {

787 
i
 = 0; i < (
limô
 - 
c
); i++)

788 
	`Ârötf
(
ofd
, " ");

789 
	`Ârötf
(
ofd
, "%s\n", 
ascii
);

791 
	}
}

793 
	$¥öt_hdr
(
FILE
 *
ofd
, 
∆_msg
 *
msg
)

795 
∆msghdr
 *
∆h
 = 
	`∆msg_hdr
(
msg
);

796 
∆_ˇche_›s
 *
›s
;

797 
∆_msgty≥
 *
mt
;

798 
buf
[128];

800 
	`Ârötf
(
ofd
, " .∆msg_À¿%d\n", 
∆h
->
∆msg_Àn
);

802 
›s
 = 
	`∆_ˇche_›s_assocüã_ß„
(
	`∆msg_gë_¥Ÿo
(
msg
), 
∆h
->
∆msg_ty≥
);

803 i‡(
›s
) {

804 
mt
 = 
	`∆_msgty≥_lookup
(
›s
, 
∆h
->
∆msg_ty≥
);

805 i‡(!
mt
)

806 
	`BUG
();

808 
	`¢¥ötf
(
buf
, (buf), "%s::%s", 
›s
->
co_«me
, 
mt
->
mt_«me
);

809 
	`∆_ˇche_›s_put
(
›s
);

811 
	`∆_∆msgty≥2°r
(
∆h
->
∆msg_ty≥
, 
buf
, (buf));

813 
	`Ârötf
(
ofd
, " .ty≥ = %d <%s>\n", 
∆h
->
∆msg_ty≥
, 
buf
);

814 
	`Ârötf
(
ofd
, " .Êag†%d <%s>\n", 
∆h
->
∆msg_Êags
,

815 
	`∆_∆msg_Êags2°r
(
∆h
->
∆msg_Êags
, 
buf
, (buf)));

816 
	`Ârötf
(
ofd
, " .£q = %d\n", 
∆h
->
∆msg_£q
);

817 
	`Ârötf
(
ofd
, " .p‹à%d\n", 
∆h
->
∆msg_pid
);

819 
	}
}

821 
	$¥öt_gíl_hdr
(
FILE
 *
ofd
, *
°¨t
)

823 
gílmsghdr
 *
ghdr
 = 
°¨t
;

825 
	`Ârötf
(
ofd
, " [GENERIC NETLINK HEADER] %zu o˘ës\n", 
GENL_HDRLEN
);

826 
	`Ârötf
(
ofd
, " .cmd = %u\n", 
ghdr
->
cmd
);

827 
	`Ârötf
(
ofd
, " .vîsi⁄ = %u\n", 
ghdr
->
vîsi⁄
);

828 
	`Ârötf
(
ofd
, " .unu£d = %#x\n", 
ghdr
->
ª£rved
);

829 
	}
}

831 *
	$¥öt_gíl_msg
(
∆_msg
 *
msg
, 
FILE
 *
ofd
, 
∆msghdr
 *
hdr
,

832 
∆_ˇche_›s
 *
›s
, *
∑ylﬂdÀn
)

834 *
d©a
 = 
	`∆msg_d©a
(
hdr
);

836 i‡(*
∑ylﬂdÀn
 < 
GENL_HDRLEN
)

837  
d©a
;

839 
	`¥öt_gíl_hdr
(
ofd
, 
d©a
);

841 *
∑ylﬂdÀn
 -
GENL_HDRLEN
;

842 
d©a
 +
GENL_HDRLEN
;

844 i‡(
›s
) {

845 
hdrsize
 = 
›s
->
co_hdrsize
 - 
GENL_HDRLEN
;

847 i‡(
hdrsize
 > 0) {

848 i‡(*
∑ylﬂdÀn
 < 
hdrsize
)

849  
d©a
;

851 
	`Ârötf
(
ofd
, " [HEADER] %d o˘ës\n", 
hdrsize
);

852 
	`dump_hex
(
ofd
, 
d©a
, 
hdrsize
, 0);

854 *
∑ylﬂdÀn
 -
hdrsize
;

855 
d©a
 +
hdrsize
;

859  
d©a
;

860 
	}
}

862 
	$dump_©å
(
FILE
 *
ofd
, 
∆©å
 *
©å
, 
¥efix
)

864 
Àn
 = 
	`∆a_Àn
(
©å
);

866 
	`dump_hex
(
ofd
, 
	`∆a_d©a
(
©å
), 
Àn
, 
¥efix
);

867 
	}
}

869 
	$dump_©ås
(
FILE
 *
ofd
, 
∆©å
 *
©ås
, 
©åÀn
,

870 
¥efix
)

872 
ªm
;

873 
∆©å
 *
∆a
;

875 
	`∆a_f‹_óch_©å
(
∆a
, 
©ås
, 
©åÀn
, 
ªm
) {

876 
∑dÀn
, 
Æí
 = 
	`∆a_Àn
(
∆a
);

878 
	`¥efix_löe
(
ofd
, 
¥efix
);

880 i‡(
∆a
->
∆a_ty≥
 == 0)

881 
	`Ârötf
(
ofd
, " [ATTR PADDING] %d o˘ës\n", 
Æí
);

883 
	`Ârötf
(
ofd
, " [ATTR %02d%s] %d o˘ës\n", 
	`∆a_ty≥
(
∆a
),

884 
	`∆a_is_√°ed
(
∆a
) ? " NESTED" : "",

885 
Æí
);

887 i‡(
	`∆a_is_√°ed
(
∆a
))

888 
	`dump_©ås
(
ofd
, 
	`∆a_d©a
(
∆a
), 
Æí
, 
¥efix
+1);

890 
	`dump_©å
(
ofd
, 
∆a
, 
¥efix
);

892 
∑dÀn
 = 
	`∆a_∑dÀn
(
Æí
);

893 i‡(
∑dÀn
 > 0) {

894 
	`¥efix_löe
(
ofd
, 
¥efix
);

895 
	`Ârötf
(
ofd
, " [PADDING] %d octets\n",

896 
∑dÀn
);

897 
	`dump_hex
(
ofd
, 
	`∆a_d©a
(
∆a
Ë+ 
Æí
,

898 
∑dÀn
, 
¥efix
);

902 i‡(
ªm
) {

903 
	`¥efix_löe
(
ofd
, 
¥efix
);

904 
	`Ârötf
(
ofd
, " [LEFTOVER] %d o˘ës\n", 
ªm
);

906 
	}
}

908 
	$dump_îr‹_msg
(
∆_msg
 *
msg
, 
FILE
 *
ofd
)

910 
∆msghdr
 *
hdr
 = 
	`∆msg_hdr
(
msg
);

911 
∆msgîr
 *
îr
 = 
	`∆msg_d©a
(
hdr
);

913 
	`Ârötf
(
ofd
, " [ERRORMSG] %zu o˘ës\n", (*
îr
));

915 i‡(
	`∆msg_Àn
(
hdr
Ë>(*
îr
)) {

916 
buf
[256];

917 
∆_msg
 *
îrmsg
;

919 
	`Ârötf
(
ofd
, " .îr‹ = %d \"%s\"\n", 
îr
->
îr‹
,

920 
	`°ªº‹_r
(-
îr
->
îr‹
, 
buf
, (buf)));

921 
	`Ârötf
(
ofd
, " [ORIGINAL MESSAGE] %zu o˘ës\n", (*
hdr
));

923 
îrmsg
 = 
	`∆msg_öhîô
(&
îr
->
msg
);

924 
	`¥öt_hdr
(
ofd
, 
îrmsg
);

925 
	`∆msg_‰ì
(
îrmsg
);

927 
	}
}

929 
	$¥öt_msg
(
∆_msg
 *
msg
, 
FILE
 *
ofd
, 
∆msghdr
 *
hdr
)

931 
∆_ˇche_›s
 *
›s
;

932 
∑ylﬂdÀn
 = 
	`∆msg_Àn
(
hdr
);

933 
©åÀn
 = 0;

934 *
d©a
;

936 
d©a
 = 
	`∆msg_d©a
(
hdr
);

937 
›s
 = 
	`∆_ˇche_›s_assocüã_ß„
(
	`∆msg_gë_¥Ÿo
(
msg
),

938 
hdr
->
∆msg_ty≥
);

939 i‡(
›s
) {

940 
©åÀn
 = 
	`∆msg_©åÀn
(
hdr
, 
›s
->
co_hdrsize
);

941 
∑ylﬂdÀn
 -
©åÀn
;

944 i‡(
msg
->
nm_¥Ÿocﬁ
 =
NETLINK_GENERIC
)

945 
d©a
 = 
	`¥öt_gíl_msg
(
msg
, 
ofd
, 
hdr
, 
›s
, &
∑ylﬂdÀn
);

947 i‡(
∑ylﬂdÀn
) {

948 
	`Ârötf
(
ofd
, " [PAYLOAD] %d o˘ës\n", 
∑ylﬂdÀn
);

949 
	`dump_hex
(
ofd
, 
d©a
, 
∑ylﬂdÀn
, 0);

952 i‡(
©åÀn
) {

953 
∆©å
 *
©ås
;

954 
©åÀn
;

956 
©ås
 = 
	`∆msg_©åd©a
(
hdr
, 
›s
->
co_hdrsize
);

957 
©åÀn
 = 
	`∆msg_©åÀn
(
hdr
, 
›s
->
co_hdrsize
);

958 
	`dump_©ås
(
ofd
, 
©ås
, 
©åÀn
, 0);

961 i‡(
›s
)

962 
	`∆_ˇche_›s_put
(
›s
);

963 
	}
}

970 
	$∆_msg_dump
(
∆_msg
 *
msg
, 
FILE
 *
ofd
)

972 
∆msghdr
 *
hdr
 = 
	`∆msg_hdr
(
msg
);

974 
	`Ârötf
(
ofd
,

977 
	`Ârötf
(
ofd
, " [NETLINK HEADER] %zu o˘ës\n", (
∆msghdr
));

978 
	`¥öt_hdr
(
ofd
, 
msg
);

980 i‡(
hdr
->
∆msg_ty≥
 =
NLMSG_ERROR
)

981 
	`dump_îr‹_msg
(
msg
, 
ofd
);

982 i‡(
	`∆msg_Àn
(
hdr
) > 0)

983 
	`¥öt_msg
(
msg
, 
ofd
, 
hdr
);

985 
	`Ârötf
(
ofd
,

987 
	}
}

	@mylibnl/libnl-3.2.25/lib/netfilter/ct.c

22 
	~<byãsw≠.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<löux/√tfûãr/n‚ëlök_c⁄¡øck.h
>

26 
	~<√éök-¥iv©e/√éök.h
>

27 
	~<√éök/©å.h
>

28 
	~<√éök/√tfûãr/n‚l.h
>

29 
	~<√éök/√tfûãr/˘.h
>

31 
∆_ˇche_›s
 
	gn‚l_˘_›s
;

33 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


34 
uöt64_t
 
	$¡ohŒ
(
uöt64_t
 
x
)

36  
x
;

37 
	}
}

38 
uöt64_t
 
	$ht⁄Œ
(
uöt64_t
 
x
)

40  
x
;

41 
	}
}

42 #ñi‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


43 
uöt64_t
 
	$¡ohŒ
(
uöt64_t
 
x
)

45  
	`bsw≠_64
(
x
);

46 
	}
}

47 
uöt64_t
 
	$ht⁄Œ
(
uöt64_t
 
x
)

49  
	`bsw≠_64
(
x
);

50 
	}
}

53 
∆a_pﬁicy
 
	g˘_pﬁicy
[
CTA_MAX
+1] = {

54 [
CTA_TUPLE_ORIG
] = { .
ty≥
 = 
NLA_NESTED
 },

55 [
CTA_TUPLE_REPLY
] = { .
ty≥
 = 
NLA_NESTED
 },

56 [
CTA_STATUS
] = { .
ty≥
 = 
NLA_U32
 },

57 [
CTA_PROTOINFO
] = { .
ty≥
 = 
NLA_NESTED
 },

60 [
CTA_TIMEOUT
] = { .
ty≥
 = 
NLA_U32
 },

61 [
CTA_MARK
] = { .
ty≥
 = 
NLA_U32
 },

62 [
CTA_COUNTERS_ORIG
] = { .
ty≥
 = 
NLA_NESTED
 },

63 [
CTA_COUNTERS_REPLY
] = { .
ty≥
 = 
NLA_NESTED
 },

64 [
CTA_USE
] = { .
ty≥
 = 
NLA_U32
 },

65 [
CTA_ID
] = { .
ty≥
 = 
NLA_U32
 },

66 [
CTA_ZONE
] = { .
ty≥
 = 
NLA_U16
 },

70 
∆a_pﬁicy
 
	g˘_tu∂e_pﬁicy
[
CTA_TUPLE_MAX
+1] = {

71 [
CTA_TUPLE_IP
] = { .
ty≥
 = 
NLA_NESTED
 },

72 [
CTA_TUPLE_PROTO
] = { .
ty≥
 = 
NLA_NESTED
 },

75 
∆a_pﬁicy
 
	g˘_ù_pﬁicy
[
CTA_IP_MAX
+1] = {

76 [
CTA_IP_V4_SRC
] = { .
ty≥
 = 
NLA_U32
 },

77 [
CTA_IP_V4_DST
] = { .
ty≥
 = 
NLA_U32
 },

78 [
CTA_IP_V6_SRC
] = { .
möÀn
 = 16 },

79 [
CTA_IP_V6_DST
] = { .
möÀn
 = 16 },

82 
∆a_pﬁicy
 
	g˘_¥Ÿo_pﬁicy
[
CTA_PROTO_MAX
+1] = {

83 [
CTA_PROTO_NUM
] = { .
ty≥
 = 
NLA_U8
 },

84 [
CTA_PROTO_SRC_PORT
] = { .
ty≥
 = 
NLA_U16
 },

85 [
CTA_PROTO_DST_PORT
] = { .
ty≥
 = 
NLA_U16
 },

86 [
CTA_PROTO_ICMP_ID
] = { .
ty≥
 = 
NLA_U16
 },

87 [
CTA_PROTO_ICMP_TYPE
] = { .
ty≥
 = 
NLA_U8
 },

88 [
CTA_PROTO_ICMP_CODE
] = { .
ty≥
 = 
NLA_U8
 },

89 [
CTA_PROTO_ICMPV6_ID
] = { .
ty≥
 = 
NLA_U16
 },

90 [
CTA_PROTO_ICMPV6_TYPE
] = { .
ty≥
 = 
NLA_U8
 },

91 [
CTA_PROTO_ICMPV6_CODE
] = { .
ty≥
 = 
NLA_U8
 },

94 
∆a_pﬁicy
 
	g˘_¥Ÿoöfo_pﬁicy
[
CTA_PROTOINFO_MAX
+1] = {

95 [
CTA_PROTOINFO_TCP
] = { .
ty≥
 = 
NLA_NESTED
 },

98 
∆a_pﬁicy
 
	g˘_¥Ÿoöfo_t˝_pﬁicy
[
CTA_PROTOINFO_TCP_MAX
+1] = {

99 [
CTA_PROTOINFO_TCP_STATE
] = { .
ty≥
 = 
NLA_U8
 },

100 [
CTA_PROTOINFO_TCP_WSCALE_ORIGINAL
] = { .
ty≥
 = 
NLA_U8
 },

101 [
CTA_PROTOINFO_TCP_WSCALE_REPLY
] = { .
ty≥
 = 
NLA_U8
 },

102 [
CTA_PROTOINFO_TCP_FLAGS_ORIGINAL
] = { .
möÀn
 = 2 },

103 [
CTA_PROTOINFO_TCP_FLAGS_REPLY
] = { .
möÀn
 = 2 },

107 
∆a_pﬁicy
 
	g˘_cou¡îs_pﬁicy
[
CTA_COUNTERS_MAX
+1] = {

108 [
CTA_COUNTERS_PACKETS
] = { .
ty≥
 = 
NLA_U64
 },

109 [
CTA_COUNTERS_BYTES
] = { .
ty≥
 = 
NLA_U64
 },

110 [
CTA_COUNTERS32_PACKETS
]{ .
ty≥
 = 
NLA_U32
 },

111 [
CTA_COUNTERS32_BYTES
] = { .
ty≥
 = 
NLA_U32
 },

114 
∆a_pﬁicy
 
	g˘_time°amp_pﬁicy
[
CTA_TIMESTAMP_MAX
 + 1] = {

115 [
CTA_TIMESTAMP_START
] = { .
ty≥
 = 
NLA_U64
 },

116 [
CTA_TIMESTAMP_STOP
] = { .
ty≥
 = 
NLA_U64
 },

119 
	$˘_∑r£_ù
(
n‚l_˘
 *
˘
, 
ª∂
, 
∆©å
 *
©å
)

121 
∆©å
 *
tb
[
CTA_IP_MAX
+1];

122 
∆_addr
 *
addr
;

123 
îr
;

125 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
CTA_IP_MAX
, 
©å
, 
˘_ù_pﬁicy
);

126 i‡(
îr
 < 0)

127 
îrout
;

129 i‡(
tb
[
CTA_IP_V4_SRC
]) {

130 
addr
 = 
	`∆_addr_Æloc_©å
(
tb
[
CTA_IP_V4_SRC
], 
AF_INET
);

131 i‡(
addr
 =
NULL
)

132 
îrout_íomem
;

133 
îr
 = 
	`n‚l_˘_£t_§c
(
˘
, 
ª∂
, 
addr
);

134 
	`∆_addr_put
(
addr
);

135 i‡(
îr
 < 0)

136 
îrout
;

138 i‡(
tb
[
CTA_IP_V4_DST
]) {

139 
addr
 = 
	`∆_addr_Æloc_©å
(
tb
[
CTA_IP_V4_DST
], 
AF_INET
);

140 i‡(
addr
 =
NULL
)

141 
îrout_íomem
;

142 
îr
 = 
	`n‚l_˘_£t_d°
(
˘
, 
ª∂
, 
addr
);

143 
	`∆_addr_put
(
addr
);

144 i‡(
îr
 < 0)

145 
îrout
;

147 i‡(
tb
[
CTA_IP_V6_SRC
]) {

148 
addr
 = 
	`∆_addr_Æloc_©å
(
tb
[
CTA_IP_V6_SRC
], 
AF_INET6
);

149 i‡(
addr
 =
NULL
)

150 
îrout_íomem
;

151 
îr
 = 
	`n‚l_˘_£t_§c
(
˘
, 
ª∂
, 
addr
);

152 
	`∆_addr_put
(
addr
);

153 i‡(
îr
 < 0)

154 
îrout
;

156 i‡(
tb
[
CTA_IP_V6_DST
]) {

157 
addr
 = 
	`∆_addr_Æloc_©å
(
tb
[
CTA_IP_V6_DST
], 
AF_INET6
);

158 i‡(
addr
 =
NULL
)

159 
îrout_íomem
;

160 
îr
 = 
	`n‚l_˘_£t_d°
(
˘
, 
ª∂
, 
addr
);

161 
	`∆_addr_put
(
addr
);

162 i‡(
îr
 < 0)

163 
îrout
;

168 
îrout_íomem
:

169 
îr
 = -
NLE_NOMEM
;

170 
îrout
:

171  
îr
;

172 
	}
}

174 
	$˘_∑r£_¥Ÿo
(
n‚l_˘
 *
˘
, 
ª∂
, 
∆©å
 *
©å
)

176 
∆©å
 *
tb
[
CTA_PROTO_MAX
+1];

177 
îr
;

179 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
CTA_PROTO_MAX
, 
©å
, 
˘_¥Ÿo_pﬁicy
);

180 i‡(
îr
 < 0)

181  
îr
;

183 i‡(!
ª∂
 && 
tb
[
CTA_PROTO_NUM
])

184 
	`n‚l_˘_£t_¥Ÿo
(
˘
, 
	`∆a_gë_u8
(
tb
[
CTA_PROTO_NUM
]));

185 i‡(
tb
[
CTA_PROTO_SRC_PORT
])

186 
	`n‚l_˘_£t_§c_p‹t
(
˘
, 
ª∂
,

187 
	`¡ohs
(
	`∆a_gë_u16
(
tb
[
CTA_PROTO_SRC_PORT
])));

188 i‡(
tb
[
CTA_PROTO_DST_PORT
])

189 
	`n‚l_˘_£t_d°_p‹t
(
˘
, 
ª∂
,

190 
	`¡ohs
(
	`∆a_gë_u16
(
tb
[
CTA_PROTO_DST_PORT
])));

192 i‡(
˘
->
˘_Ámûy
 =
AF_INET
) {

193 i‡(
tb
[
CTA_PROTO_ICMP_ID
])

194 
	`n‚l_˘_£t_icmp_id
(
˘
, 
ª∂
,

195 
	`¡ohs
(
	`∆a_gë_u16
(
tb
[
CTA_PROTO_ICMP_ID
])));

196 i‡(
tb
[
CTA_PROTO_ICMP_TYPE
])

197 
	`n‚l_˘_£t_icmp_ty≥
(
˘
, 
ª∂
,

198 
	`∆a_gë_u8
(
tb
[
CTA_PROTO_ICMP_TYPE
]));

199 i‡(
tb
[
CTA_PROTO_ICMP_CODE
])

200 
	`n‚l_˘_£t_icmp_code
(
˘
, 
ª∂
,

201 
	`∆a_gë_u8
(
tb
[
CTA_PROTO_ICMP_CODE
]));

202 } i‡(
˘
->
˘_Ámûy
 =
AF_INET6
) {

203 i‡(
tb
[
CTA_PROTO_ICMPV6_ID
])

204 
	`n‚l_˘_£t_icmp_id
(
˘
, 
ª∂
,

205 
	`¡ohs
(
	`∆a_gë_u16
(
tb
[
CTA_PROTO_ICMPV6_ID
])));

206 i‡(
tb
[
CTA_PROTO_ICMPV6_TYPE
])

207 
	`n‚l_˘_£t_icmp_ty≥
(
˘
, 
ª∂
,

208 
	`∆a_gë_u8
(
tb
[
CTA_PROTO_ICMPV6_TYPE
]));

209 i‡(
tb
[
CTA_PROTO_ICMPV6_CODE
])

210 
	`n‚l_˘_£t_icmp_code
(
˘
, 
ª∂
,

211 
	`∆a_gë_u8
(
tb
[
CTA_PROTO_ICMPV6_CODE
]));

215 
	}
}

217 
	$˘_∑r£_tu∂e
(
n‚l_˘
 *
˘
, 
ª∂
, 
∆©å
 *
©å
)

219 
∆©å
 *
tb
[
CTA_TUPLE_MAX
+1];

220 
îr
;

222 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
CTA_TUPLE_MAX
, 
©å
, 
˘_tu∂e_pﬁicy
);

223 i‡(
îr
 < 0)

224  
îr
;

226 i‡(
tb
[
CTA_TUPLE_IP
]) {

227 
îr
 = 
	`˘_∑r£_ù
(
˘
, 
ª∂
, 
tb
[
CTA_TUPLE_IP
]);

228 i‡(
îr
 < 0)

229  
îr
;

232 i‡(
tb
[
CTA_TUPLE_PROTO
]) {

233 
îr
 = 
	`˘_∑r£_¥Ÿo
(
˘
, 
ª∂
, 
tb
[
CTA_TUPLE_PROTO
]);

234 i‡(
îr
 < 0)

235  
îr
;

239 
	}
}

241 
	$˘_∑r£_¥Ÿoöfo_t˝
(
n‚l_˘
 *
˘
, 
∆©å
 *
©å
)

243 
∆©å
 *
tb
[
CTA_PROTOINFO_TCP_MAX
+1];

244 
îr
;

246 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
CTA_PROTOINFO_TCP_MAX
, 
©å
,

247 
˘_¥Ÿoöfo_t˝_pﬁicy
);

248 i‡(
îr
 < 0)

249  
îr
;

251 i‡(
tb
[
CTA_PROTOINFO_TCP_STATE
])

252 
	`n‚l_˘_£t_t˝_°©e
(
˘
,

253 
	`∆a_gë_u8
(
tb
[
CTA_PROTOINFO_TCP_STATE
]));

256 
	}
}

258 
	$˘_∑r£_¥Ÿoöfo
(
n‚l_˘
 *
˘
, 
∆©å
 *
©å
)

260 
∆©å
 *
tb
[
CTA_PROTOINFO_MAX
+1];

261 
îr
;

263 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
CTA_PROTOINFO_MAX
, 
©å
,

264 
˘_¥Ÿoöfo_pﬁicy
);

265 i‡(
îr
 < 0)

266  
îr
;

268 i‡(
tb
[
CTA_PROTOINFO_TCP
]) {

269 
îr
 = 
	`˘_∑r£_¥Ÿoöfo_t˝
(
˘
, 
tb
[
CTA_PROTOINFO_TCP
]);

270 i‡(
îr
 < 0)

271  
îr
;

275 
	}
}

277 
	$˘_∑r£_cou¡îs
(
n‚l_˘
 *
˘
, 
ª∂
, 
∆©å
 *
©å
)

279 
∆©å
 *
tb
[
CTA_COUNTERS_MAX
+1];

280 
îr
;

282 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
CTA_COUNTERS_MAX
, 
©å
, 
˘_cou¡îs_pﬁicy
);

283 i‡(
îr
 < 0)

284  
îr
;

286 i‡(
tb
[
CTA_COUNTERS_PACKETS
])

287 
	`n‚l_˘_£t_∑ckës
(
˘
, 
ª∂
,

288 
	`¡ohŒ
(
	`∆a_gë_u64
(
tb
[
CTA_COUNTERS_PACKETS
])));

289 i‡(
tb
[
CTA_COUNTERS32_PACKETS
])

290 
	`n‚l_˘_£t_∑ckës
(
˘
, 
ª∂
,

291 
	`¡ohl
(
	`∆a_gë_u32
(
tb
[
CTA_COUNTERS32_PACKETS
])));

292 i‡(
tb
[
CTA_COUNTERS_BYTES
])

293 
	`n‚l_˘_£t_byãs
(
˘
, 
ª∂
,

294 
	`¡ohŒ
(
	`∆a_gë_u64
(
tb
[
CTA_COUNTERS_BYTES
])));

295 i‡(
tb
[
CTA_COUNTERS32_BYTES
])

296 
	`n‚l_˘_£t_byãs
(
˘
, 
ª∂
,

297 
	`¡ohl
(
	`∆a_gë_u32
(
tb
[
CTA_COUNTERS32_BYTES
])));

300 
	}
}

302 
	$n‚lmsg_˘_group
(
∆msghdr
 *
∆h
)

304 
	`n‚lmsg_subty≥
(
∆h
)) {

305 
IPCTNL_MSG_CT_NEW
:

306 i‡(
∆h
->
∆msg_Êags
 & (
NLM_F_CREATE
|
NLM_F_EXCL
))

307  
NFNLGRP_CONNTRACK_NEW
;

309  
NFNLGRP_CONNTRACK_UPDATE
;

310 
IPCTNL_MSG_CT_DELETE
:

311  
NFNLGRP_CONNTRACK_DESTROY
;

313  
NFNLGRP_NONE
;

315 
	}
}

317 
	$˘_∑r£_time°amp
(
n‚l_˘
 *
˘
, 
∆©å
 *
©å
)

319 
∆©å
 *
tb
[
CTA_TIMESTAMP_MAX
 + 1];

320 
îr
;

322 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
CTA_TIMESTAMP_MAX
, 
©å
,

323 
˘_time°amp_pﬁicy
);

324 i‡(
îr
 < 0)

325  
îr
;

327 i‡(
tb
[
CTA_TIMESTAMP_START
] &&Åb[
CTA_TIMESTAMP_STOP
])

328 
	`n‚l_˘_£t_time°amp
(
˘
,

329 
	`¡ohŒ
(
	`∆a_gë_u64
(
tb
[
CTA_TIMESTAMP_START
])),

330 
	`¡ohŒ
(
	`∆a_gë_u64
(
tb
[
CTA_TIMESTAMP_STOP
])));

333 
	}
}

335 
	$n‚lmsg_˘_∑r£
(
∆msghdr
 *
∆h
, 
n‚l_˘
 **
ªsu…
)

337 
n‚l_˘
 *
˘
;

338 
∆©å
 *
tb
[
CTA_MAX
+1];

339 
îr
;

341 
˘
 = 
	`n‚l_˘_Æloc
();

342 i‡(!
˘
)

343  -
NLE_NOMEM
;

345 
˘
->
˚_msgty≥
 = 
∆h
->
∆msg_ty≥
;

347 
îr
 = 
	`∆msg_∑r£
(
∆h
, (
nfgímsg
), 
tb
, 
CTA_MAX
,

348 
˘_pﬁicy
);

349 i‡(
îr
 < 0)

350 
îrout
;

352 
	`n‚l_˘_£t_Ámûy
(
˘
, 
	`n‚lmsg_Ámûy
(
∆h
));

354 i‡(
tb
[
CTA_TUPLE_ORIG
]) {

355 
îr
 = 
	`˘_∑r£_tu∂e
(
˘
, 0, 
tb
[
CTA_TUPLE_ORIG
]);

356 i‡(
îr
 < 0)

357 
îrout
;

359 i‡(
tb
[
CTA_TUPLE_REPLY
]) {

360 
îr
 = 
	`˘_∑r£_tu∂e
(
˘
, 1, 
tb
[
CTA_TUPLE_REPLY
]);

361 i‡(
îr
 < 0)

362 
îrout
;

365 i‡(
tb
[
CTA_PROTOINFO
]) {

366 
îr
 = 
	`˘_∑r£_¥Ÿoöfo
(
˘
, 
tb
[
CTA_PROTOINFO
]);

367 i‡(
îr
 < 0)

368 
îrout
;

371 i‡(
tb
[
CTA_STATUS
])

372 
	`n‚l_˘_£t_°©us
(
˘
, 
	`¡ohl
(
	`∆a_gë_u32
(
tb
[
CTA_STATUS
])));

373 i‡(
tb
[
CTA_TIMEOUT
])

374 
	`n‚l_˘_£t_timeout
(
˘
, 
	`¡ohl
(
	`∆a_gë_u32
(
tb
[
CTA_TIMEOUT
])));

375 i‡(
tb
[
CTA_MARK
])

376 
	`n‚l_˘_£t_m¨k
(
˘
, 
	`¡ohl
(
	`∆a_gë_u32
(
tb
[
CTA_MARK
])));

377 i‡(
tb
[
CTA_USE
])

378 
	`n‚l_˘_£t_u£
(
˘
, 
	`¡ohl
(
	`∆a_gë_u32
(
tb
[
CTA_USE
])));

379 i‡(
tb
[
CTA_ID
])

380 
	`n‚l_˘_£t_id
(
˘
, 
	`¡ohl
(
	`∆a_gë_u32
(
tb
[
CTA_ID
])));

381 i‡(
tb
[
CTA_ZONE
])

382 
	`n‚l_˘_£t_z⁄e
(
˘
, 
	`¡ohs
(
	`∆a_gë_u16
(
tb
[
CTA_ZONE
])));

384 i‡(
tb
[
CTA_COUNTERS_ORIG
]) {

385 
îr
 = 
	`˘_∑r£_cou¡îs
(
˘
, 0, 
tb
[
CTA_COUNTERS_ORIG
]);

386 i‡(
îr
 < 0)

387 
îrout
;

390 i‡(
tb
[
CTA_COUNTERS_REPLY
]) {

391 
îr
 = 
	`˘_∑r£_cou¡îs
(
˘
, 1, 
tb
[
CTA_COUNTERS_REPLY
]);

392 i‡(
îr
 < 0)

393 
îrout
;

396 i‡(
tb
[
CTA_TIMESTAMP
]) {

397 
îr
 = 
	`˘_∑r£_time°amp
(
˘
, 
tb
[
CTA_TIMESTAMP
]);

398 i‡(
îr
 < 0)

399 
îrout
;

402 *
ªsu…
 = 
˘
;

405 
îrout
:

406 
	`n‚l_˘_put
(
˘
);

407  
îr
;

408 
	}
}

410 
	$˘_msg_∑r£r
(
∆_ˇche_›s
 *
›s
, 
sockaddr_∆
 *
who
,

411 
∆msghdr
 *
∆h
, 
∆_∑r£r_∑øm
 *
µ
)

413 
n‚l_˘
 *
˘
;

414 
îr
;

416 i‡((
îr
 = 
	`n‚lmsg_˘_∑r£
(
∆h
, &
˘
)) < 0)

417  
îr
;

419 
îr
 = 
µ
->
	`µ_cb
((
∆_obje˘
 *Ë
˘
,Öp);

420 
	`n‚l_˘_put
(
˘
);

421  
îr
;

422 
	}
}

424 
	$n‚l_˘_dump_ªque°
(
∆_sock
 *
sk
)

426  
	`n‚l_£nd_sim∂e
(
sk
, 
NFNL_SUBSYS_CTNETLINK
, 
IPCTNL_MSG_CT_GET
,

427 
NLM_F_DUMP
, 
AF_UNSPEC
, 0);

428 
	}
}

430 
	$˘_ªque°_upd©e
(
∆_ˇche
 *
ˇche
, 
∆_sock
 *
sk
)

432  
	`n‚l_˘_dump_ªque°
(
sk
);

433 
	}
}

435 
	$n‚l_˘_buûd_tu∂e
(
∆_msg
 *
msg
, c⁄° 
n‚l_˘
 *
˘
,

436 
ª∂
)

438 
∆©å
 *
tu∂e
, *
ù
, *
¥Ÿo
;

439 
∆_addr
 *
addr
;

440 
Ámûy
;

442 
Ámûy
 = 
	`n‚l_˘_gë_Ámûy
(
˘
);

444 
tu∂e
 = 
	`∆a_√°_°¨t
(
msg
, 
ª∂
 ? 
CTA_TUPLE_REPLY
 : 
CTA_TUPLE_ORIG
);

445 i‡(!
tu∂e
)

446 
∆a_put_Áûuª
;

448 
ù
 = 
	`∆a_√°_°¨t
(
msg
, 
CTA_TUPLE_IP
);

449 i‡(!
ù
)

450 
∆a_put_Áûuª
;

452 
addr
 = 
	`n‚l_˘_gë_§c
(
˘
, 
ª∂
);

453 i‡(
addr
)

454 
	`NLA_PUT_ADDR
(
msg
,

455 
Ámûy
 =
AF_INET
 ? 
CTA_IP_V4_SRC
 : 
CTA_IP_V6_SRC
,

456 
addr
);

458 
addr
 = 
	`n‚l_˘_gë_d°
(
˘
, 
ª∂
);

459 i‡(
addr
)

460 
	`NLA_PUT_ADDR
(
msg
,

461 
Ámûy
 =
AF_INET
 ? 
CTA_IP_V4_DST
 : 
CTA_IP_V6_DST
,

462 
addr
);

464 
	`∆a_√°_íd
(
msg
, 
ù
);

466 
¥Ÿo
 = 
	`∆a_√°_°¨t
(
msg
, 
CTA_TUPLE_PROTO
);

467 i‡(!
¥Ÿo
)

468 
∆a_put_Áûuª
;

470 i‡(
	`n‚l_˘_ã°_¥Ÿo
(
˘
))

471 
	`NLA_PUT_U8
(
msg
, 
CTA_PROTO_NUM
, 
	`n‚l_˘_gë_¥Ÿo
(
˘
));

473 i‡(
	`n‚l_˘_ã°_§c_p‹t
(
˘
, 
ª∂
))

474 
	`NLA_PUT_U16
(
msg
, 
CTA_PROTO_SRC_PORT
,

475 
	`ht⁄s
(
	`n‚l_˘_gë_§c_p‹t
(
˘
, 
ª∂
)));

477 i‡(
	`n‚l_˘_ã°_d°_p‹t
(
˘
, 
ª∂
))

478 
	`NLA_PUT_U16
(
msg
, 
CTA_PROTO_DST_PORT
,

479 
	`ht⁄s
(
	`n‚l_˘_gë_d°_p‹t
(
˘
, 
ª∂
)));

481 i‡(
Ámûy
 =
AF_INET
) {

482 i‡(
	`n‚l_˘_ã°_icmp_id
(
˘
, 
ª∂
))

483 
	`NLA_PUT_U16
(
msg
, 
CTA_PROTO_ICMP_ID
,

484 
	`ht⁄s
(
	`n‚l_˘_gë_icmp_id
(
˘
, 
ª∂
)));

486 i‡(
	`n‚l_˘_ã°_icmp_ty≥
(
˘
, 
ª∂
))

487 
	`NLA_PUT_U8
(
msg
, 
CTA_PROTO_ICMP_TYPE
,

488 
	`n‚l_˘_gë_icmp_ty≥
(
˘
, 
ª∂
));

490 i‡(
	`n‚l_˘_ã°_icmp_code
(
˘
, 
ª∂
))

491 
	`NLA_PUT_U8
(
msg
, 
CTA_PROTO_ICMP_CODE
,

492 
	`n‚l_˘_gë_icmp_code
(
˘
, 
ª∂
));

493 } i‡(
Ámûy
 =
AF_INET6
) {

494 i‡(
	`n‚l_˘_ã°_icmp_id
(
˘
, 
ª∂
))

495 
	`NLA_PUT_U16
(
msg
, 
CTA_PROTO_ICMPV6_ID
,

496 
	`ht⁄s
(
	`n‚l_˘_gë_icmp_id
(
˘
, 
ª∂
)));

498 i‡(
	`n‚l_˘_ã°_icmp_ty≥
(
˘
, 
ª∂
))

499 
	`NLA_PUT_U8
(
msg
, 
CTA_PROTO_ICMPV6_TYPE
,

500 
	`n‚l_˘_gë_icmp_ty≥
(
˘
, 
ª∂
));

502 i‡(
	`n‚l_˘_ã°_icmp_code
(
˘
, 
ª∂
))

503 
	`NLA_PUT_U8
(
msg
, 
CTA_PROTO_ICMPV6_CODE
,

504 
	`n‚l_˘_gë_icmp_code
(
˘
, 
ª∂
));

507 
	`∆a_√°_íd
(
msg
, 
¥Ÿo
);

509 
	`∆a_√°_íd
(
msg
, 
tu∂e
);

512 
∆a_put_Áûuª
:

513  -
NLE_MSGSIZE
;

514 
	}
}

516 
	$n‚l_˘_buûd_mesßge
(c⁄° 
n‚l_˘
 *
˘
, 
cmd
, 
Êags
,

517 
∆_msg
 **
ªsu…
)

519 
∆_msg
 *
msg
;

520 
îr
;

522 
msg
 = 
	`n‚lmsg_Æloc_sim∂e
(
NFNL_SUBSYS_CTNETLINK
, 
cmd
, 
Êags
,

523 
	`n‚l_˘_gë_Ámûy
(
˘
), 0);

524 i‡(
msg
 =
NULL
)

525  -
NLE_NOMEM
;

527 i‡((
îr
 = 
	`n‚l_˘_buûd_tu∂e
(
msg
, 
˘
, 0)) < 0)

528 
îr_out
;

532 i‡–
	`n‚l_˘_gë_§c
(
˘
, 1Ë&& 
	`n‚l_˘_gë_d°
(ct, 1) )

533 i‡((
îr
 = 
	`n‚l_˘_buûd_tu∂e
(
msg
, 
˘
, 1)) < 0)

534 
îr_out
;

536 i‡(
	`n‚l_˘_ã°_°©us
(
˘
))

537 
	`NLA_PUT_U32
(
msg
, 
CTA_STATUS
, 
	`ht⁄l
(
	`n‚l_˘_gë_°©us
(
˘
)));

539 i‡(
	`n‚l_˘_ã°_timeout
(
˘
))

540 
	`NLA_PUT_U32
(
msg
, 
CTA_TIMEOUT
, 
	`ht⁄l
(
	`n‚l_˘_gë_timeout
(
˘
)));

542 i‡(
	`n‚l_˘_ã°_m¨k
(
˘
))

543 
	`NLA_PUT_U32
(
msg
, 
CTA_MARK
, 
	`ht⁄l
(
	`n‚l_˘_gë_m¨k
(
˘
)));

545 i‡(
	`n‚l_˘_ã°_id
(
˘
))

546 
	`NLA_PUT_U32
(
msg
, 
CTA_ID
, 
	`ht⁄l
(
	`n‚l_˘_gë_id
(
˘
)));

548 i‡(
	`n‚l_˘_ã°_z⁄e
(
˘
))

549 
	`NLA_PUT_U16
(
msg
, 
CTA_ZONE
, 
	`ht⁄s
(
	`n‚l_˘_gë_z⁄e
(
˘
)));

551 *
ªsu…
 = 
msg
;

554 
∆a_put_Áûuª
:

555 
îr_out
:

556 
	`∆msg_‰ì
(
msg
);

557  
îr
;

558 
	}
}

560 
	$n‚l_˘_buûd_add_ªque°
(c⁄° 
n‚l_˘
 *
˘
, 
Êags
,

561 
∆_msg
 **
ªsu…
)

563  
	`n‚l_˘_buûd_mesßge
(
˘
, 
IPCTNL_MSG_CT_NEW
, 
Êags
, 
ªsu…
);

564 
	}
}

566 
	$n‚l_˘_add
(
∆_sock
 *
sk
, c⁄° 
n‚l_˘
 *
˘
, 
Êags
)

568 
∆_msg
 *
msg
;

569 
îr
;

571 i‡((
îr
 = 
	`n‚l_˘_buûd_add_ªque°
(
˘
, 
Êags
, &
msg
)) < 0)

572  
îr
;

574 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sk
, 
msg
);

575 
	`∆msg_‰ì
(
msg
);

576 i‡(
îr
 < 0)

577  
îr
;

579  
	`waô_f‹_ack
(
sk
);

580 
	}
}

582 
	$n‚l_˘_buûd_dñëe_ªque°
(c⁄° 
n‚l_˘
 *
˘
, 
Êags
,

583 
∆_msg
 **
ªsu…
)

585  
	`n‚l_˘_buûd_mesßge
(
˘
, 
IPCTNL_MSG_CT_DELETE
, 
Êags
, 
ªsu…
);

586 
	}
}

588 
	$n‚l_˘_dñ
(
∆_sock
 *
sk
, c⁄° 
n‚l_˘
 *
˘
, 
Êags
)

590 
∆_msg
 *
msg
;

591 
îr
;

593 i‡((
îr
 = 
	`n‚l_˘_buûd_dñëe_ªque°
(
˘
, 
Êags
, &
msg
)) < 0)

594  
îr
;

596 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sk
, 
msg
);

597 
	`∆msg_‰ì
(
msg
);

598 i‡(
îr
 < 0)

599  
îr
;

601  
	`waô_f‹_ack
(
sk
);

602 
	}
}

604 
	$n‚l_˘_buûd_quîy_ªque°
(c⁄° 
n‚l_˘
 *
˘
, 
Êags
,

605 
∆_msg
 **
ªsu…
)

607  
	`n‚l_˘_buûd_mesßge
(
˘
, 
IPCTNL_MSG_CT_GET
, 
Êags
, 
ªsu…
);

608 
	}
}

610 
	$n‚l_˘_quîy
(
∆_sock
 *
sk
, c⁄° 
n‚l_˘
 *
˘
, 
Êags
)

612 
∆_msg
 *
msg
;

613 
îr
;

615 i‡((
îr
 = 
	`n‚l_˘_buûd_quîy_ªque°
(
˘
, 
Êags
, &
msg
)) < 0)

616  
îr
;

618 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sk
, 
msg
);

619 
	`∆msg_‰ì
(
msg
);

620 i‡(
îr
 < 0)

621  
îr
;

623  
	`waô_f‹_ack
(
sk
);

624 
	}
}

641 
	$n‚l_˘_Æloc_ˇche
(
∆_sock
 *
sk
, 
∆_ˇche
 **
ªsu…
)

643  
	`∆_ˇche_Æloc_™d_fûl
(&
n‚l_˘_›s
, 
sk
, 
ªsu…
);

644 
	}
}

655 
∆_af_group
 
	g˘_groups
[] = {

656 { 
AF_UNSPEC
, 
NFNLGRP_CONNTRACK_NEW
 },

657 { 
AF_UNSPEC
, 
NFNLGRP_CONNTRACK_UPDATE
 },

658 { 
AF_UNSPEC
, 
NFNLGRP_CONNTRACK_DESTROY
 },

659 { 
END_OF_GROUP_LIST
 },

662 
	#NFNLMSG_CT_TYPE
(
ty≥
Ë
	`NFNLMSG_TYPE
(
NFNL_SUBSYS_CTNETLINK
, (ty≥))

	)

663 
∆_ˇche_›s
 
	gn‚l_˘_›s
 = {

664 .
co_«me
 = "netfilter/ct",

665 .
	gco_hdrsize
 = 
NFNL_HDRLEN
,

666 .
	gco_msgty≥s
 = {

667 { 
NFNLMSG_CT_TYPE
(
IPCTNL_MSG_CT_NEW
), 
NL_ACT_NEW
, "new" },

668 { 
NFNLMSG_CT_TYPE
(
IPCTNL_MSG_CT_GET
), 
NL_ACT_GET
, "get" },

669 { 
NFNLMSG_CT_TYPE
(
IPCTNL_MSG_CT_DELETE
), 
NL_ACT_DEL
, "del" },

670 
END_OF_MSGTYPES_LIST
,

672 .
	gco_¥Ÿocﬁ
 = 
NETLINK_NETFILTER
,

673 .
	gco_groups
 = 
˘_groups
,

674 .
	gco_ªque°_upd©e
 = 
˘_ªque°_upd©e
,

675 .
	gco_msg_∑r£r
 = 
˘_msg_∑r£r
,

676 .
	gco_obj_›s
 = &
˘_obj_›s
,

679 
__öô
 
	$˘_öô
()

681 
	`∆_ˇche_mngt_ªgi°î
(&
n‚l_˘_›s
);

682 
	}
}

684 
__exô
 
	$˘_exô
()

686 
	`∆_ˇche_mngt_uƒegi°î
(&
n‚l_˘_›s
);

687 
	}
}

	@mylibnl/libnl-3.2.25/lib/netfilter/ct_obj.c

14 
	~<sys/ty≥s.h
>

15 
	~<löux/√tfûãr/n‚ëlök_c⁄¡øck.h
>

16 
	~<löux/√tfûãr/nf_c⁄¡øck_comm⁄.h
>

17 
	~<löux/√tfûãr/nf_c⁄¡øck_t˝.h
>

19 
	~<√éök-¥iv©e/√éök.h
>

20 
	~<√éök/√tfûãr/n‚l.h
>

21 
	~<√éök/√tfûãr/˘.h
>

24 
	#CT_ATTR_FAMILY
 (1UL << 0)

	)

25 
	#CT_ATTR_PROTO
 (1UL << 1)

	)

27 
	#CT_ATTR_TCP_STATE
 (1UL << 2)

	)

29 
	#CT_ATTR_STATUS
 (1UL << 3)

	)

30 
	#CT_ATTR_TIMEOUT
 (1UL << 4)

	)

31 
	#CT_ATTR_MARK
 (1UL << 5)

	)

32 
	#CT_ATTR_USE
 (1UL << 6)

	)

33 
	#CT_ATTR_ID
 (1UL << 7)

	)

35 
	#CT_ATTR_ORIG_SRC
 (1UL << 8)

	)

36 
	#CT_ATTR_ORIG_DST
 (1UL << 9)

	)

37 
	#CT_ATTR_ORIG_SRC_PORT
 (1UL << 10)

	)

38 
	#CT_ATTR_ORIG_DST_PORT
 (1UL << 11)

	)

39 
	#CT_ATTR_ORIG_ICMP_ID
 (1UL << 12)

	)

40 
	#CT_ATTR_ORIG_ICMP_TYPE
 (1UL << 13)

	)

41 
	#CT_ATTR_ORIG_ICMP_CODE
 (1UL << 14)

	)

42 
	#CT_ATTR_ORIG_PACKETS
 (1UL << 15)

	)

43 
	#CT_ATTR_ORIG_BYTES
 (1UL << 16)

	)

45 
	#CT_ATTR_REPL_SRC
 (1UL << 17)

	)

46 
	#CT_ATTR_REPL_DST
 (1UL << 18)

	)

47 
	#CT_ATTR_REPL_SRC_PORT
 (1UL << 19)

	)

48 
	#CT_ATTR_REPL_DST_PORT
 (1UL << 20)

	)

49 
	#CT_ATTR_REPL_ICMP_ID
 (1UL << 21)

	)

50 
	#CT_ATTR_REPL_ICMP_TYPE
 (1UL << 22)

	)

51 
	#CT_ATTR_REPL_ICMP_CODE
 (1UL << 23)

	)

52 
	#CT_ATTR_REPL_PACKETS
 (1UL << 24)

	)

53 
	#CT_ATTR_REPL_BYTES
 (1UL << 25)

	)

54 
	#CT_ATTR_TIMESTAMP
 (1UL << 26)

	)

55 
	#CT_ATTR_ZONE
 (1UL << 27)

	)

58 
	$˘_‰ì_d©a
(
∆_obje˘
 *
c
)

60 
n‚l_˘
 *
˘
 = (n‚l_˘ *Ë
c
;

62 i‡(
˘
 =
NULL
)

65 
	`∆_addr_put
(
˘
->
˘_‹ig
.
§c
);

66 
	`∆_addr_put
(
˘
->
˘_‹ig
.
d°
);

67 
	`∆_addr_put
(
˘
->
˘_ª∂
.
§c
);

68 
	`∆_addr_put
(
˘
->
˘_ª∂
.
d°
);

69 
	}
}

71 
	$˘_˛⁄e
(
∆_obje˘
 *
_d°
, ∆_obje˘ *
_§c
)

73 
n‚l_˘
 *
d°
 = (n‚l_˘ *Ë
_d°
;

74 
n‚l_˘
 *
§c
 = (n‚l_˘ *Ë
_§c
;

75 
∆_addr
 *
addr
;

77 i‡(
§c
->
˘_‹ig
.src) {

78 
addr
 = 
	`∆_addr_˛⁄e
(
§c
->
˘_‹ig
.src);

79 i‡(!
addr
)

80  -
NLE_NOMEM
;

81 
d°
->
˘_‹ig
.
§c
 = 
addr
;

84 i‡(
§c
->
˘_‹ig
.
d°
) {

85 
addr
 = 
	`∆_addr_˛⁄e
(
§c
->
˘_‹ig
.
d°
);

86 i‡(!
addr
)

87  -
NLE_NOMEM
;

88 
d°
->
˘_‹ig
.d° = 
addr
;

91 i‡(
§c
->
˘_ª∂
.src) {

92 
addr
 = 
	`∆_addr_˛⁄e
(
§c
->
˘_ª∂
.src);

93 i‡(!
addr
)

94  -
NLE_NOMEM
;

95 
d°
->
˘_ª∂
.
§c
 = 
addr
;

98 i‡(
§c
->
˘_ª∂
.
d°
) {

99 
addr
 = 
	`∆_addr_˛⁄e
(
§c
->
˘_ª∂
.
d°
);

100 i‡(!
addr
)

101  -
NLE_NOMEM
;

102 
d°
->
˘_ª∂
.d° = 
addr
;

106 
	}
}

108 
	$dump_addr
(
∆_dump_∑øms
 *
p
, 
∆_addr
 *
addr
, 
p‹t
)

110 
buf
[64];

112 i‡(
addr
)

113 
	`∆_dump
(
p
, "%s", 
	`∆_addr2°r
(
addr
, 
buf
, (buf)));

115 i‡(
p‹t
)

116 
	`∆_dump
(
p
, ":%u ", 
p‹t
);

117 i‡(
addr
)

118 
	`∆_dump
(
p
, " ");

119 
	}
}

121 
	$dump_icmp
(
∆_dump_∑øms
 *
p
, 
n‚l_˘
 *
˘
, 
ª∂y
)

123 i‡(
	`n‚l_˘_ã°_icmp_ty≥
(
˘
, 
ª∂y
))

124 
	`∆_dump
(
p
, "icm∞ty≥ %d ", 
	`n‚l_˘_gë_icmp_ty≥
(
˘
, 
ª∂y
));

126 i‡(
	`n‚l_˘_ã°_icmp_code
(
˘
, 
ª∂y
))

127 
	`∆_dump
(
p
, "codê%d ", 
	`n‚l_˘_gë_icmp_code
(
˘
, 
ª∂y
));

129 i‡(
	`n‚l_˘_ã°_icmp_id
(
˘
, 
ª∂y
))

130 
	`∆_dump
(
p
, "id %d ", 
	`n‚l_˘_gë_icmp_id
(
˘
, 
ª∂y
));

131 
	}
}

133 
	$˘_dump_tu∂es
(
n‚l_˘
 *
˘
, 
∆_dump_∑øms
 *
p
)

135 
∆_addr
 *
‹ig_§c
, *
‹ig_d°
, *
ª∂y_§c
, *
ª∂y_d°
;

136 
‹ig_•‹t
 = 0, 
‹ig_dp‹t
 = 0, 
ª∂y_•‹t
 = 0, 
ª∂y_dp‹t
 = 0;

137 
sync
 = 0;

139 
‹ig_§c
 = 
	`n‚l_˘_gë_§c
(
˘
, 0);

140 
‹ig_d°
 = 
	`n‚l_˘_gë_d°
(
˘
, 0);

141 
ª∂y_§c
 = 
	`n‚l_˘_gë_§c
(
˘
, 1);

142 
ª∂y_d°
 = 
	`n‚l_˘_gë_d°
(
˘
, 1);

144 i‡(
	`n‚l_˘_ã°_§c_p‹t
(
˘
, 0))

145 
‹ig_•‹t
 = 
	`n‚l_˘_gë_§c_p‹t
(
˘
, 0);

147 i‡(
	`n‚l_˘_ã°_d°_p‹t
(
˘
, 0))

148 
‹ig_dp‹t
 = 
	`n‚l_˘_gë_d°_p‹t
(
˘
, 0);

150 i‡(
	`n‚l_˘_ã°_§c_p‹t
(
˘
, 1))

151 
ª∂y_•‹t
 = 
	`n‚l_˘_gë_§c_p‹t
(
˘
, 1);

153 i‡(
	`n‚l_˘_ã°_d°_p‹t
(
˘
, 1))

154 
ª∂y_dp‹t
 = 
	`n‚l_˘_gë_d°_p‹t
(
˘
, 1);

156 i‡(
‹ig_§c
 && 
‹ig_d°
 && 
ª∂y_§c
 && 
ª∂y_d°
 &&

157 
‹ig_•‹t
 =
ª∂y_dp‹t
 && 
‹ig_dp‹t
 =
ª∂y_•‹t
 &&

158 !
	`∆_addr_cmp
(
‹ig_§c
, 
ª∂y_d°
) &&

159 !
	`∆_addr_cmp
(
‹ig_d°
, 
ª∂y_§c
))

160 
sync
 = 1;

162 
	`dump_addr
(
p
, 
‹ig_§c
, 
‹ig_•‹t
);

163 
	`∆_dump
(
p
, 
sync
 ? "<-> " : "-> ");

164 
	`dump_addr
(
p
, 
‹ig_d°
, 
‹ig_dp‹t
);

165 
	`dump_icmp
(
p
, 
˘
, 0);

167 i‡(!
sync
) {

168 
	`dump_addr
(
p
, 
ª∂y_§c
, 
ª∂y_•‹t
);

169 
	`∆_dump
(
p
, "<- ");

170 
	`dump_addr
(
p
, 
ª∂y_d°
, 
ª∂y_dp‹t
);

171 
	`dump_icmp
(
p
, 
˘
, 1);

173 
	}
}

176 
	$˘_dump_löe
(
∆_obje˘
 *
a
, 
∆_dump_∑øms
 *
p
)

178 
n‚l_˘
 *
˘
 = (n‚l_˘ *Ë
a
;

179 
buf
[64];

181 
	`∆_√w_löe
(
p
);

183 i‡(
	`n‚l_˘_ã°_¥Ÿo
(
˘
))

184 
	`∆_dump
(
p
, "%s ",

185 
	`∆_ù_¥Ÿo2°r
(
	`n‚l_˘_gë_¥Ÿo
(
˘
), 
buf
, (buf)));

187 i‡(
	`n‚l_˘_ã°_t˝_°©e
(
˘
))

188 
	`∆_dump
(
p
, "%s ",

189 
	`n‚l_˘_t˝_°©e2°r
(
	`n‚l_˘_gë_t˝_°©e
(
˘
),

190 
buf
, (buf)));

192 
	`˘_dump_tu∂es
(
˘
, 
p
);

194 i‡(
	`n‚l_˘_ã°_m¨k
(
˘
Ë&& 
	`n‚l_˘_gë_m¨k
(ct))

195 
	`∆_dump
(
p
, "m¨k %u ", 
	`n‚l_˘_gë_m¨k
(
˘
));

197 i‡(
	`n‚l_˘_ã°_z⁄e
(
˘
))

198 
	`∆_dump
(
p
, "z⁄ê%hu ", 
	`n‚l_˘_gë_z⁄e
(
˘
));

200 i‡(
	`n‚l_˘_ã°_time°amp
(
˘
)) {

201 c⁄° 
n‚l_˘_time°amp
 *
t°amp
 = 
	`n‚l_˘_gë_time°amp
(
˘
);

202 
öt64_t
 
dñè_time
 = 
t°amp
->
°›
 -Å°amp->
°¨t
;

204 i‡(
dñè_time
 > 0)

205 
dñè_time
 /
NSEC_PER_SEC
;

207 
dñè_time
 = 0;

208 
	`∆_dump
(
p
, "dñè-timê%Œu ", 
dñè_time
);

211 
	`∆_dump
(
p
, "\n");

212 
	}
}

214 
	$˘_dump_dëaûs
(
∆_obje˘
 *
a
, 
∆_dump_∑øms
 *
p
)

216 
n‚l_˘
 *
˘
 = (n‚l_˘ *Ë
a
;

217 
buf
[64];

218 
Â
 = 0;

220 
	`˘_dump_löe
(
a
, 
p
);

222 
	`∆_dump
(
p
, " id 0x%x ", 
˘
->
˘_id
);

223 
	`∆_dump_löe
(
p
, "family %s ",

224 
	`∆_af2°r
(
˘
->
˘_Ámûy
, 
buf
, (buf)));

226 i‡(
	`n‚l_˘_ã°_u£
(
˘
))

227 
	`∆_dump
(
p
, "ªf˙à%u ", 
	`n‚l_˘_gë_u£
(
˘
));

229 i‡(
	`n‚l_˘_ã°_timeout
(
˘
)) {

230 
uöt64_t
 
timeout_ms
 = 
	`n‚l_˘_gë_timeout
(
˘
) * 1000UL;

231 
	`∆_dump
(
p
, "timeout %s ",

232 
	`∆_m£c2°r
(
timeout_ms
, 
buf
, (buf)));

235 i‡(
˘
->
˘_°©us
)

236 
	`∆_dump
(
p
, "<");

238 
	#PRINT_FLAG
(
°r
) \

239 { 
	`∆_dump
(
p
, "%s%s", 
Â
++ ? "," : "", (
°r
)); }

	)

241 i‡(
˘
->
˘_°©us
 & 
IPS_EXPECTED
)

242 
	`PRINT_FLAG
("EXPECTED");

243 i‡(!(
˘
->
˘_°©us
 & 
IPS_SEEN_REPLY
))

244 
	`PRINT_FLAG
("NOREPLY");

245 i‡(
˘
->
˘_°©us
 & 
IPS_ASSURED
)

246 
	`PRINT_FLAG
("ASSURED");

247 i‡(!(
˘
->
˘_°©us
 & 
IPS_CONFIRMED
))

248 
	`PRINT_FLAG
("NOTSENT");

249 i‡(
˘
->
˘_°©us
 & 
IPS_SRC_NAT
)

250 
	`PRINT_FLAG
("SNAT");

251 i‡(
˘
->
˘_°©us
 & 
IPS_DST_NAT
)

252 
	`PRINT_FLAG
("DNAT");

253 i‡(
˘
->
˘_°©us
 & 
IPS_SEQ_ADJUST
)

254 
	`PRINT_FLAG
("SEQADJUST");

255 i‡(!(
˘
->
˘_°©us
 & 
IPS_SRC_NAT_DONE
))

256 
	`PRINT_FLAG
("SNAT_INIT");

257 i‡(!(
˘
->
˘_°©us
 & 
IPS_DST_NAT_DONE
))

258 
	`PRINT_FLAG
("DNAT_INIT");

259 i‡(
˘
->
˘_°©us
 & 
IPS_DYING
)

260 
	`PRINT_FLAG
("DYING");

261 i‡(
˘
->
˘_°©us
 & 
IPS_FIXED_TIMEOUT
)

262 
	`PRINT_FLAG
("FIXED_TIMEOUT");

263 #unde‡
PRINT_FLAG


265 i‡(
˘
->
˘_°©us
)

266 
	`∆_dump
(
p
, ">");

267 
	`∆_dump
(
p
, "\n");

268 
	}
}

270 
	$˘_dump_°©s
(
∆_obje˘
 *
a
, 
∆_dump_∑øms
 *
p
)

272 
n‚l_˘
 *
˘
 = (n‚l_˘ *Ë
a
;

273 
ªs
;

274 *
unô
;

275 
uöt64_t
 
∑ckës
;

276 c⁄° * c⁄° 
«mes
[] = {"rx", "tx"};

277 
i
;

279 
	`˘_dump_dëaûs
(
a
, 
p
);

281 i‡(!
	`n‚l_˘_ã°_byãs
(
˘
, 0) ||

282 !
	`n‚l_˘_ã°_∑ckës
(
˘
, 0) ||

283 !
	`n‚l_˘_ã°_byãs
(
˘
, 1) ||

284 !
	`n‚l_˘_ã°_∑ckës
(
˘
, 1))

286 
	`∆_dump_löe
(
p
, " StatisticsáreÇotávailable.\n");

287 
	`∆_dump_löe
(
p
, " Please set sysctlÇet.netfilter.nf_conntrack_acct=1\n");

288 
	`∆_dump_löe
(
p
, " (Require kernel 2.6.27)\n");

292 
	`∆_dump_löe
(
p
, " #Öackets volume\n");

293 
i
=0; i<=1; i++) {

294 
ªs
 = 
	`∆_ˇn˚l_down_byãs
(
	`n‚l_˘_gë_byãs
(
˘
, 
i
), &
unô
);

295 
∑ckës
 = 
	`n‚l_˘_gë_∑ckës
(
˘
, 
i
);

296 
	`∆_dump_löe
(
p
, " %†%10" 
PRIu64
 " %7.2‡%s\n", 
«mes
[
i
], 
∑ckës
, 
ªs
, 
unô
);

298 
	}
}

300 
	$˘_com∑ª
(
∆_obje˘
 *
_a
, ∆_obje˘ *
_b
,

301 
uöt32_t
 
©ås
, 
Êags
)

303 
n‚l_˘
 *
a
 = (n‚l_˘ *Ë
_a
;

304 
n‚l_˘
 *
b
 = (n‚l_˘ *Ë
_b
;

305 
diff
 = 0;

307 
	#CT_DIFF
(
ATTR
, 
EXPR
Ë
	`ATTR_DIFF
(
©ås
, 
CT_ATTR_
##ATTR, 
a
, 
b
, EXPR)

	)

308 
	#CT_DIFF_VAL
(
ATTR
, 
FIELD
Ë
	`CT_DIFF
(ATTR, 
a
->FIELD !
b
->FIELD)

	)

309 
	#CT_DIFF_ADDR
(
ATTR
, 
FIELD
) \

310 ((
Êags
 & 
LOOSE_COMPARISON
) \

311 ? 
	`CT_DIFF
(
ATTR
, 
	`∆_addr_cmp_¥efix
(
a
->
FIELD
, 
b
->FIELD)) \

312 : 
	`CT_DIFF
(
ATTR
, 
	`∆_addr_cmp
(
a
->
FIELD
, 
b
->FIELD)))

	)

314 
diff
 |
	`CT_DIFF_VAL
(
FAMILY
, 
˘_Ámûy
);

315 
diff
 |
	`CT_DIFF_VAL
(
PROTO
, 
˘_¥Ÿo
);

316 
diff
 |
	`CT_DIFF_VAL
(
TCP_STATE
, 
˘_¥Ÿoöfo
.
t˝
.
°©e
);

317 
diff
 |
	`CT_DIFF_VAL
(
TIMEOUT
, 
˘_timeout
);

318 
diff
 |
	`CT_DIFF_VAL
(
MARK
, 
˘_m¨k
);

319 
diff
 |
	`CT_DIFF_VAL
(
USE
, 
˘_u£
);

320 
diff
 |
	`CT_DIFF_VAL
(
ID
, 
˘_id
);

321 
diff
 |
	`CT_DIFF_ADDR
(
ORIG_SRC
, 
˘_‹ig
.
§c
);

322 
diff
 |
	`CT_DIFF_ADDR
(
ORIG_DST
, 
˘_‹ig
.
d°
);

323 
diff
 |
	`CT_DIFF_VAL
(
ORIG_SRC_PORT
, 
˘_‹ig
.
¥Ÿo
.
p‹t
.
§c
);

324 
diff
 |
	`CT_DIFF_VAL
(
ORIG_DST_PORT
, 
˘_‹ig
.
¥Ÿo
.
p‹t
.
d°
);

325 
diff
 |
	`CT_DIFF_VAL
(
ORIG_ICMP_ID
, 
˘_‹ig
.
¥Ÿo
.
icmp
.
id
);

326 
diff
 |
	`CT_DIFF_VAL
(
ORIG_ICMP_TYPE
, 
˘_‹ig
.
¥Ÿo
.
icmp
.
ty≥
);

327 
diff
 |
	`CT_DIFF_VAL
(
ORIG_ICMP_CODE
, 
˘_‹ig
.
¥Ÿo
.
icmp
.
code
);

328 
diff
 |
	`CT_DIFF_VAL
(
ORIG_PACKETS
, 
˘_‹ig
.
∑ckës
);

329 
diff
 |
	`CT_DIFF_VAL
(
ORIG_BYTES
, 
˘_‹ig
.
byãs
);

330 
diff
 |
	`CT_DIFF_ADDR
(
REPL_SRC
, 
˘_ª∂
.
§c
);

331 
diff
 |
	`CT_DIFF_ADDR
(
REPL_DST
, 
˘_ª∂
.
d°
);

332 
diff
 |
	`CT_DIFF_VAL
(
REPL_SRC_PORT
, 
˘_ª∂
.
¥Ÿo
.
p‹t
.
§c
);

333 
diff
 |
	`CT_DIFF_VAL
(
REPL_DST_PORT
, 
˘_ª∂
.
¥Ÿo
.
p‹t
.
d°
);

334 
diff
 |
	`CT_DIFF_VAL
(
REPL_ICMP_ID
, 
˘_ª∂
.
¥Ÿo
.
icmp
.
id
);

335 
diff
 |
	`CT_DIFF_VAL
(
REPL_ICMP_TYPE
, 
˘_ª∂
.
¥Ÿo
.
icmp
.
ty≥
);

336 
diff
 |
	`CT_DIFF_VAL
(
REPL_ICMP_CODE
, 
˘_ª∂
.
¥Ÿo
.
icmp
.
code
);

337 
diff
 |
	`CT_DIFF_VAL
(
REPL_PACKETS
, 
˘_ª∂
.
∑ckës
);

338 
diff
 |
	`CT_DIFF_VAL
(
REPL_BYTES
, 
˘_ª∂
.
byãs
);

340 i‡(
Êags
 & 
LOOSE_COMPARISON
)

341 
diff
 |
	`CT_DIFF
(
STATUS
, (
a
->
˘_°©us
 ^ 
b
->ct_status) &

342 
b
->
˘_°©us_mask
);

344 
diff
 |
	`CT_DIFF
(
STATUS
, 
a
->
˘_°©us
 !
b
->ct_status);

346 #unde‡
CT_DIFF


347 #unde‡
CT_DIFF_VAL


348 #unde‡
CT_DIFF_ADDR


350  
diff
;

351 
	}
}

353 c⁄° 
å™s_tbl
 
	g˘_©ås
[] = {

354 
__ADD
(
CT_ATTR_FAMILY
, 
Ámûy
)

355 
__ADD
(
CT_ATTR_PROTO
, 
¥Ÿo
)

356 
__ADD
(
CT_ATTR_TCP_STATE
, 
t˝°©e
)

357 
__ADD
(
CT_ATTR_STATUS
, 
°©us
)

358 
__ADD
(
CT_ATTR_TIMEOUT
, 
timeout
)

359 
__ADD
(
CT_ATTR_MARK
, 
m¨k
)

360 
__ADD
(
CT_ATTR_USE
, 
u£
)

361 
__ADD
(
CT_ATTR_ID
, 
id
)

362 
__ADD
(
CT_ATTR_ORIG_SRC
, 
‹ig§c
)

363 
__ADD
(
CT_ATTR_ORIG_DST
, 
‹igd°
)

364 
__ADD
(
CT_ATTR_ORIG_SRC_PORT
, 
‹ig§˝‹t
)

365 
__ADD
(
CT_ATTR_ORIG_DST_PORT
, 
‹igd°p‹t
)

366 
__ADD
(
CT_ATTR_ORIG_ICMP_ID
, 
‹igicmpid
)

367 
__ADD
(
CT_ATTR_ORIG_ICMP_TYPE
, 
‹igicm±y≥
)

368 
__ADD
(
CT_ATTR_ORIG_ICMP_CODE
, 
‹igicmpcode
)

369 
__ADD
(
CT_ATTR_ORIG_PACKETS
, 
‹ig∑ckës
)

370 
__ADD
(
CT_ATTR_ORIG_BYTES
, 
‹igbyãs
)

371 
__ADD
(
CT_ATTR_REPL_SRC
, 
ª∂y§c
)

372 
__ADD
(
CT_ATTR_REPL_DST
, 
ª∂yd°
)

373 
__ADD
(
CT_ATTR_REPL_SRC_PORT
, 
ª∂y§˝‹t
)

374 
__ADD
(
CT_ATTR_REPL_DST_PORT
, 
ª∂yd°p‹t
)

375 
__ADD
(
CT_ATTR_REPL_ICMP_ID
, 
ª∂yicmpid
)

376 
__ADD
(
CT_ATTR_REPL_ICMP_TYPE
, 
ª∂yicm±y≥
)

377 
__ADD
(
CT_ATTR_REPL_ICMP_CODE
, 
ª∂yicmpcode
)

378 
__ADD
(
CT_ATTR_REPL_PACKETS
, 
ª∂y∑ckës
)

379 
__ADD
(
CT_ATTR_REPL_BYTES
, 
ª∂ybyãs
)

382 *
	$˘_©ås2°r
(
©ås
, *
buf
, 
size_t
 
Àn
)

384  
	`__Êags2°r
(
©ås
, 
buf
, 
Àn
, 
˘_©ås
, 
	`ARRAY_SIZE
(ct_attrs));

385 
	}
}

392 
n‚l_˘
 *
	$n‚l_˘_Æloc
()

394  (
n‚l_˘
 *Ë
	`∆_obje˘_Æloc
(&
˘_obj_›s
);

395 
	}
}

397 
	$n‚l_˘_gë
(
n‚l_˘
 *
˘
)

399 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
˘
);

400 
	}
}

402 
	$n‚l_˘_put
(
n‚l_˘
 *
˘
)

404 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
˘
);

405 
	}
}

414 
	$n‚l_˘_£t_Ámûy
(
n‚l_˘
 *
˘
, 
uöt8_t
 
Ámûy
)

416 
˘
->
˘_Ámûy
 = 
Ámûy
;

417 
˘
->
˚_mask
 |
CT_ATTR_FAMILY
;

418 
	}
}

420 
uöt8_t
 
	$n‚l_˘_gë_Ámûy
(c⁄° 
n‚l_˘
 *
˘
)

422 i‡(
˘
->
˚_mask
 & 
CT_ATTR_FAMILY
)

423  
˘
->
˘_Ámûy
;

425  
AF_UNSPEC
;

426 
	}
}

428 
	$n‚l_˘_£t_¥Ÿo
(
n‚l_˘
 *
˘
, 
uöt8_t
 
¥Ÿo
)

430 
˘
->
˘_¥Ÿo
 = 
¥Ÿo
;

431 
˘
->
˚_mask
 |
CT_ATTR_PROTO
;

432 
	}
}

434 
	$n‚l_˘_ã°_¥Ÿo
(c⁄° 
n‚l_˘
 *
˘
)

436  !!(
˘
->
˚_mask
 & 
CT_ATTR_PROTO
);

437 
	}
}

439 
uöt8_t
 
	$n‚l_˘_gë_¥Ÿo
(c⁄° 
n‚l_˘
 *
˘
)

441  
˘
->
˘_¥Ÿo
;

442 
	}
}

444 
	$n‚l_˘_£t_t˝_°©e
(
n‚l_˘
 *
˘
, 
uöt8_t
 
°©e
)

446 
˘
->
˘_¥Ÿoöfo
.
t˝
.
°©e
 = state;

447 
˘
->
˚_mask
 |
CT_ATTR_TCP_STATE
;

448 
	}
}

450 
	$n‚l_˘_ã°_t˝_°©e
(c⁄° 
n‚l_˘
 *
˘
)

452  !!(
˘
->
˚_mask
 & 
CT_ATTR_TCP_STATE
);

453 
	}
}

455 
uöt8_t
 
	$n‚l_˘_gë_t˝_°©e
(c⁄° 
n‚l_˘
 *
˘
)

457  
˘
->
˘_¥Ÿoöfo
.
t˝
.
°©e
;

458 
	}
}

460 c⁄° 
å™s_tbl
 
	gt˝_°©es
[] = {

461 
__ADD
(
TCP_CONNTRACK_NONE
,
NONE
)

462 
__ADD
(
TCP_CONNTRACK_SYN_SENT
,
SYN_SENT
)

463 
__ADD
(
TCP_CONNTRACK_SYN_RECV
,
SYN_RECV
)

464 
__ADD
(
TCP_CONNTRACK_ESTABLISHED
,
ESTABLISHED
)

465 
__ADD
(
TCP_CONNTRACK_FIN_WAIT
,
FIN_WAIT
)

466 
__ADD
(
TCP_CONNTRACK_CLOSE_WAIT
,
CLOSE_WAIT
)

467 
__ADD
(
TCP_CONNTRACK_LAST_ACK
,
LAST_ACK
)

468 
__ADD
(
TCP_CONNTRACK_TIME_WAIT
,
TIME_WAIT
)

469 
__ADD
(
TCP_CONNTRACK_CLOSE
,
CLOSE
)

470 
__ADD
(
TCP_CONNTRACK_LISTEN
,
LISTEN
)

473 *
	$n‚l_˘_t˝_°©e2°r
(
uöt8_t
 
°©e
, *
buf
, 
size_t
 
Àn
)

475  
	`__ty≥2°r
(
°©e
, 
buf
, 
Àn
, 
t˝_°©es
, 
	`ARRAY_SIZE
(tcp_states));

476 
	}
}

478 
	$n‚l_˘_°r2t˝_°©e
(c⁄° *
«me
)

480  
	`__°r2ty≥
(
«me
, 
t˝_°©es
, 
	`ARRAY_SIZE
(tcp_states));

481 
	}
}

483 
	$n‚l_˘_£t_°©us
(
n‚l_˘
 *
˘
, 
uöt32_t
 
°©us
)

485 
˘
->
˘_°©us_mask
 |
°©us
;

486 
˘
->
˘_°©us
 |
°©us
;

487 
˘
->
˚_mask
 |
CT_ATTR_STATUS
;

488 
	}
}

490 
	$n‚l_˘_un£t_°©us
(
n‚l_˘
 *
˘
, 
uöt32_t
 
°©us
)

492 
˘
->
˘_°©us_mask
 |
°©us
;

493 
˘
->
˘_°©us
 &~
°©us
;

494 
˘
->
˚_mask
 |
CT_ATTR_STATUS
;

495 
	}
}

497 
	$n‚l_˘_ã°_°©us
(c⁄° 
n‚l_˘
 *
˘
)

499  !!(
˘
->
˚_mask
 & 
CT_ATTR_STATUS
);

500 
	}
}

502 
uöt32_t
 
	$n‚l_˘_gë_°©us
(c⁄° 
n‚l_˘
 *
˘
)

504  
˘
->
˘_°©us
;

505 
	}
}

507 c⁄° 
å™s_tbl
 
	g°©us_Êags
[] = {

508 
__ADD
(
IPS_EXPECTED
, 
ex≥˘ed
)

509 
__ADD
(
IPS_SEEN_REPLY
, 
£í_ª∂y
)

510 
__ADD
(
IPS_ASSURED
, 
assuªd
)

511 
__ADD
(
IPS_CONFIRMED
, 
c⁄fúmed
)

512 
__ADD
(
IPS_SRC_NAT
, 
¢©
)

513 
__ADD
(
IPS_DST_NAT
, 
d«t
)

514 
__ADD
(
IPS_SEQ_ADJUST
, 
£qadju°
)

515 
__ADD
(
IPS_SRC_NAT_DONE
, 
¢©_d⁄e
)

516 
__ADD
(
IPS_DST_NAT_DONE
, 
d«t_d⁄e
)

517 
__ADD
(
IPS_DYING
, 
dyög
)

518 
__ADD
(
IPS_FIXED_TIMEOUT
, 
fixed_timeout
)

521 * 
	$n‚l_˘_°©us2°r
(
Êags
, *
buf
, 
size_t
 
Àn
)

523  
	`__Êags2°r
(
Êags
, 
buf
, 
Àn
, 
°©us_Êags
,

524 
	`ARRAY_SIZE
(
°©us_Êags
));

525 
	}
}

527 
	$n‚l_˘_°r2°©us
(c⁄° *
«me
)

529  
	`__°r2Êags
(
«me
, 
°©us_Êags
, 
	`ARRAY_SIZE
(status_flags));

530 
	}
}

532 
	$n‚l_˘_£t_timeout
(
n‚l_˘
 *
˘
, 
uöt32_t
 
timeout
)

534 
˘
->
˘_timeout
 = 
timeout
;

535 
˘
->
˚_mask
 |
CT_ATTR_TIMEOUT
;

536 
	}
}

538 
	$n‚l_˘_ã°_timeout
(c⁄° 
n‚l_˘
 *
˘
)

540  !!(
˘
->
˚_mask
 & 
CT_ATTR_TIMEOUT
);

541 
	}
}

543 
uöt32_t
 
	$n‚l_˘_gë_timeout
(c⁄° 
n‚l_˘
 *
˘
)

545  
˘
->
˘_timeout
;

546 
	}
}

548 
	$n‚l_˘_£t_m¨k
(
n‚l_˘
 *
˘
, 
uöt32_t
 
m¨k
)

550 
˘
->
˘_m¨k
 = 
m¨k
;

551 
˘
->
˚_mask
 |
CT_ATTR_MARK
;

552 
	}
}

554 
	$n‚l_˘_ã°_m¨k
(c⁄° 
n‚l_˘
 *
˘
)

556  !!(
˘
->
˚_mask
 & 
CT_ATTR_MARK
);

557 
	}
}

559 
uöt32_t
 
	$n‚l_˘_gë_m¨k
(c⁄° 
n‚l_˘
 *
˘
)

561  
˘
->
˘_m¨k
;

562 
	}
}

564 
	$n‚l_˘_£t_u£
(
n‚l_˘
 *
˘
, 
uöt32_t
 
u£
)

566 
˘
->
˘_u£
 = 
u£
;

567 
˘
->
˚_mask
 |
CT_ATTR_USE
;

568 
	}
}

570 
	$n‚l_˘_ã°_u£
(c⁄° 
n‚l_˘
 *
˘
)

572  !!(
˘
->
˚_mask
 & 
CT_ATTR_USE
);

573 
	}
}

575 
uöt32_t
 
	$n‚l_˘_gë_u£
(c⁄° 
n‚l_˘
 *
˘
)

577  
˘
->
˘_u£
;

578 
	}
}

580 
	$n‚l_˘_£t_id
(
n‚l_˘
 *
˘
, 
uöt32_t
 
id
)

582 
˘
->
˘_id
 = 
id
;

583 
˘
->
˚_mask
 |
CT_ATTR_ID
;

584 
	}
}

586 
	$n‚l_˘_ã°_id
(c⁄° 
n‚l_˘
 *
˘
)

588  !!(
˘
->
˚_mask
 & 
CT_ATTR_ID
);

589 
	}
}

591 
uöt32_t
 
	$n‚l_˘_gë_id
(c⁄° 
n‚l_˘
 *
˘
)

593  
˘
->
˘_id
;

594 
	}
}

596 
	$n‚l_˘_£t_z⁄e
(
n‚l_˘
 *
˘
, 
uöt16_t
 
z⁄e
)

598 
˘
->
˘_z⁄e
 = 
z⁄e
;

599 
˘
->
˚_mask
 |
CT_ATTR_ZONE
;

600 
	}
}

602 
	$n‚l_˘_ã°_z⁄e
(c⁄° 
n‚l_˘
 *
˘
)

604  !!(
˘
->
˚_mask
 & 
CT_ATTR_ZONE
);

605 
	}
}

607 
uöt16_t
 
	$n‚l_˘_gë_z⁄e
(c⁄° 
n‚l_˘
 *
˘
)

609  
˘
->
˘_z⁄e
;

610 
	}
}

612 
	$˘_£t_addr
(
n‚l_˘
 *
˘
, 
∆_addr
 *
addr
,

613 
©å
, 
∆_addr
 ** 
˘_addr
)

615 i‡(
˘
->
˚_mask
 & 
CT_ATTR_FAMILY
) {

616 i‡(
addr
->
a_Ámûy
 !
˘
->
˘_Ámûy
)

617  -
NLE_AF_MISMATCH
;

619 
	`n‚l_˘_£t_Ámûy
(
˘
, 
addr
->
a_Ámûy
);

621 i‡(*
˘_addr
)

622 
	`∆_addr_put
(*
˘_addr
);

624 
	`∆_addr_gë
(
addr
);

625 *
˘_addr
 = 
addr
;

626 
˘
->
˚_mask
 |
©å
;

629 
	}
}

631 
	$n‚l_˘_£t_§c
(
n‚l_˘
 *
˘
, 
ª∂
, 
∆_addr
 *
addr
)

633 
n‚l_˘_dú
 *
dú
 = 
ª∂
 ? &
˘
->
˘_ª∂
 : &˘->
˘_‹ig
;

634 
©å
 = 
ª∂
 ? 
CT_ATTR_REPL_SRC
 : 
CT_ATTR_ORIG_SRC
;

635  
	`˘_£t_addr
(
˘
, 
addr
, 
©å
, &
dú
->
§c
);

636 
	}
}

638 
	$n‚l_˘_£t_d°
(
n‚l_˘
 *
˘
, 
ª∂
, 
∆_addr
 *
addr
)

640 
n‚l_˘_dú
 *
dú
 = 
ª∂
 ? &
˘
->
˘_ª∂
 : &˘->
˘_‹ig
;

641 
©å
 = 
ª∂
 ? 
CT_ATTR_REPL_DST
 : 
CT_ATTR_ORIG_DST
;

642  
	`˘_£t_addr
(
˘
, 
addr
, 
©å
, &
dú
->
d°
);

643 
	}
}

645 
∆_addr
 *
	$n‚l_˘_gë_§c
(c⁄° 
n‚l_˘
 *
˘
, 
ª∂
)

647 c⁄° 
n‚l_˘_dú
 *
dú
 = 
ª∂
 ? &
˘
->
˘_ª∂
 : &˘->
˘_‹ig
;

648 
©å
 = 
ª∂
 ? 
CT_ATTR_REPL_SRC
 : 
CT_ATTR_ORIG_SRC
;

649 i‡(!(
˘
->
˚_mask
 & 
©å
))

650  
NULL
;

651  
dú
->
§c
;

652 
	}
}

654 
∆_addr
 *
	$n‚l_˘_gë_d°
(c⁄° 
n‚l_˘
 *
˘
, 
ª∂
)

656 c⁄° 
n‚l_˘_dú
 *
dú
 = 
ª∂
 ? &
˘
->
˘_ª∂
 : &˘->
˘_‹ig
;

657 
©å
 = 
ª∂
 ? 
CT_ATTR_REPL_DST
 : 
CT_ATTR_ORIG_DST
;

658 i‡(!(
˘
->
˚_mask
 & 
©å
))

659  
NULL
;

660  
dú
->
d°
;

661 
	}
}

663 
	$n‚l_˘_£t_§c_p‹t
(
n‚l_˘
 *
˘
, 
ª∂
, 
uöt16_t
 
p‹t
)

665 
n‚l_˘_dú
 *
dú
 = 
ª∂
 ? &
˘
->
˘_ª∂
 : &˘->
˘_‹ig
;

666 
©å
 = 
ª∂
 ? 
CT_ATTR_REPL_SRC_PORT
 : 
CT_ATTR_ORIG_SRC_PORT
;

668 
dú
->
¥Ÿo
.
p‹t
.
§c
 =Öort;

669 
˘
->
˚_mask
 |
©å
;

670 
	}
}

672 
	$n‚l_˘_ã°_§c_p‹t
(c⁄° 
n‚l_˘
 *
˘
, 
ª∂
)

674 
©å
 = 
ª∂
 ? 
CT_ATTR_REPL_SRC_PORT
 : 
CT_ATTR_ORIG_SRC_PORT
;

675  !!(
˘
->
˚_mask
 & 
©å
);

676 
	}
}

678 
uöt16_t
 
	$n‚l_˘_gë_§c_p‹t
(c⁄° 
n‚l_˘
 *
˘
, 
ª∂
)

680 c⁄° 
n‚l_˘_dú
 *
dú
 = 
ª∂
 ? &
˘
->
˘_ª∂
 : &˘->
˘_‹ig
;

682  
dú
->
¥Ÿo
.
p‹t
.
§c
;

683 
	}
}

685 
	$n‚l_˘_£t_d°_p‹t
(
n‚l_˘
 *
˘
, 
ª∂
, 
uöt16_t
 
p‹t
)

687 
n‚l_˘_dú
 *
dú
 = 
ª∂
 ? &
˘
->
˘_ª∂
 : &˘->
˘_‹ig
;

688 
©å
 = 
ª∂
 ? 
CT_ATTR_REPL_DST_PORT
 : 
CT_ATTR_ORIG_DST_PORT
;

690 
dú
->
¥Ÿo
.
p‹t
.
d°
 =Öort;

691 
˘
->
˚_mask
 |
©å
;

692 
	}
}

694 
	$n‚l_˘_ã°_d°_p‹t
(c⁄° 
n‚l_˘
 *
˘
, 
ª∂
)

696 
©å
 = 
ª∂
 ? 
CT_ATTR_REPL_DST_PORT
 : 
CT_ATTR_ORIG_DST_PORT
;

697  !!(
˘
->
˚_mask
 & 
©å
);

698 
	}
}

700 
uöt16_t
 
	$n‚l_˘_gë_d°_p‹t
(c⁄° 
n‚l_˘
 *
˘
, 
ª∂
)

702 c⁄° 
n‚l_˘_dú
 *
dú
 = 
ª∂
 ? &
˘
->
˘_ª∂
 : &˘->
˘_‹ig
;

704  
dú
->
¥Ÿo
.
p‹t
.
d°
;

705 
	}
}

707 
	$n‚l_˘_£t_icmp_id
(
n‚l_˘
 *
˘
, 
ª∂
, 
uöt16_t
 
id
)

709 
n‚l_˘_dú
 *
dú
 = 
ª∂
 ? &
˘
->
˘_ª∂
 : &˘->
˘_‹ig
;

710 
©å
 = 
ª∂
 ? 
CT_ATTR_REPL_ICMP_ID
 : 
CT_ATTR_ORIG_ICMP_ID
;

712 
dú
->
¥Ÿo
.
icmp
.
id
 = id;

713 
˘
->
˚_mask
 |
©å
;

714 
	}
}

716 
	$n‚l_˘_ã°_icmp_id
(c⁄° 
n‚l_˘
 *
˘
, 
ª∂
)

718 
©å
 = 
ª∂
 ? 
CT_ATTR_REPL_ICMP_ID
 : 
CT_ATTR_ORIG_ICMP_ID
;

719  !!(
˘
->
˚_mask
 & 
©å
);

720 
	}
}

722 
uöt16_t
 
	$n‚l_˘_gë_icmp_id
(c⁄° 
n‚l_˘
 *
˘
, 
ª∂
)

724 c⁄° 
n‚l_˘_dú
 *
dú
 = 
ª∂
 ? &
˘
->
˘_ª∂
 : &˘->
˘_‹ig
;

726  
dú
->
¥Ÿo
.
icmp
.
id
;

727 
	}
}

729 
	$n‚l_˘_£t_icmp_ty≥
(
n‚l_˘
 *
˘
, 
ª∂
, 
uöt8_t
 
ty≥
)

731 
n‚l_˘_dú
 *
dú
 = 
ª∂
 ? &
˘
->
˘_ª∂
 : &˘->
˘_‹ig
;

732 
©å
 = 
ª∂
 ? 
CT_ATTR_REPL_ICMP_TYPE
 : 
CT_ATTR_ORIG_ICMP_TYPE
;

734 
dú
->
¥Ÿo
.
icmp
.
ty≥
 =Åype;

735 
˘
->
˚_mask
 |
©å
;

736 
	}
}

738 
	$n‚l_˘_ã°_icmp_ty≥
(c⁄° 
n‚l_˘
 *
˘
, 
ª∂
)

740 
©å
 = 
ª∂
 ? 
CT_ATTR_REPL_ICMP_TYPE
 : 
CT_ATTR_ORIG_ICMP_TYPE
;

741  !!(
˘
->
˚_mask
 & 
©å
);

742 
	}
}

744 
uöt8_t
 
	$n‚l_˘_gë_icmp_ty≥
(c⁄° 
n‚l_˘
 *
˘
, 
ª∂
)

746 c⁄° 
n‚l_˘_dú
 *
dú
 = 
ª∂
 ? &
˘
->
˘_ª∂
 : &˘->
˘_‹ig
;

748  
dú
->
¥Ÿo
.
icmp
.
ty≥
;

749 
	}
}

751 
	$n‚l_˘_£t_icmp_code
(
n‚l_˘
 *
˘
, 
ª∂
, 
uöt8_t
 
code
)

753 
n‚l_˘_dú
 *
dú
 = 
ª∂
 ? &
˘
->
˘_ª∂
 : &˘->
˘_‹ig
;

754 
©å
 = 
ª∂
 ? 
CT_ATTR_REPL_ICMP_CODE
 : 
CT_ATTR_ORIG_ICMP_CODE
;

756 
dú
->
¥Ÿo
.
icmp
.
code
 = code;

757 
˘
->
˚_mask
 |
©å
;

758 
	}
}

760 
	$n‚l_˘_ã°_icmp_code
(c⁄° 
n‚l_˘
 *
˘
, 
ª∂
)

762 
©å
 = 
ª∂
 ? 
CT_ATTR_REPL_ICMP_CODE
 : 
CT_ATTR_ORIG_ICMP_CODE
;

763  !!(
˘
->
˚_mask
 & 
©å
);

764 
	}
}

766 
uöt8_t
 
	$n‚l_˘_gë_icmp_code
(c⁄° 
n‚l_˘
 *
˘
, 
ª∂
)

768 c⁄° 
n‚l_˘_dú
 *
dú
 = 
ª∂
 ? &
˘
->
˘_ª∂
 : &˘->
˘_‹ig
;

770  
dú
->
¥Ÿo
.
icmp
.
code
;

771 
	}
}

773 
	$n‚l_˘_£t_∑ckës
(
n‚l_˘
 *
˘
, 
ª∂
, 
uöt64_t
 
∑ckës
)

775 
n‚l_˘_dú
 *
dú
 = 
ª∂
 ? &
˘
->
˘_ª∂
 : &˘->
˘_‹ig
;

776 
©å
 = 
ª∂
 ? 
CT_ATTR_REPL_PACKETS
 : 
CT_ATTR_ORIG_PACKETS
;

778 
dú
->
∑ckës
 =Öackets;

779 
˘
->
˚_mask
 |
©å
;

780 
	}
}

782 
	$n‚l_˘_ã°_∑ckës
(c⁄° 
n‚l_˘
 *
˘
, 
ª∂
)

784 
©å
 = 
ª∂
 ? 
CT_ATTR_REPL_PACKETS
 : 
CT_ATTR_ORIG_PACKETS
;

785  !!(
˘
->
˚_mask
 & 
©å
);

786 
	}
}

788 
uöt64_t
 
	$n‚l_˘_gë_∑ckës
(c⁄° 
n‚l_˘
 *
˘
, 
ª∂
)

790 c⁄° 
n‚l_˘_dú
 *
dú
 = 
ª∂
 ? &
˘
->
˘_ª∂
 : &˘->
˘_‹ig
;

792  
dú
->
∑ckës
;

793 
	}
}

795 
	$n‚l_˘_£t_byãs
(
n‚l_˘
 *
˘
, 
ª∂
, 
uöt64_t
 
byãs
)

797 
n‚l_˘_dú
 *
dú
 = 
ª∂
 ? &
˘
->
˘_ª∂
 : &˘->
˘_‹ig
;

798 
©å
 = 
ª∂
 ? 
CT_ATTR_REPL_BYTES
 : 
CT_ATTR_ORIG_BYTES
;

800 
dú
->
byãs
 = bytes;

801 
˘
->
˚_mask
 |
©å
;

802 
	}
}

804 
	$n‚l_˘_ã°_byãs
(c⁄° 
n‚l_˘
 *
˘
, 
ª∂
)

806 
©å
 = 
ª∂
 ? 
CT_ATTR_REPL_BYTES
 : 
CT_ATTR_ORIG_BYTES
;

807  !!(
˘
->
˚_mask
 & 
©å
);

808 
	}
}

810 
uöt64_t
 
	$n‚l_˘_gë_byãs
(c⁄° 
n‚l_˘
 *
˘
, 
ª∂
)

812 c⁄° 
n‚l_˘_dú
 *
dú
 = 
ª∂
 ? &
˘
->
˘_ª∂
 : &˘->
˘_‹ig
;

814  
dú
->
byãs
;

815 
	}
}

817 
	$n‚l_˘_£t_time°amp
(
n‚l_˘
 *
˘
, 
uöt64_t
 
°¨t
, uöt64_à
°›
)

819 
˘
->
˘_t°amp
.
°¨t
 = start;

820 
˘
->
˘_t°amp
.
°›
 = stop;

821 
˘
->
˚_mask
 |
CT_ATTR_TIMESTAMP
;

822 
	}
}

824 
	$n‚l_˘_ã°_time°amp
(c⁄° 
n‚l_˘
 *
˘
)

826  !!(
˘
->
˚_mask
 & 
CT_ATTR_TIMESTAMP
);

827 
	}
}

829 c⁄° 
n‚l_˘_time°amp
 *
	$n‚l_˘_gë_time°amp
(c⁄° 
n‚l_˘
 *
˘
)

831  &
˘
->
˘_t°amp
;

832 
	}
}

836 
∆_obje˘_›s
 
	g˘_obj_›s
 = {

837 .
oo_«me
 = "netfilter/ct",

838 .
	goo_size
 = (
n‚l_˘
),

839 .
	goo_‰ì_d©a
 = 
˘_‰ì_d©a
,

840 .
	goo_˛⁄e
 = 
˘_˛⁄e
,

841 .
	goo_dump
 = {

842 [
NL_DUMP_LINE
] = 
˘_dump_löe
,

843 [
NL_DUMP_DETAILS
] = 
˘_dump_dëaûs
,

844 [
NL_DUMP_STATS
] = 
˘_dump_°©s
,

846 .
	goo_com∑ª
 = 
˘_com∑ª
,

847 .
	goo_©ås2°r
 = 
˘_©ås2°r
,

	@mylibnl/libnl-3.2.25/lib/netfilter/exp.c

23 
	~<byãsw≠.h
>

24 
	~<sys/ty≥s.h
>

25 
	~<löux/√tfûãr/n‚ëlök_c⁄¡øck.h
>

27 
	~<√éök-¥iv©e/√éök.h
>

28 
	~<√éök/©å.h
>

29 
	~<√éök/√tfûãr/n‚l.h
>

30 
	~<√éök/√tfûãr/exp.h
>

32 
∆_ˇche_›s
 
	gn‚l_exp_›s
;

34 
∆a_pﬁicy
 
	gexp_pﬁicy
[
CTA_EXPECT_MAX
+1] = {

35 [
CTA_EXPECT_MASTER
] = { .
ty≥
 = 
NLA_NESTED
 },

36 [
CTA_EXPECT_TUPLE
] = { .
ty≥
 = 
NLA_NESTED
 },

37 [
CTA_EXPECT_MASK
] = { .
ty≥
 = 
NLA_NESTED
 },

38 [
CTA_EXPECT_TIMEOUT
] = { .
ty≥
 = 
NLA_U32
 },

39 [
CTA_EXPECT_ID
] = { .
ty≥
 = 
NLA_U32
 },

40 [
CTA_EXPECT_HELP_NAME
] = { .
ty≥
 = 
NLA_STRING
 },

41 [
CTA_EXPECT_ZONE
] = { .
ty≥
 = 
NLA_U16
 },

42 [
CTA_EXPECT_FLAGS
] = { .
ty≥
 = 
NLA_U32
 },

43 [
CTA_EXPECT_CLASS
] = { .
ty≥
 = 
NLA_U32
 },

44 [
CTA_EXPECT_NAT
] = { .
ty≥
 = 
NLA_NESTED
 },

45 [
CTA_EXPECT_FN
] = { .
ty≥
 = 
NLA_STRING
 },

48 
∆a_pﬁicy
 
	gexp_tu∂e_pﬁicy
[
CTA_TUPLE_MAX
+1] = {

49 [
CTA_TUPLE_IP
] = { .
ty≥
 = 
NLA_NESTED
 },

50 [
CTA_TUPLE_PROTO
] = { .
ty≥
 = 
NLA_NESTED
 },

53 
∆a_pﬁicy
 
	gexp_ù_pﬁicy
[
CTA_IP_MAX
+1] = {

54 [
CTA_IP_V4_SRC
] = { .
ty≥
 = 
NLA_U32
 },

55 [
CTA_IP_V4_DST
] = { .
ty≥
 = 
NLA_U32
 },

56 [
CTA_IP_V6_SRC
] = { .
möÀn
 = 16 },

57 [
CTA_IP_V6_DST
] = { .
möÀn
 = 16 },

60 
∆a_pﬁicy
 
	gexp_¥Ÿo_pﬁicy
[
CTA_PROTO_MAX
+1] = {

61 [
CTA_PROTO_NUM
] = { .
ty≥
 = 
NLA_U8
 },

62 [
CTA_PROTO_SRC_PORT
] = { .
ty≥
 = 
NLA_U16
 },

63 [
CTA_PROTO_DST_PORT
] = { .
ty≥
 = 
NLA_U16
 },

64 [
CTA_PROTO_ICMP_ID
] = { .
ty≥
 = 
NLA_U16
 },

65 [
CTA_PROTO_ICMP_TYPE
] = { .
ty≥
 = 
NLA_U8
 },

66 [
CTA_PROTO_ICMP_CODE
] = { .
ty≥
 = 
NLA_U8
 },

67 [
CTA_PROTO_ICMPV6_ID
] = { .
ty≥
 = 
NLA_U16
 },

68 [
CTA_PROTO_ICMPV6_TYPE
] = { .
ty≥
 = 
NLA_U8
 },

69 [
CTA_PROTO_ICMPV6_CODE
] = { .
ty≥
 = 
NLA_U8
 },

72 
∆a_pﬁicy
 
	gexp_«t_pﬁicy
[
CTA_EXPECT_NAT_MAX
+1] = {

73 [
CTA_EXPECT_NAT_DIR
] = { .
ty≥
 = 
NLA_U32
 },

74 [
CTA_EXPECT_NAT_TUPLE
] = { .
ty≥
 = 
NLA_NESTED
 },

77 
	$exp_∑r£_ù
(
n‚l_exp
 *
exp
, 
tu∂e
, 
∆©å
 *
©å
)

79 
∆©å
 *
tb
[
CTA_IP_MAX
+1];

80 
∆_addr
 *
addr
;

81 
îr
;

83 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
CTA_IP_MAX
, 
©å
, 
exp_ù_pﬁicy
);

84 i‡(
îr
 < 0)

85 
îrout
;

87 i‡(
tb
[
CTA_IP_V4_SRC
]) {

88 
addr
 = 
	`∆_addr_Æloc_©å
(
tb
[
CTA_IP_V4_SRC
], 
AF_INET
);

89 i‡(
addr
 =
NULL
)

90 
îrout_íomem
;

91 
îr
 = 
	`n‚l_exp_£t_§c
(
exp
, 
tu∂e
, 
addr
);

92 
	`∆_addr_put
(
addr
);

93 i‡(
îr
 < 0)

94 
îrout
;

96 i‡(
tb
[
CTA_IP_V4_DST
]) {

97 
addr
 = 
	`∆_addr_Æloc_©å
(
tb
[
CTA_IP_V4_DST
], 
AF_INET
);

98 i‡(
addr
 =
NULL
)

99 
îrout_íomem
;

100 
îr
 = 
	`n‚l_exp_£t_d°
(
exp
, 
tu∂e
, 
addr
);

101 
	`∆_addr_put
(
addr
);

102 i‡(
îr
 < 0)

103 
îrout
;

105 i‡(
tb
[
CTA_IP_V6_SRC
]) {

106 
addr
 = 
	`∆_addr_Æloc_©å
(
tb
[
CTA_IP_V6_SRC
], 
AF_INET6
);

107 i‡(
addr
 =
NULL
)

108 
îrout_íomem
;

109 
îr
 = 
	`n‚l_exp_£t_§c
(
exp
, 
tu∂e
, 
addr
);

110 
	`∆_addr_put
(
addr
);

111 i‡(
îr
 < 0)

112 
îrout
;

114 i‡(
tb
[
CTA_IP_V6_DST
]) {

115 
addr
 = 
	`∆_addr_Æloc_©å
(
tb
[
CTA_IP_V6_DST
], 
AF_INET6
);

116 i‡(
addr
 =
NULL
)

117 
îrout_íomem
;

118 
îr
 = 
	`n‚l_exp_£t_d°
(
exp
, 
tu∂e
, 
addr
);

119 
	`∆_addr_put
(
addr
);

120 i‡(
îr
 < 0)

121 
îrout
;

126 
îrout_íomem
:

127 
îr
 = -
NLE_NOMEM
;

128 
îrout
:

129  
îr
;

130 
	}
}

132 
	$exp_∑r£_¥Ÿo
(
n‚l_exp
 *
exp
, 
tu∂e
, 
∆©å
 *
©å
)

134 
∆©å
 *
tb
[
CTA_PROTO_MAX
+1];

135 
îr
;

136 
uöt16_t
 
§˝‹t
 = 0, 
d°p‹t
 = 0, 
icmpid
 = 0;

137 
uöt8_t
 
icm±y≥
 = 0, 
icmpcode
 = 0;

139 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
CTA_PROTO_MAX
, 
©å
, 
exp_¥Ÿo_pﬁicy
);

140 i‡(
îr
 < 0)

141  
îr
;

143 i‡(
tb
[
CTA_PROTO_NUM
])

144 
	`n‚l_exp_£t_l4¥Ÿ⁄um
(
exp
, 
tu∂e
, 
	`∆a_gë_u8
(
tb
[
CTA_PROTO_NUM
]));

146 i‡(
tb
[
CTA_PROTO_SRC_PORT
])

147 
§˝‹t
 = 
	`¡ohs
(
	`∆a_gë_u16
(
tb
[
CTA_PROTO_SRC_PORT
]));

148 i‡(
tb
[
CTA_PROTO_DST_PORT
])

149 
d°p‹t
 = 
	`¡ohs
(
	`∆a_gë_u16
(
tb
[
CTA_PROTO_DST_PORT
]));

150 i‡(
tb
[
CTA_PROTO_SRC_PORT
] ||Åb[
CTA_PROTO_DST_PORT
])

151 
	`n‚l_exp_£t_p‹ts
(
exp
, 
tu∂e
, 
§˝‹t
, 
d°p‹t
);

153 i‡(
tb
[
CTA_PROTO_ICMP_ID
])

154 
icmpid
 = 
	`¡ohs
(
	`∆a_gë_u16
(
tb
[
CTA_PROTO_ICMP_ID
]));

155 i‡(
tb
[
CTA_PROTO_ICMP_TYPE
])

156 
icm±y≥
 = 
	`∆a_gë_u8
(
tb
[
CTA_PROTO_ICMP_TYPE
]);

157 i‡(
tb
[
CTA_PROTO_ICMP_CODE
])

158 
icmpcode
 = 
	`∆a_gë_u8
(
tb
[
CTA_PROTO_ICMP_CODE
]);

159 i‡(
tb
[
CTA_PROTO_ICMP_ID
] ||Åb[
CTA_PROTO_ICMP_TYPE
] ||Åb[
CTA_PROTO_ICMP_CODE
])

160 
	`n‚l_exp_£t_icmp
(
exp
, 
tu∂e
, 
icmpid
, 
icm±y≥
, 
icmpcode
);

162 
	}
}

164 
	$exp_∑r£_tu∂e
(
n‚l_exp
 *
exp
, 
tu∂e
, 
∆©å
 *
©å
)

166 
∆©å
 *
tb
[
CTA_TUPLE_MAX
+1];

167 
îr
;

169 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
CTA_TUPLE_MAX
, 
©å
, 
exp_tu∂e_pﬁicy
);

170 i‡(
îr
 < 0)

171  
îr
;

173 i‡(
tb
[
CTA_TUPLE_IP
]) {

174 
îr
 = 
	`exp_∑r£_ù
(
exp
, 
tu∂e
, 
tb
[
CTA_TUPLE_IP
]);

175 i‡(
îr
 < 0)

176  
îr
;

179 i‡(
tb
[
CTA_TUPLE_PROTO
]) {

180 
îr
 = 
	`exp_∑r£_¥Ÿo
(
exp
, 
tu∂e
, 
tb
[
CTA_TUPLE_PROTO
]);

181 i‡(
îr
 < 0)

182  
îr
;

186 
	}
}

188 
	$exp_∑r£_«t
(
n‚l_exp
 *
exp
, 
∆©å
 *
©å
)

190 
∆©å
 *
tb
[
CTA_EXPECT_NAT_MAX
+1];

191 
îr
;

193 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
CTA_EXPECT_NAT_MAX
, 
©å
, 
exp_«t_pﬁicy
);

194 i‡(
îr
 < 0)

195  
îr
;

197 i‡(
tb
[
CTA_EXPECT_NAT_DIR
])

198 
	`n‚l_exp_£t_«t_dú
(
exp
, 
	`∆a_gë_u32
(
tb
[
CTA_EXPECT_NAT_DIR
]));

200 i‡(
tb
[
CTA_EXPECT_NAT_TUPLE
]) {

201 
îr
 = 
	`exp_∑r£_tu∂e
(
exp
, 
NFNL_EXP_TUPLE_NAT
, 
tb
[
CTA_EXPECT_NAT_TUPLE
]);

202 i‡(
îr
 < 0)

203  
îr
;

207 
	}
}

209 
	$n‚lmsg_exp_group
(
∆msghdr
 *
∆h
)

211 
	`n‚lmsg_subty≥
(
∆h
)) {

212 
IPCTNL_MSG_EXP_NEW
:

213 i‡(
∆h
->
∆msg_Êags
 & (
NLM_F_CREATE
|
NLM_F_EXCL
))

214  
NFNLGRP_CONNTRACK_EXP_NEW
;

216  
NFNLGRP_CONNTRACK_EXP_UPDATE
;

217 
IPCTNL_MSG_EXP_DELETE
:

218  
NFNLGRP_CONNTRACK_EXP_DESTROY
;

220  
NFNLGRP_NONE
;

222 
	}
}

224 
	$n‚lmsg_exp_∑r£
(
∆msghdr
 *
∆h
, 
n‚l_exp
 **
ªsu…
)

226 
n‚l_exp
 *
exp
;

227 
∆©å
 *
tb
[
CTA_MAX
+1];

228 
îr
;

230 
exp
 = 
	`n‚l_exp_Æloc
();

231 i‡(!
exp
)

232  -
NLE_NOMEM
;

234 
exp
->
˚_msgty≥
 = 
∆h
->
∆msg_ty≥
;

236 
îr
 = 
	`∆msg_∑r£
(
∆h
, (
nfgímsg
), 
tb
, 
CTA_EXPECT_MAX
,

237 
exp_pﬁicy
);

238 i‡(
îr
 < 0)

239 
îrout
;

241 
	`n‚l_exp_£t_Ámûy
(
exp
, 
	`n‚lmsg_Ámûy
(
∆h
));

243 i‡(
tb
[
CTA_EXPECT_TUPLE
]) {

244 
îr
 = 
	`exp_∑r£_tu∂e
(
exp
, 
NFNL_EXP_TUPLE_EXPECT
, 
tb
[
CTA_EXPECT_TUPLE
]);

245 i‡(
îr
 < 0)

246 
îrout
;

248 i‡(
tb
[
CTA_EXPECT_MASTER
]) {

249 
îr
 = 
	`exp_∑r£_tu∂e
(
exp
, 
NFNL_EXP_TUPLE_MASTER
, 
tb
[
CTA_EXPECT_MASTER
]);

250 i‡(
îr
 < 0)

251 
îrout
;

253 i‡(
tb
[
CTA_EXPECT_MASK
]) {

254 
îr
 = 
	`exp_∑r£_tu∂e
(
exp
, 
NFNL_EXP_TUPLE_MASK
, 
tb
[
CTA_EXPECT_MASK
]);

255 i‡(
îr
 < 0)

256 
îrout
;

259 i‡(
tb
[
CTA_EXPECT_NAT
]) {

260 
îr
 = 
	`exp_∑r£_«t
(
exp
, 
tb
[
CTA_EXPECT_MASK
]);

261 i‡(
îr
 < 0)

262 
îrout
;

265 i‡(
tb
[
CTA_EXPECT_CLASS
])

266 
	`n‚l_exp_£t_˛ass
(
exp
, 
	`¡ohl
(
	`∆a_gë_u32
(
tb
[
CTA_EXPECT_CLASS
])));

268 i‡(
tb
[
CTA_EXPECT_FN
])

269 
	`n‚l_exp_£t_‚
(
exp
, 
	`∆a_d©a
(
tb
[
CTA_EXPECT_FN
]));

271 i‡(
tb
[
CTA_EXPECT_TIMEOUT
])

272 
	`n‚l_exp_£t_timeout
(
exp
, 
	`¡ohl
(
	`∆a_gë_u32
(
tb
[
CTA_EXPECT_TIMEOUT
])));

274 i‡(
tb
[
CTA_EXPECT_ID
])

275 
	`n‚l_exp_£t_id
(
exp
, 
	`¡ohl
(
	`∆a_gë_u32
(
tb
[
CTA_EXPECT_ID
])));

277 i‡(
tb
[
CTA_EXPECT_HELP_NAME
])

278 
	`n‚l_exp_£t_hñ≥r_«me
(
exp
, 
	`∆a_d©a
(
tb
[
CTA_EXPECT_HELP_NAME
]));

280 i‡(
tb
[
CTA_EXPECT_ZONE
])

281 
	`n‚l_exp_£t_z⁄e
(
exp
, 
	`¡ohs
(
	`∆a_gë_u16
(
tb
[
CTA_EXPECT_ZONE
])));

283 i‡(
tb
[
CTA_EXPECT_FLAGS
])

284 
	`n‚l_exp_£t_Êags
(
exp
, 
	`¡ohl
(
	`∆a_gë_u32
(
tb
[
CTA_EXPECT_FLAGS
])));

286 *
ªsu…
 = 
exp
;

289 
îrout
:

290 
	`n‚l_exp_put
(
exp
);

291  
îr
;

292 
	}
}

294 
	$exp_msg_∑r£r
(
∆_ˇche_›s
 *
›s
, 
sockaddr_∆
 *
who
,

295 
∆msghdr
 *
∆h
, 
∆_∑r£r_∑øm
 *
µ
)

297 
n‚l_exp
 *
exp
;

298 
îr
;

300 i‡((
îr
 = 
	`n‚lmsg_exp_∑r£
(
∆h
, &
exp
)) < 0)

301  
îr
;

303 
îr
 = 
µ
->
	`µ_cb
((
∆_obje˘
 *Ë
exp
,Öp);

304 
	`n‚l_exp_put
(
exp
);

305  
îr
;

306 
	}
}

308 
	$n‚l_exp_dump_ªque°
(
∆_sock
 *
sk
)

310  
	`n‚l_£nd_sim∂e
(
sk
, 
NFNL_SUBSYS_CTNETLINK_EXP
, 
IPCTNL_MSG_EXP_GET
,

311 
NLM_F_DUMP
, 
AF_UNSPEC
, 0);

312 
	}
}

314 
	$exp_ªque°_upd©e
(
∆_ˇche
 *
ˇche
, 
∆_sock
 *
sk
)

316  
	`n‚l_exp_dump_ªque°
(
sk
);

317 
	}
}

319 
	$exp_gë_tu∂e_©å
(
tu∂e
)

321 
©å
 = 0;

323 
tu∂e
) {

324 
CTA_EXPECT_MASTER
:

325 
©å
 = 
NFNL_EXP_TUPLE_MASTER
;

327 
CTA_EXPECT_MASK
:

328 
©å
 = 
NFNL_EXP_TUPLE_MASK
;

330 
CTA_EXPECT_NAT
:

331 
©å
 = 
NFNL_EXP_TUPLE_NAT
;

333 
CTA_EXPECT_TUPLE
:

335 
©å
 = 
NFNL_EXP_TUPLE_EXPECT
;

339  
©å
;

340 
	}
}

342 
	$n‚l_exp_buûd_tu∂e
(
∆_msg
 *
msg
, c⁄° 
n‚l_exp
 *
exp
,

343 
˘a
)

345 
∆©å
 *
tu∂e
, *
ù
, *
¥Ÿo
;

346 
∆_addr
 *
addr
;

347 
Ámûy
;

349 
Ámûy
 = 
	`n‚l_exp_gë_Ámûy
(
exp
);

351 
ty≥
 = 
	`exp_gë_tu∂e_©å
(
˘a
);

353 i‡(
˘a
 =
CTA_EXPECT_NAT
)

354 
tu∂e
 = 
	`∆a_√°_°¨t
(
msg
, 
CTA_EXPECT_NAT_TUPLE
);

356 
tu∂e
 = 
	`∆a_√°_°¨t
(
msg
, 
˘a
);

358 i‡(!
tu∂e
)

359 
∆a_put_Áûuª
;

361 
ù
 = 
	`∆a_√°_°¨t
(
msg
, 
CTA_TUPLE_IP
);

362 i‡(!
ù
)

363 
∆a_put_Áûuª
;

365 
addr
 = 
	`n‚l_exp_gë_§c
(
exp
, 
ty≥
);

366 i‡(
addr
)

367 
	`NLA_PUT_ADDR
(
msg
,

368 
Ámûy
 =
AF_INET
 ? 
CTA_IP_V4_SRC
 : 
CTA_IP_V6_SRC
,

369 
addr
);

371 
addr
 = 
	`n‚l_exp_gë_d°
(
exp
, 
ty≥
);

372 i‡(
addr
)

373 
	`NLA_PUT_ADDR
(
msg
,

374 
Ámûy
 =
AF_INET
 ? 
CTA_IP_V4_DST
 : 
CTA_IP_V6_DST
,

375 
addr
);

377 
	`∆a_√°_íd
(
msg
, 
ù
);

379 
¥Ÿo
 = 
	`∆a_√°_°¨t
(
msg
, 
CTA_TUPLE_PROTO
);

380 i‡(!
¥Ÿo
)

381 
∆a_put_Áûuª
;

383 i‡(
	`n‚l_exp_ã°_l4¥Ÿ⁄um
(
exp
, 
ty≥
))

384 
	`NLA_PUT_U8
(
msg
, 
CTA_PROTO_NUM
, 
	`n‚l_exp_gë_l4¥Ÿ⁄um
(
exp
, 
ty≥
));

386 i‡(
	`n‚l_exp_ã°_p‹ts
(
exp
, 
ty≥
)) {

387 
	`NLA_PUT_U16
(
msg
, 
CTA_PROTO_SRC_PORT
,

388 
	`ht⁄s
(
	`n‚l_exp_gë_§c_p‹t
(
exp
, 
ty≥
)));

390 
	`NLA_PUT_U16
(
msg
, 
CTA_PROTO_DST_PORT
,

391 
	`ht⁄s
(
	`n‚l_exp_gë_d°_p‹t
(
exp
, 
ty≥
)));

394 i‡(
	`n‚l_exp_ã°_icmp
(
exp
, 
ty≥
)) {

395 
	`NLA_PUT_U16
(
msg
, 
CTA_PROTO_ICMP_ID
,

396 
	`ht⁄s
(
	`n‚l_exp_gë_icmp_id
(
exp
, 
ty≥
)));

398 
	`NLA_PUT_U8
(
msg
, 
CTA_PROTO_ICMP_TYPE
,

399 
	`n‚l_exp_gë_icmp_ty≥
(
exp
, 
ty≥
));

401 
	`NLA_PUT_U8
(
msg
, 
CTA_PROTO_ICMP_CODE
,

402 
	`n‚l_exp_gë_icmp_code
(
exp
, 
ty≥
));

405 
	`∆a_√°_íd
(
msg
, 
¥Ÿo
);

407 
	`∆a_√°_íd
(
msg
, 
tu∂e
);

410 
∆a_put_Áûuª
:

411  -
NLE_MSGSIZE
;

412 
	}
}

414 
	$n‚l_exp_buûd_«t
(
∆_msg
 *
msg
, c⁄° 
n‚l_exp
 *
exp
)

416 
∆©å
 *
«t
;

417 
îr
;

419 
«t
 = 
	`∆a_√°_°¨t
(
msg
, 
CTA_EXPECT_NAT
);

421 i‡(
	`n‚l_exp_ã°_«t_dú
(
exp
)) {

422 
	`NLA_PUT_U32
(
msg
, 
CTA_EXPECT_NAT_DIR
,

423 
	`n‚l_exp_gë_«t_dú
(
exp
));

426 i‡((
îr
 = 
	`n‚l_exp_buûd_tu∂e
(
msg
, 
exp
, 
CTA_EXPECT_NAT
)) < 0)

427 
∆a_put_Áûuª
;

429 
	`∆a_√°_íd
(
msg
, 
«t
);

432 
∆a_put_Áûuª
:

433  -
NLE_MSGSIZE
;

434 
	}
}

436 
	$n‚l_exp_buûd_mesßge
(c⁄° 
n‚l_exp
 *
exp
, 
cmd
, 
Êags
,

437 
∆_msg
 **
ªsu…
)

439 
∆_msg
 *
msg
;

440 
îr
;

442 
msg
 = 
	`n‚lmsg_Æloc_sim∂e
(
NFNL_SUBSYS_CTNETLINK_EXP
, 
cmd
, 
Êags
,

443 
	`n‚l_exp_gë_Ámûy
(
exp
), 0);

444 i‡(
msg
 =
NULL
)

445  -
NLE_NOMEM
;

447 i‡((
îr
 = 
	`n‚l_exp_buûd_tu∂e
(
msg
, 
exp
, 
CTA_EXPECT_TUPLE
)) < 0)

448 
îr_out
;

450 i‡((
îr
 = 
	`n‚l_exp_buûd_tu∂e
(
msg
, 
exp
, 
CTA_EXPECT_MASTER
)) < 0)

451 
îr_out
;

453 i‡((
îr
 = 
	`n‚l_exp_buûd_tu∂e
(
msg
, 
exp
, 
CTA_EXPECT_MASK
)) < 0)

454 
îr_out
;

456 i‡(
	`n‚l_exp_ã°_§c
(
exp
, 
NFNL_EXP_TUPLE_NAT
)) {

457 i‡((
îr
 = 
	`n‚l_exp_buûd_«t
(
msg
, 
exp
)) < 0)

458 
îr_out
;

461 i‡(
	`n‚l_exp_ã°_˛ass
(
exp
))

462 
	`NLA_PUT_U32
(
msg
, 
CTA_EXPECT_CLASS
, 
	`ht⁄l
(
	`n‚l_exp_gë_˛ass
(
exp
)));

464 i‡(
	`n‚l_exp_ã°_‚
(
exp
))

465 
	`NLA_PUT_STRING
(
msg
, 
CTA_EXPECT_FN
, 
	`n‚l_exp_gë_‚
(
exp
));

467 i‡(
	`n‚l_exp_ã°_id
(
exp
))

468 
	`NLA_PUT_U32
(
msg
, 
CTA_EXPECT_ID
, 
	`ht⁄l
(
	`n‚l_exp_gë_id
(
exp
)));

470 i‡(
	`n‚l_exp_ã°_timeout
(
exp
))

471 
	`NLA_PUT_U32
(
msg
, 
CTA_EXPECT_TIMEOUT
, 
	`ht⁄l
(
	`n‚l_exp_gë_timeout
(
exp
)));

473 i‡(
	`n‚l_exp_ã°_hñ≥r_«me
(
exp
))

474 
	`NLA_PUT_STRING
(
msg
, 
CTA_EXPECT_HELP_NAME
, 
	`n‚l_exp_gë_hñ≥r_«me
(
exp
));

476 i‡(
	`n‚l_exp_ã°_z⁄e
(
exp
))

477 
	`NLA_PUT_U16
(
msg
, 
CTA_EXPECT_ZONE
, 
	`ht⁄s
(
	`n‚l_exp_gë_z⁄e
(
exp
)));

479 i‡(
	`n‚l_exp_ã°_Êags
(
exp
))

480 
	`NLA_PUT_U32
(
msg
, 
CTA_EXPECT_FLAGS
, 
	`ht⁄l
(
	`n‚l_exp_gë_Êags
(
exp
)));

482 *
ªsu…
 = 
msg
;

485 
∆a_put_Áûuª
:

486 
îr_out
:

487 
	`∆msg_‰ì
(
msg
);

488  
îr
;

489 
	}
}

491 
	$n‚l_exp_buûd_add_ªque°
(c⁄° 
n‚l_exp
 *
exp
, 
Êags
,

492 
∆_msg
 **
ªsu…
)

494  
	`n‚l_exp_buûd_mesßge
(
exp
, 
IPCTNL_MSG_EXP_NEW
, 
Êags
, 
ªsu…
);

495 
	}
}

497 
	$n‚l_exp_add
(
∆_sock
 *
sk
, c⁄° 
n‚l_exp
 *
exp
, 
Êags
)

499 
∆_msg
 *
msg
;

500 
îr
;

502 i‡((
îr
 = 
	`n‚l_exp_buûd_add_ªque°
(
exp
, 
Êags
, &
msg
)) < 0)

503  
îr
;

505 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sk
, 
msg
);

506 
	`∆msg_‰ì
(
msg
);

507 i‡(
îr
 < 0)

508  
îr
;

510  
	`waô_f‹_ack
(
sk
);

511 
	}
}

513 
	$n‚l_exp_buûd_dñëe_ªque°
(c⁄° 
n‚l_exp
 *
exp
, 
Êags
,

514 
∆_msg
 **
ªsu…
)

516  
	`n‚l_exp_buûd_mesßge
(
exp
, 
IPCTNL_MSG_EXP_DELETE
, 
Êags
, 
ªsu…
);

517 
	}
}

519 
	$n‚l_exp_dñ
(
∆_sock
 *
sk
, c⁄° 
n‚l_exp
 *
exp
, 
Êags
)

521 
∆_msg
 *
msg
;

522 
îr
;

524 i‡((
îr
 = 
	`n‚l_exp_buûd_dñëe_ªque°
(
exp
, 
Êags
, &
msg
)) < 0)

525  
îr
;

527 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sk
, 
msg
);

528 
	`∆msg_‰ì
(
msg
);

529 i‡(
îr
 < 0)

530  
îr
;

532  
	`waô_f‹_ack
(
sk
);

533 
	}
}

535 
	$n‚l_exp_buûd_quîy_ªque°
(c⁄° 
n‚l_exp
 *
exp
, 
Êags
,

536 
∆_msg
 **
ªsu…
)

538  
	`n‚l_exp_buûd_mesßge
(
exp
, 
IPCTNL_MSG_EXP_GET
, 
Êags
, 
ªsu…
);

539 
	}
}

541 
	$n‚l_exp_quîy
(
∆_sock
 *
sk
, c⁄° 
n‚l_exp
 *
exp
, 
Êags
)

543 
∆_msg
 *
msg
;

544 
îr
;

546 i‡((
îr
 = 
	`n‚l_exp_buûd_quîy_ªque°
(
exp
, 
Êags
, &
msg
)) < 0)

547  
îr
;

549 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sk
, 
msg
);

550 
	`∆msg_‰ì
(
msg
);

551 i‡(
îr
 < 0)

552  
îr
;

554  
	`waô_f‹_ack
(
sk
);

555 
	}
}

572 
	$n‚l_exp_Æloc_ˇche
(
∆_sock
 *
sk
, 
∆_ˇche
 **
ªsu…
)

574  
	`∆_ˇche_Æloc_™d_fûl
(&
n‚l_exp_›s
, 
sk
, 
ªsu…
);

575 
	}
}

586 
∆_af_group
 
	gexp_groups
[] = {

587 { 
AF_UNSPEC
, 
NFNLGRP_CONNTRACK_EXP_NEW
 },

588 { 
AF_UNSPEC
, 
NFNLGRP_CONNTRACK_EXP_UPDATE
 },

589 { 
AF_UNSPEC
, 
NFNLGRP_CONNTRACK_EXP_DESTROY
 },

590 { 
END_OF_GROUP_LIST
 },

593 
	#NFNLMSG_EXP_TYPE
(
ty≥
Ë
	`NFNLMSG_TYPE
(
NFNL_SUBSYS_CTNETLINK_EXP
, (ty≥))

	)

594 
∆_ˇche_›s
 
	gn‚l_exp_›s
 = {

595 .
co_«me
 = "netfilter/exp",

596 .
	gco_hdrsize
 = 
NFNL_HDRLEN
,

597 .
	gco_msgty≥s
 = {

598 { 
NFNLMSG_EXP_TYPE
(
IPCTNL_MSG_EXP_NEW
), 
NL_ACT_NEW
, "new" },

599 { 
NFNLMSG_EXP_TYPE
(
IPCTNL_MSG_EXP_GET
), 
NL_ACT_GET
, "get" },

600 { 
NFNLMSG_EXP_TYPE
(
IPCTNL_MSG_EXP_DELETE
), 
NL_ACT_DEL
, "del" },

601 
END_OF_MSGTYPES_LIST
,

603 .
	gco_¥Ÿocﬁ
 = 
NETLINK_NETFILTER
,

604 .
	gco_groups
 = 
exp_groups
,

605 .
	gco_ªque°_upd©e
 = 
exp_ªque°_upd©e
,

606 .
	gco_msg_∑r£r
 = 
exp_msg_∑r£r
,

607 .
	gco_obj_›s
 = &
exp_obj_›s
,

610 
__öô
 
	$exp_öô
()

612 
	`∆_ˇche_mngt_ªgi°î
(&
n‚l_exp_›s
);

613 
	}
}

615 
__exô
 
	$exp_exô
()

617 
	`∆_ˇche_mngt_uƒegi°î
(&
n‚l_exp_›s
);

618 
	}
}

	@mylibnl/libnl-3.2.25/lib/netfilter/exp_obj.c

15 
	~<sys/ty≥s.h
>

16 
	~<√töë/ö.h
>

17 
	~<löux/√tfûãr/n‚ëlök_c⁄¡øck.h
>

18 
	~<löux/√tfûãr/nf_c⁄¡øck_comm⁄.h
>

19 
	~<löux/√tfûãr/nf_c⁄¡øck_t˝.h
>

21 
	~<√éök-¥iv©e/√éök.h
>

22 
	~<√éök/√tfûãr/n‚l.h
>

23 
	~<√éök/√tfûãr/exp.h
>

32 
	#EXP_ATTR_FAMILY
 (1UL << 0)

33 
	#EXP_ATTR_TIMEOUT
 (1UL << 1)

34 
	#EXP_ATTR_ID
 (1UL << 2)

35 
	#EXP_ATTR_HELPER_NAME
 (1UL << 3)

36 
	#EXP_ATTR_ZONE
 (1UL << 4)

37 
	#EXP_ATTR_FLAGS
 (1UL << 5)

38 
	#EXP_ATTR_CLASS
 (1UL << 6)

39 
	#EXP_ATTR_FN
 (1UL << 7)

41 
	#EXP_ATTR_EXPECT_IP_SRC
 (1UL << 8)

	)

42 
	#EXP_ATTR_EXPECT_IP_DST
 (1UL << 9)

	)

43 
	#EXP_ATTR_EXPECT_L4PROTO_NUM
 (1UL << 10)

	)

44 
	#EXP_ATTR_EXPECT_L4PROTO_PORTS
 (1UL << 11)

	)

45 
	#EXP_ATTR_EXPECT_L4PROTO_ICMP
 (1UL << 12)

	)

46 
	#EXP_ATTR_MASTER_IP_SRC
 (1UL << 13)

	)

47 
	#EXP_ATTR_MASTER_IP_DST
 (1UL << 14)

	)

48 
	#EXP_ATTR_MASTER_L4PROTO_NUM
 (1UL << 15)

	)

49 
	#EXP_ATTR_MASTER_L4PROTO_PORTS
 (1UL << 16)

	)

50 
	#EXP_ATTR_MASTER_L4PROTO_ICMP
 (1UL << 17)

	)

51 
	#EXP_ATTR_MASK_IP_SRC
 (1UL << 18)

	)

52 
	#EXP_ATTR_MASK_IP_DST
 (1UL << 19)

	)

53 
	#EXP_ATTR_MASK_L4PROTO_NUM
 (1UL << 20)

	)

54 
	#EXP_ATTR_MASK_L4PROTO_PORTS
 (1UL << 21)

	)

55 
	#EXP_ATTR_MASK_L4PROTO_ICMP
 (1UL << 22)

	)

56 
	#EXP_ATTR_NAT_IP_SRC
 (1UL << 23)

	)

57 
	#EXP_ATTR_NAT_IP_DST
 (1UL << 24)

	)

58 
	#EXP_ATTR_NAT_L4PROTO_NUM
 (1UL << 25)

	)

59 
	#EXP_ATTR_NAT_L4PROTO_PORTS
 (1UL << 26)

	)

60 
	#EXP_ATTR_NAT_L4PROTO_ICMP
 (1UL << 27)

	)

61 
	#EXP_ATTR_NAT_DIR
 (1UL << 28)

	)

64 
	$exp_‰ì_d©a
(
∆_obje˘
 *
c
)

66 
n‚l_exp
 *
exp
 = (n‚l_ex∞*Ë
c
;

68 i‡(
exp
 =
NULL
)

71 
	`∆_addr_put
(
exp
->
exp_ex≥˘
.
§c
);

72 
	`∆_addr_put
(
exp
->
exp_ex≥˘
.
d°
);

73 
	`∆_addr_put
(
exp
->
exp_ma°î
.
§c
);

74 
	`∆_addr_put
(
exp
->
exp_ma°î
.
d°
);

75 
	`∆_addr_put
(
exp
->
exp_mask
.
§c
);

76 
	`∆_addr_put
(
exp
->
exp_mask
.
d°
);

77 
	`∆_addr_put
(
exp
->
exp_«t
.
§c
);

78 
	`∆_addr_put
(
exp
->
exp_«t
.
d°
);

80 
	`‰ì
(
exp
->
exp_‚
);

81 
	`‰ì
(
exp
->
exp_hñ≥r_«me
);

82 
	}
}

84 
	$exp_˛⁄e
(
∆_obje˘
 *
_d°
, ∆_obje˘ *
_§c
)

86 
n‚l_exp
 *
d°
 = (n‚l_ex∞*Ë
_d°
;

87 
n‚l_exp
 *
§c
 = (n‚l_ex∞*Ë
_§c
;

88 
∆_addr
 *
addr
;

91 i‡(
§c
->
exp_ex≥˘
.src) {

92 
addr
 = 
	`∆_addr_˛⁄e
(
§c
->
exp_ex≥˘
.src);

93 i‡(!
addr
)

94  -
NLE_NOMEM
;

95 
d°
->
exp_ex≥˘
.
§c
 = 
addr
;

98 i‡(
§c
->
exp_ex≥˘
.
d°
) {

99 
addr
 = 
	`∆_addr_˛⁄e
(
§c
->
exp_ex≥˘
.
d°
);

100 i‡(!
addr
)

101  -
NLE_NOMEM
;

102 
d°
->
exp_ex≥˘
.d° = 
addr
;

106 i‡(
§c
->
exp_ma°î
.src) {

107 
addr
 = 
	`∆_addr_˛⁄e
(
§c
->
exp_ma°î
.src);

108 i‡(!
addr
)

109  -
NLE_NOMEM
;

110 
d°
->
exp_ma°î
.
§c
 = 
addr
;

113 i‡(
§c
->
exp_ma°î
.
d°
) {

114 
addr
 = 
	`∆_addr_˛⁄e
(
§c
->
exp_ma°î
.
d°
);

115 i‡(!
addr
)

116  -
NLE_NOMEM
;

117 
d°
->
exp_ma°î
.d° = 
addr
;

121 i‡(
§c
->
exp_mask
.src) {

122 
addr
 = 
	`∆_addr_˛⁄e
(
§c
->
exp_mask
.src);

123 i‡(!
addr
)

124  -
NLE_NOMEM
;

125 
d°
->
exp_mask
.
§c
 = 
addr
;

128 i‡(
§c
->
exp_mask
.
d°
) {

129 
addr
 = 
	`∆_addr_˛⁄e
(
§c
->
exp_mask
.
d°
);

130 i‡(!
addr
)

131  -
NLE_NOMEM
;

132 
d°
->
exp_mask
.d° = 
addr
;

136 i‡(
§c
->
exp_«t
.src) {

137 
addr
 = 
	`∆_addr_˛⁄e
(
§c
->
exp_«t
.src);

138 i‡(!
addr
)

139  -
NLE_NOMEM
;

140 
d°
->
exp_«t
.
§c
 = 
addr
;

143 i‡(
§c
->
exp_«t
.
d°
) {

144 
addr
 = 
	`∆_addr_˛⁄e
(
§c
->
exp_«t
.
d°
);

145 i‡(!
addr
)

146  -
NLE_NOMEM
;

147 
d°
->
exp_«t
.d° = 
addr
;

150 i‡(
§c
->
exp_‚
)

151 
d°
->
exp_‚
 = 
	`°rdup
(
§c
->exp_fn);

153 i‡(
§c
->
exp_hñ≥r_«me
)

154 
d°
->
exp_hñ≥r_«me
 = 
	`°rdup
(
§c
->exp_helper_name);

157 
	}
}

159 
	$dump_addr
(
∆_dump_∑øms
 *
p
, 
∆_addr
 *
addr
, 
p‹t
)

161 
buf
[64];

163 i‡(
addr
)

164 
	`∆_dump
(
p
, "%s", 
	`∆_addr2°r
(
addr
, 
buf
, (buf)));

166 i‡(
p‹t
)

167 
	`∆_dump
(
p
, ":%u ", 
p‹t
);

168 i‡(
addr
)

169 
	`∆_dump
(
p
, " ");

170 
	}
}

172 
	$dump_icmp
(
∆_dump_∑øms
 *
p
, 
n‚l_exp
 *
exp
, 
tu∂e
)

174 i‡(
	`n‚l_exp_ã°_icmp
(
exp
, 
tu∂e
)) {

176 
	`∆_dump
(
p
, "icm∞ty≥ %d ", 
	`n‚l_exp_gë_icmp_ty≥
(
exp
, 
tu∂e
));

178 
	`∆_dump
(
p
, "codê%d ", 
	`n‚l_exp_gë_icmp_code
(
exp
, 
tu∂e
));

180 
	`∆_dump
(
p
, "id %d ", 
	`n‚l_exp_gë_icmp_id
(
exp
, 
tu∂e
));

182 
	}
}

184 
	$exp_dump_tu∂es
(
n‚l_exp
 *
exp
, 
∆_dump_∑øms
 *
p
)

186 
∆_addr
 *
tu∂e_§c
, *
tu∂e_d°
;

187 
tu∂e_•‹t
, 
tu∂e_dp‹t
;

188 
i
 = 0;

189 
buf
[64];

191 
i
 = 
NFNL_EXP_TUPLE_EXPECT
; i < 
NFNL_EXP_TUPLE_MAX
; i++) {

192 
tu∂e_§c
 = 
NULL
;

193 
tu∂e_d°
 = 
NULL
;

194 
tu∂e_•‹t
 = 0;

195 
tu∂e_dp‹t
 = 0;

198 i‡(
	`n‚l_exp_ã°_§c
(
exp
, 
i
))

199 
tu∂e_§c
 = 
	`n‚l_exp_gë_§c
(
exp
, 
i
);

200 i‡(
	`n‚l_exp_ã°_d°
(
exp
, 
i
))

201 
tu∂e_d°
 = 
	`n‚l_exp_gë_d°
(
exp
, 
i
);

204 i‡(
	`n‚l_exp_ã°_l4¥Ÿ⁄um
(
exp
, 
i
)) {

205 
	`∆_dump
(
p
, "%s ",

206 
	`∆_ù_¥Ÿo2°r
(
	`n‚l_exp_gë_l4¥Ÿ⁄um
(
exp
, 
i
), 
buf
, (buf)));

209 i‡(
	`n‚l_exp_ã°_p‹ts
(
exp
, 
i
)) {

210 
tu∂e_•‹t
 = 
	`n‚l_exp_gë_§c_p‹t
(
exp
, 
i
);

211 
tu∂e_dp‹t
 = 
	`n‚l_exp_gë_d°_p‹t
(
exp
, 
i
);

214 
	`dump_addr
(
p
, 
tu∂e_§c
, 
tu∂e_•‹t
);

215 
	`dump_addr
(
p
, 
tu∂e_d°
, 
tu∂e_dp‹t
);

216 
	`dump_icmp
(
p
, 
exp
, 0);

219 i‡(
	`n‚l_exp_ã°_«t_dú
(
exp
))

220 
	`∆_dump
(
p
, "«àdú %†", 
exp
->
exp_«t_dú
);

222 
	}
}

225 
	$exp_dump_löe
(
∆_obje˘
 *
a
, 
∆_dump_∑øms
 *
p
)

227 
n‚l_exp
 *
exp
 = (n‚l_ex∞*Ë
a
;

229 
	`∆_√w_löe
(
p
);

231 
	`exp_dump_tu∂es
(
exp
, 
p
);

233 
	`∆_dump
(
p
, "\n");

234 
	}
}

236 
	$exp_dump_dëaûs
(
∆_obje˘
 *
a
, 
∆_dump_∑øms
 *
p
)

238 
n‚l_exp
 *
exp
 = (n‚l_ex∞*Ë
a
;

239 
buf
[64];

240 
Â
 = 0;

242 
	`exp_dump_löe
(
a
, 
p
);

244 
	`∆_dump
(
p
, " id 0x%x ", 
exp
->
exp_id
);

245 
	`∆_dump_löe
(
p
, "family %s ",

246 
	`∆_af2°r
(
exp
->
exp_Ámûy
, 
buf
, (buf)));

248 i‡(
	`n‚l_exp_ã°_timeout
(
exp
)) {

249 
uöt64_t
 
timeout_ms
 = 
	`n‚l_exp_gë_timeout
(
exp
) * 1000UL;

250 
	`∆_dump
(
p
, "timeout %s ",

251 
	`∆_m£c2°r
(
timeout_ms
, 
buf
, (buf)));

254 i‡(
	`n‚l_exp_ã°_hñ≥r_«me
(
exp
))

255 
	`∆_dump
(
p
, "hñ≥∏%†", 
exp
->
exp_hñ≥r_«me
);

257 i‡(
	`n‚l_exp_ã°_‚
(
exp
))

258 
	`∆_dump
(
p
, "‚ %†", 
exp
->
exp_‚
);

260 i‡(
	`n‚l_exp_ã°_˛ass
(
exp
))

261 
	`∆_dump
(
p
, "˛as†%u ", 
	`n‚l_exp_gë_˛ass
(
exp
));

263 i‡(
	`n‚l_exp_ã°_z⁄e
(
exp
))

264 
	`∆_dump
(
p
, "z⁄ê%u ", 
	`n‚l_exp_gë_z⁄e
(
exp
));

266 i‡(
	`n‚l_exp_ã°_Êags
(
exp
))

267 
	`∆_dump
(
p
, "<");

268 
	#PRINT_FLAG
(
°r
) \

269 { 
	`∆_dump
(
p
, "%s%s", 
Â
++ ? "," : "", (
°r
)); }

	)

271 i‡(
exp
->
exp_Êags
 & 
NF_CT_EXPECT_PERMANENT
)

272 
	`PRINT_FLAG
("PERMANENT");

273 i‡(
exp
->
exp_Êags
 & 
NF_CT_EXPECT_INACTIVE
)

274 
	`PRINT_FLAG
("INACTIVE");

275 i‡(
exp
->
exp_Êags
 & 
NF_CT_EXPECT_USERSPACE
)

276 
	`PRINT_FLAG
("USERSPACE");

277 #unde‡
PRINT_FLAG


279 i‡(
	`n‚l_exp_ã°_Êags
(
exp
))

280 
	`∆_dump
(
p
, ">");

282 
	`∆_dump
(
p
, "\n");

283 
	}
}

285 
	$exp_cmp_l4¥Ÿo_p‹ts
 (
n‚l_exp_¥Ÿod©a
 *
a
, n‚l_exp_¥Ÿod©®*
b
) {

287 
d
 = 0;

288 
d
 = ( (
a
->
p‹t
.
§c
 !
b
->port.src) ||

289 (
a
->
p‹t
.
d°
 !
b
->port.dst) );

291  
d
;

292 
	}
}

294 
	$exp_cmp_l4¥Ÿo_icmp
 (
n‚l_exp_¥Ÿod©a
 *
a
, n‚l_exp_¥Ÿod©®*
b
) {

296 
d
 = 0;

297 
d
 = ( (
a
->
icmp
.
code
 !
b
->icmp.code) ||

298 (
a
->
icmp
.
ty≥
 !
b
->icmp.type) ||

299 (
a
->
icmp
.
id
 !
b
->icmp.id) );

301  
d
;

302 
	}
}

304 
	$exp_com∑ª
(
∆_obje˘
 *
_a
, ∆_obje˘ *
_b
,

305 
uöt32_t
 
©ås
, 
Êags
)

307 
n‚l_exp
 *
a
 = (n‚l_ex∞*Ë
_a
;

308 
n‚l_exp
 *
b
 = (n‚l_ex∞*Ë
_b
;

309 
diff
 = 0;

311 
	#EXP_DIFF
(
ATTR
, 
EXPR
Ë
	`ATTR_DIFF
(
©ås
, 
EXP_ATTR_
##ATTR, 
a
, 
b
, EXPR)

	)

312 
	#EXP_DIFF_VAL
(
ATTR
, 
FIELD
Ë
	`EXP_DIFF
(ATTR, 
a
->FIELD !
b
->FIELD)

	)

313 
	#EXP_DIFF_STRING
(
ATTR
, 
FIELD
Ë
	`EXP_DIFF
(ATTR, (
	`°rcmp
(
a
->FIELD, 
b
->FIELDË!0))

	)

314 
	#EXP_DIFF_ADDR
(
ATTR
, 
FIELD
) \

315 ((
Êags
 & 
LOOSE_COMPARISON
) \

316 ? 
	`EXP_DIFF
(
ATTR
, 
	`∆_addr_cmp_¥efix
(
a
->
FIELD
, 
b
->FIELD)) \

317 : 
	`EXP_DIFF
(
ATTR
, 
	`∆_addr_cmp
(
a
->
FIELD
, 
b
->FIELD)))

	)

318 
	#EXP_DIFF_L4PROTO_PORTS
(
ATTR
, 
FIELD
) \

319 
	`EXP_DIFF
(
ATTR
, 
	`exp_cmp_l4¥Ÿo_p‹ts
(&(
a
->
FIELD
), &(
b
->FIELD)))

	)

320 
	#EXP_DIFF_L4PROTO_ICMP
(
ATTR
, 
FIELD
) \

321 
	`EXP_DIFF
(
ATTR
, 
	`exp_cmp_l4¥Ÿo_icmp
(&(
a
->
FIELD
), &(
b
->FIELD)))

	)

323 
diff
 |
	`EXP_DIFF_VAL
(
FAMILY
, 
exp_Ámûy
);

324 
diff
 |
	`EXP_DIFF_VAL
(
TIMEOUT
, 
exp_timeout
);

325 
diff
 |
	`EXP_DIFF_VAL
(
ID
, 
exp_id
);

326 
diff
 |
	`EXP_DIFF_VAL
(
ZONE
, 
exp_z⁄e
);

327 
diff
 |
	`EXP_DIFF_VAL
(
CLASS
, 
exp_˛ass
);

328 
diff
 |
	`EXP_DIFF_VAL
(
FLAGS
, 
exp_Êags
);

329 
diff
 |
	`EXP_DIFF_VAL
(
NAT_DIR
, 
exp_«t_dú
);

331 
diff
 |
	`EXP_DIFF_STRING
(
FN
, 
exp_‚
);

332 
diff
 |
	`EXP_DIFF_STRING
(
HELPER_NAME
, 
exp_hñ≥r_«me
);

334 
diff
 |
	`EXP_DIFF_ADDR
(
EXPECT_IP_SRC
, 
exp_ex≥˘
.
§c
);

335 
diff
 |
	`EXP_DIFF_ADDR
(
EXPECT_IP_DST
, 
exp_ex≥˘
.
d°
);

336 
diff
 |
	`EXP_DIFF_VAL
(
EXPECT_L4PROTO_NUM
, 
exp_ex≥˘
.
¥Ÿo
.
l4¥Ÿ⁄um
);

337 
diff
 |
	`EXP_DIFF_L4PROTO_PORTS
(
EXPECT_L4PROTO_PORTS
, 
exp_ex≥˘
.
¥Ÿo
.
l4¥Ÿod©a
);

338 
diff
 |
	`EXP_DIFF_L4PROTO_ICMP
(
EXPECT_L4PROTO_ICMP
, 
exp_ex≥˘
.
¥Ÿo
.
l4¥Ÿod©a
);

340 
diff
 |
	`EXP_DIFF_ADDR
(
MASTER_IP_SRC
, 
exp_ma°î
.
§c
);

341 
diff
 |
	`EXP_DIFF_ADDR
(
MASTER_IP_DST
, 
exp_ma°î
.
d°
);

342 
diff
 |
	`EXP_DIFF_VAL
(
MASTER_L4PROTO_NUM
, 
exp_ma°î
.
¥Ÿo
.
l4¥Ÿ⁄um
);

343 
diff
 |
	`EXP_DIFF_L4PROTO_PORTS
(
MASTER_L4PROTO_PORTS
, 
exp_ma°î
.
¥Ÿo
.
l4¥Ÿod©a
);

344 
diff
 |
	`EXP_DIFF_L4PROTO_ICMP
(
MASTER_L4PROTO_ICMP
, 
exp_ma°î
.
¥Ÿo
.
l4¥Ÿod©a
);

346 
diff
 |
	`EXP_DIFF_ADDR
(
MASK_IP_SRC
, 
exp_mask
.
§c
);

347 
diff
 |
	`EXP_DIFF_ADDR
(
MASK_IP_DST
, 
exp_mask
.
d°
);

348 
diff
 |
	`EXP_DIFF_VAL
(
MASK_L4PROTO_NUM
, 
exp_mask
.
¥Ÿo
.
l4¥Ÿ⁄um
);

349 
diff
 |
	`EXP_DIFF_L4PROTO_PORTS
(
MASK_L4PROTO_PORTS
, 
exp_mask
.
¥Ÿo
.
l4¥Ÿod©a
);

350 
diff
 |
	`EXP_DIFF_L4PROTO_ICMP
(
MASK_L4PROTO_ICMP
, 
exp_mask
.
¥Ÿo
.
l4¥Ÿod©a
);

352 
diff
 |
	`EXP_DIFF_ADDR
(
NAT_IP_SRC
, 
exp_«t
.
§c
);

353 
diff
 |
	`EXP_DIFF_ADDR
(
NAT_IP_DST
, 
exp_«t
.
d°
);

354 
diff
 |
	`EXP_DIFF_VAL
(
NAT_L4PROTO_NUM
, 
exp_«t
.
¥Ÿo
.
l4¥Ÿ⁄um
);

355 
diff
 |
	`EXP_DIFF_L4PROTO_PORTS
(
NAT_L4PROTO_PORTS
, 
exp_«t
.
¥Ÿo
.
l4¥Ÿod©a
);

356 
diff
 |
	`EXP_DIFF_L4PROTO_ICMP
(
NAT_L4PROTO_ICMP
, 
exp_«t
.
¥Ÿo
.
l4¥Ÿod©a
);

358 #unde‡
EXP_DIFF


359 #unde‡
EXP_DIFF_VAL


360 #unde‡
EXP_DIFF_STRING


361 #unde‡
EXP_DIFF_ADDR


362 #unde‡
EXP_DIFF_L4PROTO_PORTS


363 #unde‡
EXP_DIFF_L4PROTO_ICMP


365  
diff
;

366 
	}
}

369 c⁄° 
å™s_tbl
 
	gexp_©ås
[] = {

370 
__ADD
(
EXP_ATTR_FAMILY
, 
Ámûy
)

371 
__ADD
(
EXP_ATTR_TIMEOUT
, 
timeout
)

372 
__ADD
(
EXP_ATTR_ID
, 
id
)

373 
__ADD
(
EXP_ATTR_HELPER_NAME
, 
hñ≥∫ame
)

374 
__ADD
(
EXP_ATTR_ZONE
, 
z⁄e
)

375 
__ADD
(
EXP_ATTR_CLASS
, 
˛ass
)

376 
__ADD
(
EXP_ATTR_FLAGS
, 
Êags
)

377 
__ADD
(
EXP_ATTR_FN
, 
fun˘i⁄
)

378 
__ADD
(
EXP_ATTR_EXPECT_IP_SRC
, 
ex≥˘ù§c
)

379 
__ADD
(
EXP_ATTR_EXPECT_IP_DST
, 
ex≥˘ùd°
)

380 
__ADD
(
EXP_ATTR_EXPECT_L4PROTO_NUM
, 
ex≥˘¥Ÿ⁄um
)

381 
__ADD
(
EXP_ATTR_EXPECT_L4PROTO_PORTS
, 
ex≥˘p‹ts
)

382 
__ADD
(
EXP_ATTR_EXPECT_L4PROTO_ICMP
, 
ex≥˘icmp
)

383 
__ADD
(
EXP_ATTR_MASTER_IP_SRC
, 
ma°îù§c
)

384 
__ADD
(
EXP_ATTR_MASTER_IP_DST
, 
ma°îùd°
)

385 
__ADD
(
EXP_ATTR_MASTER_L4PROTO_NUM
, 
ma°î¥Ÿ⁄um
)

386 
__ADD
(
EXP_ATTR_MASTER_L4PROTO_PORTS
, 
ma°îp‹ts
)

387 
__ADD
(
EXP_ATTR_MASTER_L4PROTO_ICMP
, 
ma°îicmp
)

388 
__ADD
(
EXP_ATTR_MASK_IP_SRC
, 
maskù§c
)

389 
__ADD
(
EXP_ATTR_MASK_IP_DST
, 
maskùd°
)

390 
__ADD
(
EXP_ATTR_MASK_L4PROTO_NUM
, 
mask¥Ÿ⁄um
)

391 
__ADD
(
EXP_ATTR_MASK_L4PROTO_PORTS
, 
maskp‹ts
)

392 
__ADD
(
EXP_ATTR_MASK_L4PROTO_ICMP
, 
maskicmp
)

393 
__ADD
(
EXP_ATTR_NAT_IP_SRC
, 
«tù§c
)

394 
__ADD
(
EXP_ATTR_NAT_IP_DST
, 
«tùd°
)

395 
__ADD
(
EXP_ATTR_NAT_L4PROTO_NUM
, 
«çrŸ⁄um
)

396 
__ADD
(
EXP_ATTR_NAT_L4PROTO_PORTS
, 
«ç‹ts
)

397 
__ADD
(
EXP_ATTR_NAT_L4PROTO_ICMP
, 
«ticmp
)

398 
__ADD
(
EXP_ATTR_NAT_DIR
, 
«tdú
)

401 *
	$exp_©ås2°r
(
©ås
, *
buf
, 
size_t
 
Àn
)

403  
	`__Êags2°r
(
©ås
, 
buf
, 
Àn
, 
exp_©ås
, 
	`ARRAY_SIZE
(exp_attrs));

404 
	}
}

411 
n‚l_exp
 *
	$n‚l_exp_Æloc
()

413  (
n‚l_exp
 *Ë
	`∆_obje˘_Æloc
(&
exp_obj_›s
);

414 
	}
}

416 
	$n‚l_exp_gë
(
n‚l_exp
 *
exp
)

418 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
exp
);

419 
	}
}

421 
	$n‚l_exp_put
(
n‚l_exp
 *
exp
)

423 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
exp
);

424 
	}
}

433 
	$n‚l_exp_£t_Ámûy
(
n‚l_exp
 *
exp
, 
uöt8_t
 
Ámûy
)

435 
exp
->
exp_Ámûy
 = 
Ámûy
;

436 
exp
->
˚_mask
 |
EXP_ATTR_FAMILY
;

437 
	}
}

439 
uöt8_t
 
	$n‚l_exp_gë_Ámûy
(c⁄° 
n‚l_exp
 *
exp
)

441 i‡(
exp
->
˚_mask
 & 
EXP_ATTR_FAMILY
)

442  
exp
->
exp_Ámûy
;

444  
AF_UNSPEC
;

445 
	}
}

447 
	$n‚l_exp_£t_Êags
(
n‚l_exp
 *
exp
, 
uöt32_t
 
Êags
)

449 
exp
->
exp_Êags
 |
Êags
;

450 
exp
->
˚_mask
 |
EXP_ATTR_FLAGS
;

451 
	}
}

453 
	$n‚l_exp_ã°_Êags
(c⁄° 
n‚l_exp
 *
exp
)

455  !!(
exp
->
˚_mask
 & 
EXP_ATTR_FLAGS
);

456 
	}
}

458 
	$n‚l_exp_un£t_Êags
(
n‚l_exp
 *
exp
, 
uöt32_t
 
Êags
)

460 
exp
->
exp_Êags
 &~
Êags
;

461 
exp
->
˚_mask
 |
EXP_ATTR_FLAGS
;

462 
	}
}

464 
uöt32_t
 
	$n‚l_exp_gë_Êags
(c⁄° 
n‚l_exp
 *
exp
)

466  
exp
->
exp_Êags
;

467 
	}
}

469 c⁄° 
å™s_tbl
 
	gÊag_èbÀ
[] = {

470 
__ADD
(
IPS_EXPECTED
, 
ex≥˘ed
)

471 
__ADD
(
IPS_SEEN_REPLY
, 
£í_ª∂y
)

472 
__ADD
(
IPS_ASSURED
, 
assuªd
)

475 * 
	$n‚l_exp_Êags2°r
(
Êags
, *
buf
, 
size_t
 
Àn
)

477  
	`__Êags2°r
(
Êags
, 
buf
, 
Àn
, 
Êag_èbÀ
,

478 
	`ARRAY_SIZE
(
Êag_èbÀ
));

479 
	}
}

481 
	$n‚l_exp_°r2Êags
(c⁄° *
«me
)

483  
	`__°r2Êags
(
«me
, 
Êag_èbÀ
, 
	`ARRAY_SIZE
(flag_table));

484 
	}
}

486 
	$n‚l_exp_£t_timeout
(
n‚l_exp
 *
exp
, 
uöt32_t
 
timeout
)

488 
exp
->
exp_timeout
 = 
timeout
;

489 
exp
->
˚_mask
 |
EXP_ATTR_TIMEOUT
;

490 
	}
}

492 
	$n‚l_exp_ã°_timeout
(c⁄° 
n‚l_exp
 *
exp
)

494  !!(
exp
->
˚_mask
 & 
EXP_ATTR_TIMEOUT
);

495 
	}
}

497 
uöt32_t
 
	$n‚l_exp_gë_timeout
(c⁄° 
n‚l_exp
 *
exp
)

499  
exp
->
exp_timeout
;

500 
	}
}

502 
	$n‚l_exp_£t_id
(
n‚l_exp
 *
exp
, 
uöt32_t
 
id
)

504 
exp
->
exp_id
 = 
id
;

505 
exp
->
˚_mask
 |
EXP_ATTR_ID
;

506 
	}
}

508 
	$n‚l_exp_ã°_id
(c⁄° 
n‚l_exp
 *
exp
)

510  !!(
exp
->
˚_mask
 & 
EXP_ATTR_ID
);

511 
	}
}

513 
uöt32_t
 
	$n‚l_exp_gë_id
(c⁄° 
n‚l_exp
 *
exp
)

515  
exp
->
exp_id
;

516 
	}
}

518 
	$n‚l_exp_£t_hñ≥r_«me
(
n‚l_exp
 *
exp
, *
«me
)

520 
	`‰ì
(
exp
->
exp_hñ≥r_«me
);

521 
exp
->
exp_hñ≥r_«me
 = 
	`°rdup
(
«me
);

522 i‡(!
exp
->
exp_hñ≥r_«me
)

523  -
NLE_NOMEM
;

525 
exp
->
˚_mask
 |
EXP_ATTR_HELPER_NAME
;

527 
	}
}

529 
	$n‚l_exp_ã°_hñ≥r_«me
(c⁄° 
n‚l_exp
 *
exp
)

531  !!(
exp
->
˚_mask
 & 
EXP_ATTR_HELPER_NAME
);

532 
	}
}

534 c⁄° * 
	$n‚l_exp_gë_hñ≥r_«me
(c⁄° 
n‚l_exp
 *
exp
)

536  
exp
->
exp_hñ≥r_«me
;

537 
	}
}

539 
	$n‚l_exp_£t_z⁄e
(
n‚l_exp
 *
exp
, 
uöt16_t
 
z⁄e
)

541 
exp
->
exp_z⁄e
 = 
z⁄e
;

542 
exp
->
˚_mask
 |
EXP_ATTR_ZONE
;

543 
	}
}

545 
	$n‚l_exp_ã°_z⁄e
(c⁄° 
n‚l_exp
 *
exp
)

547  !!(
exp
->
˚_mask
 & 
EXP_ATTR_ZONE
);

548 
	}
}

550 
uöt16_t
 
	$n‚l_exp_gë_z⁄e
(c⁄° 
n‚l_exp
 *
exp
)

552  
exp
->
exp_z⁄e
;

553 
	}
}

555 
	$n‚l_exp_£t_˛ass
(
n‚l_exp
 *
exp
, 
uöt32_t
 
˛ass
)

557 
exp
->
exp_˛ass
 = 
˛ass
;

558 
exp
->
˚_mask
 |
EXP_ATTR_CLASS
;

559 
	}
}

561 
	$n‚l_exp_ã°_˛ass
(c⁄° 
n‚l_exp
 *
exp
)

563  !!(
exp
->
˚_mask
 & 
EXP_ATTR_CLASS
);

564 
	}
}

566 
uöt32_t
 
	$n‚l_exp_gë_˛ass
(c⁄° 
n‚l_exp
 *
exp
)

568  
exp
->
exp_˛ass
;

569 
	}
}

571 
	$n‚l_exp_£t_‚
(
n‚l_exp
 *
exp
, *
‚
)

573 
	`‰ì
(
exp
->
exp_‚
);

574 
exp
->
exp_‚
 = 
	`°rdup
(
‚
);

575 i‡(!
exp
->
exp_‚
)

576  -
NLE_NOMEM
;

578 
exp
->
˚_mask
 |
EXP_ATTR_FN
;

580 
	}
}

582 
	$n‚l_exp_ã°_‚
(c⁄° 
n‚l_exp
 *
exp
)

584  !!(
exp
->
˚_mask
 & 
EXP_ATTR_FN
);

585 
	}
}

587 c⁄° * 
	$n‚l_exp_gë_‚
(c⁄° 
n‚l_exp
 *
exp
)

589  
exp
->
exp_‚
;

590 
	}
}

592 
	$n‚l_exp_£t_«t_dú
(
n‚l_exp
 *
exp
, 
uöt8_t
 
«t_dú
)

594 
exp
->
exp_«t_dú
 = 
«t_dú
;

595 
exp
->
˚_mask
 |
EXP_ATTR_NAT_DIR
;

596 
	}
}

598 
	$n‚l_exp_ã°_«t_dú
(c⁄° 
n‚l_exp
 *
exp
)

600  !!(
exp
->
˚_mask
 & 
EXP_ATTR_NAT_DIR
);

601 
	}
}

603 
uöt8_t
 
	$n‚l_exp_gë_«t_dú
(c⁄° 
n‚l_exp
 *
exp
)

605  
exp
->
exp_«t_dú
;

606 
	}
}

608 
	#EXP_GET_TUPLE
(
e
, 
t
) \

609 (
t
 =
NFNL_EXP_TUPLE_MASTER
) ? \

610 &(
e
->
exp_ma°î
) : \

611 (
t
 =
NFNL_EXP_TUPLE_MASK
) ? \

612 &(
e
->
exp_mask
) : \

613 (
t
 =
NFNL_EXP_TUPLE_NAT
) ? \

614 &(
e
->
exp_«t
Ë: &(
exp
->
exp_ex≥˘
)

	)

616 
	$exp_gë_§c_©å
(
tu∂e
)

618 
©å
 = 0;

620 
tu∂e
) {

621 
NFNL_EXP_TUPLE_MASTER
:

622 
©å
 = 
EXP_ATTR_MASTER_IP_SRC
;

624 
NFNL_EXP_TUPLE_MASK
:

625 
©å
 = 
EXP_ATTR_MASK_IP_SRC
;

627 
NFNL_EXP_TUPLE_NAT
:

628 
©å
 = 
EXP_ATTR_NAT_IP_SRC
;

630 
NFNL_EXP_TUPLE_EXPECT
:

632 
©å
 = 
EXP_ATTR_EXPECT_IP_SRC
;

635  
©å
;

636 
	}
}

638 
	$exp_gë_d°_©å
(
tu∂e
)

640 
©å
 = 0;

642 
tu∂e
) {

643 
NFNL_EXP_TUPLE_MASTER
:

644 
©å
 = 
EXP_ATTR_MASTER_IP_DST
;

646 
NFNL_EXP_TUPLE_MASK
:

647 
©å
 = 
EXP_ATTR_MASK_IP_DST
;

649 
NFNL_EXP_TUPLE_NAT
:

650 
©å
 = 
EXP_ATTR_NAT_IP_DST
;

652 
NFNL_EXP_TUPLE_EXPECT
:

654 
©å
 = 
EXP_ATTR_EXPECT_IP_DST
;

657  
©å
;

658 
	}
}

661 
	$exp_£t_addr
(
n‚l_exp
 *
exp
, 
∆_addr
 *
addr
,

662 
©å
, 
∆_addr
 ** 
exp_addr
)

664 i‡(
exp
->
˚_mask
 & 
EXP_ATTR_FAMILY
) {

665 i‡(
addr
->
a_Ámûy
 !
exp
->
exp_Ámûy
)

666  -
NLE_AF_MISMATCH
;

668 
	`n‚l_exp_£t_Ámûy
(
exp
, 
addr
->
a_Ámûy
);

670 i‡(*
exp_addr
)

671 
	`∆_addr_put
(*
exp_addr
);

673 
	`∆_addr_gë
(
addr
);

674 *
exp_addr
 = 
addr
;

675 
exp
->
˚_mask
 |
©å
;

678 
	}
}

680 
	$n‚l_exp_£t_§c
(
n‚l_exp
 *
exp
, 
tu∂e
, 
∆_addr
 *
addr
)

682 
n‚l_exp_dú
 *
dú
 = 
	`EXP_GET_TUPLE
(
exp
, 
tu∂e
);

684  
	`exp_£t_addr
(
exp
, 
addr
, 
	`exp_gë_§c_©å
(
tu∂e
), &
dú
->
§c
);

685 
	}
}

687 
	$n‚l_exp_£t_d°
(
n‚l_exp
 *
exp
, 
tu∂e
, 
∆_addr
 *
addr
)

689 
n‚l_exp_dú
 *
dú
 = 
	`EXP_GET_TUPLE
(
exp
, 
tu∂e
);

691  
	`exp_£t_addr
(
exp
, 
addr
, 
	`exp_gë_d°_©å
(
tu∂e
), &
dú
->
d°
);

692 
	}
}

694 
	$n‚l_exp_ã°_§c
(c⁄° 
n‚l_exp
 *
exp
, 
tu∂e
)

696  !!(
exp
->
˚_mask
 & 
	`exp_gë_§c_©å
(
tu∂e
));

697 
	}
}

699 
	$n‚l_exp_ã°_d°
(c⁄° 
n‚l_exp
 *
exp
, 
tu∂e
)

701  !!(
exp
->
˚_mask
 & 
	`exp_gë_d°_©å
(
tu∂e
));

702 
	}
}

704 
∆_addr
 *
	$n‚l_exp_gë_§c
(c⁄° 
n‚l_exp
 *
exp
, 
tu∂e
)

706 c⁄° 
n‚l_exp_dú
 *
dú
 = 
	`EXP_GET_TUPLE
(
exp
, 
tu∂e
);

708 i‡(!(
exp
->
˚_mask
 & 
	`exp_gë_§c_©å
(
tu∂e
)))

709  
NULL
;

710  
dú
->
§c
;

711 
	}
}

713 
∆_addr
 *
	$n‚l_exp_gë_d°
(c⁄° 
n‚l_exp
 *
exp
, 
tu∂e
)

715 c⁄° 
n‚l_exp_dú
 *
dú
 = 
	`EXP_GET_TUPLE
(
exp
, 
tu∂e
);

717 i‡(!(
exp
->
˚_mask
 & 
	`exp_gë_d°_©å
(
tu∂e
)))

718  
NULL
;

719  
dú
->
d°
;

720 
	}
}

722 
	$exp_gë_l4¥Ÿ⁄um_©å
(
tu∂e
)

724 
©å
 = 0;

726 
tu∂e
) {

727 
NFNL_EXP_TUPLE_MASTER
:

728 
©å
 = 
EXP_ATTR_MASTER_L4PROTO_NUM
;

730 
NFNL_EXP_TUPLE_MASK
:

731 
©å
 = 
EXP_ATTR_MASK_L4PROTO_NUM
;

733 
NFNL_EXP_TUPLE_NAT
:

734 
©å
 = 
EXP_ATTR_NAT_L4PROTO_NUM
;

736 
NFNL_EXP_TUPLE_EXPECT
:

738 
©å
 = 
EXP_ATTR_EXPECT_L4PROTO_NUM
;

741  
©å
;

742 
	}
}

744 
	$n‚l_exp_£t_l4¥Ÿ⁄um
(
n‚l_exp
 *
exp
, 
tu∂e
, 
uöt8_t
 
l4¥Ÿ⁄um
)

746 
n‚l_exp_dú
 *
dú
 = 
	`EXP_GET_TUPLE
(
exp
, 
tu∂e
);

748 
dú
->
¥Ÿo
.
l4¥Ÿ⁄um
 =Ü4protonum;

749 
exp
->
˚_mask
 |
	`exp_gë_l4¥Ÿ⁄um_©å
(
tu∂e
);

750 
	}
}

752 
	$n‚l_exp_ã°_l4¥Ÿ⁄um
(c⁄° 
n‚l_exp
 *
exp
, 
tu∂e
)

754  !!(
exp
->
˚_mask
 & 
	`exp_gë_l4¥Ÿ⁄um_©å
(
tu∂e
));

755 
	}
}

757 
uöt8_t
 
	$n‚l_exp_gë_l4¥Ÿ⁄um
(c⁄° 
n‚l_exp
 *
exp
, 
tu∂e
)

759 c⁄° 
n‚l_exp_dú
 *
dú
 = 
	`EXP_GET_TUPLE
(
exp
, 
tu∂e
);

760  
dú
->
¥Ÿo
.
l4¥Ÿ⁄um
;

761 
	}
}

763 
	$exp_gë_l4p‹ts_©å
(
tu∂e
)

765 
©å
 = 0;

767 
tu∂e
) {

768 
NFNL_EXP_TUPLE_MASTER
:

769 
©å
 = 
EXP_ATTR_MASTER_L4PROTO_PORTS
;

771 
NFNL_EXP_TUPLE_MASK
:

772 
©å
 = 
EXP_ATTR_MASK_L4PROTO_PORTS
;

774 
NFNL_EXP_TUPLE_NAT
:

775 
©å
 = 
EXP_ATTR_NAT_L4PROTO_PORTS
;

777 
NFNL_EXP_TUPLE_EXPECT
:

779 
©å
 = 
EXP_ATTR_EXPECT_L4PROTO_PORTS
;

782  
©å
;

783 
	}
}

785 
	$n‚l_exp_£t_p‹ts
(
n‚l_exp
 *
exp
, 
tu∂e
, 
uöt16_t
 
§˝‹t
, uöt16_à
d°p‹t
)

787 
n‚l_exp_dú
 *
dú
 = 
	`EXP_GET_TUPLE
(
exp
, 
tu∂e
);

789 
dú
->
¥Ÿo
.
l4¥Ÿod©a
.
p‹t
.
§c
 = 
§˝‹t
;

790 
dú
->
¥Ÿo
.
l4¥Ÿod©a
.
p‹t
.
d°
 = 
d°p‹t
;

792 
exp
->
˚_mask
 |
	`exp_gë_l4p‹ts_©å
(
tu∂e
);

793 
	}
}

795 
	$n‚l_exp_ã°_p‹ts
(c⁄° 
n‚l_exp
 *
exp
, 
tu∂e
)

797  !!(
exp
->
˚_mask
 & 
	`exp_gë_l4p‹ts_©å
(
tu∂e
));

798 
	}
}

800 
uöt16_t
 
	$n‚l_exp_gë_§c_p‹t
(c⁄° 
n‚l_exp
 *
exp
, 
tu∂e
)

802 c⁄° 
n‚l_exp_dú
 *
dú
 = 
	`EXP_GET_TUPLE
(
exp
, 
tu∂e
);

803  
dú
->
¥Ÿo
.
l4¥Ÿod©a
.
p‹t
.
§c
;

804 
	}
}

806 
uöt16_t
 
	$n‚l_exp_gë_d°_p‹t
(c⁄° 
n‚l_exp
 *
exp
, 
tu∂e
)

808 c⁄° 
n‚l_exp_dú
 *
dú
 = 
	`EXP_GET_TUPLE
(
exp
, 
tu∂e
);

810  
dú
->
¥Ÿo
.
l4¥Ÿod©a
.
p‹t
.
d°
;

811 
	}
}

813 
	$exp_gë_l4icmp_©å
(
tu∂e
)

815 
©å
 = 0;

817 
tu∂e
) {

818 
NFNL_EXP_TUPLE_MASTER
:

819 
©å
 = 
EXP_ATTR_MASTER_L4PROTO_ICMP
;

821 
NFNL_EXP_TUPLE_MASK
:

822 
©å
 = 
EXP_ATTR_MASK_L4PROTO_ICMP
;

824 
NFNL_EXP_TUPLE_NAT
:

825 
©å
 = 
EXP_ATTR_NAT_L4PROTO_ICMP
;

827 
NFNL_EXP_TUPLE_EXPECT
:

829 
©å
 = 
EXP_ATTR_EXPECT_L4PROTO_ICMP
;

832  
©å
;

833 
	}
}

835 
	$n‚l_exp_£t_icmp
(
n‚l_exp
 *
exp
, 
tu∂e
, 
uöt16_t
 
id
, 
uöt8_t
 
ty≥
, uöt8_à
code
)

837 
n‚l_exp_dú
 *
dú
 = 
	`EXP_GET_TUPLE
(
exp
, 
tu∂e
);

839 
dú
->
¥Ÿo
.
l4¥Ÿod©a
.
icmp
.
id
 = id;

840 
dú
->
¥Ÿo
.
l4¥Ÿod©a
.
icmp
.
ty≥
 =Åype;

841 
dú
->
¥Ÿo
.
l4¥Ÿod©a
.
icmp
.
code
 = code;

843 
exp
->
˚_mask
 |
	`exp_gë_l4icmp_©å
(
tu∂e
);

844 
	}
}

846 
	$n‚l_exp_ã°_icmp
(c⁄° 
n‚l_exp
 *
exp
, 
tu∂e
)

848 
©å
 = 
	`exp_gë_l4icmp_©å
(
tu∂e
);

849  !!(
exp
->
˚_mask
 & 
©å
);

850 
	}
}

852 
uöt16_t
 
	$n‚l_exp_gë_icmp_id
(c⁄° 
n‚l_exp
 *
exp
, 
tu∂e
)

854 c⁄° 
n‚l_exp_dú
 *
dú
 = 
	`EXP_GET_TUPLE
(
exp
, 
tu∂e
);

856  
dú
->
¥Ÿo
.
l4¥Ÿod©a
.
icmp
.
id
;

857 
	}
}

859 
uöt8_t
 
	$n‚l_exp_gë_icmp_ty≥
(c⁄° 
n‚l_exp
 *
exp
, 
tu∂e
)

861 c⁄° 
n‚l_exp_dú
 *
dú
 = 
	`EXP_GET_TUPLE
(
exp
, 
tu∂e
);

863  
dú
->
¥Ÿo
.
l4¥Ÿod©a
.
icmp
.
ty≥
;

864 
	}
}

866 
uöt8_t
 
	$n‚l_exp_gë_icmp_code
(c⁄° 
n‚l_exp
 *
exp
, 
tu∂e
)

868 c⁄° 
n‚l_exp_dú
 *
dú
 = 
	`EXP_GET_TUPLE
(
exp
, 
tu∂e
);

870  
dú
->
¥Ÿo
.
l4¥Ÿod©a
.
icmp
.
code
;

871 
	}
}

875 
∆_obje˘_›s
 
	gexp_obj_›s
 = {

876 .
oo_«me
 = "netfilter/exp",

877 .
	goo_size
 = (
n‚l_exp
),

878 .
	goo_‰ì_d©a
 = 
exp_‰ì_d©a
,

879 .
	goo_˛⁄e
 = 
exp_˛⁄e
,

880 .
	goo_dump
 = {

881 [
NL_DUMP_LINE
] = 
exp_dump_löe
,

882 [
NL_DUMP_DETAILS
] = 
exp_dump_dëaûs
,

884 .
	goo_com∑ª
 = 
exp_com∑ª
,

885 .
	goo_©ås2°r
 = 
exp_©ås2°r
,

	@mylibnl/libnl-3.2.25/lib/netfilter/log.c

21 
	~<sys/ty≥s.h
>

22 
	~<löux/√tfûãr/n‚ëlök_log.h
>

24 
	~<√éök-¥iv©e/√éök.h
>

25 
	~<√éök/©å.h
>

26 
	~<√éök/√tfûãr/n‚l.h
>

27 
	~<√éök/√tfûãr/log.h
>

34 
	$buûd_log_cmd_ªque°
(
uöt8_t
 
Ámûy
, 
uöt16_t
 
queuíum
,

35 
uöt8_t
 
comm™d
, 
∆_msg
 **
ªsu…
)

37 
∆_msg
 *
msg
;

38 
nfu l_msg_c⁄fig_cmd
 
cmd
;

40 
msg
 = 
	`n‚lmsg_Æloc_sim∂e
(
NFNL_SUBSYS_ULOG
, 
NFULNL_MSG_CONFIG
, 0,

41 
Ámûy
, 
queuíum
);

42 i‡(
msg
 =
NULL
)

43  -
NLE_NOMEM
;

45 
cmd
.
comm™d
 = command;

46 i‡(
	`∆a_put
(
msg
, 
NFULA_CFG_CMD
, (
cmd
), &cmd) < 0)

47 
∆a_put_Áûuª
;

49 *
ªsu…
 = 
msg
;

52 
∆a_put_Áûuª
:

53 
	`∆msg_‰ì
(
msg
);

54  -
NLE_MSGSIZE
;

55 
	}
}

57 
	$£nd_log_ªque°
(
∆_sock
 *
sk
, 
∆_msg
 *
msg
)

59 
îr
;

61 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sk
, 
msg
);

62 
	`∆msg_‰ì
(
msg
);

63 i‡(
îr
 < 0)

64  
îr
;

66  
	`waô_f‹_ack
(
sk
);

67 
	}
}

69 
	$n‚l_log_buûd_pf_böd
(
uöt8_t
 
pf
, 
∆_msg
 **
ªsu…
)

71  
	`buûd_log_cmd_ªque°
(
pf
, 0, 
NFULNL_CFG_CMD_PF_BIND
, 
ªsu…
);

72 
	}
}

74 
	$n‚l_log_pf_böd
(
∆_sock
 *
∆h
, 
uöt8_t
 
pf
)

76 
∆_msg
 *
msg
;

77 
îr
;

79 i‡((
îr
 = 
	`n‚l_log_buûd_pf_böd
(
pf
, &
msg
)) < 0)

80  
îr
;

82  
	`£nd_log_ªque°
(
∆h
, 
msg
);

83 
	}
}

85 
	$n‚l_log_buûd_pf_unböd
(
uöt8_t
 
pf
, 
∆_msg
 **
ªsu…
)

87  
	`buûd_log_cmd_ªque°
(
pf
, 0, 
NFULNL_CFG_CMD_PF_UNBIND
, 
ªsu…
);

88 
	}
}

90 
	$n‚l_log_pf_unböd
(
∆_sock
 *
∆h
, 
uöt8_t
 
pf
)

92 
∆_msg
 *
msg
;

93 
îr
;

95 i‡((
îr
 = 
	`n‚l_log_buûd_pf_unböd
(
pf
, &
msg
)) < 0)

96  
îr
;

98  
	`£nd_log_ªque°
(
∆h
, 
msg
);

99 
	}
}

101 
	$n‚l_log_buûd_ªque°
(c⁄° 
n‚l_log
 *
log
,

102 
∆_msg
 **
ªsu…
)

104 
∆_msg
 *
msg
;

106 i‡(!
	`n‚l_log_ã°_group
(
log
))

107  -
NLE_MISSING_ATTR
;

109 
msg
 = 
	`n‚lmsg_Æloc_sim∂e
(
NFNL_SUBSYS_ULOG
, 
NFULNL_MSG_CONFIG
, 0,

110 0, 
	`n‚l_log_gë_group
(
log
));

111 i‡(
msg
 =
NULL
)

112  -
NLE_NOMEM
;

117 i‡(
	`n‚l_log_ã°_c›y_mode
(
log
)) {

118 
nfu l_msg_c⁄fig_mode
 
mode
;

120 
	`n‚l_log_gë_c›y_mode
(
log
)) {

121 
NFNL_LOG_COPY_NONE
:

122 
mode
.
c›y_mode
 = 
NFULNL_COPY_NONE
;

124 
NFNL_LOG_COPY_META
:

125 
mode
.
c›y_mode
 = 
NFULNL_COPY_META
;

127 
NFNL_LOG_COPY_PACKET
:

128 
mode
.
c›y_mode
 = 
NFULNL_COPY_PACKET
;

131 
mode
.
c›y_ønge
 = 
	`ht⁄l
(
	`n‚l_log_gë_c›y_ønge
(
log
));

132 
mode
.
_∑d
 = 0;

134 i‡(
	`∆a_put
(
msg
, 
NFULA_CFG_MODE
, (
mode
), &mode) < 0)

135 
∆a_put_Áûuª
;

138 i‡(
	`n‚l_log_ã°_Êush_timeout
(
log
) &&

139 
	`∆a_put_u32
(
msg
, 
NFULA_CFG_TIMEOUT
,

140 
	`ht⁄l
(
	`n‚l_log_gë_Êush_timeout
(
log
))) < 0)

141 
∆a_put_Áûuª
;

143 i‡(
	`n‚l_log_ã°_Æloc_size
(
log
) &&

144 
	`∆a_put_u32
(
msg
, 
NFULA_CFG_NLBUFSIZ
,

145 
	`ht⁄l
(
	`n‚l_log_gë_Æloc_size
(
log
))) < 0)

146 
∆a_put_Áûuª
;

148 i‡(
	`n‚l_log_ã°_queue_thªshﬁd
(
log
) &&

149 
	`∆a_put_u32
(
msg
, 
NFULA_CFG_QTHRESH
,

150 
	`ht⁄l
(
	`n‚l_log_gë_queue_thªshﬁd
(
log
))) < 0)

151 
∆a_put_Áûuª
;

153 *
ªsu…
 = 
msg
;

156 
∆a_put_Áûuª
:

157 
	`∆msg_‰ì
(
msg
);

158  -
NLE_MSGSIZE
;

159 
	}
}

161 
	$n‚l_log_buûd_¸óã_ªque°
(c⁄° 
n‚l_log
 *
log
,

162 
∆_msg
 **
ªsu…
)

164 
nfu l_msg_c⁄fig_cmd
 
cmd
;

165 
îr
;

167 i‡((
îr
 = 
	`n‚l_log_buûd_ªque°
(
log
, 
ªsu…
)) < 0)

168  
îr
;

170 
cmd
.
comm™d
 = 
NFULNL_CFG_CMD_BIND
;

172 i‡(
	`∆a_put
(*
ªsu…
, 
NFULA_CFG_CMD
, (
cmd
), &cmd) < 0)

173 
∆a_put_Áûuª
;

177 
∆a_put_Áûuª
:

178 
	`∆msg_‰ì
(*
ªsu…
);

179  -
NLE_MSGSIZE
;

180 
	}
}

182 
	$n‚l_log_¸óã
(
∆_sock
 *
∆h
, c⁄° 
n‚l_log
 *
log
)

184 
∆_msg
 *
msg
;

185 
îr
;

187 i‡((
îr
 = 
	`n‚l_log_buûd_¸óã_ªque°
(
log
, &
msg
)) < 0)

188  
îr
;

190  
	`£nd_log_ªque°
(
∆h
, 
msg
);

191 
	}
}

193 
	$n‚l_log_buûd_ch™ge_ªque°
(c⁄° 
n‚l_log
 *
log
,

194 
∆_msg
 **
ªsu…
)

196  
	`n‚l_log_buûd_ªque°
(
log
, 
ªsu…
);

197 
	}
}

199 
	$n‚l_log_ch™ge
(
∆_sock
 *
∆h
, c⁄° 
n‚l_log
 *
log
)

201 
∆_msg
 *
msg
;

202 
îr
;

204 i‡((
îr
 = 
	`n‚l_log_buûd_ch™ge_ªque°
(
log
, &
msg
)) < 0)

205  
îr
;

207  
	`£nd_log_ªque°
(
∆h
, 
msg
);

208 
	}
}

210 
	$n‚l_log_buûd_dñëe_ªque°
(c⁄° 
n‚l_log
 *
log
,

211 
∆_msg
 **
ªsu…
)

213 i‡(!
	`n‚l_log_ã°_group
(
log
))

214  -
NLE_MISSING_ATTR
;

216  
	`buûd_log_cmd_ªque°
(0, 
	`n‚l_log_gë_group
(
log
),

217 
NFULNL_CFG_CMD_UNBIND
, 
ªsu…
);

218 
	}
}

220 
	$n‚l_log_dñëe
(
∆_sock
 *
∆h
, c⁄° 
n‚l_log
 *
log
)

222 
∆_msg
 *
msg
;

223 
îr
;

225 i‡((
îr
 = 
	`n‚l_log_buûd_dñëe_ªque°
(
log
, &
msg
)) < 0)

226  
îr
;

228  
	`£nd_log_ªque°
(
∆h
, 
msg
);

229 
	}
}

233 
∆_ˇche_›s
 
	gn‚l_log_›s
 = {

234 .
co_«me
 = "netfilter/log",

235 .
	gco_obj_›s
 = &
log_obj_›s
,

236 .
	gco_msgty≥s
 = {

237 
END_OF_MSGTYPES_LIST
,

241 
__öô
 
	$log_öô
()

243 
	`∆_ˇche_mngt_ªgi°î
(&
n‚l_log_›s
);

244 
	}
}

246 
__exô
 
	$log_exô
()

248 
	`∆_ˇche_mngt_uƒegi°î
(&
n‚l_log_›s
);

249 
	}
}

	@mylibnl/libnl-3.2.25/lib/netfilter/log_msg.c

22 
	~<sys/ty≥s.h
>

23 
	~<löux/√tfûãr/n‚ëlök_log.h
>

25 
	~<√éök-¥iv©e/√éök.h
>

26 
	~<√éök/©å.h
>

27 
	~<√éök/√tfûãr/n‚l.h
>

28 
	~<√éök/√tfûãr/log_msg.h
>

29 
	~<byãsw≠.h
>

31 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


32 
uöt64_t
 
	$¡ohŒ
(
uöt64_t
 
x
)

34  
x
;

35 
	}
}

36 #ñi‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


37 
uöt64_t
 
	$¡ohŒ
(
uöt64_t
 
x
)

39  
	`bsw≠_64
(
x
);

40 
	}
}

43 
∆a_pﬁicy
 
	glog_msg_pﬁicy
[
NFULA_MAX
+1] = {

44 [
NFULA_PACKET_HDR
] = {

45 .
möÀn
 = (
nfu l_msg_∑ckë_hdr
)

47 [
NFULA_MARK
] = { .
ty≥
 = 
NLA_U32
 },

48 [
NFULA_TIMESTAMP
] = {

49 .
möÀn
 = (
nfu l_msg_∑ckë_time°amp
)

51 [
NFULA_IFINDEX_INDEV
] = { .
ty≥
 = 
NLA_U32
 },

52 [
NFULA_IFINDEX_OUTDEV
] = { .
ty≥
 = 
NLA_U32
 },

53 [
NFULA_IFINDEX_PHYSINDEV
] = { .
ty≥
 = 
NLA_U32
 },

54 [
NFULA_IFINDEX_PHYSOUTDEV
] = { .
ty≥
 = 
NLA_U32
 },

55 [
NFULA_HWADDR
] = {

56 .
möÀn
 = (
nfu l_msg_∑ckë_hw
)

59 [
NFULA_PREFIX
] = { .
ty≥
 = 
NLA_STRING
, },

60 [
NFULA_UID
] = { .
ty≥
 = 
NLA_U32
 },

61 [
NFULA_GID
] = { .
ty≥
 = 
NLA_U32
 },

62 [
NFULA_SEQ
] = { .
ty≥
 = 
NLA_U32
 },

63 [
NFULA_SEQ_GLOBAL
] = { .
ty≥
 = 
NLA_U32
 },

66 
	$n‚lmsg_log_msg_∑r£
(
∆msghdr
 *
∆h
, 
n‚l_log_msg
 **
ªsu…
)

68 
n‚l_log_msg
 *
msg
;

69 
∆©å
 *
tb
[
NFULA_MAX
+1];

70 
∆©å
 *
©å
;

71 
îr
;

73 
msg
 = 
	`n‚l_log_msg_Æloc
();

74 i‡(!
msg
)

75  -
NLE_NOMEM
;

77 
msg
->
˚_msgty≥
 = 
∆h
->
∆msg_ty≥
;

79 
îr
 = 
	`∆msg_∑r£
(
∆h
, (
nfgímsg
), 
tb
, 
NFULA_MAX
,

80 
log_msg_pﬁicy
);

81 i‡(
îr
 < 0)

82 
îrout
;

84 
	`n‚l_log_msg_£t_Ámûy
(
msg
, 
	`n‚lmsg_Ámûy
(
∆h
));

86 
©å
 = 
tb
[
NFULA_PACKET_HDR
];

87 i‡(
©å
) {

88 
nfu l_msg_∑ckë_hdr
 *
hdr
 = 
	`∆a_d©a
(
©å
);

90 i‡(
hdr
->
hw_¥Ÿocﬁ
)

91 
	`n‚l_log_msg_£t_hw¥Ÿo
(
msg
, 
hdr
->
hw_¥Ÿocﬁ
);

92 
	`n‚l_log_msg_£t_hook
(
msg
, 
hdr
->
hook
);

95 
©å
 = 
tb
[
NFULA_MARK
];

96 i‡(
©å
)

97 
	`n‚l_log_msg_£t_m¨k
(
msg
, 
	`¡ohl
(
	`∆a_gë_u32
(
©å
)));

99 
©å
 = 
tb
[
NFULA_TIMESTAMP
];

100 i‡(
©å
) {

101 
nfu l_msg_∑ckë_time°amp
 *
time°amp
 = 
	`∆a_d©a
(
©å
);

102 
timevÆ
 
tv
;

104 
tv
.
tv_£c
 = 
	`¡ohŒ
(
time°amp
->
£c
);

105 
tv
.
tv_u£c
 = 
	`¡ohŒ
(
time°amp
->
u£c
);

106 
	`n‚l_log_msg_£t_time°amp
(
msg
, &
tv
);

109 
©å
 = 
tb
[
NFULA_IFINDEX_INDEV
];

110 i‡(
©å
)

111 
	`n‚l_log_msg_£t_ödev
(
msg
, 
	`¡ohl
(
	`∆a_gë_u32
(
©å
)));

113 
©å
 = 
tb
[
NFULA_IFINDEX_OUTDEV
];

114 i‡(
©å
)

115 
	`n‚l_log_msg_£t_outdev
(
msg
, 
	`¡ohl
(
	`∆a_gë_u32
(
©å
)));

117 
©å
 = 
tb
[
NFULA_IFINDEX_PHYSINDEV
];

118 i‡(
©å
)

119 
	`n‚l_log_msg_£t_physödev
(
msg
, 
	`¡ohl
(
	`∆a_gë_u32
(
©å
)));

121 
©å
 = 
tb
[
NFULA_IFINDEX_PHYSOUTDEV
];

122 i‡(
©å
)

123 
	`n‚l_log_msg_£t_physoutdev
(
msg
, 
	`¡ohl
(
	`∆a_gë_u32
(
©å
)));

125 
©å
 = 
tb
[
NFULA_HWADDR
];

126 i‡(
©å
) {

127 
nfu l_msg_∑ckë_hw
 *
hw
 = 
	`∆a_d©a
(
©å
);

129 
	`n‚l_log_msg_£t_hwaddr
(
msg
, 
hw
->
hw_addr
, 
	`¡ohs
(hw->
hw_addæí
));

132 
©å
 = 
tb
[
NFULA_PAYLOAD
];

133 i‡(
©å
) {

134 
îr
 = 
	`n‚l_log_msg_£t_∑ylﬂd
(
msg
, 
	`∆a_d©a
(
©å
), 
	`∆a_Àn
(attr));

135 i‡(
îr
 < 0)

136 
îrout
;

139 
©å
 = 
tb
[
NFULA_PREFIX
];

140 i‡(
©å
) {

141 
îr
 = 
	`n‚l_log_msg_£t_¥efix
(
msg
, 
	`∆a_d©a
(
©å
));

142 i‡(
îr
 < 0)

143 
îrout
;

146 
©å
 = 
tb
[
NFULA_UID
];

147 i‡(
©å
)

148 
	`n‚l_log_msg_£t_uid
(
msg
, 
	`¡ohl
(
	`∆a_gë_u32
(
©å
)));

150 
©å
 = 
tb
[
NFULA_GID
];

151 i‡(
©å
)

152 
	`n‚l_log_msg_£t_gid
(
msg
, 
	`¡ohl
(
	`∆a_gë_u32
(
©å
)));

154 
©å
 = 
tb
[
NFULA_SEQ
];

155 i‡(
©å
)

156 
	`n‚l_log_msg_£t_£q
(
msg
, 
	`¡ohl
(
	`∆a_gë_u32
(
©å
)));

158 
©å
 = 
tb
[
NFULA_SEQ_GLOBAL
];

159 i‡(
©å
)

160 
	`n‚l_log_msg_£t_£q_globÆ
(
msg
, 
	`¡ohl
(
	`∆a_gë_u32
(
©å
)));

162 *
ªsu…
 = 
msg
;

165 
îrout
:

166 
	`n‚l_log_msg_put
(
msg
);

167  
îr
;

168 
	}
}

170 
	$log_msg_∑r£r
(
∆_ˇche_›s
 *
›s
, 
sockaddr_∆
 *
who
,

171 
∆msghdr
 *
∆h
, 
∆_∑r£r_∑øm
 *
µ
)

173 
n‚l_log_msg
 *
msg
;

174 
îr
;

176 i‡((
îr
 = 
	`n‚lmsg_log_msg_∑r£
(
∆h
, &
msg
)) < 0)

177  
îr
;

179 
îr
 = 
µ
->
	`µ_cb
((
∆_obje˘
 *Ë
msg
,Öp);

180 
	`n‚l_log_msg_put
(
msg
);

181  
îr
;

182 
	}
}

186 
	#NFNLMSG_LOG_TYPE
(
ty≥
Ë
	`NFNLMSG_TYPE
(
NFNL_SUBSYS_ULOG
, (ty≥))

	)

187 
∆_ˇche_›s
 
	gn‚l_log_msg_›s
 = {

188 .
co_«me
 = "netfilter/log_msg",

189 .
	gco_hdrsize
 = 
NFNL_HDRLEN
,

190 .
	gco_msgty≥s
 = {

191 { 
NFNLMSG_LOG_TYPE
(
NFULNL_MSG_PACKET
), 
NL_ACT_NEW
, "new" },

192 
END_OF_MSGTYPES_LIST
,

194 .
	gco_¥Ÿocﬁ
 = 
NETLINK_NETFILTER
,

195 .
	gco_msg_∑r£r
 = 
log_msg_∑r£r
,

196 .
	gco_obj_›s
 = &
log_msg_obj_›s
,

199 
__öô
 
	$log_msg_öô
()

201 
	`∆_ˇche_mngt_ªgi°î
(&
n‚l_log_msg_›s
);

202 
	}
}

204 
__exô
 
	$log_msg_exô
()

206 
	`∆_ˇche_mngt_uƒegi°î
(&
n‚l_log_msg_›s
);

207 
	}
}

	@mylibnl/libnl-3.2.25/lib/netfilter/log_msg_obj.c

14 
	~<√éök-¥iv©e/√éök.h
>

15 
	~<√éök/√tfûãr/n‚l.h
>

16 
	~<√éök/√tfûãr/√tfûãr.h
>

17 
	~<√éök/√tfûãr/log_msg.h
>

20 
	#LOG_MSG_ATTR_FAMILY
 (1UL << 0)

	)

21 
	#LOG_MSG_ATTR_HWPROTO
 (1UL << 1)

	)

22 
	#LOG_MSG_ATTR_HOOK
 (1UL << 2)

	)

23 
	#LOG_MSG_ATTR_MARK
 (1UL << 3)

	)

24 
	#LOG_MSG_ATTR_TIMESTAMP
 (1UL << 4)

	)

25 
	#LOG_MSG_ATTR_INDEV
 (1UL << 5)

	)

26 
	#LOG_MSG_ATTR_OUTDEV
 (1UL << 6)

	)

27 
	#LOG_MSG_ATTR_PHYSINDEV
 (1UL << 7)

	)

28 
	#LOG_MSG_ATTR_PHYSOUTDEV
 (1UL << 8)

	)

29 
	#LOG_MSG_ATTR_HWADDR
 (1UL << 9)

	)

30 
	#LOG_MSG_ATTR_PAYLOAD
 (1UL << 10)

	)

31 
	#LOG_MSG_ATTR_PREFIX
 (1UL << 11)

	)

32 
	#LOG_MSG_ATTR_UID
 (1UL << 12)

	)

33 
	#LOG_MSG_ATTR_GID
 (1UL << 13)

	)

34 
	#LOG_MSG_ATTR_SEQ
 (1UL << 14)

	)

35 
	#LOG_MSG_ATTR_SEQ_GLOBAL
 (1UL << 15)

	)

38 
	$log_msg_‰ì_d©a
(
∆_obje˘
 *
c
)

40 
n‚l_log_msg
 *
msg
 = (n‚l_log_msg *Ë
c
;

42 i‡(
msg
 =
NULL
)

45 
	`‰ì
(
msg
->
log_msg_∑ylﬂd
);

46 
	`‰ì
(
msg
->
log_msg_¥efix
);

47 
	}
}

49 
	$log_msg_˛⁄e
(
∆_obje˘
 *
_d°
, ∆_obje˘ *
_§c
)

51 
n‚l_log_msg
 *
d°
 = (n‚l_log_msg *Ë
_d°
;

52 
n‚l_log_msg
 *
§c
 = (n‚l_log_msg *Ë
_§c
;

53 
îr
;

55 i‡(
§c
->
log_msg_∑ylﬂd
) {

56 
îr
 = 
	`n‚l_log_msg_£t_∑ylﬂd
(
d°
, 
§c
->
log_msg_∑ylﬂd
,

57 
§c
->
log_msg_∑ylﬂd_Àn
);

58 i‡(
îr
 < 0)

59 
îrout
;

62 i‡(
§c
->
log_msg_¥efix
) {

63 
îr
 = 
	`n‚l_log_msg_£t_¥efix
(
d°
, 
§c
->
log_msg_¥efix
);

64 i‡(
îr
 < 0)

65 
îrout
;

69 
îrout
:

70  
îr
;

71 
	}
}

73 
	$log_msg_dump
(
∆_obje˘
 *
a
, 
∆_dump_∑øms
 *
p
)

75 
n‚l_log_msg
 *
msg
 = (n‚l_log_msg *Ë
a
;

76 
∆_ˇche
 *
lök_ˇche
;

77 
buf
[64];

79 
lök_ˇche
 = 
	`∆_ˇche_mngt_ªquúe_ß„
("route/link");

81 
	`∆_√w_löe
(
p
);

83 i‡(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_PREFIX
)

84 
	`∆_dump
(
p
, "%s", 
msg
->
log_msg_¥efix
);

86 i‡(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_INDEV
) {

87 i‡(
lök_ˇche
)

88 
	`∆_dump
(
p
, "IN=%s ",

89 
	`π∆_lök_i2«me
(
lök_ˇche
,

90 
msg
->
log_msg_ödev
,

91 
buf
, (buf)));

93 
	`∆_dump
(
p
, "IN=%d ", 
msg
->
log_msg_ödev
);

96 i‡(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_PHYSINDEV
) {

97 i‡(
lök_ˇche
)

98 
	`∆_dump
(
p
, "PHYSIN=%s ",

99 
	`π∆_lök_i2«me
(
lök_ˇche
,

100 
msg
->
log_msg_physödev
,

101 
buf
, (buf)));

103 
	`∆_dump
(
p
, "IN=%d ", 
msg
->
log_msg_physödev
);

106 i‡(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_OUTDEV
) {

107 i‡(
lök_ˇche
)

108 
	`∆_dump
(
p
, "OUT=%s ",

109 
	`π∆_lök_i2«me
(
lök_ˇche
,

110 
msg
->
log_msg_outdev
,

111 
buf
, (buf)));

113 
	`∆_dump
(
p
, "OUT=%d ", 
msg
->
log_msg_outdev
);

116 i‡(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_PHYSOUTDEV
) {

117 i‡(
lök_ˇche
)

118 
	`∆_dump
(
p
, "PHYSOUT=%s ",

119 
	`π∆_lök_i2«me
(
lök_ˇche
,

120 
msg
->
log_msg_physoutdev
,

121 
buf
, (buf)));

123 
	`∆_dump
(
p
, "PHYSOUT=%d ", 
msg
->
log_msg_physoutdev
);

126 i‡(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_HWADDR
) {

127 
i
;

129 
	`∆_dump
(
p
, "MAC");

130 
i
 = 0; i < 
msg
->
log_msg_hwaddr_Àn
; i++)

131 
	`∆_dump
(
p
, "%c%02x", 
i
?':':'=', 
msg
->
log_msg_hwaddr
[i]);

132 
	`∆_dump
(
p
, " ");

137 i‡(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_FAMILY
)

138 
	`∆_dump
(
p
, "FAMILY=%s ",

139 
	`∆_af2°r
(
msg
->
log_msg_Ámûy
, 
buf
, (buf)));

141 i‡(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_HWPROTO
)

142 
	`∆_dump
(
p
, "HWPROTO=%s ",

143 
	`∆_ëhî_¥Ÿo2°r
(
	`¡ohs
(
msg
->
log_msg_hw¥Ÿo
),

144 
buf
, (buf)));

146 i‡(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_HOOK
)

147 
	`∆_dump
(
p
, "HOOK=%s ",

148 
	`n‚l_öë_hook2°r
(
msg
->
log_msg_hook
,

149 
buf
, (buf)));

151 i‡(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_MARK
)

152 
	`∆_dump
(
p
, "MARK=%u ", 
msg
->
log_msg_m¨k
);

154 i‡(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_PAYLOAD
)

155 
	`∆_dump
(
p
, "PAYLOADLEN=%d ", 
msg
->
log_msg_∑ylﬂd_Àn
);

157 i‡(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_UID
)

158 
	`∆_dump
(
p
, "UID=%u ", 
msg
->
log_msg_uid
);

160 i‡(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_GID
)

161 
	`∆_dump
(
p
, "GID=%u ", 
msg
->
log_msg_gid
);

163 i‡(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_SEQ
)

164 
	`∆_dump
(
p
, "SEQ=%d ", 
msg
->
log_msg_£q
);

166 i‡(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_SEQ_GLOBAL
)

167 
	`∆_dump
(
p
, "SEQGLOBAL=%d ", 
msg
->
log_msg_£q_globÆ
);

169 
	`∆_dump
(
p
, "\n");

171 i‡(
lök_ˇche
)

172 
	`∆_ˇche_put
(
lök_ˇche
);

173 
	}
}

180 
n‚l_log_msg
 *
	$n‚l_log_msg_Æloc
()

182  (
n‚l_log_msg
 *Ë
	`∆_obje˘_Æloc
(&
log_msg_obj_›s
);

183 
	}
}

185 
	$n‚l_log_msg_gë
(
n‚l_log_msg
 *
msg
)

187 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
msg
);

188 
	}
}

190 
	$n‚l_log_msg_put
(
n‚l_log_msg
 *
msg
)

192 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
msg
);

193 
	}
}

202 
	$n‚l_log_msg_£t_Ámûy
(
n‚l_log_msg
 *
msg
, 
uöt8_t
 
Ámûy
)

204 
msg
->
log_msg_Ámûy
 = 
Ámûy
;

205 
msg
->
˚_mask
 |
LOG_MSG_ATTR_FAMILY
;

206 
	}
}

208 
uöt8_t
 
	$n‚l_log_msg_gë_Ámûy
(c⁄° 
n‚l_log_msg
 *
msg
)

210 i‡(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_FAMILY
)

211  
msg
->
log_msg_Ámûy
;

213  
AF_UNSPEC
;

214 
	}
}

216 
	$n‚l_log_msg_£t_hw¥Ÿo
(
n‚l_log_msg
 *
msg
, 
uöt16_t
 
hw¥Ÿo
)

218 
msg
->
log_msg_hw¥Ÿo
 = 
hw¥Ÿo
;

219 
msg
->
˚_mask
 |
LOG_MSG_ATTR_HWPROTO
;

220 
	}
}

222 
	$n‚l_log_msg_ã°_hw¥Ÿo
(c⁄° 
n‚l_log_msg
 *
msg
)

224  !!(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_HWPROTO
);

225 
	}
}

227 
uöt16_t
 
	$n‚l_log_msg_gë_hw¥Ÿo
(c⁄° 
n‚l_log_msg
 *
msg
)

229  
msg
->
log_msg_hw¥Ÿo
;

230 
	}
}

232 
	$n‚l_log_msg_£t_hook
(
n‚l_log_msg
 *
msg
, 
uöt8_t
 
hook
)

234 
msg
->
log_msg_hook
 = 
hook
;

235 
msg
->
˚_mask
 |
LOG_MSG_ATTR_HOOK
;

236 
	}
}

238 
	$n‚l_log_msg_ã°_hook
(c⁄° 
n‚l_log_msg
 *
msg
)

240  !!(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_HOOK
);

241 
	}
}

243 
uöt8_t
 
	$n‚l_log_msg_gë_hook
(c⁄° 
n‚l_log_msg
 *
msg
)

245  
msg
->
log_msg_hook
;

246 
	}
}

248 
	$n‚l_log_msg_£t_m¨k
(
n‚l_log_msg
 *
msg
, 
uöt32_t
 
m¨k
)

250 
msg
->
log_msg_m¨k
 = 
m¨k
;

251 
msg
->
˚_mask
 |
LOG_MSG_ATTR_MARK
;

252 
	}
}

254 
	$n‚l_log_msg_ã°_m¨k
(c⁄° 
n‚l_log_msg
 *
msg
)

256  !!(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_MARK
);

257 
	}
}

259 
uöt32_t
 
	$n‚l_log_msg_gë_m¨k
(c⁄° 
n‚l_log_msg
 *
msg
)

261  
msg
->
log_msg_m¨k
;

262 
	}
}

264 
	$n‚l_log_msg_£t_time°amp
(
n‚l_log_msg
 *
msg
, 
timevÆ
 *
tv
)

266 
msg
->
log_msg_time°amp
.
tv_£c
 = 
tv
->tv_sec;

267 
msg
->
log_msg_time°amp
.
tv_u£c
 = 
tv
->tv_usec;

268 
msg
->
˚_mask
 |
LOG_MSG_ATTR_TIMESTAMP
;

269 
	}
}

271 c⁄° 
timevÆ
 *
	$n‚l_log_msg_gë_time°amp
(c⁄° 
n‚l_log_msg
 *
msg
)

273 i‡(!(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_TIMESTAMP
))

274  
NULL
;

275  &
msg
->
log_msg_time°amp
;

276 
	}
}

278 
	$n‚l_log_msg_£t_ödev
(
n‚l_log_msg
 *
msg
, 
uöt32_t
 
ödev
)

280 
msg
->
log_msg_ödev
 = 
ödev
;

281 
msg
->
˚_mask
 |
LOG_MSG_ATTR_INDEV
;

282 
	}
}

284 
uöt32_t
 
	$n‚l_log_msg_gë_ödev
(c⁄° 
n‚l_log_msg
 *
msg
)

286  
msg
->
log_msg_ödev
;

287 
	}
}

289 
	$n‚l_log_msg_£t_outdev
(
n‚l_log_msg
 *
msg
, 
uöt32_t
 
outdev
)

291 
msg
->
log_msg_outdev
 = 
outdev
;

292 
msg
->
˚_mask
 |
LOG_MSG_ATTR_OUTDEV
;

293 
	}
}

295 
uöt32_t
 
	$n‚l_log_msg_gë_outdev
(c⁄° 
n‚l_log_msg
 *
msg
)

297  
msg
->
log_msg_outdev
;

298 
	}
}

300 
	$n‚l_log_msg_£t_physödev
(
n‚l_log_msg
 *
msg
, 
uöt32_t
 
physödev
)

302 
msg
->
log_msg_physödev
 = 
physödev
;

303 
msg
->
˚_mask
 |
LOG_MSG_ATTR_PHYSINDEV
;

304 
	}
}

306 
uöt32_t
 
	$n‚l_log_msg_gë_physödev
(c⁄° 
n‚l_log_msg
 *
msg
)

308  
msg
->
log_msg_physödev
;

309 
	}
}

311 
	$n‚l_log_msg_£t_physoutdev
(
n‚l_log_msg
 *
msg
, 
uöt32_t
 
physoutdev
)

313 
msg
->
log_msg_physoutdev
 = 
physoutdev
;

314 
msg
->
˚_mask
 |
LOG_MSG_ATTR_PHYSOUTDEV
;

315 
	}
}

317 
uöt32_t
 
	$n‚l_log_msg_gë_physoutdev
(c⁄° 
n‚l_log_msg
 *
msg
)

319  
msg
->
log_msg_physoutdev
;

320 
	}
}

322 
	$n‚l_log_msg_£t_hwaddr
(
n‚l_log_msg
 *
msg
, 
uöt8_t
 *
hwaddr
, 
Àn
)

324 i‡(
Àn
 > (
msg
->
log_msg_hwaddr
))

325 
Àn
 = (
msg
->
log_msg_hwaddr
);

326 
msg
->
log_msg_hwaddr_Àn
 = 
Àn
;

327 
	`mem˝y
(
msg
->
log_msg_hwaddr
, 
hwaddr
, 
Àn
);

328 
msg
->
˚_mask
 |
LOG_MSG_ATTR_HWADDR
;

329 
	}
}

331 c⁄° 
uöt8_t
 *
	$n‚l_log_msg_gë_hwaddr
(c⁄° 
n‚l_log_msg
 *
msg
, *
Àn
)

333 i‡(!(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_HWADDR
)) {

334 *
Àn
 = 0;

335  
NULL
;

338 *
Àn
 = 
msg
->
log_msg_hwaddr_Àn
;

339  
msg
->
log_msg_hwaddr
;

340 
	}
}

342 
	$n‚l_log_msg_£t_∑ylﬂd
(
n‚l_log_msg
 *
msg
, 
uöt8_t
 *
∑ylﬂd
, 
Àn
)

344 
	`‰ì
(
msg
->
log_msg_∑ylﬂd
);

345 
msg
->
log_msg_∑ylﬂd
 = 
	`mÆloc
(
Àn
);

346 i‡(!
msg
->
log_msg_∑ylﬂd
)

347  -
NLE_NOMEM
;

349 
	`mem˝y
(
msg
->
log_msg_∑ylﬂd
, 
∑ylﬂd
, 
Àn
);

350 
msg
->
log_msg_∑ylﬂd_Àn
 = 
Àn
;

351 
msg
->
˚_mask
 |
LOG_MSG_ATTR_PAYLOAD
;

353 
	}
}

355 c⁄° *
	$n‚l_log_msg_gë_∑ylﬂd
(c⁄° 
n‚l_log_msg
 *
msg
, *
Àn
)

357 i‡(!(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_PAYLOAD
)) {

358 *
Àn
 = 0;

359  
NULL
;

362 *
Àn
 = 
msg
->
log_msg_∑ylﬂd_Àn
;

363  
msg
->
log_msg_∑ylﬂd
;

364 
	}
}

366 
	$n‚l_log_msg_£t_¥efix
(
n‚l_log_msg
 *
msg
, *
¥efix
)

368 
	`‰ì
(
msg
->
log_msg_¥efix
);

369 
msg
->
log_msg_¥efix
 = 
	`°rdup
(
¥efix
);

370 i‡(!
msg
->
log_msg_¥efix
)

371  -
NLE_NOMEM
;

373 
msg
->
˚_mask
 |
LOG_MSG_ATTR_PREFIX
;

375 
	}
}

377 c⁄° *
	$n‚l_log_msg_gë_¥efix
(c⁄° 
n‚l_log_msg
 *
msg
)

379  
msg
->
log_msg_¥efix
;

380 
	}
}

382 
	$n‚l_log_msg_£t_uid
(
n‚l_log_msg
 *
msg
, 
uöt32_t
 
uid
)

384 
msg
->
log_msg_uid
 = 
uid
;

385 
msg
->
˚_mask
 |
LOG_MSG_ATTR_UID
;

386 
	}
}

388 
	$n‚l_log_msg_ã°_uid
(c⁄° 
n‚l_log_msg
 *
msg
)

390  !!(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_UID
);

391 
	}
}

393 
uöt32_t
 
	$n‚l_log_msg_gë_uid
(c⁄° 
n‚l_log_msg
 *
msg
)

395  
msg
->
log_msg_uid
;

396 
	}
}

398 
	$n‚l_log_msg_£t_gid
(
n‚l_log_msg
 *
msg
, 
uöt32_t
 
gid
)

400 
msg
->
log_msg_gid
 = 
gid
;

401 
msg
->
˚_mask
 |
LOG_MSG_ATTR_GID
;

402 
	}
}

404 
	$n‚l_log_msg_ã°_gid
(c⁄° 
n‚l_log_msg
 *
msg
)

406  !!(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_GID
);

407 
	}
}

409 
uöt32_t
 
	$n‚l_log_msg_gë_gid
(c⁄° 
n‚l_log_msg
 *
msg
)

411  
msg
->
log_msg_gid
;

412 
	}
}

415 
	$n‚l_log_msg_£t_£q
(
n‚l_log_msg
 *
msg
, 
uöt32_t
 
£q
)

417 
msg
->
log_msg_£q
 = 
£q
;

418 
msg
->
˚_mask
 |
LOG_MSG_ATTR_SEQ
;

419 
	}
}

421 
	$n‚l_log_msg_ã°_£q
(c⁄° 
n‚l_log_msg
 *
msg
)

423  !!(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_SEQ
);

424 
	}
}

426 
uöt32_t
 
	$n‚l_log_msg_gë_£q
(c⁄° 
n‚l_log_msg
 *
msg
)

428  
msg
->
log_msg_£q
;

429 
	}
}

431 
	$n‚l_log_msg_£t_£q_globÆ
(
n‚l_log_msg
 *
msg
, 
uöt32_t
 
£q_globÆ
)

433 
msg
->
log_msg_£q_globÆ
 = 
£q_globÆ
;

434 
msg
->
˚_mask
 |
LOG_MSG_ATTR_SEQ_GLOBAL
;

435 
	}
}

437 
	$n‚l_log_msg_ã°_£q_globÆ
(c⁄° 
n‚l_log_msg
 *
msg
)

439  !!(
msg
->
˚_mask
 & 
LOG_MSG_ATTR_SEQ_GLOBAL
);

440 
	}
}

442 
uöt32_t
 
	$n‚l_log_msg_gë_£q_globÆ
(c⁄° 
n‚l_log_msg
 *
msg
)

444  
msg
->
log_msg_£q_globÆ
;

445 
	}
}

449 
∆_obje˘_›s
 
	glog_msg_obj_›s
 = {

450 .
oo_«me
 = "netfilter/log_msg",

451 .
	goo_size
 = (
n‚l_log_msg
),

452 .
	goo_‰ì_d©a
 = 
log_msg_‰ì_d©a
,

453 .
	goo_˛⁄e
 = 
log_msg_˛⁄e
,

454 .
	goo_dump
 = {

455 [
NL_DUMP_LINE
] = 
log_msg_dump
,

456 [
NL_DUMP_DETAILS
] = 
log_msg_dump
,

457 [
NL_DUMP_STATS
] = 
log_msg_dump
,

	@mylibnl/libnl-3.2.25/lib/netfilter/log_obj.c

15 
	~<√éök-¥iv©e/√éök.h
>

16 
	~<√éök/√tfûãr/n‚l.h
>

17 
	~<√éök/√tfûãr/log.h
>

20 
	#LOG_ATTR_GROUP
 (1UL << 0)

	)

21 
	#LOG_ATTR_COPY_MODE
 (1UL << 1)

	)

22 
	#LOG_ATTR_COPY_RANGE
 (1UL << 3)

	)

23 
	#LOG_ATTR_FLUSH_TIMEOUT
 (1UL << 4)

	)

24 
	#LOG_ATTR_ALLOC_SIZE
 (1UL << 5)

	)

25 
	#LOG_ATTR_QUEUE_THRESHOLD
 (1UL << 6)

	)

29 
	$n‚l_log_dump
(
∆_obje˘
 *
a
, 
∆_dump_∑øms
 *
p
)

31 
n‚l_log
 *
log
 = (n‚l_log *Ë
a
;

32 
buf
[64];

34 
	`∆_√w_löe
(
p
);

36 i‡(
log
->
˚_mask
 & 
LOG_ATTR_GROUP
)

37 
	`∆_dump
(
p
, "group=%u ", 
log
->
log_group
);

39 i‡(
log
->
˚_mask
 & 
LOG_ATTR_COPY_MODE
)

40 
	`∆_dump
(
p
, "copy_mode=%s ",

41 
	`n‚l_log_c›y_mode2°r
(
log
->
log_c›y_mode
,

42 
buf
, (buf)));

44 i‡(
log
->
˚_mask
 & 
LOG_ATTR_COPY_RANGE
)

45 
	`∆_dump
(
p
, "c›y_ønge=%u ", 
log
->
log_c›y_ønge
);

47 i‡(
log
->
˚_mask
 & 
LOG_ATTR_FLUSH_TIMEOUT
)

48 
	`∆_dump
(
p
, "Êush_timeout=%u ", 
log
->
log_Êush_timeout
);

50 i‡(
log
->
˚_mask
 & 
LOG_ATTR_ALLOC_SIZE
)

51 
	`∆_dump
(
p
, "Æloc_size=%u ", 
log
->
log_Æloc_size
);

53 i‡(
log
->
˚_mask
 & 
LOG_ATTR_QUEUE_THRESHOLD
)

54 
	`∆_dump
(
p
, "queue_thªshﬁd=%u ", 
log
->
log_queue_thªshﬁd
);

56 
	`∆_dump
(
p
, "\n");

57 
	}
}

59 c⁄° 
å™s_tbl
 
	gc›y_modes
[] = {

60 
__ADD
(
NFNL_LOG_COPY_NONE
, 
n⁄e
)

61 
__ADD
(
NFNL_LOG_COPY_META
, 
mëa
)

62 
__ADD
(
NFNL_LOG_COPY_PACKET
, 
∑ckë
)

65 *
	$n‚l_log_c›y_mode2°r
(
n‚l_log_c›y_mode
 
c›y_mode
, *
buf
,

66 
size_t
 
Àn
)

68  
	`__ty≥2°r
(
c›y_mode
, 
buf
, 
Àn
, 
c›y_modes
,

69 
	`ARRAY_SIZE
(
c›y_modes
));

70 
	}
}

72 
n‚l_log_c›y_mode
 
	$n‚l_log_°r2c›y_mode
(c⁄° *
«me
)

74  
	`__°r2ty≥
(
«me
, 
c›y_modes
, 
	`ARRAY_SIZE
(copy_modes));

75 
	}
}

82 
n‚l_log
 *
	$n‚l_log_Æloc
()

84  (
n‚l_log
 *Ë
	`∆_obje˘_Æloc
(&
log_obj_›s
);

85 
	}
}

87 
	$n‚l_log_gë
(
n‚l_log
 *
log
)

89 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
log
);

90 
	}
}

92 
	$n‚l_log_put
(
n‚l_log
 *
log
)

94 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
log
);

95 
	}
}

104 
	$n‚l_log_£t_group
(
n‚l_log
 *
log
, 
uöt16_t
 
group
)

106 
log
->
log_group
 = 
group
;

107 
log
->
˚_mask
 |
LOG_ATTR_GROUP
;

108 
	}
}

110 
	$n‚l_log_ã°_group
(c⁄° 
n‚l_log
 *
log
)

112  !!(
log
->
˚_mask
 & 
LOG_ATTR_GROUP
);

113 
	}
}

115 
uöt16_t
 
	$n‚l_log_gë_group
(c⁄° 
n‚l_log
 *
log
)

117  
log
->
log_group
;

118 
	}
}

120 
	$n‚l_log_£t_c›y_mode
(
n‚l_log
 *
log
, 
n‚l_log_c›y_mode
 
mode
)

122 
log
->
log_c›y_mode
 = 
mode
;

123 
log
->
˚_mask
 |
LOG_ATTR_COPY_MODE
;

124 
	}
}

126 
	$n‚l_log_ã°_c›y_mode
(c⁄° 
n‚l_log
 *
log
)

128  !!(
log
->
˚_mask
 & 
LOG_ATTR_COPY_MODE
);

129 
	}
}

131 
n‚l_log_c›y_mode
 
	$n‚l_log_gë_c›y_mode
(c⁄° 
n‚l_log
 *
log
)

133  
log
->
log_c›y_mode
;

134 
	}
}

136 
	$n‚l_log_£t_c›y_ønge
(
n‚l_log
 *
log
, 
uöt32_t
 
c›y_ønge
)

138 
log
->
log_c›y_ønge
 = 
c›y_ønge
;

139 
log
->
˚_mask
 |
LOG_ATTR_COPY_RANGE
;

140 
	}
}

142 
	$n‚l_log_ã°_c›y_ønge
(c⁄° 
n‚l_log
 *
log
)

144  !!(
log
->
˚_mask
 & 
LOG_ATTR_COPY_RANGE
);

145 
	}
}

147 
uöt32_t
 
	$n‚l_log_gë_c›y_ønge
(c⁄° 
n‚l_log
 *
log
)

149  
log
->
log_c›y_ønge
;

150 
	}
}

152 
	$n‚l_log_£t_Êush_timeout
(
n‚l_log
 *
log
, 
uöt32_t
 
timeout
)

154 
log
->
log_Êush_timeout
 = 
timeout
;

155 
log
->
˚_mask
 |
LOG_ATTR_FLUSH_TIMEOUT
;

156 
	}
}

158 
	$n‚l_log_ã°_Êush_timeout
(c⁄° 
n‚l_log
 *
log
)

160  !!(
log
->
˚_mask
 & 
LOG_ATTR_FLUSH_TIMEOUT
);

161 
	}
}

163 
uöt32_t
 
	$n‚l_log_gë_Êush_timeout
(c⁄° 
n‚l_log
 *
log
)

165  
log
->
log_Êush_timeout
;

166 
	}
}

168 
	$n‚l_log_£t_Æloc_size
(
n‚l_log
 *
log
, 
uöt32_t
 
Æloc_size
)

170 
log
->
log_Æloc_size
 = 
Æloc_size
;

171 
log
->
˚_mask
 |
LOG_ATTR_ALLOC_SIZE
;

172 
	}
}

174 
	$n‚l_log_ã°_Æloc_size
(c⁄° 
n‚l_log
 *
log
)

176  !!(
log
->
˚_mask
 & 
LOG_ATTR_ALLOC_SIZE
);

177 
	}
}

179 
uöt32_t
 
	$n‚l_log_gë_Æloc_size
(c⁄° 
n‚l_log
 *
log
)

181  
log
->
log_Æloc_size
;

182 
	}
}

184 
	$n‚l_log_£t_queue_thªshﬁd
(
n‚l_log
 *
log
, 
uöt32_t
 
thªshﬁd
)

186 
log
->
log_queue_thªshﬁd
 = 
thªshﬁd
;

187 
log
->
˚_mask
 |
LOG_ATTR_QUEUE_THRESHOLD
;

188 
	}
}

190 
	$n‚l_log_ã°_queue_thªshﬁd
(c⁄° 
n‚l_log
 *
log
)

192  !!(
log
->
˚_mask
 & 
LOG_ATTR_QUEUE_THRESHOLD
);

193 
	}
}

195 
uöt32_t
 
	$n‚l_log_gë_queue_thªshﬁd
(c⁄° 
n‚l_log
 *
log
)

197  
log
->
log_queue_thªshﬁd
;

198 
	}
}

205 
	$n‚l_log_£t_Êags
(
n‚l_log
 *
log
, 
Êags
)

207 
log
->
log_Êags
 |
Êags
;

208 
log
->
log_Êag_mask
 |
Êags
;

209 
	}
}

211 
	$n‚l_log_un£t_Êags
(
n‚l_log
 *
log
, 
Êags
)

213 
log
->
log_Êags
 &~
Êags
;

214 
log
->
log_Êag_mask
 |
Êags
;

215 
	}
}

217 c⁄° 
å™s_tbl
 
	glog_Êags
[] = {

218 
__ADD
(
NFNL_LOG_FLAG_SEQ
, 
£q
)

219 
__ADD
(
NFNL_LOG_FLAG_SEQ_GLOBAL
, 
£q_globÆ
)

222 *
	$n‚l_log_Êags2°r
(
Êags
, *
buf
, 
size_t
 
Àn
)

224  
	`__Êags2°r
(
Êags
, 
buf
, 
Àn
, 
log_Êags
, 
	`ARRAY_SIZE
(log_flags));

225 
	}
}

227 
	$n‚l_log_°r2Êags
(c⁄° *
«me
)

229  
	`__°r2Êags
(
«me
, 
log_Êags
, 
	`ARRAY_SIZE
(log_flags));

230 
	}
}

232 
	$n‚l_log_com∑ª
(
∆_obje˘
 *
_a
, ∆_obje˘ *
_b
,

233 
uöt32_t
 
©ås
, 
Êags
)

235 
n‚l_log
 *
a
 = (n‚l_log *Ë
_a
;

236 
n‚l_log
 *
b
 = (n‚l_log *Ë
_b
;

237 
diff
 = 0;

239 
	#NFNL_LOG_DIFF
(
ATTR
, 
EXPR
) \

240 
	`ATTR_DIFF
(
©ås
, 
LOG_ATTR_
##
ATTR
, 
a
, 
b
, 
EXPR
)

	)

241 
	#NFNL_LOG_DIFF_VAL
(
ATTR
, 
FIELD
) \

242 
	`NFNL_LOG_DIFF
(
ATTR
, 
a
->
FIELD
 !
b
->FIELD)

	)

244 
diff
 |
	`NFNL_LOG_DIFF_VAL
(
GROUP
, 
log_group
);

245 
diff
 |
	`NFNL_LOG_DIFF_VAL
(
COPY_MODE
, 
log_c›y_mode
);

246 
diff
 |
	`NFNL_LOG_DIFF_VAL
(
COPY_RANGE
, 
log_c›y_ønge
);

247 
diff
 |
	`NFNL_LOG_DIFF_VAL
(
FLUSH_TIMEOUT
, 
log_Êush_timeout
);

248 
diff
 |
	`NFNL_LOG_DIFF_VAL
(
ALLOC_SIZE
, 
log_Æloc_size
);

249 
diff
 |
	`NFNL_LOG_DIFF_VAL
(
QUEUE_THRESHOLD
, 
log_queue_thªshﬁd
);

251 #unde‡
NFNL_LOG_DIFF


252 #unde‡
NFNL_LOG_DIFF_VAL


254  
diff
;

255 
	}
}

257 c⁄° 
å™s_tbl
 
	gn‚l_log_©ås
[] = {

258 
__ADD
(
LOG_ATTR_GROUP
, 
group
)

259 
__ADD
(
LOG_ATTR_COPY_MODE
, 
c›y_mode
)

260 
__ADD
(
LOG_ATTR_COPY_RANGE
, 
c›y_ønge
)

261 
__ADD
(
LOG_ATTR_FLUSH_TIMEOUT
, 
Êush_timeout
)

262 
__ADD
(
LOG_ATTR_ALLOC_SIZE
, 
Æloc_size
)

263 
__ADD
(
LOG_ATTR_QUEUE_THRESHOLD
, 
queue_thªshﬁd
)

266 *
	$n‚l_log_©ås2°r
(
©ås
, *
buf
, 
size_t
 
Àn
)

268  
	`__Êags2°r
(
©ås
, 
buf
, 
Àn
, 
n‚l_log_©ås
,

269 
	`ARRAY_SIZE
(
n‚l_log_©ås
));

270 
	}
}

274 
∆_obje˘_›s
 
	glog_obj_›s
 = {

275 .
oo_«me
 = "netfilter/log",

276 .
	goo_size
 = (
n‚l_log
),

277 .
	goo_dump
 = {

278 [
NL_DUMP_LINE
] = 
n‚l_log_dump
,

279 [
NL_DUMP_DETAILS
] = 
n‚l_log_dump
,

280 [
NL_DUMP_STATS
] = 
n‚l_log_dump
,

282 .
	goo_com∑ª
 = 
n‚l_log_com∑ª
,

283 .
	goo_©ås2°r
 = 
n‚l_log_©ås2°r
,

284 .
	goo_id_©ås
 = 
LOG_ATTR_GROUP
,

	@mylibnl/libnl-3.2.25/lib/netfilter/netfilter.c

12 
	~<√éök-¥iv©e/√éök.h
>

13 
	~<√éök/√tfûãr/√tfûãr.h
>

14 
	~<löux/√tfûãr.h
>

16 c⁄° 
å™s_tbl
 
	gn‚l_vîdi˘s
[] = {

17 
__ADD
(
NF_DROP
, NF_DROP)

18 
__ADD
(
NF_ACCEPT
, NF_ACCEPT)

19 
__ADD
(
NF_STOLEN
, NF_STOLEN)

20 
__ADD
(
NF_QUEUE
, NF_QUEUE)

21 
__ADD
(
NF_REPEAT
, NF_REPEAT)

22 
__ADD
(
NF_STOP
, NF_STOP)

25 *
	$n‚l_vîdi˘2°r
(
vîdi˘
, *
buf
, 
size_t
 
Àn
)

27  
	`__ty≥2°r
(
vîdi˘
, 
buf
, 
Àn
, 
n‚l_vîdi˘s
,

28 
	`ARRAY_SIZE
(
n‚l_vîdi˘s
));

29 
	}
}

31 
	$n‚l_°r2vîdi˘
(c⁄° *
«me
)

33  
	`__°r2ty≥
(
«me
, 
n‚l_vîdi˘s
, 
	`ARRAY_SIZE
(nfnl_verdicts));

34 
	}
}

36 c⁄° 
å™s_tbl
 
	gn‚l_öë_hooks
[] = {

37 
__ADD
(
NF_INET_PRE_ROUTING
, 
NF_INET_PREROUTING
)

38 
__ADD
(
NF_INET_LOCAL_IN
, NF_INET_LOCAL_IN)

39 
__ADD
(
NF_INET_FORWARD
, NF_INET_FORWARD)

40 
__ADD
(
NF_INET_LOCAL_OUT
, NF_INET_LOCAL_OUT)

41 
__ADD
(
NF_INET_POST_ROUTING
, NF_INET_POST_ROUTING)

44 *
	$n‚l_öë_hook2°r
(
hook
, *
buf
, 
size_t
 
Àn
)

46  
	`__ty≥2°r
(
hook
, 
buf
, 
Àn
, 
n‚l_öë_hooks
,

47 
	`ARRAY_SIZE
(
n‚l_öë_hooks
));

48 
	}
}

50 
	$n‚l_°r2öë_hook
(c⁄° *
«me
)

52  
	`__°r2ty≥
(
«me
, 
n‚l_öë_hooks
, 
	`ARRAY_SIZE
(nfnl_inet_hooks));

53 
	}
}

	@mylibnl/libnl-3.2.25/lib/netfilter/nfnl.c

64 
	~<√éök-¥iv©e/√éök.h
>

65 
	~<√éök/√éök.h
>

66 
	~<√éök/√tfûãr/n‚l.h
>

84 
	$n‚l_c⁄√˘
(
∆_sock
 *
sk
)

86  
	`∆_c⁄√˘
(
sk
, 
NETLINK_NETFILTER
);

87 
	}
}

107 
	$n‚l_£nd_sim∂e
(
∆_sock
 *
sk
, 
uöt8_t
 
subsys_id
, uöt8_à
ty≥
,

108 
Êags
, 
uöt8_t
 
Ámûy
, 
uöt16_t
 
ªs_id
)

110 
nfgímsg
 
hdr
 = {

111 .
nfgí_Ámûy
 = 
Ámûy
,

112 .
vîsi⁄
 = 
NFNETLINK_V0
,

113 .
ªs_id
 = 
	`ht⁄s
(res_id),

116  
	`∆_£nd_sim∂e
(
sk
, 
	`NFNLMSG_TYPE
(
subsys_id
, 
ty≥
), 
Êags
,

117 &
hdr
, (hdr));

118 
	}
}

131 
uöt8_t
 
	$n‚lmsg_subsys
(
∆msghdr
 *
∆h
)

133  
	`NFNL_SUBSYS_ID
(
∆h
->
∆msg_ty≥
);

134 
	}
}

140 
uöt8_t
 
	$n‚lmsg_subty≥
(
∆msghdr
 *
∆h
)

142  
	`NFNL_MSG_TYPE
(
∆h
->
∆msg_ty≥
);

143 
	}
}

149 
uöt8_t
 
	$n‚lmsg_Ámûy
(
∆msghdr
 *
∆h
)

151 
nfgímsg
 *
nfg
 = 
	`∆msg_d©a
(
∆h
);

153  
nfg
->
nfgí_Ámûy
;

154 
	}
}

160 
uöt16_t
 
	$n‚lmsg_ªs_id
(
∆msghdr
 *
∆h
)

162 
nfgímsg
 *
nfg
 = 
	`∆msg_d©a
(
∆h
);

164  
	`¡ohs
(
nfg
->
ªs_id
);

165 
	}
}

174 
	$n‚lmsg_≠≥nd
(
∆_msg
 *
msg
, 
uöt8_t
 
Ámûy
, 
uöt16_t
 
ªs_id
)

176 
nfgímsg
 *
nfg
;

178 
nfg
 = 
	`∆msg_ª£rve
(
msg
, (*nfg), 
NLMSG_ALIGNTO
);

179 i‡(
nfg
 =
NULL
)

180  -
NLE_NOMEM
;

182 
nfg
->
nfgí_Ámûy
 = 
Ámûy
;

183 
nfg
->
vîsi⁄
 = 
NFNETLINK_V0
;

184 
nfg
->
ªs_id
 = 
	`ht⁄s
(res_id);

185 
	`NL_DBG
(2, "msg %p: AddedÇfnetlink header family=%dÑes_id=%d\n",

186 
msg
, 
Ámûy
, 
ªs_id
);

188 
	}
}

200 
∆_msg
 *
	$n‚lmsg_Æloc_sim∂e
(
uöt8_t
 
subsys_id
, uöt8_à
ty≥
, 
Êags
,

201 
uöt8_t
 
Ámûy
, 
uöt16_t
 
ªs_id
)

203 
∆_msg
 *
msg
;

205 
msg
 = 
	`∆msg_Æloc_sim∂e
(
	`NFNLMSG_TYPE
(
subsys_id
, 
ty≥
), 
Êags
);

206 i‡(
msg
 =
NULL
)

207  
NULL
;

209 i‡(
	`n‚lmsg_≠≥nd
(
msg
, 
Ámûy
, 
ªs_id
) < 0)

210 
∆a_put_Áûuª
;

212  
msg
;

214 
∆a_put_Áûuª
:

215 
	`∆msg_‰ì
(
msg
);

216  
NULL
;

217 
	}
}

230 
	$n‚lmsg_put
(
∆_msg
 *
msg
, 
uöt32_t
 
pid
, uöt32_à
£q
,

231 
uöt8_t
 
subsys_id
, uöt8_à
ty≥
, 
Êags
, uöt8_à
Ámûy
,

232 
uöt16_t
 
ªs_id
)

234 
∆msghdr
 *
∆h
;

236 
∆h
 = 
	`∆msg_put
(
msg
, 
pid
, 
£q
, 
	`NFNLMSG_TYPE
(
subsys_id
, 
ty≥
), 0, 
Êags
);

237 i‡(
∆h
 =
NULL
)

238  -
NLE_MSGSIZE
;

240  
	`n‚lmsg_≠≥nd
(
msg
, 
Ámûy
, 
ªs_id
);

241 
	}
}

	@mylibnl/libnl-3.2.25/lib/netfilter/queue.c

19 
	~<sys/ty≥s.h
>

20 
	~<löux/√tfûãr/n‚ëlök_queue.h
>

22 
	~<√éök-¥iv©e/√éök.h
>

23 
	~<√éök/©å.h
>

24 
	~<√éök/√tfûãr/n‚l.h
>

25 
	~<√éök/√tfûãr/queue.h
>

27 
∆_sock
 *
	$n‚l_queue_sockë_Æloc
()

29 
∆_sock
 *
∆sk
;

31 
∆sk
 = 
	`∆_sockë_Æloc
();

32 i‡(
∆sk
)

33 
	`∆_sockë_dißbÀ_auto_ack
(
∆sk
);

34  
∆sk
;

35 
	}
}

37 
	$£nd_queue_ªque°
(
∆_sock
 *
sk
, 
∆_msg
 *
msg
)

39 
îr
;

41 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sk
, 
msg
);

42 
	`∆msg_‰ì
(
msg
);

43 i‡(
îr
 < 0)

44  
îr
;

46  
	`waô_f‹_ack
(
sk
);

47 
	}
}

54 
	$buûd_queue_cmd_ªque°
(
uöt8_t
 
Ámûy
, 
uöt16_t
 
queuíum
,

55 
uöt8_t
 
comm™d
, 
∆_msg
 **
ªsu…
)

57 
∆_msg
 *
msg
;

58 
nfq∆_msg_c⁄fig_cmd
 
cmd
;

60 
msg
 = 
	`n‚lmsg_Æloc_sim∂e
(
NFNL_SUBSYS_QUEUE
, 
NFQNL_MSG_CONFIG
, 0,

61 
Ámûy
, 
queuíum
);

62 i‡(
msg
 =
NULL
)

63  -
NLE_NOMEM
;

65 
cmd
.
pf
 = 
	`ht⁄s
(
Ámûy
);

66 
cmd
.
_∑d
 = 0;

67 
cmd
.
comm™d
 = command;

68 i‡(
	`∆a_put
(
msg
, 
NFQA_CFG_CMD
, (
cmd
), &cmd) < 0)

69 
∆a_put_Áûuª
;

71 *
ªsu…
 = 
msg
;

74 
∆a_put_Áûuª
:

75 
	`∆msg_‰ì
(
msg
);

76  -
NLE_MSGSIZE
;

77 
	}
}

79 
	$n‚l_queue_buûd_pf_böd
(
uöt8_t
 
pf
, 
∆_msg
 **
ªsu…
)

81  
	`buûd_queue_cmd_ªque°
(
pf
, 0, 
NFQNL_CFG_CMD_PF_BIND
, 
ªsu…
);

82 
	}
}

84 
	$n‚l_queue_pf_böd
(
∆_sock
 *
∆h
, 
uöt8_t
 
pf
)

86 
∆_msg
 *
msg
;

87 
îr
;

89 i‡((
îr
 = 
	`n‚l_queue_buûd_pf_böd
(
pf
, &
msg
)) < 0)

90  
îr
;

92  
	`£nd_queue_ªque°
(
∆h
, 
msg
);

93 
	}
}

95 
	$n‚l_queue_buûd_pf_unböd
(
uöt8_t
 
pf
, 
∆_msg
 **
ªsu…
)

97  
	`buûd_queue_cmd_ªque°
(
pf
, 0, 
NFQNL_CFG_CMD_PF_UNBIND
, 
ªsu…
);

98 
	}
}

100 
	$n‚l_queue_pf_unböd
(
∆_sock
 *
∆h
, 
uöt8_t
 
pf
)

102 
∆_msg
 *
msg
;

103 
îr
;

105 i‡((
îr
 = 
	`n‚l_queue_buûd_pf_unböd
(
pf
, &
msg
)) < 0)

106  
îr
;

108  
	`£nd_queue_ªque°
(
∆h
, 
msg
);

109 
	}
}

111 
	$n‚l_queue_buûd_ªque°
(c⁄° 
n‚l_queue
 *
queue
,

112 
∆_msg
 **
ªsu…
)

114 
∆_msg
 *
msg
;

116 i‡(!
	`n‚l_queue_ã°_group
(
queue
))

117  -
NLE_MISSING_ATTR
;

119 
msg
 = 
	`n‚lmsg_Æloc_sim∂e
(
NFNL_SUBSYS_QUEUE
, 
NFQNL_MSG_CONFIG
, 0,

120 0, 
	`n‚l_queue_gë_group
(
queue
));

121 i‡(
msg
 =
NULL
)

122  -
NLE_NOMEM
;

124 i‡(
	`n‚l_queue_ã°_maxÀn
(
queue
) &&

125 
	`∆a_put_u32
(
msg
, 
NFQA_CFG_QUEUE_MAXLEN
,

126 
	`ht⁄l
(
	`n‚l_queue_gë_maxÀn
(
queue
))) < 0)

127 
∆a_put_Áûuª
;

132 i‡(
	`n‚l_queue_ã°_c›y_mode
(
queue
)) {

133 
nfq∆_msg_c⁄fig_∑øms
 
∑øms
;

135 
	`n‚l_queue_gë_c›y_mode
(
queue
)) {

136 
NFNL_QUEUE_COPY_NONE
:

137 
∑øms
.
c›y_mode
 = 
NFQNL_COPY_NONE
;

139 
NFNL_QUEUE_COPY_META
:

140 
∑øms
.
c›y_mode
 = 
NFQNL_COPY_META
;

142 
NFNL_QUEUE_COPY_PACKET
:

143 
∑øms
.
c›y_mode
 = 
NFQNL_COPY_PACKET
;

146 
∑øms
.
c›y_ønge
 = 
	`ht⁄l
(
	`n‚l_queue_gë_c›y_ønge
(
queue
));

148 i‡(
	`∆a_put
(
msg
, 
NFQA_CFG_PARAMS
, (
∑øms
), &params) < 0)

149 
∆a_put_Áûuª
;

152 *
ªsu…
 = 
msg
;

155 
∆a_put_Áûuª
:

156 
	`∆msg_‰ì
(
msg
);

157  -
NLE_MSGSIZE
;

158 
	}
}

160 
	$n‚l_queue_buûd_¸óã_ªque°
(c⁄° 
n‚l_queue
 *
queue
,

161 
∆_msg
 **
ªsu…
)

163 
nfq∆_msg_c⁄fig_cmd
 
cmd
;

164 
îr
;

166 i‡((
îr
 = 
	`n‚l_queue_buûd_ªque°
(
queue
, 
ªsu…
)) < 0)

167  
îr
;

169 
cmd
.
pf
 = 0;

170 
cmd
.
_∑d
 = 0;

171 
cmd
.
comm™d
 = 
NFQNL_CFG_CMD_BIND
;

173 
	`NLA_PUT
(*
ªsu…
, 
NFQA_CFG_CMD
, (
cmd
), &cmd);

177 
∆a_put_Áûuª
:

178 
	`∆msg_‰ì
(*
ªsu…
);

179  -
NLE_MSGSIZE
;

180 
	}
}

182 
	$n‚l_queue_¸óã
(
∆_sock
 *
∆h
, c⁄° 
n‚l_queue
 *
queue
)

184 
∆_msg
 *
msg
;

185 
îr
;

187 i‡((
îr
 = 
	`n‚l_queue_buûd_¸óã_ªque°
(
queue
, &
msg
)) < 0)

188  
îr
;

190  
	`£nd_queue_ªque°
(
∆h
, 
msg
);

191 
	}
}

193 
	$n‚l_queue_buûd_ch™ge_ªque°
(c⁄° 
n‚l_queue
 *
queue
,

194 
∆_msg
 **
ªsu…
)

196  
	`n‚l_queue_buûd_ªque°
(
queue
, 
ªsu…
);

197 
	}
}

199 
	$n‚l_queue_ch™ge
(
∆_sock
 *
∆h
, c⁄° 
n‚l_queue
 *
queue
)

201 
∆_msg
 *
msg
;

202 
îr
;

204 i‡((
îr
 = 
	`n‚l_queue_buûd_ch™ge_ªque°
(
queue
, &
msg
)) < 0)

205  
îr
;

207  
	`£nd_queue_ªque°
(
∆h
, 
msg
);

208 
	}
}

210 
	$n‚l_queue_buûd_dñëe_ªque°
(c⁄° 
n‚l_queue
 *
queue
,

211 
∆_msg
 **
ªsu…
)

213 i‡(!
	`n‚l_queue_ã°_group
(
queue
))

214  -
NLE_MISSING_ATTR
;

216  
	`buûd_queue_cmd_ªque°
(0, 
	`n‚l_queue_gë_group
(
queue
),

217 
NFQNL_CFG_CMD_UNBIND
, 
ªsu…
);

218 
	}
}

220 
	$n‚l_queue_dñëe
(
∆_sock
 *
∆h
, c⁄° 
n‚l_queue
 *
queue
)

222 
∆_msg
 *
msg
;

223 
îr
;

225 i‡((
îr
 = 
	`n‚l_queue_buûd_dñëe_ªque°
(
queue
, &
msg
)) < 0)

226  
îr
;

228  
	`£nd_queue_ªque°
(
∆h
, 
msg
);

229 
	}
}

233 
∆_ˇche_›s
 
	gn‚l_queue_›s
 = {

234 .
co_«me
 = "netfilter/queue",

235 .
	gco_obj_›s
 = &
queue_obj_›s
,

236 .
	gco_msgty≥s
 = {

237 
END_OF_MSGTYPES_LIST
,

241 
__öô
 
	$n‚l_queue_öô
()

243 
	`∆_ˇche_mngt_ªgi°î
(&
n‚l_queue_›s
);

244 
	}
}

246 
__exô
 
	$n‚l_queue_exô
()

248 
	`∆_ˇche_mngt_uƒegi°î
(&
n‚l_queue_›s
);

249 
	}
}

	@mylibnl/libnl-3.2.25/lib/netfilter/queue_msg.c

20 
	~<sys/ty≥s.h
>

21 
	~<löux/√tfûãr/n‚ëlök_queue.h
>

23 
	~<√éök-¥iv©e/√éök.h
>

24 
	~<√éök/©å.h
>

25 
	~<√éök/√tfûãr/n‚l.h
>

26 
	~<√éök/√tfûãr/queue_msg.h
>

27 
	~<byãsw≠.h
>

29 
∆_ˇche_›s
 
	gn‚l_queue_msg_›s
;

31 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


32 
uöt64_t
 
	$¡ohŒ
(
uöt64_t
 
x
)

34  
x
;

35 
	}
}

36 #ñi‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


37 
uöt64_t
 
	$¡ohŒ
(
uöt64_t
 
x
)

39  
	`bsw≠_64
(
x
);

40 
	}
}

43 
∆a_pﬁicy
 
	gqueue_pﬁicy
[
NFQA_MAX
+1] = {

44 [
NFQA_PACKET_HDR
] = {

45 .
möÀn
 = (
nfq∆_msg_∑ckë_hdr
),

47 [
NFQA_VERDICT_HDR
] = {

48 .
möÀn
 = (
nfq∆_msg_vîdi˘_hdr
),

50 [
NFQA_MARK
] = { .
ty≥
 = 
NLA_U32
 },

51 [
NFQA_TIMESTAMP
] = {

52 .
möÀn
 = (
nfq∆_msg_∑ckë_time°amp
),

54 [
NFQA_IFINDEX_INDEV
] = { .
ty≥
 = 
NLA_U32
 },

55 [
NFQA_IFINDEX_OUTDEV
] = { .
ty≥
 = 
NLA_U32
 },

56 [
NFQA_IFINDEX_PHYSINDEV
] = { .
ty≥
 = 
NLA_U32
 },

57 [
NFQA_IFINDEX_PHYSOUTDEV
] = { .
ty≥
 = 
NLA_U32
 },

58 [
NFQA_HWADDR
] = {

59 .
möÀn
 = (
nfq∆_msg_∑ckë_hw
),

63 
	$n‚lmsg_queue_msg_∑r£
(
∆msghdr
 *
∆h
,

64 
n‚l_queue_msg
 **
ªsu…
)

66 
n‚l_queue_msg
 *
msg
;

67 
∆©å
 *
tb
[
NFQA_MAX
+1];

68 
∆©å
 *
©å
;

69 
îr
;

71 
msg
 = 
	`n‚l_queue_msg_Æloc
();

72 i‡(!
msg
)

73  -
NLE_NOMEM
;

75 
msg
->
˚_msgty≥
 = 
∆h
->
∆msg_ty≥
;

77 
îr
 = 
	`∆msg_∑r£
(
∆h
, (
nfgímsg
), 
tb
, 
NFQA_MAX
,

78 
queue_pﬁicy
);

79 i‡(
îr
 < 0)

80 
îrout
;

82 
	`n‚l_queue_msg_£t_group
(
msg
, 
	`n‚lmsg_ªs_id
(
∆h
));

83 
	`n‚l_queue_msg_£t_Ámûy
(
msg
, 
	`n‚lmsg_Ámûy
(
∆h
));

85 
©å
 = 
tb
[
NFQA_PACKET_HDR
];

86 i‡(
©å
) {

87 
nfq∆_msg_∑ckë_hdr
 *
hdr
 = 
	`∆a_d©a
(
©å
);

89 
	`n‚l_queue_msg_£t_∑ckëid
(
msg
, 
	`¡ohl
(
hdr
->
∑ckë_id
));

90 i‡(
hdr
->
hw_¥Ÿocﬁ
)

91 
	`n‚l_queue_msg_£t_hw¥Ÿo
(
msg
, 
hdr
->
hw_¥Ÿocﬁ
);

92 
	`n‚l_queue_msg_£t_hook
(
msg
, 
hdr
->
hook
);

95 
©å
 = 
tb
[
NFQA_MARK
];

96 i‡(
©å
)

97 
	`n‚l_queue_msg_£t_m¨k
(
msg
, 
	`¡ohl
(
	`∆a_gë_u32
(
©å
)));

99 
©å
 = 
tb
[
NFQA_TIMESTAMP
];

100 i‡(
©å
) {

101 
nfq∆_msg_∑ckë_time°amp
 *
time°amp
 = 
	`∆a_d©a
(
©å
);

102 
timevÆ
 
tv
;

104 
tv
.
tv_£c
 = 
	`¡ohŒ
(
time°amp
->
£c
);

105 
tv
.
tv_u£c
 = 
	`¡ohŒ
(
time°amp
->
u£c
);

106 
	`n‚l_queue_msg_£t_time°amp
(
msg
, &
tv
);

109 
©å
 = 
tb
[
NFQA_IFINDEX_INDEV
];

110 i‡(
©å
)

111 
	`n‚l_queue_msg_£t_ödev
(
msg
, 
	`¡ohl
(
	`∆a_gë_u32
(
©å
)));

113 
©å
 = 
tb
[
NFQA_IFINDEX_OUTDEV
];

114 i‡(
©å
)

115 
	`n‚l_queue_msg_£t_outdev
(
msg
, 
	`¡ohl
(
	`∆a_gë_u32
(
©å
)));

117 
©å
 = 
tb
[
NFQA_IFINDEX_PHYSINDEV
];

118 i‡(
©å
)

119 
	`n‚l_queue_msg_£t_physödev
(
msg
, 
	`¡ohl
(
	`∆a_gë_u32
(
©å
)));

121 
©å
 = 
tb
[
NFQA_IFINDEX_PHYSOUTDEV
];

122 i‡(
©å
)

123 
	`n‚l_queue_msg_£t_physoutdev
(
msg
, 
	`¡ohl
(
	`∆a_gë_u32
(
©å
)));

125 
©å
 = 
tb
[
NFQA_HWADDR
];

126 i‡(
©å
) {

127 
nfq∆_msg_∑ckë_hw
 *
hw
 = 
	`∆a_d©a
(
©å
);

129 
	`n‚l_queue_msg_£t_hwaddr
(
msg
, 
hw
->
hw_addr
,

130 
	`¡ohs
(
hw
->
hw_addæí
));

133 
©å
 = 
tb
[
NFQA_PAYLOAD
];

134 i‡(
©å
) {

135 
îr
 = 
	`n‚l_queue_msg_£t_∑ylﬂd
(
msg
, 
	`∆a_d©a
(
©å
),

136 
	`∆a_Àn
(
©å
));

137 i‡(
îr
 < 0)

138 
îrout
;

141 *
ªsu…
 = 
msg
;

144 
îrout
:

145 
	`n‚l_queue_msg_put
(
msg
);

146  
îr
;

147 
	}
}

149 
	$queue_msg_∑r£r
(
∆_ˇche_›s
 *
›s
, 
sockaddr_∆
 *
who
,

150 
∆msghdr
 *
∆h
, 
∆_∑r£r_∑øm
 *
µ
)

152 
n‚l_queue_msg
 *
msg
;

153 
îr
;

155 i‡((
îr
 = 
	`n‚lmsg_queue_msg_∑r£
(
∆h
, &
msg
)) < 0)

156  
îr
;

158 
îr
 = 
µ
->
	`µ_cb
((
∆_obje˘
 *Ë
msg
,Öp);

159 
	`n‚l_queue_msg_put
(
msg
);

160  
îr
;

161 
	}
}

165 
∆_msg
 *

166 
	$__n‚l_queue_msg_buûd_vîdi˘
(c⁄° 
n‚l_queue_msg
 *
msg
,

167 
uöt8_t
 
ty≥
)

169 
∆_msg
 *
∆msg
;

170 
nfq∆_msg_vîdi˘_hdr
 
vîdi˘
;

172 
∆msg
 = 
	`n‚lmsg_Æloc_sim∂e
(
NFNL_SUBSYS_QUEUE
, 
ty≥
, 0,

173 
	`n‚l_queue_msg_gë_Ámûy
(
msg
),

174 
	`n‚l_queue_msg_gë_group
(
msg
));

175 i‡(
∆msg
 =
NULL
)

176  
NULL
;

178 
vîdi˘
.
id
 = 
	`ht⁄l
(
	`n‚l_queue_msg_gë_∑ckëid
(
msg
));

179 
vîdi˘
.vîdi˘ = 
	`ht⁄l
(
	`n‚l_queue_msg_gë_vîdi˘
(
msg
));

180 i‡(
	`∆a_put
(
∆msg
, 
NFQA_VERDICT_HDR
, (
vîdi˘
), &verdict) < 0)

181 
∆a_put_Áûuª
;

183 i‡(
	`n‚l_queue_msg_ã°_m¨k
(
msg
) &&

184 
	`∆a_put_u32
(
∆msg
, 
NFQA_MARK
,

185 
	`¡ohl
(
	`n‚l_queue_msg_gë_m¨k
(
msg
))) < 0)

186 
∆a_put_Áûuª
;

188  
∆msg
;

190 
∆a_put_Áûuª
:

191 
	`∆msg_‰ì
(
∆msg
);

192  
NULL
;

193 
	}
}

195 
∆_msg
 *

196 
	$n‚l_queue_msg_buûd_vîdi˘
(c⁄° 
n‚l_queue_msg
 *
msg
)

198  
	`__n‚l_queue_msg_buûd_vîdi˘
(
msg
, 
NFQNL_MSG_VERDICT
);

199 
	}
}

201 
∆_msg
 *

202 
	$n‚l_queue_msg_buûd_vîdi˘_b©ch
(c⁄° 
n‚l_queue_msg
 *
msg
)

204  
	`__n‚l_queue_msg_buûd_vîdi˘
(
msg
, 
NFQNL_MSG_VERDICT_BATCH
);

205 
	}
}

213 
	$n‚l_queue_msg_£nd_vîdi˘
(
∆_sock
 *
∆h
,

214 c⁄° 
n‚l_queue_msg
 *
msg
)

216 
∆_msg
 *
∆msg
;

217 
îr
;

219 
∆msg
 = 
	`n‚l_queue_msg_buûd_vîdi˘
(
msg
);

220 i‡(
∆msg
 =
NULL
)

221  -
NLE_NOMEM
;

223 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
∆h
, 
∆msg
);

224 
	`∆msg_‰ì
(
∆msg
);

225 i‡(
îr
 < 0)

226  
îr
;

227  
	`waô_f‹_ack
(
∆h
);

228 
	}
}

236 
	$n‚l_queue_msg_£nd_vîdi˘_b©ch
(
∆_sock
 *
∆h
,

237 c⁄° 
n‚l_queue_msg
 *
msg
)

239 
∆_msg
 *
∆msg
;

240 
îr
;

242 
∆msg
 = 
	`n‚l_queue_msg_buûd_vîdi˘_b©ch
(
msg
);

243 i‡(
∆msg
 =
NULL
)

244  -
NLE_NOMEM
;

246 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
∆h
, 
∆msg
);

247 
	`∆msg_‰ì
(
∆msg
);

248 i‡(
îr
 < 0)

249  
îr
;

250  
	`waô_f‹_ack
(
∆h
);

251 
	}
}

261 
	$n‚l_queue_msg_£nd_vîdi˘_∑ylﬂd
(
∆_sock
 *
∆h
,

262 c⁄° 
n‚l_queue_msg
 *
msg
,

263 c⁄° *
∑ylﬂd_d©a
, 
∑ylﬂd_Àn
)

265 
∆_msg
 *
∆msg
;

266 
îr
;

267 
iovec
 
iov
[3];

268 
∆©å
 
∆a
;

270 
∆msg
 = 
	`n‚l_queue_msg_buûd_vîdi˘
(
msg
);

271 i‡(
∆msg
 =
NULL
)

272  -
NLE_NOMEM
;

274 
	`mem£t
(
iov
, 0, (iov));

276 
iov
[0].
iov_ba£
 = (*Ë
	`∆msg_hdr
(
∆msg
);

277 
iov
[0].
iov_Àn
 = 
	`∆msg_hdr
(
∆msg
)->
∆msg_Àn
;

279 
∆a
.
∆a_ty≥
 = 
NFQA_PAYLOAD
;

280 
∆a
.
∆a_Àn
 = 
∑ylﬂd_Àn
 + (nla);

281 
	`∆msg_hdr
(
∆msg
)->
∆msg_Àn
 +
∆a
.
∆a_Àn
;

283 
iov
[1].
iov_ba£
 = (*Ë&
∆a
;

284 
iov
[1].
iov_Àn
 = (
∆a
);

286 
iov
[2].
iov_ba£
 = (*Ë
∑ylﬂd_d©a
;

287 
iov
[2].
iov_Àn
 = 
	`NLA_ALIGN
(
∑ylﬂd_Àn
);

289 
	`∆_com∂ëe_msg
(
∆h
, 
∆msg
);

290 
îr
 = 
	`∆_£nd_iovec
(
∆h
, 
∆msg
, 
iov
, 3);

292 
	`∆msg_‰ì
(
∆msg
);

293 i‡(
îr
 < 0)

294  
îr
;

295  
	`waô_f‹_ack
(
∆h
);

296 
	}
}

298 
	#NFNLMSG_QUEUE_TYPE
(
ty≥
Ë
	`NFNLMSG_TYPE
(
NFNL_SUBSYS_QUEUE
, (ty≥))

	)

299 
∆_ˇche_›s
 
	gn‚l_queue_msg_›s
 = {

300 .
co_«me
 = "netfilter/queue_msg",

301 .
	gco_hdrsize
 = 
NFNL_HDRLEN
,

302 .
	gco_msgty≥s
 = {

303 { 
NFNLMSG_QUEUE_TYPE
(
NFQNL_MSG_PACKET
), 
NL_ACT_NEW
, "new" },

304 
END_OF_MSGTYPES_LIST
,

306 .
	gco_¥Ÿocﬁ
 = 
NETLINK_NETFILTER
,

307 .
	gco_msg_∑r£r
 = 
queue_msg_∑r£r
,

308 .
	gco_obj_›s
 = &
queue_msg_obj_›s
,

311 
__öô
 
	$n‚l_msg_queue_öô
()

313 
	`∆_ˇche_mngt_ªgi°î
(&
n‚l_queue_msg_›s
);

314 
	}
}

316 
__exô
 
	$n‚l_queue_msg_exô
()

318 
	`∆_ˇche_mngt_uƒegi°î
(&
n‚l_queue_msg_›s
);

319 
	}
}

	@mylibnl/libnl-3.2.25/lib/netfilter/queue_msg_obj.c

12 
	~<√éök-¥iv©e/√éök.h
>

13 
	~<√éök/√tfûãr/n‚l.h
>

14 
	~<√éök/√tfûãr/√tfûãr.h
>

15 
	~<√éök/√tfûãr/queue_msg.h
>

16 
	~<löux/√tfûãr.h
>

19 
	#QUEUE_MSG_ATTR_GROUP
 (1UL << 0)

	)

20 
	#QUEUE_MSG_ATTR_FAMILY
 (1UL << 1)

	)

21 
	#QUEUE_MSG_ATTR_PACKETID
 (1UL << 2)

	)

22 
	#QUEUE_MSG_ATTR_HWPROTO
 (1UL << 3)

	)

23 
	#QUEUE_MSG_ATTR_HOOK
 (1UL << 4)

	)

24 
	#QUEUE_MSG_ATTR_MARK
 (1UL << 5)

	)

25 
	#QUEUE_MSG_ATTR_TIMESTAMP
 (1UL << 6)

	)

26 
	#QUEUE_MSG_ATTR_INDEV
 (1UL << 7)

	)

27 
	#QUEUE_MSG_ATTR_OUTDEV
 (1UL << 8)

	)

28 
	#QUEUE_MSG_ATTR_PHYSINDEV
 (1UL << 9)

	)

29 
	#QUEUE_MSG_ATTR_PHYSOUTDEV
 (1UL << 10)

	)

30 
	#QUEUE_MSG_ATTR_HWADDR
 (1UL << 11)

	)

31 
	#QUEUE_MSG_ATTR_PAYLOAD
 (1UL << 12)

	)

32 
	#QUEUE_MSG_ATTR_VERDICT
 (1UL << 13)

	)

35 
	$n‚l_queue_msg_‰ì_d©a
(
∆_obje˘
 *
c
)

37 
n‚l_queue_msg
 *
msg
 = (n‚l_queue_msg *Ë
c
;

39 i‡(
msg
 =
NULL
)

42 
	`‰ì
(
msg
->
queue_msg_∑ylﬂd
);

43 
	}
}

45 
	$n‚l_queue_msg_˛⁄e
(
∆_obje˘
 *
_d°
, ∆_obje˘ *
_§c
)

47 
n‚l_queue_msg
 *
d°
 = (n‚l_queue_msg *Ë
_d°
;

48 
n‚l_queue_msg
 *
§c
 = (n‚l_queue_msg *Ë
_§c
;

49 
îr
;

51 i‡(
§c
->
queue_msg_∑ylﬂd
) {

52 
îr
 = 
	`n‚l_queue_msg_£t_∑ylﬂd
(
d°
, 
§c
->
queue_msg_∑ylﬂd
,

53 
§c
->
queue_msg_∑ylﬂd_Àn
);

54 i‡(
îr
 < 0)

55 
îrout
;

59 
îrout
:

60  
îr
;

61 
	}
}

63 
	$n‚l_queue_msg_dump
(
∆_obje˘
 *
a
, 
∆_dump_∑øms
 *
p
)

65 
n‚l_queue_msg
 *
msg
 = (n‚l_queue_msg *Ë
a
;

66 
∆_ˇche
 *
lök_ˇche
;

67 
buf
[64];

69 
lök_ˇche
 = 
	`∆_ˇche_mngt_ªquúe_ß„
("route/link");

71 
	`∆_√w_löe
(
p
);

73 i‡(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_GROUP
)

74 
	`∆_dump
(
p
, "GROUP=%u ", 
msg
->
queue_msg_group
);

76 i‡(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_INDEV
) {

77 i‡(
lök_ˇche
)

78 
	`∆_dump
(
p
, "IN=%s ",

79 
	`π∆_lök_i2«me
(
lök_ˇche
,

80 
msg
->
queue_msg_ödev
,

81 
buf
, (buf)));

83 
	`∆_dump
(
p
, "IN=%d ", 
msg
->
queue_msg_ödev
);

86 i‡(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_PHYSINDEV
) {

87 i‡(
lök_ˇche
)

88 
	`∆_dump
(
p
, "PHYSIN=%s ",

89 
	`π∆_lök_i2«me
(
lök_ˇche
,

90 
msg
->
queue_msg_physödev
,

91 
buf
, (buf)));

93 
	`∆_dump
(
p
, "IN=%d ", 
msg
->
queue_msg_physödev
);

96 i‡(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_OUTDEV
) {

97 i‡(
lök_ˇche
)

98 
	`∆_dump
(
p
, "OUT=%s ",

99 
	`π∆_lök_i2«me
(
lök_ˇche
,

100 
msg
->
queue_msg_outdev
,

101 
buf
, (buf)));

103 
	`∆_dump
(
p
, "OUT=%d ", 
msg
->
queue_msg_outdev
);

106 i‡(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_PHYSOUTDEV
) {

107 i‡(
lök_ˇche
)

108 
	`∆_dump
(
p
, "PHYSOUT=%s ",

109 
	`π∆_lök_i2«me
(
lök_ˇche
,

110 
msg
->
queue_msg_physoutdev
,

111 
buf
, (buf)));

113 
	`∆_dump
(
p
, "PHYSOUT=%d ", 
msg
->
queue_msg_physoutdev
);

116 i‡(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_HWADDR
) {

117 
i
;

119 
	`∆_dump
(
p
, "MAC");

120 
i
 = 0; i < 
msg
->
queue_msg_hwaddr_Àn
; i++)

121 
	`∆_dump
(
p
, "%c%02x", 
i
?':':'=',

122 
msg
->
queue_msg_hwaddr
[
i
]);

123 
	`∆_dump
(
p
, " ");

126 i‡(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_FAMILY
)

127 
	`∆_dump
(
p
, "FAMILY=%s ",

128 
	`∆_af2°r
(
msg
->
queue_msg_Ámûy
, 
buf
, (buf)));

130 i‡(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_HWPROTO
)

131 
	`∆_dump
(
p
, "HWPROTO=%s ",

132 
	`∆_ëhî_¥Ÿo2°r
(
	`¡ohs
(
msg
->
queue_msg_hw¥Ÿo
),

133 
buf
, (buf)));

135 i‡(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_HOOK
)

136 
	`∆_dump
(
p
, "HOOK=%s ",

137 
	`n‚l_öë_hook2°r
(
msg
->
queue_msg_hook
,

138 
buf
, (buf)));

140 i‡(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_MARK
)

141 
	`∆_dump
(
p
, "MARK=%d ", 
msg
->
queue_msg_m¨k
);

143 i‡(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_PAYLOAD
)

144 
	`∆_dump
(
p
, "PAYLOADLEN=%d ", 
msg
->
queue_msg_∑ylﬂd_Àn
);

146 i‡(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_PACKETID
)

147 
	`∆_dump
(
p
, "PACKETID=%u ", 
msg
->
queue_msg_∑ckëid
);

149 i‡(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_VERDICT
)

150 
	`∆_dump
(
p
, "VERDICT=%s ",

151 
	`n‚l_vîdi˘2°r
(
msg
->
queue_msg_vîdi˘
,

152 
buf
, (buf)));

154 
	`∆_dump
(
p
, "\n");

156 i‡(
lök_ˇche
)

157 
	`∆_ˇche_put
(
lök_ˇche
);

158 
	}
}

165 
n‚l_queue_msg
 *
	$n‚l_queue_msg_Æloc
()

167  (
n‚l_queue_msg
 *Ë
	`∆_obje˘_Æloc
(&
queue_msg_obj_›s
);

168 
	}
}

170 
	$n‚l_queue_msg_gë
(
n‚l_queue_msg
 *
msg
)

172 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
msg
);

173 
	}
}

175 
	$n‚l_queue_msg_put
(
n‚l_queue_msg
 *
msg
)

177 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
msg
);

178 
	}
}

187 
	$n‚l_queue_msg_£t_group
(
n‚l_queue_msg
 *
msg
, 
uöt16_t
 
group
)

189 
msg
->
queue_msg_group
 = 
group
;

190 
msg
->
˚_mask
 |
QUEUE_MSG_ATTR_GROUP
;

191 
	}
}

193 
	$n‚l_queue_msg_ã°_group
(c⁄° 
n‚l_queue_msg
 *
msg
)

195  !!(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_GROUP
);

196 
	}
}

198 
uöt16_t
 
	$n‚l_queue_msg_gë_group
(c⁄° 
n‚l_queue_msg
 *
msg
)

200  
msg
->
queue_msg_group
;

201 
	}
}

208 
	$n‚l_queue_msg_£t_Ámûy
(
n‚l_queue_msg
 *
msg
, 
uöt8_t
 
Ámûy
)

210 
msg
->
queue_msg_Ámûy
 = 
Ámûy
;

211 
msg
->
˚_mask
 |
QUEUE_MSG_ATTR_FAMILY
;

212 
	}
}

214 
	$n‚l_queue_msg_ã°_Ámûy
(c⁄° 
n‚l_queue_msg
 *
msg
)

216  !!(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_FAMILY
);

217 
	}
}

219 
uöt8_t
 
	$n‚l_queue_msg_gë_Ámûy
(c⁄° 
n‚l_queue_msg
 *
msg
)

221 i‡(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_FAMILY
)

222  
msg
->
queue_msg_Ámûy
;

224  
AF_UNSPEC
;

225 
	}
}

227 
	$n‚l_queue_msg_£t_∑ckëid
(
n‚l_queue_msg
 *
msg
, 
uöt32_t
 
∑ckëid
)

229 
msg
->
queue_msg_∑ckëid
 = 
∑ckëid
;

230 
msg
->
˚_mask
 |
QUEUE_MSG_ATTR_PACKETID
;

231 
	}
}

233 
	$n‚l_queue_msg_ã°_∑ckëid
(c⁄° 
n‚l_queue_msg
 *
msg
)

235  !!(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_PACKETID
);

236 
	}
}

238 
uöt32_t
 
	$n‚l_queue_msg_gë_∑ckëid
(c⁄° 
n‚l_queue_msg
 *
msg
)

240  
msg
->
queue_msg_∑ckëid
;

241 
	}
}

243 
	$n‚l_queue_msg_£t_hw¥Ÿo
(
n‚l_queue_msg
 *
msg
, 
uöt16_t
 
hw¥Ÿo
)

245 
msg
->
queue_msg_hw¥Ÿo
 = 
hw¥Ÿo
;

246 
msg
->
˚_mask
 |
QUEUE_MSG_ATTR_HWPROTO
;

247 
	}
}

249 
	$n‚l_queue_msg_ã°_hw¥Ÿo
(c⁄° 
n‚l_queue_msg
 *
msg
)

251  !!(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_HWPROTO
);

252 
	}
}

254 
uöt16_t
 
	$n‚l_queue_msg_gë_hw¥Ÿo
(c⁄° 
n‚l_queue_msg
 *
msg
)

256  
msg
->
queue_msg_hw¥Ÿo
;

257 
	}
}

259 
	$n‚l_queue_msg_£t_hook
(
n‚l_queue_msg
 *
msg
, 
uöt8_t
 
hook
)

261 
msg
->
queue_msg_hook
 = 
hook
;

262 
msg
->
˚_mask
 |
QUEUE_MSG_ATTR_HOOK
;

263 
	}
}

265 
	$n‚l_queue_msg_ã°_hook
(c⁄° 
n‚l_queue_msg
 *
msg
)

267  !!(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_HOOK
);

268 
	}
}

270 
uöt8_t
 
	$n‚l_queue_msg_gë_hook
(c⁄° 
n‚l_queue_msg
 *
msg
)

272  
msg
->
queue_msg_hook
;

273 
	}
}

275 
	$n‚l_queue_msg_£t_m¨k
(
n‚l_queue_msg
 *
msg
, 
uöt32_t
 
m¨k
)

277 
msg
->
queue_msg_m¨k
 = 
m¨k
;

278 
msg
->
˚_mask
 |
QUEUE_MSG_ATTR_MARK
;

279 
	}
}

281 
	$n‚l_queue_msg_ã°_m¨k
(c⁄° 
n‚l_queue_msg
 *
msg
)

283  !!(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_MARK
);

284 
	}
}

286 
uöt32_t
 
	$n‚l_queue_msg_gë_m¨k
(c⁄° 
n‚l_queue_msg
 *
msg
)

288  
msg
->
queue_msg_m¨k
;

289 
	}
}

291 
	$n‚l_queue_msg_£t_time°amp
(
n‚l_queue_msg
 *
msg
,

292 
timevÆ
 *
tv
)

294 
msg
->
queue_msg_time°amp
.
tv_£c
 = 
tv
->tv_sec;

295 
msg
->
queue_msg_time°amp
.
tv_u£c
 = 
tv
->tv_usec;

296 
msg
->
˚_mask
 |
QUEUE_MSG_ATTR_TIMESTAMP
;

297 
	}
}

299 
	$n‚l_queue_msg_ã°_time°amp
(c⁄° 
n‚l_queue_msg
 *
msg
)

301  !!(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_TIMESTAMP
);

302 
	}
}

304 c⁄° 
timevÆ
 *
	$n‚l_queue_msg_gë_time°amp
(c⁄° 
n‚l_queue_msg
 *
msg
)

306 i‡(!(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_TIMESTAMP
))

307  
NULL
;

308  &
msg
->
queue_msg_time°amp
;

309 
	}
}

311 
	$n‚l_queue_msg_£t_ödev
(
n‚l_queue_msg
 *
msg
, 
uöt32_t
 
ödev
)

313 
msg
->
queue_msg_ödev
 = 
ödev
;

314 
msg
->
˚_mask
 |
QUEUE_MSG_ATTR_INDEV
;

315 
	}
}

317 
	$n‚l_queue_msg_ã°_ödev
(c⁄° 
n‚l_queue_msg
 *
msg
)

319  !!(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_INDEV
);

320 
	}
}

322 
uöt32_t
 
	$n‚l_queue_msg_gë_ödev
(c⁄° 
n‚l_queue_msg
 *
msg
)

324  
msg
->
queue_msg_ödev
;

325 
	}
}

327 
	$n‚l_queue_msg_£t_outdev
(
n‚l_queue_msg
 *
msg
, 
uöt32_t
 
outdev
)

329 
msg
->
queue_msg_outdev
 = 
outdev
;

330 
msg
->
˚_mask
 |
QUEUE_MSG_ATTR_OUTDEV
;

331 
	}
}

333 
	$n‚l_queue_msg_ã°_outdev
(c⁄° 
n‚l_queue_msg
 *
msg
)

335  !!(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_OUTDEV
);

336 
	}
}

338 
uöt32_t
 
	$n‚l_queue_msg_gë_outdev
(c⁄° 
n‚l_queue_msg
 *
msg
)

340  
msg
->
queue_msg_outdev
;

341 
	}
}

343 
	$n‚l_queue_msg_£t_physödev
(
n‚l_queue_msg
 *
msg
,

344 
uöt32_t
 
physödev
)

346 
msg
->
queue_msg_physödev
 = 
physödev
;

347 
msg
->
˚_mask
 |
QUEUE_MSG_ATTR_PHYSINDEV
;

348 
	}
}

350 
	$n‚l_queue_msg_ã°_physödev
(c⁄° 
n‚l_queue_msg
 *
msg
)

352  !!(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_PHYSINDEV
);

353 
	}
}

355 
uöt32_t
 
	$n‚l_queue_msg_gë_physödev
(c⁄° 
n‚l_queue_msg
 *
msg
)

357  
msg
->
queue_msg_physödev
;

358 
	}
}

360 
	$n‚l_queue_msg_£t_physoutdev
(
n‚l_queue_msg
 *
msg
,

361 
uöt32_t
 
physoutdev
)

363 
msg
->
queue_msg_physoutdev
 = 
physoutdev
;

364 
msg
->
˚_mask
 |
QUEUE_MSG_ATTR_PHYSOUTDEV
;

365 
	}
}

367 
	$n‚l_queue_msg_ã°_physoutdev
(c⁄° 
n‚l_queue_msg
 *
msg
)

369  !!(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_PHYSOUTDEV
);

370 
	}
}

372 
uöt32_t
 
	$n‚l_queue_msg_gë_physoutdev
(c⁄° 
n‚l_queue_msg
 *
msg
)

374  
msg
->
queue_msg_physoutdev
;

375 
	}
}

377 
	$n‚l_queue_msg_£t_hwaddr
(
n‚l_queue_msg
 *
msg
, 
uöt8_t
 *
hwaddr
,

378 
Àn
)

380 i‡(
Àn
 > (
msg
->
queue_msg_hwaddr
))

381 
Àn
 = (
msg
->
queue_msg_hwaddr
);

383 
msg
->
queue_msg_hwaddr_Àn
 = 
Àn
;

384 
	`mem˝y
(
msg
->
queue_msg_hwaddr
, 
hwaddr
, 
Àn
);

385 
msg
->
˚_mask
 |
QUEUE_MSG_ATTR_HWADDR
;

386 
	}
}

388 
	$n‚l_queue_msg_ã°_hwaddr
(c⁄° 
n‚l_queue_msg
 *
msg
)

390  !!(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_HWADDR
);

391 
	}
}

393 c⁄° 
uöt8_t
 *
	$n‚l_queue_msg_gë_hwaddr
(c⁄° 
n‚l_queue_msg
 *
msg
,

394 *
Àn
)

396 i‡(!(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_HWADDR
)) {

397 *
Àn
 = 0;

398  
NULL
;

401 *
Àn
 = 
msg
->
queue_msg_hwaddr_Àn
;

402  
msg
->
queue_msg_hwaddr
;

403 
	}
}

405 
	$n‚l_queue_msg_£t_∑ylﬂd
(
n‚l_queue_msg
 *
msg
, 
uöt8_t
 *
∑ylﬂd
,

406 
Àn
)

408 
	`‰ì
(
msg
->
queue_msg_∑ylﬂd
);

409 
msg
->
queue_msg_∑ylﬂd
 = 
	`mÆloc
(
Àn
);

410 i‡(!
msg
->
queue_msg_∑ylﬂd
)

411  -
NLE_NOMEM
;

413 
	`mem˝y
(
msg
->
queue_msg_∑ylﬂd
, 
∑ylﬂd
, 
Àn
);

414 
msg
->
queue_msg_∑ylﬂd_Àn
 = 
Àn
;

415 
msg
->
˚_mask
 |
QUEUE_MSG_ATTR_PAYLOAD
;

417 
	}
}

419 
	$n‚l_queue_msg_ã°_∑ylﬂd
(c⁄° 
n‚l_queue_msg
 *
msg
)

421  !!(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_PAYLOAD
);

422 
	}
}

424 c⁄° *
	$n‚l_queue_msg_gë_∑ylﬂd
(c⁄° 
n‚l_queue_msg
 *
msg
, *
Àn
)

426 i‡(!(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_PAYLOAD
)) {

427 *
Àn
 = 0;

428  
NULL
;

431 *
Àn
 = 
msg
->
queue_msg_∑ylﬂd_Àn
;

432  
msg
->
queue_msg_∑ylﬂd
;

433 
	}
}

440 
	$n‚l_queue_msg_£t_vîdi˘
(
n‚l_queue_msg
 *
msg
,

441 
vîdi˘
)

443 
msg
->
queue_msg_vîdi˘
 = 
vîdi˘
;

444 
msg
->
˚_mask
 |
QUEUE_MSG_ATTR_VERDICT
;

445 
	}
}

447 
	$n‚l_queue_msg_ã°_vîdi˘
(c⁄° 
n‚l_queue_msg
 *
msg
)

449  !!(
msg
->
˚_mask
 & 
QUEUE_MSG_ATTR_VERDICT
);

450 
	}
}

452 
	$n‚l_queue_msg_gë_vîdi˘
(c⁄° 
n‚l_queue_msg
 *
msg
)

454  
msg
->
queue_msg_vîdi˘
;

455 
	}
}

457 c⁄° 
å™s_tbl
 
	gn‚l_queue_msg_©ås
[] = {

458 
__ADD
(
QUEUE_MSG_ATTR_GROUP
, 
group
)

459 
__ADD
(
QUEUE_MSG_ATTR_FAMILY
, 
Ámûy
)

460 
__ADD
(
QUEUE_MSG_ATTR_PACKETID
, 
∑ckëid
)

461 
__ADD
(
QUEUE_MSG_ATTR_HWPROTO
, 
hw¥Ÿo
)

462 
__ADD
(
QUEUE_MSG_ATTR_HOOK
, 
hook
)

463 
__ADD
(
QUEUE_MSG_ATTR_MARK
, 
m¨k
)

464 
__ADD
(
QUEUE_MSG_ATTR_TIMESTAMP
, 
time°amp
)

465 
__ADD
(
QUEUE_MSG_ATTR_INDEV
, 
ödev
)

466 
__ADD
(
QUEUE_MSG_ATTR_OUTDEV
, 
outdev
)

467 
__ADD
(
QUEUE_MSG_ATTR_PHYSINDEV
, 
physödev
)

468 
__ADD
(
QUEUE_MSG_ATTR_PHYSOUTDEV
, 
physoutdev
)

469 
__ADD
(
QUEUE_MSG_ATTR_HWADDR
, 
hwaddr
)

470 
__ADD
(
QUEUE_MSG_ATTR_PAYLOAD
, 
∑ylﬂd
)

471 
__ADD
(
QUEUE_MSG_ATTR_VERDICT
, 
vîdi˘
)

474 *
	$n‚l_queue_msg_©ås2°r
(
©ås
, *
buf
, 
size_t
 
Àn
)

476  
	`__Êags2°r
(
©ås
, 
buf
, 
Àn
, 
n‚l_queue_msg_©ås
,

477 
	`ARRAY_SIZE
(
n‚l_queue_msg_©ås
));

478 
	}
}

482 
∆_obje˘_›s
 
	gqueue_msg_obj_›s
 = {

483 .
oo_«me
 = "netfilter/queuemsg",

484 .
	goo_size
 = (
n‚l_queue_msg
),

485 .
	goo_‰ì_d©a
 = 
n‚l_queue_msg_‰ì_d©a
,

486 .
	goo_˛⁄e
 = 
n‚l_queue_msg_˛⁄e
,

487 .
	goo_dump
 = {

488 [
NL_DUMP_LINE
] = 
n‚l_queue_msg_dump
,

489 [
NL_DUMP_DETAILS
] = 
n‚l_queue_msg_dump
,

490 [
NL_DUMP_STATS
] = 
n‚l_queue_msg_dump
,

492 .
	goo_©ås2°r
 = 
n‚l_queue_msg_©ås2°r
,

	@mylibnl/libnl-3.2.25/lib/netfilter/queue_obj.c

19 
	~<√éök-¥iv©e/√éök.h
>

20 
	~<√éök/√tfûãr/n‚l.h
>

21 
	~<√éök/√tfûãr/queue.h
>

24 
	#QUEUE_ATTR_GROUP
 (1UL << 0)

	)

25 
	#QUEUE_ATTR_MAXLEN
 (1UL << 1)

	)

26 
	#QUEUE_ATTR_COPY_MODE
 (1UL << 2)

	)

27 
	#QUEUE_ATTR_COPY_RANGE
 (1UL << 3)

	)

31 
	$n‚l_queue_dump
(
∆_obje˘
 *
a
, 
∆_dump_∑øms
 *
p
)

33 
n‚l_queue
 *
queue
 = (n‚l_queuê*Ë
a
;

34 
buf
[64];

36 
	`∆_√w_löe
(
p
);

38 i‡(
queue
->
˚_mask
 & 
QUEUE_ATTR_GROUP
)

39 
	`∆_dump
(
p
, "group=%u ", 
queue
->
queue_group
);

41 i‡(
queue
->
˚_mask
 & 
QUEUE_ATTR_MAXLEN
)

42 
	`∆_dump
(
p
, "maxÀn=%u ", 
queue
->
queue_maxÀn
);

44 i‡(
queue
->
˚_mask
 & 
QUEUE_ATTR_COPY_MODE
)

45 
	`∆_dump
(
p
, "copy_mode=%s ",

46 
	`n‚l_queue_c›y_mode2°r
(
queue
->
queue_c›y_mode
,

47 
buf
, (buf)));

49 i‡(
queue
->
˚_mask
 & 
QUEUE_ATTR_COPY_RANGE
)

50 
	`∆_dump
(
p
, "c›y_ønge=%u ", 
queue
->
queue_c›y_ønge
);

52 
	`∆_dump
(
p
, "\n");

53 
	}
}

55 c⁄° 
å™s_tbl
 
	gc›y_modes
[] = {

56 
__ADD
(
NFNL_QUEUE_COPY_NONE
, 
n⁄e
)

57 
__ADD
(
NFNL_QUEUE_COPY_META
, 
mëa
)

58 
__ADD
(
NFNL_QUEUE_COPY_PACKET
, 
∑ckë
)

61 *
	$n‚l_queue_c›y_mode2°r
(
n‚l_queue_c›y_mode
 
c›y_mode
, *
buf
,

62 
size_t
 
Àn
)

64  
	`__ty≥2°r
(
c›y_mode
, 
buf
, 
Àn
, 
c›y_modes
,

65 
	`ARRAY_SIZE
(
c›y_modes
));

66 
	}
}

68 
n‚l_queue_c›y_mode
 
	$n‚l_queue_°r2c›y_mode
(c⁄° *
«me
)

70  
	`__°r2ty≥
(
«me
, 
c›y_modes
, 
	`ARRAY_SIZE
(copy_modes));

71 
	}
}

78 
n‚l_queue
 *
	$n‚l_queue_Æloc
()

80  (
n‚l_queue
 *Ë
	`∆_obje˘_Æloc
(&
queue_obj_›s
);

81 
	}
}

83 
	$n‚l_queue_gë
(
n‚l_queue
 *
queue
)

85 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
queue
);

86 
	}
}

88 
	$n‚l_queue_put
(
n‚l_queue
 *
queue
)

90 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
queue
);

91 
	}
}

100 
	$n‚l_queue_£t_group
(
n‚l_queue
 *
queue
, 
uöt16_t
 
group
)

102 
queue
->
queue_group
 = 
group
;

103 
queue
->
˚_mask
 |
QUEUE_ATTR_GROUP
;

104 
	}
}

106 
	$n‚l_queue_ã°_group
(c⁄° 
n‚l_queue
 *
queue
)

108  !!(
queue
->
˚_mask
 & 
QUEUE_ATTR_GROUP
);

109 
	}
}

111 
uöt16_t
 
	$n‚l_queue_gë_group
(c⁄° 
n‚l_queue
 *
queue
)

113  
queue
->
queue_group
;

114 
	}
}

116 
	$n‚l_queue_£t_maxÀn
(
n‚l_queue
 *
queue
, 
uöt32_t
 
maxÀn
)

118 
queue
->
queue_maxÀn
 = 
maxÀn
;

119 
queue
->
˚_mask
 |
QUEUE_ATTR_MAXLEN
;

120 
	}
}

122 
	$n‚l_queue_ã°_maxÀn
(c⁄° 
n‚l_queue
 *
queue
)

124  !!(
queue
->
˚_mask
 & 
QUEUE_ATTR_MAXLEN
);

125 
	}
}

127 
uöt32_t
 
	$n‚l_queue_gë_maxÀn
(c⁄° 
n‚l_queue
 *
queue
)

129  
queue
->
queue_maxÀn
;

130 
	}
}

132 
	$n‚l_queue_£t_c›y_mode
(
n‚l_queue
 *
queue
, 
n‚l_queue_c›y_mode
 
mode
)

134 
queue
->
queue_c›y_mode
 = 
mode
;

135 
queue
->
˚_mask
 |
QUEUE_ATTR_COPY_MODE
;

136 
	}
}

138 
	$n‚l_queue_ã°_c›y_mode
(c⁄° 
n‚l_queue
 *
queue
)

140  !!(
queue
->
˚_mask
 & 
QUEUE_ATTR_COPY_MODE
);

141 
	}
}

143 
n‚l_queue_c›y_mode
 
	$n‚l_queue_gë_c›y_mode
(c⁄° 
n‚l_queue
 *
queue
)

145  
queue
->
queue_c›y_mode
;

146 
	}
}

148 
	$n‚l_queue_£t_c›y_ønge
(
n‚l_queue
 *
queue
, 
uöt32_t
 
c›y_ønge
)

150 
queue
->
queue_c›y_ønge
 = 
c›y_ønge
;

151 
queue
->
˚_mask
 |
QUEUE_ATTR_COPY_RANGE
;

152 
	}
}

154 
	$n‚l_queue_ã°_c›y_ønge
(c⁄° 
n‚l_queue
 *
queue
)

156  !!(
queue
->
˚_mask
 & 
QUEUE_ATTR_COPY_RANGE
);

157 
	}
}

159 
uöt32_t
 
	$n‚l_queue_gë_c›y_ønge
(c⁄° 
n‚l_queue
 *
queue
)

161  
queue
->
queue_c›y_ønge
;

162 
	}
}

164 
	$n‚l_queue_com∑ª
(
∆_obje˘
 *
_a
, ∆_obje˘ *
_b
,

165 
uöt32_t
 
©ås
, 
Êags
)

167 
n‚l_queue
 *
a
 = (n‚l_queuê*Ë
_a
;

168 
n‚l_queue
 *
b
 = (n‚l_queuê*Ë
_b
;

169 
diff
 = 0;

171 
	#NFNL_QUEUE_DIFF
(
ATTR
, 
EXPR
) \

172 
	`ATTR_DIFF
(
©ås
, 
QUEUE_ATTR_
##
ATTR
, 
a
, 
b
, 
EXPR
)

	)

173 
	#NFNL_QUEUE_DIFF_VAL
(
ATTR
, 
FIELD
) \

174 
	`NFNL_QUEUE_DIFF
(
ATTR
, 
a
->
FIELD
 !
b
->FIELD)

	)

176 
diff
 |
	`NFNL_QUEUE_DIFF_VAL
(
GROUP
, 
queue_group
);

177 
diff
 |
	`NFNL_QUEUE_DIFF_VAL
(
MAXLEN
, 
queue_maxÀn
);

178 
diff
 |
	`NFNL_QUEUE_DIFF_VAL
(
COPY_MODE
, 
queue_c›y_mode
);

179 
diff
 |
	`NFNL_QUEUE_DIFF_VAL
(
COPY_RANGE
, 
queue_c›y_ønge
);

181 #unde‡
NFNL_QUEUE_DIFF


182 #unde‡
NFNL_QUEUE_DIFF_VAL


184  
diff
;

185 
	}
}

187 c⁄° 
å™s_tbl
 
	gn‚l_queue_©ås
[] = {

188 
__ADD
(
QUEUE_ATTR_GROUP
, 
group
)

189 
__ADD
(
QUEUE_ATTR_MAXLEN
, 
maxÀn
)

190 
__ADD
(
QUEUE_ATTR_COPY_MODE
, 
c›y_mode
)

191 
__ADD
(
QUEUE_ATTR_COPY_RANGE
, 
c›y_ønge
)

194 *
	$n‚l_queue_©ås2°r
(
©ås
, *
buf
, 
size_t
 
Àn
)

196  
	`__Êags2°r
(
©ås
, 
buf
, 
Àn
, 
n‚l_queue_©ås
,

197 
	`ARRAY_SIZE
(
n‚l_queue_©ås
));

198 
	}
}

202 
∆_obje˘_›s
 
	gqueue_obj_›s
 = {

203 .
oo_«me
 = "netfilter/queue",

204 .
	goo_size
 = (
n‚l_queue
),

205 .
	goo_dump
 = {

206 [
NL_DUMP_LINE
] = 
n‚l_queue_dump
,

207 [
NL_DUMP_DETAILS
] = 
n‚l_queue_dump
,

208 [
NL_DUMP_STATS
] = 
n‚l_queue_dump
,

210 .
	goo_com∑ª
 = 
n‚l_queue_com∑ª
,

211 .
	goo_©ås2°r
 = 
n‚l_queue_©ås2°r
,

212 .
	goo_id_©ås
 = 
QUEUE_ATTR_GROUP
,

	@mylibnl/libnl-3.2.25/lib/nl.c

28 
	~<√éök-¥iv©e/√éök.h
>

29 
	~<√éök-¥iv©e/sockë.h
>

30 
	~<√éök/√éök.h
>

31 
	~<√éök/utûs.h
>

32 
	~<√éök/h™dÀrs.h
>

33 
	~<√éök/msg.h
>

34 
	~<√éök/©å.h
>

96 
	$∆_c⁄√˘
(
∆_sock
 *
sk
, 
¥Ÿocﬁ
)

98 
îr
, 
Êags
 = 0;

99 
îrsv
;

100 
sockÀn_t
 
addæí
;

102 #ifde‡
SOCK_CLOEXEC


103 
Êags
 |
SOCK_CLOEXEC
;

106 i‡(
sk
->
s_fd
 != -1)

107  -
NLE_BAD_SOCK
;

109 
sk
->
s_fd
 = 
	`sockë
(
AF_NETLINK
, 
SOCK_RAW
 | 
Êags
, 
¥Ÿocﬁ
);

110 i‡(
sk
->
s_fd
 < 0) {

111 
îrsv
 = 
î∫o
;

112 
	`NL_DBG
(4, "∆_c⁄√˘(%p): sockë(ËÁûed wôh %d\n", 
sk
, 
îrsv
);

113 
îr
 = -
	`∆_sy£º2∆îr
(
îrsv
);

114 
îrout
;

117 i‡(!(
sk
->
s_Êags
 & 
NL_SOCK_BUFSIZE_SET
)) {

118 
îr
 = 
	`∆_sockë_£t_buf„r_size
(
sk
, 0, 0);

119 i‡(
îr
 < 0)

120 
îrout
;

123 i‡(
	`_∆_sockë_is_loˇl_p‹t_un•ecifõd
 (
sk
)) {

124 
uöt32_t
 
p‹t
;

125 
uöt32_t
 
u£d_p‹ts
[32] = { 0 };

128 
p‹t
 = 
	`_∆_sockë_gíî©e_loˇl_p‹t_no_ªÀa£
(
sk
);

130 i‡(
p‹t
 =
UINT32_MAX
) {

131 
	`NL_DBG
(4, "∆_c⁄√˘(%p):Çÿm‹êunu£dÜoˇ»p‹ts.\n", 
sk
);

132 
	`_∆_sockë_u£d_p‹ts_ªÀa£_Æl
(
u£d_p‹ts
);

133 
îr
 = -
NLE_EXIST
;

134 
îrout
;

136 
îr
 = 
	`böd
(
sk
->
s_fd
, (
sockaddr
*Ë&sk->
s_loˇl
,

137 (
sk
->
s_loˇl
));

138 i‡(
îr
 == 0)

141 
îrsv
 = 
î∫o
;

142 i‡(
îrsv
 =
EADDRINUSE
) {

143 
	`NL_DBG
(4, "∆_c⁄√˘(%p):Üoˇ»p‹à%uáÃódy i¿u£. Rëry.\n", 
sk
, (Ë
p‹t
);

144 
	`_∆_sockë_u£d_p‹ts_£t
(
u£d_p‹ts
, 
p‹t
);

146 
	`NL_DBG
(4, "∆_c⁄√˘(%p): böd(Ëf‹Ö‹à%u faûed wôh %d\n", 
sk
, (Ë
p‹t
, 
îrsv
);

147 
	`_∆_sockë_u£d_p‹ts_ªÀa£_Æl
(
u£d_p‹ts
);

148 
îr
 = -
	`∆_sy£º2∆îr
(
îrsv
);

149 
îrout
;

152 
	`_∆_sockë_u£d_p‹ts_ªÀa£_Æl
(
u£d_p‹ts
);

154 
îr
 = 
	`böd
(
sk
->
s_fd
, (
sockaddr
*Ë&sk->
s_loˇl
,

155 (
sk
->
s_loˇl
));

156 i‡(
îr
 != 0) {

157 
îrsv
 = 
î∫o
;

158 
	`NL_DBG
(4, "∆_c⁄√˘(%p): böd(ËÁûed wôh %d\n", 
sk
, 
îrsv
);

159 
îr
 = -
	`∆_sy£º2∆îr
(
îrsv
);

160 
îrout
;

164 
addæí
 = (
sk
->
s_loˇl
);

165 
îr
 = 
	`gësock«me
(
sk
->
s_fd
, (
sockaddr
 *Ë&sk->
s_loˇl
,

166 &
addæí
);

167 i‡(
îr
 < 0) {

168 
îr
 = -
	`∆_sy£º2∆îr
(
î∫o
);

169 
îrout
;

172 i‡(
addæí
 !(
sk
->
s_loˇl
)) {

173 
îr
 = -
NLE_NOADDR
;

174 
îrout
;

177 i‡(
sk
->
s_loˇl
.
∆_Ámûy
 !
AF_NETLINK
) {

178 
îr
 = -
NLE_AF_NOSUPPORT
;

179 
îrout
;

182 
sk
->
s_¥Ÿo
 = 
¥Ÿocﬁ
;

185 
îrout
:

186 i‡(
sk
->
s_fd
 != -1) {

187 
	`˛o£
(
sk
->
s_fd
);

188 
sk
->
s_fd
 = -1;

191  
îr
;

192 
	}
}

205 
	$∆_˛o£
(
∆_sock
 *
sk
)

207 i‡(
sk
->
s_fd
 >= 0) {

208 
	`˛o£
(
sk
->
s_fd
);

209 
sk
->
s_fd
 = -1;

212 
sk
->
s_¥Ÿo
 = 0;

213 
	}
}

245 
	$∆_£ndto
(
∆_sock
 *
sk
, *
buf
, 
size_t
 
size
)

247 
ªt
;

249 i‡(!
buf
)

250  -
NLE_INVAL
;

252 i‡(
sk
->
s_fd
 < 0)

253  -
NLE_BAD_SOCK
;

255 
ªt
 = 
	`£ndto
(
sk
->
s_fd
, 
buf
, 
size
, 0, (
sockaddr
 *)

256 &
sk
->
s_≥î
, (sk->s_peer));

257 i‡(
ªt
 < 0)

258  -
	`∆_sy£º2∆îr
(
î∫o
);

260  
ªt
;

261 
	}
}

299 
	$∆_£ndmsg
(
∆_sock
 *
sk
, 
∆_msg
 *
msg
, 
msghdr
 *
hdr
)

301 
∆_cb
 *
cb
;

302 
ªt
;

304 i‡(
sk
->
s_fd
 < 0)

305  -
NLE_BAD_SOCK
;

307 
	`∆msg_£t_§c
(
msg
, &
sk
->
s_loˇl
);

309 
cb
 = 
sk
->
s_cb
;

310 i‡(
cb
->
cb_£t
[
NL_CB_MSG_OUT
])

311 i‡((
ªt
 = 
	`∆_cb_ˇŒ
(
cb
, 
NL_CB_MSG_OUT
, 
msg
)Ë!
NL_OK
)

312  
ªt
;

314 
ªt
 = 
	`£ndmsg
(
sk
->
s_fd
, 
hdr
, 0);

315 i‡(
ªt
 < 0)

316  -
	`∆_sy£º2∆îr
(
î∫o
);

318 
	`NL_DBG
(4, "£¡ %d byãs\n", 
ªt
);

319  
ªt
;

320 
	}
}

342 
	$∆_£nd_iovec
(
∆_sock
 *
sk
, 
∆_msg
 *
msg
, 
iovec
 *
iov
, 
iovÀn
)

344 
sockaddr_∆
 *
d°
;

345 
u¸ed
 *
¸eds
;

346 
msghdr
 
hdr
 = {

347 .
msg_«me
 = (*Ë&
sk
->
s_≥î
,

348 .
msg_«mñí
 = (
sockaddr_∆
),

349 .
msg_iov
 = 
iov
,

350 .
msg_iovÀn
 = 
iovÀn
,

356 
d°
 = 
	`∆msg_gë_d°
(
msg
);

357 i‡(
d°
->
∆_Ámûy
 =
AF_NETLINK
)

358 
hdr
.
msg_«me
 = 
d°
;

361 
¸eds
 = 
	`∆msg_gë_¸eds
(
msg
);

362 i‡(
¸eds
 !
NULL
) {

363 
buf
[
	`CMSG_SPACE
((
u¸ed
))];

364 
cmsghdr
 *
cmsg
;

366 
hdr
.
msg_c⁄åﬁ
 = 
buf
;

367 
hdr
.
msg_c⁄åﬁÀn
 = (
buf
);

369 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
hdr
);

370 
cmsg
->
cmsg_Àvñ
 = 
SOL_SOCKET
;

371 
cmsg
->
cmsg_ty≥
 = 
SCM_CREDENTIALS
;

372 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
u¸ed
));

373 
	`mem˝y
(
	`CMSG_DATA
(
cmsg
), 
¸eds
, (
u¸ed
));

376  
	`∆_£ndmsg
(
sk
, 
msg
, &
hdr
);

377 
	}
}

416 
	$∆_£nd
(
∆_sock
 *
sk
, 
∆_msg
 *
msg
)

418 
∆_cb
 *
cb
 = 
sk
->
s_cb
;

420 i‡(
cb
->
cb_£nd_ow
)

421  
cb
->
	`cb_£nd_ow
(
sk
, 
msg
);

423 
iovec
 
iov
 = {

424 .
iov_ba£
 = (*Ë
	`∆msg_hdr
(
msg
),

425 .
iov_Àn
 = 
	`∆msg_hdr
(
msg
)->
∆msg_Àn
,

428  
	`∆_£nd_iovec
(
sk
, 
msg
, &
iov
, 1);

430 
	}
}

450 
	$∆_com∂ëe_msg
(
∆_sock
 *
sk
, 
∆_msg
 *
msg
)

452 
∆msghdr
 *
∆h
;

454 
∆h
 = 
	`∆msg_hdr
(
msg
);

455 i‡(
∆h
->
∆msg_pid
 =
NL_AUTO_PORT
)

456 
∆h
->
∆msg_pid
 = 
	`∆_sockë_gë_loˇl_p‹t
(
sk
);

458 i‡(
∆h
->
∆msg_£q
 =
NL_AUTO_SEQ
)

459 
∆h
->
∆msg_£q
 = 
sk
->
s_£q_√xt
++;

461 i‡(
msg
->
nm_¥Ÿocﬁ
 == -1)

462 
msg
->
nm_¥Ÿocﬁ
 = 
sk
->
s_¥Ÿo
;

464 
∆h
->
∆msg_Êags
 |
NLM_F_REQUEST
;

466 i‡(!(
sk
->
s_Êags
 & 
NL_NO_AUTO_ACK
))

467 
∆h
->
∆msg_Êags
 |
NLM_F_ACK
;

468 
	}
}

485 
	$∆_£nd_auto
(
∆_sock
 *
sk
, 
∆_msg
 *
msg
)

487 
	`∆_com∂ëe_msg
(
sk
, 
msg
);

489  
	`∆_£nd
(
sk
, 
msg
);

490 
	}
}

517 
	$∆_£nd_sync
(
∆_sock
 *
sk
, 
∆_msg
 *
msg
)

519 
îr
;

521 
îr
 = 
	`∆_£nd_auto
(
sk
, 
msg
);

522 
	`∆msg_‰ì
(
msg
);

523 i‡(
îr
 < 0)

524  
îr
;

526  
	`waô_f‹_ack
(
sk
);

527 
	}
}

549 
	$∆_£nd_sim∂e
(
∆_sock
 *
sk
, 
ty≥
, 
Êags
, *
buf
,

550 
size_t
 
size
)

552 
îr
;

553 
∆_msg
 *
msg
;

555 
msg
 = 
	`∆msg_Æloc_sim∂e
(
ty≥
, 
Êags
);

556 i‡(!
msg
)

557  -
NLE_NOMEM
;

559 i‡(
buf
 && 
size
) {

560 
îr
 = 
	`∆msg_≠≥nd
(
msg
, 
buf
, 
size
, 
NLMSG_ALIGNTO
);

561 i‡(
îr
 < 0)

562 
îrout
;

565 
îr
 = 
	`∆_£nd_auto
(
sk
, 
msg
);

566 
îrout
:

567 
	`∆msg_‰ì
(
msg
);

569  
îr
;

570 
	}
}

625 
	$∆_ªcv
(
∆_sock
 *
sk
, 
sockaddr_∆
 *
∆a
,

626 **
buf
, 
u¸ed
 **
¸eds
)

628 
ssize_t
 
n
;

629 
Êags
 = 0;

630 
∑ge_size
 = 0;

631 
iovec
 
iov
;

632 
msghdr
 
msg
 = {

633 .
msg_«me
 = (*Ë
∆a
,

634 .
msg_«mñí
 = (
sockaddr_∆
),

635 .
msg_iov
 = &
iov
,

636 .
msg_iovÀn
 = 1,

638 
u¸ed
* 
tmp¸eds
 = 
NULL
;

639 
ªtvÆ
 = 0;

641 i‡(!
buf
 || !
∆a
)

642  -
NLE_INVAL
;

644 i‡(
sk
->
s_Êags
 & 
NL_MSG_PEEK
)

645 
Êags
 |
MSG_PEEK
 | 
MSG_TRUNC
;

647 i‡(
∑ge_size
 == 0)

648 
∑ge_size
 = 
	`gë∑gesize
() * 4;

650 
iov
.
iov_Àn
 = 
sk
->
s_bufsize
 ? : 
∑ge_size
;

651 
iov
.
iov_ba£
 = 
	`mÆloc
(iov.
iov_Àn
);

653 i‡(!
iov
.
iov_ba£
) {

654 
ªtvÆ
 = -
NLE_NOMEM
;

655 
ab‹t
;

658 i‡(
¸eds
 && (
sk
->
s_Êags
 & 
NL_SOCK_PASSCRED
)) {

659 
msg
.
msg_c⁄åﬁÀn
 = 
	`CMSG_SPACE
((
u¸ed
));

660 
msg
.
msg_c⁄åﬁ
 = 
	`mÆloc
(msg.
msg_c⁄åﬁÀn
);

661 i‡(!
msg
.
msg_c⁄åﬁ
) {

662 
ªtvÆ
 = -
NLE_NOMEM
;

663 
ab‹t
;

666 
ªåy
:

668 
n
 = 
	`ªcvmsg
(
sk
->
s_fd
, &
msg
, 
Êags
);

669 i‡(!
n
) {

670 
ªtvÆ
 = 0;

671 
ab‹t
;

673 i‡(
n
 < 0) {

674 i‡(
î∫o
 =
EINTR
) {

675 
	`NL_DBG
(3, "recvmsg()Ñeturned EINTR,Ñetrying\n");

676 
ªåy
;

678 
ªtvÆ
 = -
	`∆_sy£º2∆îr
(
î∫o
);

679 
ab‹t
;

682 i‡(
msg
.
msg_Êags
 & 
MSG_CTRUNC
) {

683 *
tmp
;

684 
msg
.
msg_c⁄åﬁÀn
 *= 2;

685 
tmp
 = 
	`ªÆloc
(
msg
.
msg_c⁄åﬁ
, msg.
msg_c⁄åﬁÀn
);

686 i‡(!
tmp
) {

687 
ªtvÆ
 = -
NLE_NOMEM
;

688 
ab‹t
;

690 
msg
.
msg_c⁄åﬁ
 = 
tmp
;

691 
ªåy
;

694 i‡(
iov
.
iov_Àn
 < 
n
 || (
msg
.
msg_Êags
 & 
MSG_TRUNC
)) {

695 *
tmp
;

699 
iov
.
iov_Àn
 = 
n
;

700 
tmp
 = 
	`ªÆloc
(
iov
.
iov_ba£
, iov.
iov_Àn
);

701 i‡(!
tmp
) {

702 
ªtvÆ
 = -
NLE_NOMEM
;

703 
ab‹t
;

705 
iov
.
iov_ba£
 = 
tmp
;

706 
Êags
 = 0;

707 
ªåy
;

710 i‡(
Êags
 != 0) {

712 
Êags
 = 0;

713 
ªåy
;

716 i‡(
msg
.
msg_«mñí
 !(
sockaddr_∆
)) {

717 
ªtvÆ
 = -
NLE_NOADDR
;

718 
ab‹t
;

721 i‡(
¸eds
 && (
sk
->
s_Êags
 & 
NL_SOCK_PASSCRED
)) {

722 
cmsghdr
 *
cmsg
;

724 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msg
); cmsg; cmsg = 
	`CMSG_NXTHDR
(&msg, cmsg)) {

725 i‡(
cmsg
->
cmsg_Àvñ
 !
SOL_SOCKET
)

727 i‡(
cmsg
->
cmsg_ty≥
 !
SCM_CREDENTIALS
)

729 
tmp¸eds
 = 
	`mÆloc
((*tmpcreds));

730 i‡(!
tmp¸eds
) {

731 
ªtvÆ
 = -
NLE_NOMEM
;

732 
ab‹t
;

734 
	`mem˝y
(
tmp¸eds
, 
	`CMSG_DATA
(
cmsg
), (*tmpcreds));

739 
ªtvÆ
 = 
n
;

740 
ab‹t
:

741 
	`‰ì
(
msg
.
msg_c⁄åﬁ
);

743 i‡(
ªtvÆ
 <= 0) {

744 
	`‰ì
(
iov
.
iov_ba£
);

745 
iov
.
iov_ba£
 = 
NULL
;

746 
	`‰ì
(
tmp¸eds
);

747 
tmp¸eds
 = 
NULL
;

749 *
buf
 = 
iov
.
iov_ba£
;

751 i‡(
¸eds
)

752 *
¸eds
 = 
tmp¸eds
;

754  
ªtvÆ
;

755 
	}
}

758 
	#NL_CB_CALL
(
cb
, 
ty≥
, 
msg
) \

760 
îr
 = 
	`∆_cb_ˇŒ
(
cb
, 
ty≥
, 
msg
); \

761 
îr
) { \

762 
NL_OK
: \

763 
îr
 = 0; \

765 
NL_SKIP
: \

766 
skù
; \

767 
NL_STOP
: \

768 
°›
; \

770 
out
; \

772 } 0)

	)

775 
	$ªcvmsgs
(
∆_sock
 *
sk
, 
∆_cb
 *
cb
)

777 
n
, 
îr
 = 0, 
mu…ù¨t
 = 0, 
öãºu±ed
 = 0, 
ƒecv
 = 0;

778 *
buf
 = 
NULL
;

779 
∆msghdr
 *
hdr
;

786 
sockaddr_∆
 
∆a
 = {0};

787 
∆_msg
 *
msg
 = 
NULL
;

788 
u¸ed
 *
¸eds
 = 
NULL
;

790 
c⁄töue_ªadög
:

791 
	`NL_DBG
(3, "Aâem±ögÅÿªad from %p\n", 
sk
);

792 i‡(
cb
->
cb_ªcv_ow
)

793 
n
 = 
cb
->
	`cb_ªcv_ow
(
sk
, &
∆a
, &
buf
, &
¸eds
);

795 
n
 = 
	`∆_ªcv
(
sk
, &
∆a
, &
buf
, &
¸eds
);

797 i‡(
n
 <= 0)

798  
n
;

800 
	`NL_DBG
(3, "ªcvmsgs(%p): Ród %d byãs\n", 
sk
, 
n
);

802 
hdr
 = (
∆msghdr
 *Ë
buf
;

803 
	`∆msg_ok
(
hdr
, 
n
)) {

804 
	`NL_DBG
(3, "ªcvmsgs(%p): Pro˚ssög vÆid mesßge...\n", 
sk
);

806 
	`∆msg_‰ì
(
msg
);

807 
msg
 = 
	`∆msg_c⁄vît
(
hdr
);

808 i‡(!
msg
) {

809 
îr
 = -
NLE_NOMEM
;

810 
out
;

813 
	`∆msg_£t_¥Ÿo
(
msg
, 
sk
->
s_¥Ÿo
);

814 
	`∆msg_£t_§c
(
msg
, &
∆a
);

815 i‡(
¸eds
)

816 
	`∆msg_£t_¸eds
(
msg
, 
¸eds
);

818 
ƒecv
++;

822 i‡(
cb
->
cb_£t
[
NL_CB_MSG_IN
])

823 
	`NL_CB_CALL
(
cb
, 
NL_CB_MSG_IN
, 
msg
);

828 i‡(
cb
->
cb_£t
[
NL_CB_SEQ_CHECK
]) {

829 
	`NL_CB_CALL
(
cb
, 
NL_CB_SEQ_CHECK
, 
msg
);

832 } i‡(!(
sk
->
s_Êags
 & 
NL_NO_AUTO_ACK
)) {

833 i‡(
hdr
->
∆msg_£q
 !
sk
->
s_£q_ex≥˘
) {

834 i‡(
cb
->
cb_£t
[
NL_CB_INVALID
])

835 
	`NL_CB_CALL
(
cb
, 
NL_CB_INVALID
, 
msg
);

837 
îr
 = -
NLE_SEQ_MISMATCH
;

838 
out
;

843 i‡(
hdr
->
∆msg_ty≥
 =
NLMSG_DONE
 ||

844 
hdr
->
∆msg_ty≥
 =
NLMSG_ERROR
 ||

845 
hdr
->
∆msg_ty≥
 =
NLMSG_NOOP
 ||

846 
hdr
->
∆msg_ty≥
 =
NLMSG_OVERRUN
) {

849 
sk
->
s_£q_ex≥˘
++;

850 
	`NL_DBG
(3, "recvmsgs(%p): IncreasedÉxpected " \

852 
sk
, sk->
s_£q_ex≥˘
);

855 i‡(
hdr
->
∆msg_Êags
 & 
NLM_F_MULTI
)

856 
mu…ù¨t
 = 1;

858 i‡(
hdr
->
∆msg_Êags
 & 
NLM_F_DUMP_INTR
) {

859 i‡(
cb
->
cb_£t
[
NL_CB_DUMP_INTR
])

860 
	`NL_CB_CALL
(
cb
, 
NL_CB_DUMP_INTR
, 
msg
);

867 
öãºu±ed
 = 1;

872 i‡(
hdr
->
∆msg_Êags
 & 
NLM_F_ACK
) {

873 i‡(
cb
->
cb_£t
[
NL_CB_SEND_ACK
])

874 
	`NL_CB_CALL
(
cb
, 
NL_CB_SEND_ACK
, 
msg
);

884 i‡(
hdr
->
∆msg_ty≥
 =
NLMSG_DONE
) {

885 
mu…ù¨t
 = 0;

886 i‡(
cb
->
cb_£t
[
NL_CB_FINISH
])

887 
	`NL_CB_CALL
(
cb
, 
NL_CB_FINISH
, 
msg
);

894 i‡(
hdr
->
∆msg_ty≥
 =
NLMSG_NOOP
) {

895 i‡(
cb
->
cb_£t
[
NL_CB_SKIPPED
])

896 
	`NL_CB_CALL
(
cb
, 
NL_CB_SKIPPED
, 
msg
);

898 
skù
;

904 i‡(
hdr
->
∆msg_ty≥
 =
NLMSG_OVERRUN
) {

905 i‡(
cb
->
cb_£t
[
NL_CB_OVERRUN
])

906 
	`NL_CB_CALL
(
cb
, 
NL_CB_OVERRUN
, 
msg
);

908 
îr
 = -
NLE_MSG_OVERFLOW
;

909 
out
;

914 i‡(
hdr
->
∆msg_ty≥
 =
NLMSG_ERROR
) {

915 
∆msgîr
 *
e
 = 
	`∆msg_d©a
(
hdr
);

917 i‡(
hdr
->
∆msg_Àn
 < 
	`∆msg_size
((*
e
))) {

922 i‡(
cb
->
cb_£t
[
NL_CB_INVALID
])

923 
	`NL_CB_CALL
(
cb
, 
NL_CB_INVALID
, 
msg
);

925 
îr
 = -
NLE_MSG_TRUNC
;

926 
out
;

928 } i‡(
e
->
îr‹
) {

930 i‡(
cb
->
cb_îr
) {

931 
îr
 = 
cb
->
	`cb_îr
(&
∆a
, 
e
,

932 
cb
->
cb_îr_¨g
);

933 i‡(
îr
 < 0)

934 
out
;

935 i‡(
îr
 =
NL_SKIP
)

936 
skù
;

937 i‡(
îr
 =
NL_STOP
) {

938 
îr
 = -
	`∆_sy£º2∆îr
(
e
->
îr‹
);

939 
out
;

942 
îr
 = -
	`∆_sy£º2∆îr
(
e
->
îr‹
);

943 
out
;

945 } i‡(
cb
->
cb_£t
[
NL_CB_ACK
])

946 
	`NL_CB_CALL
(
cb
, 
NL_CB_ACK
, 
msg
);

951 i‡(
cb
->
cb_£t
[
NL_CB_VALID
])

952 
	`NL_CB_CALL
(
cb
, 
NL_CB_VALID
, 
msg
);

954 
skù
:

955 
îr
 = 0;

956 
hdr
 = 
	`∆msg_√xt
(hdr, &
n
);

959 
	`∆msg_‰ì
(
msg
);

960 
	`‰ì
(
buf
);

961 
	`‰ì
(
¸eds
);

962 
buf
 = 
NULL
;

963 
msg
 = 
NULL
;

964 
¸eds
 = 
NULL
;

966 i‡(
mu…ù¨t
) {

968 
c⁄töue_ªadög
;

970 
°›
:

971 
îr
 = 0;

972 
out
:

973 
	`∆msg_‰ì
(
msg
);

974 
	`‰ì
(
buf
);

975 
	`‰ì
(
¸eds
);

977 i‡(
öãºu±ed
)

978 
îr
 = -
NLE_DUMP_INTR
;

980 i‡(!
îr
)

981 
îr
 = 
ƒecv
;

983  
îr
;

984 
	}
}

998 
	$∆_ªcvmsgs_ªp‹t
(
∆_sock
 *
sk
, 
∆_cb
 *
cb
)

1000 i‡(
cb
->
cb_ªcvmsgs_ow
)

1001  
cb
->
	`cb_ªcvmsgs_ow
(
sk
, cb);

1003  
	`ªcvmsgs
(
sk
, 
cb
);

1004 
	}
}

1023 
	$∆_ªcvmsgs
(
∆_sock
 *
sk
, 
∆_cb
 *
cb
)

1025 
îr
;

1027 i‡((
îr
 = 
	`∆_ªcvmsgs_ªp‹t
(
sk
, 
cb
)) > 0)

1028 
îr
 = 0;

1030  
îr
;

1031 
	}
}

1039 
	$∆_ªcvmsgs_deÁu…
(
∆_sock
 *
sk
)

1041  
	`∆_ªcvmsgs
(
sk
, sk->
s_cb
);

1043 
	}
}

1045 
	$ack_waô_h™dÀr
(
∆_msg
 *
msg
, *
¨g
)

1047  
NL_STOP
;

1048 
	}
}

1058 
	$∆_waô_f‹_ack
(
∆_sock
 *
sk
)

1060 
îr
;

1061 
∆_cb
 *
cb
;

1063 
cb
 = 
	`∆_cb_˛⁄e
(
sk
->
s_cb
);

1064 i‡(
cb
 =
NULL
)

1065  -
NLE_NOMEM
;

1067 
	`∆_cb_£t
(
cb
, 
NL_CB_ACK
, 
NL_CB_CUSTOM
, 
ack_waô_h™dÀr
, 
NULL
);

1068 
îr
 = 
	`∆_ªcvmsgs
(
sk
, 
cb
);

1069 
	`∆_cb_put
(
cb
);

1071  
îr
;

1072 
	}
}

1075 
	spickup_∑øm


1077 (*
	m∑r£r
)(
	m∆_ˇche_›s
 *, 
	msockaddr_∆
 *,

1078 
	m∆msghdr
 *, 
	m∆_∑r£r_∑øm
 *);

1079 
∆_obje˘
 *
	mªsu…
;

1082 
	$__°‹e_™swî
(
∆_obje˘
 *
obj
, 
∆_∑r£r_∑øm
 *
p
)

1084 
pickup_∑øm
 *
µ
 = 
p
->
µ_¨g
;

1089 
	`∆_obje˘_gë
(
obj
);

1090 
µ
->
ªsu…
 = 
obj
;

1093 
	}
}

1095 
	$__pickup_™swî
(
∆_msg
 *
msg
, *
¨g
)

1097 
pickup_∑øm
 *
µ
 = 
¨g
;

1098 
∆_∑r£r_∑øm
 
∑r£_¨g
 = {

1099 .
µ_cb
 = 
__°‹e_™swî
,

1100 .
µ_¨g
 = 
µ
,

1103  
µ
->
	`∑r£r
(
NULL
, &
msg
->
nm_§c
, msg->
nm_∆h
, &
∑r£_¨g
);

1104 
	}
}

1116 
∆_pickup
(
∆_sock
 *
sk
,

1117 (*
∑r£r
)(
∆_ˇche_›s
 *, 
sockaddr_∆
 *,

1118 
∆msghdr
 *, 
∆_∑r£r_∑øm
 *),

1119 
∆_obje˘
 **
ªsu…
)

1121 
∆_cb
 *
cb
;

1122 
îr
;

1123 
pickup_∑øm
 
µ
 = {

1124 .
∑r£r
 =Öarser,

1127 
cb
 = 
	`∆_cb_˛⁄e
(
sk
->
s_cb
);

1128 i‡(
cb
 =
NULL
)

1129  -
NLE_NOMEM
;

1131 
	`∆_cb_£t
(
cb
, 
NL_CB_VALID
, 
NL_CB_CUSTOM
, 
__pickup_™swî
, &
µ
);

1133 
îr
 = 
	`∆_ªcvmsgs
(
sk
, 
cb
);

1134 i‡(
îr
 < 0)

1135 
îrout
;

1137 *
ªsu…
 = 
µ
.result;

1138 
îrout
:

1139 
	`∆_cb_put
(
cb
);

1141  
îr
;

1142 
	}
}

1154 
	$∆_auto_com∂ëe
(
∆_sock
 *
sk
, 
∆_msg
 *
msg
)

1156 
	`∆_com∂ëe_msg
(
sk
, 
msg
);

1157 
	}
}

1162 
	$∆_£nd_auto_com∂ëe
(
∆_sock
 *
sk
, 
∆_msg
 *
msg
)

1164  
	`∆_£nd_auto
(
sk
, 
msg
);

1165 
	}
}

	@mylibnl/libnl-3.2.25/lib/object.c

30 
	~<√éök-¥iv©e/√éök.h
>

31 
	~<√éök/√éök.h
>

32 
	~<√éök/ˇche.h
>

33 
	~<√éök/obje˘.h
>

34 
	~<√éök/utûs.h
>

36 
ölöe
 
∆_obje˘_›s
 *
	$obj_›s
(
∆_obje˘
 *
obj
)

38 i‡(!
obj
->
˚_›s
)

39 
	`BUG
();

41  
obj
->
˚_›s
;

42 
	}
}

54 
∆_obje˘
 *
	$∆_obje˘_Æloc
(
∆_obje˘_›s
 *
›s
)

56 
∆_obje˘
 *
√w
;

58 i‡(
›s
->
oo_size
 < (*
√w
))

59 
	`BUG
();

61 
√w
 = 
	`ˇŒoc
(1, 
›s
->
oo_size
);

62 i‡(!
√w
)

63  
NULL
;

65 
√w
->
˚_ªf˙t
 = 1;

66 
	`∆_öô_li°_hód
(&
√w
->
˚_li°
);

68 
√w
->
˚_›s
 = 
›s
;

69 i‡(
›s
->
oo_c⁄°ru˘‹
)

70 
›s
->
	`oo_c⁄°ru˘‹
(
√w
);

72 
	`NL_DBG
(4, "AŒoˇãdÇew obje˘ %p\n", 
√w
);

74  
√w
;

75 
	}
}

84 
	$∆_obje˘_Æloc_«me
(c⁄° *
köd
, 
∆_obje˘
 **
ªsu…
)

86 
∆_ˇche_›s
 *
›s
;

88 
›s
 = 
	`∆_ˇche_›s_lookup_ß„
(
köd
);

89 i‡(!
›s
)

90  -
NLE_OPNOTSUPP
;

92 *
ªsu…
 = 
	`∆_obje˘_Æloc
(
›s
->
co_obj_›s
);

93 
	`∆_ˇche_›s_put
(
›s
);

94 i‡(!*
ªsu…
)

95  -
NLE_NOMEM
;

98 
	}
}

100 
	s∆_dîived_obje˘
 {

101 
NLHDR_COMMON


102 
	md©a
;

110 
∆_obje˘
 *
	$∆_obje˘_˛⁄e
(
∆_obje˘
 *
obj
)

112 
∆_obje˘
 *
√w
;

113 
∆_obje˘_›s
 *
›s
;

114 
doff
 = 
	`off£tof
(
∆_dîived_obje˘
, 
d©a
);

115 
size
;

117 i‡(!
obj
)

118  
NULL
;

120 
›s
 = 
	`obj_›s
(
obj
);

121 
√w
 = 
	`∆_obje˘_Æloc
(
›s
);

122 i‡(!
√w
)

123  
NULL
;

125 
size
 = 
›s
->
oo_size
 - 
doff
;

126 i‡(
size
 < 0)

127 
	`BUG
();

129 
√w
->
˚_›s
 = 
obj
->ce_ops;

130 
√w
->
˚_msgty≥
 = 
obj
->ce_msgtype;

131 
√w
->
˚_mask
 = 
obj
->ce_mask;

133 i‡(
size
)

134 
	`mem˝y
((*)
√w
 + 
doff
, (*)
obj
 + doff, 
size
);

136 i‡(
›s
->
oo_˛⁄e
) {

137 i‡(
›s
->
	`oo_˛⁄e
(
√w
, 
obj
) < 0) {

138 
	`∆_obje˘_‰ì
(
√w
);

139  
NULL
;

141 } i‡(
size
 && 
›s
->
oo_‰ì_d©a
)

142 
	`BUG
();

144  
√w
;

145 
	}
}

154 
	$∆_obje˘_upd©e
(
∆_obje˘
 *
d°
, ∆_obje˘ *
§c
)

156 
∆_obje˘_›s
 *
›s
 = 
	`obj_›s
(
d°
);

158 i‡(
›s
->
oo_upd©e
)

159  
›s
->
	`oo_upd©e
(
d°
, 
§c
);

161  -
NLE_OPNOTSUPP
;

162 
	}
}

170 
	$∆_obje˘_‰ì
(
∆_obje˘
 *
obj
)

172 
∆_obje˘_›s
 *
›s
;

174 i‡(!
obj
)

177 
›s
 = 
	`obj_›s
(
obj
);

179 i‡(
obj
->
˚_ªf˙t
 > 0)

180 
	`NL_DBG
(1, "Warning: Freeing object in use...\n");

182 i‡(
obj
->
˚_ˇche
)

183 
	`∆_ˇche_ªmove
(
obj
);

185 i‡(
›s
->
oo_‰ì_d©a
)

186 
›s
->
	`oo_‰ì_d©a
(
obj
);

188 
	`NL_DBG
(4, "Fªed obje˘ %p\n", 
obj
);

190 
	`‰ì
(
obj
);

191 
	}
}

204 
	$∆_obje˘_gë
(
∆_obje˘
 *
obj
)

206 
obj
->
˚_ªf˙t
++;

207 
	`NL_DBG
(4, "NewÑeferenceÅo object %p,Åotal %d\n",

208 
obj
, obj->
˚_ªf˙t
);

209 
	}
}

215 
	$∆_obje˘_put
(
∆_obje˘
 *
obj
)

217 i‡(!
obj
)

220 
obj
->
˚_ªf˙t
--;

221 
	`NL_DBG
(4, "Returned objectÑeference %p, %dÑemaining\n",

222 
obj
, obj->
˚_ªf˙t
);

224 i‡(
obj
->
˚_ªf˙t
 < 0)

225 
	`BUG
();

227 i‡(
obj
->
˚_ªf˙t
 <= 0)

228 
	`∆_obje˘_‰ì
(
obj
);

229 
	}
}

236 
	$∆_obje˘_sh¨ed
(
∆_obje˘
 *
obj
)

238  
obj
->
˚_ªf˙t
 > 1;

239 
	}
}

252 
	$∆_obje˘_m¨k
(
∆_obje˘
 *
obj
)

254 
obj
->
˚_Êags
 |
NL_OBJ_MARK
;

255 
	}
}

261 
	$∆_obje˘_unm¨k
(
∆_obje˘
 *
obj
)

263 
obj
->
˚_Êags
 &~
NL_OBJ_MARK
;

264 
	}
}

271 
	$∆_obje˘_is_m¨ked
(
∆_obje˘
 *
obj
)

273  (
obj
->
˚_Êags
 & 
NL_OBJ_MARK
);

274 
	}
}

288 
	$∆_obje˘_dump
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
∑øms
)

290 i‡(
∑øms
->
dp_buf
)

291 
	`mem£t
(
∑øms
->
dp_buf
, 0,Ö¨ams->
dp_buÊí
);

293 
	`dump_‰om_›s
(
obj
, 
∑øms
);

294 
	}
}

296 
	$∆_obje˘_dump_buf
(
∆_obje˘
 *
obj
, *
buf
, 
size_t
 
Àn
)

298 
∆_dump_∑øms
 
dp
 = {

299 .
dp_buf
 = 
buf
,

300 .
dp_buÊí
 = 
Àn
,

303  
	`∆_obje˘_dump
(
obj
, &
dp
);

304 
	}
}

313 
	$∆_obje˘_idítiˇl
(
∆_obje˘
 *
a
, ∆_obje˘ *
b
)

315 
∆_obje˘_›s
 *
›s
 = 
	`obj_›s
(
a
);

316 
uöt32_t
 
ªq_©ås
;

319 i‡(
›s
 !
	`obj_›s
(
b
))

322 i‡(
›s
->
oo_id_©ås_gë
) {

323 
ªq_©ås_a
 = 
›s
->
	`oo_id_©ås_gë
(
a
);

324 
ªq_©ås_b
 = 
›s
->
	`oo_id_©ås_gë
(
b
);

325 i‡(
ªq_©ås_a
 !
ªq_©ås_b
)

327 
ªq_©ås
 = 
ªq_©ås_a
;

328 } i‡(
›s
->
oo_id_©ås
) {

329 
ªq_©ås
 = 
›s
->
oo_id_©ås
;

331 
ªq_©ås
 = 0xFFFFFFFF;

333 i‡(
ªq_©ås
 == 0xFFFFFFFF)

334 
ªq_©ås
 = 
a
->
˚_mask
 & 
b
->ce_mask;

338 i‡((
a
->
˚_mask
 & 
ªq_©ås
) !=Ñeq_attrs ||

339 (
b
->
˚_mask
 & 
ªq_©ås
) !=Ñeq_attrs)

343 i‡(
›s
->
oo_com∑ª
 =
NULL
)

346  !(
›s
->
	`oo_com∑ª
(
a
, 
b
, 
ªq_©ås
, 0));

347 
	}
}

361 
uöt32_t
 
	$∆_obje˘_diff
(
∆_obje˘
 *
a
, ∆_obje˘ *
b
)

363 
∆_obje˘_›s
 *
›s
 = 
	`obj_›s
(
a
);

365 i‡(
›s
 !
	`obj_›s
(
b
Ë|| ops->
oo_com∑ª
 =
NULL
)

366  
UINT_MAX
;

368  
›s
->
	`oo_com∑ª
(
a
, 
b
, ~0, 0);

369 
	}
}

380 
	$∆_obje˘_m©ch_fûãr
(
∆_obje˘
 *
obj
, ∆_obje˘ *
fûãr
)

382 
∆_obje˘_›s
 *
›s
 = 
	`obj_›s
(
obj
);

384 i‡(
›s
 !
	`obj_›s
(
fûãr
Ë|| ops->
oo_com∑ª
 =
NULL
)

387  !(
›s
->
	`oo_com∑ª
(
obj
, 
fûãr
, fûãr->
˚_mask
,

388 
LOOSE_COMPARISON
));

389 
	}
}

403 *
	$∆_obje˘_©ås2°r
(
∆_obje˘
 *
obj
, 
uöt32_t
 
©ås
,

404 *
buf
, 
size_t
 
Àn
)

406 
∆_obje˘_›s
 *
›s
 = 
	`obj_›s
(
obj
);

408 i‡(
›s
->
oo_©ås2°r
 !
NULL
)

409  
›s
->
	`oo_©ås2°r
(
©ås
, 
buf
, 
Àn
);

411 
	`mem£t
(
buf
, 0, 
Àn
);

412  
buf
;

414 
	}
}

424 *
	$∆_obje˘_©å_li°
(
∆_obje˘
 *
obj
, *
buf
, 
size_t
 
Àn
)

426  
	`∆_obje˘_©ås2°r
(
obj
, obj->
˚_mask
, 
buf
, 
Àn
);

427 
	}
}

437 
	$∆_obje˘_keygí
(
∆_obje˘
 *
obj
, 
uöt32_t
 *
hashkey
,

438 
uöt32_t
 
hashtbl_sz
)

440 
∆_obje˘_›s
 *
›s
 = 
	`obj_›s
(
obj
);

442 i‡(
›s
->
oo_keygí
)

443 
›s
->
	`oo_keygí
(
obj
, 
hashkey
, 
hashtbl_sz
);

445 *
hashkey
 = 0;

448 
	}
}

463 
	$∆_obje˘_gë_ªf˙t
(
∆_obje˘
 *
obj
)

465  
obj
->
˚_ªf˙t
;

466 
	}
}

477 
∆_ˇche
 *
	$∆_obje˘_gë_ˇche
(
∆_obje˘
 *
obj
)

479  
obj
->
˚_ˇche
;

480 
	}
}

490 c⁄° *
	$∆_obje˘_gë_ty≥
(c⁄° 
∆_obje˘
 *
obj
)

492 i‡(!
obj
->
˚_›s
)

493 
	`BUG
();

495  
obj
->
˚_›s
->
oo_«me
;

496 
	}
}

504 
	$∆_obje˘_gë_msgty≥
(c⁄° 
∆_obje˘
 *
obj
)

506  
obj
->
˚_msgty≥
;

507 
	}
}

515 
∆_obje˘_›s
 *
	$∆_obje˘_gë_›s
(c⁄° 
∆_obje˘
 *
obj
)

517  
obj
->
˚_›s
;

518 
	}
}

526 
uöt32_t
 
	$∆_obje˘_gë_id_©ås
(
∆_obje˘
 *
obj
)

528 
∆_obje˘_›s
 *
›s
 = 
	`obj_›s
(
obj
);

529 
uöt32_t
 
id_©ås
;

531 i‡(!
›s
)

534 i‡(
›s
->
oo_id_©ås_gë
)

535 
id_©ås
 = 
›s
->
	`oo_id_©ås_gë
(
obj
);

537 
id_©ås
 = 
›s
->
oo_id_©ås
;

539  
id_©ås
;

540 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/act.c

18 
	~<√éök-¥iv©e/√éök.h
>

19 
	~<√éök-¥iv©e/tc.h
>

20 
	~<√éök/√éök.h
>

21 
	~<√éök/utûs.h
>

22 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

23 
	~<√éök/rouã/lök.h
>

26 
∆_obje˘_›s
 
	ga˘_obj_›s
;

27 
∆_ˇche_›s
 
	gπ∆_a˘_›s
;

29 
	$π∆_a˘_≠≥nd
(
π∆_a˘
 **
hód
, π∆_a˘ *
√w
)

31 
π∆_a˘
 *
p_a˘
;

32 
cou¡
 = 1;

34 i‡(*
hód
 =
NULL
) {

35 *
hód
 = 
√w
;

39 
p_a˘
 = *
hód
;

40 
p_a˘
->
a_√xt
) {

41 ++
cou¡
;

42 
p_a˘
 =Ö_a˘->
a_√xt
;

45 i‡(
cou¡
 > 
TCA_ACT_MAX_PRIO
)

46  -
NLE_RANGE
;

48 
p_a˘
->
a_√xt
 = 
√w
;

50 
	}
}

52 
	$π∆_a˘_ªmove
(
π∆_a˘
 **
hód
, π∆_a˘ *
a˘
)

54 
π∆_a˘
 *
a
, **
≠
;

56 
≠
 = 
hód
; (
a
 = *≠Ë!
NULL
;á∞&a->
a_√xt
)

57 i‡(
a
 =
a˘
)

59 i‡(
a
) {

60 *
≠
 = 
a
->
a_√xt
;

61 
a
->
a_√xt
 = 
NULL
;

65  -
NLE_OBJ_NOTFOUND
;

66 
	}
}

68 
	$π∆_a˘_fûl_⁄e
(
∆_msg
 *
msg
, 
π∆_a˘
 *
a˘
, 
‹dî
)

70 
π∆_tc
 *
tc
 = 
	`TC_CAST
(
a˘
);

71 
π∆_tc_›s
 *
›s
;

72 
∆©å
 *
√°
;

73 
îr
 = -
NLE_NOMEM
;

75 
√°
 = 
	`∆a_√°_°¨t
(
msg
, 
‹dî
);

76 i‡(!
√°
)

77 
∆a_put_Áûuª
;

79 i‡(
tc
->
˚_mask
 & 
TCA_ATTR_KIND
)

80 
	`NLA_PUT_STRING
(
msg
, 
TCA_ACT_KIND
, 
tc
->
tc_köd
);

82 
›s
 = 
	`π∆_tc_gë_›s
(
tc
);

83 i‡(
›s
 && (›s->
to_msg_fûl
 || ops->
to_msg_fûl_øw
)) {

84 
∆©å
 *
›ts
;

85 *
d©a
 = 
	`π∆_tc_d©a
(
tc
);

87 i‡(
›s
->
to_msg_fûl
) {

88 i‡(!(
›ts
 = 
	`∆a_√°_°¨t
(
msg
, 
TCA_ACT_OPTIONS
)))

89 
∆a_put_Áûuª
;

91 i‡((
îr
 = 
›s
->
	`to_msg_fûl
(
tc
, 
d©a
, 
msg
)) < 0)

92 
∆a_put_Áûuª
;

94 
	`∆a_√°_íd
(
msg
, 
›ts
);

95 } i‡((
îr
 = 
›s
->
	`to_msg_fûl_øw
(
tc
, 
d©a
, 
msg
)) < 0)

96 
∆a_put_Áûuª
;

98 
	`∆a_√°_íd
(
msg
, 
√°
);

101 
∆a_put_Áûuª
:

102  
îr
;

103 
	}
}

105 
	$π∆_a˘_fûl
(
∆_msg
 *
msg
, 
©åty≥
, 
π∆_a˘
 *
a˘
)

107 
π∆_a˘
 *
p_a˘
 = 
a˘
;

108 
∆©å
 *
√°
;

109 
îr
, 
‹dî
 = 0;

111 
√°
 = 
	`∆a_√°_°¨t
(
msg
, 
©åty≥
);

112 i‡(!
√°
)

113  -
NLE_MSGSIZE
;

115 
p_a˘
) {

116 
îr
 = 
	`π∆_a˘_fûl_⁄e
(
msg
, 
p_a˘
, ++
‹dî
);

117 i‡(
îr
)

118  
îr
;

119 
p_a˘
 =Ö_a˘->
a_√xt
;

122 
	`∆a_√°_íd
(
msg
, 
√°
);

124 
	}
}

126 
	$π∆_a˘_msg_buûd
(
π∆_a˘
 *
a˘
, 
ty≥
, 
Êags
,

127 
∆_msg
 **
ªsu…
)

129 
∆_msg
 *
msg
;

130 
tˇmsg
 
tˇhdr
 = {

131 .
tˇ_Ámûy
 = 
AF_UNSPEC
,

133 
îr
 = -
NLE_MSGSIZE
;

135 
msg
 = 
	`∆msg_Æloc_sim∂e
(
ty≥
, 
Êags
);

136 i‡(!
msg
)

137  -
NLE_NOMEM
;

139 i‡(
	`∆msg_≠≥nd
(
msg
, &
tˇhdr
, —ˇhdr), 
NLMSG_ALIGNTO
) < 0)

140 
∆a_put_Áûuª
;

142 
îr
 = 
	`π∆_a˘_fûl
(
msg
, 
TCA_ACT_TAB
, 
a˘
);

143 i‡(
îr
 < 0)

144 
∆a_put_Áûuª
;

146 *
ªsu…
 = 
msg
;

149 
∆a_put_Áûuª
:

150 
	`∆msg_‰ì
(
msg
);

151  
îr
;

152 
	}
}

154 
	$a˘_buûd
(
π∆_a˘
 *
a˘
, 
ty≥
, 
Êags
,

155 
∆_msg
 **
ªsu…
)

157 
îr
;

159 
îr
 = 
	`π∆_a˘_msg_buûd
(
a˘
, 
ty≥
, 
Êags
, 
ªsu…
);

160 i‡(
îr
 < 0)

161  
îr
;

163 
	}
}

170 
π∆_a˘
 *
	$π∆_a˘_Æloc
()

172 
π∆_tc
 *
tc
;

174 
tc
 = 
	`TC_CAST
(
	`∆_obje˘_Æloc
(&
a˘_obj_›s
));

175 i‡(
tc
)

176 
tc
->
tc_ty≥
 = 
RTNL_TC_TYPE_ACT
;

178  (
π∆_a˘
 *Ë
tc
;

179 
	}
}

181 
	$π∆_a˘_gë
(
π∆_a˘
 *
a˘
)

183 
	`∆_obje˘_gë
(
	`OBJ_CAST
(
a˘
));

184 
	}
}

186 
	$π∆_a˘_put
(
π∆_a˘
 *
a˘
)

188 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
a˘
);

189 
	}
}

212 
	$π∆_a˘_buûd_add_ªque°
(
π∆_a˘
 *
a˘
, 
Êags
,

213 
∆_msg
 **
ªsu…
)

215  
	`a˘_buûd
(
a˘
, 
RTM_NEWACTION
, 
Êags
, 
ªsu…
);

216 
	}
}

251 
	$π∆_a˘_add
(
∆_sock
 *
sk
, 
π∆_a˘
 *
a˘
, 
Êags
)

253 
∆_msg
 *
msg
;

254 
îr
;

256 i‡((
îr
 = 
	`π∆_a˘_buûd_add_ªque°
(
a˘
, 
Êags
, &
msg
)) < 0)

257  
îr
;

259  
	`∆_£nd_sync
(
sk
, 
msg
);

260 
	}
}

275 
	$π∆_a˘_buûd_ch™ge_ªque°
(
π∆_a˘
 *
a˘
, 
Êags
,

276 
∆_msg
 **
ªsu…
)

278  
	`a˘_buûd
(
a˘
, 
RTM_NEWACTION
, 
NLM_F_REPLACE
 | 
Êags
, 
ªsu…
);

279 
	}
}

293 
	$π∆_a˘_ch™ge
(
∆_sock
 *
sk
, 
π∆_a˘
 *
a˘
, 
Êags
)

295 
∆_msg
 *
msg
;

296 
îr
;

298 i‡((
îr
 = 
	`π∆_a˘_buûd_ch™ge_ªque°
(
a˘
, 
Êags
, &
msg
)) < 0)

299  
îr
;

301  
	`∆_£nd_sync
(
sk
, 
msg
);

302 
	}
}

318 
	$π∆_a˘_buûd_dñëe_ªque°
(
π∆_a˘
 *
a˘
, 
Êags
,

319 
∆_msg
 **
ªsu…
)

321  
	`a˘_buûd
(
a˘
, 
RTM_DELACTION
, 
Êags
, 
ªsu…
);

322 
	}
}

355 
	$π∆_a˘_dñëe
(
∆_sock
 *
sk
, 
π∆_a˘
 *
a˘
, 
Êags
)

357 
∆_msg
 *
msg
;

358 
îr
;

360 i‡((
îr
 = 
	`π∆_a˘_buûd_dñëe_ªque°
(
a˘
, 
Êags
, &
msg
)) < 0)

361  
îr
;

363  
	`∆_£nd_sync
(
sk
, 
msg
);

364 
	}
}

368 
	$a˘_dump_löe
(
π∆_tc
 *
tc
, 
∆_dump_∑øms
 *
p
)

370 
	}
}

372 
	$π∆_a˘_put_Æl
(
π∆_a˘
 **
hód
)

374 
π∆_a˘
 *
cuº
, *
√xt
;

376 
cuº
 = *
hód
;

377 
cuº
) {

378 
√xt
 = 
cuº
->
a_√xt
;

379 
	`π∆_a˘_put
(
cuº
);

380 
cuº
 = 
√xt
;

382 *
hód
 = 
NULL
;

383 
	}
}

385 
	$π∆_a˘_∑r£
(
π∆_a˘
 **
hód
, 
∆©å
 *
tb
)

387 
π∆_a˘
 *
a˘
;

388 
π∆_tc_›s
 *
›s
;

389 
∆©å
 *
tb2
[
TCA_ACT_MAX
 + 1];

390 
∆©å
 *
∆a
[
TCA_ACT_MAX_PRIO
 + 1];

391 
köd
[
TCKINDSIZ
];

392 
îr
, 
i
;

394 
îr
 = 
	`∆a_∑r£
(
∆a
, 
TCA_ACT_MAX_PRIO
, 
	`∆a_d©a
(
tb
),

395 
	`NLMSG_ALIGN
(
	`∆a_Àn
(
tb
)), 
NULL
);

396 i‡(
îr
 < 0)

397  
îr
;

399 
i
 = 0; i < 
TCA_ACT_MAX_PRIO
; i++) {

400 
π∆_tc
 *
tc
;

402 i‡(
∆a
[
i
] =
NULL
)

405 
a˘
 = 
	`π∆_a˘_Æloc
();

406 i‡(!
a˘
) {

407 
îr
 = -
NLE_NOMEM
;

408 
îr_‰ì
;

410 
tc
 = 
	`TC_CAST
(
a˘
);

411 
îr
 = 
	`∆a_∑r£
(
tb2
, 
TCA_ACT_MAX
, 
	`∆a_d©a
(
∆a
[
i
]),

412 
	`∆a_Àn
(
∆a
[
i
]), 
NULL
);

413 i‡(
îr
 < 0)

414 
îr_‰ì
;

416 i‡(
tb2
[
TCA_ACT_KIND
] =
NULL
) {

417 
îr
 = -
NLE_MISSING_ATTR
;

418 
îr_‰ì
;

421 
	`∆a_°æ˝y
(
köd
, 
tb2
[
TCA_ACT_KIND
], (kind));

422 
	`π∆_tc_£t_köd
(
tc
, 
köd
);

424 i‡(
tb2
[
TCA_ACT_OPTIONS
]) {

425 
tc
->
tc_›ts
 = 
	`∆_d©a_Æloc_©å
(
tb2
[
TCA_ACT_OPTIONS
]);

426 i‡(!
tc
->
tc_›ts
) {

427 
îr
 = -
NLE_NOMEM
;

428 
îr_‰ì
;

430 
tc
->
˚_mask
 |
TCA_ATTR_OPTS
;

433 
›s
 = 
	`π∆_tc_gë_›s
(
tc
);

434 i‡(
›s
 && ops->
to_msg_∑r£r
) {

435 *
d©a
 = 
	`π∆_tc_d©a
(
tc
);

437 i‡(!
d©a
) {

438 
îr
 = -
NLE_NOMEM
;

439 
îr_‰ì
;

442 
îr
 = 
›s
->
	`to_msg_∑r£r
(
tc
, 
d©a
);

443 i‡(
îr
 < 0)

444 
îr_‰ì
;

446 
îr
 = 
	`π∆_a˘_≠≥nd
(
hód
, 
a˘
);

447 i‡(
îr
 < 0)

448 
îr_‰ì
;

452 
îr_‰ì
:

453 
	`π∆_a˘_put
 (
a˘
);

454 
	`π∆_a˘_put_Æl
(
hód
);

456  
îr
;

457 
	}
}

459 
	$π∆_a˘_msg_∑r£
(
∆msghdr
 *
n
, 
π∆_a˘
 **
a˘
)

461 
π∆_tc
 *
tc
 = 
	`TC_CAST
(*
a˘
);

462 
∆_ˇche
 *
lök_ˇche
;

463 
∆©å
 *
tb
[
TCAA_MAX
 + 1];

464 
tˇmsg
 *
tm
;

465 
îr
;

467 
tc
->
˚_msgty≥
 = 
n
->
∆msg_ty≥
;

469 
îr
 = 
	`∆msg_∑r£
(
n
, (*
tm
), 
tb
, 
TCAA_MAX
, 
NULL
);

470 i‡(
îr
 < 0)

471  
îr
;

473 
tm
 = 
	`∆msg_d©a
(
n
);

474 
tc
->
tc_Ámûy
 = 
tm
->
tˇ_Ámûy
;

476 i‡(
tb
[
TCA_ACT_TAB
] =
NULL
)

477  -
NLE_MISSING_ATTR
;

479 
îr
 = 
	`π∆_a˘_∑r£
(
a˘
, 
tb
[
TCA_ACT_TAB
]);

480 i‡(
îr
 < 0)

481  
îr
;

483 i‡((
lök_ˇche
 = 
	`__∆_ˇche_mngt_ªquúe
("route/link"))) {

484 
π∆_lök
 *
lök
;

486 i‡((
lök
 = 
	`π∆_lök_gë
(
lök_ˇche
, 
tc
->
tc_ifödex
))) {

487 
	`π∆_tc_£t_lök
(
tc
, 
lök
);

490 
	`π∆_lök_put
(
lök
);

495 
	}
}

496 
	$a˘_msg_∑r£r
(
∆_ˇche_›s
 *
›s
, 
sockaddr_∆
 *
who
,

497 
∆msghdr
 *
∆h
, 
∆_∑r£r_∑øm
 *
µ
)

499 
π∆_a˘
 *
a˘
, *
p_a˘
;

500 
îr
;

502 i‡(!(
a˘
 = 
	`π∆_a˘_Æloc
()))

503  -
NLE_NOMEM
;

505 i‡((
îr
 = 
	`π∆_a˘_msg_∑r£
(
∆h
, &
a˘
)) < 0)

506 
îrout
;

508 
p_a˘
 = 
a˘
;

509 
p_a˘
) {

510 
îr
 = 
µ
->
	`µ_cb
(
	`OBJ_CAST
(
a˘
),Öp);

511 i‡(
îr
)

513 
p_a˘
 =Ö_a˘->
a_√xt
;

515 
îrout
:

516 
	`π∆_a˘_put
(
a˘
);

518  
îr
;

519 
	}
}

521 
	$a˘_ªque°_upd©e
(
∆_ˇche
 *
ˇche
, 
∆_sock
 *
sk
)

523 
tˇmsg
 
tˇhdr
 = {

524 .
tˇ_Ámûy
 = 
AF_UNSPEC
,

527  
	`∆_£nd_sim∂e
(
sk
, 
RTM_GETACTION
, 
NLM_F_DUMP
, &
tˇhdr
,

528 (
tˇhdr
));

529 
	}
}

531 
π∆_tc_ty≥_›s
 
	ga˘_›s
 = {

532 .
â_ty≥
 = 
RTNL_TC_TYPE_ACT
,

533 .
	gâ_dump_¥efix
 = "act",

534 .
	gâ_dump
 = {

535 [
NL_DUMP_LINE
] = 
a˘_dump_löe
,

539 
∆_ˇche_›s
 
	gπ∆_a˘_›s
 = {

540 .
co_«me
 = "route/act",

541 .
	gco_hdrsize
 = (
tcmsg
),

542 .
	gco_msgty≥s
 = {

543 { 
RTM_NEWACTION
, 
NL_ACT_NEW
, "new" },

544 { 
RTM_DELACTION
, 
NL_ACT_DEL
, "del" },

545 { 
RTM_GETACTION
, 
NL_ACT_GET
, "get" },

546 
END_OF_MSGTYPES_LIST
,

548 .
	gco_¥Ÿocﬁ
 = 
NETLINK_ROUTE
,

549 .
	gco_ªque°_upd©e
 = 
a˘_ªque°_upd©e
,

550 .
	gco_msg_∑r£r
 = 
a˘_msg_∑r£r
,

551 .
	gco_obj_›s
 = &
a˘_obj_›s
,

554 
∆_obje˘_›s
 
	ga˘_obj_›s
 = {

555 .
oo_«me
 = "route/act",

556 .
	goo_size
 = (
π∆_a˘
),

557 .
	goo_‰ì_d©a
 = 
π∆_tc_‰ì_d©a
,

558 .
	goo_˛⁄e
 = 
π∆_tc_˛⁄e
,

559 .
	goo_dump
 = {

560 [
NL_DUMP_LINE
] = 
π∆_tc_dump_löe
,

561 [
NL_DUMP_DETAILS
] = 
π∆_tc_dump_dëaûs
,

562 [
NL_DUMP_STATS
] = 
π∆_tc_dump_°©s
,

564 .
	goo_com∑ª
 = 
π∆_tc_com∑ª
,

565 .
	goo_id_©ås
 = (
TCA_ATTR_IFINDEX
 | 
TCA_ATTR_HANDLE
),

568 
__öô
 
	$a˘_öô
()

570 
	`π∆_tc_ty≥_ªgi°î
(&
a˘_›s
);

571 
	`∆_ˇche_mngt_ªgi°î
(&
π∆_a˘_›s
);

572 
	}
}

574 
__exô
 
	$a˘_exô
()

576 
	`∆_ˇche_mngt_uƒegi°î
(&
π∆_a˘_›s
);

577 
	`π∆_tc_ty≥_uƒegi°î
(&
a˘_›s
);

578 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/act/mirred.c

19 
	~<√éök-¥iv©e/√éök.h
>

20 
	~<√éök-¥iv©e/tc.h
>

21 
	~<√éök/√éök.h
>

22 
	~<√éök/©å.h
>

23 
	~<√éök/utûs.h
>

24 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

25 
	~<√éök/rouã/a˘/múªd.h
>

27 
∆a_pﬁicy
 
	gmúªd_pﬁicy
[
TCA_MIRRED_MAX
 + 1] = {

28 [
TCA_MIRRED_PARMS
] = { .
möÀn
 = (
tc_múªd
) },

31 
	$múªd_msg_∑r£r
(
π∆_tc
 *
tc
, *
d©a
)

33 
π∆_múªd
 *
u
 = 
d©a
;

34 
∆©å
 *
tb
[
TCA_MIRRED_MAX
 + 1];

35 
îr
;

37 
îr
 = 
	`tˇ_∑r£
(
tb
, 
TCA_MIRRED_MAX
, 
tc
, 
múªd_pﬁicy
);

38 i‡(
îr
 < 0)

39  
îr
;

41 i‡(!
tb
[
TCA_MIRRED_PARMS
])

42  -
NLE_MISSING_ATTR
;

44 
	`∆a_mem˝y
(&
u
->
m_∑rm
, 
tb
[
TCA_MIRRED_PARMS
], (u->m_parm));

46 
	}
}

48 
	$múªd_‰ì_d©a
(
π∆_tc
 *
tc
, *
d©a
)

50 
	}
}

52 
	$múªd_˛⁄e
(*
_d°
, *
_§c
)

54 
π∆_múªd
 *
d°
 = 
_d°
, *
§c
 = 
_§c
;

56 
	`mem˝y
(&
d°
->
m_∑rm
, &
§c
->m_parm, (src->m_parm));

58 
	}
}

60 
	$múªd_dump_löe
(
π∆_tc
 *
tc
, *
d©a
,

61 
∆_dump_∑øms
 *
p
)

63 
π∆_múªd
 *
u
 = 
d©a
;

64 i‡(!
u
)

67 
	`∆_dump
(
p
, " index %u", 
u
->
m_∑rm
.
ifödex
);

69 i‡(
u
->
m_∑rm
.
ó˘i⁄
 =
TCA_EGRESS_MIRROR
)

70 
	`∆_dump
(
p
, "Égress mirror");

71 i‡(
u
->
m_∑rm
.
ó˘i⁄
 =
TCA_EGRESS_REDIR
)

72 
	`∆_dump
(
p
, "ÉgressÑedirect");

74 
u
->
m_∑rm
.
a˘i⁄
) {

75 
TC_ACT_UNSPEC
:

76 
	`∆_dump
(
p
, " unspecified");

78 
TC_ACT_PIPE
:

79 
	`∆_dump
(
p
, "Öipe");

81 
TC_ACT_STOLEN
:

82 
	`∆_dump
(
p
, " stolen");

84 
TC_ACT_SHOT
:

85 
	`∆_dump
(
p
, " shot");

87 
TC_ACT_QUEUED
:

88 
	`∆_dump
(
p
, " queued");

90 
TC_ACT_REPEAT
:

91 
	`∆_dump
(
p
, "Ñepeat");

94 
	}
}

96 
	$múªd_dump_dëaûs
(
π∆_tc
 *
tc
, *
d©a
,

97 
∆_dump_∑øms
 *
p
)

99 
	}
}

101 
	$múªd_dump_°©s
(
π∆_tc
 *
tc
, *
d©a
,

102 
∆_dump_∑øms
 *
p
)

104 
π∆_múªd
 *
u
 = 
d©a
;

106 i‡(!
u
)

109 
	}
}

112 
	$múªd_msg_fûl
(
π∆_tc
 *
tc
, *
d©a
, 
∆_msg
 *
msg
)

114 
π∆_múªd
 *
u
 = 
d©a
;

116 i‡(!
u
)

119 
	`NLA_PUT
(
msg
, 
TCA_MIRRED_PARMS
, (
u
->
m_∑rm
), &u->m_parm);

122 
∆a_put_Áûuª
:

123  -
NLE_NOMEM
;

124 
	}
}

131 
	$π∆_múªd_£t_a˘i⁄
(
π∆_a˘
 *
a˘
, 
a˘i⁄
)

133 
π∆_múªd
 *
u
;

135 i‡(!(
u
 = (
π∆_múªd
 *Ë
	`π∆_tc_d©a
(
	`TC_CAST
(
a˘
))))

136  -
NLE_NOMEM
;

138 i‡(
a˘i⁄
 > 
TCA_INGRESS_MIRROR
 ||á˘i⁄ < 
TCA_EGRESS_REDIR
)

139  -
NLE_INVAL
;

141 
a˘i⁄
) {

142 
TCA_EGRESS_MIRROR
:

143 
TCA_EGRESS_REDIR
:

144 
u
->
m_∑rm
.
ó˘i⁄
 = 
a˘i⁄
;

146 
TCA_INGRESS_REDIR
:

147 
TCA_INGRESS_MIRROR
:

149  
NLE_OPNOTSUPP
;

152 
	}
}

154 
	$π∆_múªd_gë_a˘i⁄
(
π∆_a˘
 *
a˘
)

156 
π∆_múªd
 *
u
;

158 i‡(!(
u
 = (
π∆_múªd
 *Ë
	`π∆_tc_d©a
(
	`TC_CAST
(
a˘
))))

159  -
NLE_NOMEM
;

160  
u
->
m_∑rm
.
ó˘i⁄
;

161 
	}
}

163 
	$π∆_múªd_£t_ifödex
(
π∆_a˘
 *
a˘
, 
uöt32_t
 
ifödex
)

165 
π∆_múªd
 *
u
;

167 i‡(!(
u
 = (
π∆_múªd
 *Ë
	`π∆_tc_d©a
(
	`TC_CAST
(
a˘
))))

168  -
NLE_NOMEM
;

170 
u
->
m_∑rm
.
ifödex
 = ifindex;

172 
	}
}

174 
uöt32_t
 
	$π∆_múªd_gë_ifödex
(
π∆_a˘
 *
a˘
)

176 
π∆_múªd
 *
u
;

178 i‡((
u
 = (
π∆_múªd
 *Ë
	`π∆_tc_d©a
(
	`TC_CAST
(
a˘
))))

179  
u
->
m_∑rm
.
ifödex
;

181 
	}
}

183 
	$π∆_múªd_£t_pﬁicy
(
π∆_a˘
 *
a˘
, 
pﬁicy
)

185 
π∆_múªd
 *
u
;

187 i‡(!(
u
 = (
π∆_múªd
 *Ë
	`π∆_tc_d©a
(
	`TC_CAST
(
a˘
))))

188  -
NLE_NOMEM
;

190 i‡(
pﬁicy
 > 
TC_ACT_REPEAT
 ||Öﬁicy < 
TC_ACT_OK
)

191  -
NLE_INVAL
;

193 
u
->
m_∑rm
.
ó˘i⁄
) {

194 
TCA_EGRESS_MIRROR
:

195 
TCA_EGRESS_REDIR
:

196 
u
->
m_∑rm
.
a˘i⁄
 = 
pﬁicy
;

198 
TCA_INGRESS_REDIR
:

199 
TCA_INGRESS_MIRROR
:

201  
NLE_OPNOTSUPP
;

204 
	}
}

206 
	$π∆_múªd_gë_pﬁicy
(
π∆_a˘
 *
a˘
)

208 
π∆_múªd
 *
u
;

210 i‡(!(
u
 = (
π∆_múªd
 *Ë
	`π∆_tc_d©a
(
	`TC_CAST
(
a˘
))))

211  -
NLE_NOMEM
;

212  
u
->
m_∑rm
.
a˘i⁄
;

213 
	}
}

217 
π∆_tc_›s
 
	gmúªd_›s
 = {

218 .
to_köd
 = "mirred",

219 .
	gto_ty≥
 = 
RTNL_TC_TYPE_ACT
,

220 .
	gto_size
 = (
π∆_múªd
),

221 .
	gto_msg_∑r£r
 = 
múªd_msg_∑r£r
,

222 .
	gto_‰ì_d©a
 = 
múªd_‰ì_d©a
,

223 .
	gto_˛⁄e
 = 
múªd_˛⁄e
,

224 .
	gto_msg_fûl
 = 
múªd_msg_fûl
,

225 .
	gto_dump
 = {

226 [
NL_DUMP_LINE
] = 
múªd_dump_löe
,

227 [
NL_DUMP_DETAILS
] = 
múªd_dump_dëaûs
,

228 [
NL_DUMP_STATS
] = 
múªd_dump_°©s
,

232 
__öô
 
	$múªd_öô
()

234 
	`π∆_tc_ªgi°î
(&
múªd_›s
);

235 
	}
}

237 
__exô
 
	$múªd_exô
()

239 
	`π∆_tc_uƒegi°î
(&
múªd_›s
);

240 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/addr.c

109 
	~<√éök-¥iv©e/√éök.h
>

110 
	~<√éök/√éök.h
>

111 
	~<√éök/rouã/π∆.h
>

112 
	~<√éök/rouã/addr.h
>

113 
	~<√éök/rouã/rouã.h
>

114 
	~<√éök/rouã/lök.h
>

115 
	~<√éök/utûs.h
>

118 
	#ADDR_ATTR_FAMILY
 0x0001

	)

119 
	#ADDR_ATTR_PREFIXLEN
 0x0002

	)

120 
	#ADDR_ATTR_FLAGS
 0x0004

	)

121 
	#ADDR_ATTR_SCOPE
 0x0008

	)

122 
	#ADDR_ATTR_IFINDEX
 0x0010

	)

123 
	#ADDR_ATTR_LABEL
 0x0020

	)

124 
	#ADDR_ATTR_CACHEINFO
 0x0040

	)

125 
	#ADDR_ATTR_PEER
 0x0080

	)

126 
	#ADDR_ATTR_LOCAL
 0x0100

	)

127 
	#ADDR_ATTR_BROADCAST
 0x0200

	)

128 
	#ADDR_ATTR_MULTICAST
 0x0400

	)

129 
	#ADDR_ATTR_ANYCAST
 0x0800

	)

131 
∆_ˇche_›s
 
	gπ∆_addr_›s
;

132 
∆_obje˘_›s
 
	gaddr_obj_›s
;

135 
	$addr_c⁄°ru˘‹
(
∆_obje˘
 *
obj
)

137 
π∆_addr
 *
addr
 = 
	`∆_obje˘_¥iv
(
obj
);

139 
addr
->
a_sc›e
 = 
RT_SCOPE_NOWHERE
;

140 
	}
}

142 
	$addr_‰ì_d©a
(
∆_obje˘
 *
obj
)

144 
π∆_addr
 *
addr
 = 
	`∆_obje˘_¥iv
(
obj
);

146 i‡(!
addr
)

149 
	`∆_addr_put
(
addr
->
a_≥î
);

150 
	`∆_addr_put
(
addr
->
a_loˇl
);

151 
	`∆_addr_put
(
addr
->
a_bˇ°
);

152 
	`∆_addr_put
(
addr
->
a_mu…iˇ°
);

153 
	`∆_addr_put
(
addr
->
a_™yˇ°
);

154 
	`π∆_lök_put
(
addr
->
a_lök
);

155 
	}
}

157 
	$addr_˛⁄e
(
∆_obje˘
 *
_d°
, ∆_obje˘ *
_§c
)

159 
π∆_addr
 *
d°
 = 
	`∆_obje˘_¥iv
(
_d°
);

160 
π∆_addr
 *
§c
 = 
	`∆_obje˘_¥iv
(
_§c
);

162 i‡(
§c
->
a_lök
) {

163 
	`∆_obje˘_gë
(
	`OBJ_CAST
(
§c
->
a_lök
));

164 
d°
->
a_lök
 = 
§c
->a_link;

167 i‡(
§c
->
a_≥î
)

168 i‡(!(
d°
->
a_≥î
 = 
	`∆_addr_˛⁄e
(
§c
->a_peer)))

169  -
NLE_NOMEM
;

171 i‡(
§c
->
a_loˇl
)

172 i‡(!(
d°
->
a_loˇl
 = 
	`∆_addr_˛⁄e
(
§c
->a_local)))

173  -
NLE_NOMEM
;

175 i‡(
§c
->
a_bˇ°
)

176 i‡(!(
d°
->
a_bˇ°
 = 
	`∆_addr_˛⁄e
(
§c
->a_bcast)))

177  -
NLE_NOMEM
;

179 i‡(
§c
->
a_mu…iˇ°
)

180 i‡(!(
d°
->
a_mu…iˇ°
 = 
	`∆_addr_˛⁄e
(
§c
->a_multicast)))

181  -
NLE_NOMEM
;

183 i‡(
§c
->
a_™yˇ°
)

184 i‡(!(
d°
->
a_™yˇ°
 = 
	`∆_addr_˛⁄e
(
§c
->a_anycast)))

185  -
NLE_NOMEM
;

188 
	}
}

190 
∆a_pﬁicy
 
	gaddr_pﬁicy
[
IFA_MAX
+1] = {

191 [
IFA_LABEL
] = { .
ty≥
 = 
NLA_STRING
,

192 .
	gmaxÀn
 = 
IFNAMSIZ
 },

193 [
IFA_CACHEINFO
] = { .
möÀn
 = (
iÁ_ˇcheöfo
) },

196 
	$addr_msg_∑r£r
(
∆_ˇche_›s
 *
›s
, 
sockaddr_∆
 *
who
,

197 
∆msghdr
 *
∆h
, 
∆_∑r£r_∑øm
 *
µ
)

199 
π∆_addr
 *
addr
;

200 
iÁddrmsg
 *
iÁ
;

201 
∆©å
 *
tb
[
IFA_MAX
+1];

202 
îr
, 
Ámûy
;

203 
∆_ˇche
 *
lök_ˇche
;

204 
∆_addr
 *
∂í_addr
 = 
NULL
;

206 
addr
 = 
	`π∆_addr_Æloc
();

207 i‡(!
addr
)

208  -
NLE_NOMEM
;

210 
addr
->
˚_msgty≥
 = 
∆h
->
∆msg_ty≥
;

212 
îr
 = 
	`∆msg_∑r£
(
∆h
, (*
iÁ
), 
tb
, 
IFA_MAX
, 
addr_pﬁicy
);

213 i‡(
îr
 < 0)

214 
îrout
;

216 
iÁ
 = 
	`∆msg_d©a
(
∆h
);

217 
addr
->
a_Ámûy
 = 
Ámûy
 = 
iÁ
->
iÁ_Ámûy
;

218 
addr
->
a_¥efixÀn
 = 
iÁ
->
iÁ_¥efixÀn
;

219 
addr
->
a_sc›e
 = 
iÁ
->
iÁ_sc›e
;

220 
addr
->
a_Êags
 = 
tb
[
IFA_FLAGS
] ? 
	`∆a_gë_u32
(tb[IFA_FLAGS]) :

221 
iÁ
->
iÁ_Êags
;

222 
addr
->
a_ifödex
 = 
iÁ
->
iÁ_ödex
;

224 
addr
->
˚_mask
 = (
ADDR_ATTR_FAMILY
 | 
ADDR_ATTR_PREFIXLEN
 |

225 
ADDR_ATTR_FLAGS
 | 
ADDR_ATTR_SCOPE
 | 
ADDR_ATTR_IFINDEX
);

227 i‡(
tb
[
IFA_LABEL
]) {

228 
	`∆a_°æ˝y
(
addr
->
a_œbñ
, 
tb
[
IFA_LABEL
], 
IFNAMSIZ
);

229 
addr
->
˚_mask
 |
ADDR_ATTR_LABEL
;

233 i‡(
tb
[
IFA_CACHEINFO
]) {

234 
iÁ_ˇcheöfo
 *
ˇ
;

236 
ˇ
 = 
	`∆a_d©a
(
tb
[
IFA_CACHEINFO
]);

237 
addr
->
a_ˇcheöfo
.
aci_¥e„ªd
 = 
ˇ
->
iÁ_¥e„ªd
;

238 
addr
->
a_ˇcheöfo
.
aci_vÆid
 = 
ˇ
->
iÁ_vÆid
;

239 
addr
->
a_ˇcheöfo
.
aci_c°amp
 = 
ˇ
->
c°amp
;

240 
addr
->
a_ˇcheöfo
.
aci_t°amp
 = 
ˇ
->
t°amp
;

241 
addr
->
˚_mask
 |
ADDR_ATTR_CACHEINFO
;

244 i‡(
tb
[
IFA_LOCAL
]) {

245 
addr
->
a_loˇl
 = 
	`∆_addr_Æloc_©å
(
tb
[
IFA_LOCAL
], 
Ámûy
);

246 i‡(!
addr
->
a_loˇl
)

247 
îrout_nomem
;

248 
addr
->
˚_mask
 |
ADDR_ATTR_LOCAL
;

249 
∂í_addr
 = 
addr
->
a_loˇl
;

252 i‡(
tb
[
IFA_ADDRESS
]) {

253 
∆_addr
 *
a
;

255 
a
 = 
	`∆_addr_Æloc_©å
(
tb
[
IFA_ADDRESS
], 
Ámûy
);

256 i‡(!
a
)

257 
îrout_nomem
;

262 i‡(!
tb
[
IFA_LOCAL
] || !
	`∆_addr_cmp
(
a
, 
addr
->
a_loˇl
)) {

263 
	`∆_addr_put
(
addr
->
a_loˇl
);

264 
addr
->
a_loˇl
 = 
a
;

265 
addr
->
˚_mask
 |
ADDR_ATTR_LOCAL
;

267 
addr
->
a_≥î
 = 
a
;

268 
addr
->
˚_mask
 |
ADDR_ATTR_PEER
;

271 
∂í_addr
 = 
a
;

274 i‡(
∂í_addr
)

275 
	`∆_addr_£t_¥efixÀn
(
∂í_addr
, 
addr
->
a_¥efixÀn
);

278 i‡(
tb
[
IFA_BROADCAST
]) {

279 
addr
->
a_bˇ°
 = 
	`∆_addr_Æloc_©å
(
tb
[
IFA_BROADCAST
], 
Ámûy
);

280 i‡(!
addr
->
a_bˇ°
)

281 
îrout_nomem
;

283 
addr
->
˚_mask
 |
ADDR_ATTR_BROADCAST
;

287 i‡(
tb
[
IFA_MULTICAST
]) {

288 
addr
->
a_mu…iˇ°
 = 
	`∆_addr_Æloc_©å
(
tb
[
IFA_MULTICAST
],

289 
Ámûy
);

290 i‡(!
addr
->
a_mu…iˇ°
)

291 
îrout_nomem
;

293 
addr
->
˚_mask
 |
ADDR_ATTR_MULTICAST
;

297 i‡(
tb
[
IFA_ANYCAST
]) {

298 
addr
->
a_™yˇ°
 = 
	`∆_addr_Æloc_©å
(
tb
[
IFA_ANYCAST
],

299 
Ámûy
);

300 i‡(!
addr
->
a_™yˇ°
)

301 
îrout_nomem
;

303 
addr
->
˚_mask
 |
ADDR_ATTR_ANYCAST
;

306 i‡((
lök_ˇche
 = 
	`__∆_ˇche_mngt_ªquúe
("route/link"))) {

307 
π∆_lök
 *
lök
;

309 i‡((
lök
 = 
	`π∆_lök_gë
(
lök_ˇche
, 
addr
->
a_ifödex
))) {

310 
	`π∆_addr_£t_lök
(
addr
, 
lök
);

313 
	`π∆_lök_put
(
lök
);

317 
îr
 = 
µ
->
	`µ_cb
((
∆_obje˘
 *Ë
addr
,Öp);

318 
îrout
:

319 
	`π∆_addr_put
(
addr
);

321  
îr
;

323 
îrout_nomem
:

324 
îr
 = -
NLE_NOMEM
;

325 
îrout
;

326 
	}
}

328 
	$addr_ªque°_upd©e
(
∆_ˇche
 *
ˇche
, 
∆_sock
 *
sk
)

330  
	`∆_πgí_ªque°
(
sk
, 
RTM_GETADDR
, 
AF_UNSPEC
, 
NLM_F_DUMP
);

331 
	}
}

333 
	$addr_dump_löe
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
p
)

335 
π∆_addr
 *
addr
 = (π∆_add∏*Ë
obj
;

336 
∆_ˇche
 *
lök_ˇche
;

337 
buf
[128];

339 
lök_ˇche
 = 
	`∆_ˇche_mngt_ªquúe_ß„
("route/link");

341 i‡(
addr
->
˚_mask
 & 
ADDR_ATTR_LOCAL
)

342 
	`∆_dump_löe
(
p
, "%s",

343 
	`∆_addr2°r
(
addr
->
a_loˇl
, 
buf
, (buf)));

345 
	`∆_dump_löe
(
p
, "none");

347 i‡(
addr
->
˚_mask
 & 
ADDR_ATTR_PEER
)

348 
	`∆_dump
(
p
, "Öeer %s",

349 
	`∆_addr2°r
(
addr
->
a_≥î
, 
buf
, (buf)));

351 
	`∆_dump
(
p
, " %†", 
	`∆_af2°r
(
addr
->
a_Ámûy
, 
buf
, (buf)));

353 i‡(
lök_ˇche
)

354 
	`∆_dump
(
p
, "dev %s ",

355 
	`π∆_lök_i2«me
(
lök_ˇche
, 
addr
->
a_ifödex
,

356 
buf
, (buf)));

358 
	`∆_dump
(
p
, "dev %d ", 
addr
->
a_ifödex
);

360 
	`∆_dump
(
p
, "scope %s",

361 
	`π∆_sc›e2°r
(
addr
->
a_sc›e
, 
buf
, (buf)));

363 
	`π∆_addr_Êags2°r
(
addr
->
a_Êags
, 
buf
, (buf));

364 i‡(
buf
[0])

365 
	`∆_dump
(
p
, " <%s>", 
buf
);

367 
	`∆_dump
(
p
, "\n");

369 i‡(
lök_ˇche
)

370 
	`∆_ˇche_put
(
lök_ˇche
);

371 
	}
}

373 
	$addr_dump_dëaûs
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
p
)

375 
π∆_addr
 *
addr
 = (π∆_add∏*Ë
obj
;

376 
buf
[128];

378 
	`addr_dump_löe
(
obj
, 
p
);

380 i‡(
addr
->
˚_mask
 & (
ADDR_ATTR_LABEL
 | 
ADDR_ATTR_BROADCAST
 |

381 
ADDR_ATTR_MULTICAST
)) {

382 
	`∆_dump_löe
(
p
, " ");

384 i‡(
addr
->
˚_mask
 & 
ADDR_ATTR_LABEL
)

385 
	`∆_dump
(
p
, "Üabñ %s", 
addr
->
a_œbñ
);

387 i‡(
addr
->
˚_mask
 & 
ADDR_ATTR_BROADCAST
)

388 
	`∆_dump
(
p
, " broadcast %s",

389 
	`∆_addr2°r
(
addr
->
a_bˇ°
, 
buf
, (buf)));

391 i‡(
addr
->
˚_mask
 & 
ADDR_ATTR_MULTICAST
)

392 
	`∆_dump
(
p
, " multicast %s",

393 
	`∆_addr2°r
(
addr
->
a_mu…iˇ°
, 
buf
,

394 (
buf
)));

396 i‡(
addr
->
˚_mask
 & 
ADDR_ATTR_ANYCAST
)

397 
	`∆_dump
(
p
, "ánycast %s",

398 
	`∆_addr2°r
(
addr
->
a_™yˇ°
, 
buf
,

399 (
buf
)));

401 
	`∆_dump
(
p
, "\n");

404 i‡(
addr
->
˚_mask
 & 
ADDR_ATTR_CACHEINFO
) {

405 
π∆_addr_ˇcheöfo
 *
ci
 = &
addr
->
a_ˇcheöfo
;

407 
	`∆_dump_löe
(
p
, " valid-lifetime %s",

408 
ci
->
aci_vÆid
 == 0xFFFFFFFFU ? "forever" :

409 
	`∆_m£c2°r
(
ci
->
aci_vÆid
 * 1000,

410 
buf
, (buf)));

412 
	`∆_dump
(
p
, "Öreferred-lifetime %s\n",

413 
ci
->
aci_¥e„ªd
 == 0xFFFFFFFFU ? "forever" :

414 
	`∆_m£c2°r
(
ci
->
aci_¥e„ªd
 * 1000,

415 
buf
, (buf)));

417 
	`∆_dump_löe
(
p
, " created boot-time+%s ",

418 
	`∆_m£c2°r
(
addr
->
a_ˇcheöfo
.
aci_c°amp
 * 10,

419 
buf
, (buf)));

421 
	`∆_dump
(
p
, "last-updated boot-time+%s\n",

422 
	`∆_m£c2°r
(
addr
->
a_ˇcheöfo
.
aci_t°amp
 * 10,

423 
buf
, (buf)));

425 
	}
}

427 
	$addr_dump_°©s
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
p
)

429 
	`addr_dump_dëaûs
(
obj
, 
p
);

430 
	}
}

432 
	$addr_com∑ª
(
∆_obje˘
 *
_a
, ∆_obje˘ *
_b
,

433 
uöt32_t
 
©ås
, 
Êags
)

435 
π∆_addr
 *
a
 = (π∆_add∏*Ë
_a
;

436 
π∆_addr
 *
b
 = (π∆_add∏*Ë
_b
;

437 
diff
 = 0;

439 
	#ADDR_DIFF
(
ATTR
, 
EXPR
Ë
	`ATTR_DIFF
(
©ås
, 
ADDR_ATTR_
##ATTR, 
a
, 
b
, EXPR)

	)

441 
diff
 |
	`ADDR_DIFF
(
IFINDEX
, 
a
->
a_ifödex
 !
b
->a_ifindex);

442 
diff
 |
	`ADDR_DIFF
(
FAMILY
, 
a
->
a_Ámûy
 !
b
->a_family);

443 
diff
 |
	`ADDR_DIFF
(
SCOPE
, 
a
->
a_sc›e
 !
b
->a_scope);

444 
diff
 |
	`ADDR_DIFF
(
LABEL
, 
	`°rcmp
(
a
->
a_œbñ
, 
b
->a_label));

445 
diff
 |
	`ADDR_DIFF
(
PEER
, 
	`∆_addr_cmp
(
a
->
a_≥î
, 
b
->a_peer));

446 
diff
 |
	`ADDR_DIFF
(
LOCAL
, 
	`∆_addr_cmp
(
a
->
a_loˇl
, 
b
->a_local));

447 
diff
 |
	`ADDR_DIFF
(
MULTICAST
, 
	`∆_addr_cmp
(
a
->
a_mu…iˇ°
,

448 
b
->
a_mu…iˇ°
));

449 
diff
 |
	`ADDR_DIFF
(
BROADCAST
, 
	`∆_addr_cmp
(
a
->
a_bˇ°
, 
b
->a_bcast));

450 
diff
 |
	`ADDR_DIFF
(
ANYCAST
, 
	`∆_addr_cmp
(
a
->
a_™yˇ°
, 
b
->a_anycast));

452 i‡(
Êags
 & 
LOOSE_COMPARISON
)

453 
diff
 |
	`ADDR_DIFF
(
FLAGS
,

454 (
a
->
a_Êags
 ^ 
b
->a_ÊagsË& b->
a_Êag_mask
);

456 
diff
 |
	`ADDR_DIFF
(
FLAGS
, 
a
->
a_Êags
 !
b
->a_flags);

458 #unde‡
ADDR_DIFF


460  
diff
;

461 
	}
}

463 c⁄° 
å™s_tbl
 
	gaddr_©ås
[] = {

464 
__ADD
(
ADDR_ATTR_FAMILY
, 
Ámûy
)

465 
__ADD
(
ADDR_ATTR_PREFIXLEN
, 
¥efixÀn
)

466 
__ADD
(
ADDR_ATTR_FLAGS
, 
Êags
)

467 
__ADD
(
ADDR_ATTR_SCOPE
, 
sc›e
)

468 
__ADD
(
ADDR_ATTR_IFINDEX
, 
ifödex
)

469 
__ADD
(
ADDR_ATTR_LABEL
, 
œbñ
)

470 
__ADD
(
ADDR_ATTR_CACHEINFO
, 
ˇcheöfo
)

471 
__ADD
(
ADDR_ATTR_PEER
, 
≥î
)

472 
__ADD
(
ADDR_ATTR_LOCAL
, 
loˇl
)

473 
__ADD
(
ADDR_ATTR_BROADCAST
, 
brﬂdˇ°
)

474 
__ADD
(
ADDR_ATTR_MULTICAST
, 
mu…iˇ°
)

477 *
	$addr_©ås2°r
(
©ås
, *
buf
, 
size_t
 
Àn
)

479  
	`__Êags2°r
(
©ås
, 
buf
, 
Àn
, 
addr_©ås
,

480 
	`ARRAY_SIZE
(
addr_©ås
));

481 
	}
}

488 
π∆_addr
 *
	$π∆_addr_Æloc
()

490  (
π∆_addr
 *Ë
	`∆_obje˘_Æloc
(&
addr_obj_›s
);

491 
	}
}

493 
	$π∆_addr_put
(
π∆_addr
 *
addr
)

495 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
addr
);

496 
	}
}

505 
	$π∆_addr_Æloc_ˇche
(
∆_sock
 *
sk
, 
∆_ˇche
 **
ªsu…
)

507  
	`∆_ˇche_Æloc_™d_fûl
(&
π∆_addr_›s
, 
sk
, 
ªsu…
);

508 
	}
}

524 
π∆_addr
 *
	$π∆_addr_gë
(
∆_ˇche
 *
ˇche
, 
ifödex
,

525 
∆_addr
 *
addr
)

527 
π∆_addr
 *
a
;

529 i‡(
ˇche
->
c_›s
 !&
π∆_addr_›s
)

530  
NULL
;

532 
	`∆_li°_f‹_óch_íåy
(
a
, &
ˇche
->
c_ôems
, 
˚_li°
) {

533 i‡(
ifödex
 && 
a
->
a_ifödex
 != ifindex)

536 i‡(
a
->
˚_mask
 & 
ADDR_ATTR_LOCAL
 &&

537 !
	`∆_addr_cmp
(
a
->
a_loˇl
, 
addr
)) {

538 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
a
);

539  
a
;

543  
NULL
;

544 
	}
}

548 
	$buûd_addr_msg
(
π∆_addr
 *
tm∂
, 
cmd
, 
Êags
,

549 
∆_msg
 **
ªsu…
)

551 
∆_msg
 *
msg
;

552 
iÁddrmsg
 
am
 = {

553 .
iÁ_Ámûy
 = 
tm∂
->
a_Ámûy
,

554 .
iÁ_ödex
 = 
tm∂
->
a_ifödex
,

555 .
iÁ_¥efixÀn
 = 
tm∂
->
a_¥efixÀn
,

556 .
iÁ_Êags
 = 
tm∂
->
a_Êags
,

559 i‡(
tm∂
->
˚_mask
 & 
ADDR_ATTR_SCOPE
)

560 
am
.
iÁ_sc›e
 = 
tm∂
->
a_sc›e
;

563 i‡(
tm∂
->
a_Ámûy
 =
AF_INET
 &&

564 
tm∂
->
˚_mask
 & 
ADDR_ATTR_LOCAL
 &&

565 *((*Ë
	`∆_addr_gë_bö¨y_addr
(
tm∂
->
a_loˇl
)) == 127)

566 
am
.
iÁ_sc›e
 = 
RT_SCOPE_HOST
;

568 
am
.
iÁ_sc›e
 = 
RT_SCOPE_UNIVERSE
;

571 
msg
 = 
	`∆msg_Æloc_sim∂e
(
cmd
, 
Êags
);

572 i‡(!
msg
)

573  -
NLE_NOMEM
;

575 i‡(
	`∆msg_≠≥nd
(
msg
, &
am
, ◊m), 
NLMSG_ALIGNTO
) < 0)

576 
∆a_put_Áûuª
;

578 i‡(
tm∂
->
˚_mask
 & 
ADDR_ATTR_LOCAL
)

579 
	`NLA_PUT_ADDR
(
msg
, 
IFA_LOCAL
, 
tm∂
->
a_loˇl
);

581 i‡(
tm∂
->
˚_mask
 & 
ADDR_ATTR_PEER
)

582 
	`NLA_PUT_ADDR
(
msg
, 
IFA_ADDRESS
, 
tm∂
->
a_≥î
);

583 i‡(
tm∂
->
˚_mask
 & 
ADDR_ATTR_LOCAL
)

584 
	`NLA_PUT_ADDR
(
msg
, 
IFA_ADDRESS
, 
tm∂
->
a_loˇl
);

586 i‡(
tm∂
->
˚_mask
 & 
ADDR_ATTR_LABEL
)

587 
	`NLA_PUT_STRING
(
msg
, 
IFA_LABEL
, 
tm∂
->
a_œbñ
);

589 i‡(
tm∂
->
˚_mask
 & 
ADDR_ATTR_BROADCAST
)

590 
	`NLA_PUT_ADDR
(
msg
, 
IFA_BROADCAST
, 
tm∂
->
a_bˇ°
);

592 i‡(
tm∂
->
˚_mask
 & 
ADDR_ATTR_CACHEINFO
) {

593 
iÁ_ˇcheöfo
 
ˇ
 = {

594 .
iÁ_vÆid
 = 
tm∂
->
a_ˇcheöfo
.
aci_vÆid
,

595 .
iÁ_¥e„ªd
 = 
tm∂
->
a_ˇcheöfo
.
aci_¥e„ªd
,

598 
	`NLA_PUT
(
msg
, 
IFA_CACHEINFO
, (
ˇ
), &ca);

601 i‡(
tm∂
->
a_Êags
 & ~0xFF) {

612 
	`NLA_PUT_U32
(
msg
, 
IFA_FLAGS
, 
tm∂
->
a_Êags
);

615 *
ªsu…
 = 
msg
;

618 
∆a_put_Áûuª
:

619 
	`∆msg_‰ì
(
msg
);

620  -
NLE_MSGSIZE
;

621 
	}
}

650 
	$π∆_addr_buûd_add_ªque°
(
π∆_addr
 *
addr
, 
Êags
,

651 
∆_msg
 **
ªsu…
)

653 
uöt32_t
 
ªquúed
 = 
ADDR_ATTR_IFINDEX
 | 
ADDR_ATTR_FAMILY
 |

654 
ADDR_ATTR_PREFIXLEN
 | 
ADDR_ATTR_LOCAL
;

656 i‡((
addr
->
˚_mask
 & 
ªquúed
) !=Ñequired)

657  -
NLE_MISSING_ATTR
;

659  
	`buûd_addr_msg
(
addr
, 
RTM_NEWADDR
, 
NLM_F_CREATE
 | 
Êags
, 
ªsu…
);

660 
	}
}

676 
	$π∆_addr_add
(
∆_sock
 *
sk
, 
π∆_addr
 *
addr
, 
Êags
)

678 
∆_msg
 *
msg
;

679 
îr
;

681 i‡((
îr
 = 
	`π∆_addr_buûd_add_ªque°
(
addr
, 
Êags
, &
msg
)) < 0)

682  
îr
;

684 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sk
, 
msg
);

685 
	`∆msg_‰ì
(
msg
);

686 i‡(
îr
 < 0)

687  
îr
;

689  
	`waô_f‹_ack
(
sk
);

690 
	}
}

723 
	$π∆_addr_buûd_dñëe_ªque°
(
π∆_addr
 *
addr
, 
Êags
,

724 
∆_msg
 **
ªsu…
)

726 
uöt32_t
 
ªquúed
 = 
ADDR_ATTR_IFINDEX
 | 
ADDR_ATTR_FAMILY
;

728 i‡((
addr
->
˚_mask
 & 
ªquúed
) !=Ñequired)

729  -
NLE_MISSING_ATTR
;

731  
	`buûd_addr_msg
(
addr
, 
RTM_DELADDR
, 
Êags
, 
ªsu…
);

732 
	}
}

748 
	$π∆_addr_dñëe
(
∆_sock
 *
sk
, 
π∆_addr
 *
addr
, 
Êags
)

750 
∆_msg
 *
msg
;

751 
îr
;

753 i‡((
îr
 = 
	`π∆_addr_buûd_dñëe_ªque°
(
addr
, 
Êags
, &
msg
)) < 0)

754  
îr
;

756 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sk
, 
msg
);

757 
	`∆msg_‰ì
(
msg
);

758 i‡(
îr
 < 0)

759  
îr
;

761  
	`waô_f‹_ack
(
sk
);

762 
	}
}

771 
	$π∆_addr_£t_œbñ
(
π∆_addr
 *
addr
, c⁄° *
œbñ
)

773 i‡(
	`°æí
(
œbñ
Ë> (
addr
->
a_œbñ
) - 1)

774  -
NLE_RANGE
;

776 
	`°r˝y
(
addr
->
a_œbñ
, 
œbñ
);

777 
addr
->
˚_mask
 |
ADDR_ATTR_LABEL
;

780 
	}
}

782 *
	$π∆_addr_gë_œbñ
(
π∆_addr
 *
addr
)

784 i‡(
addr
->
˚_mask
 & 
ADDR_ATTR_LABEL
)

785  
addr
->
a_œbñ
;

787  
NULL
;

788 
	}
}

790 
	$π∆_addr_£t_ifödex
(
π∆_addr
 *
addr
, 
ifödex
)

792 
addr
->
a_ifödex
 = 
ifödex
;

793 
addr
->
˚_mask
 |
ADDR_ATTR_IFINDEX
;

794 
	}
}

796 
	$π∆_addr_gë_ifödex
(
π∆_addr
 *
addr
)

798  
addr
->
a_ifödex
;

799 
	}
}

801 
	$π∆_addr_£t_lök
(
π∆_addr
 *
addr
, 
π∆_lök
 *
lök
)

803 
	`π∆_lök_put
(
addr
->
a_lök
);

805 i‡(!
lök
)

808 
	`∆_obje˘_gë
(
	`OBJ_CAST
(
lök
));

809 
addr
->
a_lök
 = 
lök
;

810 
addr
->
a_ifödex
 = 
lök
->
l_ödex
;

811 
addr
->
˚_mask
 |
ADDR_ATTR_IFINDEX
;

812 
	}
}

814 
π∆_lök
 *
	$π∆_addr_gë_lök
(
π∆_addr
 *
addr
)

816 i‡(
addr
->
a_lök
) {

817 
	`∆_obje˘_gë
(
	`OBJ_CAST
(
addr
->
a_lök
));

818  
addr
->
a_lök
;

821  
NULL
;

822 
	}
}

824 
	$π∆_addr_£t_Ámûy
(
π∆_addr
 *
addr
, 
Ámûy
)

826 
addr
->
a_Ámûy
 = 
Ámûy
;

827 
addr
->
˚_mask
 |
ADDR_ATTR_FAMILY
;

828 
	}
}

830 
	$π∆_addr_gë_Ámûy
(
π∆_addr
 *
addr
)

832  
addr
->
a_Ámûy
;

833 
	}
}

851 
	$π∆_addr_£t_¥efixÀn
(
π∆_addr
 *
addr
, 
¥efixÀn
)

853 
addr
->
a_¥efixÀn
 = 
¥efixÀn
;

855 i‡(
¥efixÀn
)

856 
addr
->
˚_mask
 |
ADDR_ATTR_PREFIXLEN
;

858 
addr
->
˚_mask
 &~
ADDR_ATTR_PREFIXLEN
;

864 i‡(
addr
->
a_≥î
)

865 
	`∆_addr_£t_¥efixÀn
(
addr
->
a_≥î
, 
¥efixÀn
);

866 i‡(
addr
->
a_loˇl
)

867 
	`∆_addr_£t_¥efixÀn
(
addr
->
a_loˇl
, 
¥efixÀn
);

868 
	}
}

870 
	$π∆_addr_gë_¥efixÀn
(
π∆_addr
 *
addr
)

872  
addr
->
a_¥efixÀn
;

873 
	}
}

875 
	$π∆_addr_£t_sc›e
(
π∆_addr
 *
addr
, 
sc›e
)

877 
addr
->
a_sc›e
 = 
sc›e
;

878 
addr
->
˚_mask
 |
ADDR_ATTR_SCOPE
;

879 
	}
}

881 
	$π∆_addr_gë_sc›e
(
π∆_addr
 *
addr
)

883  
addr
->
a_sc›e
;

884 
	}
}

886 
	$π∆_addr_£t_Êags
(
π∆_addr
 *
addr
, 
Êags
)

888 
addr
->
a_Êag_mask
 |
Êags
;

889 
addr
->
a_Êags
 |
Êags
;

890 
addr
->
˚_mask
 |
ADDR_ATTR_FLAGS
;

891 
	}
}

893 
	$π∆_addr_un£t_Êags
(
π∆_addr
 *
addr
, 
Êags
)

895 
addr
->
a_Êag_mask
 |
Êags
;

896 
addr
->
a_Êags
 &~
Êags
;

897 
addr
->
˚_mask
 |
ADDR_ATTR_FLAGS
;

898 
	}
}

900 
	$π∆_addr_gë_Êags
(
π∆_addr
 *
addr
)

902  
addr
->
a_Êags
;

903 
	}
}

905 
ölöe
 
	$__assign_addr
(
π∆_addr
 *
addr
, 
∆_addr
 **
pos
,

906 
∆_addr
 *
√w
, 
Êag
)

908 i‡(
√w
) {

909 i‡(
addr
->
˚_mask
 & 
ADDR_ATTR_FAMILY
) {

910 i‡(
√w
->
a_Ámûy
 !
addr
->a_family)

911  -
NLE_AF_MISMATCH
;

913 
addr
->
a_Ámûy
 = 
√w
->a_family;

915 i‡(*
pos
)

916 
	`∆_addr_put
(*
pos
);

918 *
pos
 = 
	`∆_addr_gë
(
√w
);

919 
addr
->
˚_mask
 |(
Êag
 | 
ADDR_ATTR_FAMILY
);

921 i‡(*
pos
)

922 
	`∆_addr_put
(*
pos
);

924 *
pos
 = 
NULL
;

925 
addr
->
˚_mask
 &~
Êag
;

929 
	}
}

931 
	$π∆_addr_£t_loˇl
(
π∆_addr
 *
addr
, 
∆_addr
 *
loˇl
)

933 
îr
;

936 i‡((
addr
->
˚_mask
 & 
ADDR_ATTR_PEER
Ë&& 
loˇl
 &&

937 
	`∆_addr_gë_¥efixÀn
(
loˇl
))

938  -
NLE_INVAL
;

940 
îr
 = 
	`__assign_addr
(
addr
, &addr->
a_loˇl
, 
loˇl
, 
ADDR_ATTR_LOCAL
);

941 i‡(
îr
 < 0)

942  
îr
;

945 i‡(!(
addr
->
˚_mask
 & 
ADDR_ATTR_PEER
))

946 
	`π∆_addr_£t_¥efixÀn
(
addr
, 
loˇl
 ? 
	`∆_addr_gë_¥efixÀn
(local) : 0);

949 
	}
}

951 
∆_addr
 *
	$π∆_addr_gë_loˇl
(
π∆_addr
 *
addr
)

953  
addr
->
a_loˇl
;

954 
	}
}

956 
	$π∆_addr_£t_≥î
(
π∆_addr
 *
addr
, 
∆_addr
 *
≥î
)

958 
îr
;

960 i‡(
≥î
 &&Öìr->
a_Ámûy
 !
AF_INET
)

961  -
NLE_AF_NOSUPPORT
;

963 
îr
 = 
	`__assign_addr
(
addr
, &addr->
a_≥î
, 
≥î
, 
ADDR_ATTR_PEER
);

964 i‡(
îr
 < 0)

965  
îr
;

967 
	`π∆_addr_£t_¥efixÀn
(
addr
, 
≥î
 ? 
	`∆_addr_gë_¥efixÀn
(peer) : 0);

970 
	}
}

972 
∆_addr
 *
	$π∆_addr_gë_≥î
(
π∆_addr
 *
addr
)

974  
addr
->
a_≥î
;

975 
	}
}

977 
	$π∆_addr_£t_brﬂdˇ°
(
π∆_addr
 *
addr
, 
∆_addr
 *
bˇ°
)

979 i‡(
bˇ°
 && bˇ°->
a_Ámûy
 !
AF_INET
)

980  -
NLE_AF_NOSUPPORT
;

982  
	`__assign_addr
(
addr
, &addr->
a_bˇ°
, 
bˇ°
, 
ADDR_ATTR_BROADCAST
);

983 
	}
}

985 
∆_addr
 *
	$π∆_addr_gë_brﬂdˇ°
(
π∆_addr
 *
addr
)

987  
addr
->
a_bˇ°
;

988 
	}
}

990 
	$π∆_addr_£t_mu…iˇ°
(
π∆_addr
 *
addr
, 
∆_addr
 *
mu…iˇ°
)

992 i‡(
mu…iˇ°
 && mu…iˇ°->
a_Ámûy
 !
AF_INET6
)

993  -
NLE_AF_NOSUPPORT
;

995  
	`__assign_addr
(
addr
, &addr->
a_mu…iˇ°
, 
mu…iˇ°
,

996 
ADDR_ATTR_MULTICAST
);

997 
	}
}

999 
∆_addr
 *
	$π∆_addr_gë_mu…iˇ°
(
π∆_addr
 *
addr
)

1001  
addr
->
a_mu…iˇ°
;

1002 
	}
}

1004 
	$π∆_addr_£t_™yˇ°
(
π∆_addr
 *
addr
, 
∆_addr
 *
™yˇ°
)

1006 i‡(
™yˇ°
 &&ányˇ°->
a_Ámûy
 !
AF_INET6
)

1007  -
NLE_AF_NOSUPPORT
;

1009  
	`__assign_addr
(
addr
, &addr->
a_™yˇ°
, 
™yˇ°
,

1010 
ADDR_ATTR_ANYCAST
);

1011 
	}
}

1013 
∆_addr
 *
	$π∆_addr_gë_™yˇ°
(
π∆_addr
 *
addr
)

1015  
addr
->
a_™yˇ°
;

1016 
	}
}

1018 
uöt32_t
 
	$π∆_addr_gë_vÆid_li„time
(
π∆_addr
 *
addr
)

1020 i‡(
addr
->
˚_mask
 & 
ADDR_ATTR_CACHEINFO
)

1021  
addr
->
a_ˇcheöfo
.
aci_vÆid
;

1024 
	}
}

1026 
	$π∆_addr_£t_vÆid_li„time
(
π∆_addr
 *
addr
, 
uöt32_t
 
li„time
)

1028 
addr
->
a_ˇcheöfo
.
aci_vÆid
 = 
li„time
;

1029 
addr
->
˚_mask
 |
ADDR_ATTR_CACHEINFO
;

1030 
	}
}

1032 
uöt32_t
 
	$π∆_addr_gë_¥e„ºed_li„time
(
π∆_addr
 *
addr
)

1034 i‡(
addr
->
˚_mask
 & 
ADDR_ATTR_CACHEINFO
)

1035  
addr
->
a_ˇcheöfo
.
aci_¥e„ªd
;

1038 
	}
}

1040 
	$π∆_addr_£t_¥e„ºed_li„time
(
π∆_addr
 *
addr
, 
uöt32_t
 
li„time
)

1042 
addr
->
a_ˇcheöfo
.
aci_¥e„ªd
 = 
li„time
;

1043 
addr
->
˚_mask
 |
ADDR_ATTR_CACHEINFO
;

1044 
	}
}

1046 
uöt32_t
 
	$π∆_addr_gë_¸óã_time
(
π∆_addr
 *
addr
)

1048  
addr
->
a_ˇcheöfo
.
aci_c°amp
;

1049 
	}
}

1051 
uöt32_t
 
	$π∆_addr_gë_œ°_upd©e_time
(
π∆_addr
 *
addr
)

1053  
addr
->
a_ˇcheöfo
.
aci_t°amp
;

1054 
	}
}

1063 c⁄° 
å™s_tbl
 
	gaddr_Êags
[] = {

1064 
__ADD
(
IFA_F_SECONDARY
, 
£c⁄d¨y
)

1065 
__ADD
(
IFA_F_NODAD
, 
nodad
)

1066 
__ADD
(
IFA_F_OPTIMISTIC
, 
›timi°ic
)

1067 
__ADD
(
IFA_F_HOMEADDRESS
, 
homóddªss
)

1068 
__ADD
(
IFA_F_DEPRECATED
, 
dïªˇãd
)

1069 
__ADD
(
IFA_F_TENTATIVE
, 
ã¡©ive
)

1070 
__ADD
(
IFA_F_PERMANENT
, 
≥rm™ít
)

1071 
__ADD
(
IFA_F_MANAGETEMPADDR
, 
mngtm∑ddr
)

1072 
__ADD
(
IFA_F_NOPREFIXROUTE
, 
n›ªfixrouã
)

1075 *
	$π∆_addr_Êags2°r
(
Êags
, *
buf
, 
size_t
 
size
)

1077  
	`__Êags2°r
(
Êags
, 
buf
, 
size
, 
addr_Êags
,

1078 
	`ARRAY_SIZE
(
addr_Êags
));

1079 
	}
}

1081 
	$π∆_addr_°r2Êags
(c⁄° *
«me
)

1083  
	`__°r2Êags
(
«me
, 
addr_Êags
, 
	`ARRAY_SIZE
(addr_flags));

1084 
	}
}

1088 
∆_obje˘_›s
 
	gaddr_obj_›s
 = {

1089 .
oo_«me
 = "route/addr",

1090 .
	goo_size
 = (
π∆_addr
),

1091 .
	goo_c⁄°ru˘‹
 = 
addr_c⁄°ru˘‹
,

1092 .
	goo_‰ì_d©a
 = 
addr_‰ì_d©a
,

1093 .
	goo_˛⁄e
 = 
addr_˛⁄e
,

1094 .
	goo_dump
 = {

1095 [
NL_DUMP_LINE
] = 
addr_dump_löe
,

1096 [
NL_DUMP_DETAILS
] = 
addr_dump_dëaûs
,

1097 [
NL_DUMP_STATS
] = 
addr_dump_°©s
,

1099 .
	goo_com∑ª
 = 
addr_com∑ª
,

1100 .
	goo_©ås2°r
 = 
addr_©ås2°r
,

1101 .
	goo_id_©ås
 = (
ADDR_ATTR_FAMILY
 | 
ADDR_ATTR_IFINDEX
 |

1102 
ADDR_ATTR_LOCAL
 | 
ADDR_ATTR_PREFIXLEN
),

1105 
∆_af_group
 
	gaddr_groups
[] = {

1106 { 
AF_INET
, 
RTNLGRP_IPV4_IFADDR
 },

1107 { 
AF_INET6
, 
RTNLGRP_IPV6_IFADDR
 },

1108 { 
END_OF_GROUP_LIST
 },

1111 
∆_ˇche_›s
 
	gπ∆_addr_›s
 = {

1112 .
co_«me
 = "route/addr",

1113 .
	gco_hdrsize
 = (
iÁddrmsg
),

1114 .
	gco_msgty≥s
 = {

1115 { 
RTM_NEWADDR
, 
NL_ACT_NEW
, "new" },

1116 { 
RTM_DELADDR
, 
NL_ACT_DEL
, "del" },

1117 { 
RTM_GETADDR
, 
NL_ACT_GET
, "get" },

1118 
END_OF_MSGTYPES_LIST
,

1120 .
	gco_¥Ÿocﬁ
 = 
NETLINK_ROUTE
,

1121 .
	gco_groups
 = 
addr_groups
,

1122 .
	gco_ªque°_upd©e
 = 
addr_ªque°_upd©e
,

1123 .
	gco_msg_∑r£r
 = 
addr_msg_∑r£r
,

1124 .
	gco_obj_›s
 = &
addr_obj_›s
,

1127 
__öô
 
	$addr_öô
()

1129 
	`∆_ˇche_mngt_ªgi°î
(&
π∆_addr_›s
);

1130 
	}
}

1132 
__exô
 
	$addr_exô
()

1134 
	`∆_ˇche_mngt_uƒegi°î
(&
π∆_addr_›s
);

1135 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/class.c

18 
	~<√éök-¥iv©e/√éök.h
>

19 
	~<√éök-¥iv©e/tc.h
>

20 
	~<√éök/√éök.h
>

21 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

22 
	~<√éök/rouã/˛ass.h
>

23 
	~<√éök/rouã/qdisc.h
>

24 
	~<√éök/rouã/˛assifõr.h
>

25 
	~<√éök/utûs.h
>

27 
∆_ˇche_›s
 
	gπ∆_˛ass_›s
;

28 
∆_obje˘_›s
 
	g˛ass_obj_›s
;

30 
	$˛ass_dump_dëaûs
(
π∆_tc
 *
tc
, 
∆_dump_∑øms
 *
p
)

32 
π∆_˛ass
 *
˛ass
 = (π∆_˛as†*Ë
tc
;

33 
buf
[32];

35 i‡(
˛ass
->
c_öfo
)

36 
	`∆_dump
(
p
, "child-qdisc %s ",

37 
	`π∆_tc_h™dÀ2°r
(
˛ass
->
c_öfo
, 
buf
, (buf)));

38 
	}
}

41 
	$˛ass_msg_∑r£r
(
∆_ˇche_›s
 *
›s
, 
sockaddr_∆
 *
who
,

42 
∆msghdr
 *
∆h
, 
∆_∑r£r_∑øm
 *
µ
)

44 
π∆_˛ass
 *
˛ass
;

45 
îr
;

47 i‡(!(
˛ass
 = 
	`π∆_˛ass_Æloc
()))

48  -
NLE_NOMEM
;

50 i‡((
îr
 = 
	`π∆_tc_msg_∑r£
(
∆h
, 
	`TC_CAST
(
˛ass
))) < 0)

51 
îrout
;

53 
îr
 = 
µ
->
	`µ_cb
(
	`OBJ_CAST
(
˛ass
),Öp);

54 
îrout
:

55 
	`π∆_˛ass_put
(
˛ass
);

57  
îr
;

58 
	}
}

60 
	$˛ass_ªque°_upd©e
(
∆_ˇche
 *
ˇche
, 
∆_sock
 *
sk
)

62 
tcmsg
 
tchdr
 = {

63 .
tcm_Ámûy
 = 
AF_UNSPEC
,

64 .
tcm_ifödex
 = 
ˇche
->
c_ürg1
,

67  
	`∆_£nd_sim∂e
(
sk
, 
RTM_GETTCLASS
, 
NLM_F_DUMP
, &
tchdr
,

68 (
tchdr
));

69 
	}
}

76 
π∆_˛ass
 *
	$π∆_˛ass_Æloc
()

78 
π∆_tc
 *
tc
;

80 
tc
 = 
	`TC_CAST
(
	`∆_obje˘_Æloc
(&
˛ass_obj_›s
));

81 i‡(
tc
)

82 
tc
->
tc_ty≥
 = 
RTNL_TC_TYPE_CLASS
;

84  (
π∆_˛ass
 *Ë
tc
;

85 
	}
}

87 
	$π∆_˛ass_put
(
π∆_˛ass
 *
˛ass
)

89 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
˛ass
);

90 
	}
}

100 
	$˛ass_buûd
(
π∆_˛ass
 *
˛ass
, 
ty≥
, 
Êags
,

101 
∆_msg
 **
ªsu…
)

103 
uöt32_t
 
√eded
 = 
TCA_ATTR_PARENT
 | 
TCA_ATTR_HANDLE
;

105 i‡((
˛ass
->
˚_mask
 & 
√eded
) ==Çeeded &&

106 
	`TC_H_MAJ
(
˛ass
->
c_∑ª¡
Ë&& TC_H_MAJ(˛ass->
c_h™dÀ
) &&

107 
	`TC_H_MAJ
(
˛ass
->
c_∑ª¡
Ë!TC_H_MAJ(˛ass->
c_h™dÀ
)) {

108 
	`APPBUG
("TC_H_MAJ(parent) must match TC_H_MAJ(handle)");

109  -
NLE_INVAL
;

112  
	`π∆_tc_msg_buûd
(
	`TC_CAST
(
˛ass
), 
ty≥
, 
Êags
, 
ªsu…
);

113 
	}
}

129 
	$π∆_˛ass_buûd_add_ªque°
(
π∆_˛ass
 *
˛ass
, 
Êags
,

130 
∆_msg
 **
ªsu…
)

132  
	`˛ass_buûd
(
˛ass
, 
RTM_NEWTCLASS
, 
Êags
, 
ªsu…
);

133 
	}
}

171 
	$π∆_˛ass_add
(
∆_sock
 *
sk
, 
π∆_˛ass
 *
˛ass
, 
Êags
)

173 
∆_msg
 *
msg
;

174 
îr
;

176 i‡((
îr
 = 
	`π∆_˛ass_buûd_add_ªque°
(
˛ass
, 
Êags
, &
msg
)) < 0)

177  
îr
;

179  
	`∆_£nd_sync
(
sk
, 
msg
);

180 
	}
}

195 
	$π∆_˛ass_buûd_dñëe_ªque°
(
π∆_˛ass
 *
˛ass
, 
∆_msg
 **
ªsu…
)

197 
∆_msg
 *
msg
;

198 
tcmsg
 
tchdr
;

199 
uöt32_t
 
ªquúed
 = 
TCA_ATTR_IFINDEX
 | 
TCA_ATTR_HANDLE
;

201 i‡((
˛ass
->
˚_mask
 & 
ªquúed
) !=Ñequired) {

202 
	`APPBUG
("ifindexánd handle must be specified");

203  -
NLE_MISSING_ATTR
;

206 i‡(!(
msg
 = 
	`∆msg_Æloc_sim∂e
(
RTM_DELTCLASS
, 0)))

207  -
NLE_NOMEM
;

209 
	`mem£t
(&
tchdr
, 0, (tchdr));

210 
tchdr
.
tcm_Ámûy
 = 
AF_UNSPEC
;

211 
tchdr
.
tcm_ifödex
 = 
˛ass
->
c_ifödex
;

212 
tchdr
.
tcm_h™dÀ
 = 
˛ass
->
c_h™dÀ
;

214 i‡(
˛ass
->
˚_mask
 & 
TCA_ATTR_PARENT
)

215 
tchdr
.
tcm_∑ª¡
 = 
˛ass
->
c_∑ª¡
;

217 i‡(
	`∆msg_≠≥nd
(
msg
, &
tchdr
, —chdr), 
NLMSG_ALIGNTO
) < 0) {

218 
	`∆msg_‰ì
(
msg
);

219  -
NLE_MSGSIZE
;

222 *
ªsu…
 = 
msg
;

224 
	}
}

252 
	$π∆_˛ass_dñëe
(
∆_sock
 *
sk
, 
π∆_˛ass
 *
˛ass
)

254 
∆_msg
 *
msg
;

255 
îr
;

257 i‡((
îr
 = 
	`π∆_˛ass_buûd_dñëe_ªque°
(
˛ass
, &
msg
)) < 0)

258  
îr
;

260  
	`∆_£nd_sync
(
sk
, 
msg
);

261 
	}
}

277 
π∆_qdisc
 *
	$π∆_˛ass_Àaf_qdisc
(
π∆_˛ass
 *
˛ass
,

278 
∆_ˇche
 *
ˇche
)

280 
π∆_qdisc
 *
Àaf
;

282 i‡(!
˛ass
->
c_öfo
)

283  
NULL
;

285 
Àaf
 = 
	`π∆_qdisc_gë_by_∑ª¡
(
ˇche
, 
˛ass
->
c_ifödex
,

286 
˛ass
->
c_h™dÀ
);

287 i‡(!
Àaf
 ||Üóf->
q_h™dÀ
 !
˛ass
->
c_öfo
)

288  
NULL
;

290  
Àaf
;

291 
	}
}

312 
	$π∆_˛ass_Æloc_ˇche
(
∆_sock
 *
sk
, 
ifödex
,

313 
∆_ˇche
 **
ªsu…
)

315 
∆_ˇche
 * 
ˇche
;

316 
îr
;

318 i‡(!
ifödex
) {

319 
	`APPBUG
("ifindex must be specified");

320  -
NLE_INVAL
;

323 i‡(!(
ˇche
 = 
	`∆_ˇche_Æloc
(&
π∆_˛ass_›s
)))

324  -
NLE_NOMEM
;

326 
ˇche
->
c_ürg1
 = 
ifödex
;

328 i‡(
sk
 && (
îr
 = 
	`∆_ˇche_ªfûl
(sk, 
ˇche
)) < 0) {

329 
	`∆_ˇche_‰ì
(
ˇche
);

330  
îr
;

333 *
ªsu…
 = 
ˇche
;

335 
	}
}

353 
π∆_˛ass
 *
	$π∆_˛ass_gë
(
∆_ˇche
 *
ˇche
, 
ifödex
,

354 
uöt32_t
 
h™dÀ
)

356 
π∆_˛ass
 *
˛ass
;

358 i‡(
ˇche
->
c_›s
 !&
π∆_˛ass_›s
)

359  
NULL
;

361 
	`∆_li°_f‹_óch_íåy
(
˛ass
, &
ˇche
->
c_ôems
, 
˚_li°
) {

362 i‡(
˛ass
->
c_h™dÀ
 =
h™dÀ
 && cœss->
c_ifödex
 =
ifödex
) {

363 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
˛ass
);

364  
˛ass
;

367  
NULL
;

368 
	}
}

383 
π∆_˛ass_f‹óch_chûd
(
π∆_˛ass
 *
˛ass
, 
∆_ˇche
 *
ˇche
,

384 (*
cb
)(
∆_obje˘
 *, *), *
¨g
)

386 
π∆_˛ass
 *
fûãr
;

388 
fûãr
 = 
	`π∆_˛ass_Æloc
();

389 i‡(!
fûãr
)

392 
	`π∆_tc_£t_∑ª¡
(
	`TC_CAST
(
fûãr
), 
˛ass
->
c_h™dÀ
);

393 
	`π∆_tc_£t_ifödex
(
	`TC_CAST
(
fûãr
), 
˛ass
->
c_ifödex
);

394 
	`π∆_tc_£t_köd
(
	`TC_CAST
(
fûãr
), 
˛ass
->
c_köd
);

396 
	`∆_ˇche_f‹óch_fûãr
(
ˇche
, 
	`OBJ_CAST
(
fûãr
), 
cb
, 
¨g
);

397 
	`π∆_˛ass_put
(
fûãr
);

398 
	}
}

406 
π∆_˛ass_f‹óch_˛s
(
π∆_˛ass
 *
˛ass
, 
∆_ˇche
 *
ˇche
,

407 (*
cb
)(
∆_obje˘
 *, *), *
¨g
)

409 
π∆_˛s
 *
fûãr
;

411 
fûãr
 = 
	`π∆_˛s_Æloc
();

412 i‡(!
fûãr
)

415 
	`π∆_tc_£t_ifödex
((
π∆_tc
 *Ë
fûãr
, 
˛ass
->
c_ifödex
);

416 
	`π∆_tc_£t_∑ª¡
((
π∆_tc
 *Ë
fûãr
, 
˛ass
->
c_∑ª¡
);

418 
	`∆_ˇche_f‹óch_fûãr
(
ˇche
, (
∆_obje˘
 *Ë
fûãr
, 
cb
, 
¨g
);

419 
	`π∆_˛s_put
(
fûãr
);

420 
	}
}

424 
π∆_tc_ty≥_›s
 
	g˛ass_›s
 = {

425 .
â_ty≥
 = 
RTNL_TC_TYPE_CLASS
,

426 .
	gâ_dump_¥efix
 = "class",

427 .
	gâ_dump
 = {

428 [
NL_DUMP_DETAILS
] = 
˛ass_dump_dëaûs
,

432 
∆_obje˘_›s
 
	g˛ass_obj_›s
 = {

433 .
oo_«me
 = "route/class",

434 .
	goo_size
 = (
π∆_˛ass
),

435 .
	goo_‰ì_d©a
 = 
π∆_tc_‰ì_d©a
,

436 .
	goo_˛⁄e
 = 
π∆_tc_˛⁄e
,

437 .
	goo_dump
 = {

438 [
NL_DUMP_LINE
] = 
π∆_tc_dump_löe
,

439 [
NL_DUMP_DETAILS
] = 
π∆_tc_dump_dëaûs
,

440 [
NL_DUMP_STATS
] = 
π∆_tc_dump_°©s
,

442 .
	goo_com∑ª
 = 
π∆_tc_com∑ª
,

443 .
	goo_id_©ås
 = (
TCA_ATTR_IFINDEX
 | 
TCA_ATTR_HANDLE
),

446 
∆_ˇche_›s
 
	gπ∆_˛ass_›s
 = {

447 .
co_«me
 = "route/class",

448 .
	gco_hdrsize
 = (
tcmsg
),

449 .
	gco_msgty≥s
 = {

450 { 
RTM_NEWTCLASS
, 
NL_ACT_NEW
, "new" },

451 { 
RTM_DELTCLASS
, 
NL_ACT_DEL
, "del" },

452 { 
RTM_GETTCLASS
, 
NL_ACT_GET
, "get" },

453 
END_OF_MSGTYPES_LIST
,

455 .
	gco_¥Ÿocﬁ
 = 
NETLINK_ROUTE
,

456 .
	gco_groups
 = 
tc_groups
,

457 .
	gco_ªque°_upd©e
 = &
˛ass_ªque°_upd©e
,

458 .
	gco_msg_∑r£r
 = &
˛ass_msg_∑r£r
,

459 .
	gco_obj_›s
 = &
˛ass_obj_›s
,

462 
__öô
 
	$˛ass_öô
()

464 
	`π∆_tc_ty≥_ªgi°î
(&
˛ass_›s
);

465 
	`∆_ˇche_mngt_ªgi°î
(&
π∆_˛ass_›s
);

466 
	}
}

468 
__exô
 
	$˛ass_exô
()

470 
	`∆_ˇche_mngt_uƒegi°î
(&
π∆_˛ass_›s
);

471 
	`π∆_tc_ty≥_uƒegi°î
(&
˛ass_›s
);

472 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/classid.c

18 
	~<√éök-¥iv©e/√éök.h
>

19 
	~<√éök-¥iv©e/tc.h
>

20 
	~<√éök/√éök.h
>

21 
	~<√éök/utûs.h
>

22 
	~<√éök/rouã/tc.h
>

24 
	s˛assid_m≠


26 
uöt32_t
 
	m˛assid
;

27 * 
	m«me
;

28 
∆_li°_hód
 
	m«me_li°
;

31 
	#CLASSID_NAME_HT_SIZ
 256

	)

33 
∆_li°_hód
 
	gtbl_«me
[
CLASSID_NAME_HT_SIZ
];

35 *
	gid_roŸ
 = 
NULL
;

37 
	$com∑ª_id
(c⁄° *
∑
, c⁄° *
pb
)

39 c⁄° 
˛assid_m≠
 *
ma
 = 
∑
;

40 c⁄° 
˛assid_m≠
 *
mb
 = 
pb
;

42 i‡(
ma
->
˛assid
 < 
mb
->classid)

45 i‡(
ma
->
˛assid
 > 
mb
->classid)

49 
	}
}

52 
	$˛assid_tbl_hash
(c⁄° *
°r
)

54 
hash
 = 5381;

55 
c
;

57 (
c
 = *
°r
++))

58 
hash
 = ((hash << 5Ë+ hashË+ 
c
;

60  
hash
 % 
CLASSID_NAME_HT_SIZ
;

61 
	}
}

63 
	$˛assid_lookup
(c⁄° *
«me
, 
uöt32_t
 *
ªsu…
)

65 
˛assid_m≠
 *
m≠
;

66 
n
 = 
	`˛assid_tbl_hash
(
«me
);

68 
	`∆_li°_f‹_óch_íåy
(
m≠
, &
tbl_«me
[
n
], 
«me_li°
) {

69 i‡(!
	`°rˇ£cmp
(
m≠
->
«me
,Çame)) {

70 *
ªsu…
 = 
m≠
->
˛assid
;

75  -
NLE_OBJ_NOTFOUND
;

76 
	}
}

78 *
	$«me_lookup
(c⁄° 
uöt32_t
 
˛assid
)

80 *
ªs
;

81 
˛assid_m≠
 
cm
 = {

82 .
˛assid
 = classid,

83 .
«me
 = "searchÉntry",

86 i‡((
ªs
 = 
	`tföd
(&
cm
, &
id_roŸ
, &
com∑ª_id
)))

87  (*(
˛assid_m≠
 **Ë
ªs
)->
«me
;

89  
NULL
;

90 
	}
}

109 *
	$π∆_tc_h™dÀ2°r
(
uöt32_t
 
h™dÀ
, *
buf
, 
size_t
 
Àn
)

111 i‡(
TC_H_ROOT
 =
h™dÀ
)

112 
	`¢¥ötf
(
buf
, 
Àn
, "root");

113 i‡(
TC_H_UNSPEC
 =
h™dÀ
)

114 
	`¢¥ötf
(
buf
, 
Àn
, "none");

115 i‡(
TC_H_INGRESS
 =
h™dÀ
)

116 
	`¢¥ötf
(
buf
, 
Àn
, "ingress");

118 *
«me
;

120 i‡((
«me
 = 
	`«me_lookup
(
h™dÀ
)))

121 
	`¢¥ötf
(
buf
, 
Àn
, "%s", 
«me
);

122 i‡(0 =
	`TC_H_MAJ
(
h™dÀ
))

123 
	`¢¥ötf
(
buf
, 
Àn
, ":%x", 
	`TC_H_MIN
(
h™dÀ
));

124 i‡(0 =
	`TC_H_MIN
(
h™dÀ
))

125 
	`¢¥ötf
(
buf
, 
Àn
, "%x:", 
	`TC_H_MAJ
(
h™dÀ
) >> 16);

127 
	`¢¥ötf
(
buf
, 
Àn
, "%x:%x",

128 
	`TC_H_MAJ
(
h™dÀ
Ë>> 16, 
	`TC_H_MIN
(handle));

131  
buf
;

132 
	}
}

154 
	$π∆_tc_°r2h™dÀ
(c⁄° *
°r
, 
uöt32_t
 *
ªs
)

156 *
cﬁ⁄
, *
íd
;

157 
uöt32_t
 
h
;

158 
îr
;

160 i‡(!
	`°rˇ£cmp
(
°r
, "root")) {

161 *
ªs
 = 
TC_H_ROOT
;

165 i‡(!
	`°rˇ£cmp
(
°r
, "none")) {

166 *
ªs
 = 
TC_H_UNSPEC
;

170 i‡(!
	`°rˇ£cmp
(
°r
, "ingress")) {

171 *
ªs
 = 
TC_H_INGRESS
;

175 
h
 = 
	`°πoul
(
°r
, &
cﬁ⁄
, 16);

178 i‡(
cﬁ⁄
 =
°r
) {

179 
nŸ_a_numbî
:

180 i‡(*
cﬁ⁄
 == ':') {

182 
h
 = 0;

184 
size_t
 
Àn
;

185 
«me
[64] = { 0 };

187 i‡(!(
cﬁ⁄
 = 
	`°Ωbrk
(
°r
, ":"))) {

189  
	`˛assid_lookup
(
°r
, 
ªs
);

192 
Àn
 = 
cﬁ⁄
 - 
°r
;

193 i‡(
Àn
 >(
«me
))

194  -
NLE_INVAL
;

196 
	`mem˝y
(
«me
, 
°r
, 
Àn
);

198 i‡((
îr
 = 
	`˛assid_lookup
(
«me
, &
h
)) < 0)

199  
îr
;

202 i‡(
	`TC_H_MIN
(
h
))

203  -
NLE_INVAL
;

206 i‡(
cﬁ⁄
[1] == '\0')

207  -
NLE_INVAL
;

209 
upd©e
;

214 i‡(':' =*
cﬁ⁄
) {

216 i‡(
	`TC_H_MAJ
(
h
))

217  -
NLE_RANGE
;

218 
h
 <<= 16;

220 i‡('\0' =
cﬁ⁄
[1]) {

222 *
ªs
 = 
h
;

225 
uöt32_t
 
l
;

227 
upd©e
:

228 
l
 = 
	`°πoul
(
cﬁ⁄
+1, &
íd
, 16);

231 i‡(
	`TC_H_MAJ
(
l
))

232  -
NLE_RANGE
;

234 i‡('\0' !*
íd
)

235  -
NLE_INVAL
;

237 *
ªs
 = (
h
 | 
l
);

239 } i‡('\0' =*
cﬁ⁄
) {

241 *
ªs
 = 
h
;

243 
nŸ_a_numbî
;

246 
	}
}

248 
	$‰ì_nŸhög
(*
¨g
)

250 
	}
}

252 
	$˛assid_m≠_‰ì
(
˛assid_m≠
 *
m≠
)

254 i‡(!
m≠
)

257 
	`‰ì
(
m≠
->
«me
);

258 
	`‰ì
(
m≠
);

259 
	}
}

261 
	$˛ór_hashèbÀ
()

263 
i
;

265 
i
 = 0; i < 
CLASSID_NAME_HT_SIZ
; i++) {

266 
˛assid_m≠
 *
m≠
, *
n
;

268 
	`∆_li°_f‹_óch_íåy_ß„
(
m≠
, 
n
, &
tbl_«me
[
i
], 
«me_li°
)

269 
	`˛assid_m≠_‰ì
(
m≠
);

271 
	`∆_öô_li°_hód
(&
tbl_«me
[
i
]);

275 i‡(
id_roŸ
) {

276 
	`tde°roy
(&
id_roŸ
, &
‰ì_nŸhög
);

277 
id_roŸ
 = 
NULL
;

279 
	}
}

281 
	$˛assid_m≠_add
(
uöt32_t
 
˛assid
, c⁄° *
«me
)

283 
˛assid_m≠
 *
m≠
;

284 
n
;

286 i‡(!(
m≠
 = 
	`ˇŒoc
(1, (*map))))

287  -
NLE_NOMEM
;

289 
m≠
->
˛assid
 = classid;

290 
m≠
->
«me
 = 
	`°rdup
(name);

292 
n
 = 
	`˛assid_tbl_hash
(
m≠
->
«me
);

293 
	`∆_li°_add_èû
(&
m≠
->
«me_li°
, &
tbl_«me
[
n
]);

295 i‡(!
	`t£¨ch
((*Ë
m≠
, &
id_roŸ
, &
com∑ª_id
)) {

296 
	`˛assid_m≠_‰ì
(
m≠
);

297  -
NLE_NOMEM
;

301 
	}
}

311 
	$π∆_tc_ªad_˛assid_fûe
()

313 
time_t
 
œ°_ªad
;

314 
°©
 
°
;

315 
buf
[256], *
∑th
;

316 
FILE
 *
fd
;

317 
îr
;

319 i‡(
	`buûd_sysc⁄f_∑th
(&
∑th
, "classid") < 0)

320  -
NLE_NOMEM
;

323 i‡(
	`°©
(
∑th
, &
°
) == 0) {

325 i‡(
œ°_ªad
 =
°
.
°_mtime
) {

326 
îr
 = 0;

327 
îrout
;

331 i‡(!(
fd
 = 
	`f›í
(
∑th
, "r"))) {

332 
îr
 = -
	`∆_sy£º2∆îr
(
î∫o
);

333 
îrout
;

336 
	`˛ór_hashèbÀ
();

338 
	`fgës
(
buf
, (buf), 
fd
)) {

339 
uöt32_t
 
˛assid
;

340 *
±r
, *
tok
;

343 i‡(*
buf
 == '#' || *buf == '\n' || *buf == '\r')

347 i‡(!(
tok
 = 
	`°πok_r
(
buf
, " \t", &
±r
))) {

348 
îr
 = -
NLE_INVAL
;

349 
îrout_˛o£
;

352 i‡((
îr
 = 
	`π∆_tc_°r2h™dÀ
(
tok
, &
˛assid
)) < 0)

353 
îrout_˛o£
;

355 i‡(!(
tok
 = 
	`°πok_r
(
NULL
, " \t\n\r#", &
±r
))) {

356 
îr
 = -
NLE_INVAL
;

357 
îrout_˛o£
;

360 i‡((
îr
 = 
	`˛assid_m≠_add
(
˛assid
, 
tok
)) < 0)

361 
îrout_˛o£
;

364 
îr
 = 0;

365 
œ°_ªad
 = 
°
.
°_mtime
;

367 
îrout_˛o£
:

368 
	`f˛o£
(
fd
);

369 
îrout
:

370 
	`‰ì
(
∑th
);

372  
îr
;

374 
	}
}

376 
	$π∆_˛assid_gíî©e
(c⁄° *
«me
, 
uöt32_t
 *
ªsu…
, uöt32_à
∑ª¡
)

378 
uöt32_t
 
ba£
 = 0x4000 << 16;

379 
uöt32_t
 
˛assid
;

380 *
∑th
;

381 
FILE
 *
fd
;

382 
îr
 = 0;

384 i‡(
∑ª¡
 =
TC_H_ROOT
 ||Ö¨íà=
TC_H_INGRESS
) {

386 
ba£
 += (1 << 16);

387 i‡(
ba£
 =
	`TC_H_MAJ
(
TC_H_ROOT
))

388 
ba£
 = 0x4000 << 16;

389 } 
	`«me_lookup
(
ba£
));

391 
˛assid
 = 
ba£
;

393 
˛assid
 = 
	`TC_H_MAJ
(
∑ª¡
);

395 i‡(
	`TC_H_MIN
(++
˛assid
Ë=TC_H_MIN(
TC_H_ROOT
))

396  -
NLE_RANGE
;

397 } 
	`«me_lookup
(
˛assid
));

400 
	`NL_DBG
(2, "Gíî©edÇew cœssid %#x\n", 
˛assid
);

402 i‡(
	`buûd_sysc⁄f_∑th
(&
∑th
, "classid") < 0)

403  -
NLE_NOMEM
;

405 i‡(!(
fd
 = 
	`f›í
(
∑th
, "a"))) {

406 
îr
 = -
	`∆_sy£º2∆îr
(
î∫o
);

407 
îrout
;

410 
	`Ârötf
(
fd
, "%x:", 
	`TC_H_MAJ
(
˛assid
) >> 16);

411 i‡(
	`TC_H_MIN
(
˛assid
))

412 
	`Ârötf
(
fd
, "%x", 
	`TC_H_MIN
(
˛assid
));

413 
	`Ârötf
(
fd
, "\t\t\t%s\n", 
«me
);

415 
	`f˛o£
(
fd
);

417 i‡((
îr
 = 
	`˛assid_m≠_add
(
˛assid
, 
«me
)) < 0) {

423 
	`π∆_tc_ªad_˛assid_fûe
();

426 *
ªsu…
 = 
˛assid
;

427 
îr
 = 0;

428 
îrout
:

429 
	`‰ì
(
∑th
);

431  
îr
;

432 
	}
}

436 
__öô
 
	$˛assid_öô
()

438 
îr
, 
i
;

440 
i
 = 0; i < 
CLASSID_NAME_HT_SIZ
; i++)

441 
	`∆_öô_li°_hód
(&
tbl_«me
[
i
]);

443 i‡((
îr
 = 
	`π∆_tc_ªad_˛assid_fûe
()) < 0)

444 
	`NL_DBG
(1, "FaûedÅÿªad cœssid fûe: %s\n", 
	`∆_gëîr‹
(
îr
));

445 
	}
}

447 
	$‰ì_m≠
(*
m≠
) {

448 
	`‰ì
(((
˛assid_m≠
 *)
m≠
)->
«me
);

449 
	`‰ì
(
m≠
);

450 
	}
};

452 
__exô
 
	$˛assid_exô
()

454 
	`tde°roy
(
id_roŸ
, 
‰ì_m≠
);

455 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/cls.c

18 
	~<√éök-¥iv©e/√éök.h
>

19 
	~<√éök-¥iv©e/tc.h
>

20 
	~<√éök/√éök.h
>

21 
	~<√éök/utûs.h
>

22 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

23 
	~<√éök/rouã/˛assifõr.h
>

24 
	~<√éök/rouã/lök.h
>

27 
	#CLS_ATTR_PRIO
 (
TCA_ATTR_MAX
 << 1)

	)

28 
	#CLS_ATTR_PROTOCOL
 (
TCA_ATTR_MAX
 << 2)

	)

31 
∆_obje˘_›s
 
	g˛s_obj_›s
;

32 
∆_ˇche_›s
 
	gπ∆_˛s_›s
;

35 
	$˛s_buûd
(
π∆_˛s
 *
˛s
, 
ty≥
, 
Êags
,

36 
∆_msg
 **
ªsu…
)

38 
îr
, 
¥io
, 
¥Ÿo
;

39 
tcmsg
 *
tchdr
;

40 
uöt32_t
 
ªquúed
 = 
TCA_ATTR_IFINDEX
;

42 i‡((
˛s
->
˚_mask
 & 
ªquúed
) !=Ñequired) {

43 
	`APPBUG
("ifindex must be specified");

44  -
NLE_MISSING_ATTR
;

47 
îr
 = 
	`π∆_tc_msg_buûd
(
	`TC_CAST
(
˛s
), 
ty≥
, 
Êags
, 
ªsu…
);

48 i‡(
îr
 < 0)

49  
îr
;

51 
tchdr
 = 
	`∆msg_d©a
(
	`∆msg_hdr
(*
ªsu…
));

52 
¥io
 = 
	`π∆_˛s_gë_¥io
(
˛s
);

53 
¥Ÿo
 = 
	`π∆_˛s_gë_¥Ÿocﬁ
(
˛s
);

54 
tchdr
->
tcm_öfo
 = 
	`TC_H_MAKE
(
¥io
 << 16, 
	`ht⁄s
(
¥Ÿo
));

57 
	}
}

64 
π∆_˛s
 *
	$π∆_˛s_Æloc
()

66 
π∆_tc
 *
tc
;

68 
tc
 = 
	`TC_CAST
(
	`∆_obje˘_Æloc
(&
˛s_obj_›s
));

69 i‡(
tc
)

70 
tc
->
tc_ty≥
 = 
RTNL_TC_TYPE_CLS
;

72  (
π∆_˛s
 *Ë
tc
;

73 
	}
}

75 
	$π∆_˛s_put
(
π∆_˛s
 *
˛s
)

77 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
˛s
);

78 
	}
}

87 
	$π∆_˛s_£t_¥io
(
π∆_˛s
 *
˛s
, 
uöt16_t
 
¥io
)

89 
˛s
->
c_¥io
 = 
¥io
;

90 
˛s
->
˚_mask
 |
CLS_ATTR_PRIO
;

91 
	}
}

93 
uöt16_t
 
	$π∆_˛s_gë_¥io
(
π∆_˛s
 *
˛s
)

95 i‡(
˛s
->
˚_mask
 & 
CLS_ATTR_PRIO
)

96  
˛s
->
c_¥io
;

99 
	}
}

101 
	$π∆_˛s_£t_¥Ÿocﬁ
(
π∆_˛s
 *
˛s
, 
uöt16_t
 
¥Ÿocﬁ
)

103 
˛s
->
c_¥Ÿocﬁ
 = 
¥Ÿocﬁ
;

104 
˛s
->
˚_mask
 |
CLS_ATTR_PROTOCOL
;

105 
	}
}

107 
uöt16_t
 
	$π∆_˛s_gë_¥Ÿocﬁ
(
π∆_˛s
 *
˛s
)

109 i‡(
˛s
->
˚_mask
 & 
CLS_ATTR_PROTOCOL
)

110  
˛s
->
c_¥Ÿocﬁ
;

112  
ETH_P_ALL
;

113 
	}
}

137 
	$π∆_˛s_buûd_add_ªque°
(
π∆_˛s
 *
˛s
, 
Êags
,

138 
∆_msg
 **
ªsu…
)

140 i‡(!(
Êags
 & 
NLM_F_CREATE
Ë&& !(
˛s
->
˚_mask
 & 
CLS_ATTR_PRIO
)) {

141 
	`APPBUG
("prio must be specified ifÇotáÇew classifier");

142  -
NLE_MISSING_ATTR
;

145  
	`˛s_buûd
(
˛s
, 
RTM_NEWTFILTER
, 
Êags
, 
ªsu…
);

146 
	}
}

184 
	$π∆_˛s_add
(
∆_sock
 *
sk
, 
π∆_˛s
 *
˛s
, 
Êags
)

186 
∆_msg
 *
msg
;

187 
îr
;

189 i‡((
îr
 = 
	`π∆_˛s_buûd_add_ªque°
(
˛s
, 
Êags
, &
msg
)) < 0)

190  
îr
;

192  
	`∆_£nd_sync
(
sk
, 
msg
);

193 
	}
}

208 
	$π∆_˛s_buûd_ch™ge_ªque°
(
π∆_˛s
 *
˛s
, 
Êags
,

209 
∆_msg
 **
ªsu…
)

211  
	`˛s_buûd
(
˛s
, 
RTM_NEWTFILTER
, 
NLM_F_REPLACE
 | 
Êags
, 
ªsu…
);

212 
	}
}

226 
	$π∆_˛s_ch™ge
(
∆_sock
 *
sk
, 
π∆_˛s
 *
˛s
, 
Êags
)

228 
∆_msg
 *
msg
;

229 
îr
;

231 i‡((
îr
 = 
	`π∆_˛s_buûd_ch™ge_ªque°
(
˛s
, 
Êags
, &
msg
)) < 0)

232  
îr
;

234  
	`∆_£nd_sync
(
sk
, 
msg
);

235 
	}
}

251 
	$π∆_˛s_buûd_dñëe_ªque°
(
π∆_˛s
 *
˛s
, 
Êags
,

252 
∆_msg
 **
ªsu…
)

254 
uöt32_t
 
ªquúed
 = 
CLS_ATTR_PRIO
;

256 i‡((
˛s
->
˚_mask
 & 
ªquúed
) !=Ñequired) {

257 
	`APPBUG
("prio must be specified");

258  -
NLE_MISSING_ATTR
;

261  
	`˛s_buûd
(
˛s
, 
RTM_DELTFILTER
, 
Êags
, 
ªsu…
);

262 
	}
}

295 
	$π∆_˛s_dñëe
(
∆_sock
 *
sk
, 
π∆_˛s
 *
˛s
, 
Êags
)

297 
∆_msg
 *
msg
;

298 
îr
;

300 i‡((
îr
 = 
	`π∆_˛s_buûd_dñëe_ªque°
(
˛s
, 
Êags
, &
msg
)) < 0)

301  
îr
;

303  
	`∆_£nd_sync
(
sk
, 
msg
);

304 
	}
}

327 
	$π∆_˛s_Æloc_ˇche
(
∆_sock
 *
sk
, 
ifödex
, 
uöt32_t
 
∑ª¡
, 
∆_ˇche
 **
ªsu…
)

329 
∆_ˇche
 * 
ˇche
;

330 
îr
;

332 i‡(!(
ˇche
 = 
	`∆_ˇche_Æloc
(&
π∆_˛s_›s
)))

333  -
NLE_NOMEM
;

335 
ˇche
->
c_ürg1
 = 
ifödex
;

336 
ˇche
->
c_ürg2
 = 
∑ª¡
;

338 i‡(
sk
 && (
îr
 = 
	`∆_ˇche_ªfûl
(sk, 
ˇche
)) < 0) {

339 
	`∆_ˇche_‰ì
(
ˇche
);

340  
îr
;

343 *
ªsu…
 = 
ˇche
;

345 
	}
}

349 
	$˛s_dump_löe
(
π∆_tc
 *
tc
, 
∆_dump_∑øms
 *
p
)

351 
π∆_˛s
 *
˛s
 = (π∆_˛†*Ë
tc
;

352 
buf
[32];

354 
	`∆_dump
(
p
, "Öriÿ%uÖrŸocﬁ %s", 
˛s
->
c_¥io
,

355 
	`∆_ëhî_¥Ÿo2°r
(
˛s
->
c_¥Ÿocﬁ
, 
buf
, (buf)));

356 
	}
}

358 
	$˛s_msg_∑r£r
(
∆_ˇche_›s
 *
›s
, 
sockaddr_∆
 *
who
,

359 
∆msghdr
 *
∆h
, 
∆_∑r£r_∑øm
 *
µ
)

361 
π∆_˛s
 *
˛s
;

362 
îr
;

364 i‡(!(
˛s
 = 
	`π∆_˛s_Æloc
()))

365  -
NLE_NOMEM
;

367 i‡((
îr
 = 
	`π∆_tc_msg_∑r£
(
∆h
, 
	`TC_CAST
(
˛s
))) < 0)

368 
îrout
;

370 
˛s
->
c_¥io
 = 
	`TC_H_MAJ
(˛s->
c_öfo
) >> 16;

371 i‡(
˛s
->
c_¥io
)

372 
˛s
->
˚_mask
 |
CLS_ATTR_PRIO
;

373 
˛s
->
c_¥Ÿocﬁ
 = 
	`¡ohs
(
	`TC_H_MIN
(˛s->
c_öfo
));

374 i‡(
˛s
->
c_¥Ÿocﬁ
)

375 
˛s
->
˚_mask
 |
CLS_ATTR_PROTOCOL
;

377 
îr
 = 
µ
->
	`µ_cb
(
	`OBJ_CAST
(
˛s
),Öp);

378 
îrout
:

379 
	`π∆_˛s_put
(
˛s
);

381  
îr
;

382 
	}
}

384 
	$˛s_ªque°_upd©e
(
∆_ˇche
 *
ˇche
, 
∆_sock
 *
sk
)

386 
tcmsg
 
tchdr
 = {

387 .
tcm_Ámûy
 = 
AF_UNSPEC
,

388 .
tcm_ifödex
 = 
ˇche
->
c_ürg1
,

389 .
tcm_∑ª¡
 = 
ˇche
->
c_ürg2
,

392  
	`∆_£nd_sim∂e
(
sk
, 
RTM_GETTFILTER
, 
NLM_F_DUMP
, &
tchdr
,

393 (
tchdr
));

394 
	}
}

396 
π∆_tc_ty≥_›s
 
	g˛s_›s
 = {

397 .
â_ty≥
 = 
RTNL_TC_TYPE_CLS
,

398 .
	gâ_dump_¥efix
 = "cls",

399 .
	gâ_dump
 = {

400 [
NL_DUMP_LINE
] = 
˛s_dump_löe
,

404 
∆_ˇche_›s
 
	gπ∆_˛s_›s
 = {

405 .
co_«me
 = "route/cls",

406 .
	gco_hdrsize
 = (
tcmsg
),

407 .
	gco_msgty≥s
 = {

408 { 
RTM_NEWTFILTER
, 
NL_ACT_NEW
, "new" },

409 { 
RTM_DELTFILTER
, 
NL_ACT_DEL
, "del" },

410 { 
RTM_GETTFILTER
, 
NL_ACT_GET
, "get" },

411 
END_OF_MSGTYPES_LIST
,

413 .
	gco_¥Ÿocﬁ
 = 
NETLINK_ROUTE
,

414 .
	gco_groups
 = 
tc_groups
,

415 .
	gco_ªque°_upd©e
 = 
˛s_ªque°_upd©e
,

416 .
	gco_msg_∑r£r
 = 
˛s_msg_∑r£r
,

417 .
	gco_obj_›s
 = &
˛s_obj_›s
,

420 
∆_obje˘_›s
 
	g˛s_obj_›s
 = {

421 .
oo_«me
 = "route/cls",

422 .
	goo_size
 = (
π∆_˛s
),

423 .
	goo_‰ì_d©a
 = 
π∆_tc_‰ì_d©a
,

424 .
	goo_˛⁄e
 = 
π∆_tc_˛⁄e
,

425 .
	goo_dump
 = {

426 [
NL_DUMP_LINE
] = 
π∆_tc_dump_löe
,

427 [
NL_DUMP_DETAILS
] = 
π∆_tc_dump_dëaûs
,

428 [
NL_DUMP_STATS
] = 
π∆_tc_dump_°©s
,

430 .
	goo_com∑ª
 = 
π∆_tc_com∑ª
,

431 .
	goo_id_©ås
 = (
TCA_ATTR_IFINDEX
 | 
TCA_ATTR_HANDLE
),

434 
__öô
 
	$˛s_öô
()

436 
	`π∆_tc_ty≥_ªgi°î
(&
˛s_›s
);

437 
	`∆_ˇche_mngt_ªgi°î
(&
π∆_˛s_›s
);

438 
	}
}

440 
__exô
 
	$˛s_exô
()

442 
	`∆_ˇche_mngt_uƒegi°î
(&
π∆_˛s_›s
);

443 
	`π∆_tc_ty≥_uƒegi°î
(&
˛s_›s
);

444 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/cls/basic.c

25 
	~<√éök-¥iv©e/√éök.h
>

26 
	~<√éök-¥iv©e/tc.h
>

27 
	~<√éök/√éök.h
>

28 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

29 
	~<√éök/rouã/˛assifõr.h
>

30 
	~<√éök/rouã/a˘i⁄.h
>

31 
	~<√éök/rouã/˛s/basic.h
>

32 
	~<√éök/rouã/˛s/em©ch.h
>

34 
	sπ∆_basic


36 
uöt32_t
 
	mb_èrgë
;

37 
π∆_em©ch_åì
 * 
	mb_em©ch
;

38 
	mb_mask
;

39 
π∆_a˘
 * 
	mb_a˘
;

43 
	#BASIC_ATTR_TARGET
 0x001

	)

44 
	#BASIC_ATTR_EMATCH
 0x002

	)

45 
	#BASIC_ATTR_ACTION
 0x004

	)

48 
∆a_pﬁicy
 
	gbasic_pﬁicy
[
TCA_BASIC_MAX
+1] = {

49 [
TCA_BASIC_CLASSID
] = { .
ty≥
 = 
NLA_U32
 },

50 [
TCA_BASIC_EMATCHES
] = { .
ty≥
 = 
NLA_NESTED
 },

53 
	$basic_˛⁄e
(*
_d°
, *
_§c
)

55  -
NLE_OPNOTSUPP
;

56 
	}
}

58 
	$basic_‰ì_d©a
(
π∆_tc
 *
tc
, *
d©a
)

60 
π∆_basic
 *
b
 = 
d©a
;

62 i‡(!
b
)

65 i‡(
b
->
b_a˘
)

66 
	`π∆_a˘_put_Æl
(&
b
->
b_a˘
);

67 
	`π∆_em©ch_åì_‰ì
(
b
->
b_em©ch
);

68 
	}
}

70 
	$basic_msg_∑r£r
(
π∆_tc
 *
tc
, *
d©a
)

72 
∆©å
 *
tb
[
TCA_BASIC_MAX
 + 1];

73 
π∆_basic
 *
b
 = 
d©a
;

74 
îr
;

76 
îr
 = 
	`tˇ_∑r£
(
tb
, 
TCA_BASIC_MAX
, 
tc
, 
basic_pﬁicy
);

77 i‡(
îr
 < 0)

78  
îr
;

80 i‡(
tb
[
TCA_BASIC_CLASSID
]) {

81 
b
->
b_èrgë
 = 
	`∆a_gë_u32
(
tb
[
TCA_BASIC_CLASSID
]);

82 
b
->
b_mask
 |
BASIC_ATTR_TARGET
;

85 i‡(
tb
[
TCA_BASIC_EMATCHES
]) {

86 i‡((
îr
 = 
	`π∆_em©ch_∑r£_©å
(
tb
[
TCA_BASIC_EMATCHES
],

87 &
b
->
b_em©ch
)) < 0)

88  
îr
;

90 i‡(
b
->
b_em©ch
)

91 
b
->
b_mask
 |
BASIC_ATTR_EMATCH
;

93 i‡(
tb
[
TCA_BASIC_ACT
]) {

94 
b
->
b_mask
 |
BASIC_ATTR_ACTION
;

95 
îr
 = 
	`π∆_a˘_∑r£
(&
b
->
b_a˘
, 
tb
[
TCA_BASIC_ACT
]);

96 i‡(
îr
)

97  
îr
;

101 
	}
}

103 
	$basic_dump_löe
(
π∆_tc
 *
tc
, *
d©a
,

104 
∆_dump_∑øms
 *
p
)

106 
π∆_basic
 *
b
 = 
d©a
;

107 
buf
[32];

109 i‡(!
b
)

112 i‡(
b
->
b_mask
 & 
BASIC_ATTR_EMATCH
)

113 
	`∆_dump
(
p
, "Ématch");

115 
	`∆_dump
(
p
, " match-all");

117 i‡(
b
->
b_mask
 & 
BASIC_ATTR_TARGET
)

118 
	`∆_dump
(
p
, "Åarget %s",

119 
	`π∆_tc_h™dÀ2°r
(
b
->
b_èrgë
, 
buf
, (buf)));

120 
	}
}

122 
	$basic_dump_dëaûs
(
π∆_tc
 *
tc
, *
d©a
,

123 
∆_dump_∑øms
 *
p
)

125 
π∆_basic
 *
b
 = 
d©a
;

127 i‡(!
b
)

130 i‡(
b
->
b_mask
 & 
BASIC_ATTR_EMATCH
) {

131 
	`∆_dump_löe
(
p
, "Ématch ");

132 
	`π∆_em©ch_åì_dump
(
b
->
b_em©ch
, 
p
);

134 
	`∆_dump
(
p
, "no options.\n");

135 
	}
}

137 
	$basic_msg_fûl
(
π∆_tc
 *
tc
, *
d©a
,

138 
∆_msg
 *
msg
)

140 
π∆_basic
 *
b
 = 
d©a
;

142 i‡(!
b
)

145 i‡(
b
->
b_mask
 & 
BASIC_ATTR_TARGET
)

146 
	`NLA_PUT_U32
(
msg
, 
TCA_BASIC_CLASSID
, 
b
->
b_èrgë
);

148 i‡(
b
->
b_mask
 & 
BASIC_ATTR_EMATCH
 &&

149 
	`π∆_em©ch_fûl_©å
(
msg
, 
TCA_BASIC_EMATCHES
, 
b
->
b_em©ch
) < 0)

150 
∆a_put_Áûuª
;

152 i‡(
b
->
b_mask
 & 
BASIC_ATTR_ACTION
) {

153 
îr
;

155 
îr
 = 
	`π∆_a˘_fûl
(
msg
, 
TCA_BASIC_ACT
, 
b
->
b_a˘
);

156 i‡(
îr
)

157  
îr
;

162 
∆a_put_Áûuª
:

163  -
NLE_NOMEM
;

164 
	}
}

171 
	$π∆_basic_£t_èrgë
(
π∆_˛s
 *
˛s
, 
uöt32_t
 
èrgë
)

173 
π∆_basic
 *
b
;

175 i‡(!(
b
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

178 
b
->
b_èrgë
 = 
èrgë
;

179 
b
->
b_mask
 |
BASIC_ATTR_TARGET
;

180 
	}
}

182 
uöt32_t
 
	$π∆_basic_gë_èrgë
(
π∆_˛s
 *
˛s
)

184 
π∆_basic
 *
b
;

186 i‡(!(
b
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

189  
b
->
b_èrgë
;

190 
	}
}

192 
	$π∆_basic_£t_em©ch
(
π∆_˛s
 *
˛s
, 
π∆_em©ch_åì
 *
åì
)

194 
π∆_basic
 *
b
;

196 i‡(!(
b
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

199 i‡(
b
->
b_em©ch
) {

200 
	`π∆_em©ch_åì_‰ì
(
b
->
b_em©ch
);

201 
b
->
b_mask
 &~
BASIC_ATTR_EMATCH
;

204 
b
->
b_em©ch
 = 
åì
;

206 i‡(
åì
)

207 
b
->
b_mask
 |
BASIC_ATTR_EMATCH
;

208 
	}
}

210 
π∆_em©ch_åì
 *
	$π∆_basic_gë_em©ch
(
π∆_˛s
 *
˛s
)

212 
π∆_basic
 *
b
;

214 i‡(!(
b
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

215  
NULL
;

217  
b
->
b_em©ch
;

218 
	}
}

220 
	$π∆_basic_add_a˘i⁄
(
π∆_˛s
 *
˛s
, 
π∆_a˘
 *
a˘
)

222 
π∆_basic
 *
b
;

224 i‡(!
a˘
)

227 i‡(!(
b
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

228  -
NLE_NOMEM
;

230 
b
->
b_mask
 |
BASIC_ATTR_ACTION
;

232 
	`π∆_a˘_gë
(
a˘
);

233  
	`π∆_a˘_≠≥nd
(&
b
->
b_a˘
, 
a˘
);

234 
	}
}

236 
	$π∆_basic_dñ_a˘i⁄
(
π∆_˛s
 *
˛s
, 
π∆_a˘
 *
a˘
)

238 
π∆_basic
 *
b
;

239 
ªt
;

241 i‡(!
a˘
)

244 i‡(!(
b
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

245  -
NLE_NOMEM
;

247 i‡(!(
b
->
b_mask
 & 
BASIC_ATTR_ACTION
))

248  -
NLE_INVAL
;

249 
ªt
 = 
	`π∆_a˘_ªmove
(&
b
->
b_a˘
, 
a˘
);

250 i‡(
ªt
)

251  
ªt
;

253 i‡(!
b
->
b_a˘
)

254 
b
->
b_mask
 &~
BASIC_ATTR_ACTION
;

255 
	`π∆_a˘_put
(
a˘
);

257 
	}
}

260 
π∆_tc_›s
 
	gbasic_›s
 = {

261 .
to_köd
 = "basic",

262 .
	gto_ty≥
 = 
RTNL_TC_TYPE_CLS
,

263 .
	gto_size
 = (
π∆_basic
),

264 .
	gto_msg_∑r£r
 = 
basic_msg_∑r£r
,

265 .
	gto_˛⁄e
 = 
basic_˛⁄e
,

266 .
	gto_‰ì_d©a
 = 
basic_‰ì_d©a
,

267 .
	gto_msg_fûl
 = 
basic_msg_fûl
,

268 .
	gto_dump
 = {

269 [
NL_DUMP_LINE
] = 
basic_dump_löe
,

270 [
NL_DUMP_DETAILS
] = 
basic_dump_dëaûs
,

274 
__öô
 
	$basic_öô
()

276 
	`π∆_tc_ªgi°î
(&
basic_›s
);

277 
	}
}

279 
__exô
 
	$basic_exô
()

281 
	`π∆_tc_uƒegi°î
(&
basic_›s
);

282 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/cls/cgroup.c

19 
	~<√éök-¥iv©e/√éök.h
>

20 
	~<√éök-¥iv©e/tc.h
>

21 
	~<√éök/√éök.h
>

22 
	~<√éök/©å.h
>

23 
	~<√éök/utûs.h
>

24 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

25 
	~<√éök/rouã/˛assifõr.h
>

26 
	~<√éök/rouã/˛s/cgroup.h
>

27 
	~<√éök/rouã/˛s/em©ch.h
>

30 
	#CGROUP_ATTR_EMATCH
 0x001

	)

33 
∆a_pﬁicy
 
	gcgroup_pﬁicy
[
TCA_CGROUP_MAX
+1] = {

34 [
TCA_CGROUP_EMATCHES
] = { .
ty≥
 = 
NLA_NESTED
 },

37 
	$cgroup_˛⁄e
(*
d°
, *
§c
)

39  -
NLE_OPNOTSUPP
;

40 
	}
}

42 
	$cgroup_‰ì_d©a
(
π∆_tc
 *
tc
, *
d©a
)

44 
π∆_cgroup
 *
c
 = 
d©a
;

46 i‡(!
c
)

49 
	`π∆_em©ch_åì_‰ì
(
c
->
cg_em©ch
);

50 
	}
}

52 
	$cgroup_msg_∑r£r
(
π∆_tc
 *
tc
, *
d©a
)

54 
∆©å
 *
tb
[
TCA_CGROUP_MAX
 + 1];

55 
π∆_cgroup
 *
c
 = 
d©a
;

56 
îr
;

58 
îr
 = 
	`tˇ_∑r£
(
tb
, 
TCA_CGROUP_MAX
, 
tc
, 
cgroup_pﬁicy
);

59 i‡(
îr
 < 0)

60  
îr
;

62 i‡(
tb
[
TCA_CGROUP_EMATCHES
]) {

63 i‡((
îr
 = 
	`π∆_em©ch_∑r£_©å
(
tb
[
TCA_CGROUP_EMATCHES
],

64 &
c
->
cg_em©ch
)) < 0)

65  
îr
;

66 
c
->
cg_mask
 |
CGROUP_ATTR_EMATCH
;

70 
TODO
:

71 
TCA_CGROUP_ACT
,

72 
TCA_CGROUP_POLICE
,

76 
	}
}

78 
	$cgroup_dump_löe
(
π∆_tc
 *
tc
, *
d©a
,

79 
∆_dump_∑øms
 *
p
)

81 
π∆_cgroup
 *
c
 = 
d©a
;

83 i‡(!
c
)

86 i‡(
c
->
cg_mask
 & 
CGROUP_ATTR_EMATCH
)

87 
	`∆_dump
(
p
, "Ématch");

89 
	`∆_dump
(
p
, " match-all");

90 
	}
}

92 
	$cgroup_dump_dëaûs
(
π∆_tc
 *
tc
, *
d©a
,

93 
∆_dump_∑øms
 *
p
)

95 
π∆_cgroup
 *
c
 = 
d©a
;

97 i‡(!
c
)

100 i‡(
c
->
cg_mask
 & 
CGROUP_ATTR_EMATCH
) {

101 
	`∆_dump_löe
(
p
, "Ématch ");

103 i‡(
c
->
cg_em©ch
)

104 
	`π∆_em©ch_åì_dump
(
c
->
cg_em©ch
, 
p
);

106 
	`∆_dump
(
p
, "<noÅree>");

108 
	`∆_dump
(
p
, "no options");

109 
	}
}

111 
	$cgroup_fûl_msg
(
π∆_tc
 *
tc
, *
d©a
,

112 
∆_msg
 *
msg
)

114 
π∆_cgroup
 *
c
 = 
d©a
;

116 i‡(!
c
)

117 
	`BUG
();

119 i‡(!(
tc
->
˚_mask
 & 
TCA_ATTR_HANDLE
))

120  -
NLE_MISSING_ATTR
;

122 i‡(
c
->
cg_mask
 & 
CGROUP_ATTR_EMATCH
)

123  
	`π∆_em©ch_fûl_©å
(
msg
, 
TCA_CGROUP_EMATCHES
,

124 
c
->
cg_em©ch
);

127 
	}
}

135 
	$π∆_cgroup_£t_em©ch
(
π∆_˛s
 *
˛s
, 
π∆_em©ch_åì
 *
åì
)

137 
π∆_cgroup
 *
c
;

139 i‡(!(
c
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

140 
	`BUG
();

142 i‡(
c
->
cg_em©ch
) {

143 
	`π∆_em©ch_åì_‰ì
(
c
->
cg_em©ch
);

144 
c
->
cg_mask
 &~
CGROUP_ATTR_EMATCH
;

147 
c
->
cg_em©ch
 = 
åì
;

149 i‡(
åì
)

150 
c
->
cg_mask
 |
CGROUP_ATTR_EMATCH
;

151 
	}
}

153 
π∆_em©ch_åì
 *
	$π∆_cgroup_gë_em©ch
(
π∆_˛s
 *
˛s
)

155 
π∆_cgroup
 *
c
;

157 i‡(!(
c
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

158 
	`BUG
();

160  
c
->
cg_em©ch
;

161 
	}
}

165 
π∆_tc_›s
 
	gcgroup_›s
 = {

166 .
to_köd
 = "cgroup",

167 .
	gto_ty≥
 = 
RTNL_TC_TYPE_CLS
,

168 .
	gto_size
 = (
π∆_cgroup
),

169 .
	gto_˛⁄e
 = 
cgroup_˛⁄e
,

170 .
	gto_msg_∑r£r
 = 
cgroup_msg_∑r£r
,

171 .
	gto_‰ì_d©a
 = 
cgroup_‰ì_d©a
,

172 .
	gto_msg_fûl
 = 
cgroup_fûl_msg
,

173 .
	gto_dump
 = {

174 [
NL_DUMP_LINE
] = 
cgroup_dump_löe
,

175 [
NL_DUMP_DETAILS
] = 
cgroup_dump_dëaûs
,

179 
__öô
 
	$cgroup_öô
()

181 
	`π∆_tc_ªgi°î
(&
cgroup_›s
);

182 
	}
}

184 
__exô
 
	$cgroup_exô
()

186 
	`π∆_tc_uƒegi°î
(&
cgroup_›s
);

187 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/cls/ematch.c

19 
	~<√éök-¥iv©e/√éök.h
>

20 
	~<√éök-¥iv©e/tc.h
>

21 
	~<√éök/√éök.h
>

22 
	~<√éök/rouã/˛assifõr.h
>

23 
	~<√éök/rouã/˛s/em©ch.h
>

24 
	~<√éök/rouã/˛s/em©ch/cmp.h
>

26 
	~"em©ch_sy¡ax.h
"

27 
	~"em©ch_gømm¨.h
"

34 
NL_LIST_HEAD
(
em©ch_›s_li°
);

45 
	$π∆_em©ch_ªgi°î
(
π∆_em©ch_›s
 *
›s
)

47 i‡(
	`π∆_em©ch_lookup_›s
(
›s
->
eo_köd
))

48  -
NLE_EXIST
;

50 
	`NL_DBG
(1, "em©ch moduÀ \"%s\"Ñegi°îed\n", 
›s
->
eo_«me
);

52 
	`∆_li°_add_èû
(&
›s
->
eo_li°
, &
em©ch_›s_li°
);

55 
	}
}

65 
π∆_em©ch_›s
 *
	$π∆_em©ch_lookup_›s
(
köd
)

67 
π∆_em©ch_›s
 *
›s
;

69 
	`∆_li°_f‹_óch_íåy
(
›s
, &
em©ch_›s_li°
, 
eo_li°
)

70 i‡(
›s
->
eo_köd
 =
köd
)

71  
›s
;

73  
NULL
;

74 
	}
}

84 
π∆_em©ch_›s
 *
	$π∆_em©ch_lookup_›s_by_«me
(c⁄° *
«me
)

86 
π∆_em©ch_›s
 *
›s
;

88 
	`∆_li°_f‹_óch_íåy
(
›s
, &
em©ch_›s_li°
, 
eo_li°
)

89 i‡(!
	`°rˇ£cmp
(
›s
->
eo_«me
, 
«me
))

90  
›s
;

92  
NULL
;

93 
	}
}

108 
π∆_em©ch
 *
	$π∆_em©ch_Æloc
()

110 
π∆_em©ch
 *
e
;

112 i‡(!(
e
 = 
	`ˇŒoc
(1, (*e))))

113  
NULL
;

115 
	`NL_DBG
(2, "ÆloˇãdÉm©ch %p\n", 
e
);

117 
	`NL_INIT_LIST_HEAD
(&
e
->
e_li°
);

118 
	`NL_INIT_LIST_HEAD
(&
e
->
e_chûds
);

120  
e
;

121 
	}
}

130 
	$π∆_em©ch_add_chûd
(
π∆_em©ch
 *
∑ª¡
,

131 
π∆_em©ch
 *
chûd
)

133 i‡(
∑ª¡
->
e_köd
 !
TCF_EM_CONTAINER
)

134  -
NLE_OPNOTSUPP
;

136 
	`NL_DBG
(2, "addedÉmatch %p \"%s\"Åo container %p\n",

137 
chûd
, chûd->
e_›s
->
eo_«me
, 
∑ª¡
);

139 
	`∆_li°_add_èû
(&
chûd
->
e_li°
, &
∑ª¡
->
e_chûds
);

142 
	}
}

148 
	$π∆_em©ch_u∆ök
(
π∆_em©ch
 *
em©ch
)

150 
	`NL_DBG
(2, "u∆ökedÉm©ch %∞‰ományÜi°s\n", 
em©ch
);

152 i‡(!
	`∆_li°_em±y
(&
em©ch
->
e_chûds
))

153 
	`NL_DBG
(1, "warning:Ématch %p with childs was unlinked\n",

154 
em©ch
);

156 
	`∆_li°_dñ
(&
em©ch
->
e_li°
);

157 
	`∆_öô_li°_hód
(&
em©ch
->
e_li°
);

158 
	}
}

160 
	$π∆_em©ch_‰ì
(
π∆_em©ch
 *
em©ch
)

162 
	`NL_DBG
(2, "‰ìdÉm©ch %p\n", 
em©ch
);

163 
	`π∆_em©ch_u∆ök
(
em©ch
);

164 
	`‰ì
(
em©ch
->
e_d©a
);

165 
	`‰ì
(
em©ch
);

166 
	}
}

168 
	$π∆_em©ch_£t_›s
(
π∆_em©ch
 *
em©ch
, 
π∆_em©ch_›s
 *
›s
)

170 i‡(
em©ch
->
e_›s
)

171  -
NLE_EXIST
;

173 
em©ch
->
e_›s
 = 
›s
;

174 
em©ch
->
e_köd
 = 
›s
->
eo_köd
;

176 i‡(
›s
->
eo_d©Æí
) {

177 
em©ch
->
e_d©a
 = 
	`ˇŒoc
(1, 
›s
->
eo_d©Æí
);

178 i‡(!
em©ch
->
e_d©a
)

179  -
NLE_NOMEM
;

181 
em©ch
->
e_d©Æí
 = 
›s
->
eo_d©Æí
;

185 
	}
}

187 
	$π∆_em©ch_£t_köd
(
π∆_em©ch
 *
em©ch
, 
uöt16_t
 
köd
)

189 
π∆_em©ch_›s
 *
›s
;

191 i‡(
em©ch
->
e_köd
)

192  -
NLE_EXIST
;

194 
em©ch
->
e_köd
 = 
köd
;

196 i‡((
›s
 = 
	`π∆_em©ch_lookup_›s
(
köd
)))

197 
	`π∆_em©ch_£t_›s
(
em©ch
, 
›s
);

200 
	}
}

202 
	$π∆_em©ch_£t_«me
(
π∆_em©ch
 *
em©ch
, c⁄° *
«me
)

204 
π∆_em©ch_›s
 *
›s
;

206 i‡(
em©ch
->
e_köd
)

207  -
NLE_EXIST
;

209 i‡(!(
›s
 = 
	`π∆_em©ch_lookup_›s_by_«me
(
«me
)))

210  -
NLE_OPNOTSUPP
;

212 
	`π∆_em©ch_£t_›s
(
em©ch
, 
›s
);

215 
	}
}

217 
	$π∆_em©ch_£t_Êags
(
π∆_em©ch
 *
em©ch
, 
uöt16_t
 
Êags
)

219 
em©ch
->
e_Êags
 |
Êags
;

220 
	}
}

222 
	$π∆_em©ch_un£t_Êags
(
π∆_em©ch
 *
em©ch
, 
uöt16_t
 
Êags
)

224 
em©ch
->
e_Êags
 &~
Êags
;

225 
	}
}

227 
uöt16_t
 
	$π∆_em©ch_gë_Êags
(
π∆_em©ch
 *
em©ch
)

229  
em©ch
->
e_Êags
;

230 
	}
}

232 *
	$π∆_em©ch_d©a
(
π∆_em©ch
 *
em©ch
)

234  
em©ch
->
e_d©a
;

235 
	}
}

247 
π∆_em©ch_åì
 *
	$π∆_em©ch_åì_Æloc
(
uöt16_t
 
¥ogid
)

249 
π∆_em©ch_åì
 *
åì
;

251 i‡(!(
åì
 = 
	`ˇŒoc
(1, (*tree))))

252  
NULL
;

254 
	`NL_INIT_LIST_HEAD
(&
åì
->
ë_li°
);

255 
åì
->
ë_¥ogid
 = 
¥ogid
;

257 
	`NL_DBG
(2, "ÆloˇãdÇewÉm©chÅªê%p,Örogid=%u\n", 
åì
, 
¥ogid
);

259  
åì
;

260 
	}
}

262 
	$‰ì_em©ch_li°
(
∆_li°_hód
 *
hód
)

264 
π∆_em©ch
 *
pos
, *
√xt
;

266 
	`∆_li°_f‹_óch_íåy_ß„
(
pos
, 
√xt
, 
hód
, 
e_li°
) {

267 i‡(!
	`∆_li°_em±y
(&
pos
->
e_chûds
))

268 
	`‰ì_em©ch_li°
(&
pos
->
e_chûds
);

269 
	`π∆_em©ch_‰ì
(
pos
);

271 
	}
}

279 
	$π∆_em©ch_åì_‰ì
(
π∆_em©ch_åì
 *
åì
)

281 i‡(!
åì
)

284 
	`‰ì_em©ch_li°
(&
åì
->
ë_li°
);

286 
	`NL_DBG
(2, "FªedÉm©chÅªê%p\n", 
åì
);

288 
	`‰ì
(
åì
);

289 
	}
}

296 
	$π∆_em©ch_åì_add
(
π∆_em©ch_åì
 *
åì
,

297 
π∆_em©ch
 *
em©ch
)

299 
	`∆_li°_add_èû
(&
em©ch
->
e_li°
, &
åì
->
ë_li°
);

300 
	}
}

302 
ölöe
 
uöt32_t
 
	$c⁄èöî_ªf
(
π∆_em©ch
 *
em©ch
)

304  *((
uöt32_t
 *Ë
	`π∆_em©ch_d©a
(
em©ch
));

305 
	}
}

307 
	$lök_åì
(
π∆_em©ch
 *
ödex
[], 
nm©ches
, 
pos
,

308 
∆_li°_hód
 *
roŸ
)

310 
π∆_em©ch
 *
em©ch
;

311 
i
;

313 
i
 = 
pos
; i < 
nm©ches
; i++) {

314 
em©ch
 = 
ödex
[
i
];

316 
	`∆_li°_add_èû
(&
em©ch
->
e_li°
, 
roŸ
);

318 i‡(
em©ch
->
e_köd
 =
TCF_EM_CONTAINER
)

319 
	`lök_åì
(
ödex
, 
nm©ches
, 
	`c⁄èöî_ªf
(
em©ch
),

320 &
em©ch
->
e_chûds
);

322 i‡(!(
em©ch
->
e_Êags
 & 
TCF_EM_REL_MASK
))

327  -
NLE_INVAL
;

328 
	}
}

330 
∆a_pﬁicy
 
	gåì_pﬁicy
[
TCA_EMATCH_TREE_MAX
+1] = {

331 [
TCA_EMATCH_TREE_HDR
] = { .
möÀn
=(
tcf_em©ch_åì_hdr
) },

332 [
TCA_EMATCH_TREE_LIST
] = { .
ty≥
 = 
NLA_NESTED
 },

340 
	$π∆_em©ch_∑r£_©å
(
∆©å
 *
©å
, 
π∆_em©ch_åì
 **
ªsu…
)

342 
∆©å
 *
a
, *
tb
[
TCA_EMATCH_TREE_MAX
+1];

343 
tcf_em©ch_åì_hdr
 *
thdr
;

344 
π∆_em©ch_åì
 *
åì
;

345 
π∆_em©ch
 **
ödex
;

346 
nm©ches
 = 0, 
îr
, 
ªmaöög
;

348 
	`NL_DBG
(2, "P¨sögáâribuã %∞a†em©chÅªe\n", 
©å
);

350 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
TCA_EMATCH_TREE_MAX
, 
©å
, 
åì_pﬁicy
);

351 i‡(
îr
 < 0)

352  
îr
;

354 i‡(!
tb
[
TCA_EMATCH_TREE_HDR
])

355  -
NLE_MISSING_ATTR
;

357 
thdr
 = 
	`∆a_d©a
(
tb
[
TCA_EMATCH_TREE_HDR
]);

360 i‡(
thdr
->
nm©ches
 == 0) {

361 
	`NL_DBG
(2, "IgnoringÉmptyÉmatch configuration\n");

365 i‡(!
tb
[
TCA_EMATCH_TREE_LIST
])

366  -
NLE_MISSING_ATTR
;

368 
	`NL_DBG
(2, "ematchÅree found withÇmatches=%u,Örogid=%u\n",

369 
thdr
->
nm©ches
,Åhdr->
¥ogid
);

376 i‡(
thdr
->
nm©ches
 > (
	`∆a_Àn
(
tb
[
TCA_EMATCH_TREE_LIST
]) /

377 
	`∆a_tŸÆ_size
((
tcf_em©ch_hdr
))))

378  -
NLE_INVAL
;

380 i‡(!(
ödex
 = 
	`ˇŒoc
(
thdr
->
nm©ches
, (
π∆_em©ch
 *))))

381  -
NLE_NOMEM
;

383 i‡(!(
åì
 = 
	`π∆_em©ch_åì_Æloc
(
thdr
->
¥ogid
))) {

384 
îr
 = -
NLE_NOMEM
;

385 
îrout
;

388 
	`∆a_f‹_óch_√°ed
(
a
, 
tb
[
TCA_EMATCH_TREE_LIST
], 
ªmaöög
) {

389 
π∆_em©ch_›s
 *
›s
;

390 
tcf_em©ch_hdr
 *
hdr
;

391 
π∆_em©ch
 *
em©ch
;

392 *
d©a
;

393 
size_t
 
Àn
;

395 
	`NL_DBG
(3, "parsingÉmatcháttribute %d,Üen=%u\n",

396 
nm©ches
+1, 
	`∆a_Àn
(
a
));

398 i‡(
	`∆a_Àn
(
a
Ë< (*
hdr
)) {

399 
îr
 = -
NLE_INVAL
;

400 
îrout
;

404 i‡(
nm©ches
 >
thdr
->nmatches) {

405 
îr
 = -
NLE_RANGE
;

406 
îrout
;

409 
hdr
 = 
	`∆a_d©a
(
a
);

410 
d©a
 = 
	`∆a_d©a
(
a
Ë+ 
	`NLA_ALIGN
((*
hdr
));

411 
Àn
 = 
	`∆a_Àn
(
a
Ë- 
	`NLA_ALIGN
((*
hdr
));

413 
	`NL_DBG
(3, "ematcháttribute matchid=%u, kind=%u, flags=%u\n",

414 
hdr
->
m©chid
, hdr->
köd
, hdr->
Êags
);

420 i‡(
hdr
->
köd
 =
TCF_EM_CONTAINER
 &&

421 *((
uöt32_t
 *Ë
d©a
Ë>
thdr
->
nm©ches
) {

422 
îr
 = -
NLE_INVAL
;

423 
îrout
;

426 i‡(!(
em©ch
 = 
	`π∆_em©ch_Æloc
())) {

427 
îr
 = -
NLE_NOMEM
;

428 
îrout
;

431 
em©ch
->
e_id
 = 
hdr
->
m©chid
;

432 
em©ch
->
e_köd
 = 
hdr
->
köd
;

433 
em©ch
->
e_Êags
 = 
hdr
->
Êags
;

435 i‡((
›s
 = 
	`π∆_em©ch_lookup_›s
(
hdr
->
köd
))) {

436 i‡(
›s
->
eo_möÀn
 && 
Àn
 < ops->eo_minlen) {

437 
	`π∆_em©ch_‰ì
(
em©ch
);

438 
îr
 = -
NLE_INVAL
;

439 
îrout
;

442 
	`π∆_em©ch_£t_›s
(
em©ch
, 
›s
);

444 i‡(
›s
->
eo_∑r£
 &&

445 (
îr
 = 
›s
->
	`eo_∑r£
(
em©ch
, 
d©a
, 
Àn
)) < 0) {

446 
	`π∆_em©ch_‰ì
(
em©ch
);

447 
îrout
;

451 
	`NL_DBG
(3, "ödex[%d] = %p\n", 
nm©ches
, 
em©ch
);

452 
ödex
[
nm©ches
++] = 
em©ch
;

455 i‡(
nm©ches
 !
thdr
->nmatches) {

456 
îr
 = -
NLE_INVAL
;

457 
îrout
;

460 
îr
 = 
	`lök_åì
(
ödex
, 
nm©ches
, 0, &
åì
->
ë_li°
);

461 i‡(
îr
 < 0)

462 
îrout
;

464 
	`‰ì
(
ödex
);

465 *
ªsu…
 = 
åì
;

469 
îrout
:

470 
	`π∆_em©ch_åì_‰ì
(
åì
);

471 
	`‰ì
(
ödex
);

472  
îr
;

473 
	}
}

475 
	$dump_em©ch_£quí˚
(
∆_li°_hód
 *
hód
,

476 
∆_dump_∑øms
 *
p
)

478 
π∆_em©ch
 *
m©ch
;

480 
	`∆_li°_f‹_óch_íåy
(
m©ch
, 
hód
, 
e_li°
) {

481 i‡(
m©ch
->
e_Êags
 & 
TCF_EM_INVERT
)

482 
	`∆_dump
(
p
, "!");

484 i‡(
m©ch
->
e_köd
 =
TCF_EM_CONTAINER
) {

485 
	`∆_dump
(
p
, "(");

486 
	`dump_em©ch_£quí˚
(&
m©ch
->
e_chûds
, 
p
);

487 
	`∆_dump
(
p
, ")");

488 } i‡(!
m©ch
->
e_›s
) {

489 
	`∆_dump
(
p
, "[unknow¿em©ch %d]", 
m©ch
->
e_köd
);

491 i‡(
m©ch
->
e_›s
->
eo_dump
)

492 
m©ch
->
e_›s
->
	`eo_dump
(m©ch, 
p
);

494 
	`∆_dump
(
p
, "[data]");

497 
m©ch
->
e_Êags
 & 
TCF_EM_REL_MASK
) {

498 
TCF_EM_REL_AND
:

499 
	`∆_dump
(
p
, " AND ");

501 
TCF_EM_REL_OR
:

502 
	`∆_dump
(
p
, " OR ");

509 
	}
}

511 
	$π∆_em©ch_åì_dump
(
π∆_em©ch_åì
 *
åì
,

512 
∆_dump_∑øms
 *
p
)

514 i‡(!
åì
)

515 
	`BUG
();

517 
	`dump_em©ch_£quí˚
(&
åì
->
ë_li°
, 
p
);

518 
	`∆_dump
(
p
, "\n");

519 
	}
}

521 
	$upd©e_c⁄èöî_ödex
(
∆_li°_hód
 *
li°
, *
ödex
)

523 
π∆_em©ch
 *
e
;

525 
	`∆_li°_f‹_óch_íåy
(
e
, 
li°
, 
e_li°
)

526 
e
->
e_ödex
 = (*
ödex
)++;

528 
	`∆_li°_f‹_óch_íåy
(
e
, 
li°
, 
e_li°
) {

529 i‡(
e
->
e_köd
 =
TCF_EM_CONTAINER
) {

530 
îr
;

532 i‡(
	`∆_li°_em±y
(&
e
->
e_chûds
))

533  -
NLE_OBJ_NOTFOUND
;

535 *((
uöt32_t
 *Ë
e
->
e_d©a
Ë*
ödex
;

537 
îr
 = 
	`upd©e_c⁄èöî_ödex
(&
e
->
e_chûds
, 
ödex
);

538 i‡(
îr
 < 0)

539  
îr
;

544 
	}
}

546 
	$fûl_em©ch_£quí˚
(
∆_msg
 *
msg
, 
∆_li°_hód
 *
li°
)

548 
π∆_em©ch
 *
e
;

550 
	`∆_li°_f‹_óch_íåy
(
e
, 
li°
, 
e_li°
) {

551 
tcf_em©ch_hdr
 
m©ch
 = {

552 .
m©chid
 = 
e
->
e_id
,

553 .
köd
 = 
e
->
e_köd
,

554 .
Êags
 = 
e
->
e_Êags
,

556 
∆©å
 *
©å
;

557 
îr
 = 0;

559 i‡(!(
©å
 = 
	`∆a_√°_°¨t
(
msg
, 
e
->
e_ödex
 + 1)))

560  -
NLE_NOMEM
;

562 i‡(
	`∆msg_≠≥nd
(
msg
, &
m©ch
, (match), 0) < 0)

563  -
NLE_NOMEM
;

565 i‡(
e
->
e_›s
->
eo_fûl
)

566 
îr
 = 
e
->
e_›s
->
	`eo_fûl
”, 
msg
);

567 i‡(
e
->
e_Êags
 & 
TCF_EM_SIMPLE
)

568 
îr
 = 
	`∆msg_≠≥nd
(
msg
, 
e
->
e_d©a
, 4, 0);

569 i‡(
e
->
e_d©Æí
 > 0)

570 
îr
 = 
	`∆msg_≠≥nd
(
msg
, 
e
->
e_d©a
,É->
e_d©Æí
, 0);

572 
	`NL_DBG
(3, "msg %p:áddedÉmatch [%d] id=%d kind=%d flags=%d\n",

573 
msg
, 
e
->
e_ödex
, 
m©ch
.
m©chid
, m©ch.
köd
, m©ch.
Êags
);

575 i‡(
îr
 < 0)

576  -
NLE_NOMEM
;

578 
	`∆a_√°_íd
(
msg
, 
©å
);

581 
	`∆_li°_f‹_óch_íåy
(
e
, 
li°
, 
e_li°
) {

582 i‡(
e
->
e_köd
 =
TCF_EM_CONTAINER
 &&

583 
	`fûl_em©ch_£quí˚
(
msg
, &
e
->
e_chûds
) < 0)

584  -
NLE_NOMEM
;

588 
	}
}

590 
	$π∆_em©ch_fûl_©å
(
∆_msg
 *
msg
, 
©åid
,

591 
π∆_em©ch_åì
 *
åì
)

593 
tcf_em©ch_åì_hdr
 
thdr
 = {

594 .
¥ogid
 = 
åì
->
ë_¥ogid
,

596 
∆©å
 *
li°
, *
t›©å
;

597 
îr
, 
ödex
 = 0;

601 
îr
 = 
	`upd©e_c⁄èöî_ödex
(&
åì
->
ë_li°
, &
ödex
);

602 i‡(
îr
 < 0)

603  
îr
;

605 i‡(!(
t›©å
 = 
	`∆a_√°_°¨t
(
msg
, 
©åid
)))

606 
∆a_put_Áûuª
;

608 
thdr
.
nm©ches
 = 
ödex
;

609 
	`NLA_PUT
(
msg
, 
TCA_EMATCH_TREE_HDR
, (
thdr
), &thdr);

611 i‡(!(
li°
 = 
	`∆a_√°_°¨t
(
msg
, 
TCA_EMATCH_TREE_LIST
)))

612 
∆a_put_Áûuª
;

614 i‡(
	`fûl_em©ch_£quí˚
(
msg
, &
åì
->
ë_li°
) < 0)

615 
∆a_put_Áûuª
;

617 
	`∆a_√°_íd
(
msg
, 
li°
);

619 
	`∆a_√°_íd
(
msg
, 
t›©å
);

623 
∆a_put_Áûuª
:

624  -
NLE_NOMEM
;

625 
	}
}

629 
em©ch_∑r£
(*, **, 
∆_li°_hód
 *);

631 
	$π∆_em©ch_∑r£_ex¥
(c⁄° *
ex¥
, **
îΩ
,

632 
π∆_em©ch_åì
 **
ªsu…
)

634 
π∆_em©ch_åì
 *
åì
;

635 
YY_BUFFER_STATE
 
buf
 = 
NULL
;

636 
yysˇn_t
 
sˇ¬î
 = 
NULL
;

637 
îr
;

639 
	`NL_DBG
(2, "P¨sögÉm©chÉx¥essi⁄ \"%s\"\n", 
ex¥
);

641 i‡(!(
åì
 = 
	`π∆_em©ch_åì_Æloc
(
RTNL_EMATCH_PROGID
)))

642  -
NLE_FAILURE
;

644 i‡((
îr
 = 
	`em©ch_Àx_öô
(&
sˇ¬î
)) < 0) {

645 
îr
 = -
NLE_FAILURE
;

646 
îrout
;

649 
buf
 = 
	`em©ch__sˇn_°rög
(
ex¥
, 
sˇ¬î
);

651 i‡((
îr
 = 
	`em©ch_∑r£
(
sˇ¬î
, 
îΩ
, &
åì
->
ë_li°
)) != 0) {

652 
	`em©ch__dñëe_buf„r
(
buf
, 
sˇ¬î
);

653 
îr
 = -
NLE_PARSE_ERR
;

654 
îrout
;

657 
	`em©ch_Àx_de°roy
(
sˇ¬î
);

658 *
ªsu…
 = 
åì
;

662 
îrout
:

663 i‡(
sˇ¬î
)

664 
	`em©ch_Àx_de°roy
(
sˇ¬î
);

666 
	`π∆_em©ch_åì_‰ì
(
åì
);

668  
îr
;

669 
	}
}

671 c⁄° *
	gœyî_txt
[] = {

672 [
TCF_LAYER_LINK
] = "eth",

673 [
TCF_LAYER_NETWORK
] = "ip",

674 [
TCF_LAYER_TRANSPORT
] = "tcp",

677 *
	$π∆_em©ch_off£t2txt
(
uöt8_t
 
œyî
, 
uöt16_t
 
off£t
, *
buf
, 
size_t
 
Àn
)

679 
	`¢¥ötf
(
buf
, 
Àn
, "%s+%u",

680 (
œyî
 <
TCF_LAYER_MAX
Ë? 
œyî_txt
[layer] : "?",

681 
off£t
);

683  
buf
;

684 
	}
}

686 c⁄° *
	g›î™d_txt
[] = {

687 [
TCF_EM_OPND_EQ
] = "=",

688 [
TCF_EM_OPND_LT
] = "<",

689 [
TCF_EM_OPND_GT
] = ">",

692 *
	$π∆_em©ch_›nd2txt
(
uöt8_t
 
›nd
, *
buf
, 
size_t
 
Àn
)

694 
	`¢¥ötf
(
buf
, 
Àn
, "%s",

695 
›nd
 < 
	`ARRAY_SIZE
(
›î™d_txt
) ? operand_txt[opnd] : "?");

697  
buf
;

698 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/cls/ematch/cmp.c

19 
	~<√éök-¥iv©e/√éök.h
>

20 
	~<√éök-¥iv©e/tc.h
>

21 
	~<√éök/√éök.h
>

22 
	~<√éök/rouã/˛s/em©ch.h
>

23 
	~<löux/tc_em©ch/tc_em_cmp.h
>

25 
	$π∆_em©ch_cmp_£t
(
π∆_em©ch
 *
e
, 
tcf_em_cmp
 *
cfg
)

27 
	`mem˝y
(
	`π∆_em©ch_d©a
(
e
), 
cfg
, (*cfg));

28 
	}
}

30 
tcf_em_cmp
 *
	$π∆_em©ch_cmp_gë
(
π∆_em©ch
 *
e
)

32  
	`π∆_em©ch_d©a
(
e
);

33 
	}
}

35 
	$cmp_∑r£
(
π∆_em©ch
 *
e
, *
d©a
, 
size_t
 
Àn
)

37 
	`mem˝y
(
	`π∆_em©ch_d©a
(
e
), 
d©a
, 
Àn
);

40 
	}
}

42 c⁄° *
	gÆign_txt
[] = {

43 [
TCF_EM_ALIGN_U8
] = "u8",

44 [
TCF_EM_ALIGN_U16
] = "u16",

45 [
TCF_EM_ALIGN_U32
] = "u32"

48 c⁄° *
	gœyî_txt
[] = {

49 [
TCF_LAYER_LINK
] = "eth",

50 [
TCF_LAYER_NETWORK
] = "ip",

51 [
TCF_LAYER_TRANSPORT
] = "tcp"

54 c⁄° *
	g›î™d_txt
[] = {

55 [
TCF_EM_OPND_EQ
] = "=",

56 [
TCF_EM_OPND_LT
] = "<",

57 [
TCF_EM_OPND_GT
] = ">",

60 
	$cmp_dump
(
π∆_em©ch
 *
e
, 
∆_dump_∑øms
 *
p
)

62 
tcf_em_cmp
 *
cmp
 = 
	`π∆_em©ch_d©a
(
e
);

64 i‡(
cmp
->
Êags
 & 
TCF_EM_CMP_TRANS
)

65 
	`∆_dump
(
p
, "¡oh%c(", (
cmp
->
Æign
 =
TCF_EM_ALIGN_U32
) ? 'l' : 's');

67 
	`∆_dump
(
p
, "%sát %s+%u",

68 
Æign_txt
[
cmp
->
Æign
], 
œyî_txt
[cmp->
œyî
], cmp->
off
);

70 i‡(
cmp
->
mask
)

71 
	`∆_dump
(
p
, " & 0x%x", 
cmp
->
mask
);

73 i‡(
cmp
->
Êags
 & 
TCF_EM_CMP_TRANS
)

74 
	`∆_dump
(
p
, ")");

76 
	`∆_dump
(
p
, " %†%u", 
›î™d_txt
[
cmp
->
›nd
], cmp->
vÆ
);

77 
	}
}

79 
π∆_em©ch_›s
 
	gcmp_›s
 = {

80 .
eo_köd
 = 
TCF_EM_CMP
,

81 .
	geo_«me
 = "cmp",

82 .
	geo_möÀn
 = (
tcf_em_cmp
),

83 .
	geo_d©Æí
 = (
tcf_em_cmp
),

84 .
	geo_∑r£
 = 
cmp_∑r£
,

85 .
	geo_dump
 = 
cmp_dump
,

88 
__öô
 
	$cmp_öô
()

90 
	`π∆_em©ch_ªgi°î
(&
cmp_›s
);

91 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/cls/ematch/container.c

12 
	~<√éök-¥iv©e/√éök.h
>

13 
	~<√éök-¥iv©e/tc.h
>

14 
	~<√éök/√éök.h
>

15 
	~<√éök/rouã/˛s/em©ch.h
>

17 
c⁄èöî_∑r£
(
π∆_em©ch
 *
e
, *
d©a
, 
size_t
 
Àn
 
__©åibuã__
((
unu£d
)))

25 
mem˝y
(
e
->
e_d©a
, 
d©a
, (
uöt32_t
));

30 
	$c⁄èöî_fûl
(
π∆_em©ch
 *
e
, 
∆_msg
 *
msg
)

32  
	`∆msg_≠≥nd
(
msg
, 
e
->
e_d©a
, (
uöt32_t
), 0);

33 
	}
}

35 
π∆_em©ch_›s
 
	gc⁄èöî_›s
 = {

36 .
eo_köd
 = 
TCF_EM_CONTAINER
,

37 .
	geo_«me
 = "container",

38 .
	geo_möÀn
 = (
uöt32_t
),

39 .
	geo_d©Æí
 = (
uöt32_t
),

40 .
	geo_∑r£
 = 
c⁄èöî_∑r£
,

41 .
	geo_fûl
 = 
c⁄èöî_fûl
,

44 
__öô
 
	$c⁄èöî_öô
()

46 
	`π∆_em©ch_ªgi°î
(&
c⁄èöî_›s
);

47 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/cls/ematch/meta.c

19 
	~<√éök-¥iv©e/√éök.h
>

20 
	~<√éök-¥iv©e/tc.h
>

21 
	~<√éök/√éök.h
>

22 
	~<√éök/rouã/˛s/em©ch.h
>

23 
	~<√éök/rouã/˛s/em©ch/mëa.h
>

25 
	sπ∆_mëa_vÆue


27 
uöt8_t
 
	mmv_ty≥
;

28 
uöt8_t
 
	mmv_shi·
;

29 
uöt16_t
 
	mmv_id
;

30 
size_t
 
	mmv_Àn
;

33 
	smëa_d©a


35 
π∆_mëa_vÆue
 * 
	mÀ·
;

36 
π∆_mëa_vÆue
 * 
	mright
;

37 
uöt8_t
 
	m›nd
;

40 
π∆_mëa_vÆue
 *
	$mëa_Æloc
(
uöt8_t
 
ty≥
, 
uöt16_t
 
id
,

41 
uöt8_t
 
shi·
, *
d©a
,

42 
size_t
 
Àn
)

44 
π∆_mëa_vÆue
 *
vÆue
;

46 i‡(!(
vÆue
 = 
	`ˇŒoc
(1, (*vÆueË+ 
Àn
)))

47  
NULL
;

49 
vÆue
->
mv_ty≥
 = 
ty≥
;

50 
vÆue
->
mv_id
 = 
id
;

51 
vÆue
->
mv_shi·
 = 
shi·
;

52 
vÆue
->
mv_Àn
 = 
Àn
;

54 
	`mem˝y
(
vÆue
 + 1, 
d©a
, 
Àn
);

56  
vÆue
;

57 
	}
}

59 
π∆_mëa_vÆue
 *
	$π∆_mëa_vÆue_Æloc_öt
(
uöt64_t
 
vÆue
)

61  
	`mëa_Æloc
(
TCF_META_TYPE_INT
, 
TCF_META_ID_VALUE
, 0, &
vÆue
, 8);

62 
	}
}

64 
π∆_mëa_vÆue
 *
	$π∆_mëa_vÆue_Æloc_v¨
(*
d©a
, 
size_t
 
Àn
)

66  
	`mëa_Æloc
(
TCF_META_TYPE_VAR
, 
TCF_META_ID_VALUE
, 0, 
d©a
, 
Àn
);

67 
	}
}

69 
π∆_mëa_vÆue
 *
	$π∆_mëa_vÆue_Æloc_id
(
uöt8_t
 
ty≥
, 
uöt16_t
 
id
,

70 
uöt8_t
 
shi·
, 
uöt64_t
 
mask
)

72 
size_t
 
maskÀn
 = 0;

74 i‡(
id
 > 
TCF_META_ID_MAX
)

75  
NULL
;

77 i‡(
mask
) {

78 i‡(
ty≥
 =
TCF_META_TYPE_VAR
)

79  
NULL
;

81 
maskÀn
 = 8;

84  
	`mëa_Æloc
(
ty≥
, 
id
, 
shi·
, &
mask
, 
maskÀn
);

85 
	}
}

87 
	$π∆_mëa_vÆue_put
(
π∆_mëa_vÆue
 *
mv
)

89 
	`‰ì
(
mv
);

90 
	}
}

92 
	$π∆_em©ch_mëa_£t_lvÆue
(
π∆_em©ch
 *
e
, 
π∆_mëa_vÆue
 *
v
)

94 
mëa_d©a
 *
m
 = 
	`π∆_em©ch_d©a
(
e
);

95 
m
->
À·
 = 
v
;

96 
	}
}

98 
	$π∆_em©ch_mëa_£t_rvÆue
(
π∆_em©ch
 *
e
, 
π∆_mëa_vÆue
 *
v
)

100 
mëa_d©a
 *
m
 = 
	`π∆_em©ch_d©a
(
e
);

101 
m
->
right
 = 
v
;

102 
	}
}

104 
	$π∆_em©ch_mëa_£t_›î™d
(
π∆_em©ch
 *
e
, 
uöt8_t
 
›nd
)

106 
mëa_d©a
 *
m
 = 
	`π∆_em©ch_d©a
(
e
);

107 
m
->
›nd
 = opnd;

108 
	}
}

110 
∆a_pﬁicy
 
	gmëa_pﬁicy
[
TCA_EM_META_MAX
+1] = {

111 [
TCA_EM_META_HDR
] = { .
möÀn
 = (
tcf_mëa_hdr
) },

112 [
TCA_EM_META_LVALUE
] = { .
möÀn
 = 1, },

113 [
TCA_EM_META_RVALUE
] = { .
möÀn
 = 1, },

116 
	$mëa_∑r£
(
π∆_em©ch
 *
e
, *
d©a
, 
size_t
 
Àn
)

118 
mëa_d©a
 *
m
 = 
	`π∆_em©ch_d©a
(
e
);

119 
∆©å
 *
tb
[
TCA_EM_META_MAX
+1];

120 
π∆_mëa_vÆue
 *
v
;

121 
tcf_mëa_hdr
 *
hdr
;

122 *
vd©a
 = 
NULL
;

123 
size_t
 
vÀn
 = 0;

124 
îr
;

126 i‡((
îr
 = 
	`∆a_∑r£
(
tb
, 
TCA_EM_META_MAX
, 
d©a
, 
Àn
, 
mëa_pﬁicy
)) < 0)

127  
îr
;

129 i‡(!
tb
[
TCA_EM_META_HDR
])

130  -
NLE_MISSING_ATTR
;

132 
hdr
 = 
	`∆a_d©a
(
tb
[
TCA_EM_META_HDR
]);

134 i‡(
tb
[
TCA_EM_META_LVALUE
]) {

135 
vd©a
 = 
	`∆a_d©a
(
tb
[
TCA_EM_META_LVALUE
]);

136 
vÀn
 = 
	`∆a_Àn
(
tb
[
TCA_EM_META_LVALUE
]);

139 
v
 = 
	`mëa_Æloc
(
	`TCF_META_TYPE
(
hdr
->
À·
.
köd
),

140 
	`TCF_META_ID
(
hdr
->
À·
.
köd
),

141 
hdr
->
À·
.
shi·
, 
vd©a
, 
vÀn
);

142 i‡(!
v
)

143  -
NLE_NOMEM
;

145 
m
->
À·
 = 
v
;

147 
vÀn
 = 0;

148 i‡(
tb
[
TCA_EM_META_RVALUE
]) {

149 
vd©a
 = 
	`∆a_d©a
(
tb
[
TCA_EM_META_RVALUE
]);

150 
vÀn
 = 
	`∆a_Àn
(
tb
[
TCA_EM_META_RVALUE
]);

153 
v
 = 
	`mëa_Æloc
(
	`TCF_META_TYPE
(
hdr
->
right
.
köd
),

154 
	`TCF_META_ID
(
hdr
->
right
.
köd
),

155 
hdr
->
right
.
shi·
, 
vd©a
, 
vÀn
);

156 i‡(!
v
) {

157 
	`π∆_mëa_vÆue_put
(
m
->
À·
);

158  -
NLE_NOMEM
;

161 
m
->
right
 = 
v
;

162 
m
->
›nd
 = 
hdr
->
À·
.
›
;

165 
	}
}

167 c⁄° 
å™s_tbl
 
	gmëa_öt
[] = {

168 
__ADD
(
TCF_META_ID_RANDOM
, 
øndom
)

169 
__ADD
(
TCF_META_ID_LOADAVG_0
, 
lﬂdavg_0
)

170 
__ADD
(
TCF_META_ID_LOADAVG_1
, 
lﬂdavg_1
)

171 
__ADD
(
TCF_META_ID_LOADAVG_2
, 
lﬂdavg_2
)

172 
__ADD
(
TCF_META_ID_DEV
, 
dev
)

173 
__ADD
(
TCF_META_ID_PRIORITY
, 
¥io
)

174 
__ADD
(
TCF_META_ID_PROTOCOL
, 
¥Ÿo
)

175 
__ADD
(
TCF_META_ID_PKTTYPE
, 
pkây≥
)

176 
__ADD
(
TCF_META_ID_PKTLEN
, 
pkéí
)

177 
__ADD
(
TCF_META_ID_DATALEN
, 
d©Æí
)

178 
__ADD
(
TCF_META_ID_MACLEN
, 
ma˛í
)

179 
__ADD
(
TCF_META_ID_NFMARK
, 
m¨k
)

180 
__ADD
(
TCF_META_ID_TCINDEX
, 
tcödex
)

181 
__ADD
(
TCF_META_ID_RTCLASSID
, 
π˛assid
)

182 
__ADD
(
TCF_META_ID_RTIIF
, 
πiif
)

183 
__ADD
(
TCF_META_ID_SK_FAMILY
, 
sk_Ámûy
)

184 
__ADD
(
TCF_META_ID_SK_STATE
, 
sk_°©e
)

185 
__ADD
(
TCF_META_ID_SK_REUSE
, 
sk_ªu£
)

186 
__ADD
(
TCF_META_ID_SK_REFCNT
, 
sk_ªf˙t
)

187 
__ADD
(
TCF_META_ID_SK_RCVBUF
, 
sk_rcvbuf
)

188 
__ADD
(
TCF_META_ID_SK_SNDBUF
, 
sk_¢dbuf
)

189 
__ADD
(
TCF_META_ID_SK_SHUTDOWN
, 
sk_sutdown
)

190 
__ADD
(
TCF_META_ID_SK_PROTO
, 
sk_¥Ÿo
)

191 
__ADD
(
TCF_META_ID_SK_TYPE
, 
sk_ty≥
)

192 
__ADD
(
TCF_META_ID_SK_RMEM_ALLOC
, 
sk_rmem_Æloc
)

193 
__ADD
(
TCF_META_ID_SK_WMEM_ALLOC
, 
sk_wmem_Æloc
)

194 
__ADD
(
TCF_META_ID_SK_WMEM_QUEUED
, 
sk_wmem_queued
)

195 
__ADD
(
TCF_META_ID_SK_RCV_QLEN
, 
sk_rcv_qÀn
)

196 
__ADD
(
TCF_META_ID_SK_SND_QLEN
, 
sk_¢d_qÀn
)

197 
__ADD
(
TCF_META_ID_SK_ERR_QLEN
, 
sk_îr_qÀn
)

198 
__ADD
(
TCF_META_ID_SK_FORWARD_ALLOCS
, 
sk_f‹w¨d_Ælocs
)

199 
__ADD
(
TCF_META_ID_SK_ALLOCS
, 
sk_Ælocs
)

200 
__ADD
(
TCF_META_ID_SK_ROUTE_CAPS
, 
sk_rouã_ˇps
)

201 
__ADD
(
TCF_META_ID_SK_HASH
, 
sk_hash
)

202 
__ADD
(
TCF_META_ID_SK_LINGERTIME
, 
sk_lögîtime
)

203 
__ADD
(
TCF_META_ID_SK_ACK_BACKLOG
, 
sk_ack_backlog
)

204 
__ADD
(
TCF_META_ID_SK_MAX_ACK_BACKLOG
, 
sk_max_ack_backlog
)

205 
__ADD
(
TCF_META_ID_SK_PRIO
, 
sk_¥io
)

206 
__ADD
(
TCF_META_ID_SK_RCVLOWAT
, 
sk_rcvlow©
)

207 
__ADD
(
TCF_META_ID_SK_RCVTIMEO
, 
sk_rcvtimeo
)

208 
__ADD
(
TCF_META_ID_SK_SNDTIMEO
, 
sk_¢dtimeo
)

209 
__ADD
(
TCF_META_ID_SK_SENDMSG_OFF
, 
sk_£ndmsg_off
)

210 
__ADD
(
TCF_META_ID_SK_WRITE_PENDING
, 
sk_wrôe_≥ndög
)

211 
__ADD
(
TCF_META_ID_VLAN_TAG
, 
vœn
)

212 
__ADD
(
TCF_META_ID_RXHASH
, 
rxhash
)

215 *
	$öt_id2°r
(
id
, *
buf
, 
size_t
 
size
)

217  
	`__ty≥2°r
(
id
, 
buf
, 
size
, 
mëa_öt
, 
	`ARRAY_SIZE
(meta_int));

218 
	}
}

220 c⁄° 
å™s_tbl
 
	gmëa_v¨
[] = {

221 
__ADD
(
TCF_META_ID_DEV
,
dev«me
)

222 
__ADD
(
TCF_META_ID_SK_BOUND_IF
,
sk_bound_if
)

225 *
	$v¨_id2°r
(
id
, *
buf
, 
size_t
 
size
)

227  
	`__ty≥2°r
(
id
, 
buf
, 
size
, 
mëa_v¨
, 
	`ARRAY_SIZE
(meta_var));

228 
	}
}

230 
	$dump_vÆue
(
π∆_mëa_vÆue
 *
v
, 
∆_dump_∑øms
 *
p
)

232 
buf
[32];

234 
v
->
mv_ty≥
) {

235 
TCF_META_TYPE_INT
:

236 i‡(
v
->
mv_id
 =
TCF_META_ID_VALUE
) {

237 
	`∆_dump
(
p
, "%u",

238 *(
uöt32_t
 *Ë(
v
 + 1));

240 
	`∆_dump
(
p
, "%s",

241 
	`öt_id2°r
(
v
->
mv_id
, 
buf
, (buf)));

243 i‡(
v
->
mv_shi·
)

244 
	`∆_dump
(
p
, " >> %u", 
v
->
mv_shi·
);

246 i‡(
v
->
mv_Àn
 == 4)

247 
	`∆_dump
(
p
, " & %#x", *(
uöt32_t
 *Ë(
v
 + 1));

248 i‡(
v
->
mv_Àn
 == 8)

249 
	`∆_dump
(
p
, " & %#x", *(
uöt64_t
 *Ë(
v
 + 1));

253 
TCF_META_TYPE_VAR
:

254 i‡(
v
->
mv_id
 =
TCF_META_ID_VALUE
) {

255 
	`∆_dump
(
p
, "%s", (*Ë(
v
 + 1));

257 
	`∆_dump
(
p
, "%s",

258 
	`v¨_id2°r
(
v
->
mv_id
, 
buf
, (buf)));

260 i‡(
v
->
mv_shi·
)

261 
	`∆_dump
(
p
, " >> %u", 
v
->
mv_shi·
);

265 
	}
}

267 
	$mëa_dump
(
π∆_em©ch
 *
e
, 
∆_dump_∑øms
 *
p
)

269 
mëa_d©a
 *
m
 = 
	`π∆_em©ch_d©a
(
e
);

270 
buf
[32];

272 
	`∆_dump
(
p
, "meta(");

273 
	`dump_vÆue
(
m
->
À·
, 
p
);

275 
	`∆_dump
(
p
, " %†", 
	`π∆_em©ch_›nd2txt
(
m
->
›nd
, 
buf
, (buf)));

277 
	`dump_vÆue
(
m
->
right
, 
p
);

278 
	`∆_dump
(
p
, ")");

279 
	}
}

281 
	$mëa_fûl
(
π∆_em©ch
 *
e
, 
∆_msg
 *
msg
)

283 
mëa_d©a
 *
m
 = 
	`π∆_em©ch_d©a
(
e
);

284 
tcf_mëa_hdr
 
hdr
;

286 i‡(!(
m
->
À·
 && m->
right
))

287  -
NLE_MISSING_ATTR
;

289 
	`mem£t
(&
hdr
, 0, (hdr));

290 
hdr
.
À·
.
köd
 = (
m
->À·->
mv_ty≥
 << 12Ë& 
TCF_META_TYPE_MASK
;

291 
hdr
.
À·
.
köd
 |
m
->À·->
mv_id
 & 
TCF_META_ID_MASK
;

292 
hdr
.
À·
.
shi·
 = 
m
->À·->
mv_shi·
;

293 
hdr
.
À·
.
›
 = 
m
->
›nd
;

294 
hdr
.
right
.
köd
 = (
m
->right->
mv_ty≥
 << 12Ë& 
TCF_META_TYPE_MASK
;

295 
hdr
.
right
.
köd
 |
m
->right->
mv_id
 & 
TCF_META_ID_MASK
;

297 
	`NLA_PUT
(
msg
, 
TCA_EM_META_HDR
, (
hdr
), &hdr);

299 i‡(
m
->
À·
->
mv_Àn
)

300 
	`NLA_PUT
(
msg
, 
TCA_EM_META_LVALUE
, 
m
->
À·
->
mv_Àn
, (m->left + 1));

302 i‡(
m
->
right
->
mv_Àn
)

303 
	`NLA_PUT
(
msg
, 
TCA_EM_META_RVALUE
, 
m
->
right
->
mv_Àn
, (m->right + 1));

307 
∆a_put_Áûuª
:

308  -
NLE_NOMEM
;

309 
	}
}

311 
	$mëa_‰ì
(
π∆_em©ch
 *
e
)

313 
mëa_d©a
 *
m
 = 
	`π∆_em©ch_d©a
(
e
);

314 
	`‰ì
(
m
->
À·
);

315 
	`‰ì
(
m
->
right
);

316 
	}
}

318 
π∆_em©ch_›s
 
	gmëa_›s
 = {

319 .
eo_köd
 = 
TCF_EM_META
,

320 .
	geo_«me
 = "meta",

321 .
	geo_möÀn
 = (
tcf_mëa_hdr
),

322 .
	geo_d©Æí
 = (
mëa_d©a
),

323 .
	geo_∑r£
 = 
mëa_∑r£
,

324 .
	geo_dump
 = 
mëa_dump
,

325 .
	geo_fûl
 = 
mëa_fûl
,

326 .
	geo_‰ì
 = 
mëa_‰ì
,

329 
__öô
 
	$mëa_öô
()

331 
	`π∆_em©ch_ªgi°î
(&
mëa_›s
);

332 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/cls/ematch/nbyte.c

19 
	~<√éök-¥iv©e/√éök.h
>

20 
	~<√éök-¥iv©e/tc.h
>

21 
	~<√éök/√éök.h
>

22 
	~<√éök/rouã/˛s/em©ch.h
>

23 
	~<√éök/rouã/˛s/em©ch/nbyã.h
>

25 
	snbyã_d©a


27 
tcf_em_nbyã
 
	mcfg
;

28 
uöt8_t
 * 
	m∑âîn
;

31 
	$π∆_em©ch_nbyã_£t_off£t
(
π∆_em©ch
 *
e
, 
uöt8_t
 
œyî
,

32 
uöt16_t
 
off£t
)

34 
nbyã_d©a
 *
n
 = 
	`π∆_em©ch_d©a
(
e
);

35 
n
->
cfg
.
off
 = 
off£t
;

36 
n
->
cfg
.
œyî
 =Üayer;

37 
	}
}

39 
uöt16_t
 
	$π∆_em©ch_nbyã_gë_off£t
(
π∆_em©ch
 *
e
)

41  ((
nbyã_d©a
 *Ë
	`π∆_em©ch_d©a
(
e
))->
cfg
.
off
;

42 
	}
}

44 
uöt8_t
 
	$π∆_em©ch_nbyã_gë_œyî
(
π∆_em©ch
 *
e
)

46  ((
nbyã_d©a
 *Ë
	`π∆_em©ch_d©a
(
e
))->
cfg
.
œyî
;

47 
	}
}

49 
	$π∆_em©ch_nbyã_£t_∑âîn
(
π∆_em©ch
 *
e
,

50 
uöt8_t
 *
∑âîn
, 
size_t
 
Àn
)

52 
nbyã_d©a
 *
n
 = 
	`π∆_em©ch_d©a
(
e
);

54 i‡(
n
->
∑âîn
)

55 
	`‰ì
(
n
->
∑âîn
);

57 
n
->
∑âîn
 =Öattern;

58 
n
->
cfg
.
Àn
 =Üen;

59 
	}
}

61 
uöt8_t
 *
	$π∆_em©ch_nbyã_gë_∑âîn
(
π∆_em©ch
 *
e
)

63  ((
nbyã_d©a
 *Ë
	`π∆_em©ch_d©a
(
e
))->
∑âîn
;

64 
	}
}

66 
size_t
 
	$π∆_em©ch_nbyã_gë_Àn
(
π∆_em©ch
 *
e
)

68  ((
nbyã_d©a
 *Ë
	`π∆_em©ch_d©a
(
e
))->
cfg
.
Àn
;

69 
	}
}

71 c⁄° *
	$œyî_txt
(
tcf_em_nbyã
 *
nbyã
)

73 
nbyã
->
œyî
) {

74 
TCF_LAYER_LINK
:

76 
TCF_LAYER_NETWORK
:

78 
TCF_LAYER_TRANSPORT
:

83 
	}
}

85 
	$nbyã_∑r£
(
π∆_em©ch
 *
e
, *
d©a
, 
size_t
 
Àn
)

87 
nbyã_d©a
 *
n
 = 
	`π∆_em©ch_d©a
(
e
);

88 
size_t
 
hdæí
 = (
tcf_em_nbyã
);

89 
size_t
 
∂í
 = 
Àn
 - 
hdæí
;

91 
	`mem˝y
(&
n
->
cfg
, 
d©a
, 
hdæí
);

92 i‡(
∂í
 > 0) {

93 i‡(!(
n
->
∑âîn
 = 
	`ˇŒoc
(1, 
∂í
)))

94  -
NLE_NOMEM
;

96 
	`mem˝y
(
n
->
∑âîn
, 
d©a
 + 
hdæí
, 
∂í
);

100 
	}
}

102 
	$nbyã_dump
(
π∆_em©ch
 *
e
, 
∆_dump_∑øms
 *
p
)

104 
nbyã_d©a
 *
n
 = 
	`π∆_em©ch_d©a
(
e
);

105 
i
;

107 
	`∆_dump
(
p
, "∑âîn(%u:[", 
n
->
cfg
.
Àn
);

109 
i
 = 0; i < 
n
->
cfg
.
Àn
; i++) {

110 
	`∆_dump
(
p
, "%02x", 
n
->
∑âîn
[
i
]);

111 i‡(
i
+1 < 
n
->
cfg
.
Àn
)

112 
	`∆_dump
(
p
, " ");

115 
	`∆_dump
(
p
, "]áà%s+%u)", 
	`œyî_txt
(&
n
->
cfg
),Ç->cfg.
off
);

116 
	}
}

118 
	$nbyã_‰ì
(
π∆_em©ch
 *
e
)

120 
nbyã_d©a
 *
n
 = 
	`π∆_em©ch_d©a
(
e
);

121 
	`‰ì
(
n
->
∑âîn
);

122 
	}
}

124 
π∆_em©ch_›s
 
	gnbyã_›s
 = {

125 .
eo_köd
 = 
TCF_EM_NBYTE
,

126 .
	geo_«me
 = "nbyte",

127 .
	geo_möÀn
 = (
tcf_em_nbyã
),

128 .
	geo_d©Æí
 = (
nbyã_d©a
),

129 .
	geo_∑r£
 = 
nbyã_∑r£
,

130 .
	geo_dump
 = 
nbyã_dump
,

131 .
	geo_‰ì
 = 
nbyã_‰ì
,

134 
__öô
 
	$nbyã_öô
()

136 
	`π∆_em©ch_ªgi°î
(&
nbyã_›s
);

137 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/cls/ematch/text.c

19 
	~<√éök-¥iv©e/√éök.h
>

20 
	~<√éök-¥iv©e/tc.h
>

21 
	~<√éök/√éök.h
>

22 
	~<√éök/rouã/˛s/em©ch.h
>

23 
	~<√éök/rouã/˛s/em©ch/ãxt.h
>

25 
	sãxt_d©a


27 
tcf_em_ãxt
 
	mcfg
;

28 * 
	m∑âîn
;

31 
	$π∆_em©ch_ãxt_£t_‰om
(
π∆_em©ch
 *
e
, 
uöt8_t
 
œyî
,

32 
uöt16_t
 
off£t
)

34 
ãxt_d©a
 *
t
 = 
	`π∆_em©ch_d©a
(
e
);

35 
t
->
cfg
.
‰om_off£t
 = 
off£t
;

36 
t
->
cfg
.
‰om_œyî
 = 
œyî
;

37 
	}
}

39 
uöt16_t
 
	$π∆_em©ch_ãxt_gë_‰om_off£t
(
π∆_em©ch
 *
e
)

41  ((
ãxt_d©a
 *Ë
	`π∆_em©ch_d©a
(
e
))->
cfg
.
‰om_off£t
;

42 
	}
}

44 
uöt8_t
 
	$π∆_em©ch_ãxt_gë_‰om_œyî
(
π∆_em©ch
 *
e
)

46  ((
ãxt_d©a
 *Ë
	`π∆_em©ch_d©a
(
e
))->
cfg
.
‰om_œyî
;

47 
	}
}

49 
	$π∆_em©ch_ãxt_£t_to
(
π∆_em©ch
 *
e
, 
uöt8_t
 
œyî
,

50 
uöt16_t
 
off£t
)

52 
ãxt_d©a
 *
t
 = 
	`π∆_em©ch_d©a
(
e
);

53 
t
->
cfg
.
to_off£t
 = 
off£t
;

54 
t
->
cfg
.
to_œyî
 = 
œyî
;

55 
	}
}

57 
uöt16_t
 
	$π∆_em©ch_ãxt_gë_to_off£t
(
π∆_em©ch
 *
e
)

59  ((
ãxt_d©a
 *Ë
	`π∆_em©ch_d©a
(
e
))->
cfg
.
to_off£t
;

60 
	}
}

62 
uöt8_t
 
	$π∆_em©ch_ãxt_gë_to_œyî
(
π∆_em©ch
 *
e
)

64  ((
ãxt_d©a
 *Ë
	`π∆_em©ch_d©a
(
e
))->
cfg
.
to_œyî
;

65 
	}
}

67 
	$π∆_em©ch_ãxt_£t_∑âîn
(
π∆_em©ch
 *
e
,

68 *
∑âîn
, 
size_t
 
Àn
)

70 
ãxt_d©a
 *
t
 = 
	`π∆_em©ch_d©a
(
e
);

72 i‡(
t
->
∑âîn
)

73 
	`‰ì
(
t
->
∑âîn
);

75 
t
->
∑âîn
 =Öattern;

76 
t
->
cfg
.
∑âîn_Àn
 = 
Àn
;

77 
	}
}

79 *
	$π∆_em©ch_ãxt_gë_∑âîn
(
π∆_em©ch
 *
e
)

81  ((
ãxt_d©a
 *Ë
	`π∆_em©ch_d©a
(
e
))->
∑âîn
;

82 
	}
}

84 
size_t
 
	$π∆_em©ch_ãxt_gë_Àn
(
π∆_em©ch
 *
e
)

86  ((
ãxt_d©a
 *Ë
	`π∆_em©ch_d©a
(
e
))->
cfg
.
∑âîn_Àn
;

87 
	}
}

89 
	$π∆_em©ch_ãxt_£t_Ægo
(
π∆_em©ch
 *
e
, c⁄° *
Ægo
)

91 
ãxt_d©a
 *
t
 = 
	`π∆_em©ch_d©a
(
e
);

93 
	`°∫˝y
(
t
->
cfg
.
Ægo
,álgo, (t->cfg.algo));

94 
	}
}

96 *
	$π∆_em©ch_ãxt_gë_Ægo
(
π∆_em©ch
 *
e
)

98 
ãxt_d©a
 *
t
 = 
	`π∆_em©ch_d©a
(
e
);

100  
t
->
cfg
.
Ægo
[0] ?Å->cfg.Ægÿ: 
NULL
;

101 
	}
}

103 
	$ãxt_∑r£
(
π∆_em©ch
 *
e
, *
d©a
, 
size_t
 
Àn
)

105 
ãxt_d©a
 *
t
 = 
	`π∆_em©ch_d©a
(
e
);

106 
size_t
 
hdæí
 = (
tcf_em_ãxt
);

107 
size_t
 
∂í
 = 
Àn
 - 
hdæí
;

109 
	`mem˝y
(&
t
->
cfg
, 
d©a
, 
hdæí
);

111 i‡(
t
->
cfg
.
∑âîn_Àn
 > 
∂í
)

112  -
NLE_INVAL
;

114 i‡(
t
->
cfg
.
∑âîn_Àn
 > 0) {

115 i‡(!(
t
->
∑âîn
 = 
	`ˇŒoc
(1,Å->
cfg
.
∑âîn_Àn
)))

116  -
NLE_NOMEM
;

118 
	`mem˝y
(
t
->
∑âîn
, 
d©a
 + 
hdæí
,Å->
cfg
.
∑âîn_Àn
);

122 
	}
}

124 
	$ãxt_dump
(
π∆_em©ch
 *
e
, 
∆_dump_∑øms
 *
p
)

126 
ãxt_d©a
 *
t
 = 
	`π∆_em©ch_d©a
(
e
);

127 
buf
[64];

129 
	`∆_dump
(
p
, "text(%s \"%s\"",

130 
t
->
cfg
.
Ægo
[0] ?Å->cfg.algo : "no-algo",

131 
t
->
∑âîn
 ? : "no-pattern");

133 i‡(
t
->
cfg
.
‰om_œyî
 ||Å->cfg.
‰om_off£t
) {

134 
	`∆_dump
(
p
, " from %s",

135 
	`π∆_em©ch_off£t2txt
(
t
->
cfg
.
‰om_œyî
,

136 
t
->
cfg
.
‰om_off£t
,

137 
buf
, (buf)));

140 i‡(
t
->
cfg
.
to_œyî
 ||Å->cfg.
to_off£t
) {

141 
	`∆_dump
(
p
, "Åo %s",

142 
	`π∆_em©ch_off£t2txt
(
t
->
cfg
.
to_œyî
,

143 
t
->
cfg
.
to_off£t
,

144 
buf
, (buf)));

147 
	`∆_dump
(
p
, ")");

148 
	}
}

150 
	$ãxt_fûl
(
π∆_em©ch
 *
e
, 
∆_msg
 *
msg
)

152 
ãxt_d©a
 *
t
 = 
	`π∆_em©ch_d©a
(
e
);

153 
îr
;

155 i‡((
îr
 = 
	`∆msg_≠≥nd
(
msg
, &
t
->
cfg
, (t->cfg), 0)) < 0)

156  
îr
;

158  
	`∆msg_≠≥nd
(
msg
, 
t
->
∑âîn
,Å->
cfg
.
∑âîn_Àn
, 0);

159 
	}
}

161 
	$ãxt_‰ì
(
π∆_em©ch
 *
e
)

163 
ãxt_d©a
 *
t
 = 
	`π∆_em©ch_d©a
(
e
);

164 
	`‰ì
(
t
->
∑âîn
);

165 
	}
}

167 
π∆_em©ch_›s
 
	gãxt_›s
 = {

168 .
eo_köd
 = 
TCF_EM_TEXT
,

169 .
	geo_«me
 = "text",

170 .
	geo_möÀn
 = (
tcf_em_ãxt
),

171 .
	geo_d©Æí
 = (
ãxt_d©a
),

172 .
	geo_∑r£
 = 
ãxt_∑r£
,

173 .
	geo_dump
 = 
ãxt_dump
,

174 .
	geo_fûl
 = 
ãxt_fûl
,

175 .
	geo_‰ì
 = 
ãxt_‰ì
,

178 
__öô
 
	$ãxt_öô
()

180 
	`π∆_em©ch_ªgi°î
(&
ãxt_›s
);

181 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/cls/ematch_grammar.c

5 
	#YY_INT_ALIGNED
 

	)

9 
	#FLEX_SCANNER


	)

10 
	#YY_FLEX_MAJOR_VERSION
 2

	)

11 
	#YY_FLEX_MINOR_VERSION
 5

	)

12 
	#YY_FLEX_SUBMINOR_VERSION
 39

	)

13 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

14 
	#FLEX_BETA


	)

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<î∫o.h
>

23 
	~<°dlib.h
>

29 #i‚de‡
FLEXINT_H


30 
	#FLEXINT_H


	)

34 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

39 #i‚de‡
__STDC_LIMIT_MACROS


40 
	#__STDC_LIMIT_MACROS
 1

	)

43 
	~<öây≥s.h
>

44 
öt8_t
 
	tÊex_öt8_t
;

45 
uöt8_t
 
	tÊex_uöt8_t
;

46 
öt16_t
 
	tÊex_öt16_t
;

47 
uöt16_t
 
	tÊex_uöt16_t
;

48 
öt32_t
 
	tÊex_öt32_t
;

49 
uöt32_t
 
	tÊex_uöt32_t
;

51 sig√d 
	tÊex_öt8_t
;

52 
	tÊex_öt16_t
;

53 
	tÊex_öt32_t
;

54 
	tÊex_uöt8_t
;

55 
	tÊex_uöt16_t
;

56 
	tÊex_uöt32_t
;

59 #i‚de‡
INT8_MIN


60 
	#INT8_MIN
 (-128)

	)

62 #i‚de‡
INT16_MIN


63 
	#INT16_MIN
 (-32767-1)

	)

65 #i‚de‡
INT32_MIN


66 
	#INT32_MIN
 (-2147483647-1)

	)

68 #i‚de‡
INT8_MAX


69 
	#INT8_MAX
 (127)

	)

71 #i‚de‡
INT16_MAX


72 
	#INT16_MAX
 (32767)

	)

74 #i‚de‡
INT32_MAX


75 
	#INT32_MAX
 (2147483647)

	)

77 #i‚de‡
UINT8_MAX


78 
	#UINT8_MAX
 (255U)

	)

80 #i‚de‡
UINT16_MAX


81 
	#UINT16_MAX
 (65535U)

	)

83 #i‚de‡
UINT32_MAX


84 
	#UINT32_MAX
 (4294967295U)

	)

91 #ifde‡
__˝lu•lus


94 
	#YY_USE_CONST


	)

99 #i‡
deföed
 (
__STDC__
)

101 
	#YY_USE_CONST


	)

106 #ifde‡
YY_USE_CONST


107 
	#yyc⁄°
 c⁄°

	)

109 
	#yyc⁄°


	)

113 
	#YY_NULL
 0

	)

120 
	#YY_SC_TO_UI
(
c
Ë((Ë(Ëc)

	)

123 #i‚de‡
YY_TYPEDEF_YY_SCANNER_T


124 
	#YY_TYPEDEF_YY_SCANNER_T


	)

125 * 
	tyysˇn_t
;

130 
	#yyö
 
yyg
->
yyö_r


	)

131 
	#yyout
 
yyg
->
yyout_r


	)

132 
	#yyexåa
 
yyg
->
yyexåa_r


	)

133 
	#yyÀng
 
yyg
->
yyÀng_r


	)

134 
	#yyãxt
 
yyg
->
yyãxt_r


	)

135 
	#yylöío
 (
YY_CURRENT_BUFFER_LVALUE
->
yy_bs_löío
)

	)

136 
	#yycﬁumn
 (
YY_CURRENT_BUFFER_LVALUE
->
yy_bs_cﬁumn
)

	)

137 
	#yy_Êex_debug
 
yyg
->
yy_Êex_debug_r


	)

143 
	#BEGIN
 
yyg
->
yy_°¨t
 = 1 + 2 *

	)

149 
	#YY_START
 ((
yyg
->
yy_°¨t
 - 1Ë/ 2)

	)

150 
	#YYSTATE
 
YY_START


	)

153 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

156 
	#YY_NEW_FILE
 
	`em©ch_ª°¨t
(
yyö
 ,
yysˇ¬î
 )

	)

158 
	#YY_END_OF_BUFFER_CHAR
 0

	)

161 #i‚de‡
YY_BUF_SIZE


162 #ifde‡
__ü64__


167 
	#YY_BUF_SIZE
 32768

	)

169 
	#YY_BUF_SIZE
 16384

	)

175 
	#YY_STATE_BUF_SIZE
 ((
YY_BUF_SIZE
 + 2Ë* (
yy_°©e_ty≥
))

	)

177 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


178 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

179 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

182 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


183 
	#YY_TYPEDEF_YY_SIZE_T


	)

184 
size_t
 
	tyy_size_t
;

187 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

188 
	#EOB_ACT_END_OF_FILE
 1

	)

189 
	#EOB_ACT_LAST_MATCH
 2

	)

191 
	#YY_LESS_LINENO
(
n
)

	)

192 
	#YY_LINENO_REWIND_TO
(
±r
)

	)

195 
	#yyÀss
(
n
) \

199 
yyÀss_ma¸o_¨g
 = (
n
); \

200 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

201 *
yy_˝
 = 
yyg
->
yy_hﬁd_ch¨
; \

202 
YY_RESTORE_YY_MORE_OFFSET
 \

203 
yyg
->
yy_c_buf_p
 = 
yy_˝
 = 
yy_bp
 + 
yyÀss_ma¸o_¨g
 - 
YY_MORE_ADJ
; \

204 
YY_DO_BEFORE_ACTION
; \

206  0 )

	)

208 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, 
yyg
->
yyãxt_±r
 , 
yysˇ¬î
 )

	)

210 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


211 
	#YY_STRUCT_YY_BUFFER_STATE


	)

212 
	syy_buf„r_°©e


214 
FILE
 *
	myy_öput_fûe
;

216 *
	myy_ch_buf
;

217 *
	myy_buf_pos
;

222 
yy_size_t
 
	myy_buf_size
;

227 
yy_size_t
 
	myy_n_ch¨s
;

233 
	myy_is_our_buf„r
;

240 
	myy_is_öãø˘ive
;

246 
	myy_©_bﬁ
;

248 
	myy_bs_löío
;

249 
	myy_bs_cﬁumn
;

254 
	myy_fûl_buf„r
;

256 
	myy_buf„r_°©us
;

258 
	#YY_BUFFER_NEW
 0

	)

259 
	#YY_BUFFER_NORMAL
 1

	)

270 
	#YY_BUFFER_EOF_PENDING
 2

	)

281 
	#YY_CURRENT_BUFFER
 ( 
yyg
->
yy_buf„r_°ack
 \

282 ? 
yyg
->
yy_buf„r_°ack
[yyg->
yy_buf„r_°ack_t›
] \

283 : 
NULL
)

	)

288 
	#YY_CURRENT_BUFFER_LVALUE
 
yyg
->
yy_buf„r_°ack
[yyg->
yy_buf„r_°ack_t›
]

	)

290 
em©ch_ª°¨t
 (
FILE
 *
öput_fûe
 ,
yysˇn_t
 
yysˇ¬î
 );

291 
em©ch__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 ,
yysˇn_t
 
yysˇ¬î
 );

292 
YY_BUFFER_STATE
 
em©ch__¸óã_buf„r
 (
FILE
 *
fûe
,
size
 ,
yysˇn_t
 
yysˇ¬î
 );

293 
em©ch__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 ,
yysˇn_t
 
yysˇ¬î
 );

294 
em©ch__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 ,
yysˇn_t
 
yysˇ¬î
 );

295 
em©ch_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 ,
yysˇn_t
 
yysˇ¬î
 );

296 
em©ch_p›_buf„r_°©e
 (
yysˇn_t
 
yysˇ¬î
 );

298 
em©ch_ísuª_buf„r_°ack
 (
yysˇn_t
 
yysˇ¬î
 );

299 
em©ch__lﬂd_buf„r_°©e
 (
yysˇn_t
 
yysˇ¬î
 );

300 
em©ch__öô_buf„r
 (
YY_BUFFER_STATE
 
b
,
FILE
 *
fûe
 ,
yysˇn_t
 
yysˇ¬î
 );

302 
	#YY_FLUSH_BUFFER
 
	`em©ch__Êush_buf„r
(
YY_CURRENT_BUFFER
 ,
yysˇ¬î
)

	)

304 
YY_BUFFER_STATE
 
em©ch__sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 ,
yysˇn_t
 
yysˇ¬î
 );

305 
YY_BUFFER_STATE
 
em©ch__sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

306 
YY_BUFFER_STATE
 
em©ch__sˇn_byãs
 (
yyc⁄°
 *
byãs
,
yy_size_t
 
Àn
 ,
yysˇn_t
 
yysˇ¬î
 );

308 *
em©ch_Æloc
 (
yy_size_t
 ,
yysˇn_t
 
yysˇ¬î
 );

309 *
em©ch_ªÆloc
 (*,
yy_size_t
 ,
yysˇn_t
 
yysˇ¬î
 );

310 
em©ch_‰ì
 (* ,
yysˇn_t
 
yysˇ¬î
 );

312 
	#yy_√w_buf„r
 
em©ch__¸óã_buf„r


	)

314 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

316 i‡–! 
YY_CURRENT_BUFFER
 ){ \

317 
	`em©ch_ísuª_buf„r_°ack
 (
yysˇ¬î
); \

318 
YY_CURRENT_BUFFER_LVALUE
 = \

319 
	`em©ch__¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ,
yysˇ¬î
); \

321 
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

322 }

	)

324 
	#yy_£t_bﬁ
(
©_bﬁ
) \

326 i‡–! 
YY_CURRENT_BUFFER
 ){\

327 
	`em©ch_ísuª_buf„r_°ack
 (
yysˇ¬î
); \

328 
YY_CURRENT_BUFFER_LVALUE
 = \

329 
	`em©ch__¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ,
yysˇ¬î
); \

331 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = 
©_bﬁ
; \

332 }

	)

334 
	#YY_AT_BOL
(Ë(
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
)

	)

336 
	#em©ch_wøp
(
yysˇ¬î
Ë1

	)

337 
	#YY_SKIP_YYWRAP


	)

339 
	tYY_CHAR
;

341 
	tyy_°©e_ty≥
;

343 
	#yyãxt_±r
 
yyãxt_r


	)

345 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 (
yysˇn_t
 
yysˇ¬î
 );

346 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 (yy_°©e_ty≥ 
cuºít_°©e
 ,
yysˇn_t
 
yysˇ¬î
);

347 
yy_gë_√xt_buf„r
 (
yysˇn_t
 
yysˇ¬î
 );

348 
yy_Áèl_îr‹
 (
yyc⁄°
 
msg
[] ,
yysˇn_t
 
yysˇ¬î
 );

353 
	#YY_DO_BEFORE_ACTION
 \

354 
yyg
->
yyãxt_±r
 = 
yy_bp
; \

355 
yyÀng
 = (
size_t
Ë(
yy_˝
 - 
yy_bp
); \

356 
yyg
->
yy_hﬁd_ch¨
 = *
yy_˝
; \

357 *
yy_˝
 = '\0'; \

358 
yyg
->
yy_c_buf_p
 = 
yy_˝
;

	)

360 
	#YY_NUM_RULES
 91

	)

361 
	#YY_END_OF_BUFFER
 92

	)

364 
	syy_å™s_öfo


366 
Êex_öt32_t
 
	myy_vîify
;

367 
Êex_öt32_t
 
	myy_nxt
;

369 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ac˚±
[393] =

417 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ec
[256] =

449 
yyc⁄°
 
Êex_öt32_t
 
	gyy_mëa
[66] =

460 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ba£
[396] =

508 
yyc⁄°
 
Êex_öt16_t
 
	gyy_def
[396] =

556 
yyc⁄°
 
Êex_öt16_t
 
	gyy_nxt
[604] =

627 
yyc⁄°
 
Êex_öt16_t
 
	gyy_chk
[604] =

701 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

702 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

703 
	#YY_MORE_ADJ
 0

	)

704 
	#YY_RESTORE_YY_MORE_OFFSET


	)

717 
	~<√éök-¥iv©e/√éök.h
>

718 
	~<√éök-¥iv©e/tc.h
>

719 
	~<√éök/√éök.h
>

720 
	~<√éök/rouã/˛s/em©ch.h
>

721 
	~<√éök/rouã/˛s/em©ch/cmp.h
>

722 
	~"em©ch_sy¡ax.h
"

723 
	#YY_NO_INPUT
 1

	)

727 
	#INITIAL
 0

	)

728 
	#QUOTE
 1

	)

730 #i‚de‡
YY_NO_UNISTD_H


735 
	~<uni°d.h
>

738 #i‚de‡
YY_EXTRA_TYPE


739 
	#YY_EXTRA_TYPE
 *

	)

743 
	syyguts_t


747 
YY_EXTRA_TYPE
 
	myyexåa_r
;

750 
FILE
 *
	myyö_r
, *
	myyout_r
;

751 
size_t
 
	myy_buf„r_°ack_t›
;

752 
size_t
 
	myy_buf„r_°ack_max
;

753 
YY_BUFFER_STATE
 * 
	myy_buf„r_°ack
;

754 
	myy_hﬁd_ch¨
;

755 
yy_size_t
 
	myy_n_ch¨s
;

756 
yy_size_t
 
	myyÀng_r
;

757 *
	myy_c_buf_p
;

758 
	myy_öô
;

759 
	myy_°¨t
;

760 
	myy_did_buf„r_swôch_⁄_eof
;

761 
	myy_°¨t_°ack_±r
;

762 
	myy_°¨t_°ack_dïth
;

763 *
	myy_°¨t_°ack
;

764 
yy_°©e_ty≥
 
	myy_œ°_ac˚±ög_°©e
;

765 * 
	myy_œ°_ac˚±ög_˝os
;

767 
	myylöío_r
;

768 
	myy_Êex_debug_r
;

770 *
	myyãxt_r
;

771 
	myy_m‹e_Êag
;

772 
	myy_m‹e_Àn
;

774 
YYSTYPE
 * 
	myylvÆ_r
;

778 
yy_öô_globÆs
 (
yysˇn_t
 
yysˇ¬î
 );

782 
	#yylvÆ
 
yyg
->
yylvÆ_r


	)

784 
em©ch_Àx_öô
 (
yysˇn_t
* 
sˇ¬î
);

786 
em©ch_Àx_öô_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
,
yysˇn_t
* 
sˇ¬î
);

791 
em©ch_Àx_de°roy
 (
yysˇn_t
 
yysˇ¬î
 );

793 
em©ch_gë_debug
 (
yysˇn_t
 
yysˇ¬î
 );

795 
em©ch_£t_debug
 (
debug_Êag
 ,
yysˇn_t
 
yysˇ¬î
 );

797 
YY_EXTRA_TYPE
 
em©ch_gë_exåa
 (
yysˇn_t
 
yysˇ¬î
 );

799 
em©ch_£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 ,
yysˇn_t
 
yysˇ¬î
 );

801 
FILE
 *
em©ch_gë_ö
 (
yysˇn_t
 
yysˇ¬î
 );

803 
em©ch_£t_ö
 (
FILE
 * 
ö_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

805 
FILE
 *
em©ch_gë_out
 (
yysˇn_t
 
yysˇ¬î
 );

807 
em©ch_£t_out
 (
FILE
 * 
out_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

809 
yy_size_t
 
em©ch_gë_Àng
 (
yysˇn_t
 
yysˇ¬î
 );

811 *
em©ch_gë_ãxt
 (
yysˇn_t
 
yysˇ¬î
 );

813 
em©ch_gë_löío
 (
yysˇn_t
 
yysˇ¬î
 );

815 
em©ch_£t_löío
 (
löe_numbî
 ,
yysˇn_t
 
yysˇ¬î
 );

817 
em©ch_gë_cﬁumn
 (
yysˇn_t
 
yysˇ¬î
 );

819 
em©ch_£t_cﬁumn
 (
cﬁumn_no
 ,
yysˇn_t
 
yysˇ¬î
 );

821 
YYSTYPE
 * 
em©ch_gë_lvÆ
 (
yysˇn_t
 
yysˇ¬î
 );

823 
em©ch_£t_lvÆ
 (
YYSTYPE
 * 
yylvÆ_∑øm
 ,
yysˇn_t
 
yysˇ¬î
 );

829 #i‚de‡
YY_SKIP_YYWRAP


830 #ifde‡
__˝lu•lus


831 "C" 
em©ch_wøp
 (
yysˇn_t
 
yysˇ¬î
 );

833 
em©ch_wøp
 (
yysˇn_t
 
yysˇ¬î
 );

837 #i‚de‡
yyãxt_±r


838 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,,
yysˇn_t
 
yysˇ¬î
);

841 #ifde‡
YY_NEED_STRLEN


842 
yy_Êex_°æí
 (
yyc⁄°
 * ,
yysˇn_t
 
yysˇ¬î
);

845 #i‚de‡
YY_NO_INPUT


847 #ifde‡
__˝lu•lus


848 
yyöput
 (
yysˇn_t
 
yysˇ¬î
 );

850 
öput
 (
yysˇn_t
 
yysˇ¬î
 );

856 #i‚de‡
YY_READ_BUF_SIZE


857 #ifde‡
__ü64__


859 
	#YY_READ_BUF_SIZE
 16384

	)

861 
	#YY_READ_BUF_SIZE
 8192

	)

866 #i‚de‡
ECHO


870 
	#ECHO
 dÿ{ i‡(
	`fwrôe
–
yyãxt
, 
yyÀng
, 1, 
yyout
 )Ë{} } 0)

	)

876 #i‚de‡
YY_INPUT


877 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

878 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 ) \

880 
c
 = '*'; \

881 
size_t
 
n
; \

882  
n
 = 0;Ç < 
max_size
 && \

883 (
c
 = 
	`gëc
–
yyö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

884 
buf
[
n
] = (Ë
c
; \

885 i‡–
c
 == '\n' ) \

886 
buf
[
n
++] = (Ë
c
; \

887 i‡–
c
 =
EOF
 && 
	`„º‹
–
yyö
 ) ) \

888 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

889 
ªsu…
 = 
n
; \

893 
î∫o
=0; \

894  (
ªsu…
 = 
	`‰ód
(
buf
, 1, 
max_size
, 
yyö
))==0 && 
	`„º‹
(yyin)) \

896 if–
î∫o
 !
EINTR
) \

898 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

901 
î∫o
=0; \

902 
	`˛óªº
(
yyö
); \

906 

	)

913 #i‚de‡
yyãrmö©e


914 
	#yyãrmö©e
(Ë 
YY_NULL


	)

918 #i‚de‡
YY_START_STACK_INCR


919 
	#YY_START_STACK_INCR
 25

	)

923 #i‚de‡
YY_FATAL_ERROR


924 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg , 
yysˇ¬î
)

	)

932 #i‚de‡
YY_DECL


933 
	#YY_DECL_IS_OURS
 1

	)

935 
em©ch_Àx
 \

936 (
YYSTYPE
 * 
yylvÆ_∑øm
 ,
yysˇn_t
 
yysˇ¬î
);

938 
	#YY_DECL
 
em©ch_Àx
 \

939 (
YYSTYPE
 * 
yylvÆ_∑øm
 , 
yysˇn_t
 
yysˇ¬î
)

	)

945 #i‚de‡
YY_USER_ACTION


946 
	#YY_USER_ACTION


	)

950 #i‚de‡
YY_BREAK


951 
	#YY_BREAK
 ;

	)

954 
	#YY_RULE_SETUP
 \

955 
YY_USER_ACTION


	)

959 
	gYY_DECL


961 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

962 *
	gyy_˝
, *
	gyy_bp
;

963 
	gyy_a˘
;

964 
yyguts_t
 * 
	gyyg
 = (yyguts_t*)
yysˇ¬î
;

966 
	gyylvÆ
 = 
yylvÆ_∑øm
;

968 i‡–!
	gyyg
->
	gyy_öô
 )

970 
	gyyg
->
	gyy_öô
 = 1;

972 #ifde‡
YY_USER_INIT


973 
	gYY_USER_INIT
;

976 i‡–! 
	gyyg
->
	gyy_°¨t
 )

977 
	gyyg
->
	gyy_°¨t
 = 1;

979 i‡–! 
	gyyö
 )

980 
	gyyö
 = 
°dö
;

982 i‡–! 
	gyyout
 )

983 
	gyyout
 = 
°dout
;

985 i‡–! 
	gYY_CURRENT_BUFFER
 ) {

986 
em©ch_ísuª_buf„r_°ack
 (
yysˇ¬î
);

987 
	gYY_CURRENT_BUFFER_LVALUE
 =

988 
em©ch__¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ,
yysˇ¬î
);

991 
em©ch__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

1002 
	gyy_˝
 = 
yyg
->
yy_c_buf_p
;

1005 *
	gyy_˝
 = 
yyg
->
yy_hﬁd_ch¨
;

1010 
	gyy_bp
 = 
yy_˝
;

1012 
	gyy_cuºít_°©e
 = 
yyg
->
yy_°¨t
;

1013 
	gyy_m©ch
:

1016 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)] ;

1017 i‡–
	gyy_ac˚±
[
yy_cuºít_°©e
] )

1019 
	gyyg
->
	gyy_œ°_ac˚±ög_°©e
 = 
yy_cuºít_°©e
;

1020 
	gyyg
->
	gyy_œ°_ac˚±ög_˝os
 = 
yy_˝
;

1022  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

1024 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1025 i‡–
	gyy_cuºít_°©e
 >= 393 )

1026 
yy_c
 = 
yy_mëa
[() yy_c];

1028 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + (Ë
yy_c
];

1029 ++
	gyy_˝
;

1031  
	gyy_ba£
[
yy_cuºít_°©e
] != 538 );

1033 
	gyy_föd_a˘i⁄
:

1034 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

1035 i‡–
	gyy_a˘
 == 0 )

1037 
yy_˝
 = 
yyg
->
yy_œ°_ac˚±ög_˝os
;

1038 
	gyy_cuºít_°©e
 = 
yyg
->
yy_œ°_ac˚±ög_°©e
;

1039 
	gyy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

1042 
	gYY_DO_BEFORE_ACTION
;

1044 
	gdo_a˘i⁄
:

1046  
yy_a˘
 )

1050 *
yy_˝
 = 
yyg
->
yy_hﬁd_ch¨
;

1051 
	gyy_˝
 = 
yyg
->
yy_œ°_ac˚±ög_˝os
;

1052 
	gyy_cuºít_°©e
 = 
yyg
->
yy_œ°_ac˚±ög_°©e
;

1053 
	gyy_föd_a˘i⁄
;

1057 
YY_RULE_SETUP


1060 
YY_BREAK


1062 
YY_RULE_SETUP


1065 
NL_DBG
(4, "Beginning of quote\n");

1066 
	gyylvÆ
->
	gq
.
	gÀn
 = 32;

1067 i‡(!(
	gyylvÆ
->
	gq
.
	gd©a
 = 
ˇŒoc
(1, 
yylvÆ
->
q
.
Àn
)))

1068  
	gERROR
;

1070 
	gyylvÆ
->
	gq
.
	gödex
 = 0;

1071 
BEGIN
(
QUOTE
);

1073 
YY_BREAK


1075 
YY_RULE_SETUP


1078 
mem˝y
(
yylvÆ
->
q
.
d©a
 + yylvÆ->q.
ödex
, 
yyãxt
,

1079 
°æí
(
yyãxt
));

1080 
	gyylvÆ
->
	gq
.
	gödex
 +
°æí
(
yyãxt
);

1082 
YY_BREAK


1084 
YY_RULE_SETUP


1087 
BEGIN
(0);

1088  
	gQUOTED
;

1090 
YY_BREAK


1094 
YY_RULE_SETUP


1097 
yylvÆ
->
i
 = 
°πoul
(
yyãxt
, 
NULL
, 0);

1098  
	gNUMBER
;

1100 
YY_BREAK


1104 
YY_RULE_SETUP


1106  
KW_EQ
;

1107 
YY_BREAK


1111 
YY_RULE_SETUP


1113  
KW_GT
;

1114 
YY_BREAK


1118 
YY_RULE_SETUP


1120  
KW_LT
;

1121 
YY_BREAK


1125 
YY_RULE_SETUP


1127 { 
yylvÆ
->
i
 = 
TCF_EM_REL_AND
;  
	gLOGIC
; }

1128 
YY_BREAK


1132 
YY_RULE_SETUP


1134 { 
yylvÆ
->
i
 = 
TCF_EM_REL_OR
;  
	gLOGIC
; }

1135 
YY_BREAK


1139 
YY_RULE_SETUP


1141  
NOT
;

1142 
YY_BREAK


1144 
YY_RULE_SETUP


1146 { 
yylvÆ
->
i
 = 
TCF_EM_CMP
;  
	gEMATCH_CMP
; }

1147 
YY_BREAK


1149 
YY_RULE_SETUP


1151 { 
yylvÆ
->
i
 = 
TCF_EM_NBYTE
;  
	gEMATCH_NBYTE
; }

1152 
YY_BREAK


1154 
YY_RULE_SETUP


1156 { 
yylvÆ
->
i
 = 
TCF_EM_TEXT
;  
	gEMATCH_TEXT
; }

1157 
YY_BREAK


1159 
YY_RULE_SETUP


1161 { 
yylvÆ
->
i
 = 
TCF_EM_META
;  
	gEMATCH_META
; }

1162 
YY_BREAK


1164 
YY_RULE_SETUP


1166  
KW_OPEN
;

1167 
YY_BREAK


1169 
YY_RULE_SETUP


1171  
KW_CLOSE
;

1172 
YY_BREAK


1176 
YY_RULE_SETUP


1178  
KW_MASK
;

1179 
YY_BREAK


1183 
YY_RULE_SETUP


1185  
KW_SHIFT
;

1186 
YY_BREAK


1188 
YY_RULE_SETUP


1190  
KW_AT
;

1191 
YY_BREAK


1193 
YY_RULE_SETUP


1195  
KW_PLUS
;

1196 
YY_BREAK


1198 
YY_RULE_SETUP


1200  
KW_FROM
;

1201 
YY_BREAK


1203 
YY_RULE_SETUP


1205  
KW_TO
;

1206 
YY_BREAK


1208 
YY_RULE_SETUP


1210 { 
yylvÆ
->
i
 = 
TCF_EM_ALIGN_U8
;  
	gALIGN
; }

1211 
YY_BREAK


1213 
YY_RULE_SETUP


1215 { 
yylvÆ
->
i
 = 
TCF_EM_ALIGN_U16
;  
	gALIGN
; }

1216 
YY_BREAK


1218 
YY_RULE_SETUP


1220 { 
yylvÆ
->
i
 = 
TCF_EM_ALIGN_U32
;  
	gALIGN
; }

1221 
YY_BREAK


1225 
YY_RULE_SETUP


1227 { 
yylvÆ
->
i
 = 
TCF_LAYER_LINK
;  
	gLAYER
; }

1228 
YY_BREAK


1234 
YY_RULE_SETUP


1236 { 
yylvÆ
->
i
 = 
TCF_LAYER_NETWORK
;  
	gLAYER
; }

1237 
YY_BREAK


1241 
YY_RULE_SETUP


1243 { 
yylvÆ
->
i
 = 
TCF_LAYER_TRANSPORT
;  
	gLAYER
; }

1244 
YY_BREAK


1246 
YY_RULE_SETUP


1248  
META_RANDOM
;

1249 
YY_BREAK


1251 
YY_RULE_SETUP


1253  
META_LOADAVG_0
;

1254 
YY_BREAK


1256 
YY_RULE_SETUP


1258  
META_LOADAVG_1
;

1259 
YY_BREAK


1261 
YY_RULE_SETUP


1263  
META_LOADAVG_2
;

1264 
YY_BREAK


1266 
YY_RULE_SETUP


1268  
META_DEV
;

1269 
YY_BREAK


1271 
YY_RULE_SETUP


1273  
META_PRIO
;

1274 
YY_BREAK


1276 
YY_RULE_SETUP


1278  
META_PROTO
;

1279 
YY_BREAK


1281 
YY_RULE_SETUP


1283  
META_PKTTYPE
;

1284 
YY_BREAK


1286 
YY_RULE_SETUP


1288  
META_PKTLEN
;

1289 
YY_BREAK


1291 
YY_RULE_SETUP


1293  
META_DATALEN
;

1294 
YY_BREAK


1296 
YY_RULE_SETUP


1298  
META_MACLEN
;

1299 
YY_BREAK


1301 
YY_RULE_SETUP


1303  
META_MARK
;

1304 
YY_BREAK


1306 
YY_RULE_SETUP


1308  
META_TCINDEX
;

1309 
YY_BREAK


1311 
YY_RULE_SETUP


1313  
META_RTCLASSID
;

1314 
YY_BREAK


1316 
YY_RULE_SETUP


1318  
META_RTIIF
;

1319 
YY_BREAK


1321 
YY_RULE_SETUP


1323  
META_SK_FAMILY
;

1324 
YY_BREAK


1326 
YY_RULE_SETUP


1328  
META_SK_STATE
;

1329 
YY_BREAK


1331 
YY_RULE_SETUP


1333  
META_SK_REUSE
;

1334 
YY_BREAK


1336 
YY_RULE_SETUP


1338  
META_SK_REFCNT
;

1339 
YY_BREAK


1341 
YY_RULE_SETUP


1343  
META_SK_RCVBUF
;

1344 
YY_BREAK


1346 
YY_RULE_SETUP


1348  
META_SK_SNDBUF
;

1349 
YY_BREAK


1351 
YY_RULE_SETUP


1353  
META_SK_SHUTDOWN
;

1354 
YY_BREAK


1356 
YY_RULE_SETUP


1358  
META_SK_PROTO
;

1359 
YY_BREAK


1361 
YY_RULE_SETUP


1363  
META_SK_TYPE
;

1364 
YY_BREAK


1366 
YY_RULE_SETUP


1368  
META_SK_RMEM_ALLOC
;

1369 
YY_BREAK


1371 
YY_RULE_SETUP


1373  
META_SK_WMEM_ALLOC
;

1374 
YY_BREAK


1376 
YY_RULE_SETUP


1378  
META_SK_WMEM_QUEUED
;

1379 
YY_BREAK


1381 
YY_RULE_SETUP


1383  
META_SK_RCV_QLEN
;

1384 
YY_BREAK


1386 
YY_RULE_SETUP


1388  
META_SK_SND_QLEN
;

1389 
YY_BREAK


1391 
YY_RULE_SETUP


1393  
META_SK_ERR_QLEN
;

1394 
YY_BREAK


1396 
YY_RULE_SETUP


1398  
META_SK_FORWARD_ALLOCS
;

1399 
YY_BREAK


1401 
YY_RULE_SETUP


1403  
META_SK_ALLOCS
;

1404 
YY_BREAK


1406 
YY_RULE_SETUP


1408  
META_SK_ROUTE_CAPS
;

1409 
YY_BREAK


1411 
YY_RULE_SETUP


1413  
META_SK_HASH
;

1414 
YY_BREAK


1416 
YY_RULE_SETUP


1418  
META_SK_LINGERTIME
;

1419 
YY_BREAK


1421 
YY_RULE_SETUP


1423  
META_SK_ACK_BACKLOG
;

1424 
YY_BREAK


1426 
YY_RULE_SETUP


1428  
META_SK_MAX_ACK_BACKLOG
;

1429 
YY_BREAK


1431 
YY_RULE_SETUP


1433  
META_SK_PRIO
;

1434 
YY_BREAK


1436 
YY_RULE_SETUP


1438  
META_SK_RCVLOWAT
;

1439 
YY_BREAK


1441 
YY_RULE_SETUP


1443  
META_SK_RCVTIMEO
;

1444 
YY_BREAK


1446 
YY_RULE_SETUP


1448  
META_SK_SNDTIMEO
;

1449 
YY_BREAK


1451 
YY_RULE_SETUP


1453  
META_SK_SENDMSG_OFF
;

1454 
YY_BREAK


1456 
YY_RULE_SETUP


1458  
META_SK_WRITE_PENDING
;

1459 
YY_BREAK


1461 
YY_RULE_SETUP


1463  
META_VLAN
;

1464 
YY_BREAK


1466 
YY_RULE_SETUP


1468  
META_RXHASH
;

1469 
YY_BREAK


1471 
YY_RULE_SETUP


1473  
META_DEVNAME
;

1474 
YY_BREAK


1476 
YY_RULE_SETUP


1478  
META_SK_BOUND_IF
;

1479 
YY_BREAK


1481 
YY_RULE_SETUP


1484 
yylvÆ
->
s
 = 
°rdup
(
yyãxt
);

1485 i‡(
	gyylvÆ
->
	gs
 =
NULL
)

1486  
ERROR
;

1487 
NL_DBG
(4, "Àx STR=%s\n", 
yylvÆ
->
s
);

1488  
	gSTR
;

1490 
YY_BREAK


1492 
YY_RULE_SETUP


1494 
ECHO
;

1495 
	gYY_BREAK


1497 
YY_STATE_EOF
(
INITIAL
):

1498 
YY_STATE_EOF
(
QUOTE
):

1499 
yyãrmö©e
();

1501 
	gYY_END_OF_BUFFER
:

1504 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - 
yyg
->
yyãxt_±r
) - 1;

1507 *
	gyy_˝
 = 
yyg
->
yy_hﬁd_ch¨
;

1508 
YY_RESTORE_YY_MORE_OFFSET


1510 i‡–
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

1521 
yyg
->
yy_n_ch¨s
 = 
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1522 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_öput_fûe
 = 
yyö
;

1523 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

1533 i‡–
	gyyg
->
	gyy_c_buf_p
 <&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
yyg
->
yy_n_ch¨s
] )

1535 
yy_°©e_ty≥
 
yy_√xt_°©e
;

1537 
	gyyg
->
	gyy_c_buf_p
 = 
yyg
->
yyãxt_±r
 + 
yy_amou¡_of_m©ched_ãxt
;

1539 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
–
yysˇ¬î
 );

1550 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 , 
yysˇ¬î
);

1552 
	gyy_bp
 = 
yyg
->
yyãxt_±r
 + 
YY_MORE_ADJ
;

1554 i‡–
	gyy_√xt_°©e
 )

1557 
	gyy_˝
 = ++
yyg
->
yy_c_buf_p
;

1558 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

1559 
	gyy_m©ch
;

1564 
	gyy_˝
 = 
yyg
->
yy_c_buf_p
;

1565 
	gyy_föd_a˘i⁄
;

1569  
yy_gë_√xt_buf„r
–
yysˇ¬î
 ) )

1571 
	gEOB_ACT_END_OF_FILE
:

1573 
yyg
->
yy_did_buf„r_swôch_⁄_eof
 = 0;

1575 i‡–
em©ch_wøp
(
yysˇ¬î
 ) )

1586 
	gyyg
->
	gyy_c_buf_p
 = 
yyg
->
yyãxt_±r
 + 
YY_MORE_ADJ
;

1588 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

1589 
	gdo_a˘i⁄
;

1594 i‡–! 
	gyyg
->
	gyy_did_buf„r_swôch_⁄_eof
 )

1595 
	gYY_NEW_FILE
;

1600 
	gEOB_ACT_CONTINUE_SCAN
:

1601 
yyg
->
yy_c_buf_p
 =

1602 
yyg
->
yyãxt_±r
 + 
yy_amou¡_of_m©ched_ãxt
;

1604 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
–
yysˇ¬î
 );

1606 
	gyy_˝
 = 
yyg
->
yy_c_buf_p
;

1607 
	gyy_bp
 = 
yyg
->
yyãxt_±r
 + 
YY_MORE_ADJ
;

1608 
	gyy_m©ch
;

1610 
	gEOB_ACT_LAST_MATCH
:

1611 
yyg
->
yy_c_buf_p
 =

1612 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
yyg
->
yy_n_ch¨s
];

1614 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
–
yysˇ¬î
 );

1616 
	gyy_˝
 = 
yyg
->
yy_c_buf_p
;

1617 
	gyy_bp
 = 
yyg
->
yyãxt_±r
 + 
YY_MORE_ADJ
;

1618 
	gyy_föd_a˘i⁄
;

1624 
YY_FATAL_ERROR
(

1638 
	$yy_gë_√xt_buf„r
 (
yysˇn_t
 
yysˇ¬î
)

1640 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1641 *
de°
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
;

1642 *
sour˚
 = 
yyg
->
yyãxt_±r
;

1643 
numbî_to_move
, 
i
;

1644 
ªt_vÆ
;

1646 i‡–
yyg
->
yy_c_buf_p
 > &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[yyg->
yy_n_ch¨s
 + 1] )

1647 
	`YY_FATAL_ERROR
(

1650 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_fûl_buf„r
 == 0 )

1652 i‡–
yyg
->
yy_c_buf_p
 - yyg->
yyãxt_±r
 - 
YY_MORE_ADJ
 == 1 )

1657  
EOB_ACT_END_OF_FILE
;

1665  
EOB_ACT_LAST_MATCH
;

1672 
numbî_to_move
 = (Ë(
yyg
->
yy_c_buf_p
 - yyg->
yyãxt_±r
) - 1;

1674  
i
 = 0; i < 
numbî_to_move
; ++i )

1675 *(
de°
++Ë*(
sour˚
++);

1677 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

1681 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = 
yyg
->yy_n_chars = 0;

1685 
yy_size_t
 
num_to_ªad
 =

1686 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 - 
numbî_to_move
 - 1;

1688  
num_to_ªad
 <= 0 )

1692 
YY_BUFFER_STATE
 
b
 = 
YY_CURRENT_BUFFER_LVALUE
;

1694 
yy_c_buf_p_off£t
 =

1695 (Ë(
yyg
->
yy_c_buf_p
 - 
b
->
yy_ch_buf
);

1697 i‡–
b
->
yy_is_our_buf„r
 )

1699 
yy_size_t
 
√w_size
 = 
b
->
yy_buf_size
 * 2;

1701 i‡–
√w_size
 <= 0 )

1702 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

1704 
b
->
yy_buf_size
 *= 2;

1706 
b
->
yy_ch_buf
 = (*)

1708 
	`em©ch_ªÆloc
((*Ë
b
->
yy_ch_buf
,b->
yy_buf_size
 + 2 ,
yysˇ¬î
 );

1712 
b
->
yy_ch_buf
 = 0;

1714 i‡–! 
b
->
yy_ch_buf
 )

1715 
	`YY_FATAL_ERROR
(

1718 
yyg
->
yy_c_buf_p
 = &
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

1720 
num_to_ªad
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 -

1721 
numbî_to_move
 - 1;

1725 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

1726 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

1729 
	`YY_INPUT
–(&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
]),

1730 
yyg
->
yy_n_ch¨s
, 
num_to_ªad
 );

1732 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = 
yyg
->yy_n_chars;

1735 i‡–
yyg
->
yy_n_ch¨s
 == 0 )

1737 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

1739 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

1740 
	`em©ch_ª°¨t
(
yyö
 ,
yysˇ¬î
);

1745 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

1746 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =

1747 
YY_BUFFER_EOF_PENDING
;

1752 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

1754 i‡((
yy_size_t
Ë(
yyg
->
yy_n_ch¨s
 + 
numbî_to_move
Ë> 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
) {

1756 
yy_size_t
 
√w_size
 = 
yyg
->
yy_n_ch¨s
 + 
numbî_to_move
 + (yyg->yy_n_chars >> 1);

1757 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 = (*Ë
	`em©ch_ªÆloc
((*ËYY_CURRENT_BUFFER_LVALUE->yy_ch_buf,
√w_size
 ,
yysˇ¬î
 );

1758 i‡–! 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

1759 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_get_next_buffer()" );

1762 
yyg
->
yy_n_ch¨s
 +
numbî_to_move
;

1763 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
yyg
->
yy_n_ch¨s
] = 
YY_END_OF_BUFFER_CHAR
;

1764 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
yyg
->
yy_n_ch¨s
 + 1] = 
YY_END_OF_BUFFER_CHAR
;

1766 
yyg
->
yyãxt_±r
 = &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[0];

1768  
ªt_vÆ
;

1769 
	}
}

1773 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
 (
yysˇn_t
 
yysˇ¬î
)

1775 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

1776 *
yy_˝
;

1777 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1779 
yy_cuºít_°©e
 = 
yyg
->
yy_°¨t
;

1781  
yy_˝
 = 
yyg
->
yyãxt_±r
 + 
YY_MORE_ADJ
; yy_˝ < yyg->
yy_c_buf_p
; ++yy_cp )

1783 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

1784 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1786 
yyg
->
yy_œ°_ac˚±ög_°©e
 = 
yy_cuºít_°©e
;

1787 
yyg
->
yy_œ°_ac˚±ög_˝os
 = 
yy_˝
;

1789  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1791 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1792 i‡–
yy_cuºít_°©e
 >= 393 )

1793 
yy_c
 = 
yy_mëa
[() yy_c];

1795 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1798  
yy_cuºít_°©e
;

1799 
	}
}

1806 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
 (
yy_°©e_ty≥
 
yy_cuºít_°©e
 , 
yysˇn_t
 
yysˇ¬î
)

1808 
yy_is_jam
;

1809 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1810 *
yy_˝
 = 
yyg
->
yy_c_buf_p
;

1812 
YY_CHAR
 
yy_c
 = 1;

1813 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1815 
yyg
->
yy_œ°_ac˚±ög_°©e
 = 
yy_cuºít_°©e
;

1816 
yyg
->
yy_œ°_ac˚±ög_˝os
 = 
yy_˝
;

1818  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1820 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1821 i‡–
yy_cuºít_°©e
 >= 393 )

1822 
yy_c
 = 
yy_mëa
[() yy_c];

1824 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1825 
yy_is_jam
 = (
yy_cuºít_°©e
 == 392);

1827 ()
yyg
;

1828  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

1829 
	}
}

1831 #i‚de‡
YY_NO_INPUT


1832 #ifde‡
__˝lu•lus


1833 
	$yyöput
 (
yysˇn_t
 
yysˇ¬î
)

1835 
	$öput
 (
yysˇn_t
 
yysˇ¬î
)

1839 
c
;

1840 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1842 *
yyg
->
yy_c_buf_p
 = yyg->
yy_hﬁd_ch¨
;

1844 i‡–*
yyg
->
yy_c_buf_p
 =
YY_END_OF_BUFFER_CHAR
 )

1850 i‡–
yyg
->
yy_c_buf_p
 < &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[yyg->
yy_n_ch¨s
] )

1852 *
yyg
->
yy_c_buf_p
 = '\0';

1856 
yy_size_t
 
off£t
 = 
yyg
->
yy_c_buf_p
 - yyg->
yyãxt_±r
;

1857 ++
yyg
->
yy_c_buf_p
;

1859  
	`yy_gë_√xt_buf„r
–
yysˇ¬î
 ) )

1861 
EOB_ACT_LAST_MATCH
:

1873 
	`em©ch_ª°¨t
(
yyö
 ,
yysˇ¬î
);

1877 
EOB_ACT_END_OF_FILE
:

1879 i‡–
	`em©ch_wøp
(
yysˇ¬î
 ) )

1880  
EOF
;

1882 i‡–! 
yyg
->
yy_did_buf„r_swôch_⁄_eof
 )

1883 
YY_NEW_FILE
;

1884 #ifde‡
__˝lu•lus


1885  
	`yyöput
(
yysˇ¬î
);

1887  
	`öput
(
yysˇ¬î
);

1891 
EOB_ACT_CONTINUE_SCAN
:

1892 
yyg
->
yy_c_buf_p
 = yyg->
yyãxt_±r
 + 
off£t
;

1898 
c
 = *(*Ë
yyg
->
yy_c_buf_p
;

1899 *
yyg
->
yy_c_buf_p
 = '\0';

1900 
yyg
->
yy_hﬁd_ch¨
 = *++yyg->
yy_c_buf_p
;

1902  
c
;

1903 
	}
}

1911 
	$em©ch_ª°¨t
 (
FILE
 * 
öput_fûe
 , 
yysˇn_t
 
yysˇ¬î
)

1913 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1915 i‡–! 
YY_CURRENT_BUFFER
 ){

1916 
	`em©ch_ísuª_buf„r_°ack
 (
yysˇ¬î
);

1917 
YY_CURRENT_BUFFER_LVALUE
 =

1918 
	`em©ch__¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ,
yysˇ¬î
);

1921 
	`em©ch__öô_buf„r
(
YY_CURRENT_BUFFER
,
öput_fûe
 ,
yysˇ¬î
);

1922 
	`em©ch__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

1923 
	}
}

1929 
	$em©ch__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 , 
yysˇn_t
 
yysˇ¬î
)

1931 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1938 
	`em©ch_ísuª_buf„r_°ack
 (
yysˇ¬î
);

1939 i‡–
YY_CURRENT_BUFFER
 =
√w_buf„r
 )

1942 i‡–
YY_CURRENT_BUFFER
 )

1945 *
yyg
->
yy_c_buf_p
 = yyg->
yy_hﬁd_ch¨
;

1946 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = 
yyg
->
yy_c_buf_p
;

1947 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = 
yyg
->yy_n_chars;

1950 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1951 
	`em©ch__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

1958 
yyg
->
yy_did_buf„r_swôch_⁄_eof
 = 1;

1959 
	}
}

1961 
	$em©ch__lﬂd_buf„r_°©e
 (
yysˇn_t
 
yysˇ¬î
)

1963 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1964 
yyg
->
yy_n_ch¨s
 = 
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1965 
yyg
->
yyãxt_±r
 = yyg->
yy_c_buf_p
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
;

1966 
yyö
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_öput_fûe
;

1967 
yyg
->
yy_hﬁd_ch¨
 = *yyg->
yy_c_buf_p
;

1968 
	}
}

1976 
YY_BUFFER_STATE
 
	$em©ch__¸óã_buf„r
 (
FILE
 * 
fûe
, 
size
 , 
yysˇn_t
 
yysˇ¬î
)

1978 
YY_BUFFER_STATE
 
b
;

1980 
b
 = (
YY_BUFFER_STATE
Ë
	`em©ch_Æloc
(–
yy_buf„r_°©e
 ) ,
yysˇ¬î
 );

1981 i‡–! 
b
 )

1982 
	`YY_FATAL_ERROR
( "out of dynamic memory inÉmatch__create_buffer()" );

1984 
b
->
yy_buf_size
 = 
size
;

1989 
b
->
yy_ch_buf
 = (*Ë
	`em©ch_Æloc
(b->
yy_buf_size
 + 2 ,
yysˇ¬î
 );

1990 i‡–! 
b
->
yy_ch_buf
 )

1991 
	`YY_FATAL_ERROR
( "out of dynamic memory inÉmatch__create_buffer()" );

1993 
b
->
yy_is_our_buf„r
 = 1;

1995 
	`em©ch__öô_buf„r
(
b
,
fûe
 ,
yysˇ¬î
);

1997  
b
;

1998 
	}
}

2004 
	$em©ch__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 , 
yysˇn_t
 
yysˇ¬î
)

2006 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2008 i‡–! 
b
 )

2011 i‡–
b
 =
YY_CURRENT_BUFFER
 )

2012 
YY_CURRENT_BUFFER_LVALUE
 = (
YY_BUFFER_STATE
) 0;

2014 i‡–
b
->
yy_is_our_buf„r
 )

2015 
	`em©ch_‰ì
((*Ë
b
->
yy_ch_buf
 ,
yysˇ¬î
 );

2017 
	`em©ch_‰ì
((*Ë
b
 ,
yysˇ¬î
 );

2018 
	}
}

2024 
	$em©ch__öô_buf„r
 (
YY_BUFFER_STATE
 
b
, 
FILE
 * 
fûe
 , 
yysˇn_t
 
yysˇ¬î
)

2027 
€ºno
 = 
î∫o
;

2028 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2030 
	`em©ch__Êush_buf„r
(
b
 ,
yysˇ¬î
);

2032 
b
->
yy_öput_fûe
 = 
fûe
;

2033 
b
->
yy_fûl_buf„r
 = 1;

2039 i‡(
b
 !
YY_CURRENT_BUFFER
){

2040 
b
->
yy_bs_löío
 = 1;

2041 
b
->
yy_bs_cﬁumn
 = 0;

2044 
b
->
yy_is_öãø˘ive
 = 
fûe
 ? (
	`ißây
–
	`fûío
(file) ) > 0) : 0;

2046 
î∫o
 = 
€ºno
;

2047 
	}
}

2053 
	$em©ch__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 , 
yysˇn_t
 
yysˇ¬î
)

2055 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2056 i‡–! 
b
 )

2059 
b
->
yy_n_ch¨s
 = 0;

2065 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

2066 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

2068 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

2070 
b
->
yy_©_bﬁ
 = 1;

2071 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

2073 i‡–
b
 =
YY_CURRENT_BUFFER
 )

2074 
	`em©ch__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

2075 
	}
}

2083 
	$em©ch_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 , 
yysˇn_t
 
yysˇ¬î
)

2085 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2086 i‡(
√w_buf„r
 =
NULL
)

2089 
	`em©ch_ísuª_buf„r_°ack
(
yysˇ¬î
);

2092 i‡–
YY_CURRENT_BUFFER
 )

2095 *
yyg
->
yy_c_buf_p
 = yyg->
yy_hﬁd_ch¨
;

2096 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = 
yyg
->
yy_c_buf_p
;

2097 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = 
yyg
->yy_n_chars;

2101 i‡(
YY_CURRENT_BUFFER
)

2102 
yyg
->
yy_buf„r_°ack_t›
++;

2103 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

2106 
	`em©ch__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

2107 
yyg
->
yy_did_buf„r_swôch_⁄_eof
 = 1;

2108 
	}
}

2114 
	$em©ch_p›_buf„r_°©e
 (
yysˇn_t
 
yysˇ¬î
)

2116 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2117 i‡(!
YY_CURRENT_BUFFER
)

2120 
	`em©ch__dñëe_buf„r
(
YY_CURRENT_BUFFER
 ,
yysˇ¬î
);

2121 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

2122 i‡(
yyg
->
yy_buf„r_°ack_t›
 > 0)

2123 --
yyg
->
yy_buf„r_°ack_t›
;

2125 i‡(
YY_CURRENT_BUFFER
) {

2126 
	`em©ch__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

2127 
yyg
->
yy_did_buf„r_swôch_⁄_eof
 = 1;

2129 
	}
}

2134 
	$em©ch_ísuª_buf„r_°ack
 (
yysˇn_t
 
yysˇ¬î
)

2136 
yy_size_t
 
num_to_Æloc
;

2137 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2139 i‡(!
yyg
->
yy_buf„r_°ack
) {

2145 
num_to_Æloc
 = 1;

2146 
yyg
->
yy_buf„r_°ack
 = (
yy_buf„r_°©e
**)
em©ch_Æloc


2147 (
num_to_Æloc
 * (
yy_buf„r_°©e
*)

2148 , 
yysˇ¬î
);

2149 i‡–! 
yyg
->
yy_buf„r_°ack
 )

2150 
	`YY_FATAL_ERROR
( "out of dynamic memory inÉmatch_ensure_buffer_stack()" );

2152 
	`mem£t
(
yyg
->
yy_buf„r_°ack
, 0, 
num_to_Æloc
 * (
yy_buf„r_°©e
*));

2154 
yyg
->
yy_buf„r_°ack_max
 = 
num_to_Æloc
;

2155 
yyg
->
yy_buf„r_°ack_t›
 = 0;

2159 i‡(
yyg
->
yy_buf„r_°ack_t›
 >(yyg->
yy_buf„r_°ack_max
) - 1){

2162 
grow_size
 = 8 ;

2164 
num_to_Æloc
 = 
yyg
->
yy_buf„r_°ack_max
 + 
grow_size
;

2165 
yyg
->
yy_buf„r_°ack
 = (
yy_buf„r_°©e
**)
em©ch_ªÆloc


2166 (
yyg
->
yy_buf„r_°ack
,

2167 
num_to_Æloc
 * (
yy_buf„r_°©e
*)

2168 , 
yysˇ¬î
);

2169 i‡–! 
yyg
->
yy_buf„r_°ack
 )

2170 
	`YY_FATAL_ERROR
( "out of dynamic memory inÉmatch_ensure_buffer_stack()" );

2173 
	`mem£t
(
yyg
->
yy_buf„r_°ack
 + yyg->
yy_buf„r_°ack_max
, 0, 
grow_size
 * (
yy_buf„r_°©e
*));

2174 
yyg
->
yy_buf„r_°ack_max
 = 
num_to_Æloc
;

2176 
	}
}

2184 
YY_BUFFER_STATE
 
	$em©ch__sˇn_buf„r
 (* 
ba£
, 
yy_size_t
 
size
 , 
yysˇn_t
 
yysˇ¬î
)

2186 
YY_BUFFER_STATE
 
b
;

2188 i‡–
size
 < 2 ||

2189 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

2190 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

2194 
b
 = (
YY_BUFFER_STATE
Ë
	`em©ch_Æloc
(–
yy_buf„r_°©e
 ) ,
yysˇ¬î
 );

2195 i‡–! 
b
 )

2196 
	`YY_FATAL_ERROR
( "out of dynamic memory inÉmatch__scan_buffer()" );

2198 
b
->
yy_buf_size
 = 
size
 - 2;

2199 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

2200 
b
->
yy_is_our_buf„r
 = 0;

2201 
b
->
yy_öput_fûe
 = 0;

2202 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

2203 
b
->
yy_is_öãø˘ive
 = 0;

2204 
b
->
yy_©_bﬁ
 = 1;

2205 
b
->
yy_fûl_buf„r
 = 0;

2206 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

2208 
	`em©ch__swôch_to_buf„r
(
b
 ,
yysˇ¬î
 );

2210  
b
;

2211 
	}
}

2221 
YY_BUFFER_STATE
 
	$em©ch__sˇn_°rög
 (
yyc⁄°
 * 
yy°r
 , 
yysˇn_t
 
yysˇ¬î
)

2224  
	`em©ch__sˇn_byãs
(
yy°r
,
	`°æí
(yy°rË,
yysˇ¬î
);

2225 
	}
}

2234 
YY_BUFFER_STATE
 
	$em©ch__sˇn_byãs
 (
yyc⁄°
 * 
yybyãs
, 
yy_size_t
 
_yybyãs_Àn
 , 
yysˇn_t
 
yysˇ¬î
)

2236 
YY_BUFFER_STATE
 
b
;

2237 *
buf
;

2238 
yy_size_t
 
n
;

2239 
yy_size_t
 
i
;

2242 
n
 = 
_yybyãs_Àn
 + 2;

2243 
buf
 = (*Ë
	`em©ch_Æloc
(
n
 ,
yysˇ¬î
 );

2244 i‡–! 
buf
 )

2245 
	`YY_FATAL_ERROR
( "out of dynamic memory inÉmatch__scan_bytes()" );

2247  
i
 = 0; i < 
_yybyãs_Àn
; ++i )

2248 
buf
[
i
] = 
yybyãs
[i];

2250 
buf
[
_yybyãs_Àn
] = buf[_yybyãs_Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

2252 
b
 = 
	`em©ch__sˇn_buf„r
(
buf
,
n
 ,
yysˇ¬î
);

2253 i‡–! 
b
 )

2254 
	`YY_FATAL_ERROR
( "bad buffer inÉmatch__scan_bytes()" );

2259 
b
->
yy_is_our_buf„r
 = 1;

2261  
b
;

2262 
	}
}

2264 #i‚de‡
YY_EXIT_FAILURE


2265 
	#YY_EXIT_FAILURE
 2

	)

2268 
	$yy_Áèl_îr‹
 (
yyc⁄°
 * 
msg
 , 
yysˇn_t
 
yysˇ¬î
)

2270 (Ë
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

2271 
	`exô
–
YY_EXIT_FAILURE
 );

2272 
	}
}

2276 #unde‡
yyÀss


2277 
	#yyÀss
(
n
) \

2281 
yyÀss_ma¸o_¨g
 = (
n
); \

2282 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

2283 
yyãxt
[
yyÀng
] = 
yyg
->
yy_hﬁd_ch¨
; \

2284 
yyg
->
yy_c_buf_p
 = 
yyãxt
 + 
yyÀss_ma¸o_¨g
; \

2285 
yyg
->
yy_hﬁd_ch¨
 = *yyg->
yy_c_buf_p
; \

2286 *
yyg
->
yy_c_buf_p
 = '\0'; \

2287 
yyÀng
 = 
yyÀss_ma¸o_¨g
; \

2289  0 )

	)

2296 
YY_EXTRA_TYPE
 
	$em©ch_gë_exåa
 (
yysˇn_t
 
yysˇ¬î
)

2298 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2299  
yyexåa
;

2300 
	}
}

2305 
	$em©ch_gë_löío
 (
yysˇn_t
 
yysˇ¬î
)

2307 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2309 i‡(! 
YY_CURRENT_BUFFER
)

2312  
yylöío
;

2313 
	}
}

2318 
	$em©ch_gë_cﬁumn
 (
yysˇn_t
 
yysˇ¬î
)

2320 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2322 i‡(! 
YY_CURRENT_BUFFER
)

2325  
yycﬁumn
;

2326 
	}
}

2331 
FILE
 *
	$em©ch_gë_ö
 (
yysˇn_t
 
yysˇ¬î
)

2333 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2334  
yyö
;

2335 
	}
}

2340 
FILE
 *
	$em©ch_gë_out
 (
yysˇn_t
 
yysˇ¬î
)

2342 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2343  
yyout
;

2344 
	}
}

2349 
yy_size_t
 
	$em©ch_gë_Àng
 (
yysˇn_t
 
yysˇ¬î
)

2351 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2352  
yyÀng
;

2353 
	}
}

2359 *
	$em©ch_gë_ãxt
 (
yysˇn_t
 
yysˇ¬î
)

2361 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2362  
yyãxt
;

2363 
	}
}

2369 
	$em©ch_£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 , 
yysˇn_t
 
yysˇ¬î
)

2371 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2372 
yyexåa
 = 
u£r_deföed
 ;

2373 
	}
}

2379 
	$em©ch_£t_löío
 (
löe_numbî
 , 
yysˇn_t
 
yysˇ¬î
)

2381 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2384 i‡(! 
YY_CURRENT_BUFFER
 )

2385 
	`YY_FATAL_ERROR
( "ematch_set_lineno called withÇo buffer" );

2387 
yylöío
 = 
löe_numbî
;

2388 
	}
}

2394 
	$em©ch_£t_cﬁumn
 (
cﬁumn_no
 , 
yysˇn_t
 
yysˇ¬î
)

2396 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2399 i‡(! 
YY_CURRENT_BUFFER
 )

2400 
	`YY_FATAL_ERROR
( "ematch_set_column called withÇo buffer" );

2402 
yycﬁumn
 = 
cﬁumn_no
;

2403 
	}
}

2411 
	$em©ch_£t_ö
 (
FILE
 * 
ö_°r
 , 
yysˇn_t
 
yysˇ¬î
)

2413 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2414 
yyö
 = 
ö_°r
 ;

2415 
	}
}

2417 
	$em©ch_£t_out
 (
FILE
 * 
out_°r
 , 
yysˇn_t
 
yysˇ¬î
)

2419 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2420 
yyout
 = 
out_°r
 ;

2421 
	}
}

2423 
	$em©ch_gë_debug
 (
yysˇn_t
 
yysˇ¬î
)

2425 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2426  
yy_Êex_debug
;

2427 
	}
}

2429 
	$em©ch_£t_debug
 (
bdebug
 , 
yysˇn_t
 
yysˇ¬î
)

2431 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2432 
yy_Êex_debug
 = 
bdebug
 ;

2433 
	}
}

2437 
YYSTYPE
 * 
	$em©ch_gë_lvÆ
 (
yysˇn_t
 
yysˇ¬î
)

2439 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2440  
yylvÆ
;

2441 
	}
}

2443 
	$em©ch_£t_lvÆ
 (
YYSTYPE
 * 
yylvÆ_∑øm
 , 
yysˇn_t
 
yysˇ¬î
)

2445 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2446 
yylvÆ
 = 
yylvÆ_∑øm
;

2447 
	}
}

2456 
	$em©ch_Àx_öô
(
yysˇn_t
* 
±r_yy_globÆs
)

2459 i‡(
±r_yy_globÆs
 =
NULL
){

2460 
î∫o
 = 
EINVAL
;

2464 *
±r_yy_globÆs
 = (
yysˇn_t
Ë
	`em©ch_Æloc
 ( –
yyguts_t
 ), 
NULL
 );

2466 i‡(*
±r_yy_globÆs
 =
NULL
){

2467 
î∫o
 = 
ENOMEM
;

2472 
	`mem£t
(*
±r_yy_globÆs
,0x00,(
yyguts_t
));

2474  
	`yy_öô_globÆs
 ( *
±r_yy_globÆs
 );

2475 
	}
}

2485 
	$em©ch_Àx_öô_exåa
(
YY_EXTRA_TYPE
 
yy_u£r_deföed
,
yysˇn_t
* 
±r_yy_globÆs
 )

2488 
yyguts_t
 
dummy_yyguts
;

2490 
	`em©ch_£t_exåa
 (
yy_u£r_deföed
, &
dummy_yyguts
);

2492 i‡(
±r_yy_globÆs
 =
NULL
){

2493 
î∫o
 = 
EINVAL
;

2497 *
±r_yy_globÆs
 = (
yysˇn_t
Ë
	`em©ch_Æloc
 ( –
yyguts_t
 ), &
dummy_yyguts
 );

2499 i‡(*
±r_yy_globÆs
 =
NULL
){

2500 
î∫o
 = 
ENOMEM
;

2506 
	`mem£t
(*
±r_yy_globÆs
,0x00,(
yyguts_t
));

2508 
	`em©ch_£t_exåa
 (
yy_u£r_deföed
, *
±r_yy_globÆs
);

2510  
	`yy_öô_globÆs
 ( *
±r_yy_globÆs
 );

2511 
	}
}

2513 
	$yy_öô_globÆs
 (
yysˇn_t
 
yysˇ¬î
)

2515 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2520 
yyg
->
yy_buf„r_°ack
 = 0;

2521 
yyg
->
yy_buf„r_°ack_t›
 = 0;

2522 
yyg
->
yy_buf„r_°ack_max
 = 0;

2523 
yyg
->
yy_c_buf_p
 = (*) 0;

2524 
yyg
->
yy_öô
 = 0;

2525 
yyg
->
yy_°¨t
 = 0;

2527 
yyg
->
yy_°¨t_°ack_±r
 = 0;

2528 
yyg
->
yy_°¨t_°ack_dïth
 = 0;

2529 
yyg
->
yy_°¨t_°ack
 = 
NULL
;

2532 #ifde‡
YY_STDINIT


2533 
yyö
 = 
°dö
;

2534 
yyout
 = 
°dout
;

2536 
yyö
 = (
FILE
 *) 0;

2537 
yyout
 = (
FILE
 *) 0;

2544 
	}
}

2547 
	$em©ch_Àx_de°roy
 (
yysˇn_t
 
yysˇ¬î
)

2549 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2552 
YY_CURRENT_BUFFER
){

2553 
	`em©ch__dñëe_buf„r
(
YY_CURRENT_BUFFER
 ,
yysˇ¬î
 );

2554 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

2555 
	`em©ch_p›_buf„r_°©e
(
yysˇ¬î
);

2559 
	`em©ch_‰ì
(
yyg
->
yy_buf„r_°ack
 ,
yysˇ¬î
);

2560 
yyg
->
yy_buf„r_°ack
 = 
NULL
;

2563 
	`em©ch_‰ì
(
yyg
->
yy_°¨t_°ack
 ,
yysˇ¬î
 );

2564 
yyg
->
yy_°¨t_°ack
 = 
NULL
;

2568 
	`yy_öô_globÆs
–
yysˇ¬î
);

2571 
	`em©ch_‰ì
 ( 
yysˇ¬î
 , yyscanner );

2572 
yysˇ¬î
 = 
NULL
;

2574 
	}
}

2580 #i‚de‡
yyãxt_±r


2581 
	$yy_Êex_°∫˝y
 (* 
s1
, 
yyc⁄°
 * 
s2
, 
n
 , 
yysˇn_t
 
yysˇ¬î
)

2583 
i
;

2584  
i
 = 0; i < 
n
; ++i )

2585 
s1
[
i
] = 
s2
[i];

2586 
	}
}

2589 #ifde‡
YY_NEED_STRLEN


2590 
	$yy_Êex_°æí
 (
yyc⁄°
 * 
s
 , 
yysˇn_t
 
yysˇ¬î
)

2592 
n
;

2593  
n
 = 0; 
s
[n]; ++n )

2596  
n
;

2597 
	}
}

2600 *
	$em©ch_Æloc
 (
yy_size_t
 
size
 , 
yysˇn_t
 
yysˇ¬î
)

2602  (*Ë
	`mÆloc
–
size
 );

2603 
	}
}

2605 *
	$em©ch_ªÆloc
 (* 
±r
, 
yy_size_t
 
size
 , 
yysˇn_t
 
yysˇ¬î
)

2614  (*Ë
	`ªÆloc
–(*Ë
±r
, 
size
 );

2615 
	}
}

2617 
	$em©ch_‰ì
 (* 
±r
 , 
yysˇn_t
 
yysˇ¬î
)

2619 
	`‰ì
–(*Ë
±r
 );

2620 
	}
}

2622 
	#YYTABLES_NAME
 "yyèbÀs"

	)

	@mylibnl/libnl-3.2.25/lib/route/cls/ematch_grammar.h

1 #i‚de‡
em©ch_HEADER_H


2 
	#em©ch_HEADER_H
 1

	)

3 
	#em©ch_IN_HEADER
 1

	)

9 
	#YY_INT_ALIGNED
 

	)

13 
	#FLEX_SCANNER


	)

14 
	#YY_FLEX_MAJOR_VERSION
 2

	)

15 
	#YY_FLEX_MINOR_VERSION
 5

	)

16 
	#YY_FLEX_SUBMINOR_VERSION
 39

	)

17 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

18 
	#FLEX_BETA


	)

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<î∫o.h
>

27 
	~<°dlib.h
>

33 #i‚de‡
FLEXINT_H


34 
	#FLEXINT_H


	)

38 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

43 #i‚de‡
__STDC_LIMIT_MACROS


44 
	#__STDC_LIMIT_MACROS
 1

	)

47 
	~<öây≥s.h
>

48 
öt8_t
 
	tÊex_öt8_t
;

49 
uöt8_t
 
	tÊex_uöt8_t
;

50 
öt16_t
 
	tÊex_öt16_t
;

51 
uöt16_t
 
	tÊex_uöt16_t
;

52 
öt32_t
 
	tÊex_öt32_t
;

53 
uöt32_t
 
	tÊex_uöt32_t
;

55 sig√d 
	tÊex_öt8_t
;

56 
	tÊex_öt16_t
;

57 
	tÊex_öt32_t
;

58 
	tÊex_uöt8_t
;

59 
	tÊex_uöt16_t
;

60 
	tÊex_uöt32_t
;

63 #i‚de‡
INT8_MIN


64 
	#INT8_MIN
 (-128)

	)

66 #i‚de‡
INT16_MIN


67 
	#INT16_MIN
 (-32767-1)

	)

69 #i‚de‡
INT32_MIN


70 
	#INT32_MIN
 (-2147483647-1)

	)

72 #i‚de‡
INT8_MAX


73 
	#INT8_MAX
 (127)

	)

75 #i‚de‡
INT16_MAX


76 
	#INT16_MAX
 (32767)

	)

78 #i‚de‡
INT32_MAX


79 
	#INT32_MAX
 (2147483647)

	)

81 #i‚de‡
UINT8_MAX


82 
	#UINT8_MAX
 (255U)

	)

84 #i‚de‡
UINT16_MAX


85 
	#UINT16_MAX
 (65535U)

	)

87 #i‚de‡
UINT32_MAX


88 
	#UINT32_MAX
 (4294967295U)

	)

95 #ifde‡
__˝lu•lus


98 
	#YY_USE_CONST


	)

103 #i‡
deföed
 (
__STDC__
)

105 
	#YY_USE_CONST


	)

110 #ifde‡
YY_USE_CONST


111 
	#yyc⁄°
 c⁄°

	)

113 
	#yyc⁄°


	)

117 #i‚de‡
YY_TYPEDEF_YY_SCANNER_T


118 
	#YY_TYPEDEF_YY_SCANNER_T


	)

119 * 
	tyysˇn_t
;

124 
	#yyö
 
yyg
->
yyö_r


	)

125 
	#yyout
 
yyg
->
yyout_r


	)

126 
	#yyexåa
 
yyg
->
yyexåa_r


	)

127 
	#yyÀng
 
yyg
->
yyÀng_r


	)

128 
	#yyãxt
 
yyg
->
yyãxt_r


	)

129 
	#yylöío
 (
YY_CURRENT_BUFFER_LVALUE
->
yy_bs_löío
)

	)

130 
	#yycﬁumn
 (
YY_CURRENT_BUFFER_LVALUE
->
yy_bs_cﬁumn
)

	)

131 
	#yy_Êex_debug
 
yyg
->
yy_Êex_debug_r


	)

134 #i‚de‡
YY_BUF_SIZE


135 #ifde‡
__ü64__


140 
	#YY_BUF_SIZE
 32768

	)

142 
	#YY_BUF_SIZE
 16384

	)

146 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


147 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

148 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

151 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


152 
	#YY_TYPEDEF_YY_SIZE_T


	)

153 
size_t
 
	tyy_size_t
;

156 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


157 
	#YY_STRUCT_YY_BUFFER_STATE


	)

158 
	syy_buf„r_°©e


160 
FILE
 *
	myy_öput_fûe
;

162 *
	myy_ch_buf
;

163 *
	myy_buf_pos
;

168 
yy_size_t
 
	myy_buf_size
;

173 
yy_size_t
 
	myy_n_ch¨s
;

179 
	myy_is_our_buf„r
;

186 
	myy_is_öãø˘ive
;

192 
	myy_©_bﬁ
;

194 
	myy_bs_löío
;

195 
	myy_bs_cﬁumn
;

200 
	myy_fûl_buf„r
;

202 
	myy_buf„r_°©us
;

207 
em©ch_ª°¨t
 (
FILE
 *
öput_fûe
 ,
yysˇn_t
 
yysˇ¬î
 );

208 
em©ch__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 ,
yysˇn_t
 
yysˇ¬î
 );

209 
YY_BUFFER_STATE
 
em©ch__¸óã_buf„r
 (
FILE
 *
fûe
,
size
 ,
yysˇn_t
 
yysˇ¬î
 );

210 
em©ch__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 ,
yysˇn_t
 
yysˇ¬î
 );

211 
em©ch__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 ,
yysˇn_t
 
yysˇ¬î
 );

212 
em©ch_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 ,
yysˇn_t
 
yysˇ¬î
 );

213 
em©ch_p›_buf„r_°©e
 (
yysˇn_t
 
yysˇ¬î
 );

215 
YY_BUFFER_STATE
 
em©ch__sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 ,
yysˇn_t
 
yysˇ¬î
 );

216 
YY_BUFFER_STATE
 
em©ch__sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

217 
YY_BUFFER_STATE
 
em©ch__sˇn_byãs
 (
yyc⁄°
 *
byãs
,
yy_size_t
 
Àn
 ,
yysˇn_t
 
yysˇ¬î
 );

219 *
em©ch_Æloc
 (
yy_size_t
 ,
yysˇn_t
 
yysˇ¬î
 );

220 *
em©ch_ªÆloc
 (*,
yy_size_t
 ,
yysˇn_t
 
yysˇ¬î
 );

221 
em©ch_‰ì
 (* ,
yysˇn_t
 
yysˇ¬î
 );

223 
	#em©ch_wøp
(
yysˇ¬î
Ë1

	)

224 
	#YY_SKIP_YYWRAP


	)

226 
	#yyãxt_±r
 
yyãxt_r


	)

228 #ifde‡
YY_HEADER_EXPORT_START_CONDITIONS


229 
	#INITIAL
 0

	)

230 
	#QUOTE
 1

	)

234 #i‚de‡
YY_NO_UNISTD_H


239 
	~<uni°d.h
>

242 #i‚de‡
YY_EXTRA_TYPE


243 
	#YY_EXTRA_TYPE
 *

	)

246 
em©ch_Àx_öô
 (
yysˇn_t
* 
sˇ¬î
);

248 
em©ch_Àx_öô_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
,
yysˇn_t
* 
sˇ¬î
);

253 
em©ch_Àx_de°roy
 (
yysˇn_t
 
yysˇ¬î
 );

255 
em©ch_gë_debug
 (
yysˇn_t
 
yysˇ¬î
 );

257 
em©ch_£t_debug
 (
debug_Êag
 ,
yysˇn_t
 
yysˇ¬î
 );

259 
YY_EXTRA_TYPE
 
em©ch_gë_exåa
 (
yysˇn_t
 
yysˇ¬î
 );

261 
em©ch_£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 ,
yysˇn_t
 
yysˇ¬î
 );

263 
FILE
 *
em©ch_gë_ö
 (
yysˇn_t
 
yysˇ¬î
 );

265 
em©ch_£t_ö
 (
FILE
 * 
ö_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

267 
FILE
 *
em©ch_gë_out
 (
yysˇn_t
 
yysˇ¬î
 );

269 
em©ch_£t_out
 (
FILE
 * 
out_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

271 
yy_size_t
 
em©ch_gë_Àng
 (
yysˇn_t
 
yysˇ¬î
 );

273 *
em©ch_gë_ãxt
 (
yysˇn_t
 
yysˇ¬î
 );

275 
em©ch_gë_löío
 (
yysˇn_t
 
yysˇ¬î
 );

277 
em©ch_£t_löío
 (
löe_numbî
 ,
yysˇn_t
 
yysˇ¬î
 );

279 
em©ch_gë_cﬁumn
 (
yysˇn_t
 
yysˇ¬î
 );

281 
em©ch_£t_cﬁumn
 (
cﬁumn_no
 ,
yysˇn_t
 
yysˇ¬î
 );

283 
YYSTYPE
 * 
em©ch_gë_lvÆ
 (
yysˇn_t
 
yysˇ¬î
 );

285 
em©ch_£t_lvÆ
 (
YYSTYPE
 * 
yylvÆ_∑øm
 ,
yysˇn_t
 
yysˇ¬î
 );

291 #i‚de‡
YY_SKIP_YYWRAP


292 #ifde‡
__˝lu•lus


293 "C" 
em©ch_wøp
 (
yysˇn_t
 
yysˇ¬î
 );

295 
em©ch_wøp
 (
yysˇn_t
 
yysˇ¬î
 );

299 #i‚de‡
yyãxt_±r


300 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,,
yysˇn_t
 
yysˇ¬î
);

303 #ifde‡
YY_NEED_STRLEN


304 
yy_Êex_°æí
 (
yyc⁄°
 * ,
yysˇn_t
 
yysˇ¬î
);

307 #i‚de‡
YY_NO_INPUT


312 #i‚de‡
YY_READ_BUF_SIZE


313 #ifde‡
__ü64__


315 
	#YY_READ_BUF_SIZE
 16384

	)

317 
	#YY_READ_BUF_SIZE
 8192

	)

322 #i‚de‡
YY_START_STACK_INCR


323 
	#YY_START_STACK_INCR
 25

	)

329 #i‚de‡
YY_DECL


330 
	#YY_DECL_IS_OURS
 1

	)

332 
em©ch_Àx
 \

333 (
YYSTYPE
 * 
yylvÆ_∑øm
 ,
yysˇn_t
 
yysˇ¬î
);

335 
	#YY_DECL
 
em©ch_Àx
 \

336 (
YYSTYPE
 * 
yylvÆ_∑øm
 , 
yysˇn_t
 
yysˇ¬î
)

	)

341 #unde‡
YY_NEW_FILE


342 #unde‡
YY_FLUSH_BUFFER


343 #unde‡
yy_£t_bﬁ


344 #unde‡
yy_√w_buf„r


345 #unde‡
yy_£t_öãø˘ive


346 #unde‡
YY_DO_BEFORE_ACTION


348 #ifde‡
YY_DECL_IS_OURS


349 #unde‡
YY_DECL_IS_OURS


350 #unde‡
YY_DECL


356 #unde‡
em©ch_IN_HEADER


	@mylibnl/libnl-3.2.25/lib/route/cls/ematch_grammar.l

13 
	~<√éök-¥iv©e/√éök.h
>

14 
	~<√éök-¥iv©e/tc.h
>

15 
	~<√éök/√éök.h
>

16 
	~<√éök/rouã/˛s/em©ch.h
>

17 
	~<√éök/rouã/˛s/em©ch/cmp.h
>

18 
	~"em©ch_sy¡ax.h
"

21 %
›ti⁄
 8b
ô


22 %
›ti⁄
 
ªíå™t


23 %
›ti⁄
 
w¨n


24 %
›ti⁄
 
noyywøp


25 %
›ti⁄
 
noöput


26 %
›ti⁄
 
nou≈ut


27 %
›ti⁄
 
bis⁄
-
bridge


28 %
›ti⁄
 
¥efix
="ematch_"

30 %
x
 
QUOTE


32 %% /* 
	$yyÀx
 */

34 [ \
t
\
r
\
n
]+

37 
	`NL_DBG
(4, "Beginning of quote\n");

38 
yylvÆ
->
q
.
Àn
 = 32;

39 i‡(!(
yylvÆ
->
q
.
d©a
 = 
	`ˇŒoc
(1, yylvÆ->q.
Àn
)))

40  
ERROR
;

42 
yylvÆ
->
q
.
ödex
 = 0;

43 
	`BEGIN
(
QUOTE
);

46 <
QUOTE
>[^\\\
n
\"]+ {

47 
	`mem˝y
(
yylvÆ
->
q
.
d©a
 + yylvÆ->q.
ödex
, 
yyãxt
,

48 
	`°æí
(
yyãxt
));

49 
yylvÆ
->
q
.
ödex
 +
	`°æí
(
yyãxt
);

52 <
QUOTE
>\" {

53 
	`BEGIN
(0);

54  
QUOTED
;

58 [[:
digô
:]]+ |

59 0[
xX
][[:
xdigô
:]]+ {

60 
yylvÆ
->
i
 = 
	`°πoul
(
yyãxt
, 
NULL
, 0);

61  
NUMBER
;

64 
eq
 |

65 "="  
KW_EQ
;

66 
gt
 |

67 ">"  
KW_GT
;

68 
…
 |

69 "<"  
KW_LT
;

71 [
aA
][
nN
][
dD
] |

72 "&&" { 
yylvÆ
->
i
 = 
TCF_EM_REL_AND
;  
LOGIC
; }

73 [
oO
][
rR
] |

74 "||" { 
yylvÆ
->
i
 = 
TCF_EM_REL_OR
;  
LOGIC
; }

75 [
nN
][
oO
][
tT
] |

76 "!"  
NOT
;

78 [
cC
][
mM
][
pP
] { 
yylvÆ
->
i
 = 
TCF_EM_CMP
;  
EMATCH_CMP
; }

79 [
pP
][
aA
][
tT
][tT][
eE
][
rR
][
nN
] { 
yylvÆ
->
i
 = 
TCF_EM_NBYTE
;  
EMATCH_NBYTE
; }

80 [
tT
][
eE
][
xX
][tT] { 
yylvÆ
->
i
 = 
TCF_EM_TEXT
;  
EMATCH_TEXT
; }

81 [
mM
][
eE
][
tT
][
aA
] { 
yylvÆ
->
i
 = 
TCF_EM_META
;  
EMATCH_META
; }

83 "("  
KW_OPEN
;

84 ")"  
KW_CLOSE
;

85 [
mM
][
aA
][
sS
][
kK
] |

86 "&"  
KW_MASK
;

87 [
sS
][
hH
][
iI
][
fF
][
tT
] |

88 ">>"  
KW_SHIFT
;

89 [
aA
][
tT
]  
KW_AT
;

90 "+"  
KW_PLUS
;

91 [
fF
][
rR
][
oO
][
mM
]  
KW_FROM
;

92 [
tT
][
oO
]  
KW_TO
;

94 [
uU
]8 { 
yylvÆ
->
i
 = 
TCF_EM_ALIGN_U8
;  
ALIGN
; }

95 [
uU
]16 { 
yylvÆ
->
i
 = 
TCF_EM_ALIGN_U16
;  
ALIGN
; }

96 [
uU
]32 { 
yylvÆ
->
i
 = 
TCF_EM_ALIGN_U32
;  
ALIGN
; }

98 [
lL
][
iI
][
nN
][
kK
] |

99 [
eE
][
tT
][
hH
] { 
yylvÆ
->
i
 = 
TCF_LAYER_LINK
;  
LAYER
; }

100 [
nN
][
eE
][
tT
] |

101 [
iI
][
pP
]6 |

102 [
iI
][
pP
] { 
yylvÆ
->
i
 = 
TCF_LAYER_NETWORK
;  
LAYER
; }

103 [
tT
][
rR
][
aA
][
nN
][
sS
][
pP
][
oO
][rR][tT] |

104 [
tT
][
cC
][
pP
] { 
yylvÆ
->
i
 = 
TCF_LAYER_TRANSPORT
;  
LAYER
; }

106 
øndom
  
META_RANDOM
;

107 
lﬂdavg_0
  
META_LOADAVG_0
;

108 
lﬂdavg_1
  
META_LOADAVG_1
;

109 
lﬂdavg_2
  
META_LOADAVG_2
;

110 
dev
  
META_DEV
;

111 
¥io
  
META_PRIO
;

112 
¥Ÿo
  
META_PROTO
;

113 
pkây≥
  
META_PKTTYPE
;

114 
pkéí
  
META_PKTLEN
;

115 
d©Æí
  
META_DATALEN
;

116 
ma˛í
  
META_MACLEN
;

117 
m¨k
  
META_MARK
;

118 
tcödex
  
META_TCINDEX
;

119 
π˛assid
  
META_RTCLASSID
;

120 
πiif
  
META_RTIIF
;

121 
sk_Ámûy
  
META_SK_FAMILY
;

122 
sk_°©e
  
META_SK_STATE
;

123 
sk_ªu£
  
META_SK_REUSE
;

124 
sk_ªf˙t
  
META_SK_REFCNT
;

125 
sk_rcvbuf
  
META_SK_RCVBUF
;

126 
sk_¢dbuf
  
META_SK_SNDBUF
;

127 
sk_shutdown
  
META_SK_SHUTDOWN
;

128 
sk_¥Ÿo
  
META_SK_PROTO
;

129 
sk_ty≥
  
META_SK_TYPE
;

130 
sk_rmem_Æloc
  
META_SK_RMEM_ALLOC
;

131 
sk_wmem_Æloc
  
META_SK_WMEM_ALLOC
;

132 
sk_wmem_queued
  
META_SK_WMEM_QUEUED
;

133 
sk_rcv_qÀn
  
META_SK_RCV_QLEN
;

134 
sk_¢d_qÀn
  
META_SK_SND_QLEN
;

135 
sk_îr_qÀn
  
META_SK_ERR_QLEN
;

136 
sk_f‹w¨d_Ælocs
  
META_SK_FORWARD_ALLOCS
;

137 
sk_Ælocs
  
META_SK_ALLOCS
;

138 
sk_rouã_ˇps
  
META_SK_ROUTE_CAPS
;

139 
sk_hash
  
META_SK_HASH
;

140 
sk_lögîtime
  
META_SK_LINGERTIME
;

141 
sk_ack_backlog
  
META_SK_ACK_BACKLOG
;

142 
sk_max_ack_backlog
  
META_SK_MAX_ACK_BACKLOG
;

143 
sk_¥io
  
META_SK_PRIO
;

144 
sk_rcvlow©
  
META_SK_RCVLOWAT
;

145 
sk_rcvtimeo
  
META_SK_RCVTIMEO
;

146 
sk_¢dtimeo
  
META_SK_SNDTIMEO
;

147 
sk_£ndmsg_off
  
META_SK_SENDMSG_OFF
;

148 
sk_wrôe_≥ndög
  
META_SK_WRITE_PENDING
;

149 
vœn
  
META_VLAN
;

150 
rxhash
  
META_RXHASH
;

152 
dev«me
  
META_DEVNAME
;

153 
sk_bound_if
  
META_SK_BOUND_IF
;

156 [^ \
t
\
r
\
n
+()=<>&|\"]+ {

157 
yylvÆ
->
s
 = 
	`°rdup
(
yyãxt
);

158 i‡(
yylvÆ
->
s
 =
NULL
)

159  
ERROR
;

160 
	`NL_DBG
(4, "Àx STR=%s\n", 
yylvÆ
->
s
);

161  
STR
;

	@mylibnl/libnl-3.2.25/lib/route/cls/ematch_syntax.c

44 
	#YYBISON
 1

	)

47 
	#YYBISON_VERSION
 "3.0.2"

	)

50 
	#YYSKELETON_NAME
 "yacc.c"

	)

53 
	#YYPURE
 1

	)

56 
	#YYPUSH
 0

	)

59 
	#YYPULL
 1

	)

63 
	#yy∑r£
 
em©ch_∑r£


	)

64 
	#yyÀx
 
em©ch_Àx


	)

65 
	#yyîr‹
 
em©ch_îr‹


	)

66 
	#yydebug
 
em©ch_debug


	)

67 
	#yy√ºs
 
em©ch_√ºs


	)

73 
	~<√éök-¥iv©e/√éök.h
>

74 
	~<√éök-¥iv©e/tc.h
>

75 
	~<√éök/√éök.h
>

76 
	~<√éök/utûs.h
>

77 
	~<√éök/rouã/pkéoc.h
>

78 
	~<√éök/rouã/˛s/em©ch.h
>

79 
	~<√éök/rouã/˛s/em©ch/cmp.h
>

80 
	~<√éök/rouã/˛s/em©ch/nbyã.h
>

81 
	~<√éök/rouã/˛s/em©ch/ãxt.h
>

82 
	~<√éök/rouã/˛s/em©ch/mëa.h
>

84 
	#META_ALLOC
 
π∆_mëa_vÆue_Æloc_id


	)

85 
	#META_ID
(
«me
Ë
TCF_META_ID_
##
	)
«me

86 
	#META_INT
 
TCF_META_TYPE_INT


	)

87 
	#META_VAR
 
TCF_META_TYPE_VAR


	)

91 #i‚de‡
YY_NULLPTR


92 #i‡
deföed
 
__˝lu•lus
 && 201103L <= __cplusplus

93 
	#YY_NULLPTR
 
nuŒ±r


	)

95 
	#YY_NULLPTR
 0

	)

100 #ifde‡
YYERROR_VERBOSE


101 #unde‡
YYERROR_VERBOSE


102 
	#YYERROR_VERBOSE
 1

	)

104 
	#YYERROR_VERBOSE
 1

	)

109 #i‚de‡
YY_EMATCH_ROUTE_CLS_EMATCH_SYNTAX_H_INCLUDED


110 
	#YY_EMATCH_ROUTE_CLS_EMATCH_SYNTAX_H_INCLUDED


	)

112 #i‚de‡
YYDEBUG


113 
	#YYDEBUG
 0

	)

115 #i‡
YYDEBUG


116 
em©ch_debug
;

120 #i‚de‡
YYTOKENTYPE


121 
	#YYTOKENTYPE


	)

122 
	eyytokíty≥


124 
	mERROR
 = 258,

125 
	mLOGIC
 = 259,

126 
	mNOT
 = 260,

127 
	mOPERAND
 = 261,

128 
	mNUMBER
 = 262,

129 
	mALIGN
 = 263,

130 
	mLAYER
 = 264,

131 
	mKW_OPEN
 = 265,

132 
	mKW_CLOSE
 = 266,

133 
	mKW_PLUS
 = 267,

134 
	mKW_MASK
 = 268,

135 
	mKW_SHIFT
 = 269,

136 
	mKW_AT
 = 270,

137 
	mEMATCH_CMP
 = 271,

138 
	mEMATCH_NBYTE
 = 272,

139 
	mEMATCH_TEXT
 = 273,

140 
	mEMATCH_META
 = 274,

141 
	mKW_EQ
 = 275,

142 
	mKW_GT
 = 276,

143 
	mKW_LT
 = 277,

144 
	mKW_FROM
 = 278,

145 
	mKW_TO
 = 279,

146 
	mMETA_RANDOM
 = 280,

147 
	mMETA_LOADAVG_0
 = 281,

148 
	mMETA_LOADAVG_1
 = 282,

149 
	mMETA_LOADAVG_2
 = 283,

150 
	mMETA_DEV
 = 284,

151 
	mMETA_PRIO
 = 285,

152 
	mMETA_PROTO
 = 286,

153 
	mMETA_PKTTYPE
 = 287,

154 
	mMETA_PKTLEN
 = 288,

155 
	mMETA_DATALEN
 = 289,

156 
	mMETA_MACLEN
 = 290,

157 
	mMETA_MARK
 = 291,

158 
	mMETA_TCINDEX
 = 292,

159 
	mMETA_RTCLASSID
 = 293,

160 
	mMETA_RTIIF
 = 294,

161 
	mMETA_SK_FAMILY
 = 295,

162 
	mMETA_SK_STATE
 = 296,

163 
	mMETA_SK_REUSE
 = 297,

164 
	mMETA_SK_REFCNT
 = 298,

165 
	mMETA_SK_RCVBUF
 = 299,

166 
	mMETA_SK_SNDBUF
 = 300,

167 
	mMETA_SK_SHUTDOWN
 = 301,

168 
	mMETA_SK_PROTO
 = 302,

169 
	mMETA_SK_TYPE
 = 303,

170 
	mMETA_SK_RMEM_ALLOC
 = 304,

171 
	mMETA_SK_WMEM_ALLOC
 = 305,

172 
	mMETA_SK_WMEM_QUEUED
 = 306,

173 
	mMETA_SK_RCV_QLEN
 = 307,

174 
	mMETA_SK_SND_QLEN
 = 308,

175 
	mMETA_SK_ERR_QLEN
 = 309,

176 
	mMETA_SK_FORWARD_ALLOCS
 = 310,

177 
	mMETA_SK_ALLOCS
 = 311,

178 
	mMETA_SK_ROUTE_CAPS
 = 312,

179 
	mMETA_SK_HASH
 = 313,

180 
	mMETA_SK_LINGERTIME
 = 314,

181 
	mMETA_SK_ACK_BACKLOG
 = 315,

182 
	mMETA_SK_MAX_ACK_BACKLOG
 = 316,

183 
	mMETA_SK_PRIO
 = 317,

184 
	mMETA_SK_RCVLOWAT
 = 318,

185 
	mMETA_SK_RCVTIMEO
 = 319,

186 
	mMETA_SK_SNDTIMEO
 = 320,

187 
	mMETA_SK_SENDMSG_OFF
 = 321,

188 
	mMETA_SK_WRITE_PENDING
 = 322,

189 
	mMETA_VLAN
 = 323,

190 
	mMETA_RXHASH
 = 324,

191 
	mMETA_DEVNAME
 = 325,

192 
	mMETA_SK_BOUND_IF
 = 326,

193 
	mSTR
 = 327,

194 
	mQUOTED
 = 328

198 
	#ERROR
 258

	)

199 
	#LOGIC
 259

	)

200 
	#NOT
 260

	)

201 
	#OPERAND
 261

	)

202 
	#NUMBER
 262

	)

203 
	#ALIGN
 263

	)

204 
	#LAYER
 264

	)

205 
	#KW_OPEN
 265

	)

206 
	#KW_CLOSE
 266

	)

207 
	#KW_PLUS
 267

	)

208 
	#KW_MASK
 268

	)

209 
	#KW_SHIFT
 269

	)

210 
	#KW_AT
 270

	)

211 
	#EMATCH_CMP
 271

	)

212 
	#EMATCH_NBYTE
 272

	)

213 
	#EMATCH_TEXT
 273

	)

214 
	#EMATCH_META
 274

	)

215 
	#KW_EQ
 275

	)

216 
	#KW_GT
 276

	)

217 
	#KW_LT
 277

	)

218 
	#KW_FROM
 278

	)

219 
	#KW_TO
 279

	)

220 
	#META_RANDOM
 280

	)

221 
	#META_LOADAVG_0
 281

	)

222 
	#META_LOADAVG_1
 282

	)

223 
	#META_LOADAVG_2
 283

	)

224 
	#META_DEV
 284

	)

225 
	#META_PRIO
 285

	)

226 
	#META_PROTO
 286

	)

227 
	#META_PKTTYPE
 287

	)

228 
	#META_PKTLEN
 288

	)

229 
	#META_DATALEN
 289

	)

230 
	#META_MACLEN
 290

	)

231 
	#META_MARK
 291

	)

232 
	#META_TCINDEX
 292

	)

233 
	#META_RTCLASSID
 293

	)

234 
	#META_RTIIF
 294

	)

235 
	#META_SK_FAMILY
 295

	)

236 
	#META_SK_STATE
 296

	)

237 
	#META_SK_REUSE
 297

	)

238 
	#META_SK_REFCNT
 298

	)

239 
	#META_SK_RCVBUF
 299

	)

240 
	#META_SK_SNDBUF
 300

	)

241 
	#META_SK_SHUTDOWN
 301

	)

242 
	#META_SK_PROTO
 302

	)

243 
	#META_SK_TYPE
 303

	)

244 
	#META_SK_RMEM_ALLOC
 304

	)

245 
	#META_SK_WMEM_ALLOC
 305

	)

246 
	#META_SK_WMEM_QUEUED
 306

	)

247 
	#META_SK_RCV_QLEN
 307

	)

248 
	#META_SK_SND_QLEN
 308

	)

249 
	#META_SK_ERR_QLEN
 309

	)

250 
	#META_SK_FORWARD_ALLOCS
 310

	)

251 
	#META_SK_ALLOCS
 311

	)

252 
	#META_SK_ROUTE_CAPS
 312

	)

253 
	#META_SK_HASH
 313

	)

254 
	#META_SK_LINGERTIME
 314

	)

255 
	#META_SK_ACK_BACKLOG
 315

	)

256 
	#META_SK_MAX_ACK_BACKLOG
 316

	)

257 
	#META_SK_PRIO
 317

	)

258 
	#META_SK_RCVLOWAT
 318

	)

259 
	#META_SK_RCVTIMEO
 319

	)

260 
	#META_SK_SNDTIMEO
 320

	)

261 
	#META_SK_SENDMSG_OFF
 321

	)

262 
	#META_SK_WRITE_PENDING
 322

	)

263 
	#META_VLAN
 323

	)

264 
	#META_RXHASH
 324

	)

265 
	#META_DEVNAME
 325

	)

266 
	#META_SK_BOUND_IF
 326

	)

267 
	#STR
 327

	)

268 
	#QUOTED
 328

	)

271 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


272 
YYSTYPE
 
	tYYSTYPE
;

273 
	uYYSTYPE


277 
tcf_em_cmp
 
	mcmp
;

278 
em©ch_quŸed
 
	mq
;

279 
π∆_em©ch
 * 
	me
;

280 
π∆_pkéoc
 * 
	mloc
;

281 
π∆_mëa_vÆue
 *
	mmv
;

282 
uöt32_t
 
	mi
;

283 
uöt64_t
 
	mi64
;

284 * 
	ms
;

288 
	#YYSTYPE_IS_TRIVIAL
 1

	)

289 
	#YYSTYPE_IS_DECLARED
 1

	)

294 
em©ch_∑r£
 (*
sˇ¬î
, **
îΩ
, 
∆_li°_hód
 *
roŸ
);

301 
em©ch_Àx
(
YYSTYPE
 *, *);

303 
	$yyîr‹
(*
sˇ¬î
, **
îΩ
, 
∆_li°_hód
 *
roŸ
, c⁄° *
msg
)

305 i‡(
msg
)

306 *
îΩ
 = 
	`°rdup
(
msg
);

308 *
îΩ
 = 
NULL
;

309 
	}
}

317 #ifde‡
YYTYPE_UINT8


318 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

320 
	tyyty≥_uöt8
;

323 #ifde‡
YYTYPE_INT8


324 
YYTYPE_INT8
 
	tyyty≥_öt8
;

326 sig√d 
	tyyty≥_öt8
;

329 #ifde‡
YYTYPE_UINT16


330 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

332 
	tyyty≥_uöt16
;

335 #ifde‡
YYTYPE_INT16


336 
YYTYPE_INT16
 
	tyyty≥_öt16
;

338 
	tyyty≥_öt16
;

341 #i‚de‡
YYSIZE_T


342 #ifde‡
__SIZE_TYPE__


343 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

344 #ñi‡
deföed
 
size_t


345 
	#YYSIZE_T
 
size_t


	)

346 #ñi‡! 
deföed
 
YYSIZE_T


347 
	~<°ddef.h
>

348 
	#YYSIZE_T
 
size_t


	)

350 
	#YYSIZE_T
 

	)

354 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

356 #i‚de‡
YY_


357 #i‡
deföed
 
YYENABLE_NLS
 && YYENABLE_NLS

358 #i‡
ENABLE_NLS


359 
	~<liböé.h
>

360 
	#YY_
(
Msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", Msgid)

	)

363 #i‚de‡
YY_


364 
	#YY_
(
Msgid
Ë
	)
Msgid

368 #i‚de‡
YY_ATTRIBUTE


369 #i‡(
deföed
 
__GNUC__
 \

370 && (2 < 
	g__GNUC__
 || (__GNUC__ =2 && 96 <
__GNUC_MINOR__
))) \

371 || 
deföed
 
__SUNPRO_C
 && 0x5110 <= __SUNPRO_C

372 
	#YY_ATTRIBUTE
(
S≥c
Ë
	`__©åibuã__
(S≥c)

	)

374 
	#YY_ATTRIBUTE
(
S≥c
Ë

	)

378 #i‚de‡
YY_ATTRIBUTE_PURE


379 
	#YY_ATTRIBUTE_PURE
 
	`YY_ATTRIBUTE
 ((
__puª__
))

	)

382 #i‚de‡
YY_ATTRIBUTE_UNUSED


383 
	#YY_ATTRIBUTE_UNUSED
 
	`YY_ATTRIBUTE
 ((
__unu£d__
))

	)

386 #i‡!
deföed
 
_N‹ëu∫
 \

387 && (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 201112)

388 #i‡
deföed
 
_MSC_VER
 && 1200 <= _MSC_VER

389 
	#_N‹ëu∫
 
	`__de˛•ec
 (
n‹ëu∫
)

	)

391 
	#_N‹ëu∫
 
	`YY_ATTRIBUTE
 ((
__n‹ëu∫__
))

	)

396 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


397 
	#YYUSE
(
E
Ë((Ë(E))

	)

399 
	#YYUSE
(
E
Ë

	)

402 #i‡
deföed
 
__GNUC__
 && 407 <__GNUC__ * 100 + 
__GNUC_MINOR__


404 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
 \

405 
	`_Pøgma
 ("GCC diagnosticÖush") \

406 
	`_Pøgma
 ("GCC diagnostic ignored \"-Wuninitialized\"")\

407 
	`_Pøgma
 ("GCC dügno°i¯ign‹ed \"-Wmaybe-unöôülized\"")

	)

408 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END
 \

409 
	`_Pøgma
 ("GCC dügno°i¯p›")

	)

411 
	#YY_INITIAL_VALUE
(
VÆue
Ë
	)
VÆue

413 #i‚de‡
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


414 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


	)

415 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END


	)

417 #i‚de‡
YY_INITIAL_VALUE


418 
	#YY_INITIAL_VALUE
(
VÆue
Ë

	)

422 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


426 #ifde‡
YYSTACK_USE_ALLOCA


427 #i‡
YYSTACK_USE_ALLOCA


428 #ifde‡
__GNUC__


429 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

430 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


431 
	~<Æloˇ.h
>

432 #ñi‡
deföed
 
_AIX


433 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

434 #ñi‡
deföed
 
_MSC_VER


435 
	~<mÆloc.h
>

436 
	#Æloˇ
 
_Æloˇ


	)

438 
	#YYSTACK_ALLOC
 
Æloˇ


	)

439 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
EXIT_SUCCESS


440 
	~<°dlib.h
>

442 #i‚de‡
EXIT_SUCCESS


443 
	#EXIT_SUCCESS
 0

	)

450 #ifde‡
YYSTACK_ALLOC


452 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 0)

	)

453 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


458 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

461 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

462 
	#YYSTACK_FREE
 
YYFREE


	)

463 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


464 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

466 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
EXIT_SUCCESS
 \

467 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

468 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

469 
	~<°dlib.h
>

470 #i‚de‡
EXIT_SUCCESS


471 
	#EXIT_SUCCESS
 0

	)

474 #i‚de‡
YYMALLOC


475 
	#YYMALLOC
 
mÆloc


	)

476 #i‡! 
deföed
 
mÆloc
 && ! deföed 
EXIT_SUCCESS


477 *
mÆloc
 (
YYSIZE_T
);

480 #i‚de‡
YYFREE


481 
	#YYFREE
 
‰ì


	)

482 #i‡! 
deföed
 
‰ì
 && ! deföed 
EXIT_SUCCESS


483 
‰ì
 (*);

490 #i‡(! 
deföed
 
yyovîÊow
 \

491 && (! 
deföed
 
	g__˝lu•lus
 \

492 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

495 
	uyyÆloc


497 
yyty≥_öt16
 
	myyss_Æloc
;

498 
YYSTYPE
 
	myyvs_Æloc
;

502 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

506 
	#YYSTACK_BYTES
(
N
) \

507 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

508 + 
YYSTACK_GAP_MAXIMUM
)

	)

510 
	#YYCOPY_NEEDED
 1

	)

517 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

520 
YYSIZE_T
 
yy√wbyãs
; \

521 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

522 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

523 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

524 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

526 0)

	)

530 #i‡
deföed
 
YYCOPY_NEEDED
 && YYCOPY_NEEDED

533 #i‚de‡
YYCOPY


534 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

535 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

536 
	`__buûtö_mem˝y
 (
D°
, 
Src
, (
Cou¡
Ë*  (*(Src)))

	)

538 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

541 
YYSIZE_T
 
yyi
; \

542 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

543 (
D°
)[
yyi
] = (
Src
)[yyi]; \

545 0)

	)

551 
	#YYFINAL
 26

	)

553 
	#YYLAST
 138

	)

556 
	#YYNTOKENS
 74

	)

558 
	#YYNNTS
 18

	)

560 
	#YYNRULES
 84

	)

562 
	#YYNSTATES
 118

	)

566 
	#YYUNDEFTOK
 2

	)

567 
	#YYMAXUTOK
 328

	)

569 
	#YYTRANSLATE
(
YYX
) \

570 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

574 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

611 #i‡
YYDEBUG


613 c⁄° 
yyty≥_uöt16
 
	gyyæöe
[] =

627 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 1

630 c⁄° *c⁄° 
	gyyäame
[] =

651 "shi·", "›î™d", 
YY_NULLPTR


655 #ifde‡
YYPRINT


658 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

671 
	#YYPACT_NINF
 -63

	)

673 
	#yy∑˘_vÆue_is_deÁu…
(
Yy°©e
) \

674 (!!((
Yy°©e
Ë=(-63)))

	)

676 
	#YYTABLE_NINF
 -76

	)

678 
	#yyèbÀ_vÆue_is_îr‹
(
YyèbÀ_vÆue
) \

679 0

	)

683 c⁄° 
yyty≥_öt8
 
	gyy∑˘
[] =

702 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

719 c⁄° 
yyty≥_öt8
 
	gyypgŸo
[] =

726 c⁄° 
yyty≥_öt8
 
	gyydefgŸo
[] =

735 c⁄° 
yyty≥_öt8
 
	gyyèbÀ
[] =

753 c⁄° 
yyty≥_öt8
 
	gyycheck
[] =

773 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

790 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

804 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

818 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

819 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

820 
	#YYEMPTY
 (-2)

	)

821 
	#YYEOF
 0

	)

823 
	#YYACCEPT
 
yyac˚±œb


	)

824 
	#YYABORT
 
yyab‹éab


	)

825 
	#YYERROR
 
yyîr‹œb


	)

828 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

830 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

832 i‡(
yych¨
 =
YYEMPTY
) \

834 
yych¨
 = (
Tokí
); \

835 
yylvÆ
 = (
VÆue
); \

836 
	`YYPOPSTACK
 (
yyÀn
); \

837 
yy°©e
 = *
yys•
; \

838 
yybackup
; \

842 
	`yyîr‹
 (
sˇ¬î
, 
îΩ
, 
roŸ
, 
	`YY_
("syntaxÉrror: cannot back up")); \

843 
YYERROR
; \

845 0)

	)

848 
	#YYTERROR
 1

	)

849 
	#YYERRCODE
 256

	)

854 #i‡
YYDEBUG


856 #i‚de‡
YYFPRINTF


857 
	~<°dio.h
>

858 
	#YYFPRINTF
 
Ârötf


	)

861 
	#YYDPRINTF
(
Args
) \

863 i‡(
yydebug
) \

864 
YYFPRINTF
 
Args
; \

865 } 0)

	)

868 #i‚de‡
YY_LOCATION_PRINT


869 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

873 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

875 i‡(
yydebug
) \

877 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

878 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

879 
Ty≥
, 
VÆue
, 
sˇ¬î
, 
îΩ
, 
roŸ
); \

880 
	`YYFPRINTF
 (
°dîr
, "\n"); \

882 } 0)

	)

890 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
, *
sˇ¬î
, **
îΩ
, 
∆_li°_hód
 *
roŸ
)

892 
FILE
 *
yyo
 = 
yyouçut
;

893 
	`YYUSE
 (
yyo
);

894 
	`YYUSE
 (
sˇ¬î
);

895 
	`YYUSE
 (
îΩ
);

896 
	`YYUSE
 (
roŸ
);

897 i‡(!
yyvÆuï
)

899 #ifde‡
YYPRINT


900 i‡(
yyty≥
 < 
YYNTOKENS
)

901 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

903 
	`YYUSE
 (
yyty≥
);

904 
	}
}

912 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
, *
sˇ¬î
, **
îΩ
, 
∆_li°_hód
 *
roŸ
)

914 
	`YYFPRINTF
 (
yyouçut
, "%s %s (",

915 
yyty≥
 < 
YYNTOKENS
 ? "tokí" : "¡îm", 
yyäame
[yytype]);

917 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
, 
sˇ¬î
, 
îΩ
, 
roŸ
);

918 
	`YYFPRINTF
 (
yyouçut
, ")");

919 
	}
}

927 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

929 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

930 ; 
yybŸtom
 <
yyt›
; yybottom++)

932 
yybŸ
 = *
yybŸtom
;

933 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

935 
	`YYFPRINTF
 (
°dîr
, "\n");

936 
	}
}

938 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

940 i‡(
yydebug
) \

941 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

942 } 0)

	)

950 
	$yy_ªdu˚_¥öt
 (
yyty≥_öt16
 *
yys•
, 
YYSTYPE
 *
yyv•
, 
yyruÀ
, *
sˇ¬î
, **
îΩ
, 
∆_li°_hód
 *
roŸ
)

952 
yy o
 = 
yyæöe
[
yyruÀ
];

953 
yyƒhs
 = 
yyr2
[
yyruÀ
];

954 
yyi
;

955 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

956 
yyruÀ
 - 1, 
yy o
);

958 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

960 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

961 
	`yy_symbﬁ_¥öt
 (
°dîr
,

962 
yy°os
[
yys•
[
yyi
 + 1 - 
yyƒhs
]],

963 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

964 , 
sˇ¬î
, 
îΩ
, 
roŸ
);

965 
	`YYFPRINTF
 (
°dîr
, "\n");

967 
	}
}

969 
	#YY_REDUCE_PRINT
(
RuÀ
) \

971 i‡(
yydebug
) \

972 
	`yy_ªdu˚_¥öt
 (
yys•
, 
yyv•
, 
RuÀ
, 
sˇ¬î
, 
îΩ
, 
roŸ
); \

973 } 0)

	)

977 
	gyydebug
;

979 
	#YYDPRINTF
(
Args
)

	)

980 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

981 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

982 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

987 #i‚de‡
YYINITDEPTH


988 
	#YYINITDEPTH
 200

	)

998 #i‚de‡
YYMAXDEPTH


999 
	#YYMAXDEPTH
 10000

	)

1003 #i‡
YYERROR_VERBOSE


1005 #i‚de‡
yy°æí


1006 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


1007 
	#yy°æí
 
°æí


	)

1010 
YYSIZE_T


1011 
	$yy°æí
 (c⁄° *
yy°r
)

1013 
YYSIZE_T
 
yyÀn
;

1014 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

1016  
yyÀn
;

1017 
	}
}

1021 #i‚de‡
yy°p˝y


1022 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


1023 
	#yy°p˝y
 
°p˝y


	)

1028 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

1030 *
yyd
 = 
yyde°
;

1031 c⁄° *
yys
 = 
yy§c
;

1033 (*
yyd
++ = *
yys
++) != '\0')

1036  
yyd
 - 1;

1037 
	}
}

1041 #i‚de‡
yyäamîr


1049 
YYSIZE_T


1050 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

1052 i‡(*
yy°r
 == '"')

1054 
YYSIZE_T
 
yyn
 = 0;

1055 c⁄° *
yyp
 = 
yy°r
;

1058 *++
yyp
)

1062 
do_nŸ_°rù_quŸes
;

1065 i‡(*++
yyp
 != '\\')

1066 
do_nŸ_°rù_quŸes
;

1069 i‡(
yyªs
)

1070 
yyªs
[
yyn
] = *
yyp
;

1071 
yyn
++;

1075 i‡(
yyªs
)

1076 
yyªs
[
yyn
] = '\0';

1077  
yyn
;

1079 
do_nŸ_°rù_quŸes
: ;

1082 i‡(! 
yyªs
)

1083  
	`yy°æí
 (
yy°r
);

1085  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

1086 
	}
}

1098 
	$yysy¡ax_îr‹
 (
YYSIZE_T
 *
yymsg_Æloc
, **
yymsg
,

1099 
yyty≥_öt16
 *
yys•
, 
yytokí
)

1101 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yytokí
]);

1102 
YYSIZE_T
 
yysize
 = 
yysize0
;

1103 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

1105 c⁄° *
yyf‹m©
 = 
YY_NULLPTR
;

1107 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

1110 
yycou¡
 = 0;

1135 i‡(
yytokí
 !
YYEMPTY
)

1137 
yyn
 = 
yy∑˘
[*
yys•
];

1138 
yy¨g
[
yycou¡
++] = 
yyäame
[
yytokí
];

1139 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1144 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

1146 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

1147 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

1148 
yyx
;

1150 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

1151 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR


1152 && !
	`yyèbÀ_vÆue_is_îr‹
 (
yyèbÀ
[
yyx
 + 
yyn
]))

1154 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

1156 
yycou¡
 = 1;

1157 
yysize
 = 
yysize0
;

1160 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

1162 
YYSIZE_T
 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yyx
]);

1163 i‡(! (
yysize
 <
yysize1


1164 && 
yysize1
 <
YYSTACK_ALLOC_MAXIMUM
))

1166 
yysize
 = 
yysize1
;

1172 
yycou¡
)

1174 
	#YYCASE_
(
N
, 
S
) \

1175 
N
: \

1176 
yyf‹m©
 = 
S
; \

1177 

	)

1178 
	`YYCASE_
(0, 
	`YY_
("syntaxÉrror"));

1179 
	`YYCASE_
(1, 
	`YY_
("syntaxÉrror, unexpected %s"));

1180 
	`YYCASE_
(2, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s"));

1181 
	`YYCASE_
(3, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s"));

1182 
	`YYCASE_
(4, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s"));

1183 
	`YYCASE_
(5, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s"));

1184 #unde‡
YYCASE_


1188 
YYSIZE_T
 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf‹m©
);

1189 i‡(! (
yysize
 <
yysize1
 && yysize1 <
YYSTACK_ALLOC_MAXIMUM
))

1191 
yysize
 = 
yysize1
;

1194 i‡(*
yymsg_Æloc
 < 
yysize
)

1196 *
yymsg_Æloc
 = 2 * 
yysize
;

1197 i‡(! (
yysize
 <*
yymsg_Æloc


1198 && *
yymsg_Æloc
 <
YYSTACK_ALLOC_MAXIMUM
))

1199 *
yymsg_Æloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

1207 *
yyp
 = *
yymsg
;

1208 
yyi
 = 0;

1209 (*
yyp
 = *
yyf‹m©
) != '\0')

1210 i‡(*
yyp
 ='%' && 
yyf‹m©
[1] ='s' && 
yyi
 < 
yycou¡
)

1212 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1213 
yyf‹m©
 += 2;

1217 
yyp
++;

1218 
yyf‹m©
++;

1222 
	}
}

1230 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
, *
sˇ¬î
, **
îΩ
, 
∆_li°_hód
 *
roŸ
)

1232 
	`YYUSE
 (
yyvÆuï
);

1233 
	`YYUSE
 (
sˇ¬î
);

1234 
	`YYUSE
 (
îΩ
);

1235 
	`YYUSE
 (
roŸ
);

1236 i‡(!
yymsg
)

1237 
yymsg
 = "Deleting";

1238 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1240 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1241 
yyty≥
)

1245 { 
	`‰ì
(((*
yyvÆuï
).
s
)); 
	`NL_DBG
(2, "string destructor\n"); }

1251 { 
	`‰ì
(((*
yyvÆuï
).
q
).
d©a
); 
	`NL_DBG
(2, "quoted destructor\n"); }

1257 { 
	`π∆_pkéoc_put
(((*
yyvÆuï
).
loc
)); 
	`NL_DBG
(2, "pktloc destructor\n"); }

1263 { 
	`π∆_pkéoc_put
(((*
yyvÆuï
).
loc
)); 
	`NL_DBG
(2, "pktloc destructor\n"); }

1269 { 
	`π∆_mëa_vÆue_put
(((*
yyvÆuï
).
mv
)); 
	`NL_DBG
(2, "meta value destructor\n"); }

1275 { 
	`‰ì
(((*
yyvÆuï
).
q
).
d©a
); 
	`NL_DBG
(2, "quoted destructor\n"); }

1281 { 
	`π∆_pkéoc_put
(((*
yyvÆuï
).
loc
)); 
	`NL_DBG
(2, "pktloc destructor\n"); }

1289 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1290 
	}
}

1300 
	$yy∑r£
 (*
sˇ¬î
, **
îΩ
, 
∆_li°_hód
 *
roŸ
)

1303 
yych¨
;

1309 
	`YY_INITIAL_VALUE
 (
YYSTYPE
 
yyvÆ_deÁu…
;)

1310 
YYSTYPE
 
yylvÆ
 
	`YY_INITIAL_VALUE
 (
yyvÆ_deÁu…
);

1313 
yy√ºs
;

1315 
yy°©e
;

1317 
yyîr°©us
;

1327 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1328 
yyty≥_öt16
 *
yyss
;

1329 
yyty≥_öt16
 *
yys•
;

1332 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1333 
YYSTYPE
 *
yyvs
;

1334 
YYSTYPE
 *
yyv•
;

1336 
YYSIZE_T
 
yy°acksize
;

1338 
yyn
;

1339 
yyªsu…
;

1341 
yytokí
 = 0;

1344 
YYSTYPE
 
yyvÆ
;

1346 #i‡
YYERROR_VERBOSE


1348 
yymsgbuf
[128];

1349 *
yymsg
 = 
yymsgbuf
;

1350 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1353 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1357 
yyÀn
 = 0;

1359 
yys•
 = 
yyss
 = 
yysß
;

1360 
yyv•
 = 
yyvs
 = 
yyvß
;

1361 
yy°acksize
 = 
YYINITDEPTH
;

1363 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1365 
yy°©e
 = 0;

1366 
yyîr°©us
 = 0;

1367 
yy√ºs
 = 0;

1368 
yych¨
 = 
YYEMPTY
;

1369 
yy£t°©e
;

1374 
yy√w°©e
:

1377 
yys•
++;

1379 
yy£t°©e
:

1380 *
yys•
 = 
yy°©e
;

1382 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1385 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1387 #ifde‡
yyovîÊow


1392 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1393 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1399 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1400 &
yyss1
, 
yysize
 *  (*
yys•
),

1401 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1402 &
yy°acksize
);

1404 
yyss
 = 
yyss1
;

1405 
yyvs
 = 
yyvs1
;

1408 #i‚de‡
YYSTACK_RELOCATE


1409 
yyexhau°edœb
;

1412 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1413 
yyexhau°edœb
;

1414 
yy°acksize
 *= 2;

1415 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1416 
yy°acksize
 = 
YYMAXDEPTH
;

1419 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1420 
yyÆloc
 *
yy±r
 =

1421 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1422 i‡(! 
yy±r
)

1423 
yyexhau°edœb
;

1424 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1425 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1426 #unde‡
YYSTACK_RELOCATE


1427 i‡(
yyss1
 !
yysß
)

1428 
	`YYSTACK_FREE
 (
yyss1
);

1433 
yys•
 = 
yyss
 + 
yysize
 - 1;

1434 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1436 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1437 (Ë
yy°acksize
));

1439 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1440 
YYABORT
;

1443 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1445 i‡(
yy°©e
 =
YYFINAL
)

1446 
YYACCEPT
;

1448 
yybackup
;

1453 
yybackup
:

1459 
yyn
 = 
yy∑˘
[
yy°©e
];

1460 i‡(
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1461 
yydeÁu…
;

1466 i‡(
yych¨
 =
YYEMPTY
)

1468 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1469 
yych¨
 = 
	`yyÀx
 (&
yylvÆ
, 
sˇ¬î
);

1472 i‡(
yych¨
 <
YYEOF
)

1474 
yych¨
 = 
yytokí
 = 
YYEOF
;

1475 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1479 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1480 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1485 
yyn
 +
yytokí
;

1486 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1487 
yydeÁu…
;

1488 
yyn
 = 
yyèbÀ
[yyn];

1489 i‡(
yyn
 <= 0)

1491 i‡(
	`yyèbÀ_vÆue_is_îr‹
 (
yyn
))

1492 
yyîæab
;

1493 
yyn
 = -yyn;

1494 
yyªdu˚
;

1499 i‡(
yyîr°©us
)

1500 
yyîr°©us
--;

1503 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1506 
yych¨
 = 
YYEMPTY
;

1508 
yy°©e
 = 
yyn
;

1509 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1510 *++
yyv•
 = 
yylvÆ
;

1511 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1513 
yy√w°©e
;

1519 
yydeÁu…
:

1520 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1521 i‡(
yyn
 == 0)

1522 
yyîæab
;

1523 
yyªdu˚
;

1529 
yyªdu˚
:

1531 
yyÀn
 = 
yyr2
[
yyn
];

1541 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1544 
	`YY_REDUCE_PRINT
 (
yyn
);

1545 
yyn
)

1550 
	`∆_li°_add_èû
(
roŸ
, &(
yyv•
[0].
e
)->
e_li°
);

1558 (
yyvÆ
.
e
Ë(
yyv•
[0].e);

1566 
	`π∆_em©ch_£t_Êags
((
yyv•
[-2].
e
), (yyv•[-1].
i
));

1569 
	`∆_li°_add_èû
(&(
yyv•
[-2].
e
)->
e_li°
, &(yyvsp[0].e)->e_list);

1571 (
yyvÆ
.
e
Ë(
yyv•
[-2].e);

1579 
	`π∆_em©ch_£t_Êags
((
yyv•
[0].
e
), 
TCF_EM_INVERT
);

1580 (
yyvÆ
.
e
Ë(
yyv•
[0].e);

1588 (
yyvÆ
.
e
Ë(
yyv•
[0].e);

1596 
π∆_em©ch
 *
e
;

1598 i‡(!(
e
 = 
	`π∆_em©ch_Æloc
())) {

1599 *
îΩ
 = 
	`°rdup
("UnableÅoállocateÉmatch object");

1600 
YYABORT
;

1603 i‡(
	`π∆_em©ch_£t_köd
(
e
, 
TCF_EM_CMP
) < 0)

1604 
	`BUG
();

1606 
	`π∆_em©ch_cmp_£t
(
e
, &(
yyv•
[0].
cmp
));

1607 (
yyvÆ
.
e
) =É;

1615 
π∆_em©ch
 *
e
;

1617 i‡(!(
e
 = 
	`π∆_em©ch_Æloc
())) {

1618 *
îΩ
 = 
	`°rdup
("UnableÅoállocateÉmatch object");

1619 
YYABORT
;

1622 i‡(
	`π∆_em©ch_£t_köd
(
e
, 
TCF_EM_NBYTE
) < 0)

1623 
	`BUG
();

1625 
	`π∆_em©ch_nbyã_£t_off£t
(
e
, (
yyv•
[-3].
loc
)->
œyî
, (yyv•[-3].loc)->
off£t
);

1626 
	`π∆_pkéoc_put
((
yyv•
[-3].
loc
));

1627 
	`π∆_em©ch_nbyã_£t_∑âîn
(
e
, (
uöt8_t
 *Ë(
yyv•
[-1].
q
).
d©a
, (yyv•[-1].q).
ödex
);

1629 (
yyvÆ
.
e
) =É;

1637 
π∆_em©ch
 *
e
;

1639 i‡(!(
e
 = 
	`π∆_em©ch_Æloc
())) {

1640 *
îΩ
 = 
	`°rdup
("UnableÅoállocateÉmatch object");

1641 
YYABORT
;

1644 i‡(
	`π∆_em©ch_£t_köd
(
e
, 
TCF_EM_TEXT
) < 0)

1645 
	`BUG
();

1647 
	`π∆_em©ch_ãxt_£t_Ægo
(
e
, (
yyv•
[-4].
s
));

1648 
	`π∆_em©ch_ãxt_£t_∑âîn
(
e
, (
yyv•
[-3].
q
).
d©a
, (yyv•[-3].q).
ödex
);

1650 i‡((
yyv•
[-2].
loc
)) {

1651 
	`π∆_em©ch_ãxt_£t_‰om
(
e
, (
yyv•
[-2].
loc
)->
œyî
, (yyv•[-2].loc)->
off£t
);

1652 
	`π∆_pkéoc_put
((
yyv•
[-2].
loc
));

1655 i‡((
yyv•
[-1].
loc
)) {

1656 
	`π∆_em©ch_ãxt_£t_to
(
e
, (
yyv•
[-1].
loc
)->
œyî
, (yyv•[-1].loc)->
off£t
);

1657 
	`π∆_pkéoc_put
((
yyv•
[-1].
loc
));

1660 (
yyvÆ
.
e
) =É;

1668 
π∆_em©ch
 *
e
;

1670 i‡(!(
e
 = 
	`π∆_em©ch_Æloc
())) {

1671 *
îΩ
 = 
	`°rdup
("UnableÅoállocateÉmatch object");

1672 
YYABORT
;

1675 i‡(
	`π∆_em©ch_£t_köd
(
e
, 
TCF_EM_META
) < 0)

1676 
	`BUG
();

1678 
	`π∆_em©ch_mëa_£t_lvÆue
(
e
, (
yyv•
[-3].
mv
));

1679 
	`π∆_em©ch_mëa_£t_rvÆue
(
e
, (
yyv•
[-1].
mv
));

1680 
	`π∆_em©ch_mëa_£t_›î™d
(
e
, (
yyv•
[-2].
i
));

1682 (
yyvÆ
.
e
) =É;

1690 
π∆_em©ch
 *
e
;

1692 i‡(!(
e
 = 
	`π∆_em©ch_Æloc
())) {

1693 *
îΩ
 = 
	`°rdup
("UnableÅoállocateÉmatch object");

1694 
YYABORT
;

1697 i‡(
	`π∆_em©ch_£t_köd
(
e
, 
TCF_EM_CONTAINER
) < 0)

1698 
	`BUG
();

1701 
	`∆_li°_add_èû
(&
e
->
e_chûds
, &(
yyv•
[-1].e)->
e_li°
);

1703 (
yyvÆ
.
e
) =É;

1710 { (
yyvÆ
.
cmp
Ë(
yyv•
[-1].cmp); }

1716 { (
yyvÆ
.
cmp
Ë(
yyv•
[0].cmp); }

1723 i‡((
yyv•
[-2].
loc
)->
Æign
 =
TCF_EM_ALIGN_U16
 ||

1724 (
yyv•
[-2].
loc
)->
Æign
 =
TCF_EM_ALIGN_U32
)

1725 (
yyvÆ
.
cmp
).
Êags
 = 
TCF_EM_CMP_TRANS
;

1727 
	`mem£t
(&(
yyvÆ
.
cmp
), 0, ((yyval.cmp)));

1729 (
yyvÆ
.
cmp
).
mask
 = (
yyv•
[-2].
loc
)->mask;

1730 (
yyvÆ
.
cmp
).
off
 = (
yyv•
[-2].
loc
)->
off£t
;

1731 (
yyvÆ
.
cmp
).
Æign
 = (
yyv•
[-2].
loc
)->align;

1732 (
yyvÆ
.
cmp
).
œyî
 = (
yyv•
[-2].
loc
)->layer;

1733 (
yyvÆ
.
cmp
).
›nd
 = (
yyv•
[-1].
i
);

1734 (
yyvÆ
.
cmp
).
vÆ
 = (
yyv•
[0].
i
);

1736 
	`π∆_pkéoc_put
((
yyv•
[-2].
loc
));

1743 { (
yyvÆ
.
loc
Ë
NULL
; }

1749 { (
yyvÆ
.
loc
Ë(
yyv•
[0].loc); }

1755 { (
yyvÆ
.
loc
Ë
NULL
; }

1761 { (
yyvÆ
.
loc
Ë(
yyv•
[0].loc); }

1767 { (
yyvÆ
.
mv
Ë
	`π∆_mëa_vÆue_Æloc_v¨
((
yyv•
[0].
q
).
d©a
, (yyv•[0].q).
Àn
); }

1773 { (
yyvÆ
.
mv
Ë
	`π∆_mëa_vÆue_Æloc_öt
((
yyv•
[0].
i
)); }

1779 { (
yyvÆ
.
mv
Ë
	`META_ALLOC
(
META_INT
, (
yyv•
[-2].
i
), (yyv•[-1].i), (yyv•[0].
i64
)); }

1785 { (
yyvÆ
.
mv
Ë
	`META_ALLOC
(
META_VAR
, (
yyv•
[-1].
i
), (yyvsp[0].i), 0); }

1791 { (
yyvÆ
.
i
Ë
	`META_ID
(
RANDOM
); }

1797 { (
yyvÆ
.
i
Ë
	`META_ID
(
LOADAVG_0
); }

1803 { (
yyvÆ
.
i
Ë
	`META_ID
(
LOADAVG_1
); }

1809 { (
yyvÆ
.
i
Ë
	`META_ID
(
LOADAVG_2
); }

1815 { (
yyvÆ
.
i
Ë
	`META_ID
(
DEV
); }

1821 { (
yyvÆ
.
i
Ë
	`META_ID
(
PRIORITY
); }

1827 { (
yyvÆ
.
i
Ë
	`META_ID
(
PROTOCOL
); }

1833 { (
yyvÆ
.
i
Ë
	`META_ID
(
PKTTYPE
); }

1839 { (
yyvÆ
.
i
Ë
	`META_ID
(
PKTLEN
); }

1845 { (
yyvÆ
.
i
Ë
	`META_ID
(
DATALEN
); }

1851 { (
yyvÆ
.
i
Ë
	`META_ID
(
MACLEN
); }

1857 { (
yyvÆ
.
i
Ë
	`META_ID
(
NFMARK
); }

1863 { (
yyvÆ
.
i
Ë
	`META_ID
(
TCINDEX
); }

1869 { (
yyvÆ
.
i
Ë
	`META_ID
(
RTCLASSID
); }

1875 { (
yyvÆ
.
i
Ë
	`META_ID
(
RTIIF
); }

1881 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_FAMILY
); }

1887 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_STATE
); }

1893 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_REUSE
); }

1899 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_REFCNT
); }

1905 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_RCVBUF
); }

1911 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_SNDBUF
); }

1917 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_SHUTDOWN
); }

1923 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_PROTO
); }

1929 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_TYPE
); }

1935 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_RMEM_ALLOC
); }

1941 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_WMEM_ALLOC
); }

1947 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_WMEM_QUEUED
); }

1953 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_RCV_QLEN
); }

1959 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_SND_QLEN
); }

1965 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_ERR_QLEN
); }

1971 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_FORWARD_ALLOCS
); }

1977 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_ALLOCS
); }

1983 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_ROUTE_CAPS
); }

1989 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_HASH
); }

1995 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_LINGERTIME
); }

2001 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_ACK_BACKLOG
); }

2007 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_MAX_ACK_BACKLOG
); }

2013 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_PRIO
); }

2019 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_RCVLOWAT
); }

2025 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_RCVTIMEO
); }

2031 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_SNDTIMEO
); }

2037 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_SENDMSG_OFF
); }

2043 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_WRITE_PENDING
); }

2049 { (
yyvÆ
.
i
Ë
	`META_ID
(
VLAN_TAG
); }

2055 { (
yyvÆ
.
i
Ë
	`META_ID
(
RXHASH
); }

2061 { (
yyvÆ
.
i
Ë
	`META_ID
(
DEV
); }

2067 { (
yyvÆ
.
i
Ë
	`META_ID
(
SK_BOUND_IF
); }

2074 (
yyvÆ
.
q
Ë(
yyv•
[0].q);

2082 
∆_addr
 *
addr
;

2084 i‡(
	`∆_addr_∑r£
((
yyv•
[0].
s
), 
AF_UNSPEC
, &
addr
) == 0) {

2085 (
yyvÆ
.
q
).
Àn
 = 
	`∆_addr_gë_Àn
(
addr
);

2087 (
yyvÆ
.
q
).
ödex
 = 
	`mö_t
(, (yyvÆ.q).
Àn
, 
	`∆_addr_gë_¥efixÀn
(
addr
)/8);

2089 i‡(!((
yyvÆ
.
q
).
d©a
 = 
	`ˇŒoc
(1, (yyvÆ.q).
Àn
))) {

2090 
	`∆_addr_put
(
addr
);

2091 
YYABORT
;

2094 
	`mem˝y
((
yyvÆ
.
q
).
d©a
, 
	`∆_addr_gë_bö¨y_addr
(
addr
), (yyvÆ.q).
Àn
);

2095 
	`∆_addr_put
(
addr
);

2097 i‡(
	`a•rötf
(
îΩ
, "övÆidÖ©ã∫ \"%s\"", (
yyv•
[0].
s
)) == -1)

2098 *
îΩ
 = 
NULL
;

2099 
YYABORT
;

2108 
π∆_pkéoc
 *
loc
;

2110 i‡(
	`π∆_pkéoc_lookup
((
yyv•
[0].
s
), &
loc
) < 0) {

2111 i‡(
	`a•rötf
(
îΩ
, "PackëÜoˇti⁄ \"%s\"ÇŸ found", (
yyv•
[0].
s
)) == -1)

2112 *
îΩ
 = 
NULL
;

2113 
YYABORT
;

2116 (
yyvÆ
.
loc
) =Üoc;

2124 
π∆_pkéoc
 *
loc
;

2126 i‡((
yyv•
[0].
i64
Ë&& (!(yyv•[-4].
i
Ë|| (yyv•[-4].iË> 
TCF_EM_ALIGN_U32
)) {

2127 *
îΩ
 = 
	`°rdup
("mask onlyállowed forálignments u8|u16|u32");

2128 
YYABORT
;

2131 i‡(!(
loc
 = 
	`π∆_pkéoc_Æloc
())) {

2132 *
îΩ
 = 
	`°rdup
("UnableÅoállocateÖacketÜocation object");

2133 
YYABORT
;

2136 
loc
->
«me
 = 
	`°rdup
("<USER-DEFINED>");

2137 
loc
->
Æign
 = (
yyv•
[-4].
i
);

2138 
loc
->
œyî
 = (
yyv•
[-3].
i
);

2139 
loc
->
off£t
 = (
yyv•
[-1].
i
);

2140 
loc
->
mask
 = (
yyv•
[0].
i64
);

2142 (
yyvÆ
.
loc
) =Üoc;

2149 { (
yyvÆ
.
i
) = 0; }

2155 { (
yyvÆ
.
i
Ë(
yyv•
[-1].i); }

2161 { (
yyvÆ
.
i
Ë(
yyv•
[-1].i); }

2167 { (
yyvÆ
.
i64
) = 0; }

2173 { (
yyvÆ
.
i64
Ë(
yyv•
[0].
i
); }

2179 { (
yyvÆ
.
i
) = 0; }

2185 { (
yyvÆ
.
i
Ë(
yyv•
[0].i); }

2191 { (
yyvÆ
.
i
Ë
TCF_EM_OPND_EQ
; }

2197 { (
yyvÆ
.
i
Ë
TCF_EM_OPND_GT
; }

2203 { (
yyvÆ
.
i
Ë
TCF_EM_OPND_LT
; }

2222 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

2224 
	`YYPOPSTACK
 (
yyÀn
);

2225 
yyÀn
 = 0;

2226 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

2228 *++
yyv•
 = 
yyvÆ
;

2234 
yyn
 = 
yyr1
[yyn];

2236 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

2237 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

2238 
yy°©e
 = 
yyèbÀ
[yystate];

2240 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

2242 
yy√w°©e
;

2248 
yyîæab
:

2251 
yytokí
 = 
yych¨
 =
YYEMPTY
 ? YYEMPTY : 
	`YYTRANSLATE
 (yychar);

2254 i‡(!
yyîr°©us
)

2256 ++
yy√ºs
;

2257 #i‡! 
YYERROR_VERBOSE


2258 
	`yyîr‹
 (
sˇ¬î
, 
îΩ
, 
roŸ
, 
	`YY_
("syntaxÉrror"));

2260 
	#YYSYNTAX_ERROR
 
	`yysy¡ax_îr‹
 (&
yymsg_Æloc
, &
yymsg
, \

2261 
yys•
, 
yytokí
)

	)

2263 c⁄° *
yymsgp
 = 
	`YY_
("syntaxÉrror");

2264 
yysy¡ax_îr‹_°©us
;

2265 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

2266 i‡(
yysy¡ax_îr‹_°©us
 == 0)

2267 
yymsgp
 = 
yymsg
;

2268 i‡(
yysy¡ax_îr‹_°©us
 == 1)

2270 i‡(
yymsg
 !
yymsgbuf
)

2271 
	`YYSTACK_FREE
 (
yymsg
);

2272 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yymsg_Æloc
);

2273 i‡(!
yymsg
)

2275 
yymsg
 = 
yymsgbuf
;

2276 
yymsg_Æloc
 =  
yymsgbuf
;

2277 
yysy¡ax_îr‹_°©us
 = 2;

2281 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

2282 
yymsgp
 = 
yymsg
;

2285 
	`yyîr‹
 (
sˇ¬î
, 
îΩ
, 
roŸ
, 
yymsgp
);

2286 i‡(
yysy¡ax_îr‹_°©us
 == 2)

2287 
yyexhau°edœb
;

2289 #unde‡
YYSYNTAX_ERROR


2295 i‡(
yyîr°©us
 == 3)

2300 i‡(
yych¨
 <
YYEOF
)

2303 i‡(
yych¨
 =
YYEOF
)

2304 
YYABORT
;

2308 
	`yyde°ru˘
 ("Error: discarding",

2309 
yytokí
, &
yylvÆ
, 
sˇ¬î
, 
îΩ
, 
roŸ
);

2310 
yych¨
 = 
YYEMPTY
;

2316 
yyîæab1
;

2322 
yyîr‹œb
:

2328 
yyîr‹œb
;

2332 
	`YYPOPSTACK
 (
yyÀn
);

2333 
yyÀn
 = 0;

2334 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

2335 
yy°©e
 = *
yys•
;

2336 
yyîæab1
;

2342 
yyîæab1
:

2343 
yyîr°©us
 = 3;

2347 
yyn
 = 
yy∑˘
[
yy°©e
];

2348 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

2350 
yyn
 +
YYTERROR
;

2351 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

2353 
yyn
 = 
yyèbÀ
[yyn];

2354 i‡(0 < 
yyn
)

2360 i‡(
yys•
 =
yyss
)

2361 
YYABORT
;

2364 
	`yyde°ru˘
 ("Error:Öopping",

2365 
yy°os
[
yy°©e
], 
yyv•
, 
sˇ¬î
, 
îΩ
, 
roŸ
);

2366 
	`YYPOPSTACK
 (1);

2367 
yy°©e
 = *
yys•
;

2368 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

2371 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


2372 *++
yyv•
 = 
yylvÆ
;

2373 
YY_IGNORE_MAYBE_UNINITIALIZED_END


2377 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

2379 
yy°©e
 = 
yyn
;

2380 
yy√w°©e
;

2386 
yyac˚±œb
:

2387 
yyªsu…
 = 0;

2388 
yyªtu∫
;

2393 
yyab‹éab
:

2394 
yyªsu…
 = 1;

2395 
yyªtu∫
;

2397 #i‡!
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


2401 
yyexhau°edœb
:

2402 
	`yyîr‹
 (
sˇ¬î
, 
îΩ
, 
roŸ
, 
	`YY_
("memoryÉxhausted"));

2403 
yyªsu…
 = 2;

2407 
yyªtu∫
:

2408 i‡(
yych¨
 !
YYEMPTY
)

2412 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

2413 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

2414 
yytokí
, &
yylvÆ
, 
sˇ¬î
, 
îΩ
, 
roŸ
);

2418 
	`YYPOPSTACK
 (
yyÀn
);

2419 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

2420 
yys•
 !
yyss
)

2422 
	`yyde°ru˘
 ("Cleanup:Öopping",

2423 
yy°os
[*
yys•
], 
yyv•
, 
sˇ¬î
, 
îΩ
, 
roŸ
);

2424 
	`YYPOPSTACK
 (1);

2426 #i‚de‡
yyovîÊow


2427 i‡(
yyss
 !
yysß
)

2428 
	`YYSTACK_FREE
 (
yyss
);

2430 #i‡
YYERROR_VERBOSE


2431 i‡(
yymsg
 !
yymsgbuf
)

2432 
	`YYSTACK_FREE
 (
yymsg
);

2434  
yyªsu…
;

2435 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/cls/ematch_syntax.h

33 #i‚de‡
YY_EMATCH_ROUTE_CLS_EMATCH_SYNTAX_H_INCLUDED


34 
	#YY_EMATCH_ROUTE_CLS_EMATCH_SYNTAX_H_INCLUDED


	)

36 #i‚de‡
YYDEBUG


37 
	#YYDEBUG
 0

	)

39 #i‡
YYDEBUG


40 
em©ch_debug
;

44 #i‚de‡
YYTOKENTYPE


45 
	#YYTOKENTYPE


	)

46 
	eyytokíty≥


48 
	mERROR
 = 258,

49 
	mLOGIC
 = 259,

50 
	mNOT
 = 260,

51 
	mOPERAND
 = 261,

52 
	mNUMBER
 = 262,

53 
	mALIGN
 = 263,

54 
	mLAYER
 = 264,

55 
	mKW_OPEN
 = 265,

56 
	mKW_CLOSE
 = 266,

57 
	mKW_PLUS
 = 267,

58 
	mKW_MASK
 = 268,

59 
	mKW_SHIFT
 = 269,

60 
	mKW_AT
 = 270,

61 
	mEMATCH_CMP
 = 271,

62 
	mEMATCH_NBYTE
 = 272,

63 
	mEMATCH_TEXT
 = 273,

64 
	mEMATCH_META
 = 274,

65 
	mKW_EQ
 = 275,

66 
	mKW_GT
 = 276,

67 
	mKW_LT
 = 277,

68 
	mKW_FROM
 = 278,

69 
	mKW_TO
 = 279,

70 
	mMETA_RANDOM
 = 280,

71 
	mMETA_LOADAVG_0
 = 281,

72 
	mMETA_LOADAVG_1
 = 282,

73 
	mMETA_LOADAVG_2
 = 283,

74 
	mMETA_DEV
 = 284,

75 
	mMETA_PRIO
 = 285,

76 
	mMETA_PROTO
 = 286,

77 
	mMETA_PKTTYPE
 = 287,

78 
	mMETA_PKTLEN
 = 288,

79 
	mMETA_DATALEN
 = 289,

80 
	mMETA_MACLEN
 = 290,

81 
	mMETA_MARK
 = 291,

82 
	mMETA_TCINDEX
 = 292,

83 
	mMETA_RTCLASSID
 = 293,

84 
	mMETA_RTIIF
 = 294,

85 
	mMETA_SK_FAMILY
 = 295,

86 
	mMETA_SK_STATE
 = 296,

87 
	mMETA_SK_REUSE
 = 297,

88 
	mMETA_SK_REFCNT
 = 298,

89 
	mMETA_SK_RCVBUF
 = 299,

90 
	mMETA_SK_SNDBUF
 = 300,

91 
	mMETA_SK_SHUTDOWN
 = 301,

92 
	mMETA_SK_PROTO
 = 302,

93 
	mMETA_SK_TYPE
 = 303,

94 
	mMETA_SK_RMEM_ALLOC
 = 304,

95 
	mMETA_SK_WMEM_ALLOC
 = 305,

96 
	mMETA_SK_WMEM_QUEUED
 = 306,

97 
	mMETA_SK_RCV_QLEN
 = 307,

98 
	mMETA_SK_SND_QLEN
 = 308,

99 
	mMETA_SK_ERR_QLEN
 = 309,

100 
	mMETA_SK_FORWARD_ALLOCS
 = 310,

101 
	mMETA_SK_ALLOCS
 = 311,

102 
	mMETA_SK_ROUTE_CAPS
 = 312,

103 
	mMETA_SK_HASH
 = 313,

104 
	mMETA_SK_LINGERTIME
 = 314,

105 
	mMETA_SK_ACK_BACKLOG
 = 315,

106 
	mMETA_SK_MAX_ACK_BACKLOG
 = 316,

107 
	mMETA_SK_PRIO
 = 317,

108 
	mMETA_SK_RCVLOWAT
 = 318,

109 
	mMETA_SK_RCVTIMEO
 = 319,

110 
	mMETA_SK_SNDTIMEO
 = 320,

111 
	mMETA_SK_SENDMSG_OFF
 = 321,

112 
	mMETA_SK_WRITE_PENDING
 = 322,

113 
	mMETA_VLAN
 = 323,

114 
	mMETA_RXHASH
 = 324,

115 
	mMETA_DEVNAME
 = 325,

116 
	mMETA_SK_BOUND_IF
 = 326,

117 
	mSTR
 = 327,

118 
	mQUOTED
 = 328

122 
	#ERROR
 258

	)

123 
	#LOGIC
 259

	)

124 
	#NOT
 260

	)

125 
	#OPERAND
 261

	)

126 
	#NUMBER
 262

	)

127 
	#ALIGN
 263

	)

128 
	#LAYER
 264

	)

129 
	#KW_OPEN
 265

	)

130 
	#KW_CLOSE
 266

	)

131 
	#KW_PLUS
 267

	)

132 
	#KW_MASK
 268

	)

133 
	#KW_SHIFT
 269

	)

134 
	#KW_AT
 270

	)

135 
	#EMATCH_CMP
 271

	)

136 
	#EMATCH_NBYTE
 272

	)

137 
	#EMATCH_TEXT
 273

	)

138 
	#EMATCH_META
 274

	)

139 
	#KW_EQ
 275

	)

140 
	#KW_GT
 276

	)

141 
	#KW_LT
 277

	)

142 
	#KW_FROM
 278

	)

143 
	#KW_TO
 279

	)

144 
	#META_RANDOM
 280

	)

145 
	#META_LOADAVG_0
 281

	)

146 
	#META_LOADAVG_1
 282

	)

147 
	#META_LOADAVG_2
 283

	)

148 
	#META_DEV
 284

	)

149 
	#META_PRIO
 285

	)

150 
	#META_PROTO
 286

	)

151 
	#META_PKTTYPE
 287

	)

152 
	#META_PKTLEN
 288

	)

153 
	#META_DATALEN
 289

	)

154 
	#META_MACLEN
 290

	)

155 
	#META_MARK
 291

	)

156 
	#META_TCINDEX
 292

	)

157 
	#META_RTCLASSID
 293

	)

158 
	#META_RTIIF
 294

	)

159 
	#META_SK_FAMILY
 295

	)

160 
	#META_SK_STATE
 296

	)

161 
	#META_SK_REUSE
 297

	)

162 
	#META_SK_REFCNT
 298

	)

163 
	#META_SK_RCVBUF
 299

	)

164 
	#META_SK_SNDBUF
 300

	)

165 
	#META_SK_SHUTDOWN
 301

	)

166 
	#META_SK_PROTO
 302

	)

167 
	#META_SK_TYPE
 303

	)

168 
	#META_SK_RMEM_ALLOC
 304

	)

169 
	#META_SK_WMEM_ALLOC
 305

	)

170 
	#META_SK_WMEM_QUEUED
 306

	)

171 
	#META_SK_RCV_QLEN
 307

	)

172 
	#META_SK_SND_QLEN
 308

	)

173 
	#META_SK_ERR_QLEN
 309

	)

174 
	#META_SK_FORWARD_ALLOCS
 310

	)

175 
	#META_SK_ALLOCS
 311

	)

176 
	#META_SK_ROUTE_CAPS
 312

	)

177 
	#META_SK_HASH
 313

	)

178 
	#META_SK_LINGERTIME
 314

	)

179 
	#META_SK_ACK_BACKLOG
 315

	)

180 
	#META_SK_MAX_ACK_BACKLOG
 316

	)

181 
	#META_SK_PRIO
 317

	)

182 
	#META_SK_RCVLOWAT
 318

	)

183 
	#META_SK_RCVTIMEO
 319

	)

184 
	#META_SK_SNDTIMEO
 320

	)

185 
	#META_SK_SENDMSG_OFF
 321

	)

186 
	#META_SK_WRITE_PENDING
 322

	)

187 
	#META_VLAN
 323

	)

188 
	#META_RXHASH
 324

	)

189 
	#META_DEVNAME
 325

	)

190 
	#META_SK_BOUND_IF
 326

	)

191 
	#STR
 327

	)

192 
	#QUOTED
 328

	)

195 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


196 
YYSTYPE
 
	tYYSTYPE
;

197 
	uYYSTYPE


201 
tcf_em_cmp
 
	mcmp
;

202 
em©ch_quŸed
 
	mq
;

203 
π∆_em©ch
 * 
	me
;

204 
π∆_pkéoc
 * 
	mloc
;

205 
π∆_mëa_vÆue
 *
	mmv
;

206 
uöt32_t
 
	mi
;

207 
uöt64_t
 
	mi64
;

208 * 
	ms
;

212 
	#YYSTYPE_IS_TRIVIAL
 1

	)

213 
	#YYSTYPE_IS_DECLARED
 1

	)

218 
em©ch_∑r£
 (*
sˇ¬î
, **
îΩ
, 
∆_li°_hód
 *
roŸ
);

	@mylibnl/libnl-3.2.25/lib/route/cls/ematch_syntax.y

13 
	~<√éök-¥iv©e/√éök.h
>

14 
	~<√éök-¥iv©e/tc.h
>

15 
	~<√éök/√éök.h
>

16 
	~<√éök/utûs.h
>

17 
	~<√éök/rouã/pkéoc.h
>

18 
	~<√éök/rouã/˛s/em©ch.h
>

19 
	~<√éök/rouã/˛s/em©ch/cmp.h
>

20 
	~<√éök/rouã/˛s/em©ch/nbyã.h
>

21 
	~<√éök/rouã/˛s/em©ch/ãxt.h
>

22 
	~<√éök/rouã/˛s/em©ch/mëa.h
>

24 
	#META_ALLOC
 
π∆_mëa_vÆue_Æloc_id


	)

25 
	#META_ID
(
«me
Ë
TCF_META_ID_
##
	)
«me

26 
	#META_INT
 
TCF_META_TYPE_INT


	)

27 
	#META_VAR
 
TCF_META_TYPE_VAR


	)

30 %
îr‹
-
vîbo£


31 %
deföe
 
≠i
.
puª


32 %
«me
-
¥efix
 "ematch_"

34 %
∑r£
-
∑øm
 {*
sˇ¬î
}

35 %
∑r£
-
∑øm
 {**
îΩ
}

36 %
∑r£
-
∑øm
 {
∆_li°_hód
 *
roŸ
}

37 %
Àx
-
∑øm
 {*
sˇ¬î
}

40 
tcf_em_cmp
 
cmp
;

41 
em©ch_quŸed
 
q
;

42 
π∆_em©ch
 * 
e
;

43 
π∆_pkéoc
 * 
loc
;

44 
π∆_mëa_vÆue
 *
mv
;

45 
uöt32_t
 
i
;

46 
uöt64_t
 
i64
;

47 * 
s
;

51 
em©ch_Àx
(
YYSTYPE
 *, *);

53 
	$yyîr‹
(*
sˇ¬î
, **
îΩ
, 
∆_li°_hód
 *
roŸ
, c⁄° *
msg
)

55 i‡(
msg
)

56 *
îΩ
 = 
	`°rdup
(
msg
);

58 *
îΩ
 = 
NULL
;

59 
	}
}

62 %
tokí
 <
i
> 
ERROR
 
LOGIC
 
NOT
 
OPERAND
 
NUMBER
 
ALIGN
 
LAYER


63 %
tokí
 <
i
> 
KW_OPEN
 "("

64 %
tokí
 <
i
> 
KW_CLOSE
 ")"

65 %
tokí
 <
i
> 
KW_PLUS
 "+"

66 %
tokí
 <
i
> 
KW_MASK
 "mask"

67 %
tokí
 <
i
> 
KW_SHIFT
 ">>"

68 %
tokí
 <
i
> 
KW_AT
 "at"

69 %
tokí
 <
i
> 
EMATCH_CMP
 "cmp"

70 %
tokí
 <
i
> 
EMATCH_NBYTE
 "pattern"

71 %
tokí
 <
i
> 
EMATCH_TEXT
 "text"

72 %
tokí
 <
i
> 
EMATCH_META
 "meta"

73 %
tokí
 <
i
> 
KW_EQ
 "="

74 %
tokí
 <
i
> 
KW_GT
 ">"

75 %
tokí
 <
i
> 
KW_LT
 "<"

76 %
tokí
 <
i
> 
KW_FROM
 "from"

77 %
tokí
 <
i
> 
KW_TO
 "to"

79 %
tokí
 <
i
> 
META_RANDOM
 "random"

80 %
tokí
 <
i
> 
META_LOADAVG_0
 "loadavg_0"

81 %
tokí
 <
i
> 
META_LOADAVG_1
 "loadavg_1"

82 %
tokí
 <
i
> 
META_LOADAVG_2
 "loadavg_2"

83 %
tokí
 <
i
> 
META_DEV
 "dev"

84 %
tokí
 <
i
> 
META_PRIO
 "prio"

85 %
tokí
 <
i
> 
META_PROTO
 "proto"

86 %
tokí
 <
i
> 
META_PKTTYPE
 "pkttype"

87 %
tokí
 <
i
> 
META_PKTLEN
 "pktlen"

88 %
tokí
 <
i
> 
META_DATALEN
 "datalen"

89 %
tokí
 <
i
> 
META_MACLEN
 "maclen"

90 %
tokí
 <
i
> 
META_MARK
 "mark"

91 %
tokí
 <
i
> 
META_TCINDEX
 "tcindex"

92 %
tokí
 <
i
> 
META_RTCLASSID
 "rtclassid"

93 %
tokí
 <
i
> 
META_RTIIF
 "rtiif"

94 %
tokí
 <
i
> 
META_SK_FAMILY
 "sk_family"

95 %
tokí
 <
i
> 
META_SK_STATE
 "sk_state"

96 %
tokí
 <
i
> 
META_SK_REUSE
 "sk_reuse"

97 %
tokí
 <
i
> 
META_SK_REFCNT
 "sk_refcnt"

98 %
tokí
 <
i
> 
META_SK_RCVBUF
 "sk_rcvbuf"

99 %
tokí
 <
i
> 
META_SK_SNDBUF
 "sk_sndbuf"

100 %
tokí
 <
i
> 
META_SK_SHUTDOWN
 "sk_shutdown"

101 %
tokí
 <
i
> 
META_SK_PROTO
 "sk_proto"

102 %
tokí
 <
i
> 
META_SK_TYPE
 "sk_type"

103 %
tokí
 <
i
> 
META_SK_RMEM_ALLOC
 "sk_rmem_alloc"

104 %
tokí
 <
i
> 
META_SK_WMEM_ALLOC
 "sk_wmem_alloc"

105 %
tokí
 <
i
> 
META_SK_WMEM_QUEUED
 "sk_wmem_queued"

106 %
tokí
 <
i
> 
META_SK_RCV_QLEN
 "sk_rcv_qlen"

107 %
tokí
 <
i
> 
META_SK_SND_QLEN
 "sk_snd_qlen"

108 %
tokí
 <
i
> 
META_SK_ERR_QLEN
 "sk_err_qlen"

109 %
tokí
 <
i
> 
META_SK_FORWARD_ALLOCS
 "sk_forward_allocs"

110 %
tokí
 <
i
> 
META_SK_ALLOCS
 "sk_allocs"

111 %
tokí
 <
i
> 
META_SK_ROUTE_CAPS
 "sk_route_caps"

112 %
tokí
 <
i
> 
META_SK_HASH
 "sk_hash"

113 %
tokí
 <
i
> 
META_SK_LINGERTIME
 "sk_lingertime"

114 %
tokí
 <
i
> 
META_SK_ACK_BACKLOG
 "sk_ack_backlog"

115 %
tokí
 <
i
> 
META_SK_MAX_ACK_BACKLOG
 "sk_max_ack_backlog"

116 %
tokí
 <
i
> 
META_SK_PRIO
 "sk_prio"

117 %
tokí
 <
i
> 
META_SK_RCVLOWAT
 "sk_rcvlowat"

118 %
tokí
 <
i
> 
META_SK_RCVTIMEO
 "sk_rcvtimeo"

119 %
tokí
 <
i
> 
META_SK_SNDTIMEO
 "sk_sndtimeo"

120 %
tokí
 <
i
> 
META_SK_SENDMSG_OFF
 "sk_sendmsg_off"

121 %
tokí
 <
i
> 
META_SK_WRITE_PENDING
 "sk_write_pending"

122 %
tokí
 <
i
> 
META_VLAN
 "vlan"

123 %
tokí
 <
i
> 
META_RXHASH
 "rxhash"

124 %
tokí
 <
i
> 
META_DEVNAME
 "devname"

125 %
tokí
 <
i
> 
META_SK_BOUND_IF
 "sk_bound_if"

127 %
tokí
 <
s
> 
STR


129 %
tokí
 <
q
> 
QUOTED


131 %
ty≥
 <
i
> 
Æign
 
›î™d
 
shi·
 
mëa_öt_id
 
mëa_v¨_id


132 %
ty≥
 <
i64
> 
mask


133 %
ty≥
 <
e
> 
ex¥
 
m©ch
 
em©ch


134 %
ty≥
 <
cmp
> 
cmp_ex¥
 
cmp_m©ch


135 %
ty≥
 <
loc
> 
pkéoc
 
ãxt_‰om
 
ãxt_to


136 %
ty≥
 <
q
> 
∑âîn


137 %
ty≥
 <
mv
> 
mëa_vÆue


139 %
de°ru˘‹
 { 
‰ì
(
$$
); 
NL_DBG
(2, "°rög de°ru˘‹\n"); } <
s
>

140 %
de°ru˘‹
 { 
π∆_pkéoc_put
(
$$
); 
NL_DBG
(2, "pkéo¯de°ru˘‹\n"); } <
loc
>

141 %
de°ru˘‹
 { 
‰ì
(
$$
.
d©a
); 
NL_DBG
(2, "quŸed de°ru˘‹\n"); } <
q
>

142 %
de°ru˘‹
 { 
π∆_mëa_vÆue_put
(
$$
); 
NL_DBG
(2, "më®vÆuêde°ru˘‹\n"); } <
mv
>

144 %
°¨t
 
öput


146 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

148 
öput
:

150 | 
ex¥


152 
	`∆_li°_add_èû
(
roŸ
, &
$1
->
e_li°
);

156 
ex¥
:

157 
m©ch


159 
$$
 = 
$1
;

161 | 
m©ch
 
LOGIC
 
ex¥


163 
	`π∆_em©ch_£t_Êags
(
$1
, 
$2
);

166 
	`∆_li°_add_èû
(&
$1
->
e_li°
, &
$3
->e_list);

168 
$$
 = 
$1
;

172 
m©ch
:

173 
NOT
 
em©ch


175 
	`π∆_em©ch_£t_Êags
(
$2
, 
TCF_EM_INVERT
);

176 
$$
 = 
$2
;

178 | 
em©ch


180 
$$
 = 
$1
;

184 
em©ch
:

186 
cmp_m©ch


188 
π∆_em©ch
 *
e
;

190 i‡(!(
e
 = 
	`π∆_em©ch_Æloc
())) {

191 *
îΩ
 = 
	`°rdup
("UnableÅoállocateÉmatch object");

192 
YYABORT
;

195 i‡(
	`π∆_em©ch_£t_köd
(
e
, 
TCF_EM_CMP
) < 0)

196 
	`BUG
();

198 
	`π∆_em©ch_cmp_£t
(
e
, &
$1
);

199 
$$
 = 
e
;

201 | 
EMATCH_NBYTE
 "(" 
pkéoc
 
KW_EQ
 
∑âîn
 ")"

203 
π∆_em©ch
 *
e
;

205 i‡(!(
e
 = 
	`π∆_em©ch_Æloc
())) {

206 *
îΩ
 = 
	`°rdup
("UnableÅoállocateÉmatch object");

207 
YYABORT
;

210 i‡(
	`π∆_em©ch_£t_köd
(
e
, 
TCF_EM_NBYTE
) < 0)

211 
	`BUG
();

213 
	`π∆_em©ch_nbyã_£t_off£t
(
e
, 
$3
->
œyî
, $3->
off£t
);

214 
	`π∆_pkéoc_put
(
$3
);

215 
	`π∆_em©ch_nbyã_£t_∑âîn
(
e
, (
uöt8_t
 *Ë
$5
.
d©a
, $5.
ödex
);

217 
$$
 = 
e
;

219 | 
EMATCH_TEXT
 "(" 
STR
 
QUOTED
 
ãxt_‰om
 
ãxt_to
 ")"

221 
π∆_em©ch
 *
e
;

223 i‡(!(
e
 = 
	`π∆_em©ch_Æloc
())) {

224 *
îΩ
 = 
	`°rdup
("UnableÅoállocateÉmatch object");

225 
YYABORT
;

228 i‡(
	`π∆_em©ch_£t_köd
(
e
, 
TCF_EM_TEXT
) < 0)

229 
	`BUG
();

231 
	`π∆_em©ch_ãxt_£t_Ægo
(
e
, 
$3
);

232 
	`π∆_em©ch_ãxt_£t_∑âîn
(
e
, 
$4
.
d©a
, $4.
ödex
);

234 i‡(
$5
) {

235 
	`π∆_em©ch_ãxt_£t_‰om
(
e
, 
$5
->
œyî
, $5->
off£t
);

236 
	`π∆_pkéoc_put
(
$5
);

239 i‡(
$6
) {

240 
	`π∆_em©ch_ãxt_£t_to
(
e
, 
$6
->
œyî
, $6->
off£t
);

241 
	`π∆_pkéoc_put
(
$6
);

244 
$$
 = 
e
;

246 | 
EMATCH_META
 "(" 
mëa_vÆue
 
›î™d
 meta_value ")"

248 
π∆_em©ch
 *
e
;

250 i‡(!(
e
 = 
	`π∆_em©ch_Æloc
())) {

251 *
îΩ
 = 
	`°rdup
("UnableÅoállocateÉmatch object");

252 
YYABORT
;

255 i‡(
	`π∆_em©ch_£t_köd
(
e
, 
TCF_EM_META
) < 0)

256 
	`BUG
();

258 
	`π∆_em©ch_mëa_£t_lvÆue
(
e
, 
$3
);

259 
	`π∆_em©ch_mëa_£t_rvÆue
(
e
, 
$5
);

260 
	`π∆_em©ch_mëa_£t_›î™d
(
e
, 
$4
);

262 
$$
 = 
e
;

265 | "(" 
ex¥
 ")"

267 
π∆_em©ch
 *
e
;

269 i‡(!(
e
 = 
	`π∆_em©ch_Æloc
())) {

270 *
îΩ
 = 
	`°rdup
("UnableÅoállocateÉmatch object");

271 
YYABORT
;

274 i‡(
	`π∆_em©ch_£t_köd
(
e
, 
TCF_EM_CONTAINER
) < 0)

275 
	`BUG
();

278 
	`∆_li°_add_èû
(&
e
->
e_chûds
, &
$2
->
e_li°
);

280 
$$
 = 
e
;

292 
cmp_m©ch
:

293 
EMATCH_CMP
 "(" 
cmp_ex¥
 ")"

294 { 
$$
 = 
$3
; }

295 | 
cmp_ex¥


296 { 
$$
 = 
$1
; }

299 
cmp_ex¥
:

300 
pkéoc
 
›î™d
 
NUMBER


302 i‡(
$1
->
Æign
 =
TCF_EM_ALIGN_U16
 ||

303 
$1
->
Æign
 =
TCF_EM_ALIGN_U32
)

304 
$$
.
Êags
 = 
TCF_EM_CMP_TRANS
;

306 
	`mem£t
(&
$$
, 0, ($$));

308 
$$
.
mask
 = 
$1
->mask;

309 
$$
.
off
 = 
$1
->
off£t
;

310 
$$
.
Æign
 = 
$1
->align;

311 
$$
.
œyî
 = 
$1
->layer;

312 
$$
.
›nd
 = 
$2
;

313 
$$
.
vÆ
 = 
$3
;

315 
	`π∆_pkéoc_put
(
$1
);

319 
ãxt_‰om
:

321 { 
$$
 = 
NULL
; }

322 | "‰om" 
pkéoc


323 { 
$$
 = 
$2
; }

326 
ãxt_to
:

328 { 
$$
 = 
NULL
; }

329 | "to" 
pkéoc


330 { 
$$
 = 
$2
; }

333 
mëa_vÆue
:

334 
QUOTED


335 { 
$$
 = 
	`π∆_mëa_vÆue_Æloc_v¨
(
$1
.
d©a
, $1.
Àn
); }

336 | 
NUMBER


337 { 
$$
 = 
	`π∆_mëa_vÆue_Æloc_öt
(
$1
); }

338 | 
mëa_öt_id
 
shi·
 
mask


339 { 
$$
 = 
	`META_ALLOC
(
META_INT
, 
$1
, 
$2
, 
$3
); }

340 | 
mëa_v¨_id
 
shi·


341 { 
$$
 = 
	`META_ALLOC
(
META_VAR
, 
$1
, 
$2
, 0); }

344 
mëa_öt_id
:

345 
META_RANDOM
 { 
$$
 = 
	`META_ID
(
RANDOM
); }

346 |
META_LOADAVG_0
 { 
$$
 = 
	`META_ID
(
LOADAVG_0
); }

347 |
META_LOADAVG_1
 { 
$$
 = 
	`META_ID
(
LOADAVG_1
); }

348 |
META_LOADAVG_2
 { 
$$
 = 
	`META_ID
(
LOADAVG_2
); }

349 | 
META_DEV
 { 
$$
 = 
	`META_ID
(
DEV
); }

350 | 
META_PRIO
 { 
$$
 = 
	`META_ID
(
PRIORITY
); }

351 | 
META_PROTO
 { 
$$
 = 
	`META_ID
(
PROTOCOL
); }

352 | 
META_PKTTYPE
 { 
$$
 = 
	`META_ID
(
PKTTYPE
); }

353 | 
META_PKTLEN
 { 
$$
 = 
	`META_ID
(
PKTLEN
); }

354 | 
META_DATALEN
 { 
$$
 = 
	`META_ID
(
DATALEN
); }

355 | 
META_MACLEN
 { 
$$
 = 
	`META_ID
(
MACLEN
); }

356 | 
META_MARK
 { 
$$
 = 
	`META_ID
(
NFMARK
); }

357 | 
META_TCINDEX
 { 
$$
 = 
	`META_ID
(
TCINDEX
); }

358 | 
META_RTCLASSID
 { 
$$
 = 
	`META_ID
(
RTCLASSID
); }

359 | 
META_RTIIF
 { 
$$
 = 
	`META_ID
(
RTIIF
); }

360 | 
META_SK_FAMILY
 { 
$$
 = 
	`META_ID
(
SK_FAMILY
); }

361 | 
META_SK_STATE
 { 
$$
 = 
	`META_ID
(
SK_STATE
); }

362 | 
META_SK_REUSE
 { 
$$
 = 
	`META_ID
(
SK_REUSE
); }

363 | 
META_SK_REFCNT
 { 
$$
 = 
	`META_ID
(
SK_REFCNT
); }

364 | 
META_SK_RCVBUF
 { 
$$
 = 
	`META_ID
(
SK_RCVBUF
); }

365 | 
META_SK_SNDBUF
 { 
$$
 = 
	`META_ID
(
SK_SNDBUF
); }

366 | 
META_SK_SHUTDOWN
 { 
$$
 = 
	`META_ID
(
SK_SHUTDOWN
); }

367 | 
META_SK_PROTO
 { 
$$
 = 
	`META_ID
(
SK_PROTO
); }

368 | 
META_SK_TYPE
 { 
$$
 = 
	`META_ID
(
SK_TYPE
); }

369 | 
META_SK_RMEM_ALLOC
 { 
$$
 = 
	`META_ID
(
SK_RMEM_ALLOC
); }

370 | 
META_SK_WMEM_ALLOC
 { 
$$
 = 
	`META_ID
(
SK_WMEM_ALLOC
); }

371 | 
META_SK_WMEM_QUEUED
 { 
$$
 = 
	`META_ID
(
SK_WMEM_QUEUED
); }

372 | 
META_SK_RCV_QLEN
 { 
$$
 = 
	`META_ID
(
SK_RCV_QLEN
); }

373 | 
META_SK_SND_QLEN
 { 
$$
 = 
	`META_ID
(
SK_SND_QLEN
); }

374 | 
META_SK_ERR_QLEN
 { 
$$
 = 
	`META_ID
(
SK_ERR_QLEN
); }

375 | 
META_SK_FORWARD_ALLOCS
 { 
$$
 = 
	`META_ID
(
SK_FORWARD_ALLOCS
); }

376 | 
META_SK_ALLOCS
 { 
$$
 = 
	`META_ID
(
SK_ALLOCS
); }

377 | 
META_SK_ROUTE_CAPS
 { 
$$
 = 
	`META_ID
(
SK_ROUTE_CAPS
); }

378 | 
META_SK_HASH
 { 
$$
 = 
	`META_ID
(
SK_HASH
); }

379 | 
META_SK_LINGERTIME
 { 
$$
 = 
	`META_ID
(
SK_LINGERTIME
); }

380 | 
META_SK_ACK_BACKLOG
 { 
$$
 = 
	`META_ID
(
SK_ACK_BACKLOG
); }

381 | 
META_SK_MAX_ACK_BACKLOG
 { 
$$
 = 
	`META_ID
(
SK_MAX_ACK_BACKLOG
); }

382 | 
META_SK_PRIO
 { 
$$
 = 
	`META_ID
(
SK_PRIO
); }

383 | 
META_SK_RCVLOWAT
 { 
$$
 = 
	`META_ID
(
SK_RCVLOWAT
); }

384 | 
META_SK_RCVTIMEO
 { 
$$
 = 
	`META_ID
(
SK_RCVTIMEO
); }

385 | 
META_SK_SNDTIMEO
 { 
$$
 = 
	`META_ID
(
SK_SNDTIMEO
); }

386 | 
META_SK_SENDMSG_OFF
 { 
$$
 = 
	`META_ID
(
SK_SENDMSG_OFF
); }

387 | 
META_SK_WRITE_PENDING
 { 
$$
 = 
	`META_ID
(
SK_WRITE_PENDING
); }

388 | 
META_VLAN
 { 
$$
 = 
	`META_ID
(
VLAN_TAG
); }

389 | 
META_RXHASH
 { 
$$
 = 
	`META_ID
(
RXHASH
); }

392 
mëa_v¨_id
:

393 
META_DEVNAME
 { 
$$
 = 
	`META_ID
(
DEV
); }

394 | 
META_SK_BOUND_IF
 { 
$$
 = 
	`META_ID
(
SK_BOUND_IF
); }

400 
∑âîn
:

401 
QUOTED


403 
$$
 = 
$1
;

405 | 
STR


407 
∆_addr
 *
addr
;

409 i‡(
	`∆_addr_∑r£
(
$1
, 
AF_UNSPEC
, &
addr
) == 0) {

410 
$$
.
Àn
 = 
	`∆_addr_gë_Àn
(
addr
);

412 
$$
.
ödex
 = 
	`mö_t
(, $$.
Àn
, 
	`∆_addr_gë_¥efixÀn
(
addr
)/8);

414 i‡(!(
$$
.
d©a
 = 
	`ˇŒoc
(1, $$.
Àn
))) {

415 
	`∆_addr_put
(
addr
);

416 
YYABORT
;

419 
	`mem˝y
(
$$
.
d©a
, 
	`∆_addr_gë_bö¨y_addr
(
addr
), $$.
Àn
);

420 
	`∆_addr_put
(
addr
);

422 i‡(
	`a•rötf
(
îΩ
, "övÆidÖ©ã∫ \"%s\"", 
$1
) == -1)

423 *
îΩ
 = 
NULL
;

424 
YYABORT
;

433 
pkéoc
:

434 
STR


436 
π∆_pkéoc
 *
loc
;

438 i‡(
	`π∆_pkéoc_lookup
(
$1
, &
loc
) < 0) {

439 i‡(
	`a•rötf
(
îΩ
, "PackëÜoˇti⁄ \"%s\"ÇŸ found", 
$1
) == -1)

440 *
îΩ
 = 
NULL
;

441 
YYABORT
;

444 
$$
 = 
loc
;

447 | 
Æign
 
LAYER
 "+" 
NUMBER
 
mask


449 
π∆_pkéoc
 *
loc
;

451 i‡(
$5
 && (!
$1
 || $1 > 
TCF_EM_ALIGN_U32
)) {

452 *
îΩ
 = 
	`°rdup
("mask onlyállowed forálignments u8|u16|u32");

453 
YYABORT
;

456 i‡(!(
loc
 = 
	`π∆_pkéoc_Æloc
())) {

457 *
îΩ
 = 
	`°rdup
("UnableÅoállocateÖacketÜocation object");

458 
YYABORT
;

461 
loc
->
«me
 = 
	`°rdup
("<USER-DEFINED>");

462 
loc
->
Æign
 = 
$1
;

463 
loc
->
œyî
 = 
$2
;

464 
loc
->
off£t
 = 
$4
;

465 
loc
->
mask
 = 
$5
;

467 
$$
 = 
loc
;

471 
Æign
:

473 { 
$$
 = 0; }

474 | 
ALIGN
 "at"

475 { 
$$
 = 
$1
; }

476 | 
NUMBER
 "at"

477 { 
$$
 = 
$1
; }

480 
mask
:

482 { 
$$
 = 0; }

483 | 
KW_MASK
 
NUMBER


484 { 
$$
 = 
$2
; }

487 
shi·
:

489 { 
$$
 = 0; }

490 | 
KW_SHIFT
 
NUMBER


491 { 
$$
 = 
$2
; }

494 
›î™d
:

495 
KW_EQ


496 { 
$$
 = 
TCF_EM_OPND_EQ
; }

497 | 
KW_GT


498 { 
$$
 = 
TCF_EM_OPND_GT
; }

499 | 
KW_LT


500 { 
$$
 = 
TCF_EM_OPND_LT
; }

	@mylibnl/libnl-3.2.25/lib/route/cls/fw.c

21 
	~<√éök-¥iv©e/√éök.h
>

22 
	~<√éök-¥iv©e/tc.h
>

23 
	~<√éök/√éök.h
>

24 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

25 
	~<√éök/rouã/˛assifõr.h
>

26 
	~<√éök/rouã/˛s/fw.h
>

29 
	#FW_ATTR_CLASSID
 0x001

	)

30 
	#FW_ATTR_ACTION
 0x002

	)

31 
	#FW_ATTR_POLICE
 0x004

	)

32 
	#FW_ATTR_INDEV
 0x008

	)

33 
	#FW_ATTR_MASK
 0x010

	)

36 
∆a_pﬁicy
 
	gfw_pﬁicy
[
TCA_FW_MAX
+1] = {

37 [
TCA_FW_CLASSID
] = { .
ty≥
 = 
NLA_U32
 },

38 [
TCA_FW_INDEV
] = { .
ty≥
 = 
NLA_STRING
,

39 .
	gmaxÀn
 = 
IFNAMSIZ
 },

40 [
TCA_FW_MASK
] = { .
ty≥
 = 
NLA_U32
 },

43 
	$fw_msg_∑r£r
(
π∆_tc
 *
tc
, *
d©a
)

45 
∆©å
 *
tb
[
TCA_FW_MAX
 + 1];

46 
π∆_fw
 *
f
 = 
d©a
;

47 
îr
;

49 
îr
 = 
	`tˇ_∑r£
(
tb
, 
TCA_FW_MAX
, 
tc
, 
fw_pﬁicy
);

50 i‡(
îr
 < 0)

51  
îr
;

53 i‡(
tb
[
TCA_FW_CLASSID
]) {

54 
f
->
cf_˛assid
 = 
	`∆a_gë_u32
(
tb
[
TCA_FW_CLASSID
]);

55 
f
->
cf_mask
 |
FW_ATTR_CLASSID
;

58 i‡(
tb
[
TCA_FW_ACT
]) {

59 
f
->
cf_a˘
 = 
	`∆_d©a_Æloc_©å
(
tb
[
TCA_FW_ACT
]);

60 i‡(!
f
->
cf_a˘
)

61  -
NLE_NOMEM
;

62 
f
->
cf_mask
 |
FW_ATTR_ACTION
;

65 i‡(
tb
[
TCA_FW_POLICE
]) {

66 
f
->
cf_pﬁi˚
 = 
	`∆_d©a_Æloc_©å
(
tb
[
TCA_FW_POLICE
]);

67 i‡(!
f
->
cf_pﬁi˚
)

68  -
NLE_NOMEM
;

69 
f
->
cf_mask
 |
FW_ATTR_POLICE
;

72 i‡(
tb
[
TCA_FW_INDEV
]) {

73 
	`∆a_°æ˝y
(
f
->
cf_ödev
, 
tb
[
TCA_FW_INDEV
], 
IFNAMSIZ
);

74 
f
->
cf_mask
 |
FW_ATTR_INDEV
;

77 i‡(
tb
[
TCA_FW_MASK
]) {

78 
f
->
cf_fwmask
 = 
	`∆a_gë_u32
(
tb
[
TCA_FW_MASK
]);

79 
f
->
cf_mask
 |
FW_ATTR_MASK
;

83 
	}
}

85 
	$fw_‰ì_d©a
(
π∆_tc
 *
tc
, *
d©a
)

87 
π∆_fw
 *
f
 = 
d©a
;

89 
	`∆_d©a_‰ì
(
f
->
cf_a˘
);

90 
	`∆_d©a_‰ì
(
f
->
cf_pﬁi˚
);

91 
	}
}

93 
	$fw_˛⁄e
(*
_d°
, *
_§c
)

95 
π∆_fw
 *
d°
 = 
_d°
, *
§c
 = 
_§c
;

97 i‡(
§c
->
cf_a˘
 && !(
d°
->cf_a˘ = 
	`∆_d©a_˛⁄e
(src->cf_act)))

98  -
NLE_NOMEM
;

100 i‡(
§c
->
cf_pﬁi˚
 && !(
d°
->cf_pﬁi˚ = 
	`∆_d©a_˛⁄e
(src->cf_police)))

101  -
NLE_NOMEM
;

104 
	}
}

106 
	$fw_dump_löe
(
π∆_tc
 *
tc
, *
d©a
,

107 
∆_dump_∑øms
 *
p
)

109 
π∆_fw
 *
f
 = 
d©a
;

111 i‡(!
f
)

114 i‡(
f
->
cf_mask
 & 
FW_ATTR_CLASSID
) {

115 
buf
[32];

117 
	`∆_dump
(
p
, "Åarget %s",

118 
	`π∆_tc_h™dÀ2°r
(
f
->
cf_˛assid
, 
buf
, (buf)));

121 i‡(
f
->
cf_mask
 & 
FW_ATTR_MASK
)

122 
	`∆_dump
(
p
, " mask 0x%x", 
f
->
cf_fwmask
);

123 
	}
}

125 
	$fw_dump_dëaûs
(
π∆_tc
 *
tc
, *
d©a
,

126 
∆_dump_∑øms
 *
p
)

128 
π∆_fw
 *
f
 = 
d©a
;

130 i‡(
f
 && f->
cf_mask
 & 
FW_ATTR_INDEV
)

131 
	`∆_dump
(
p
, "ödev %†", 
f
->
cf_ödev
);

132 
	}
}

134 
	$fw_msg_fûl
(
π∆_tc
 *
tc
, *
d©a
, 
∆_msg
 *
msg
)

136 
π∆_fw
 *
f
 = 
d©a
;

138 i‡(!
f
)

141 i‡(
f
->
cf_mask
 & 
FW_ATTR_CLASSID
)

142 
	`NLA_PUT_U32
(
msg
, 
TCA_FW_CLASSID
, 
f
->
cf_˛assid
);

144 i‡(
f
->
cf_mask
 & 
FW_ATTR_ACTION
)

145 
	`NLA_PUT_DATA
(
msg
, 
TCA_FW_ACT
, 
f
->
cf_a˘
);

147 i‡(
f
->
cf_mask
 & 
FW_ATTR_POLICE
)

148 
	`NLA_PUT_DATA
(
msg
, 
TCA_FW_POLICE
, 
f
->
cf_pﬁi˚
);

150 i‡(
f
->
cf_mask
 & 
FW_ATTR_INDEV
)

151 
	`NLA_PUT_STRING
(
msg
, 
TCA_FW_INDEV
, 
f
->
cf_ödev
);

153 i‡(
f
->
cf_mask
 & 
FW_ATTR_MASK
)

154 
	`NLA_PUT_U32
(
msg
, 
TCA_FW_MASK
, 
f
->
cf_fwmask
);

158 
∆a_put_Áûuª
:

159  -
NLE_MSGSIZE
;

160 
	}
}

167 
	$π∆_fw_£t_˛assid
(
π∆_˛s
 *
˛s
, 
uöt32_t
 
˛assid
)

169 
π∆_fw
 *
f
;

171 i‡(!(
f
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

172  -
NLE_NOMEM
;

174 
f
->
cf_˛assid
 = 
˛assid
;

175 
f
->
cf_mask
 |
FW_ATTR_CLASSID
;

178 
	}
}

180 
	$π∆_fw_£t_mask
(
π∆_˛s
 *
˛s
, 
uöt32_t
 
mask
)

182 
π∆_fw
 *
f
;

184 i‡(!(
f
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

185  -
NLE_NOMEM
;

187 
f
->
cf_fwmask
 = 
mask
;

188 
f
->
cf_mask
 |
FW_ATTR_MASK
;

191 
	}
}

195 
π∆_tc_›s
 
	gfw_›s
 = {

196 .
to_köd
 = "fw",

197 .
	gto_ty≥
 = 
RTNL_TC_TYPE_CLS
,

198 .
	gto_size
 = (
π∆_fw
),

199 .
	gto_msg_∑r£r
 = 
fw_msg_∑r£r
,

200 .
	gto_msg_fûl
 = 
fw_msg_fûl
,

201 .
	gto_‰ì_d©a
 = 
fw_‰ì_d©a
,

202 .
	gto_˛⁄e
 = 
fw_˛⁄e
,

203 .
	gto_dump
 = {

204 [
NL_DUMP_LINE
] = 
fw_dump_löe
,

205 [
NL_DUMP_DETAILS
] = 
fw_dump_dëaûs
,

209 
__öô
 
	$fw_öô
()

211 
	`π∆_tc_ªgi°î
(&
fw_›s
);

212 
	}
}

214 
__exô
 
	$fw_exô
()

216 
	`π∆_tc_uƒegi°î
(&
fw_›s
);

217 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/cls/police.c

12 
	~<√éök-¥iv©e/√éök.h
>

13 
	~<√éök-¥iv©e/tc.h
>

14 
	~<√éök/√éök.h
>

15 
	~<√éök/utûs.h
>

16 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

17 
	~<√éök/rouã/˛assifõr.h
>

18 
	~<√éök/rouã/˛s/pﬁi˚.h
>

25 c⁄° 
å™s_tbl
 
	gpﬁi˚_ty≥s
[] = {

26 
__ADD
(
TC_POLICE_UNSPEC
,
un•ec
)

27 
__ADD
(
TC_POLICE_OK
,
ok
)

28 
__ADD
(
TC_POLICE_RECLASSIFY
,
ª˛assify
)

29 
__ADD
(
TC_POLICE_SHOT
,
shŸ
)

30 #ifde‡
TC_POLICE_PIPE


31 
__ADD
(
TC_POLICE_PIPE
,
pùe
)

46 * 
	$∆_pﬁi˚2°r
(
ty≥
, *
buf
, 
size_t
 
Àn
)

48  
	`__ty≥2°r
(
ty≥
, 
buf
, 
Àn
, 
pﬁi˚_ty≥s
,

49 
	`ARRAY_SIZE
(
pﬁi˚_ty≥s
));

50 
	}
}

61 
	$∆_°r2pﬁi˚
(c⁄° *
«me
)

63  
	`__°r2ty≥
(
«me
, 
pﬁi˚_ty≥s
, 
	`ARRAY_SIZE
(police_types));

64 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/cls/u32.c

21 
	~<√éök-¥iv©e/√éök.h
>

22 
	~<√éök-¥iv©e/tc.h
>

23 
	~<√éök/√éök.h
>

24 
	~<√éök/©å.h
>

25 
	~<√éök/utûs.h
>

26 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

27 
	~<√éök/rouã/˛assifõr.h
>

28 
	~<√éök/rouã/˛s/u32.h
>

29 
	~<√éök/rouã/a˘i⁄.h
>

32 
	#U32_ATTR_DIVISOR
 0x001

	)

33 
	#U32_ATTR_HASH
 0x002

	)

34 
	#U32_ATTR_CLASSID
 0x004

	)

35 
	#U32_ATTR_LINK
 0x008

	)

36 
	#U32_ATTR_PCNT
 0x010

	)

37 
	#U32_ATTR_SELECTOR
 0x020

	)

38 
	#U32_ATTR_ACTION
 0x040

	)

39 
	#U32_ATTR_POLICE
 0x080

	)

40 
	#U32_ATTR_INDEV
 0x100

	)

43 
ölöe
 
tc_u32_£l
 *
	$u32_£À˘‹
(
π∆_u32
 *
u
)

45  (
tc_u32_£l
 *Ë
u
->
cu_£À˘‹
->
d_d©a
;

46 
	}
}

48 
ölöe
 
tc_u32_£l
 *
	$u32_£À˘‹_Æloc
(
π∆_u32
 *
u
)

50 i‡(!
u
->
cu_£À˘‹
)

51 
u
->
cu_£À˘‹
 = 
	`∆_d©a_Æloc
(
NULL
, (
tc_u32_£l
));

53  
	`u32_£À˘‹
(
u
);

54 
	}
}

56 
∆a_pﬁicy
 
	gu32_pﬁicy
[
TCA_U32_MAX
+1] = {

57 [
TCA_U32_DIVISOR
] = { .
ty≥
 = 
NLA_U32
 },

58 [
TCA_U32_HASH
] = { .
ty≥
 = 
NLA_U32
 },

59 [
TCA_U32_CLASSID
] = { .
ty≥
 = 
NLA_U32
 },

60 [
TCA_U32_LINK
] = { .
ty≥
 = 
NLA_U32
 },

61 [
TCA_U32_INDEV
] = { .
ty≥
 = 
NLA_STRING
,

62 .
	gmaxÀn
 = 
IFNAMSIZ
 },

63 [
TCA_U32_SEL
] = { .
möÀn
 = (
tc_u32_£l
) },

64 [
TCA_U32_PCNT
] = { .
möÀn
 = (
tc_u32_p˙t
) },

67 
	$u32_msg_∑r£r
(
π∆_tc
 *
tc
, *
d©a
)

69 
π∆_u32
 *
u
 = 
d©a
;

70 
∆©å
 *
tb
[
TCA_U32_MAX
 + 1];

71 
îr
;

73 
îr
 = 
	`tˇ_∑r£
(
tb
, 
TCA_U32_MAX
, 
tc
, 
u32_pﬁicy
);

74 i‡(
îr
 < 0)

75  
îr
;

77 i‡(
tb
[
TCA_U32_DIVISOR
]) {

78 
u
->
cu_divis‹
 = 
	`∆a_gë_u32
(
tb
[
TCA_U32_DIVISOR
]);

79 
u
->
cu_mask
 |
U32_ATTR_DIVISOR
;

82 i‡(
tb
[
TCA_U32_SEL
]) {

83 
u
->
cu_£À˘‹
 = 
	`∆_d©a_Æloc_©å
(
tb
[
TCA_U32_SEL
]);

84 i‡(!
u
->
cu_£À˘‹
)

85 
îrout_nomem
;

86 
u
->
cu_mask
 |
U32_ATTR_SELECTOR
;

89 i‡(
tb
[
TCA_U32_HASH
]) {

90 
u
->
cu_hash
 = 
	`∆a_gë_u32
(
tb
[
TCA_U32_HASH
]);

91 
u
->
cu_mask
 |
U32_ATTR_HASH
;

94 i‡(
tb
[
TCA_U32_CLASSID
]) {

95 
u
->
cu_˛assid
 = 
	`∆a_gë_u32
(
tb
[
TCA_U32_CLASSID
]);

96 
u
->
cu_mask
 |
U32_ATTR_CLASSID
;

99 i‡(
tb
[
TCA_U32_LINK
]) {

100 
u
->
cu_lök
 = 
	`∆a_gë_u32
(
tb
[
TCA_U32_LINK
]);

101 
u
->
cu_mask
 |
U32_ATTR_LINK
;

104 i‡(
tb
[
TCA_U32_ACT
]) {

105 
u
->
cu_mask
 |
U32_ATTR_ACTION
;

106 
îr
 = 
	`π∆_a˘_∑r£
(&
u
->
cu_a˘
, 
tb
[
TCA_U32_ACT
]);

107 i‡(
îr
)

108  
îr
;

111 i‡(
tb
[
TCA_U32_POLICE
]) {

112 
u
->
cu_pﬁi˚
 = 
	`∆_d©a_Æloc_©å
(
tb
[
TCA_U32_POLICE
]);

113 i‡(!
u
->
cu_pﬁi˚
)

114 
îrout_nomem
;

115 
u
->
cu_mask
 |
U32_ATTR_POLICE
;

118 i‡(
tb
[
TCA_U32_PCNT
]) {

119 
tc_u32_£l
 *
£l
;

120 
size_t
 
p˙t_size
;

122 i‡(!
tb
[
TCA_U32_SEL
]) {

123 
îr
 = -
NLE_MISSING_ATTR
;

124 
îrout
;

127 
£l
 = 
u
->
cu_£À˘‹
->
d_d©a
;

128 
p˙t_size
 = (
tc_u32_p˙t
) +

129 (
£l
->
nkeys
 * (
uöt64_t
));

130 i‡(
	`∆a_Àn
(
tb
[
TCA_U32_PCNT
]Ë< 
p˙t_size
) {

131 
îr
 = -
NLE_INVAL
;

132 
îrout
;

135 
u
->
cu_p˙t
 = 
	`∆_d©a_Æloc_©å
(
tb
[
TCA_U32_PCNT
]);

136 i‡(!
u
->
cu_p˙t
)

137 
îrout_nomem
;

138 
u
->
cu_mask
 |
U32_ATTR_PCNT
;

141 i‡(
tb
[
TCA_U32_INDEV
]) {

142 
	`∆a_°æ˝y
(
u
->
cu_ödev
, 
tb
[
TCA_U32_INDEV
], 
IFNAMSIZ
);

143 
u
->
cu_mask
 |
U32_ATTR_INDEV
;

148 
îrout_nomem
:

149 
îr
 = -
NLE_NOMEM
;

150 
îrout
:

151  
îr
;

152 
	}
}

154 
	$u32_‰ì_d©a
(
π∆_tc
 *
tc
, *
d©a
)

156 
π∆_u32
 *
u
 = 
d©a
;

158 i‡(
u
->
cu_a˘
)

159 
	`π∆_a˘_put_Æl
(&
u
->
cu_a˘
);

160 
	`∆_d©a_‰ì
(
u
->
cu_£À˘‹
);

161 
	`∆_d©a_‰ì
(
u
->
cu_pﬁi˚
);

162 
	`∆_d©a_‰ì
(
u
->
cu_p˙t
);

163 
	}
}

165 
	$u32_˛⁄e
(*
_d°
, *
_§c
)

167 
π∆_u32
 *
d°
 = 
_d°
, *
§c
 = 
_§c
;

169 i‡(
§c
->
cu_£À˘‹
 &&

170 !(
d°
->
cu_£À˘‹
 = 
	`∆_d©a_˛⁄e
(
§c
->cu_selector)))

171  -
NLE_NOMEM
;

173 i‡(
§c
->
cu_a˘
) {

174 i‡(!(
d°
->
cu_a˘
 = 
	`π∆_a˘_Æloc
()))

175  -
NLE_NOMEM
;

177 
	`mem˝y
(
d°
->
cu_a˘
, 
§c
->cu_a˘, (
π∆_a˘
));

180 i‡(
§c
->
cu_pﬁi˚
 && !(
d°
->cu_pﬁi˚ = 
	`∆_d©a_˛⁄e
(src->cu_police)))

181  -
NLE_NOMEM
;

183 i‡(
§c
->
cu_p˙t
 && !(
d°
->cu_p˙à
	`∆_d©a_˛⁄e
(src->cu_pcnt)))

184  -
NLE_NOMEM
;

187 
	}
}

189 
	$u32_dump_löe
(
π∆_tc
 *
tc
, *
d©a
,

190 
∆_dump_∑øms
 *
p
)

192 
π∆_u32
 *
u
 = 
d©a
;

193 
buf
[32];

195 i‡(!
u
)

198 i‡(
u
->
cu_mask
 & 
U32_ATTR_DIVISOR
)

199 
	`∆_dump
(
p
, " divis‹ %u", 
u
->
cu_divis‹
);

200 i‡(
u
->
cu_mask
 & 
U32_ATTR_CLASSID
)

201 
	`∆_dump
(
p
, "Åarget %s",

202 
	`π∆_tc_h™dÀ2°r
(
u
->
cu_˛assid
, 
buf
, (buf)));

203 
	}
}

205 
	$¥öt_£À˘‹
(
∆_dump_∑øms
 *
p
, 
tc_u32_£l
 *
£l
,

206 
π∆_u32
 *
u
)

208 
i
;

209 
tc_u32_key
 *
key
;

211 i‡(
£l
->
hmask
 || sñ->
hoff
) {

216 
	`∆_dump
(
p
, " hasháà%u & 0x%x", 
£l
->
hoff
, sñ->
hmask
);

219 i‡(
£l
->
Êags
 & (
TC_U32_OFFSET
 | 
TC_U32_VAROFFSET
)) {

220 
	`∆_dump
(
p
, " off£à© %u", 
£l
->
off
);

222 i‡(
£l
->
Êags
 & 
TC_U32_VAROFFSET
)

223 
	`∆_dump
(
p
, " variable (at %u & 0x%x) >> %u",

224 
£l
->
offoff
, 
	`¡ohs
(£l->
offmask
), sñ->
offshi·
);

227 i‡(
£l
->
Êags
) {

228 
Êags
 = 
£l
->flags;

229 
	`∆_dump
(
p
, " <");

231 
	#PRINT_FLAG
(
f
Ëi‡(
Êags
 & 
TC_U32_
##f) { \

232 
Êags
 &~
TC_U32_
##
f
; 
	`∆_dump
(
p
, #‡"%s", fœg†? "," : ""); }

	)

234 
	`PRINT_FLAG
(
TERMINAL
);

235 
	`PRINT_FLAG
(
OFFSET
);

236 
	`PRINT_FLAG
(
VAROFFSET
);

237 
	`PRINT_FLAG
(
EAT
);

238 #unde‡
PRINT_FLAG


240 
	`∆_dump
(
p
, ">");

244 
i
 = 0; i < 
£l
->
nkeys
; i++) {

245 
key
 = (
tc_u32_key
 *Ë((*Ë
£l
 + (*£l)Ë+ 
i
;

247 
	`∆_dump
(
p
, "\n");

248 
	`∆_dump_löe
(
p
, " match keyát %s%u ",

249 
key
->
offmask
 ? "√xthdr+" : "", key->
off
);

251 i‡(
key
->
offmask
)

252 
	`∆_dump
(
p
, "[0x%u] ", 
key
->
offmask
);

254 
	`∆_dump
(
p
, "& 0x%08x =0x%08x", 
	`¡ohl
(
key
->
mask
),Çtohl(key->
vÆ
));

256 i‡(
p
->
dp_ty≥
 =
NL_DUMP_STATS
 &&

257 (
u
->
cu_mask
 & 
U32_ATTR_PCNT
)) {

258 
tc_u32_p˙t
 *
p˙t
 = 
u
->
cu_p˙t
->
d_d©a
;

259 
	`∆_dump
(
p
, " suc˚ssfu»%" 
PRIu64
, 
p˙t
->
k˙ts
[
i
]);

262 
	}
}

264 
	$u32_dump_dëaûs
(
π∆_tc
 *
tc
, *
d©a
,

265 
∆_dump_∑øms
 *
p
)

267 
π∆_u32
 *
u
 = 
d©a
;

268 
tc_u32_£l
 *
s
;

270 i‡(!
u
)

273 i‡(!(
u
->
cu_mask
 & 
U32_ATTR_SELECTOR
)) {

274 
	`∆_dump
(
p
, "no-selector\n");

278 
s
 = 
u
->
cu_£À˘‹
->
d_d©a
;

280 
	`∆_dump
(
p
, "nkey†%u ", 
s
->
nkeys
);

282 i‡(
u
->
cu_mask
 & 
U32_ATTR_HASH
)

283 
	`∆_dump
(
p
, "ht key 0x%x hash 0x%u",

284 
	`TC_U32_USERHTID
(
u
->
cu_hash
), 
	`TC_U32_HASH
(u->cu_hash));

286 i‡(
u
->
cu_mask
 & 
U32_ATTR_LINK
)

287 
	`∆_dump
(
p
, "lök %u ", 
u
->
cu_lök
);

289 i‡(
u
->
cu_mask
 & 
U32_ATTR_INDEV
)

290 
	`∆_dump
(
p
, "ödev %†", 
u
->
cu_ödev
);

292 
	`¥öt_£À˘‹
(
p
, 
s
, 
u
);

293 
	`∆_dump
(
p
, "\n");

294 
	}
}

296 
	$u32_dump_°©s
(
π∆_tc
 *
tc
, *
d©a
,

297 
∆_dump_∑øms
 *
p
)

299 
π∆_u32
 *
u
 = 
d©a
;

301 i‡(!
u
)

304 i‡(
u
->
cu_mask
 & 
U32_ATTR_PCNT
) {

305 
tc_u32_p˙t
 *
pc
 = 
u
->
cu_p˙t
->
d_d©a
;

306 
	`∆_dump
(
p
, "\n");

307 
	`∆_dump_löe
(
p
, " hô %8" 
PRIu64
 " count %8" PRIu64 "\n",

308 
pc
->
rhô
,Öc->
r˙t
);

310 
	}
}

312 
	$u32_msg_fûl
(
π∆_tc
 *
tc
, *
d©a
, 
∆_msg
 *
msg
)

314 
π∆_u32
 *
u
 = 
d©a
;

316 i‡(!
u
)

319 i‡(
u
->
cu_mask
 & 
U32_ATTR_DIVISOR
)

320 
	`NLA_PUT_U32
(
msg
, 
TCA_U32_DIVISOR
, 
u
->
cu_divis‹
);

322 i‡(
u
->
cu_mask
 & 
U32_ATTR_HASH
)

323 
	`NLA_PUT_U32
(
msg
, 
TCA_U32_HASH
, 
u
->
cu_hash
);

325 i‡(
u
->
cu_mask
 & 
U32_ATTR_CLASSID
)

326 
	`NLA_PUT_U32
(
msg
, 
TCA_U32_CLASSID
, 
u
->
cu_˛assid
);

328 i‡(
u
->
cu_mask
 & 
U32_ATTR_LINK
)

329 
	`NLA_PUT_U32
(
msg
, 
TCA_U32_LINK
, 
u
->
cu_lök
);

331 i‡(
u
->
cu_mask
 & 
U32_ATTR_SELECTOR
)

332 
	`NLA_PUT_DATA
(
msg
, 
TCA_U32_SEL
, 
u
->
cu_£À˘‹
);

334 i‡(
u
->
cu_mask
 & 
U32_ATTR_ACTION
) {

335 
îr
;

337 
îr
 = 
	`π∆_a˘_fûl
(
msg
, 
TCA_U32_ACT
, 
u
->
cu_a˘
);

338 i‡(
îr
)

339  
îr
;

342 i‡(
u
->
cu_mask
 & 
U32_ATTR_POLICE
)

343 
	`NLA_PUT_DATA
(
msg
, 
TCA_U32_POLICE
, 
u
->
cu_pﬁi˚
);

345 i‡(
u
->
cu_mask
 & 
U32_ATTR_INDEV
)

346 
	`NLA_PUT_STRING
(
msg
, 
TCA_U32_INDEV
, 
u
->
cu_ödev
);

350 
∆a_put_Áûuª
:

351  -
NLE_NOMEM
;

352 
	}
}

359 
	$π∆_u32_£t_h™dÀ
(
π∆_˛s
 *
˛s
, 
htid
, 
hash
,

360 
nodeid
)

362 
uöt32_t
 
h™dÀ
 = (
htid
 << 20Ë| (
hash
 << 12Ë| 
nodeid
;

364 
	`π∆_tc_£t_h™dÀ
((
π∆_tc
 *Ë
˛s
, 
h™dÀ
 );

365 
	}
}

367 
	$π∆_u32_£t_˛assid
(
π∆_˛s
 *
˛s
, 
uöt32_t
 
˛assid
)

369 
π∆_u32
 *
u
;

371 i‡(!(
u
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

372  -
NLE_NOMEM
;

374 
u
->
cu_˛assid
 = 
˛assid
;

375 
u
->
cu_mask
 |
U32_ATTR_CLASSID
;

378 
	}
}

380 
	$π∆_u32_£t_divis‹
(
π∆_˛s
 *
˛s
, 
uöt32_t
 
divis‹
)

382 
π∆_u32
 *
u
;

384 i‡(!(
u
 = (
π∆_u32
 *Ë
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

385  -
NLE_NOMEM
;

387 
u
->
cu_divis‹
 = 
divis‹
;

388 
u
->
cu_mask
 |
U32_ATTR_DIVISOR
;

390 
	}
}

392 
	$π∆_u32_£t_lök
(
π∆_˛s
 *
˛s
, 
uöt32_t
 
lök
)

394 
π∆_u32
 *
u
;

396 i‡(!(
u
 = (
π∆_u32
 *Ë
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

397  -
NLE_NOMEM
;

399 
u
->
cu_lök
 = 
lök
;

400 
u
->
cu_mask
 |
U32_ATTR_LINK
;

402 
	}
}

404 
	$π∆_u32_£t_hashèbÀ
(
π∆_˛s
 *
˛s
, 
uöt32_t
 
ht
)

406 
π∆_u32
 *
u
;

408 i‡(!(
u
 = (
π∆_u32
 *Ë
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

409  -
NLE_NOMEM
;

411 
u
->
cu_hash
 = 
ht
;

412 
u
->
cu_mask
 |
U32_ATTR_HASH
;

414 
	}
}

416 
	$π∆_u32_£t_hashmask
(
π∆_˛s
 *
˛s
, 
uöt32_t
 
hashmask
, uöt32_à
off£t
)

418 
π∆_u32
 *
u
;

419 
tc_u32_£l
 *
£l
;

420 
îr
;

422 
hashmask
 = 
	`ht⁄l
(hashmask);

424 i‡(!(
u
 = (
π∆_u32
 *Ë
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

425  -
NLE_NOMEM
;

427 
£l
 = 
	`u32_£À˘‹_Æloc
(
u
);

428 i‡(!
£l
)

429  -
NLE_NOMEM
;

431 
îr
 = 
	`∆_d©a_≠≥nd
(
u
->
cu_£À˘‹
, 
NULL
, (
tc_u32_key
));

432 if(
îr
 < 0)

433  
îr
;

435 
£l
 = 
	`u32_£À˘‹
(
u
);

437 
£l
->
hmask
 = 
hashmask
;

438 
£l
->
hoff
 = 
off£t
;

440 
	}
}

442 
	$π∆_u32_£t_˛s_ãrmöÆ
(
π∆_˛s
 *
˛s
)

444 
π∆_u32
 *
u
;

445 
tc_u32_£l
 *
£l
;

446 
îr
;

448 i‡(!(
u
 = (
π∆_u32
 *Ë
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

449  -
NLE_NOMEM
;

451 
£l
 = 
	`u32_£À˘‹_Æloc
(
u
);

452 i‡(!
£l
)

453  -
NLE_NOMEM
;

455 
îr
 = 
	`∆_d©a_≠≥nd
(
u
->
cu_£À˘‹
, 
NULL
, (
tc_u32_key
));

456 if(
îr
 < 0)

457  
îr
;

459 
£l
 = 
	`u32_£À˘‹
(
u
);

461 
£l
->
Êags
 |
TC_U32_TERMINAL
;

463 
	}
}

465 
	$π∆_u32_add_a˘i⁄
(
π∆_˛s
 *
˛s
, 
π∆_a˘
 *
a˘
)

467 
π∆_u32
 *
u
;

469 i‡(!
a˘
)

472 i‡(!(
u
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

473  -
NLE_NOMEM
;

475 
u
->
cu_mask
 |
U32_ATTR_ACTION
;

477 
	`π∆_a˘_gë
(
a˘
);

478  
	`π∆_a˘_≠≥nd
(&
u
->
cu_a˘
, 
a˘
);

479 
	}
}

481 
	$π∆_u32_dñ_a˘i⁄
(
π∆_˛s
 *
˛s
, 
π∆_a˘
 *
a˘
)

483 
π∆_u32
 *
u
;

484 
ªt
;

486 i‡(!
a˘
)

489 i‡(!(
u
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

490  -
NLE_NOMEM
;

492 i‡(!(
u
->
cu_mask
 & 
U32_ATTR_ACTION
))

493  -
NLE_INVAL
;

495 
ªt
 = 
	`π∆_a˘_ªmove
(&
u
->
cu_a˘
, 
a˘
);

496 i‡(
ªt
)

497  
ªt
;

499 i‡(!
u
->
cu_a˘
)

500 
u
->
cu_mask
 &~
U32_ATTR_ACTION
;

501 
	`π∆_a˘_put
(
a˘
);

503 
	}
}

511 
	$π∆_u32_£t_Êags
(
π∆_˛s
 *
˛s
, 
Êags
)

513 
tc_u32_£l
 *
£l
;

514 
π∆_u32
 *
u
;

516 i‡(!(
u
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

517  -
NLE_NOMEM
;

519 
£l
 = 
	`u32_£À˘‹_Æloc
(
u
);

520 i‡(!
£l
)

521  -
NLE_NOMEM
;

523 
£l
->
Êags
 |= flags;

524 
u
->
cu_mask
 |
U32_ATTR_SELECTOR
;

527 
	}
}

543 
	$π∆_u32_add_key
(
π∆_˛s
 *
˛s
, 
uöt32_t
 
vÆ
, uöt32_à
mask
,

544 
off
, 
offmask
)

546 
tc_u32_£l
 *
£l
;

547 
π∆_u32
 *
u
;

548 
îr
;

550 i‡(!(
u
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

551  -
NLE_NOMEM
;

553 
£l
 = 
	`u32_£À˘‹_Æloc
(
u
);

554 i‡(!
£l
)

555  -
NLE_NOMEM
;

557 
îr
 = 
	`∆_d©a_≠≥nd
(
u
->
cu_£À˘‹
, 
NULL
, (
tc_u32_key
));

558 i‡(
îr
 < 0)

559  
îr
;

562 
£l
 = 
	`u32_£À˘‹
(
u
);

564 
£l
->
keys
[£l->
nkeys
].
mask
 = mask;

565 
£l
->
keys
[£l->
nkeys
].
vÆ
 = vÆ & 
mask
;

566 
£l
->
keys
[£l->
nkeys
].
off
 = off;

567 
£l
->
keys
[£l->
nkeys
].
offmask
 = offmask;

568 
£l
->
nkeys
++;

569 
u
->
cu_mask
 |
U32_ATTR_SELECTOR
;

572 
	}
}

585 
	$π∆_u32_gë_key
(
π∆_˛s
 *
˛s
, 
uöt8_t
 
ödex
,

586 
uöt32_t
 *
vÆ
, uöt32_à*
mask
, *
off
, *
offmask
)

588 
tc_u32_£l
 *
£l
;

589 
π∆_u32
 *
u
;

591 i‡(!(
u
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
˛s
))))

592  -
NLE_NOMEM
;

594 i‡(!(
u
->
cu_mask
 & 
U32_ATTR_SELECTOR
))

595  -
NLE_INVAL
;

598 
£l
 = 
	`u32_£À˘‹
(
u
);

599 i‡(
ödex
 >
£l
->
nkeys
)

600  -
NLE_RANGE
;

602 *
mask
 = 
£l
->
keys
[
ödex
].mask;

603 *
vÆ
 = 
£l
->
keys
[
ödex
].val;

604 *
off
 = 
£l
->
keys
[
ödex
].off;

605 *
offmask
 = 
£l
->
keys
[
ödex
].offmask;

607 
	}
}

610 
	$π∆_u32_add_key_uöt8
(
π∆_˛s
 *
˛s
, 
uöt8_t
 
vÆ
, uöt8_à
mask
,

611 
off
, 
offmask
)

613 
shi·
 = 24 - 8 * (
off
 & 3);

615  
	`π∆_u32_add_key
(
˛s
, 
	`ht⁄l
((
uöt32_t
)
vÆ
 << 
shi·
),

616 
	`ht⁄l
((
uöt32_t
)
mask
 << 
shi·
),

617 
off
 & ~3, 
offmask
);

618 
	}
}

629 
	$π∆_u32_add_key_uöt16
(
π∆_˛s
 *
˛s
, 
uöt16_t
 
vÆ
, uöt16_à
mask
,

630 
off
, 
offmask
)

632 
shi·
 = ((
off
 & 3) == 0 ? 16 : 0);

633 i‡(
off
 % 2)

634  -
NLE_INVAL
;

636  
	`π∆_u32_add_key
(
˛s
, 
	`ht⁄l
((
uöt32_t
)
vÆ
 << 
shi·
),

637 
	`ht⁄l
((
uöt32_t
)
mask
 << 
shi·
),

638 
off
 & ~3, 
offmask
);

639 
	}
}

650 
	$π∆_u32_add_key_uöt32
(
π∆_˛s
 *
˛s
, 
uöt32_t
 
vÆ
, uöt32_à
mask
,

651 
off
, 
offmask
)

653  
	`π∆_u32_add_key
(
˛s
, 
	`ht⁄l
(
vÆ
), ht⁄l(
mask
),

654 
off
 & ~3, 
offmask
);

655 
	}
}

657 
	$π∆_u32_add_key_ö_addr
(
π∆_˛s
 *
˛s
, c⁄° 
ö_addr
 *
addr
,

658 
uöt8_t
 
bômask
, 
off
, 
offmask
)

660 
uöt32_t
 
mask
 = 0xFFFFFFFF << (32 - 
bômask
);

661  
	`π∆_u32_add_key
(
˛s
, 
addr
->
s_addr
, 
	`ht⁄l
(
mask
), 
off
, 
offmask
);

662 
	}
}

664 
	$π∆_u32_add_key_ö6_addr
(
π∆_˛s
 *
˛s
, c⁄° 
ö6_addr
 *
addr
,

665 
uöt8_t
 
bômask
, 
off
, 
offmask
)

667 
i
, 
îr
;

669 
i
 = 1; i <= 4; i++) {

670 i‡(32 * 
i
 - 
bômask
 <= 0) {

671 i‡((
îr
 = 
	`π∆_u32_add_key
(
˛s
, 
addr
->
s6_addr32
[
i
-1],

672 0xFFFFFFFF, 
off
+4*(
i
-1), 
offmask
)) < 0)

673  
îr
;

675 i‡(32 * 
i
 - 
bômask
 < 32) {

676 
uöt32_t
 
mask
 = 0xFFFFFFFF << (32 * 
i
 - 
bômask
);

677 i‡((
îr
 = 
	`π∆_u32_add_key
(
˛s
, 
addr
->
s6_addr32
[
i
-1],

678 
	`ht⁄l
(
mask
), 
off
+4*(
i
-1), 
offmask
)) < 0)

679  
îr
;

685 
	}
}

689 
π∆_tc_›s
 
	gu32_›s
 = {

690 .
to_köd
 = "u32",

691 .
	gto_ty≥
 = 
RTNL_TC_TYPE_CLS
,

692 .
	gto_size
 = (
π∆_u32
),

693 .
	gto_msg_∑r£r
 = 
u32_msg_∑r£r
,

694 .
	gto_‰ì_d©a
 = 
u32_‰ì_d©a
,

695 .
	gto_˛⁄e
 = 
u32_˛⁄e
,

696 .
	gto_msg_fûl
 = 
u32_msg_fûl
,

697 .
	gto_dump
 = {

698 [
NL_DUMP_LINE
] = 
u32_dump_löe
,

699 [
NL_DUMP_DETAILS
] = 
u32_dump_dëaûs
,

700 [
NL_DUMP_STATS
] = 
u32_dump_°©s
,

704 
__öô
 
	$u32_öô
()

706 
	`π∆_tc_ªgi°î
(&
u32_›s
);

707 
	}
}

709 
__exô
 
	$u32_exô
()

711 
	`π∆_tc_uƒegi°î
(&
u32_›s
);

712 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/link.c

21 
	~<√éök-¥iv©e/√éök.h
>

22 
	~<√éök/√éök.h
>

23 
	~<√éök/©å.h
>

24 
	~<√éök/utûs.h
>

25 
	~<√éök/obje˘.h
>

26 
	~<√éök/hashèbÀ.h
>

27 
	~<√éök/d©a.h
>

28 
	~<√éök/rouã/π∆.h
>

29 
	~<√éök/rouã/lök.h
>

30 
	~<√éök-¥iv©e/rouã/lök/≠i.h
>

33 
	#LINK_ATTR_MTU
 (1 << 0)

	)

34 
	#LINK_ATTR_LINK
 (1 << 1)

	)

35 
	#LINK_ATTR_TXQLEN
 (1 << 2)

	)

36 
	#LINK_ATTR_WEIGHT
 (1 << 3)

	)

37 
	#LINK_ATTR_MASTER
 (1 << 4)

	)

38 
	#LINK_ATTR_QDISC
 (1 << 5)

	)

39 
	#LINK_ATTR_MAP
 (1 << 6)

	)

40 
	#LINK_ATTR_ADDR
 (1 << 7)

	)

41 
	#LINK_ATTR_BRD
 (1 << 8)

	)

42 
	#LINK_ATTR_FLAGS
 (1 << 9)

	)

43 
	#LINK_ATTR_IFNAME
 (1 << 10)

	)

44 
	#LINK_ATTR_IFINDEX
 (1 << 11)

	)

45 
	#LINK_ATTR_FAMILY
 (1 << 12)

	)

46 
	#LINK_ATTR_ARPTYPE
 (1 << 13)

	)

47 
	#LINK_ATTR_STATS
 (1 << 14)

	)

48 
	#LINK_ATTR_CHANGE
 (1 << 15)

	)

49 
	#LINK_ATTR_OPERSTATE
 (1 << 16)

	)

50 
	#LINK_ATTR_LINKMODE
 (1 << 17)

	)

51 
	#LINK_ATTR_LINKINFO
 (1 << 18)

	)

52 
	#LINK_ATTR_IFALIAS
 (1 << 19)

	)

53 
	#LINK_ATTR_NUM_VF
 (1 << 20)

	)

54 
	#LINK_ATTR_PROMISCUITY
 (1 << 21)

	)

55 
	#LINK_ATTR_NUM_TX_QUEUES
 (1 << 22)

	)

56 
	#LINK_ATTR_NUM_RX_QUEUES
 (1 << 23)

	)

57 
	#LINK_ATTR_GROUP
 (1 << 24)

	)

58 
	#LINK_ATTR_CARRIER
 (1 << 25)

	)

59 
	#LINK_ATTR_PROTINFO
 (1 << 26)

	)

60 
	#LINK_ATTR_AF_SPEC
 (1 << 27)

	)

61 
	#LINK_ATTR_PHYS_PORT_ID
 (1 << 28)

	)

62 
	#LINK_ATTR_NS_FD
 (1 << 29)

	)

63 
	#LINK_ATTR_NS_PID
 (1 << 30)

	)

65 
∆_ˇche_›s
 
	gπ∆_lök_›s
;

66 
∆_obje˘_›s
 
	glök_obj_›s
;

69 
π∆_lök_af_›s
 *
	$af_lookup_™d_Æloc
(
π∆_lök
 *
lök
,

70 
Ámûy
)

72 
π∆_lök_af_›s
 *
af_›s
;

73 *
d©a
;

75 
af_›s
 = 
	`π∆_lök_af_›s_lookup
(
Ámûy
);

76 i‡(!
af_›s
)

77  
NULL
;

79 i‡(!(
d©a
 = 
	`π∆_lök_af_Æloc
(
lök
, 
af_›s
))) {

80 
	`π∆_lök_af_›s_put
(
af_›s
);

81  
NULL
;

84  
af_›s
;

85 
	}
}

87 
	$af_‰ì
(
π∆_lök
 *
lök
, 
π∆_lök_af_›s
 *
›s
,

88 *
d©a
, *
¨g
)

90 i‡(
›s
->
ao_‰ì
)

91 
›s
->
	`ao_‰ì
(
lök
, 
d©a
);

93 
	`π∆_lök_af_›s_put
(
›s
);

96 
	}
}

98 
	$af_˛⁄e
(
π∆_lök
 *
lök
, 
π∆_lök_af_›s
 *
›s
,

99 *
d©a
, *
¨g
)

101 
π∆_lök
 *
d°
 = 
¨g
;

103 i‡(
›s
->
ao_˛⁄e
 &&

104 !(
d°
->
l_af_d©a
[
›s
->
ao_Ámûy
] = ops->
	`ao_˛⁄e
(d°, 
d©a
)))

105  -
NLE_NOMEM
;

108 
	}
}

110 
	$af_fûl
(
π∆_lök
 *
lök
, 
π∆_lök_af_›s
 *
›s
,

111 *
d©a
, *
¨g
)

113 
∆_msg
 *
msg
 = 
¨g
;

114 
∆©å
 *
af_©å
;

115 
îr
;

117 i‡(!
›s
->
ao_fûl_af
)

120 i‡(!(
af_©å
 = 
	`∆a_√°_°¨t
(
msg
, 
›s
->
ao_Ámûy
)))

121  -
NLE_MSGSIZE
;

123 i‡((
îr
 = 
›s
->
	`ao_fûl_af
(
lök
, 
¨g
, 
d©a
)) < 0)

124  
îr
;

126 
	`∆a_√°_íd
(
msg
, 
af_©å
);

129 
	}
}

131 
	$af_dump_löe
(
π∆_lök
 *
lök
, 
π∆_lök_af_›s
 *
›s
,

132 *
d©a
, *
¨g
)

134 
∆_dump_∑øms
 *
p
 = 
¨g
;

136 i‡(
›s
->
ao_dump
[
NL_DUMP_LINE
])

137 
›s
->
ao_dump
[
NL_DUMP_LINE
](
lök
, 
p
, 
d©a
);

140 
	}
}

142 
	$af_dump_dëaûs
(
π∆_lök
 *
lök
, 
π∆_lök_af_›s
 *
›s
,

143 *
d©a
, *
¨g
)

145 
∆_dump_∑øms
 *
p
 = 
¨g
;

147 i‡(
›s
->
ao_dump
[
NL_DUMP_DETAILS
])

148 
›s
->
ao_dump
[
NL_DUMP_DETAILS
](
lök
, 
p
, 
d©a
);

151 
	}
}

153 
	$af_dump_°©s
(
π∆_lök
 *
lök
, 
π∆_lök_af_›s
 *
›s
,

154 *
d©a
, *
¨g
)

156 
∆_dump_∑øms
 *
p
 = 
¨g
;

158 i‡(
›s
->
ao_dump
[
NL_DUMP_STATS
])

159 
›s
->
ao_dump
[
NL_DUMP_STATS
](
lök
, 
p
, 
d©a
);

162 
	}
}

164 
do_f‹óch_af
(
π∆_lök
 *
lök
,

165 (*
cb
)(
π∆_lök
 *,

166 
π∆_lök_af_›s
 *, *, *),

167 *
¨g
)

169 
i
, 
îr
;

171 
i
 = 0; i < 
AF_MAX
; i++) {

172 i‡(
lök
->
l_af_d©a
[
i
]) {

173 
π∆_lök_af_›s
 *
›s
;

175 i‡(!(
›s
 = 
	`π∆_lök_af_›s_lookup
(
i
)))

176 
	`BUG
();

178 
îr
 = 
	`cb
(
lök
, 
›s
,Üök->
l_af_d©a
[
i
], 
¨g
);

180 
	`π∆_lök_af_›s_put
(
›s
);

182 i‡(
îr
 < 0)

183  
îr
;

188 
	}
}

190 
	$ªÀa£_lök_öfo
(
π∆_lök
 *
lök
)

192 
π∆_lök_öfo_›s
 *
io
 = 
lök
->
l_öfo_›s
;

194 i‡(
io
 !
NULL
) {

195 i‡(
io
->
io_‰ì
)

196 
io
->
	`io_‰ì
(
lök
);

199 
	`BUG_ON
(
lök
->
l_öfo
);

201 
	`π∆_lök_öfo_›s_put
(
io
);

202 
lök
->
l_öfo_›s
 = 
NULL
;

204 
	}
}

206 
	$lök_‰ì_d©a
(
∆_obje˘
 *
c
)

208 
π∆_lök
 *
lök
 = 
	`∆_obje˘_¥iv
(
c
);

210 i‡(
lök
) {

211 
π∆_lök_öfo_›s
 *
io
;

213 i‡((
io
 = 
lök
->
l_öfo_›s
Ë!
NULL
)

214 
	`ªÀa£_lök_öfo
(
lök
);

217 
	`π∆_lök_af_›s_put
(
lök
->
l_af_›s
);

219 
	`∆_addr_put
(
lök
->
l_addr
);

220 
	`∆_addr_put
(
lök
->
l_bˇ°
);

222 
	`‰ì
(
lök
->
l_iÁlüs
);

223 
	`‰ì
(
lök
->
l_öfo_köd
);

225 
	`do_f‹óch_af
(
lök
, 
af_‰ì
, 
NULL
);

227 
	`∆_d©a_‰ì
(
lök
->
l_phys_p‹t_id
);

229 
	}
}

231 
	$lök_˛⁄e
(
∆_obje˘
 *
_d°
, ∆_obje˘ *
_§c
)

233 
π∆_lök
 *
d°
 = 
	`∆_obje˘_¥iv
(
_d°
);

234 
π∆_lök
 *
§c
 = 
	`∆_obje˘_¥iv
(
_§c
);

235 
îr
;

237 i‡(
§c
->
l_addr
)

238 i‡(!(
d°
->
l_addr
 = 
	`∆_addr_˛⁄e
(
§c
->l_addr)))

239  -
NLE_NOMEM
;

241 i‡(
§c
->
l_bˇ°
)

242 i‡(!(
d°
->
l_bˇ°
 = 
	`∆_addr_˛⁄e
(
§c
->l_bcast)))

243  -
NLE_NOMEM
;

245 i‡(
§c
->
l_iÁlüs
)

246 i‡(!(
d°
->
l_iÁlüs
 = 
	`°rdup
(
§c
->l_ifalias)))

247  -
NLE_NOMEM
;

249 i‡(
§c
->
l_öfo_köd
)

250 i‡(!(
d°
->
l_öfo_köd
 = 
	`°rdup
(
§c
->l_info_kind)))

251  -
NLE_NOMEM
;

253 i‡(
§c
->
l_öfo_›s
 && src->l_öfo_›s->
io_˛⁄e
) {

254 
îr
 = 
§c
->
l_öfo_›s
->
	`io_˛⁄e
(
d°
, src);

255 i‡(
îr
 < 0)

256  
îr
;

259 i‡((
îr
 = 
	`do_f‹óch_af
(
§c
, 
af_˛⁄e
, 
d°
)) < 0)

260  
îr
;

262 i‡(
§c
->
l_phys_p‹t_id
)

263 i‡(!(
d°
->
l_phys_p‹t_id
 = 
	`∆_d©a_˛⁄e
(
§c
->l_phys_port_id)))

264  -
NLE_NOMEM
;

267 
	}
}

269 
∆a_pﬁicy
 
	gπ _lök_pﬁicy
[
IFLA_MAX
+1] = {

270 [
IFLA_IFNAME
] = { .
ty≥
 = 
NLA_STRING
,

271 .
	gmaxÀn
 = 
IFNAMSIZ
 },

272 [
IFLA_MTU
] = { .
ty≥
 = 
NLA_U32
 },

273 [
IFLA_TXQLEN
] = { .
ty≥
 = 
NLA_U32
 },

274 [
IFLA_LINK
] = { .
ty≥
 = 
NLA_U32
 },

275 [
IFLA_WEIGHT
] = { .
ty≥
 = 
NLA_U32
 },

276 [
IFLA_MASTER
] = { .
ty≥
 = 
NLA_U32
 },

277 [
IFLA_OPERSTATE
] = { .
ty≥
 = 
NLA_U8
 },

278 [
IFLA_LINKMODE
] = { .
ty≥
 = 
NLA_U8
 },

279 [
IFLA_LINKINFO
] = { .
ty≥
 = 
NLA_NESTED
 },

280 [
IFLA_QDISC
] = { .
ty≥
 = 
NLA_STRING
,

281 .
	gmaxÀn
 = 
IFQDISCSIZ
 },

282 [
IFLA_STATS
] = { .
möÀn
 = (
π∆_lök_°©s
) },

283 [
IFLA_STATS64
] = { .
möÀn
 = (
π∆_lök_°©s64
)},

284 [
IFLA_MAP
] = { .
möÀn
 = (
π∆_lök_ifm≠
) },

285 [
IFLA_IFALIAS
] = { .
ty≥
 = 
NLA_STRING
, .
	gmaxÀn
 = 
IFALIASZ
 },

286 [
IFLA_NUM_VF
] = { .
ty≥
 = 
NLA_U32
 },

287 [
IFLA_AF_SPEC
] = { .
ty≥
 = 
NLA_NESTED
 },

288 [
IFLA_PROMISCUITY
] = { .
ty≥
 = 
NLA_U32
 },

289 [
IFLA_NUM_TX_QUEUES
] = { .
ty≥
 = 
NLA_U32
 },

290 [
IFLA_NUM_RX_QUEUES
] = { .
ty≥
 = 
NLA_U32
 },

291 [
IFLA_GROUP
] = { .
ty≥
 = 
NLA_U32
 },

292 [
IFLA_CARRIER
] = { .
ty≥
 = 
NLA_U8
 },

293 [
IFLA_PHYS_PORT_ID
] = { .
ty≥
 = 
NLA_UNSPEC
 },

294 [
IFLA_NET_NS_PID
] = { .
ty≥
 = 
NLA_U32
 },

295 [
IFLA_NET_NS_FD
] = { .
ty≥
 = 
NLA_U32
 },

298 
∆a_pﬁicy
 
	glök_öfo_pﬁicy
[
IFLA_INFO_MAX
+1] = {

299 [
IFLA_INFO_KIND
] = { .
ty≥
 = 
NLA_STRING
 },

300 [
IFLA_INFO_DATA
] = { .
ty≥
 = 
NLA_NESTED
 },

301 [
IFLA_INFO_XSTATS
] = { .
ty≥
 = 
NLA_NESTED
 },

304 
	$π∆_lök_öfo_∑r£
(
π∆_lök
 *
lök
, 
∆©å
 **
tb
)

306 i‡(
tb
[
IFLA_IFNAME
] =
NULL
)

307  -
NLE_MISSING_ATTR
;

309 
	`∆a_°æ˝y
(
lök
->
l_«me
, 
tb
[
IFLA_IFNAME
], 
IFNAMSIZ
);

312 i‡(
tb
[
IFLA_STATS
]) {

313 
π∆_lök_°©s
 *
°
 = 
	`∆a_d©a
(
tb
[
IFLA_STATS
]);

315 
lök
->
l_°©s
[
RTNL_LINK_RX_PACKETS
] = 
°
->
rx_∑ckës
;

316 
lök
->
l_°©s
[
RTNL_LINK_TX_PACKETS
] = 
°
->
tx_∑ckës
;

317 
lök
->
l_°©s
[
RTNL_LINK_RX_BYTES
] = 
°
->
rx_byãs
;

318 
lök
->
l_°©s
[
RTNL_LINK_TX_BYTES
] = 
°
->
tx_byãs
;

319 
lök
->
l_°©s
[
RTNL_LINK_RX_ERRORS
] = 
°
->
rx_îr‹s
;

320 
lök
->
l_°©s
[
RTNL_LINK_TX_ERRORS
] = 
°
->
tx_îr‹s
;

321 
lök
->
l_°©s
[
RTNL_LINK_RX_DROPPED
] = 
°
->
rx_dr›≥d
;

322 
lök
->
l_°©s
[
RTNL_LINK_TX_DROPPED
] = 
°
->
tx_dr›≥d
;

323 
lök
->
l_°©s
[
RTNL_LINK_MULTICAST
] = 
°
->
mu…iˇ°
;

324 
lök
->
l_°©s
[
RTNL_LINK_COLLISIONS
] = 
°
->
cﬁlisi⁄s
;

326 
lök
->
l_°©s
[
RTNL_LINK_RX_LEN_ERR
] = 
°
->
rx_Àngth_îr‹s
;

327 
lök
->
l_°©s
[
RTNL_LINK_RX_OVER_ERR
] = 
°
->
rx_ovî_îr‹s
;

328 
lök
->
l_°©s
[
RTNL_LINK_RX_CRC_ERR
] = 
°
->
rx_¸c_îr‹s
;

329 
lök
->
l_°©s
[
RTNL_LINK_RX_FRAME_ERR
] = 
°
->
rx_‰ame_îr‹s
;

330 
lök
->
l_°©s
[
RTNL_LINK_RX_FIFO_ERR
] = 
°
->
rx_fifo_îr‹s
;

331 
lök
->
l_°©s
[
RTNL_LINK_RX_MISSED_ERR
] = 
°
->
rx_mis£d_îr‹s
;

333 
lök
->
l_°©s
[
RTNL_LINK_TX_ABORT_ERR
] = 
°
->
tx_ab‹ãd_îr‹s
;

334 
lök
->
l_°©s
[
RTNL_LINK_TX_CARRIER_ERR
] = 
°
->
tx_ˇºõr_îr‹s
;

335 
lök
->
l_°©s
[
RTNL_LINK_TX_FIFO_ERR
] = 
°
->
tx_fifo_îr‹s
;

336 
lök
->
l_°©s
[
RTNL_LINK_TX_HBEAT_ERR
] = 
°
->
tx_hóπbót_îr‹s
;

337 
lök
->
l_°©s
[
RTNL_LINK_TX_WIN_ERR
] = 
°
->
tx_wödow_îr‹s
;

339 
lök
->
l_°©s
[
RTNL_LINK_RX_COMPRESSED
] = 
°
->
rx_com¥es£d
;

340 
lök
->
l_°©s
[
RTNL_LINK_TX_COMPRESSED
] = 
°
->
tx_com¥es£d
;

342 
lök
->
˚_mask
 |
LINK_ATTR_STATS
;

345 i‡(
tb
[
IFLA_STATS64
]) {

353 
π∆_lök_°©s64
 
°
;

355 
	`∆a_mem˝y
(&
°
, 
tb
[
IFLA_STATS64
],

356 (
π∆_lök_°©s64
));

358 
lök
->
l_°©s
[
RTNL_LINK_RX_PACKETS
] = 
°
.
rx_∑ckës
;

359 
lök
->
l_°©s
[
RTNL_LINK_TX_PACKETS
] = 
°
.
tx_∑ckës
;

360 
lök
->
l_°©s
[
RTNL_LINK_RX_BYTES
] = 
°
.
rx_byãs
;

361 
lök
->
l_°©s
[
RTNL_LINK_TX_BYTES
] = 
°
.
tx_byãs
;

362 
lök
->
l_°©s
[
RTNL_LINK_RX_ERRORS
] = 
°
.
rx_îr‹s
;

363 
lök
->
l_°©s
[
RTNL_LINK_TX_ERRORS
] = 
°
.
tx_îr‹s
;

364 
lök
->
l_°©s
[
RTNL_LINK_RX_DROPPED
] = 
°
.
rx_dr›≥d
;

365 
lök
->
l_°©s
[
RTNL_LINK_TX_DROPPED
] = 
°
.
tx_dr›≥d
;

366 
lök
->
l_°©s
[
RTNL_LINK_MULTICAST
] = 
°
.
mu…iˇ°
;

367 
lök
->
l_°©s
[
RTNL_LINK_COLLISIONS
] = 
°
.
cﬁlisi⁄s
;

369 
lök
->
l_°©s
[
RTNL_LINK_RX_LEN_ERR
] = 
°
.
rx_Àngth_îr‹s
;

370 
lök
->
l_°©s
[
RTNL_LINK_RX_OVER_ERR
] = 
°
.
rx_ovî_îr‹s
;

371 
lök
->
l_°©s
[
RTNL_LINK_RX_CRC_ERR
] = 
°
.
rx_¸c_îr‹s
;

372 
lök
->
l_°©s
[
RTNL_LINK_RX_FRAME_ERR
] = 
°
.
rx_‰ame_îr‹s
;

373 
lök
->
l_°©s
[
RTNL_LINK_RX_FIFO_ERR
] = 
°
.
rx_fifo_îr‹s
;

374 
lök
->
l_°©s
[
RTNL_LINK_RX_MISSED_ERR
] = 
°
.
rx_mis£d_îr‹s
;

376 
lök
->
l_°©s
[
RTNL_LINK_TX_ABORT_ERR
] = 
°
.
tx_ab‹ãd_îr‹s
;

377 
lök
->
l_°©s
[
RTNL_LINK_TX_CARRIER_ERR
] = 
°
.
tx_ˇºõr_îr‹s
;

378 
lök
->
l_°©s
[
RTNL_LINK_TX_FIFO_ERR
] = 
°
.
tx_fifo_îr‹s
;

379 
lök
->
l_°©s
[
RTNL_LINK_TX_HBEAT_ERR
] = 
°
.
tx_hóπbót_îr‹s
;

380 
lök
->
l_°©s
[
RTNL_LINK_TX_WIN_ERR
] = 
°
.
tx_wödow_îr‹s
;

382 
lök
->
l_°©s
[
RTNL_LINK_RX_COMPRESSED
] = 
°
.
rx_com¥es£d
;

383 
lök
->
l_°©s
[
RTNL_LINK_TX_COMPRESSED
] = 
°
.
tx_com¥es£d
;

385 
lök
->
˚_mask
 |
LINK_ATTR_STATS
;

388 i‡(
tb
[
IFLA_TXQLEN
]) {

389 
lök
->
l_txqÀn
 = 
	`∆a_gë_u32
(
tb
[
IFLA_TXQLEN
]);

390 
lök
->
˚_mask
 |
LINK_ATTR_TXQLEN
;

393 i‡(
tb
[
IFLA_MTU
]) {

394 
lök
->
l_mtu
 = 
	`∆a_gë_u32
(
tb
[
IFLA_MTU
]);

395 
lök
->
˚_mask
 |
LINK_ATTR_MTU
;

398 i‡(
tb
[
IFLA_ADDRESS
]) {

399 
lök
->
l_addr
 = 
	`∆_addr_Æloc_©å
(
tb
[
IFLA_ADDRESS
], 
AF_UNSPEC
);

400 i‡(
lök
->
l_addr
 =
NULL
)

401  -
NLE_NOMEM
;

402 
	`∆_addr_£t_Ámûy
(
lök
->
l_addr
,

403 
	`∆_addr_guess_Ámûy
(
lök
->
l_addr
));

404 
lök
->
˚_mask
 |
LINK_ATTR_ADDR
;

407 i‡(
tb
[
IFLA_BROADCAST
]) {

408 
lök
->
l_bˇ°
 = 
	`∆_addr_Æloc_©å
(
tb
[
IFLA_BROADCAST
],

409 
AF_UNSPEC
);

410 i‡(
lök
->
l_bˇ°
 =
NULL
)

411  -
NLE_NOMEM
;

412 
	`∆_addr_£t_Ámûy
(
lök
->
l_bˇ°
,

413 
	`∆_addr_guess_Ámûy
(
lök
->
l_bˇ°
));

414 
lök
->
˚_mask
 |
LINK_ATTR_BRD
;

417 i‡(
tb
[
IFLA_LINK
]) {

418 
lök
->
l_lök
 = 
	`∆a_gë_u32
(
tb
[
IFLA_LINK
]);

419 
lök
->
˚_mask
 |
LINK_ATTR_LINK
;

422 i‡(
tb
[
IFLA_WEIGHT
]) {

423 
lök
->
l_weight
 = 
	`∆a_gë_u32
(
tb
[
IFLA_WEIGHT
]);

424 
lök
->
˚_mask
 |
LINK_ATTR_WEIGHT
;

427 i‡(
tb
[
IFLA_QDISC
]) {

428 
	`∆a_°æ˝y
(
lök
->
l_qdisc
, 
tb
[
IFLA_QDISC
], 
IFQDISCSIZ
);

429 
lök
->
˚_mask
 |
LINK_ATTR_QDISC
;

432 i‡(
tb
[
IFLA_MAP
]) {

433 
	`∆a_mem˝y
(&
lök
->
l_m≠
, 
tb
[
IFLA_MAP
],

434 (
π∆_lök_ifm≠
));

435 
lök
->
˚_mask
 |
LINK_ATTR_MAP
;

438 i‡(
tb
[
IFLA_MASTER
]) {

439 
lök
->
l_ma°î
 = 
	`∆a_gë_u32
(
tb
[
IFLA_MASTER
]);

440 
lök
->
˚_mask
 |
LINK_ATTR_MASTER
;

443 i‡(
tb
[
IFLA_CARRIER
]) {

444 
lök
->
l_ˇºõr
 = 
	`∆a_gë_u8
(
tb
[
IFLA_CARRIER
]);

445 
lök
->
˚_mask
 |
LINK_ATTR_CARRIER
;

448 i‡(
tb
[
IFLA_OPERSTATE
]) {

449 
lök
->
l_›î°©e
 = 
	`∆a_gë_u8
(
tb
[
IFLA_OPERSTATE
]);

450 
lök
->
˚_mask
 |
LINK_ATTR_OPERSTATE
;

453 i‡(
tb
[
IFLA_LINKMODE
]) {

454 
lök
->
l_lökmode
 = 
	`∆a_gë_u8
(
tb
[
IFLA_LINKMODE
]);

455 
lök
->
˚_mask
 |
LINK_ATTR_LINKMODE
;

458 i‡(
tb
[
IFLA_IFALIAS
]) {

459 
lök
->
l_iÁlüs
 = 
	`∆a_°rdup
(
tb
[
IFLA_IFALIAS
]);

460 i‡(
lök
->
l_iÁlüs
 =
NULL
)

461  -
NLE_NOMEM
;

462 
lök
->
˚_mask
 |
LINK_ATTR_IFALIAS
;

465 i‡(
tb
[
IFLA_NET_NS_FD
]) {

466 
lök
->
l_ns_fd
 = 
	`∆a_gë_u32
(
tb
[
IFLA_NET_NS_FD
]);

467 
lök
->
˚_mask
 |
LINK_ATTR_NS_FD
;

470 i‡(
tb
[
IFLA_NET_NS_PID
]) {

471 
lök
->
l_ns_pid
 = 
	`∆a_gë_u32
(
tb
[
IFLA_NET_NS_PID
]);

472 
lök
->
˚_mask
 |
LINK_ATTR_NS_PID
;

476 
	}
}

478 
	$lök_msg_∑r£r
(
∆_ˇche_›s
 *
›s
, 
sockaddr_∆
 *
who
,

479 
∆msghdr
 *
n
, 
∆_∑r£r_∑øm
 *
µ
)

481 
π∆_lök
 *
lök
;

482 
iföfomsg
 *
ifi
;

483 
∆©å
 *
tb
[
IFLA_MAX
+1];

484 
π∆_lök_af_›s
 *
af_›s
 = 
NULL
;

485 
îr
, 
Ámûy
;

486 
∆a_pﬁicy
 
ªÆ_lök_pﬁicy
[
IFLA_MAX
+1];

488 
	`mem˝y
(&
ªÆ_lök_pﬁicy
, 
π _lök_pﬁicy
, (rtln_link_policy));

490 
lök
 = 
	`π∆_lök_Æloc
();

491 i‡(
lök
 =
NULL
) {

492 
îr
 = -
NLE_NOMEM
;

493 
îrout
;

496 
lök
->
˚_msgty≥
 = 
n
->
∆msg_ty≥
;

498 i‡(!
	`∆msg_vÆid_hdr
(
n
, (*
ifi
)))

499  -
NLE_MSG_TOOSHORT
;

501 
ifi
 = 
	`∆msg_d©a
(
n
);

502 
lök
->
l_Ámûy
 = 
Ámûy
 = 
ifi
->
ifi_Ámûy
;

503 
lök
->
l_¨±y≥
 = 
ifi
->
ifi_ty≥
;

504 
lök
->
l_ödex
 = 
ifi
->
ifi_ödex
;

505 
lök
->
l_Êags
 = 
ifi
->
ifi_Êags
;

506 
lök
->
l_ch™ge
 = 
ifi
->
ifi_ch™ge
;

507 
lök
->
˚_mask
 = (
LINK_ATTR_IFNAME
 | 
LINK_ATTR_FAMILY
 |

508 
LINK_ATTR_ARPTYPE
| 
LINK_ATTR_IFINDEX
 |

509 
LINK_ATTR_FLAGS
 | 
LINK_ATTR_CHANGE
);

511 i‡((
af_›s
 = 
	`af_lookup_™d_Æloc
(
lök
, 
Ámûy
))) {

512 i‡(
af_›s
->
ao_¥Ÿöfo_pﬁicy
) {

513 
	`mem˝y
(&
ªÆ_lök_pﬁicy
[
IFLA_PROTINFO
],

514 
af_›s
->
ao_¥Ÿöfo_pﬁicy
,

515 (
∆a_pﬁicy
));

518 
lök
->
l_af_›s
 = 
af_›s
;

521 
îr
 = 
	`∆msg_∑r£
(
n
, (*
ifi
), 
tb
, 
IFLA_MAX
, 
ªÆ_lök_pﬁicy
);

522 i‡(
îr
 < 0)

523  
îr
;

525 
îr
 = 
	`π∆_lök_öfo_∑r£
(
lök
, 
tb
);

526 i‡(
îr
 < 0)

527  
îr
;

529 i‡(
tb
[
IFLA_NUM_VF
]) {

530 
lök
->
l_num_vf
 = 
	`∆a_gë_u32
(
tb
[
IFLA_NUM_VF
]);

531 
lök
->
˚_mask
 |
LINK_ATTR_NUM_VF
;

534 i‡(
tb
[
IFLA_LINKINFO
]) {

535 
∆©å
 *
li
[
IFLA_INFO_MAX
+1];

537 
îr
 = 
	`∆a_∑r£_√°ed
(
li
, 
IFLA_INFO_MAX
, 
tb
[
IFLA_LINKINFO
],

538 
lök_öfo_pﬁicy
);

539 i‡(
îr
 < 0)

540 
îrout
;

542 i‡(
li
[
IFLA_INFO_KIND
]) {

543 
π∆_lök_öfo_›s
 *
›s
;

544 *
köd
 = 
	`∆a_gë_°rög
(
li
[
IFLA_INFO_KIND
]);

545 
af
;

547 
îr
 = 
	`π∆_lök_£t_ty≥
(
lök
, 
köd
);

548 i‡(
îr
 < 0)

549 
îrout
;

551 i‡((
af
 = 
	`∆_°r2af
(
köd
)) >= 0 &&

552 !
af_›s
 && (af_›†
	`af_lookup_™d_Æloc
(
lök
, 
af
))) {

554 i‡(
af_›s
->
ao_¥Ÿöfo_pﬁicy
) {

555 
tb
[
IFLA_PROTINFO
] = (
∆©å
 *)
af_›s
->
ao_¥Ÿöfo_pﬁicy
;

557 
lök
->
l_Ámûy
 = 
Ámûy
 = 
af
;

558 
lök
->
l_af_›s
 = 
af_›s
;

561 
›s
 = 
	`π∆_lök_öfo_›s_lookup
(
köd
);

562 
lök
->
l_öfo_›s
 = 
›s
;

564 i‡(
›s
) {

565 i‡(
›s
->
io_∑r£
 &&

566 (
li
[
IFLA_INFO_DATA
] ||Üi[
IFLA_INFO_XSTATS
])) {

567 
îr
 = 
›s
->
	`io_∑r£
(
lök
, 
li
[
IFLA_INFO_DATA
],

568 
li
[
IFLA_INFO_XSTATS
]);

569 i‡(
îr
 < 0)

570 
îrout
;

576 
lök
->
˚_mask
 |
LINK_ATTR_LINKINFO
;

579 i‡(
tb
[
IFLA_PROTINFO
] && 
af_›s
 &&áf_›s->
ao_∑r£_¥Ÿöfo
) {

580 
îr
 = 
af_›s
->
	`ao_∑r£_¥Ÿöfo
(
lök
, 
tb
[
IFLA_PROTINFO
],

581 
lök
->
l_af_d©a
[lök->
l_Ámûy
]);

582 i‡(
îr
 < 0)

583 
îrout
;

584 
lök
->
˚_mask
 |
LINK_ATTR_PROTINFO
;

587 i‡(
tb
[
IFLA_AF_SPEC
]) {

588 
∆©å
 *
af_©å
;

589 
ªmaöög
;

591 
	`∆a_f‹_óch_√°ed
(
af_©å
, 
tb
[
IFLA_AF_SPEC
], 
ªmaöög
) {

592 
af_›s
 = 
	`af_lookup_™d_Æloc
(
lök
, 
	`∆a_ty≥
(
af_©å
));

593 i‡(
af_›s
 &&áf_›s->
ao_∑r£_af
) {

594 *
af_d©a
 = 
lök
->
l_af_d©a
[
	`∆a_ty≥
(
af_©å
)];

596 
îr
 = 
af_›s
->
	`ao_∑r£_af
(
lök
, 
af_©å
, 
af_d©a
);

597 i‡(
îr
 < 0)

598 
îrout
;

602 
lök
->
˚_mask
 |
LINK_ATTR_AF_SPEC
;

605 i‡(
tb
[
IFLA_PROMISCUITY
]) {

606 
lök
->
l_¥omiscuôy
 = 
	`∆a_gë_u32
(
tb
[
IFLA_PROMISCUITY
]);

607 
lök
->
˚_mask
 |
LINK_ATTR_PROMISCUITY
;

610 i‡(
tb
[
IFLA_NUM_TX_QUEUES
]) {

611 
lök
->
l_num_tx_queues
 = 
	`∆a_gë_u32
(
tb
[
IFLA_NUM_TX_QUEUES
]);

612 
lök
->
˚_mask
 |
LINK_ATTR_NUM_TX_QUEUES
;

615 i‡(
tb
[
IFLA_NUM_RX_QUEUES
]) {

616 
lök
->
l_num_rx_queues
 = 
	`∆a_gë_u32
(
tb
[
IFLA_NUM_RX_QUEUES
]);

617 
lök
->
˚_mask
 |
LINK_ATTR_NUM_RX_QUEUES
;

620 i‡(
tb
[
IFLA_GROUP
]) {

621 
lök
->
l_group
 = 
	`∆a_gë_u32
(
tb
[
IFLA_GROUP
]);

622 
lök
->
˚_mask
 |
LINK_ATTR_GROUP
;

625 i‡(
tb
[
IFLA_PHYS_PORT_ID
]) {

626 
lök
->
l_phys_p‹t_id
 = 
	`∆_d©a_Æloc_©å
(
tb
[
IFLA_PHYS_PORT_ID
]);

627 i‡(
lök
->
l_phys_p‹t_id
 =
NULL
) {

628 
îr
 = -
NLE_NOMEM
;

629 
îrout
;

631 
lök
->
˚_mask
 |
LINK_ATTR_PHYS_PORT_ID
;

634 
îr
 = 
µ
->
	`µ_cb
((
∆_obje˘
 *Ë
lök
,Öp);

635 
îrout
:

636 
	`π∆_lök_af_›s_put
(
af_›s
);

637 
	`π∆_lök_put
(
lök
);

638  
îr
;

639 
	}
}

641 
	$lök_ªque°_upd©e
(
∆_ˇche
 *
ˇche
, 
∆_sock
 *
sk
)

643 
Ámûy
 = 
ˇche
->
c_ürg1
;

645  
	`∆_πgí_ªque°
(
sk
, 
RTM_GETLINK
, 
Ámûy
, 
NLM_F_DUMP
);

646 
	}
}

648 
	$lök_dump_löe
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
p
)

650 
buf
[128];

651 
∆_ˇche
 *
ˇche
 = 
obj
->
˚_ˇche
;

652 
π∆_lök
 *
lök
 = (π∆_lök *Ë
obj
;

653 
„tched_ˇche
 = 0;

655 i‡(!
ˇche
) {

656 
ˇche
 = 
	`∆_ˇche_mngt_ªquúe_ß„
("route/link");

657 
„tched_ˇche
 = 1;

660 
	`∆_dump_löe
(
p
, "%†%†", 
lök
->
l_«me
,

661 
	`∆_Œ¥Ÿo2°r
(
lök
->
l_¨±y≥
, 
buf
, (buf)));

663 i‡(
lök
->
l_addr
 && !
	`∆_addr_iszîo
(link->l_addr))

664 
	`∆_dump
(
p
, "%†", 
	`∆_addr2°r
(
lök
->
l_addr
, 
buf
, (buf)));

666 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_MASTER
) {

667 i‡(
ˇche
) {

668 
π∆_lök
 *
ma°î
 = 
	`π∆_lök_gë
(
ˇche
, 
lök
->
l_ma°î
);

669 
	`∆_dump
(
p
, "ma°î %†", 
ma°î
 ? ma°î->
l_«me
 : "inv");

670 i‡(
ma°î
)

671 
	`π∆_lök_put
(
ma°î
);

673 
	`∆_dump
(
p
, "ma°î %d ", 
lök
->
l_ma°î
);

676 
	`π∆_lök_Êags2°r
(
lök
->
l_Êags
, 
buf
, (buf));

677 i‡(
buf
[0])

678 
	`∆_dump
(
p
, "<%s> ", 
buf
);

680 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_LINK
) {

681 i‡(
ˇche
) {

682 
π∆_lök
 *
Œ
 = 
	`π∆_lök_gë
(
ˇche
, 
lök
->
l_lök
);

683 
	`∆_dump
(
p
, "¶ave-o‡%†", 
Œ
 ?Ül->
l_«me
 : "NONE");

684 i‡(
Œ
)

685 
	`π∆_lök_put
(
Œ
);

687 
	`∆_dump
(
p
, "¶ave-o‡%d ", 
lök
->
l_lök
);

690 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_GROUP
)

691 
	`∆_dump
(
p
, "grou∞%u ", 
lök
->
l_group
);

693 i‡(
lök
->
l_öfo_›s
 &&Üök->l_öfo_›s->
io_dump
[
NL_DUMP_LINE
])

694 
lök
->
l_öfo_›s
->
io_dump
[
NL_DUMP_LINE
]÷ök, 
p
);

696 
	`do_f‹óch_af
(
lök
, 
af_dump_löe
, 
p
);

698 
	`∆_dump
(
p
, "\n");

700 i‡(
„tched_ˇche
)

701 
	`∆_ˇche_put
(
ˇche
);

702 
	}
}

704 
	$lök_dump_dëaûs
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
p
)

706 
π∆_lök
 *
lök
 = (π∆_lök *Ë
obj
;

707 
buf
[64];

709 
	`lök_dump_löe
(
obj
, 
p
);

711 
	`∆_dump_löe
(
p
, " mtu %u ", 
lök
->
l_mtu
);

712 
	`∆_dump
(
p
, "txqÀ¿%u weighà%u ", 
lök
->
l_txqÀn
,Üök->
l_weight
);

714 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_QDISC
)

715 
	`∆_dump
(
p
, "qdis¯%†", 
lök
->
l_qdisc
);

717 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_MAP
 &&Üök->
l_m≠
.
lm_úq
)

718 
	`∆_dump
(
p
, "úq %u ", 
lök
->
l_m≠
.
lm_úq
);

720 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_IFINDEX
)

721 
	`∆_dump
(
p
, "ödex %u ", 
lök
->
l_ödex
);

723 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_PROMISCUITY
 &&Üök->
l_¥omiscuôy
 > 0)

724 
	`∆_dump
(
p
, "¥omisc-modê(%u u£rsË", 
lök
->
l_¥omiscuôy
);

726 
	`∆_dump
(
p
, "\n");

728 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_IFALIAS
)

729 
	`∆_dump_löe
(
p
, "álü†%s\n", 
lök
->
l_iÁlüs
);

731 
	`∆_dump_löe
(
p
, " ");

733 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_NUM_TX_QUEUES
)

734 
	`∆_dump
(
p
, "txq %u ", 
lök
->
l_num_tx_queues
);

736 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_NUM_RX_QUEUES
)

737 
	`∆_dump
(
p
, "rxq %u ", 
lök
->
l_num_rx_queues
);

739 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_BRD
)

740 
	`∆_dump
(
p
, "brd %†", 
	`∆_addr2°r
(
lök
->
l_bˇ°
, 
buf
,

741 (
buf
)));

743 i‡((
lök
->
˚_mask
 & 
LINK_ATTR_OPERSTATE
) &&

744 
lök
->
l_›î°©e
 !
IF_OPER_UNKNOWN
) {

745 
	`π∆_lök_›î°©e2°r
(
lök
->
l_›î°©e
, 
buf
, (buf));

746 
	`∆_dump
(
p
, "°©ê%†", 
buf
);

749 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_NUM_VF
)

750 
	`∆_dump
(
p
, "num-v‡%u ", 
lök
->
l_num_vf
);

752 
	`∆_dump
(
p
, "mode %s ",

753 
	`π∆_lök_mode2°r
(
lök
->
l_lökmode
, 
buf
, (buf)));

755 
	`∆_dump
(
p
, "carrier %s",

756 
	`π∆_lök_ˇºõr2°r
(
lök
->
l_ˇºõr
, 
buf
, (buf)));

758 
	`∆_dump
(
p
, "\n");

760 i‡(
lök
->
l_öfo_›s
 &&Üök->l_öfo_›s->
io_dump
[
NL_DUMP_DETAILS
])

761 
lök
->
l_öfo_›s
->
io_dump
[
NL_DUMP_DETAILS
]÷ök, 
p
);

763 
	`do_f‹óch_af
(
lök
, 
af_dump_dëaûs
, 
p
);

764 
	}
}

766 
	$lök_dump_°©s
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
p
)

768 
π∆_lök
 *
lök
 = (π∆_lök *Ë
obj
;

769 *
unô
, 
fmt
[64];

770 
ªs
;

772 
	`lök_dump_dëaûs
(
obj
, 
p
);

774 
	`∆_dump_löe
(
p
, " Stats: bytesÖacketsÉrrors "

777 
ªs
 = 
	`∆_ˇn˚l_down_byãs
(
lök
->
l_°©s
[
RTNL_LINK_RX_BYTES
], &
unô
);

779 
	`°r˝y
(
fmt
, " RX %X.2‡%†%10" 
PRIu64
 " %10" PRIu64 " %10" PRIu64 " %10" PRIu64 " %10" PRIu64 "\n");

780 
fmt
[9] = *
unô
 == 'B' ? '9' : '7';

782 
	`∆_dump_löe
(
p
, 
fmt
, 
ªs
, 
unô
,

783 
lök
->
l_°©s
[
RTNL_LINK_RX_PACKETS
],

784 
lök
->
l_°©s
[
RTNL_LINK_RX_ERRORS
],

785 
lök
->
l_°©s
[
RTNL_LINK_RX_DROPPED
],

786 
lök
->
l_°©s
[
RTNL_LINK_RX_FIFO_ERR
],

787 
lök
->
l_°©s
[
RTNL_LINK_RX_COMPRESSED
]);

789 
ªs
 = 
	`∆_ˇn˚l_down_byãs
(
lök
->
l_°©s
[
RTNL_LINK_TX_BYTES
], &
unô
);

791 
	`°r˝y
(
fmt
, " TX %X.2‡%†%10" 
PRIu64
 " %10" PRIu64 " %10" PRIu64 " %10" PRIu64 " %10" PRIu64 "\n");

792 
fmt
[9] = *
unô
 == 'B' ? '9' : '7';

794 
	`∆_dump_löe
(
p
, 
fmt
, 
ªs
, 
unô
,

795 
lök
->
l_°©s
[
RTNL_LINK_TX_PACKETS
],

796 
lök
->
l_°©s
[
RTNL_LINK_TX_ERRORS
],

797 
lök
->
l_°©s
[
RTNL_LINK_TX_DROPPED
],

798 
lök
->
l_°©s
[
RTNL_LINK_TX_FIFO_ERR
],

799 
lök
->
l_°©s
[
RTNL_LINK_TX_COMPRESSED
]);

801 
	`∆_dump_löe
(
p
, " Errors:Üength over crc "

804 
	`∆_dump_löe
(
p
, " RX %10" 
PRIu64
 " %10" PRIu64 " %10"

805 
PRIu64
 " %10" PRIu64 " %10" PRIu64 " %10"

806 
PRIu64
 "\n",

807 
lök
->
l_°©s
[
RTNL_LINK_RX_LEN_ERR
],

808 
lök
->
l_°©s
[
RTNL_LINK_RX_OVER_ERR
],

809 
lök
->
l_°©s
[
RTNL_LINK_RX_CRC_ERR
],

810 
lök
->
l_°©s
[
RTNL_LINK_RX_FRAME_ERR
],

811 
lök
->
l_°©s
[
RTNL_LINK_RX_MISSED_ERR
],

812 
lök
->
l_°©s
[
RTNL_LINK_MULTICAST
]);

814 
	`∆_dump_löe
(
p
, "áborted carrier heartbeat "

817 
	`∆_dump_löe
(
p
, " TX %10" 
PRIu64
 " %10" PRIu64 " %10"

818 
PRIu64
 " %10" PRIu64 " %10" PRIu64 "\n",

819 
lök
->
l_°©s
[
RTNL_LINK_TX_ABORT_ERR
],

820 
lök
->
l_°©s
[
RTNL_LINK_TX_CARRIER_ERR
],

821 
lök
->
l_°©s
[
RTNL_LINK_TX_HBEAT_ERR
],

822 
lök
->
l_°©s
[
RTNL_LINK_TX_WIN_ERR
],

823 
lök
->
l_°©s
[
RTNL_LINK_COLLISIONS
]);

825 i‡(
lök
->
l_öfo_›s
 &&Üök->l_öfo_›s->
io_dump
[
NL_DUMP_STATS
])

826 
lök
->
l_öfo_›s
->
io_dump
[
NL_DUMP_STATS
]÷ök, 
p
);

828 
	`do_f‹óch_af
(
lök
, 
af_dump_°©s
, 
p
);

829 
	}
}

832 
	$lök_h™dÀ_evít
(
∆_obje˘
 *
a
, 
π∆_lök_evít_cb
 *
cb
)

834 
π∆_lök
 *
l
 = (π∆_lök *Ë
a
;

835 
∆_ˇche
 *
c
 = 
	`dp_ˇche
(
a
);

836 
√víts
 = 0;

838 i‡(
l
->
l_ch™ge
 == ~0U) {

839 i‡(
l
->
˚_msgty≥
 =
RTM_NEWLINK
)

840 
cb
->
	`À_ªgi°î
(
l
);

842 
cb
->
	`À_uƒegi°î
(
l
);

847 i‡(
l
->
l_ch™ge
 & 
IFF_SLAVE
) {

848 i‡(
l
->
l_Êags
 & 
IFF_SLAVE
) {

849 
π∆_lök
 *
m
 = 
	`π∆_lök_gë
(
c
, 
l
->
l_ma°î
);

850 
cb
->
	`À_√w_b⁄dög
(
l
, 
m
);

851 i‡(
m
)

852 
	`π∆_lök_put
(
m
);

854 
cb
->
	`À_ˇn˚l_b⁄dög
(
l
);

858 i‡(
l
->
l_ch™ge
 & 
IFF_UP
 &&Ü->l_ch™gê& 
IFF_RUNNING
)

859 
	`dp_dump_löe
(
p
, 
löe
++, "link %s changed stateÅo %s.\n",

860 
l
->
l_«me
,Ü->
l_Êags
 & 
IFF_UP
 ? "up" : "down");

862 i‡(
l
->
l_ch™ge
 & 
IFF_PROMISC
) {

863 
	`dp_√w_löe
(
p
, 
löe
++);

864 
	`dp_dump
(
p
, "link %s %sÖromiscuous mode.\n",

865 
l
->
l_«me
,Ü->
l_Êags
 & 
IFF_PROMISC
 ? "entered" : "left");

868 i‡(
löe
 == 0)

869 
	`dp_dump_löe
(
p
, 
löe
++, "link %s sent unknownÉvent.\n",

870 
l
->
l_«me
);

873  
√víts
;

874 
	}
}

878 
	$lök_keygí
(
∆_obje˘
 *
obj
, 
uöt32_t
 *
hashkey
,

879 
uöt32_t
 
èbÀ_sz
)

881 
π∆_lök
 *
lök
 = (π∆_lök *Ë
obj
;

882 
lkey_sz
;

883 
	slök_hash_key
 {

884 
uöt32_t
 
l_ödex
;

885 
uöt32_t
 
l_Ámûy
;

886 } 
	`__©åibuã__
((
∑cked
)Ë
lkey
;

888 
lkey_sz
 = (
lkey
);

889 
lkey
.
l_ödex
 = 
lök
->l_index;

890 
lkey
.
l_Ámûy
 = 
lök
->l_family;

892 *
hashkey
 = 
	`∆_hash
(&
lkey
, 
lkey_sz
, 0Ë% 
èbÀ_sz
;

894 
	`NL_DBG
(5, "link %p key (dev %d fam %d) keysz %d, hash 0x%x\n",

895 
lök
, 
lkey
.
l_ödex
,Ükey.
l_Ámûy
, 
lkey_sz
, *
hashkey
);

898 
	}
}

900 
	$lök_com∑ª
(
∆_obje˘
 *
_a
, ∆_obje˘ *
_b
,

901 
uöt32_t
 
©ås
, 
Êags
)

903 
π∆_lök
 *
a
 = (π∆_lök *Ë
_a
;

904 
π∆_lök
 *
b
 = (π∆_lök *Ë
_b
;

905 
diff
 = 0;

907 
	#LINK_DIFF
(
ATTR
, 
EXPR
Ë
	`ATTR_DIFF
(
©ås
, 
LINK_ATTR_
##ATTR, 
a
, 
b
, EXPR)

	)

909 
diff
 |
	`LINK_DIFF
(
IFINDEX
, 
a
->
l_ödex
 !
b
->l_index);

910 
diff
 |
	`LINK_DIFF
(
MTU
, 
a
->
l_mtu
 !
b
->l_mtu);

911 
diff
 |
	`LINK_DIFF
(
LINK
, 
a
->
l_lök
 !
b
->l_link);

912 
diff
 |
	`LINK_DIFF
(
TXQLEN
, 
a
->
l_txqÀn
 !
b
->l_txqlen);

913 
diff
 |
	`LINK_DIFF
(
WEIGHT
, 
a
->
l_weight
 !
b
->l_weight);

914 
diff
 |
	`LINK_DIFF
(
MASTER
, 
a
->
l_ma°î
 !
b
->l_master);

915 
diff
 |
	`LINK_DIFF
(
FAMILY
, 
a
->
l_Ámûy
 !
b
->l_family);

916 
diff
 |
	`LINK_DIFF
(
OPERSTATE
, 
a
->
l_›î°©e
 !
b
->l_operstate);

917 
diff
 |
	`LINK_DIFF
(
LINKMODE
, 
a
->
l_lökmode
 !
b
->l_linkmode);

918 
diff
 |
	`LINK_DIFF
(
QDISC
, 
	`°rcmp
(
a
->
l_qdisc
, 
b
->l_qdisc));

919 
diff
 |
	`LINK_DIFF
(
IFNAME
, 
	`°rcmp
(
a
->
l_«me
, 
b
->l_name));

920 
diff
 |
	`LINK_DIFF
(
ADDR
, 
	`∆_addr_cmp
(
a
->
l_addr
, 
b
->l_addr));

921 
diff
 |
	`LINK_DIFF
(
BRD
, 
	`∆_addr_cmp
(
a
->
l_bˇ°
, 
b
->l_bcast));

922 
diff
 |
	`LINK_DIFF
(
IFALIAS
, 
	`°rcmp
(
a
->
l_iÁlüs
, 
b
->l_ifalias));

923 
diff
 |
	`LINK_DIFF
(
NUM_VF
, 
a
->
l_num_vf
 !
b
->l_num_vf);

924 
diff
 |
	`LINK_DIFF
(
PROMISCUITY
, 
a
->
l_¥omiscuôy
 !
b
->l_promiscuity);

925 
diff
 |
	`LINK_DIFF
(
NUM_TX_QUEUES
,
a
->
l_num_tx_queues
 !
b
->l_num_tx_queues);

926 
diff
 |
	`LINK_DIFF
(
NUM_RX_QUEUES
,
a
->
l_num_rx_queues
 !
b
->l_num_rx_queues);

927 
diff
 |
	`LINK_DIFF
(
GROUP
, 
a
->
l_group
 !
b
->l_group);

929 i‡(
Êags
 & 
LOOSE_COMPARISON
)

930 
diff
 |
	`LINK_DIFF
(
FLAGS
,

931 (
a
->
l_Êags
 ^ 
b
->l_ÊagsË& b->
l_Êag_mask
);

933 
diff
 |
	`LINK_DIFF
(
FLAGS
, 
a
->
l_Êags
 !
b
->l_flags);

938 i‡(
a
->
l_Ámûy
 =
b
->l_family) {

939 i‡(
	`π∆_lök_af_d©a_com∑ª
(
a
, 
b
,á->
l_Ámûy
) != 0)

940 
¥Ÿöfo_mism©ch
;

943 
out
:

944  
diff
;

946 
¥Ÿöfo_mism©ch
:

947 
diff
 |
	`LINK_DIFF
(
PROTINFO
, 1);

948 
out
;

950 #unde‡
LINK_DIFF


951 
	}
}

953 c⁄° 
å™s_tbl
 
	glök_©ås
[] = {

954 
__ADD
(
LINK_ATTR_MTU
, 
mtu
)

955 
__ADD
(
LINK_ATTR_LINK
, 
lök
)

956 
__ADD
(
LINK_ATTR_TXQLEN
, 
txqÀn
)

957 
__ADD
(
LINK_ATTR_WEIGHT
, 
weight
)

958 
__ADD
(
LINK_ATTR_MASTER
, 
ma°î
)

959 
__ADD
(
LINK_ATTR_QDISC
, 
qdisc
)

960 
__ADD
(
LINK_ATTR_MAP
, 
m≠
)

961 
__ADD
(
LINK_ATTR_ADDR
, 
addªss
)

962 
__ADD
(
LINK_ATTR_BRD
, 
brﬂdˇ°
)

963 
__ADD
(
LINK_ATTR_FLAGS
, 
Êags
)

964 
__ADD
(
LINK_ATTR_IFNAME
, 
«me
)

965 
__ADD
(
LINK_ATTR_IFINDEX
, 
ifödex
)

966 
__ADD
(
LINK_ATTR_FAMILY
, 
Ámûy
)

967 
__ADD
(
LINK_ATTR_ARPTYPE
, 
¨±y≥
)

968 
__ADD
(
LINK_ATTR_STATS
, 
°©s
)

969 
__ADD
(
LINK_ATTR_CHANGE
, 
ch™ge
)

970 
__ADD
(
LINK_ATTR_OPERSTATE
, 
›î°©e
)

971 
__ADD
(
LINK_ATTR_LINKMODE
, 
lökmode
)

972 
__ADD
(
LINK_ATTR_IFALIAS
, 
iÁlüs
)

973 
__ADD
(
LINK_ATTR_NUM_VF
, 
num_vf
)

974 
__ADD
(
LINK_ATTR_PROMISCUITY
, 
¥omiscuôy
)

975 
__ADD
(
LINK_ATTR_NUM_TX_QUEUES
, 
num_tx_queues
)

976 
__ADD
(
LINK_ATTR_NUM_RX_QUEUES
, 
num_rx_queues
)

977 
__ADD
(
LINK_ATTR_GROUP
, 
group
)

978 
__ADD
(
LINK_ATTR_CARRIER
, 
ˇºõr
)

979 
__ADD
(
LINK_ATTR_PHYS_PORT_ID
, 
phys_p‹t_id
)

982 *
	$lök_©ås2°r
(
©ås
, *
buf
, 
size_t
 
Àn
)

984  
	`__Êags2°r
(
©ås
, 
buf
, 
Àn
, 
lök_©ås
,

985 
	`ARRAY_SIZE
(
lök_©ås
));

986 
	}
}

1018 
	$π∆_lök_Æloc_ˇche
(
∆_sock
 *
sk
, 
Ámûy
, 
∆_ˇche
 **
ªsu…
)

1020 
∆_ˇche
 * 
ˇche
;

1021 
îr
;

1023 
ˇche
 = 
	`∆_ˇche_Æloc
(&
π∆_lök_›s
);

1024 i‡(!
ˇche
)

1025  -
NLE_NOMEM
;

1027 
ˇche
->
c_ürg1
 = 
Ámûy
;

1029 i‡(
sk
 && (
îr
 = 
	`∆_ˇche_ªfûl
(sk, 
ˇche
)) < 0) {

1030 
	`∆_ˇche_‰ì
(
ˇche
);

1031  
îr
;

1034 *
ªsu…
 = 
ˇche
;

1036 
	}
}

1053 
π∆_lök
 *
	$π∆_lök_gë
(
∆_ˇche
 *
ˇche
, 
ifödex
)

1055 
π∆_lök
 *
lök
;

1057 i‡(
ˇche
->
c_›s
 !&
π∆_lök_›s
)

1058  
NULL
;

1060 
	`∆_li°_f‹_óch_íåy
(
lök
, &
ˇche
->
c_ôems
, 
˚_li°
) {

1061 i‡(
lök
->
l_ödex
 =
ifödex
) {

1062 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
lök
);

1063  
lök
;

1067  
NULL
;

1068 
	}
}

1085 
π∆_lök
 *
	$π∆_lök_gë_by_«me
(
∆_ˇche
 *
ˇche
,

1086 c⁄° *
«me
)

1088 
π∆_lök
 *
lök
;

1090 i‡(
ˇche
->
c_›s
 !&
π∆_lök_›s
)

1091  
NULL
;

1093 
	`∆_li°_f‹_óch_íåy
(
lök
, &
ˇche
->
c_ôems
, 
˚_li°
) {

1094 i‡(!
	`°rcmp
(
«me
, 
lök
->
l_«me
)) {

1095 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
lök
);

1096  
lök
;

1100  
NULL
;

1101 
	}
}

1117 
	$π∆_lök_buûd_gë_ªque°
(
ifödex
, c⁄° *
«me
,

1118 
∆_msg
 **
ªsu…
)

1120 
iföfomsg
 
ifi
;

1121 
∆_msg
 *
msg
;

1123 i‡(
ifödex
 <0 && !
«me
) {

1124 
	`APPBUG
("ifindex orÇame must be specified");

1125  -
NLE_MISSING_ATTR
;

1128 
	`mem£t
(&
ifi
, 0, (ifi));

1130 i‡(!(
msg
 = 
	`∆msg_Æloc_sim∂e
(
RTM_GETLINK
, 0)))

1131  -
NLE_NOMEM
;

1133 i‡(
ifödex
 > 0)

1134 
ifi
.
ifi_ödex
 = 
ifödex
;

1136 i‡(
	`∆msg_≠≥nd
(
msg
, &
ifi
, (ifi), 
NLMSG_ALIGNTO
) < 0)

1137 
∆a_put_Áûuª
;

1139 i‡(
«me
)

1140 
	`NLA_PUT_STRING
(
msg
, 
IFLA_IFNAME
, 
«me
);

1142 *
ªsu…
 = 
msg
;

1145 
∆a_put_Áûuª
:

1146 
	`∆msg_‰ì
(
msg
);

1147  -
NLE_MSGSIZE
;

1148 
	}
}

1166 
	$π∆_lök_gë_kî√l
(
∆_sock
 *
sk
, 
ifödex
, c⁄° *
«me
,

1167 
π∆_lök
 **
ªsu…
)

1169 
∆_msg
 *
msg
 = 
NULL
;

1170 
∆_obje˘
 *
obj
;

1171 
îr
;

1173 i‡((
îr
 = 
	`π∆_lök_buûd_gë_ªque°
(
ifödex
, 
«me
, &
msg
)) < 0)

1174  
îr
;

1176 
îr
 = 
	`∆_£nd_auto
(
sk
, 
msg
);

1177 
	`∆msg_‰ì
(
msg
);

1178 i‡(
îr
 < 0)

1179  
îr
;

1181 i‡((
îr
 = 
	`∆_pickup
(
sk
, 
lök_msg_∑r£r
, &
obj
)) < 0)

1182  
îr
;

1185 *
ªsu…
 = (
π∆_lök
 *Ë
obj
;

1188 i‡(
îr
 =0 && 
obj
)

1189 
	`waô_f‹_ack
(
sk
);

1192 
	}
}

1208 * 
	$π∆_lök_i2«me
(
∆_ˇche
 *
ˇche
, 
ifödex
, *
d°
,

1209 
size_t
 
Àn
)

1211 
π∆_lök
 *
lök
 = 
	`π∆_lök_gë
(
ˇche
, 
ifödex
);

1213 i‡(
lök
) {

1214 
	`°∫˝y
(
d°
, 
lök
->
l_«me
, 
Àn
 - 1);

1215 
	`π∆_lök_put
(
lök
);

1216  
d°
;

1219  
NULL
;

1220 
	}
}

1231 
	$π∆_lök_«me2i
(
∆_ˇche
 *
ˇche
, c⁄° *
«me
)

1233 
ifödex
 = 0;

1234 
π∆_lök
 *
lök
;

1236 
lök
 = 
	`π∆_lök_gë_by_«me
(
ˇche
, 
«me
);

1237 i‡(
lök
) {

1238 
ifödex
 = 
lök
->
l_ödex
;

1239 
	`π∆_lök_put
(
lök
);

1242  
ifödex
;

1243 
	}
}

1247 
	$π∆_lök_fûl_öfo
(
∆_msg
 *
msg
, 
π∆_lök
 *
lök
)

1249 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_ADDR
)

1250 
	`NLA_PUT_ADDR
(
msg
, 
IFLA_ADDRESS
, 
lök
->
l_addr
);

1252 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_BRD
)

1253 
	`NLA_PUT_ADDR
(
msg
, 
IFLA_BROADCAST
, 
lök
->
l_bˇ°
);

1255 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_MTU
)

1256 
	`NLA_PUT_U32
(
msg
, 
IFLA_MTU
, 
lök
->
l_mtu
);

1258 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_TXQLEN
)

1259 
	`NLA_PUT_U32
(
msg
, 
IFLA_TXQLEN
, 
lök
->
l_txqÀn
);

1261 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_WEIGHT
)

1262 
	`NLA_PUT_U32
(
msg
, 
IFLA_WEIGHT
, 
lök
->
l_weight
);

1264 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_IFNAME
)

1265 
	`NLA_PUT_STRING
(
msg
, 
IFLA_IFNAME
, 
lök
->
l_«me
);

1267 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_OPERSTATE
)

1268 
	`NLA_PUT_U8
(
msg
, 
IFLA_OPERSTATE
, 
lök
->
l_›î°©e
);

1270 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_CARRIER
)

1271 
	`NLA_PUT_U8
(
msg
, 
IFLA_CARRIER
, 
lök
->
l_ˇºõr
);

1273 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_LINKMODE
)

1274 
	`NLA_PUT_U8
(
msg
, 
IFLA_LINKMODE
, 
lök
->
l_lökmode
);

1276 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_IFALIAS
)

1277 
	`NLA_PUT_STRING
(
msg
, 
IFLA_IFALIAS
, 
lök
->
l_iÁlüs
);

1279 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_LINK
)

1280 
	`NLA_PUT_U32
(
msg
, 
IFLA_LINK
, 
lök
->
l_lök
);

1282 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_MASTER
)

1283 
	`NLA_PUT_U32
(
msg
, 
IFLA_MASTER
, 
lök
->
l_ma°î
);

1285 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_NUM_TX_QUEUES
)

1286 
	`NLA_PUT_U32
(
msg
, 
IFLA_NUM_TX_QUEUES
, 
lök
->
l_num_tx_queues
);

1288 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_NUM_RX_QUEUES
)

1289 
	`NLA_PUT_U32
(
msg
, 
IFLA_NUM_RX_QUEUES
, 
lök
->
l_num_rx_queues
);

1291 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_NS_FD
)

1292 
	`NLA_PUT_U32
(
msg
, 
IFLA_NET_NS_FD
, 
lök
->
l_ns_fd
);

1294 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_NS_PID
)

1295 
	`NLA_PUT_U32
(
msg
, 
IFLA_NET_NS_PID
, 
lök
->
l_ns_pid
);

1299 
∆a_put_Áûuª
:

1300  -
NLE_MSGSIZE
;

1301 
	}
}

1303 
	$buûd_lök_msg
(
cmd
, 
iföfomsg
 *
hdr
,

1304 
π∆_lök
 *
lök
, 
Êags
, 
∆_msg
 **
ªsu…
)

1306 
∆_msg
 *
msg
;

1307 
∆©å
 *
af_•ec
;

1309 
msg
 = 
	`∆msg_Æloc_sim∂e
(
cmd
, 
Êags
);

1310 i‡(!
msg
)

1311  -
NLE_NOMEM
;

1313 i‡(
	`∆msg_≠≥nd
(
msg
, 
hdr
, (*hdr), 
NLMSG_ALIGNTO
) < 0)

1314 
∆a_put_Áûuª
;

1316 i‡(
	`π∆_lök_fûl_öfo
(
msg
, 
lök
))

1317 
∆a_put_Áûuª
;

1319 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_GROUP
)

1320 
	`NLA_PUT_U32
(
msg
, 
IFLA_GROUP
, 
lök
->
l_group
);

1322 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_LINKINFO
) {

1323 
∆©å
 *
öfo
;

1325 i‡(!(
öfo
 = 
	`∆a_√°_°¨t
(
msg
, 
IFLA_LINKINFO
)))

1326 
∆a_put_Áûuª
;

1328 
	`NLA_PUT_STRING
(
msg
, 
IFLA_INFO_KIND
, 
lök
->
l_öfo_köd
);

1330 i‡(
lök
->
l_öfo_›s
) {

1331 i‡(
lök
->
l_öfo_›s
->
io_put_©ås
 &&

1332 
lök
->
l_öfo_›s
->
	`io_put_©ås
(
msg
,Üink) < 0)

1333 
∆a_put_Áûuª
;

1336 
	`∆a_√°_íd
(
msg
, 
öfo
);

1339 i‡(!(
af_•ec
 = 
	`∆a_√°_°¨t
(
msg
, 
IFLA_AF_SPEC
)))

1340 
∆a_put_Áûuª
;

1342 i‡(
	`do_f‹óch_af
(
lök
, 
af_fûl
, 
msg
) < 0)

1343 
∆a_put_Áûuª
;

1345 
	`∆a_√°_íd
(
msg
, 
af_•ec
);

1347 *
ªsu…
 = 
msg
;

1350 
∆a_put_Áûuª
:

1351 
	`∆msg_‰ì
(
msg
);

1352  -
NLE_MSGSIZE
;

1353 
	}
}

1376 
	$π∆_lök_buûd_add_ªque°
(
π∆_lök
 *
lök
, 
Êags
,

1377 
∆_msg
 **
ªsu…
)

1379 
iföfomsg
 
ifi
 = {

1380 .
ifi_Ámûy
 = 
lök
->
l_Ámûy
,

1381 .
ifi_ödex
 = 
lök
->
l_ödex
,

1382 .
ifi_Êags
 = 
lök
->
l_Êags
,

1385  
	`buûd_lök_msg
(
RTM_NEWLINK
, &
ifi
, 
lök
, 
Êags
, 
ªsu…
);

1386 
	}
}

1405 
	$π∆_lök_add
(
∆_sock
 *
sk
, 
π∆_lök
 *
lök
, 
Êags
)

1407 
∆_msg
 *
msg
;

1408 
îr
;

1410 
îr
 = 
	`π∆_lök_buûd_add_ªque°
(
lök
, 
Êags
, &
msg
);

1411 i‡(
îr
 < 0)

1412  
îr
;

1414  
	`∆_£nd_sync
(
sk
, 
msg
);

1415 
	}
}

1437 
	$π∆_lök_buûd_ch™ge_ªque°
(
π∆_lök
 *
‹ig
,

1438 
π∆_lök
 *
ch™ges
, 
Êags
,

1439 
∆_msg
 **
ªsu…
)

1441 
iföfomsg
 
ifi
 = {

1442 .
ifi_Ámûy
 = 
‹ig
->
l_Ámûy
,

1443 .
ifi_ödex
 = 
‹ig
->
l_ödex
,

1445 
îr
;

1447 i‡(
ch™ges
->
˚_mask
 & 
LINK_ATTR_FLAGS
) {

1448 
ifi
.
ifi_Êags
 = 
‹ig
->
l_Êags
 & ~
ch™ges
->
l_Êag_mask
;

1449 
ifi
.
ifi_Êags
 |
ch™ges
->
l_Êags
;

1452 i‡(
ch™ges
->
l_Ámûy
 && ch™ges->l_Ámûy !
‹ig
->l_family) {

1453 
	`APPBUG
("link change: family is immutable");

1454  -
NLE_IMMUTABLE
;

1458 i‡(
‹ig
->
˚_mask
 & 
LINK_ATTR_IFINDEX
 &&

1459 
‹ig
->
˚_mask
 & 
LINK_ATTR_IFNAME
 &&

1460 
ch™ges
->
˚_mask
 & 
LINK_ATTR_IFNAME
 &&

1461 !
	`°rcmp
(
‹ig
->
l_«me
, 
ch™ges
->l_name))

1462 
ch™ges
->
˚_mask
 &~
LINK_ATTR_IFNAME
;

1464 i‡((
îr
 = 
	`buûd_lök_msg
(
RTM_NEWLINK
, &
ifi
, 
ch™ges
, 
Êags
, 
ªsu…
)) < 0)

1465 
îrout
;

1469 
îrout
:

1470  
îr
;

1471 
	}
}

1504 
	$π∆_lök_ch™ge
(
∆_sock
 *
sk
, 
π∆_lök
 *
‹ig
,

1505 
π∆_lök
 *
ch™ges
, 
Êags
)

1507 
∆_msg
 *
msg
;

1508 
îr
;

1510 
îr
 = 
	`π∆_lök_buûd_ch™ge_ªque°
(
‹ig
, 
ch™ges
, 
Êags
, &
msg
);

1511 i‡(
îr
 < 0)

1512  
îr
;

1514 
ªåy
:

1515 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sk
, 
msg
);

1516 i‡(
îr
 < 0)

1517 
îrout
;

1519 
îr
 = 
	`waô_f‹_ack
(
sk
);

1520 i‡(
îr
 =-
NLE_OPNOTSUPP
 && 
msg
->
nm_∆h
->
∆msg_ty≥
 =
RTM_NEWLINK
) {

1521 
msg
->
nm_∆h
->
∆msg_ty≥
 = 
RTM_SETLINK
;

1522 
ªåy
;

1525 
îrout
:

1526 
	`∆msg_‰ì
(
msg
);

1527  
îr
;

1528 
	}
}

1550 
	$π∆_lök_buûd_dñëe_ªque°
(c⁄° 
π∆_lök
 *
lök
,

1551 
∆_msg
 **
ªsu…
)

1553 
∆_msg
 *
msg
;

1554 
iföfomsg
 
ifi
 = {

1555 .
ifi_ödex
 = 
lök
->
l_ödex
,

1558 i‡(!(
lök
->
˚_mask
 & (
LINK_ATTR_IFINDEX
 | 
LINK_ATTR_IFNAME
))) {

1559 
	`APPBUG
("ifindex orÇame must be specified");

1560  -
NLE_MISSING_ATTR
;

1563 i‡(!(
msg
 = 
	`∆msg_Æloc_sim∂e
(
RTM_DELLINK
, 0)))

1564  -
NLE_NOMEM
;

1566 i‡(
	`∆msg_≠≥nd
(
msg
, &
ifi
, (ifi), 
NLMSG_ALIGNTO
) < 0)

1567 
∆a_put_Áûuª
;

1569 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_IFNAME
)

1570 
	`NLA_PUT_STRING
(
msg
, 
IFLA_IFNAME
, 
lök
->
l_«me
);

1572 *
ªsu…
 = 
msg
;

1575 
∆a_put_Áûuª
:

1576 
	`∆msg_‰ì
(
msg
);

1577  -
NLE_MSGSIZE
;

1578 
	}
}

1604 
	$π∆_lök_dñëe
(
∆_sock
 *
sk
, c⁄° 
π∆_lök
 *
lök
)

1606 
∆_msg
 *
msg
;

1607 
îr
;

1609 i‡((
îr
 = 
	`π∆_lök_buûd_dñëe_ªque°
(
lök
, &
msg
)) < 0)

1610  
îr
;

1612  
	`∆_£nd_sync
(
sk
, 
msg
);

1613 
	}
}

1628 
π∆_lök
 *
	$π∆_lök_Æloc
()

1630  (
π∆_lök
 *Ë
	`∆_obje˘_Æloc
(&
lök_obj_›s
);

1631 
	}
}

1637 
	$π∆_lök_put
(
π∆_lök
 *
lök
)

1639 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
lök
);

1640 
	}
}

1656 
	$π∆_lök_£t_«me
(
π∆_lök
 *
lök
, c⁄° *
«me
)

1658 
	`°∫˝y
(
lök
->
l_«me
, 
«me
, (link->l_name) - 1);

1659 
lök
->
˚_mask
 |
LINK_ATTR_IFNAME
;

1660 
	}
}

1670 *
	$π∆_lök_gë_«me
(
π∆_lök
 *
lök
)

1672  
lök
->
˚_mask
 & 
LINK_ATTR_IFNAME
 ?Üök->
l_«me
 : 
NULL
;

1673 
	}
}

1680 
	$π∆_lök_£t_group
(
π∆_lök
 *
lök
, 
uöt32_t
 
group
)

1682 
lök
->
l_group
 = 
group
;

1683 
lök
->
˚_mask
 |
LINK_ATTR_GROUP
;

1684 
	}
}

1692 
uöt32_t
 
	$π∆_lök_gë_group
(
π∆_lök
 *
lök
)

1694  
lök
->
l_group
;

1695 
	}
}

1697 
ölöe
 
	$__assign_addr
(
π∆_lök
 *
lök
, 
∆_addr
 **
pos
,

1698 
∆_addr
 *
√w
, 
Êag
)

1700 i‡(*
pos
)

1701 
	`∆_addr_put
(*
pos
);

1703 
	`∆_addr_gë
(
√w
);

1704 *
pos
 = 
√w
;

1706 
lök
->
˚_mask
 |
Êag
;

1707 
	}
}

1720 
	$π∆_lök_£t_addr
(
π∆_lök
 *
lök
, 
∆_addr
 *
addr
)

1722 
	`__assign_addr
(
lök
, &lök->
l_addr
, 
addr
, 
LINK_ATTR_ADDR
);

1723 
	}
}

1734 
∆_addr
 *
	$π∆_lök_gë_addr
(
π∆_lök
 *
lök
)

1736  
lök
->
˚_mask
 & 
LINK_ATTR_ADDR
 ?Üök->
l_addr
 : 
NULL
;

1737 
	}
}

1751 
	$π∆_lök_£t_brﬂdˇ°
(
π∆_lök
 *
lök
, 
∆_addr
 *
addr
)

1753 
	`__assign_addr
(
lök
, &lök->
l_bˇ°
, 
addr
, 
LINK_ATTR_BRD
);

1754 
	}
}

1765 
∆_addr
 *
	$π∆_lök_gë_brﬂdˇ°
(
π∆_lök
 *
lök
)

1767  
lök
->
˚_mask
 & 
LINK_ATTR_BRD
 ?Üök->
l_bˇ°
 : 
NULL
;

1768 
	}
}

1778 
	$π∆_lök_£t_Êags
(
π∆_lök
 *
lök
, 
Êags
)

1780 
lök
->
l_Êag_mask
 |
Êags
;

1781 
lök
->
l_Êags
 |
Êags
;

1782 
lök
->
˚_mask
 |
LINK_ATTR_FLAGS
;

1783 
	}
}

1793 
	$π∆_lök_un£t_Êags
(
π∆_lök
 *
lök
, 
Êags
)

1795 
lök
->
l_Êag_mask
 |
Êags
;

1796 
lök
->
l_Êags
 &~
Êags
;

1797 
lök
->
˚_mask
 |
LINK_ATTR_FLAGS
;

1798 
	}
}

1809 
	$π∆_lök_gë_Êags
(
π∆_lök
 *
lök
)

1811  
lök
->
l_Êags
;

1812 
	}
}

1819 
	$π∆_lök_£t_Ámûy
(
π∆_lök
 *
lök
, 
Ámûy
)

1821 
lök
->
l_Ámûy
 = 
Ámûy
;

1822 
lök
->
˚_mask
 |
LINK_ATTR_FAMILY
;

1824 i‡(
lök
->
l_af_›s
) {

1825 
	`af_‰ì
(
lök
,Üök->
l_af_›s
,

1826 
lök
->
l_af_d©a
[lök->
l_af_›s
->
ao_Ámûy
], 
NULL
);

1827 
lök
->
l_af_d©a
[lök->
l_af_›s
->
ao_Ámûy
] = 
NULL
;

1830 
lök
->
l_af_›s
 = 
	`af_lookup_™d_Æloc
÷ök, 
Ámûy
);

1831 
	}
}

1840 
	$π∆_lök_gë_Ámûy
(
π∆_lök
 *
lök
)

1842  
lök
->
˚_mask
 & 
LINK_ATTR_FAMILY
 ?Üök->
l_Ámûy
 : 
AF_UNSPEC
;

1843 
	}
}

1854 
	$π∆_lök_£t_¨±y≥
(
π∆_lök
 *
lök
, 
¨±y≥
)

1856 
lök
->
l_¨±y≥
 = 
¨±y≥
;

1857 
lök
->
˚_mask
 |
LINK_ATTR_ARPTYPE
;

1858 
	}
}

1868 
	$π∆_lök_gë_¨±y≥
(
π∆_lök
 *
lök
)

1870 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_ARPTYPE
)

1871  
lök
->
l_¨±y≥
;

1873  
ARPHRD_VOID
;

1874 
	}
}

1884 
	$π∆_lök_£t_ifödex
(
π∆_lök
 *
lök
, 
ifödex
)

1886 
lök
->
l_ödex
 = 
ifödex
;

1887 
lök
->
˚_mask
 |
LINK_ATTR_IFINDEX
;

1888 
	}
}

1899 
	$π∆_lök_gë_ifödex
(
π∆_lök
 *
lök
)

1901  
lök
->
l_ödex
;

1902 
	}
}

1912 
	$π∆_lök_£t_mtu
(
π∆_lök
 *
lök
, 
mtu
)

1914 
lök
->
l_mtu
 = 
mtu
;

1915 
lök
->
˚_mask
 |
LINK_ATTR_MTU
;

1916 
	}
}

1926 
	$π∆_lök_gë_mtu
(
π∆_lök
 *
lök
)

1928  
lök
->
l_mtu
;

1929 
	}
}

1941 
	$π∆_lök_£t_txqÀn
(
π∆_lök
 *
lök
, 
txqÀn
)

1943 
lök
->
l_txqÀn
 = 
txqÀn
;

1944 
lök
->
˚_mask
 |
LINK_ATTR_TXQLEN
;

1945 
	}
}

1957 
	$π∆_lök_gë_txqÀn
(
π∆_lök
 *
lök
)

1959  
lök
->
˚_mask
 & 
LINK_ATTR_TXQLEN
 ?Üök->
l_txqÀn
 : 0;

1960 
	}
}

1962 
	$π∆_lök_£t_lök
(
π∆_lök
 *
lök
, 
ifödex
)

1964 
lök
->
l_lök
 = 
ifödex
;

1965 
lök
->
˚_mask
 |
LINK_ATTR_LINK
;

1966 
	}
}

1968 
	$π∆_lök_gë_lök
(
π∆_lök
 *
lök
)

1970  
lök
->
l_lök
;

1971 
	}
}

1980 
	$π∆_lök_£t_ma°î
(
π∆_lök
 *
lök
, 
ifödex
)

1982 
lök
->
l_ma°î
 = 
ifödex
;

1983 
lök
->
˚_mask
 |
LINK_ATTR_MASTER
;

1984 
	}
}

1993 
	$π∆_lök_gë_ma°î
(
π∆_lök
 *
lök
)

1995  
lök
->
l_ma°î
;

1996 
	}
}

2005 
	$π∆_lök_£t_ˇºõr
(
π∆_lök
 *
lök
, 
uöt8_t
 
°©us
)

2007 
lök
->
l_ˇºõr
 = 
°©us
;

2008 
lök
->
˚_mask
 |
LINK_ATTR_CARRIER
;

2009 
	}
}

2018 
uöt8_t
 
	$π∆_lök_gë_ˇºõr
(
π∆_lök
 *
lök
)

2020  
lök
->
l_ˇºõr
;

2021 
	}
}

2031 
	$π∆_lök_£t_›î°©e
(
π∆_lök
 *
lök
, 
uöt8_t
 
°©us
)

2033 
lök
->
l_›î°©e
 = 
°©us
;

2034 
lök
->
˚_mask
 |
LINK_ATTR_OPERSTATE
;

2035 
	}
}

2045 
uöt8_t
 
	$π∆_lök_gë_›î°©e
(
π∆_lök
 *
lök
)

2047  
lök
->
l_›î°©e
;

2048 
	}
}

2058 
	$π∆_lök_£t_lökmode
(
π∆_lök
 *
lök
, 
uöt8_t
 
mode
)

2060 
lök
->
l_lökmode
 = 
mode
;

2061 
lök
->
˚_mask
 |
LINK_ATTR_LINKMODE
;

2062 
	}
}

2072 
uöt8_t
 
	$π∆_lök_gë_lökmode
(
π∆_lök
 *
lök
)

2074  
lök
->
l_lökmode
;

2075 
	}
}

2085 c⁄° *
	$π∆_lök_gë_iÁlüs
(
π∆_lök
 *
lök
)

2087  
lök
->
l_iÁlüs
;

2088 
	}
}

2102 
	$π∆_lök_£t_iÁlüs
(
π∆_lök
 *
lök
, c⁄° *
Æüs
)

2104 
	`‰ì
(
lök
->
l_iÁlüs
);

2106 i‡(
Æüs
) {

2107 
lök
->
l_iÁlüs
 = 
	`°rdup
(
Æüs
);

2108 
lök
->
˚_mask
 |
LINK_ATTR_IFALIAS
;

2110 
lök
->
l_iÁlüs
 = 
NULL
;

2111 
lök
->
˚_mask
 &~
LINK_ATTR_IFALIAS
;

2113 
	}
}

2128 
	$π∆_lök_£t_qdisc
(
π∆_lök
 *
lök
, c⁄° *
«me
)

2130 
	`°∫˝y
(
lök
->
l_qdisc
, 
«me
, (link->l_qdisc) - 1);

2131 
lök
->
˚_mask
 |
LINK_ATTR_QDISC
;

2132 
	}
}

2142 *
	$π∆_lök_gë_qdisc
(
π∆_lök
 *
lök
)

2144  
lök
->
˚_mask
 & 
LINK_ATTR_QDISC
 ?Üök->
l_qdisc
 : 
NULL
;

2145 
	}
}

2155 
	$π∆_lök_gë_num_vf
(
π∆_lök
 *
lök
, 
uöt32_t
 *
num_vf
)

2157 i‡(
lök
->
˚_mask
 & 
LINK_ATTR_NUM_VF
) {

2158 *
num_vf
 = 
lök
->
l_num_vf
;

2161  -
NLE_OPNOTSUPP
;

2162 
	}
}

2171 
uöt64_t
 
	$π∆_lök_gë_°©
(
π∆_lök
 *
lök
, 
π∆_lök_°©_id_t
 
id
)

2173 i‡(
id
 > 
RTNL_LINK_STATS_MAX
)

2176  
lök
->
l_°©s
[
id
];

2177 
	}
}

2190 
	$π∆_lök_£t_°©
(
π∆_lök
 *
lök
, 
π∆_lök_°©_id_t
 
id
,

2191 c⁄° 
uöt64_t
 
vÆue
)

2193 i‡(
id
 > 
RTNL_LINK_STATS_MAX
)

2194  -
NLE_INVAL
;

2196 
lök
->
l_°©s
[
id
] = 
vÆue
;

2199 
	}
}

2213 
	$π∆_lök_£t_ty≥
(
π∆_lök
 *
lök
, c⁄° *
ty≥
)

2215 
π∆_lök_öfo_›s
 *
io
;

2216 
îr
;

2217 *
köd
;

2219 
	`‰ì
(
lök
->
l_öfo_köd
);

2220 
lök
->
˚_mask
 &~
LINK_ATTR_LINKINFO
;

2221 i‡(
lök
->
l_öfo_›s
)

2222 
	`ªÀa£_lök_öfo
(
lök
);

2224 i‡(!
ty≥
)

2227 
köd
 = 
	`°rdup
(
ty≥
);

2228 i‡(!
köd
)

2229  -
NLE_NOMEM
;

2231 
io
 = 
	`π∆_lök_öfo_›s_lookup
(
ty≥
);

2232 i‡(
io
) {

2233 i‡(
io
->
io_Æloc
 && (
îr
 = io->
	`io_Æloc
(
lök
)) < 0)

2234 
îrout
;

2236 
lök
->
l_öfo_›s
 = 
io
;

2239 
lök
->
l_öfo_köd
 = 
köd
;

2240 
lök
->
˚_mask
 |
LINK_ATTR_LINKINFO
;

2244 
îrout
:

2245 
	`‰ì
(
köd
);

2246  
îr
;

2247 
	}
}

2256 *
	$π∆_lök_gë_ty≥
(
π∆_lök
 *
lök
)

2258  
lök
->
l_öfo_köd
;

2259 
	}
}

2270 
	$π∆_lök_£t_¥omiscuôy
(
π∆_lök
 *
lök
, 
uöt32_t
 
cou¡
)

2272 
lök
->
l_¥omiscuôy
 = 
cou¡
;

2273 
lök
->
˚_mask
 |
LINK_ATTR_PROMISCUITY
;

2274 
	}
}

2283 
uöt32_t
 
	$π∆_lök_gë_¥omiscuôy
(
π∆_lök
 *
lök
)

2285  
lök
->
l_¥omiscuôy
;

2286 
	}
}

2302 
	$π∆_lök_£t_num_tx_queues
(
π∆_lök
 *
lök
, 
uöt32_t
 
nqueues
)

2304 
lök
->
l_num_tx_queues
 = 
nqueues
;

2305 
lök
->
˚_mask
 |
LINK_ATTR_NUM_TX_QUEUES
;

2306 
	}
}

2314 
uöt32_t
 
	$π∆_lök_gë_num_tx_queues
(
π∆_lök
 *
lök
)

2316  
lök
->
l_num_tx_queues
;

2317 
	}
}

2333 
	$π∆_lök_£t_num_rx_queues
(
π∆_lök
 *
lök
, 
uöt32_t
 
nqueues
)

2335 
lök
->
l_num_rx_queues
 = 
nqueues
;

2336 
lök
->
˚_mask
 |
LINK_ATTR_NUM_RX_QUEUES
;

2337 
	}
}

2345 
uöt32_t
 
	$π∆_lök_gë_num_rx_queues
(
π∆_lök
 *
lök
)

2347  
lök
->
l_num_rx_queues
;

2348 
	}
}

2356 
∆_d©a
 *
	$π∆_lök_gë_phys_p‹t_id
(
π∆_lök
 *
lök
)

2358  
lök
->
l_phys_p‹t_id
;

2359 
	}
}

2361 
	$π∆_lök_£t_ns_fd
(
π∆_lök
 *
lök
, 
fd
)

2363 
lök
->
l_ns_fd
 = 
fd
;

2364 
lök
->
˚_mask
 |
LINK_ATTR_NS_FD
;

2365 
	}
}

2367 
	$π∆_lök_gë_ns_fd
(
π∆_lök
 *
lök
)

2369  
lök
->
l_ns_fd
;

2370 
	}
}

2372 
	$π∆_lök_£t_ns_pid
(
π∆_lök
 *
lök
, 
pid_t
 
pid
)

2374 
lök
->
l_ns_pid
 = 
pid
;

2375 
lök
->
˚_mask
 |
LINK_ATTR_NS_PID
;

2376 
	}
}

2378 
pid_t
 
	$π∆_lök_gë_ns_pid
(
π∆_lök
 *
lök
)

2380  
lök
->
l_ns_pid
;

2381 
	}
}

2403 
	$π∆_lök_í¶ave_ifödex
(
∆_sock
 *
sock
, 
ma°î
, 
¶ave
)

2405 
π∆_lök
 *
lök
;

2406 
îr
;

2408 i‡(!(
lök
 = 
	`π∆_lök_Æloc
()))

2409  -
NLE_NOMEM
;

2411 
	`π∆_lök_£t_ifödex
(
lök
, 
¶ave
);

2412 
	`π∆_lök_£t_ma°î
(
lök
, 
ma°î
);

2414 i‡((
îr
 = 
	`π∆_lök_ch™ge
(
sock
, 
lök
,Üink, 0)) < 0)

2415 
îrout
;

2417 
	`π∆_lök_put
(
lök
);

2426 i‡((
îr
 = 
	`π∆_lök_gë_kî√l
(
sock
, 
¶ave
, 
NULL
, &
lök
)) < 0)

2427  
îr
;

2429 i‡(
	`π∆_lök_gë_ma°î
(
lök
Ë!
ma°î
)

2430 
îr
 = -
NLE_OPNOTSUPP
;

2432 
îrout
:

2433 
	`π∆_lök_put
(
lök
);

2435  
îr
;

2436 
	}
}

2458 
	$π∆_lök_í¶ave
(
∆_sock
 *
sock
, 
π∆_lök
 *
ma°î
,

2459 
π∆_lök
 *
¶ave
)

2461  
	`π∆_lök_í¶ave_ifödex
(
sock
, 
	`π∆_lök_gë_ifödex
(
ma°î
),

2462 
	`π∆_lök_gë_ifödex
(
¶ave
));

2463 
	}
}

2477 
	$π∆_lök_ªÀa£_ifödex
(
∆_sock
 *
sock
, 
¶ave
)

2479  
	`π∆_lök_í¶ave_ifödex
(
sock
, 0, 
¶ave
);

2480 
	}
}

2501 
	$π∆_lök_ªÀa£
(
∆_sock
 *
sock
, 
π∆_lök
 *
¶ave
)

2503  
	`π∆_lök_ªÀa£_ifödex
(
sock
, 
	`π∆_lök_gë_ifödex
(
¶ave
));

2504 
	}
}

2513 c⁄° 
å™s_tbl
 
	glök_Êags
[] = {

2514 
__ADD
(
IFF_LOOPBACK
, 
lo›back
)

2515 
__ADD
(
IFF_BROADCAST
, 
brﬂdˇ°
)

2516 
__ADD
(
IFF_POINTOPOINT
, 
poöt›oöt
)

2517 
__ADD
(
IFF_MULTICAST
, 
mu…iˇ°
)

2518 
__ADD
(
IFF_NOARP
, 
nﬂΩ
)

2519 
__ADD
(
IFF_ALLMULTI
, 
Ælmu…i
)

2520 
__ADD
(
IFF_PROMISC
, 
¥omisc
)

2521 
__ADD
(
IFF_MASTER
, 
ma°î
)

2522 
__ADD
(
IFF_SLAVE
, 
¶ave
)

2523 
__ADD
(
IFF_DEBUG
, 
debug
)

2524 
__ADD
(
IFF_DYNAMIC
, 
dy«mic
)

2525 
__ADD
(
IFF_AUTOMEDIA
, 
automedü
)

2526 
__ADD
(
IFF_PORTSEL
, 
p‹t£l
)

2527 
__ADD
(
IFF_NOTRAILERS
, 
nŸøûîs
)

2528 
__ADD
(
IFF_UP
, 
up
)

2529 
__ADD
(
IFF_RUNNING
, 
ru¬ög
)

2530 
__ADD
(
IFF_LOWER_UP
, 
lowîup
)

2531 
__ADD
(
IFF_DORMANT
, 
d‹m™t
)

2532 
__ADD
(
IFF_ECHO
, 
echo
)

2535 *
	$π∆_lök_Êags2°r
(
Êags
, *
buf
, 
size_t
 
Àn
)

2537  
	`__Êags2°r
(
Êags
, 
buf
, 
Àn
, 
lök_Êags
,

2538 
	`ARRAY_SIZE
(
lök_Êags
));

2539 
	}
}

2541 
	$π∆_lök_°r2Êags
(c⁄° *
«me
)

2543  
	`__°r2Êags
(
«me
, 
lök_Êags
, 
	`ARRAY_SIZE
(link_flags));

2544 
	}
}

2546 c⁄° 
å™s_tbl
 
	glök_°©s
[] = {

2547 
__ADD
(
RTNL_LINK_RX_PACKETS
, 
rx_∑ckës
)

2548 
__ADD
(
RTNL_LINK_TX_PACKETS
, 
tx_∑ckës
)

2549 
__ADD
(
RTNL_LINK_RX_BYTES
, 
rx_byãs
)

2550 
__ADD
(
RTNL_LINK_TX_BYTES
, 
tx_byãs
)

2551 
__ADD
(
RTNL_LINK_RX_ERRORS
, 
rx_îr‹s
)

2552 
__ADD
(
RTNL_LINK_TX_ERRORS
, 
tx_îr‹s
)

2553 
__ADD
(
RTNL_LINK_RX_DROPPED
, 
rx_dr›≥d
)

2554 
__ADD
(
RTNL_LINK_TX_DROPPED
, 
tx_dr›≥d
)

2555 
__ADD
(
RTNL_LINK_RX_COMPRESSED
, 
rx_com¥es£d
)

2556 
__ADD
(
RTNL_LINK_TX_COMPRESSED
, 
tx_com¥es£d
)

2557 
__ADD
(
RTNL_LINK_RX_FIFO_ERR
, 
rx_fifo_îr
)

2558 
__ADD
(
RTNL_LINK_TX_FIFO_ERR
, 
tx_fifo_îr
)

2559 
__ADD
(
RTNL_LINK_RX_LEN_ERR
, 
rx_Àn_îr
)

2560 
__ADD
(
RTNL_LINK_RX_OVER_ERR
, 
rx_ovî_îr
)

2561 
__ADD
(
RTNL_LINK_RX_CRC_ERR
, 
rx_¸c_îr
)

2562 
__ADD
(
RTNL_LINK_RX_FRAME_ERR
, 
rx_‰ame_îr
)

2563 
__ADD
(
RTNL_LINK_RX_MISSED_ERR
, 
rx_mis£d_îr
)

2564 
__ADD
(
RTNL_LINK_TX_ABORT_ERR
, 
tx_ab‹t_îr
)

2565 
__ADD
(
RTNL_LINK_TX_CARRIER_ERR
, 
tx_ˇºõr_îr
)

2566 
__ADD
(
RTNL_LINK_TX_HBEAT_ERR
, 
tx_hbót_îr
)

2567 
__ADD
(
RTNL_LINK_TX_WIN_ERR
, 
tx_wö_îr
)

2568 
__ADD
(
RTNL_LINK_COLLISIONS
, 
cﬁlisi⁄s
)

2569 
__ADD
(
RTNL_LINK_MULTICAST
, 
mu…iˇ°
)

2570 
__ADD
(
RTNL_LINK_IP6_INPKTS
, 
Ip6InRe˚ives
)

2571 
__ADD
(
RTNL_LINK_IP6_INHDRERRORS
, 
Ip6InHdrEº‹s
)

2572 
__ADD
(
RTNL_LINK_IP6_INTOOBIGERRORS
, 
Ip6InTooBigEº‹s
)

2573 
__ADD
(
RTNL_LINK_IP6_INNOROUTES
, 
Ip6InNoRouãs
)

2574 
__ADD
(
RTNL_LINK_IP6_INADDRERRORS
, 
Ip6InAddrEº‹s
)

2575 
__ADD
(
RTNL_LINK_IP6_INUNKNOWNPROTOS
, 
Ip6InUnknownPrŸos
)

2576 
__ADD
(
RTNL_LINK_IP6_INTRUNCATEDPKTS
, 
Ip6InTrunˇãdPkts
)

2577 
__ADD
(
RTNL_LINK_IP6_INDISCARDS
, 
Ip6InDisˇrds
)

2578 
__ADD
(
RTNL_LINK_IP6_INDELIVERS
, 
Ip6InDñivîs
)

2579 
__ADD
(
RTNL_LINK_IP6_OUTFORWDATAGRAMS
, 
Ip6OutF‹wD©agøms
)

2580 
__ADD
(
RTNL_LINK_IP6_OUTPKTS
, 
Ip6OutReque°s
)

2581 
__ADD
(
RTNL_LINK_IP6_OUTDISCARDS
, 
Ip6OutDisˇrds
)

2582 
__ADD
(
RTNL_LINK_IP6_OUTNOROUTES
, 
Ip6OutNoRouãs
)

2583 
__ADD
(
RTNL_LINK_IP6_REASMTIMEOUT
, 
Ip6RósmTimeout
)

2584 
__ADD
(
RTNL_LINK_IP6_REASMREQDS
, 
Ip6RósmReqds
)

2585 
__ADD
(
RTNL_LINK_IP6_REASMOKS
, 
Ip6RósmOKs
)

2586 
__ADD
(
RTNL_LINK_IP6_REASMFAILS
, 
Ip6RósmFaûs
)

2587 
__ADD
(
RTNL_LINK_IP6_FRAGOKS
, 
Ip6FøgOKs
)

2588 
__ADD
(
RTNL_LINK_IP6_FRAGFAILS
, 
Ip6FøgFaûs
)

2589 
__ADD
(
RTNL_LINK_IP6_FRAGCREATES
, 
Ip6FøgCª©es
)

2590 
__ADD
(
RTNL_LINK_IP6_INMCASTPKTS
, 
Ip6InMˇ°Pkts
)

2591 
__ADD
(
RTNL_LINK_IP6_OUTMCASTPKTS
, 
Ip6OutMˇ°Pkts
)

2592 
__ADD
(
RTNL_LINK_IP6_INBCASTPKTS
, 
Ip6InBˇ°Pkts
)

2593 
__ADD
(
RTNL_LINK_IP6_OUTBCASTPKTS
, 
Ip6OutBˇ°Pkts
)

2594 
__ADD
(
RTNL_LINK_IP6_INOCTETS
, 
Ip6InO˘ës
)

2595 
__ADD
(
RTNL_LINK_IP6_OUTOCTETS
, 
Ip6OutO˘ës
)

2596 
__ADD
(
RTNL_LINK_IP6_INMCASTOCTETS
, 
Ip6InMˇ°O˘ës
)

2597 
__ADD
(
RTNL_LINK_IP6_OUTMCASTOCTETS
, 
Ip6OutMˇ°O˘ës
)

2598 
__ADD
(
RTNL_LINK_IP6_INBCASTOCTETS
, 
Ip6InBˇ°O˘ës
)

2599 
__ADD
(
RTNL_LINK_IP6_OUTBCASTOCTETS
, 
Ip6OutBˇ°O˘ës
)

2600 
__ADD
(
RTNL_LINK_ICMP6_INMSGS
, 
ICMP6_InMsgs
)

2601 
__ADD
(
RTNL_LINK_ICMP6_INERRORS
, 
ICMP6_InEº‹s
)

2602 
__ADD
(
RTNL_LINK_ICMP6_OUTMSGS
, 
ICMP6_OutMsgs
)

2603 
__ADD
(
RTNL_LINK_ICMP6_OUTERRORS
, 
ICMP6_OutEº‹s
)

2604 
__ADD
(
RTNL_LINK_ICMP6_CSUMERRORS
, 
ICMP6_InCsumEº‹s
)

2605 
__ADD
(
RTNL_LINK_IP6_CSUMERRORS
, 
Ip6_InCsumEº‹s
)

2606 
__ADD
(
RTNL_LINK_IP6_NOECTPKTS
, 
Ip6_InNoECTPkts
)

2607 
__ADD
(
RTNL_LINK_IP6_ECT1PKTS
, 
Ip6_InECT1Pkts
)

2608 
__ADD
(
RTNL_LINK_IP6_ECT0PKTS
, 
Ip6_InECT0Pkts
)

2609 
__ADD
(
RTNL_LINK_IP6_CEPKTS
, 
Ip6_InCEPkts
)

2612 *
	$π∆_lök_°©2°r
(
°
, *
buf
, 
size_t
 
Àn
)

2614  
	`__ty≥2°r
(
°
, 
buf
, 
Àn
, 
lök_°©s
, 
	`ARRAY_SIZE
(link_stats));

2615 
	}
}

2617 
	$π∆_lök_°r2°©
(c⁄° *
«me
)

2619  
	`__°r2ty≥
(
«me
, 
lök_°©s
, 
	`ARRAY_SIZE
(link_stats));

2620 
	}
}

2622 c⁄° 
å™s_tbl
 
	glök_›î°©es
[] = {

2623 
__ADD
(
IF_OPER_UNKNOWN
, 
unknown
)

2624 
__ADD
(
IF_OPER_NOTPRESENT
, 
nŸ¥e£¡
)

2625 
__ADD
(
IF_OPER_DOWN
, 
down
)

2626 
__ADD
(
IF_OPER_LOWERLAYERDOWN
, 
lowîœyîdown
)

2627 
__ADD
(
IF_OPER_TESTING
, 
ã°ög
)

2628 
__ADD
(
IF_OPER_DORMANT
, 
d‹m™t
)

2629 
__ADD
(
IF_OPER_UP
, 
up
)

2632 *
	$π∆_lök_›î°©e2°r
(
uöt8_t
 
°
, *
buf
, 
size_t
 
Àn
)

2634  
	`__ty≥2°r
(
°
, 
buf
, 
Àn
, 
lök_›î°©es
,

2635 
	`ARRAY_SIZE
(
lök_›î°©es
));

2636 
	}
}

2638 
	$π∆_lök_°r2›î°©e
(c⁄° *
«me
)

2640  
	`__°r2ty≥
(
«me
, 
lök_›î°©es
,

2641 
	`ARRAY_SIZE
(
lök_›î°©es
));

2642 
	}
}

2644 c⁄° 
å™s_tbl
 
	glök_modes
[] = {

2645 
__ADD
(
IF_LINK_MODE_DEFAULT
, )

2646 
__ADD
(
IF_LINK_MODE_DORMANT
, 
d‹m™t
)

2649 c⁄° 
å™s_tbl
 
	gˇºõr_°©es
[] = {

2650 
__ADD
(
IF_CARRIER_DOWN
, 
down
)

2651 
__ADD
(
IF_CARRIER_UP
, 
up
)

2654 *
	$π∆_lök_mode2°r
(
uöt8_t
 
°
, *
buf
, 
size_t
 
Àn
)

2656  
	`__ty≥2°r
(
°
, 
buf
, 
Àn
, 
lök_modes
, 
	`ARRAY_SIZE
(link_modes));

2657 
	}
}

2659 
	$π∆_lök_°r2mode
(c⁄° *
«me
)

2661  
	`__°r2ty≥
(
«me
, 
lök_modes
, 
	`ARRAY_SIZE
(link_modes));

2662 
	}
}

2664 *
	$π∆_lök_ˇºõr2°r
(
uöt8_t
 
°
, *
buf
, 
size_t
 
Àn
)

2666  
	`__ty≥2°r
(
°
, 
buf
, 
Àn
, 
ˇºõr_°©es
,

2667 
	`ARRAY_SIZE
(
ˇºõr_°©es
));

2668 
	}
}

2670 
	$π∆_lök_°r2ˇºõr
(c⁄° *
«me
)

2672  
	`__°r2ty≥
(
«me
, 
ˇºõr_°©es
, 
	`ARRAY_SIZE
(carrier_states));

2673 
	}
}

2684 
	$π∆_lök_£t_öfo_ty≥
(
π∆_lök
 *
lök
, c⁄° *
ty≥
)

2686  
	`π∆_lök_£t_ty≥
(
lök
, 
ty≥
);

2687 
	}
}

2692 *
	$π∆_lök_gë_öfo_ty≥
(
π∆_lök
 *
lök
)

2694  
	`π∆_lök_gë_ty≥
(
lök
);

2695 
	}
}

2700 
	$π∆_lök_£t_weight
(
π∆_lök
 *
lök
, 
weight
)

2702 
lök
->
l_weight
 = 
weight
;

2703 
lök
->
˚_mask
 |
LINK_ATTR_WEIGHT
;

2704 
	}
}

2709 
	$π∆_lök_gë_weight
(
π∆_lök
 *
lök
)

2711  
lök
->
l_weight
;

2712 
	}
}

2716 
∆_obje˘_›s
 
	glök_obj_›s
 = {

2717 .
oo_«me
 = "route/link",

2718 .
	goo_size
 = (
π∆_lök
),

2719 .
	goo_‰ì_d©a
 = 
lök_‰ì_d©a
,

2720 .
	goo_˛⁄e
 = 
lök_˛⁄e
,

2721 .
	goo_dump
 = {

2722 [
NL_DUMP_LINE
] = 
lök_dump_löe
,

2723 [
NL_DUMP_DETAILS
] = 
lök_dump_dëaûs
,

2724 [
NL_DUMP_STATS
] = 
lök_dump_°©s
,

2726 .
	goo_com∑ª
 = 
lök_com∑ª
,

2727 .
	goo_keygí
 = 
lök_keygí
,

2728 .
	goo_©ås2°r
 = 
lök_©ås2°r
,

2729 .
	goo_id_©ås
 = 
LINK_ATTR_IFINDEX
 | 
LINK_ATTR_FAMILY
,

2732 
∆_af_group
 
	glök_groups
[] = {

2733 { 
AF_UNSPEC
, 
RTNLGRP_LINK
 },

2734 { 
AF_BRIDGE
, 
RTNLGRP_LINK
 },

2735 { 
END_OF_GROUP_LIST
 },

2738 
∆_ˇche_›s
 
	gπ∆_lök_›s
 = {

2739 .
co_«me
 = "route/link",

2740 .
	gco_hdrsize
 = (
iföfomsg
),

2741 .
	gco_msgty≥s
 = {

2742 { 
RTM_NEWLINK
, 
NL_ACT_NEW
, "new" },

2743 { 
RTM_DELLINK
, 
NL_ACT_DEL
, "del" },

2744 { 
RTM_GETLINK
, 
NL_ACT_GET
, "get" },

2745 { 
RTM_SETLINK
, 
NL_ACT_CHANGE
, "set" },

2746 
END_OF_MSGTYPES_LIST
,

2748 .
	gco_¥Ÿocﬁ
 = 
NETLINK_ROUTE
,

2749 .
	gco_groups
 = 
lök_groups
,

2750 .
	gco_ªque°_upd©e
 = 
lök_ªque°_upd©e
,

2751 .
	gco_msg_∑r£r
 = 
lök_msg_∑r£r
,

2752 .
	gco_obj_›s
 = &
lök_obj_›s
,

2755 
__öô
 
	$lök_öô
()

2757 
	`∆_ˇche_mngt_ªgi°î
(&
π∆_lök_›s
);

2758 
	}
}

2760 
__exô
 
	$lök_exô
()

2762 
	`∆_ˇche_mngt_uƒegi°î
(&
π∆_lök_›s
);

2763 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/link/api.c

42 
	~<√éök-¥iv©e/√éök.h
>

43 
	~<√éök/√éök.h
>

44 
	~<√éök/utûs.h
>

45 
	~<√éök/rouã/lök.h
>

46 
	~<√éök-¥iv©e/rouã/lök/≠i.h
>

48 
NL_LIST_HEAD
(
öfo_›s
);

51 
NL_RW_LOCK
(
öfo_lock
);

53 
π∆_lök_öfo_›s
 *
	$__π∆_lök_öfo_›s_lookup
(c⁄° *
«me
)

55 
π∆_lök_öfo_›s
 *
›s
;

57 
	`∆_li°_f‹_óch_íåy
(
›s
, &
öfo_›s
, 
io_li°
)

58 i‡(!
	`°rcmp
(
›s
->
io_«me
, 
«me
))

59  
›s
;

61  
NULL
;

62 
	}
}

77 
π∆_lök_öfo_›s
 *
	$π∆_lök_öfo_›s_lookup
(c⁄° *
«me
)

79 
π∆_lök_öfo_›s
 *
›s
;

81 
	`∆_wrôe_lock
(&
öfo_lock
);

82 i‡((
›s
 = 
	`__π∆_lök_öfo_›s_lookup
(
«me
)))

83 
›s
->
io_ªf˙t
++;

84 
	`∆_wrôe_u∆ock
(&
öfo_lock
);

86  
›s
;

87 
	}
}

93 
	$π∆_lök_öfo_›s_put
(
π∆_lök_öfo_›s
 *
›s
)

95 i‡(
›s
)

96 
›s
->
io_ªf˙t
--;

97 
	}
}

111 
	$π∆_lök_ªgi°î_öfo
(
π∆_lök_öfo_›s
 *
›s
)

113 
îr
 = 0;

115 i‡(
›s
->
io_«me
 =
NULL
)

116  -
NLE_INVAL
;

118 
	`∆_wrôe_lock
(&
öfo_lock
);

119 i‡(
	`__π∆_lök_öfo_›s_lookup
(
›s
->
io_«me
)) {

120 
îr
 = -
NLE_EXIST
;

121 
îrout
;

124 
	`NL_DBG
(1, "Regi°îedÜök infÿ›î©i⁄†%s\n", 
›s
->
io_«me
);

126 
	`∆_li°_add_èû
(&
›s
->
io_li°
, &
öfo_›s
);

127 
îrout
:

128 
	`∆_wrôe_u∆ock
(&
öfo_lock
);

130  
îr
;

131 
	}
}

146 
	$π∆_lök_uƒegi°î_öfo
(
π∆_lök_öfo_›s
 *
›s
)

148 
π∆_lök_öfo_›s
 *
t
;

149 
îr
 = -
NLE_OPNOTSUPP
;

151 
	`∆_wrôe_lock
(&
öfo_lock
);

153 
	`∆_li°_f‹_óch_íåy
(
t
, &
öfo_›s
, 
io_li°
) {

154 i‡(
t
 =
›s
) {

155 i‡(
t
->
io_ªf˙t
 > 0) {

156 
îr
 = -
NLE_BUSY
;

157 
îrout
;

160 
	`∆_li°_dñ
(&
t
->
io_li°
);

162 
	`NL_DBG
(1, "UnregisteredÜink info operations %s\n",

163 
›s
->
io_«me
);

164 
îr
 = 0;

165 
îrout
;

169 
îrout
:

170 
	`∆_wrôe_u∆ock
(&
öfo_lock
);

172  
îr
;

173 
	}
}

182 
π∆_lök_af_›s
 *
	gaf_›s
[
AF_MAX
];

192 
π∆_lök_af_›s
 *
	$π∆_lök_af_›s_lookup
(c⁄° 
Ámûy
)

194 i‡(
Ámûy
 =
AF_UNSPEC
 || famûy >
AF_MAX
)

195  
NULL
;

197 
	`∆_wrôe_lock
(&
öfo_lock
);

198 i‡(
af_›s
[
Ámûy
])

199 
af_›s
[
Ámûy
]->
ao_ªf˙t
++;

200 
	`∆_wrôe_u∆ock
(&
öfo_lock
);

202  
af_›s
[
Ámûy
];

203 
	}
}

209 
	$π∆_lök_af_›s_put
(
π∆_lök_af_›s
 *
›s
)

211 i‡(
›s
)

212 
›s
->
ao_ªf˙t
--;

213 
	}
}

229 *
	$π∆_lök_af_Æloc
(
π∆_lök
 *
lök
,

230 c⁄° 
π∆_lök_af_›s
 *
›s
)

232 
Ámûy
;

234 i‡(!
lök
 || !
›s
)

235 
	`BUG
();

237 
Ámûy
 = 
›s
->
ao_Ámûy
;

239 i‡(!
lök
->
l_af_d©a
[
Ámûy
]) {

240 i‡(!
›s
->
ao_Æloc
)

241 
	`BUG
();

243 
lök
->
l_af_d©a
[
Ámûy
] = 
›s
->
	`ao_Æloc
(link);

244 i‡(!
lök
->
l_af_d©a
[
Ámûy
])

245  
NULL
;

248  
lök
->
l_af_d©a
[
Ámûy
];

249 
	}
}

264 *
	$π∆_lök_af_d©a
(c⁄° 
π∆_lök
 *
lök
,

265 c⁄° 
π∆_lök_af_›s
 *
›s
)

267 i‡(!
lök
 || !
›s
)

268 
	`BUG
();

270  
lök
->
l_af_d©a
[
›s
->
ao_Ámûy
];

271 
	}
}

285 
	$π∆_lök_af_ªgi°î
(
π∆_lök_af_›s
 *
›s
)

287 
îr
 = 0;

289 i‡(
›s
->
ao_Ámûy
 =
AF_UNSPEC
 || ops->ao_Ámûy >
AF_MAX
)

290  -
NLE_INVAL
;

292 
	`∆_wrôe_lock
(&
öfo_lock
);

293 i‡(
af_›s
[
›s
->
ao_Ámûy
]) {

294 
îr
 = -
NLE_EXIST
;

295 
îrout
;

298 
›s
->
ao_ªf˙t
 = 0;

299 
af_›s
[
›s
->
ao_Ámûy
] = ops;

301 
	`NL_DBG
(1, "RegisteredÜinkáddress family operations %u\n",

302 
›s
->
ao_Ámûy
);

304 
îrout
:

305 
	`∆_wrôe_u∆ock
(&
öfo_lock
);

307  
îr
;

308 
	}
}

324 
	$π∆_lök_af_uƒegi°î
(
π∆_lök_af_›s
 *
›s
)

326 
îr
 = -
NLE_INVAL
;

328 i‡(!
›s
)

329  
îr
;

331 
	`∆_wrôe_lock
(&
öfo_lock
);

332 i‡(!
af_›s
[
›s
->
ao_Ámûy
]) {

333 
îr
 = -
NLE_OBJ_NOTFOUND
;

334 
îrout
;

337 i‡(
›s
->
ao_ªf˙t
 > 0) {

338 
îr
 = -
NLE_BUSY
;

339 
îrout
;

342 
af_›s
[
›s
->
ao_Ámûy
] = 
NULL
;

344 
	`NL_DBG
(1, "UnregisteredÜinkáddress family operations %u\n",

345 
›s
->
ao_Ámûy
);

347 
îrout
:

348 
	`∆_wrôe_u∆ock
(&
öfo_lock
);

350  
îr
;

351 
	}
}

365 
	$π∆_lök_af_d©a_com∑ª
(
π∆_lök
 *
a
, π∆_lök *
b
,

366 
Ámûy
)

368 
π∆_lök_af_›s
 *
af_›s
;

369 
ªt
 = 0;

371 i‡(!
a
->
l_af_d©a
[
Ámûy
] && !
b
->l_af_data[family])

374 i‡(!
a
->
l_af_d©a
[
Ámûy
] || !
b
->l_af_data[family])

377 
af_›s
 = 
	`π∆_lök_af_›s_lookup
(
Ámûy
);

378 i‡(!
af_›s
)

381 i‡(
af_›s
->
ao_com∑ª
 =
NULL
) {

382 
ªt
 = ~0;

383 
out
;

386 
ªt
 = 
af_›s
->
	`ao_com∑ª
(
a
, 
b
, 
Ámûy
, ~0, 0);

388 
out
:

389 
	`π∆_lök_af_›s_put
(
af_›s
);

391  
ªt
;

392 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/link/bonding.c

23 
	~<√éök-¥iv©e/√éök.h
>

24 
	~<√éök/√éök.h
>

25 
	~<√éök-¥iv©e/rouã/lök/≠i.h
>

32 
π∆_lök
 *
	$π∆_lök_b⁄d_Æloc
()

34 
π∆_lök
 *
lök
;

35 
îr
;

37 i‡(!(
lök
 = 
	`π∆_lök_Æloc
()))

38  
NULL
;

40 i‡((
îr
 = 
	`π∆_lök_£t_ty≥
(
lök
, "bond")) < 0) {

41 
	`π∆_lök_put
(
lök
);

42  
NULL
;

45  
lök
;

46 
	}
}

72 
	$π∆_lök_b⁄d_add
(
∆_sock
 *
sock
, c⁄° *
«me
,

73 
π∆_lök
 *
›ts
)

75 
π∆_lök
 *
lök
;

76 
îr
;

78 i‡(!(
lök
 = 
	`π∆_lök_b⁄d_Æloc
()))

79  -
NLE_NOMEM
;

81 i‡(!
«me
 && 
›ts
)

82 
«me
 = 
	`π∆_lök_gë_«me
(
›ts
);

84 i‡(
«me
)

85 
	`π∆_lök_£t_«me
(
lök
, 
«me
);

87 
îr
 = 
	`π∆_lök_add
(
sock
, 
lök
, 
NLM_F_CREATE
);

89 
	`π∆_lök_put
(
lök
);

91  
îr
;

92 
	}
}

107 
	$π∆_lök_b⁄d_í¶ave_ifödex
(
∆_sock
 *
sock
, 
ma°î
,

108 
¶ave
)

110 
π∆_lök
 *
lök
;

111 
îr
;

113 i‡(!(
lök
 = 
	`π∆_lök_b⁄d_Æloc
()))

114  -
NLE_NOMEM
;

116 
	`π∆_lök_£t_ifödex
(
lök
, 
¶ave
);

117 
	`π∆_lök_£t_ma°î
(
lök
, 
ma°î
);

119 i‡((
îr
 = 
	`π∆_lök_ch™ge
(
sock
, 
lök
,Üink, 0)) < 0)

120 
îrout
;

122 
	`π∆_lök_put
(
lök
);

131 i‡((
îr
 = 
	`π∆_lök_gë_kî√l
(
sock
, 
¶ave
, 
NULL
, &
lök
)) < 0)

132  
îr
;

134 i‡(
	`π∆_lök_gë_ma°î
(
lök
Ë!
ma°î
)

135 
îr
 = -
NLE_OPNOTSUPP
;

137 
îrout
:

138 
	`π∆_lök_put
(
lök
);

140  
îr
;

141 
	}
}

163 
	$π∆_lök_b⁄d_í¶ave
(
∆_sock
 *
sock
, 
π∆_lök
 *
ma°î
,

164 
π∆_lök
 *
¶ave
)

166  
	`π∆_lök_b⁄d_í¶ave_ifödex
(
sock
,

167 
	`π∆_lök_gë_ifödex
(
ma°î
),

168 
	`π∆_lök_gë_ifödex
(
¶ave
));

169 
	}
}

183 
	$π∆_lök_b⁄d_ªÀa£_ifödex
(
∆_sock
 *
sock
, 
¶ave
)

185  
	`π∆_lök_b⁄d_í¶ave_ifödex
(
sock
, 0, 
¶ave
);

186 
	}
}

207 
	$π∆_lök_b⁄d_ªÀa£
(
∆_sock
 *
sock
, 
π∆_lök
 *
¶ave
)

209  
	`π∆_lök_b⁄d_ªÀa£_ifödex
(
sock
,

210 
	`π∆_lök_gë_ifödex
(
¶ave
));

211 
	}
}

213 
π∆_lök_öfo_›s
 
	gb⁄dög_öfo_›s
 = {

214 .
io_«me
 = "bond",

217 
__öô
 
	$b⁄dög_öô
()

219 
	`π∆_lök_ªgi°î_öfo
(&
b⁄dög_öfo_›s
);

220 
	}
}

222 
__exô
 
	$b⁄dög_exô
()

224 
	`π∆_lök_uƒegi°î_öfo
(&
b⁄dög_öfo_›s
);

225 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/link/bridge.c

20 
	~<√éök-¥iv©e/√éök.h
>

21 
	~<√éök/√éök.h
>

22 
	~<√éök/©å.h
>

23 
	~<√éök/rouã/π∆.h
>

24 
	~<√éök/rouã/lök/bridge.h
>

25 
	~<√éök-¥iv©e/rouã/lök/≠i.h
>

26 
	~<löux/if_bridge.h
>

29 
	#BRIDGE_ATTR_PORT_STATE
 (1 << 0)

	)

30 
	#BRIDGE_ATTR_PRIORITY
 (1 << 1)

	)

31 
	#BRIDGE_ATTR_COST
 (1 << 2)

	)

32 
	#BRIDGE_ATTR_FLAGS
 (1 << 3)

	)

34 
	#PRIV_FLAG_NEW_ATTRS
 (1 << 0)

	)

36 
	sbridge_d©a


38 
uöt8_t
 
	mb_p‹t_°©e
;

39 
uöt8_t
 
	mb_¥iv_Êags
;

40 
uöt16_t
 
	mb_¥i‹ôy
;

41 
uöt32_t
 
	mb_co°
;

42 
uöt32_t
 
	mb_Êags
;

43 
uöt32_t
 
	mb_Êags_mask
;

44 
uöt32_t
 
	m˚_mask
;

47 
π∆_lök_af_›s
 
	gbridge_›s
;

49 
	#IS_BRIDGE_LINK_ASSERT
(
lök
) \

50 i‡(!
	`π∆_lök_is_bridge
(
lök
)) { \

51 
	`APPBUG
("A function wasÉxpectingáÜink object ofÅype bridge."); \

52  -
NLE_OPNOTSUPP
; \

53 }

	)

55 
ölöe
 
bridge_d©a
 *
	$bridge_d©a
(
π∆_lök
 *
lök
)

57  
	`π∆_lök_af_d©a
(
lök
, &
bridge_›s
);

58 
	}
}

60 *
	$bridge_Æloc
(
π∆_lök
 *
lök
)

62  
	`ˇŒoc
(1, (
bridge_d©a
));

63 
	}
}

65 *
	$bridge_˛⁄e
(
π∆_lök
 *
lök
, *
d©a
)

67 
bridge_d©a
 *
bd
;

69 i‡((
bd
 = 
	`bridge_Æloc
(
lök
)))

70 
	`mem˝y
(
bd
, 
d©a
, (*bd));

72  
bd
;

73 
	}
}

75 
	$bridge_‰ì
(
π∆_lök
 *
lök
, *
d©a
)

77 
	`‰ì
(
d©a
);

78 
	}
}

80 
∆a_pﬁicy
 
	gbr_©ås_pﬁicy
[
IFLA_BRPORT_MAX
+1] = {

81 [
IFLA_BRPORT_STATE
] = { .
ty≥
 = 
NLA_U8
 },

82 [
IFLA_BRPORT_PRIORITY
] = { .
ty≥
 = 
NLA_U16
 },

83 [
IFLA_BRPORT_COST
] = { .
ty≥
 = 
NLA_U32
 },

84 [
IFLA_BRPORT_MODE
] = { .
ty≥
 = 
NLA_U8
 },

85 [
IFLA_BRPORT_GUARD
] = { .
ty≥
 = 
NLA_U8
 },

86 [
IFLA_BRPORT_PROTECT
] = { .
ty≥
 = 
NLA_U8
 },

87 [
IFLA_BRPORT_FAST_LEAVE
] = { .
ty≥
 = 
NLA_U8
 },

90 
	$check_Êag
(
π∆_lök
 *
lök
, 
∆©å
 *
©ås
[],

91 
ty≥
, 
Êag
)

93 i‡(
©ås
[
ty≥
] && 
	`∆a_gë_u8
(attrs[type]))

94 
	`π∆_lök_bridge_£t_Êags
(
lök
, 
Êag
);

95 
	}
}

97 
	$bridge_∑r£_¥Ÿöfo
(
π∆_lök
 *
lök
, 
∆©å
 *
©å
,

98 *
d©a
)

100 
bridge_d©a
 *
bd
 = 
d©a
;

101 
∆©å
 *
br_©ås
[
IFLA_BRPORT_MAX
+1];

102 
îr
;

105 i‡(!
	`∆a_is_√°ed
(
©å
)) {

106 i‡(
	`∆a_Àn
(
©å
) < 1)

107  -
NLE_RANGE
;

109 
bd
->
b_p‹t_°©e
 = 
	`∆a_gë_u8
(
©å
);

110 
bd
->
˚_mask
 |
BRIDGE_ATTR_PORT_STATE
;

115 i‡((
îr
 = 
	`∆a_∑r£_√°ed
(
br_©ås
, 
IFLA_BRPORT_MAX
, 
©å
,

116 
br_©ås_pﬁicy
)) < 0)

117  
îr
;

119 
bd
->
b_¥iv_Êags
 |
PRIV_FLAG_NEW_ATTRS
;

121 i‡(
br_©ås
[
IFLA_BRPORT_STATE
]) {

122 
bd
->
b_p‹t_°©e
 = 
	`∆a_gë_u8
(
br_©ås
[
IFLA_BRPORT_STATE
]);

123 
bd
->
˚_mask
 |
BRIDGE_ATTR_PORT_STATE
;

126 i‡(
br_©ås
[
IFLA_BRPORT_PRIORITY
]) {

127 
bd
->
b_¥i‹ôy
 = 
	`∆a_gë_u16
(
br_©ås
[
IFLA_BRPORT_PRIORITY
]);

128 
bd
->
˚_mask
 |
BRIDGE_ATTR_PRIORITY
;

131 i‡(
br_©ås
[
IFLA_BRPORT_COST
]) {

132 
bd
->
b_co°
 = 
	`∆a_gë_u32
(
br_©ås
[
IFLA_BRPORT_COST
]);

133 
bd
->
˚_mask
 |
BRIDGE_ATTR_COST
;

136 
	`check_Êag
(
lök
, 
br_©ås
, 
IFLA_BRPORT_MODE
, 
RTNL_BRIDGE_HAIRPIN_MODE
);

137 
	`check_Êag
(
lök
, 
br_©ås
, 
IFLA_BRPORT_GUARD
, 
RTNL_BRIDGE_BPDU_GUARD
);

138 
	`check_Êag
(
lök
, 
br_©ås
, 
IFLA_BRPORT_PROTECT
, 
RTNL_BRIDGE_ROOT_BLOCK
);

139 
	`check_Êag
(
lök
, 
br_©ås
, 
IFLA_BRPORT_FAST_LEAVE
, 
RTNL_BRIDGE_FAST_LEAVE
);

142 
	}
}

144 
	$bridge_dump_dëaûs
(
π∆_lök
 *
lök
,

145 
∆_dump_∑øms
 *
p
, *
d©a
)

147 
bridge_d©a
 *
bd
 = 
d©a
;

149 
	`∆_dump_löe
(
p
, " bridge: ");

151 i‡(
bd
->
˚_mask
 & 
BRIDGE_ATTR_PORT_STATE
)

152 
	`∆_dump
(
p
, "p‹t-°©ê%u ", 
bd
->
b_p‹t_°©e
);

154 i‡(
bd
->
˚_mask
 & 
BRIDGE_ATTR_PRIORITY
)

155 
	`∆_dump
(
p
, "¥iÿ%u ", 
bd
->
b_¥i‹ôy
);

157 i‡(
bd
->
˚_mask
 & 
BRIDGE_ATTR_COST
)

158 
	`∆_dump
(
p
, "co° %u ", 
bd
->
b_co°
);

160 
	`∆_dump
(
p
, "\n");

161 
	}
}

163 
	$bridge_com∑ª
(
π∆_lök
 *
_a
, π∆_lök *
_b
,

164 
Ámûy
, 
uöt32_t
 
©ås
, 
Êags
)

166 
bridge_d©a
 *
a
 = 
	`bridge_d©a
(
_a
);

167 
bridge_d©a
 *
b
 = 
	`bridge_d©a
(
_b
);

168 
diff
 = 0;

170 
	#BRIDGE_DIFF
(
ATTR
, 
EXPR
Ë
	`ATTR_DIFF
(
©ås
, 
BRIDGE_ATTR_
##ATTR, 
a
, 
b
, EXPR)

	)

171 
diff
 |
	`BRIDGE_DIFF
(
PORT_STATE
, 
a
->
b_p‹t_°©e
 !
b
->b_port_state);

172 
diff
 |
	`BRIDGE_DIFF
(
PRIORITY
, 
a
->
b_¥i‹ôy
 !
b
->b_priority);

173 
diff
 |
	`BRIDGE_DIFF
(
COST
, 
a
->
b_co°
 !
b
->b_cost);

175 i‡(
Êags
 & 
LOOSE_COMPARISON
)

176 
diff
 |
	`BRIDGE_DIFF
(
FLAGS
,

177 (
a
->
b_Êags
 ^ 
b
->b_ÊagsË& b->
b_Êags_mask
);

179 
diff
 |
	`BRIDGE_DIFF
(
FLAGS
, 
a
->
b_Êags
 !
b
->b_flags);

180 #unde‡
BRIDGE_DIFF


182  
diff
;

183 
	}
}

191 
π∆_lök
 *
	$π∆_lök_bridge_Æloc
()

193 
π∆_lök
 *
lök
;

194 
îr
;

196 i‡(!(
lök
 = 
	`π∆_lök_Æloc
()))

197  
NULL
;

199 i‡((
îr
 = 
	`π∆_lök_£t_ty≥
(
lök
, "bridge")) < 0) {

200 
	`π∆_lök_put
(
lök
);

201  
NULL
;

204  
lök
;

205 
	}
}

218 
	$π∆_lök_bridge_add
(
∆_sock
 *
sk
, c⁄° *
«me
)

220 
îr
;

221 
π∆_lök
 *
lök
;

223 i‡(!(
lök
 = 
	`π∆_lök_bridge_Æloc
()))

224  -
NLE_NOMEM
;

226 if(
«me
)

227 
	`π∆_lök_£t_«me
(
lök
, 
«me
);

229 
îr
 = 
	`π∆_lök_add
(
sk
, 
lök
, 
NLM_F_CREATE
);

230 
	`π∆_lök_put
(
lök
);

232  
îr
;

233 
	}
}

241 
	$π∆_lök_is_bridge
(
π∆_lök
 *
lök
)

243  
lök
->
l_Ámûy
 =
AF_BRIDGE
 &&

244 
lök
->
l_af_›s
 =&
bridge_›s
;

245 
	}
}

260 
	$π∆_lök_bridge_has_ext_öfo
(
π∆_lök
 *
lök
)

262 
bridge_d©a
 *
bd
;

264 i‡(!
	`π∆_lök_is_bridge
(
lök
))

267 
bd
 = 
	`bridge_d©a
(
lök
);

268  !!(
bd
->
b_¥iv_Êags
 & 
PRIV_FLAG_NEW_ATTRS
);

269 
	}
}

289 
	$π∆_lök_bridge_£t_p‹t_°©e
(
π∆_lök
 *
lök
, 
uöt8_t
 
°©e
)

291 
bridge_d©a
 *
bd
 = 
	`bridge_d©a
(
lök
);

293 
	`IS_BRIDGE_LINK_ASSERT
(
lök
);

295 i‡(
°©e
 > 
BR_STATE_BLOCKING
)

296  -
NLE_INVAL
;

298 
bd
->
b_p‹t_°©e
 = 
°©e
;

299 
bd
->
˚_mask
 |
BRIDGE_ATTR_PORT_STATE
;

302 
	}
}

313 
	$π∆_lök_bridge_gë_p‹t_°©e
(
π∆_lök
 *
lök
)

315 
bridge_d©a
 *
bd
 = 
	`bridge_d©a
(
lök
);

317 
	`IS_BRIDGE_LINK_ASSERT
(
lök
);

319  
bd
->
b_p‹t_°©e
;

320 
	}
}

332 
	$π∆_lök_bridge_£t_¥i‹ôy
(
π∆_lök
 *
lök
, 
uöt16_t
 
¥io
)

334 
bridge_d©a
 *
bd
 = 
	`bridge_d©a
(
lök
);

336 
	`IS_BRIDGE_LINK_ASSERT
(
lök
);

338 
bd
->
b_¥i‹ôy
 = 
¥io
;

339 
bd
->
˚_mask
 |
BRIDGE_ATTR_PRIORITY
;

342 
	}
}

353 
	$π∆_lök_bridge_gë_¥i‹ôy
(
π∆_lök
 *
lök
)

355 
bridge_d©a
 *
bd
 = 
	`bridge_d©a
(
lök
);

357 
	`IS_BRIDGE_LINK_ASSERT
(
lök
);

359  
bd
->
b_¥i‹ôy
;

360 
	}
}

372 
	$π∆_lök_bridge_£t_co°
(
π∆_lök
 *
lök
, 
uöt32_t
 
co°
)

374 
bridge_d©a
 *
bd
 = 
	`bridge_d©a
(
lök
);

376 
	`IS_BRIDGE_LINK_ASSERT
(
lök
);

378 
bd
->
b_co°
 = 
co°
;

379 
bd
->
˚_mask
 |
BRIDGE_ATTR_COST
;

382 
	}
}

395 
	$π∆_lök_bridge_gë_co°
(
π∆_lök
 *
lök
, 
uöt32_t
 *
co°
)

397 
bridge_d©a
 *
bd
 = 
	`bridge_d©a
(
lök
);

399 
	`IS_BRIDGE_LINK_ASSERT
(
lök
);

401 i‡(!
co°
)

402  -
NLE_INVAL
;

404 *
co°
 = 
bd
->
b_co°
;

407 
	}
}

420 
	$π∆_lök_bridge_un£t_Êags
(
π∆_lök
 *
lök
, 
Êags
)

422 
bridge_d©a
 *
bd
 = 
	`bridge_d©a
(
lök
);

424 
	`IS_BRIDGE_LINK_ASSERT
(
lök
);

426 
bd
->
b_Êags_mask
 |
Êags
;

427 
bd
->
b_Êags
 &~
Êags
;

428 
bd
->
˚_mask
 |
BRIDGE_ATTR_FLAGS
;

431 
	}
}

450 
	$π∆_lök_bridge_£t_Êags
(
π∆_lök
 *
lök
, 
Êags
)

452 
bridge_d©a
 *
bd
 = 
	`bridge_d©a
(
lök
);

454 
	`IS_BRIDGE_LINK_ASSERT
(
lök
);

456 
bd
->
b_Êags_mask
 |
Êags
;

457 
bd
->
b_Êags
 |
Êags
;

458 
bd
->
˚_mask
 |
BRIDGE_ATTR_FLAGS
;

461 
	}
}

473 
	$π∆_lök_bridge_gë_Êags
(
π∆_lök
 *
lök
)

475 
bridge_d©a
 *
bd
 = 
	`bridge_d©a
(
lök
);

477 
	`IS_BRIDGE_LINK_ASSERT
(
lök
);

479  
bd
->
b_Êags
;

480 
	}
}

482 c⁄° 
å™s_tbl
 
	gbridge_Êags
[] = {

483 
__ADD
(
RTNL_BRIDGE_HAIRPIN_MODE
, 
haúpö_mode
)

484 
__ADD
(
RTNL_BRIDGE_BPDU_GUARD
, 
bpdu_gu¨d
)

485 
__ADD
(
RTNL_BRIDGE_ROOT_BLOCK
, 
roŸ_block
)

486 
__ADD
(
RTNL_BRIDGE_FAST_LEAVE
, 
Á°_Àave
)

494 *
	$π∆_lök_bridge_Êags2°r
(
Êags
, *
buf
, 
size_t
 
Àn
)

496  
	`__Êags2°r
(
Êags
, 
buf
, 
Àn
, 
bridge_Êags
, 
	`ARRAY_SIZE
(bridge_flags));

497 
	}
}

499 
	$π∆_lök_bridge_°r2Êags
(c⁄° *
«me
)

501  
	`__°r2Êags
(
«me
, 
bridge_Êags
, 
	`ARRAY_SIZE
(bridge_flags));

502 
	}
}

506 
π∆_lök_af_›s
 
	gbridge_›s
 = {

507 .
ao_Ámûy
 = 
AF_BRIDGE
,

508 .
	gao_Æloc
 = &
bridge_Æloc
,

509 .
	gao_˛⁄e
 = &
bridge_˛⁄e
,

510 .
	gao_‰ì
 = &
bridge_‰ì
,

511 .
	gao_∑r£_¥Ÿöfo
 = &
bridge_∑r£_¥Ÿöfo
,

512 .
	gao_dump
[
NL_DUMP_DETAILS
] = &
bridge_dump_dëaûs
,

513 .
	gao_com∑ª
 = &
bridge_com∑ª
,

516 
__öô
 
	$bridge_öô
()

518 
	`π∆_lök_af_ªgi°î
(&
bridge_›s
);

519 
	}
}

521 
__exô
 
	$bridge_exô
()

523 
	`π∆_lök_af_uƒegi°î
(&
bridge_›s
);

524 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/link/can.c

25 
	~<√éök-¥iv©e/√éök.h
>

26 
	~<√éök/√éök.h
>

27 
	~<√éök/©å.h
>

28 
	~<√éök/utûs.h
>

29 
	~<√éök/obje˘.h
>

30 
	~<√éök/rouã/π∆.h
>

31 
	~<√éök-¥iv©e/rouã/lök/≠i.h
>

32 
	~<√éök/rouã/lök/ˇn.h
>

34 
	~<löux/ˇn/√éök.h
>

37 
	#CAN_HAS_BITTIMING
 (1<<0)

	)

38 
	#CAN_HAS_BITTIMING_CONST
 (1<<1)

	)

39 
	#CAN_HAS_CLOCK
 (1<<2)

	)

40 
	#CAN_HAS_STATE
 (1<<3)

	)

41 
	#CAN_HAS_CTRLMODE
 (1<<4)

	)

42 
	#CAN_HAS_RESTART_MS
 (1<<5)

	)

43 
	#CAN_HAS_RESTART
 (1<<6)

	)

44 
	#CAN_HAS_BERR_COUNTER
 (1<<7)

	)

46 
	sˇn_öfo
 {

47 
uöt32_t
 
	mci_°©e
;

48 
uöt32_t
 
	mci_ª°¨t
;

49 
uöt32_t
 
	mci_ª°¨t_ms
;

50 
ˇn_˘æmode
 
	mci_˘æmode
;

51 
ˇn_bôtimög
 
	mci_bôtimög
;

52 
ˇn_bôtimög_c⁄°
 
	mci_bôtimög_c⁄°
;

53 
ˇn_˛ock
 
	mci_˛ock
;

54 
ˇn_bîr_cou¡î
 
	mci_bîr_cou¡î
;

55 
uöt32_t
 
	mci_mask
;

60 
∆a_pﬁicy
 
	gˇn_pﬁicy
[
IFLA_CAN_MAX
 + 1] = {

61 [
IFLA_CAN_STATE
] = { .
ty≥
 = 
NLA_U32
 },

62 [
IFLA_CAN_CTRLMODE
] = { .
möÀn
 = (
ˇn_˘æmode
) },

63 [
IFLA_CAN_RESTART_MS
] = { .
ty≥
 = 
NLA_U32
 },

64 [
IFLA_CAN_RESTART
] = { .
ty≥
 = 
NLA_U32
 },

65 [
IFLA_CAN_BITTIMING
] = { .
möÀn
 = (
ˇn_bôtimög
) },

66 [
IFLA_CAN_BITTIMING_CONST
]

67 { .
möÀn
 = (
ˇn_bôtimög_c⁄°
) },

68 [
IFLA_CAN_CLOCK
] = { .
möÀn
 = (
ˇn_˛ock
) },

69 [
IFLA_CAN_BERR_COUNTER
] = { .
möÀn
 = (
ˇn_bîr_cou¡î
) },

72 
	$ˇn_Æloc
(
π∆_lök
 *
lök
)

74 
ˇn_öfo
 *
ci
;

76 
ci
 = 
	`ˇŒoc
(1, (*ci));

77 i‡(!
ci
)

78  -
NLE_NOMEM
;

80 
lök
->
l_öfo
 = 
ci
;

83 
	}
}

85 
	$ˇn_∑r£
(
π∆_lök
 *
lök
, 
∆©å
 *
d©a
,

86 
∆©å
 *
x°©s
)

88 
∆©å
 *
tb
[
IFLA_CAN_MAX
+1];

89 
ˇn_öfo
 *
ci
;

90 
îr
;

92 
	`NL_DBG
(3, "Parsing CANÜink info");

94 i‡((
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
IFLA_CAN_MAX
, 
d©a
, 
ˇn_pﬁicy
)) < 0)

95 
îrout
;

97 i‡((
îr
 = 
	`ˇn_Æloc
(
lök
)) < 0)

98 
îrout
;

100 
ci
 = 
lök
->
l_öfo
;

102 i‡(
tb
[
IFLA_CAN_STATE
]) {

103 
ci
->
ci_°©e
 = 
	`∆a_gë_u32
(
tb
[
IFLA_CAN_STATE
]);

104 
ci
->
ci_mask
 |
CAN_HAS_STATE
;

107 i‡(
tb
[
IFLA_CAN_RESTART
]) {

108 
ci
->
ci_ª°¨t
 = 
	`∆a_gë_u32
(
tb
[
IFLA_CAN_RESTART
]);

109 
ci
->
ci_mask
 |
CAN_HAS_RESTART
;

112 i‡(
tb
[
IFLA_CAN_RESTART_MS
]) {

113 
ci
->
ci_ª°¨t_ms
 = 
	`∆a_gë_u32
(
tb
[
IFLA_CAN_RESTART_MS
]);

114 
ci
->
ci_mask
 |
CAN_HAS_RESTART_MS
;

117 i‡(
tb
[
IFLA_CAN_CTRLMODE
]) {

118 
	`∆a_mem˝y
(&
ci
->
ci_˘æmode
, 
tb
[
IFLA_CAN_CTRLMODE
],

119 (
ci
->
ci_˘æmode
));

120 
ci
->
ci_mask
 |
CAN_HAS_CTRLMODE
;

123 i‡(
tb
[
IFLA_CAN_BITTIMING
]) {

124 
	`∆a_mem˝y
(&
ci
->
ci_bôtimög
, 
tb
[
IFLA_CAN_BITTIMING
],

125 (
ci
->
ci_bôtimög
));

126 
ci
->
ci_mask
 |
CAN_HAS_BITTIMING
;

129 i‡(
tb
[
IFLA_CAN_BITTIMING_CONST
]) {

130 
	`∆a_mem˝y
(&
ci
->
ci_bôtimög_c⁄°
,

131 
tb
[
IFLA_CAN_BITTIMING_CONST
],

132 (
ci
->
ci_bôtimög_c⁄°
));

133 
ci
->
ci_mask
 |
CAN_HAS_BITTIMING_CONST
;

136 i‡(
tb
[
IFLA_CAN_CLOCK
]) {

137 
	`∆a_mem˝y
(&
ci
->
ci_˛ock
, 
tb
[
IFLA_CAN_CLOCK
],

138 (
ci
->
ci_˛ock
));

139 
ci
->
ci_mask
 |
CAN_HAS_CLOCK
;

142 i‡(
tb
[
IFLA_CAN_BERR_COUNTER
]) {

143 
	`∆a_mem˝y
(&
ci
->
ci_bîr_cou¡î
, 
tb
[
IFLA_CAN_BERR_COUNTER
],

144 (
ci
->
ci_bîr_cou¡î
));

145 
ci
->
ci_mask
 |
CAN_HAS_BERR_COUNTER
;

148 
îr
 = 0;

149 
îrout
:

150  
îr
;

151 
	}
}

153 
	$ˇn_‰ì
(
π∆_lök
 *
lök
)

155 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

157 
	`‰ì
(
ci
);

158 
lök
->
l_öfo
 = 
NULL
;

159 
	}
}

161 *
	$¥öt_ˇn_°©e
 (
uöt32_t
 
°©e
)

163 *
ãxt
;

165 
°©e
)

167 
CAN_STATE_ERROR_ACTIVE
:

168 
ãxt
 = "erroráctive";

170 
CAN_STATE_ERROR_WARNING
:

171 
ãxt
 = "error warning";

173 
CAN_STATE_ERROR_PASSIVE
:

174 
ãxt
 = "errorÖassive";

176 
CAN_STATE_BUS_OFF
:

177 
ãxt
 = "bus off";

179 
CAN_STATE_STOPPED
:

180 
ãxt
 = "stopped";

182 
CAN_STATE_SLEEPING
:

183 
ãxt
 = "sleeping";

186 
ãxt
 = "unknown state";

189  
ãxt
;

190 
	}
}

192 
	$ˇn_dump_löe
(
π∆_lök
 *
lök
, 
∆_dump_∑øms
 *
p
)

194 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

195 
buf
 [64];

197 
	`π∆_lök_ˇn_˘æmode2°r
(
ci
->
ci_˘æmode
.
Êags
, 
buf
, (buf));

198 
	`∆_dump
(
p
, "bitrate %d %s <%s>",

199 
ci
->
ci_bôtimög
.
bôøã
, 
	`¥öt_ˇn_°©e
(ci->
ci_°©e
), 
buf
);

200 
	}
}

202 
	$ˇn_dump_dëaûs
(
π∆_lök
 *
lök
, 
∆_dump_∑øms
 *
p
)

204 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

205 
buf
 [64];

207 
	`π∆_lök_ˇn_˘æmode2°r
(
ci
->
ci_˘æmode
.
Êags
, 
buf
, (buf));

208 
	`∆_dump
(
p
, " bitrate %d %s <%s>",

209 
ci
->
ci_bôtimög
.
bôøã
, 
	`¥öt_ˇn_°©e
(ci->
ci_°©e
), 
buf
);

211 i‡(
ci
->
ci_mask
 & 
CAN_HAS_RESTART
) {

212 i‡(
ci
->
ci_ª°¨t
)

213 
	`∆_dump_löe
(
p
,"Ñestarting\n");

216 i‡(
ci
->
ci_mask
 & 
CAN_HAS_RESTART_MS
) {

217 
	`∆_dump_löe
(
p
,"Ñestart interval %d ms\n",

218 
ci
->
ci_ª°¨t_ms
);

221 i‡(
ci
->
ci_mask
 & 
CAN_HAS_BITTIMING
) {

222 
	`∆_dump_löe
(
p
," sampleÖoint %f %%\n",

223 ((Ë
ci
->
ci_bôtimög
.
ßm∂e_poöt
)/10);

224 
	`∆_dump_löe
(
p
,"Åime quanta %dÇs\n",

225 
ci
->
ci_bôtimög
.
tq
);

226 
	`∆_dump_löe
(
p
,"Öropagation segment %dÅq\n",

227 
ci
->
ci_bôtimög
.
¥›_£g
);

228 
	`∆_dump_löe
(
p
,"Öhase buffer segment1 %dÅq\n",

229 
ci
->
ci_bôtimög
.
pha£_£g1
);

230 
	`∆_dump_löe
(
p
,"Öhase buffer segment2 %dÅq\n",

231 
ci
->
ci_bôtimög
.
pha£_£g2
);

232 
	`∆_dump_löe
(
p
," synchronisation jump width %dÅq\n",

233 
ci
->
ci_bôtimög
.
sjw
);

234 
	`∆_dump_löe
(
p
," bitrateÖrescaler %d\n",

235 
ci
->
ci_bôtimög
.
bΩ
);

238 i‡(
ci
->
ci_mask
 & 
CAN_HAS_BITTIMING_CONST
) {

239 
	`∆_dump_löe
(
p
," minimumÅsig1 %dÅq\n",

240 
ci
->
ci_bôtimög_c⁄°
.
t£g1_mö
);

241 
	`∆_dump_löe
(
p
," maximumÅsig1 %dÅq\n",

242 
ci
->
ci_bôtimög_c⁄°
.
t£g1_max
);

243 
	`∆_dump_löe
(
p
," minimumÅsig2 %dÅq\n",

244 
ci
->
ci_bôtimög_c⁄°
.
t£g2_mö
);

245 
	`∆_dump_löe
(
p
," maximumÅsig2 %dÅq\n",

246 
ci
->
ci_bôtimög_c⁄°
.
t£g2_max
);

247 
	`∆_dump_löe
(
p
," maximum sjw %dÅq\n",

248 
ci
->
ci_bôtimög_c⁄°
.
sjw_max
);

249 
	`∆_dump_löe
(
p
," minimum brp %d\n",

250 
ci
->
ci_bôtimög_c⁄°
.
bΩ_mö
);

251 
	`∆_dump_löe
(
p
," maximum brp %d\n",

252 
ci
->
ci_bôtimög_c⁄°
.
bΩ_max
);

253 
	`∆_dump_löe
(
p
," brp increment %d\n",

254 
ci
->
ci_bôtimög_c⁄°
.
bΩ_öc
);

257 i‡(
ci
->
ci_mask
 & 
CAN_HAS_CLOCK
) {

258 
	`∆_dump_löe
(
p
," ba£ fªq %d Hz\n", 
ci
->
ci_˛ock
);

262 i‡(
ci
->
ci_mask
 & 
CAN_HAS_BERR_COUNTER
) {

263 
	`∆_dump_löe
(
p
," busÉrror RX %d\n",

264 
ci
->
ci_bîr_cou¡î
.
rxîr
);

265 
	`∆_dump_löe
(
p
," busÉrror TX %d\n",

266 
ci
->
ci_bîr_cou¡î
.
txîr
);

270 
	}
}

272 
	$ˇn_˛⁄e
(
π∆_lök
 *
d°
, π∆_lök *
§c
)

274 
ˇn_öfo
 *
cd°
, *
c§c
 = 
§c
->
l_öfo
;

275 
ªt
;

277 
d°
->
l_öfo
 = 
NULL
;

278 
ªt
 = 
	`π∆_lök_£t_ty≥
(
d°
, "can");

279 i‡(
ªt
 < 0)

280  
ªt
;

282 
cd°
 = 
	`mÆloc
((*cdst));

283 i‡(!
cd°
)

284  -
NLE_NOMEM
;

286 *
cd°
 = *
c§c
;

287 
d°
->
l_öfo
 = 
cd°
;

290 
	}
}

292 
	$ˇn_put_©ås
(
∆_msg
 *
msg
, 
π∆_lök
 *
lök
)

294 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

295 
∆©å
 *
d©a
;

297 
d©a
 = 
	`∆a_√°_°¨t
(
msg
, 
IFLA_INFO_DATA
);

298 i‡(!
d©a
)

299  -
NLE_MSGSIZE
;

301 i‡(
ci
->
ci_mask
 & 
CAN_HAS_RESTART
)

302 
	`NLA_PUT_U32
(
msg
, 
CAN_HAS_RESTART
, 
ci
->
ci_ª°¨t
);

304 i‡(
ci
->
ci_mask
 & 
CAN_HAS_RESTART_MS
)

305 
	`NLA_PUT_U32
(
msg
, 
CAN_HAS_RESTART_MS
, 
ci
->
ci_ª°¨t_ms
);

307 i‡(
ci
->
ci_mask
 & 
CAN_HAS_CTRLMODE
)

308 
	`NLA_PUT
(
msg
, 
CAN_HAS_CTRLMODE
, (
ci
->
ci_˘æmode
),

309 &
ci
->
ci_˘æmode
);

311 i‡(
ci
->
ci_mask
 & 
CAN_HAS_BITTIMING
)

312 
	`NLA_PUT
(
msg
, 
CAN_HAS_BITTIMING
, (
ci
->
ci_bôtimög
),

313 &
ci
->
ci_bôtimög
);

315 i‡(
ci
->
ci_mask
 & 
CAN_HAS_BITTIMING_CONST
)

316 
	`NLA_PUT
(
msg
, 
CAN_HAS_BITTIMING_CONST
,

317 (
ci
->
ci_bôtimög_c⁄°
),

318 &
ci
->
ci_bôtimög_c⁄°
);

320 i‡(
ci
->
ci_mask
 & 
CAN_HAS_CLOCK
)

321 
	`NLA_PUT
(
msg
, 
CAN_HAS_CLOCK
, (
ci
->
ci_˛ock
),

322 &
ci
->
ci_˛ock
);

324 
	`∆a_√°_íd
(
msg
, 
d©a
);

326 
∆a_put_Áûuª
:

329 
	}
}

331 
π∆_lök_öfo_›s
 
	gˇn_öfo_›s
 = {

332 .
io_«me
 = "can",

333 .
	gio_Æloc
 = 
ˇn_Æloc
,

334 .
	gio_∑r£
 = 
ˇn_∑r£
,

335 .
	gio_dump
 = {

336 [
NL_DUMP_LINE
] = 
ˇn_dump_löe
,

337 [
NL_DUMP_DETAILS
] = 
ˇn_dump_dëaûs
,

339 .
	gio_˛⁄e
 = 
ˇn_˛⁄e
,

340 .
	gio_put_©ås
 = 
ˇn_put_©ås
,

341 .
	gio_‰ì
 = 
ˇn_‰ì
,

345 
	#IS_CAN_LINK_ASSERT
(
lök
) \

346 i‡((
lök
)->
l_öfo_›s
 !&
ˇn_öfo_›s
) { \

347 
	`APPBUG
("Link isÇotá CANÜink. setÅype \"can\" first."); \

348  -
NLE_OPNOTSUPP
; \

349 }

	)

363 
	$π∆_lök_is_ˇn
(
π∆_lök
 *
lök
)

365  
lök
->
l_öfo_›s
 && !
	`°rcmp
÷ök->l_öfo_›s->
io_«me
, "can");

366 
	}
}

374 
	$π∆_lök_ˇn_ª°¨t
(
π∆_lök
 *
lök
)

376 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

378 
	`IS_CAN_LINK_ASSERT
(
lök
);

380 
ci
->
ci_ª°¨t
 = 1;

381 
ci
->
ci_ª°¨t
 |
CAN_HAS_RESTART
;

384 
	}
}

393 
	$π∆_lök_ˇn_‰eq
(
π∆_lök
 *
lök
, 
uöt32_t
 *
‰eq
)

395 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

397 
	`IS_CAN_LINK_ASSERT
(
lök
);

398 i‡(!
‰eq
)

399  -
NLE_INVAL
;

401 i‡(
ci
->
ci_mask
 & 
CAN_HAS_CLOCK
)

402 *
‰eq
 = 
ci
->
ci_˛ock
.freq;

404  -
NLE_AGAIN
;

407 
	}
}

415 
	$π∆_lök_ˇn_°©e
(
π∆_lök
 *
lök
, 
uöt32_t
 *
°©e
)

417 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

419 
	`IS_CAN_LINK_ASSERT
(
lök
);

420 i‡(!
°©e
)

421  -
NLE_INVAL
;

423 *
°©e
 = 
ci
->
ci_°©e
;

426 
	}
}

434 
	$π∆_lök_ˇn_bîr_rx
(
π∆_lök
 *
lök
)

436 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

438 
	`IS_CAN_LINK_ASSERT
(
lök
);

440 i‡(
ci
->
ci_mask
 & 
CAN_HAS_BERR_COUNTER
)

441  
ci
->
ci_bîr_cou¡î
.
rxîr
;

443  -
NLE_AGAIN
;

444 
	}
}

452 
	$π∆_lök_ˇn_bîr_tx
(
π∆_lök
 *
lök
)

454 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

456 
	`IS_CAN_LINK_ASSERT
(
lök
);

458 i‡(
ci
->
ci_mask
 & 
CAN_HAS_BERR_COUNTER
)

459  
ci
->
ci_bîr_cou¡î
.
txîr
;

461  -
NLE_AGAIN
;

462 
	}
}

471 
	$π∆_lök_ˇn_bîr
(
π∆_lök
 *
lök
, 
ˇn_bîr_cou¡î
 *
bîr
)

473 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

475 
	`IS_CAN_LINK_ASSERT
(
lök
);

476 i‡(!
bîr
)

477  -
NLE_INVAL
;

479 i‡(
ci
->
ci_mask
 & 
CAN_HAS_BERR_COUNTER
)

480 *
bîr
 = 
ci
->
ci_bîr_cou¡î
;

482  -
NLE_AGAIN
;

485 
	}
}

494 
	$π∆_lök_ˇn_gë_bt_c⁄°
(
π∆_lök
 *
lök
,

495 
ˇn_bôtimög_c⁄°
 *
bt_c⁄°
)

497 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

499 
	`IS_CAN_LINK_ASSERT
(
lök
);

500 i‡(!
bt_c⁄°
)

501  -
NLE_INVAL
;

503 i‡(
ci
->
ci_mask
 & 
CAN_HAS_BITTIMING_CONST
)

504 *
bt_c⁄°
 = 
ci
->
ci_bôtimög_c⁄°
;

506  -
NLE_AGAIN
;

509 
	}
}

518 
	$π∆_lök_ˇn_gë_bôtimög
(
π∆_lök
 *
lök
,

519 
ˇn_bôtimög
 *
bô_timög
)

521 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

523 
	`IS_CAN_LINK_ASSERT
(
lök
);

524 i‡(!
bô_timög
)

525  -
NLE_INVAL
;

527 i‡(
ci
->
ci_mask
 & 
CAN_HAS_BITTIMING
)

528 *
bô_timög
 = 
ci
->
ci_bôtimög
;

530  -
NLE_AGAIN
;

533 
	}
}

542 
	$π∆_lök_ˇn_£t_bôtimög
(
π∆_lök
 *
lök
,

543 
ˇn_bôtimög
 *
bô_timög
)

545 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

547 
	`IS_CAN_LINK_ASSERT
(
lök
);

548 i‡(!
bô_timög
)

549  -
NLE_INVAL
;

551 
ci
->
ci_bôtimög
 = *
bô_timög
;

552 
ci
->
ci_mask
 |
CAN_HAS_BITTIMING
;

555 
	}
}

564 
	$π∆_lök_ˇn_gë_bôøã
(
π∆_lök
 *
lök
, 
uöt32_t
 *
bôøã
)

566 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

568 
	`IS_CAN_LINK_ASSERT
(
lök
);

569 i‡(!
bôøã
)

570  -
NLE_INVAL
;

572 i‡(
ci
->
ci_mask
 & 
CAN_HAS_BITTIMING
)

573 *
bôøã
 = 
ci
->
ci_bôtimög
.bitrate;

575  -
NLE_AGAIN
;

578 
	}
}

587 
	$π∆_lök_ˇn_£t_bôøã
(
π∆_lök
 *
lök
, 
uöt32_t
 
bôøã
)

589 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

591 
	`IS_CAN_LINK_ASSERT
(
lök
);

593 
ci
->
ci_bôtimög
.
bôøã
 = bitrate;

594 
ci
->
ci_mask
 |
CAN_HAS_BITTIMING
;

597 
	}
}

606 
	$π∆_lök_ˇn_gë_ßm∂e_poöt
(
π∆_lök
 *
lök
, 
uöt32_t
 *
•
)

608 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

610 
	`IS_CAN_LINK_ASSERT
(
lök
);

611 i‡(!
•
)

612  -
NLE_INVAL
;

614 i‡(
ci
->
ci_mask
 & 
CAN_HAS_BITTIMING
)

615 *
•
 = 
ci
->
ci_bôtimög
.
ßm∂e_poöt
;

617  -
NLE_AGAIN
;

620 
	}
}

629 
	$π∆_lök_ˇn_£t_ßm∂e_poöt
(
π∆_lök
 *
lök
, 
uöt32_t
 
•
)

631 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

633 
	`IS_CAN_LINK_ASSERT
(
lök
);

635 
ci
->
ci_bôtimög
.
ßm∂e_poöt
 = 
•
;

636 
ci
->
ci_mask
 |
CAN_HAS_BITTIMING
;

639 
	}
}

648 
	$π∆_lök_ˇn_gë_ª°¨t_ms
(
π∆_lök
 *
lök
, 
uöt32_t
 *
öãrvÆ
)

650 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

652 
	`IS_CAN_LINK_ASSERT
(
lök
);

653 i‡(!
öãrvÆ
)

654  -
NLE_INVAL
;

656 i‡(
ci
->
ci_mask
 & 
CAN_HAS_RESTART_MS
)

657 *
öãrvÆ
 = 
ci
->
ci_ª°¨t_ms
;

659  -
NLE_AGAIN
;

662 
	}
}

671 
	$π∆_lök_ˇn_£t_ª°¨t_ms
(
π∆_lök
 *
lök
, 
uöt32_t
 
öãrvÆ
)

673 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

675 
	`IS_CAN_LINK_ASSERT
(
lök
);

677 
ci
->
ci_ª°¨t_ms
 = 
öãrvÆ
;

678 
ci
->
ci_mask
 |
CAN_HAS_RESTART_MS
;

681 
	}
}

690 
	$π∆_lök_ˇn_gë_˘æmode
(
π∆_lök
 *
lök
, 
uöt32_t
 *
˘æmode
)

692 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

694 
	`IS_CAN_LINK_ASSERT
(
lök
);

695 i‡(!
˘æmode
)

696  -
NLE_INVAL
;

698 i‡(
ci
->
ci_mask
 & 
CAN_HAS_CTRLMODE
)

699 *
˘æmode
 = 
ci
->
ci_˘æmode
.
Êags
;

701  -
NLE_AGAIN
;

704 
	}
}

713 
	$π∆_lök_ˇn_£t_˘æmode
(
π∆_lök
 *
lök
, 
uöt32_t
 
˘æmode
)

715 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

717 
	`IS_CAN_LINK_ASSERT
(
lök
);

719 
ci
->
ci_˘æmode
.
Êags
 |
˘æmode
;

720 
ci
->
ci_˘æmode
.
mask
 |
˘æmode
;

721 
ci
->
ci_mask
 |
CAN_HAS_CTRLMODE
;

724 
	}
}

733 
	$π∆_lök_ˇn_un£t_˘æmode
(
π∆_lök
 *
lök
, 
uöt32_t
 
˘æmode
)

735 
ˇn_öfo
 *
ci
 = 
lök
->
l_öfo
;

737 
	`IS_CAN_LINK_ASSERT
(
lök
);

739 
ci
->
ci_˘æmode
.
Êags
 &~
˘æmode
;

740 
ci
->
ci_˘æmode
.
mask
 |
˘æmode
;

741 
ci
->
ci_mask
 |
CAN_HAS_CTRLMODE
;

744 
	}
}

753 c⁄° 
å™s_tbl
 
	gˇn_˘æmode
[] = {

754 
__ADD
(
CAN_CTRLMODE_LOOPBACK
, 
lo›back
)

755 
__ADD
(
CAN_CTRLMODE_LISTENONLY
, 
li°í
-
⁄ly
)

756 
__ADD
(
CAN_CTRLMODE_3_SAMPLES
, 
åùÀ
-
ßm∂ög
)

757 
__ADD
(
CAN_CTRLMODE_ONE_SHOT
, 
⁄e
-
shŸ
)

758 
__ADD
(
CAN_CTRLMODE_BERR_REPORTING
, 
bîr
-
ªp‹tög
)

761 *
	$π∆_lök_ˇn_˘æmode2°r
(
˘æmode
, *
buf
, 
size_t
 
Àn
)

763  
	`__Êags2°r
(
˘æmode
, 
buf
, 
Àn
, 
ˇn_˘æmode
,

764 
	`ARRAY_SIZE
(
ˇn_˘æmode
));

765 
	}
}

767 
	$π∆_lök_ˇn_°r2˘æmode
(c⁄° *
«me
)

769  
	`__°r2Êags
(
«me
, 
ˇn_˘æmode
, 
	`ARRAY_SIZE
(can_ctrlmode));

770 
	}
}

774 
__öô
 
	$ˇn_öô
()

776 
	`π∆_lök_ªgi°î_öfo
(&
ˇn_öfo_›s
);

777 
	}
}

779 
__exô
 
	$ˇn_exô
()

781 
	`π∆_lök_uƒegi°î_öfo
(&
ˇn_öfo_›s
);

782 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/link/dummy.c

22 
	~<√éök-¥iv©e/√éök.h
>

23 
	~<√éök/√éök.h
>

24 
	~<√éök-¥iv©e/rouã/lök/≠i.h
>

26 
π∆_lök_öfo_›s
 
	gdummy_öfo_›s
 = {

27 .
io_«me
 = "dummy",

30 
__öô
 
	$dummy_öô
()

32 
	`π∆_lök_ªgi°î_öfo
(&
dummy_öfo_›s
);

33 
	}
}

35 
__exô
 
	$dummy_exô
()

37 
	`π∆_lök_uƒegi°î_öfo
(&
dummy_öfo_›s
);

38 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/link/inet.c

60 
	~<√éök-¥iv©e/√éök.h
>

61 
	~<√éök/√éök.h
>

62 
	~<√éök/©å.h
>

63 
	~<√éök/rouã/π∆.h
>

64 
	~<√éök-¥iv©e/rouã/lök/≠i.h
>

67 
	söë_d©a


69 
uöt8_t
 
	mi_c⁄f£t
[
IPV4_DEVCONF_MAX
];

70 
uöt32_t
 
	mi_c⁄f
[
IPV4_DEVCONF_MAX
];

74 *
	$öë_Æloc
(
π∆_lök
 *
lök
)

76  
	`ˇŒoc
(1, (
öë_d©a
));

77 
	}
}

79 *
	$öë_˛⁄e
(
π∆_lök
 *
lök
, *
d©a
)

81 
öë_d©a
 *
id
;

83 i‡((
id
 = 
	`öë_Æloc
(
lök
)))

84 
	`mem˝y
(
id
, 
d©a
, (*id));

86  
id
;

87 
	}
}

89 
	$öë_‰ì
(
π∆_lök
 *
lök
, *
d©a
)

91 
	`‰ì
(
d©a
);

92 
	}
}

94 
∆a_pﬁicy
 
	göë_pﬁicy
[
IFLA_INET6_MAX
+1] = {

95 [
IFLA_INET_CONF
] = { .
möÀn
 = 4 },

98 
	$öë_∑r£_af
(
π∆_lök
 *
lök
, 
∆©å
 *
©å
, *
d©a
)

100 
öë_d©a
 *
id
 = 
d©a
;

101 
∆©å
 *
tb
[
IFLA_INET_MAX
+1];

102 
îr
;

104 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
IFLA_INET_MAX
, 
©å
, 
öë_pﬁicy
);

105 i‡(
îr
 < 0)

106  
îr
;

107 i‡(
tb
[
IFLA_INET_CONF
] && 
	`∆a_Àn
(tb[IFLA_INET_CONF]) % 4)

108  -
EINVAL
;

110 i‡(
tb
[
IFLA_INET_CONF
]) {

111 
i
;

112 
Àn
 = 
	`mö_t
(, 
IPV4_DEVCONF_MAX
, 
	`∆a_Àn
(
tb
[
IFLA_INET_CONF
]) / 4);

114 
i
 = 0; i < 
Àn
; i++)

115 
id
->
i_c⁄f£t
[
i
] = 1;

116 
	`∆a_mem˝y
(&
id
->
i_c⁄f
, 
tb
[
IFLA_INET_CONF
], (id->i_conf));

120 
	}
}

122 
	$öë_fûl_af
(
π∆_lök
 *
lök
, 
∆_msg
 *
msg
, *
d©a
)

124 
öë_d©a
 *
id
 = 
d©a
;

125 
∆©å
 *
∆a
;

126 
i
;

128 i‡(!(
∆a
 = 
	`∆a_√°_°¨t
(
msg
, 
IFLA_INET_CONF
)))

129  -
NLE_MSGSIZE
;

131 
i
 = 0; i < 
IPV4_DEVCONF_MAX
; i++)

132 i‡(
id
->
i_c⁄f£t
[
i
])

133 
	`NLA_PUT_U32
(
msg
, 
i
+1, 
id
->
i_c⁄f
[i]);

135 
	`∆a_√°_íd
(
msg
, 
∆a
);

139 
∆a_put_Áûuª
:

140  -
NLE_MSGSIZE
;

141 
	}
}

143 c⁄° 
å™s_tbl
 
	göë_devc⁄f
[] = {

144 
__ADD
(
IPV4_DEVCONF_FORWARDING
, 
f‹w¨dög
)

145 
__ADD
(
IPV4_DEVCONF_MC_FORWARDING
, 
mc_f‹w¨dög
)

146 
__ADD
(
IPV4_DEVCONF_PROXY_ARP
, 
¥oxy_¨p
)

147 
__ADD
(
IPV4_DEVCONF_ACCEPT_REDIRECTS
, 
ac˚±_ªdúe˘s
)

148 
__ADD
(
IPV4_DEVCONF_SECURE_REDIRECTS
, 
£cuª_ªdúe˘s
)

149 
__ADD
(
IPV4_DEVCONF_SEND_REDIRECTS
, 
£nd_ªdúe˘s
)

150 
__ADD
(
IPV4_DEVCONF_SHARED_MEDIA
, 
sh¨ed_medü
)

151 
__ADD
(
IPV4_DEVCONF_RP_FILTER
, 
Ω_fûãr
)

152 
__ADD
(
IPV4_DEVCONF_ACCEPT_SOURCE_ROUTE
, 
ac˚±_sour˚_rouã
)

153 
__ADD
(
IPV4_DEVCONF_BOOTP_RELAY
, 
boŸp_ªœy
)

154 
__ADD
(
IPV4_DEVCONF_LOG_MARTIANS
, 
log_m¨tüns
)

155 
__ADD
(
IPV4_DEVCONF_TAG
, 
èg
)

156 
__ADD
(
IPV4_DEVCONF_ARPFILTER
, 
¨pfûãr
)

157 
__ADD
(
IPV4_DEVCONF_MEDIUM_ID
, 
medium_id
)

158 
__ADD
(
IPV4_DEVCONF_NOXFRM
, 
nox‰m
)

159 
__ADD
(
IPV4_DEVCONF_NOPOLICY
, 
n›ﬁicy
)

160 
__ADD
(
IPV4_DEVCONF_FORCE_IGMP_VERSION
, 
f‹˚_igmp_vîsi⁄
)

161 
__ADD
(
IPV4_DEVCONF_ARP_ANNOUNCE
, 
¨p_™noun˚
)

162 
__ADD
(
IPV4_DEVCONF_ARP_IGNORE
, 
¨p_ign‹e
)

163 
__ADD
(
IPV4_DEVCONF_PROMOTE_SECONDARIES
, 
¥omŸe_£c⁄d¨õs
)

164 
__ADD
(
IPV4_DEVCONF_ARP_ACCEPT
, 
¨p_ac˚±
)

165 
__ADD
(
IPV4_DEVCONF_ARP_NOTIFY
, 
¨p_nŸify
)

166 
__ADD
(
IPV4_DEVCONF_ACCEPT_LOCAL
, 
ac˚±_loˇl
)

167 
__ADD
(
IPV4_DEVCONF_SRC_VMARK
, 
§c_vm¨k
)

168 
__ADD
(
IPV4_DEVCONF_PROXY_ARP_PVLAN
, 
¥oxy_¨p_pvœn
)

169 
__ADD
(
IPV4_DEVCONF_ROUTE_LOCALNET
, 
rouã_loˇ ë
)

170 
__ADD
(
IPV4_DEVCONF_IGMPV2_UNSOLICITED_REPORT_INTERVAL
, 
igmpv2_unsﬁicôed_ªp‹t_öãrvÆ
)

171 
__ADD
(
IPV4_DEVCONF_IGMPV3_UNSOLICITED_REPORT_INTERVAL
, 
igmpv3_unsﬁicôed_ªp‹t_öãrvÆ
)

174 c⁄° *
	$π∆_lök_öë_devc⁄f2°r
(
ty≥
, *
buf
, 
size_t
 
Àn
)

176  
	`__ty≥2°r
(
ty≥
, 
buf
, 
Àn
, 
öë_devc⁄f
,

177 
	`ARRAY_SIZE
(
öë_devc⁄f
));

178 
	}
}

180 
	$π∆_lök_öë_°r2devc⁄f
(c⁄° *
«me
)

182  
	`__°r2ty≥
(
«me
, 
öë_devc⁄f
, 
	`ARRAY_SIZE
(inet_devconf));

183 
	}
}

185 
	$öë_dump_dëaûs
(
π∆_lök
 *
lök
,

186 
∆_dump_∑øms
 *
p
, *
d©a
)

188 
öë_d©a
 *
id
 = 
d©a
;

189 
buf
[64];

190 
i
, 
n
 = 0;

192 
	`∆_dump_löe
(
p
, " ipv4 devconf:\n");

193 
	`∆_dump_löe
(
p
, " ");

195 
i
 = 0; i < 
IPV4_DEVCONF_MAX
; i++) {

196 
	`∆_dump_löe
(
p
, "%-19s %3u",

197 
	`π∆_lök_öë_devc⁄f2°r
(
i
+1, 
buf
, (buf)),

198 
id
->
i_c⁄f£t
[
i
] ? id->
i_c⁄f
[i] : 0);

200 i‡(++
n
 == 3) {

201 
	`∆_dump
(
p
, "\n");

202 
	`∆_dump_löe
(
p
, " ");

203 
n
 = 0;

205 
	`∆_dump
(
p
, " ");

208 i‡(
n
 != 0)

209 
	`∆_dump
(
p
, "\n");

210 
	}
}

212 
π∆_lök_af_›s
 
	göë_›s
 = {

213 .
ao_Ámûy
 = 
AF_INET
,

214 .
	gao_Æloc
 = &
öë_Æloc
,

215 .
	gao_˛⁄e
 = &
öë_˛⁄e
,

216 .
	gao_‰ì
 = &
öë_‰ì
,

217 .
	gao_∑r£_af
 = &
öë_∑r£_af
,

218 .
	gao_fûl_af
 = &
öë_fûl_af
,

219 .
	gao_dump
[
NL_DUMP_DETAILS
] = &
öë_dump_dëaûs
,

237 
	$π∆_lök_öë_gë_c⁄f
(
π∆_lök
 *
lök
, c⁄° 
cfgid
,

238 
uöt32_t
 *
ªs
)

240 
öë_d©a
 *
id
;

242 i‡(
cfgid
 =0 || cfgid > 
IPV4_DEVCONF_MAX
)

243  -
NLE_RANGE
;

245 i‡(!(
id
 = 
	`π∆_lök_af_Æloc
(
lök
, &
öë_›s
)))

246  -
NLE_NOATTR
;

248 i‡(!
id
->
i_c⁄f£t
[
cfgid
 - 1])

249  -
NLE_INVAL
;

250 *
ªs
 = 
id
->
i_c⁄f
[
cfgid
 - 1];

253 
	}
}

267 
	$π∆_lök_öë_£t_c⁄f
(
π∆_lök
 *
lök
, c⁄° 
cfgid
,

268 
uöt32_t
 
vÆue
)

270 
öë_d©a
 *
id
;

272 i‡(!(
id
 = 
	`π∆_lök_af_Æloc
(
lök
, &
öë_›s
)))

273  -
NLE_NOMEM
;

275 i‡(
cfgid
 =0 || cfgid > 
IPV4_DEVCONF_MAX
)

276  -
NLE_RANGE
;

278 
id
->
i_c⁄f£t
[
cfgid
 - 1] = 1;

279 
id
->
i_c⁄f
[
cfgid
 - 1] = 
vÆue
;

282 
	}
}

285 
__öô
 
	$öë_öô
()

287 
	`π∆_lök_af_ªgi°î
(&
öë_›s
);

288 
	}
}

290 
__exô
 
	$öë_exô
()

292 
	`π∆_lök_af_uƒegi°î
(&
öë_›s
);

293 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/link/inet6.c

12 
	~<√éök-¥iv©e/√éök.h
>

13 
	~<√éök/√éök.h
>

14 
	~<√éök/©å.h
>

15 
	~<√éök/rouã/π∆.h
>

16 
	~<√éök-¥iv©e/rouã/lök/≠i.h
>

18 
	söë6_d©a


20 
uöt32_t
 
	mi6_Êags
;

21 
iÊa_ˇcheöfo
 
	mi6_ˇcheöfo
;

22 
uöt32_t
 
	mi6_c⁄f
[
DEVCONF_MAX
];

25 *
	$öë6_Æloc
(
π∆_lök
 *
lök
)

27  
	`ˇŒoc
(1, (
öë6_d©a
));

28 
	}
}

30 *
	$öë6_˛⁄e
(
π∆_lök
 *
lök
, *
d©a
)

32 
öë6_d©a
 *
i6
;

34 i‡((
i6
 = 
	`öë6_Æloc
(
lök
)))

35 
	`mem˝y
(
i6
, 
d©a
, (*i6));

37  
i6
;

38 
	}
}

40 
	$öë6_‰ì
(
π∆_lök
 *
lök
, *
d©a
)

42 
	`‰ì
(
d©a
);

43 
	}
}

45 
∆a_pﬁicy
 
	göë6_pﬁicy
[
IFLA_INET6_MAX
+1] = {

46 [
IFLA_INET6_FLAGS
] = { .
ty≥
 = 
NLA_U32
 },

47 [
IFLA_INET6_CACHEINFO
] = { .
möÀn
 = (
iÊa_ˇcheöfo
) },

48 [
IFLA_INET6_CONF
] = { .
möÀn
 = 4 },

49 [
IFLA_INET6_STATS
] = { .
möÀn
 = 8 },

50 [
IFLA_INET6_ICMP6STATS
] = { .
möÀn
 = 8 },

53 c⁄° 
uöt8_t
 
	gm≠_°©_id_‰om_IPSTATS_MIB_v1
[
__IPSTATS_MIB_MAX
] = {

59 [ 1] = 
RTNL_LINK_IP6_INPKTS
,

60 [ 2] = 
RTNL_LINK_IP6_INHDRERRORS
,

61 [ 3] = 
RTNL_LINK_IP6_INTOOBIGERRORS
,

62 [ 4] = 
RTNL_LINK_IP6_INNOROUTES
,

63 [ 5] = 
RTNL_LINK_IP6_INADDRERRORS
,

64 [ 6] = 
RTNL_LINK_IP6_INUNKNOWNPROTOS
,

65 [ 7] = 
RTNL_LINK_IP6_INTRUNCATEDPKTS
,

66 [ 8] = 
RTNL_LINK_IP6_INDISCARDS
,

67 [ 9] = 
RTNL_LINK_IP6_INDELIVERS
,

68 [10] = 
RTNL_LINK_IP6_OUTFORWDATAGRAMS
,

69 [11] = 
RTNL_LINK_IP6_OUTPKTS
,

70 [12] = 
RTNL_LINK_IP6_OUTDISCARDS
,

71 [13] = 
RTNL_LINK_IP6_OUTNOROUTES
,

72 [14] = 
RTNL_LINK_IP6_REASMTIMEOUT
,

73 [15] = 
RTNL_LINK_IP6_REASMREQDS
,

74 [16] = 
RTNL_LINK_IP6_REASMOKS
,

75 [17] = 
RTNL_LINK_IP6_REASMFAILS
,

76 [18] = 
RTNL_LINK_IP6_FRAGOKS
,

77 [19] = 
RTNL_LINK_IP6_FRAGFAILS
,

78 [20] = 
RTNL_LINK_IP6_FRAGCREATES
,

79 [21] = 
RTNL_LINK_IP6_INMCASTPKTS
,

80 [22] = 
RTNL_LINK_IP6_OUTMCASTPKTS
,

81 [23] = 
RTNL_LINK_IP6_INBCASTPKTS
,

82 [24] = 
RTNL_LINK_IP6_OUTBCASTPKTS
,

83 [25] = 
RTNL_LINK_IP6_INOCTETS
,

84 [26] = 
RTNL_LINK_IP6_OUTOCTETS
,

85 [27] = 
RTNL_LINK_IP6_INMCASTOCTETS
,

86 [28] = 
RTNL_LINK_IP6_OUTMCASTOCTETS
,

87 [29] = 
RTNL_LINK_IP6_INBCASTOCTETS
,

88 [30] = 
RTNL_LINK_IP6_OUTBCASTOCTETS
,

91 c⁄° 
uöt8_t
 
	gm≠_°©_id_‰om_IPSTATS_MIB_v2
[
__IPSTATS_MIB_MAX
] = {

94 [ 1] = 
RTNL_LINK_IP6_INPKTS
,

95 [ 2] = 
RTNL_LINK_IP6_INOCTETS
,

96 [ 3] = 
RTNL_LINK_IP6_INDELIVERS
,

97 [ 4] = 
RTNL_LINK_IP6_OUTFORWDATAGRAMS
,

98 [ 5] = 
RTNL_LINK_IP6_OUTPKTS
,

99 [ 6] = 
RTNL_LINK_IP6_OUTOCTETS
,

100 [ 7] = 
RTNL_LINK_IP6_INHDRERRORS
,

101 [ 8] = 
RTNL_LINK_IP6_INTOOBIGERRORS
,

102 [ 9] = 
RTNL_LINK_IP6_INNOROUTES
,

103 [10] = 
RTNL_LINK_IP6_INADDRERRORS
,

104 [11] = 
RTNL_LINK_IP6_INUNKNOWNPROTOS
,

105 [12] = 
RTNL_LINK_IP6_INTRUNCATEDPKTS
,

106 [13] = 
RTNL_LINK_IP6_INDISCARDS
,

107 [14] = 
RTNL_LINK_IP6_OUTDISCARDS
,

108 [15] = 
RTNL_LINK_IP6_OUTNOROUTES
,

109 [16] = 
RTNL_LINK_IP6_REASMTIMEOUT
,

110 [17] = 
RTNL_LINK_IP6_REASMREQDS
,

111 [18] = 
RTNL_LINK_IP6_REASMOKS
,

112 [19] = 
RTNL_LINK_IP6_REASMFAILS
,

113 [20] = 
RTNL_LINK_IP6_FRAGOKS
,

114 [21] = 
RTNL_LINK_IP6_FRAGFAILS
,

115 [22] = 
RTNL_LINK_IP6_FRAGCREATES
,

116 [23] = 
RTNL_LINK_IP6_INMCASTPKTS
,

117 [24] = 
RTNL_LINK_IP6_OUTMCASTPKTS
,

118 [25] = 
RTNL_LINK_IP6_INBCASTPKTS
,

119 [26] = 
RTNL_LINK_IP6_OUTBCASTPKTS
,

120 [27] = 
RTNL_LINK_IP6_INMCASTOCTETS
,

121 [28] = 
RTNL_LINK_IP6_OUTMCASTOCTETS
,

122 [29] = 
RTNL_LINK_IP6_INBCASTOCTETS
,

123 [30] = 
RTNL_LINK_IP6_OUTBCASTOCTETS
,

124 [31] = 
RTNL_LINK_IP6_CSUMERRORS
,

125 [32] = 
RTNL_LINK_IP6_NOECTPKTS
,

126 [33] = 
RTNL_LINK_IP6_ECT1PKTS
,

127 [34] = 
RTNL_LINK_IP6_ECT0PKTS
,

128 [35] = 
RTNL_LINK_IP6_CEPKTS
,

131 
	$öë6_∑r£_¥Ÿöfo
(
π∆_lök
 *
lök
, 
∆©å
 *
©å
,

132 *
d©a
)

134 
öë6_d©a
 *
i6
 = 
d©a
;

135 
∆©å
 *
tb
[
IFLA_INET6_MAX
+1];

136 
îr
;

138 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
IFLA_INET6_MAX
, 
©å
, 
öë6_pﬁicy
);

139 i‡(
îr
 < 0)

140  
îr
;

141 i‡(
tb
[
IFLA_INET6_CONF
] && 
	`∆a_Àn
(tb[IFLA_INET6_CONF]) % 4)

142  -
EINVAL
;

143 i‡(
tb
[
IFLA_INET6_STATS
] && 
	`∆a_Àn
(tb[IFLA_INET6_STATS]) % 8)

144  -
EINVAL
;

145 i‡(
tb
[
IFLA_INET6_ICMP6STATS
] && 
	`∆a_Àn
(tb[IFLA_INET6_ICMP6STATS]) % 8)

146  -
EINVAL
;

148 i‡(
tb
[
IFLA_INET6_FLAGS
])

149 
i6
->
i6_Êags
 = 
	`∆a_gë_u32
(
tb
[
IFLA_INET6_FLAGS
]);

151 i‡(
tb
[
IFLA_INET6_CACHEINFO
])

152 
	`∆a_mem˝y
(&
i6
->
i6_ˇcheöfo
, 
tb
[
IFLA_INET6_CACHEINFO
],

153 (
i6
->
i6_ˇcheöfo
));

155 i‡(
tb
[
IFLA_INET6_CONF
])

156 
	`∆a_mem˝y
(&
i6
->
i6_c⁄f
, 
tb
[
IFLA_INET6_CONF
],

157 (
i6
->
i6_c⁄f
));

163 i‡(
tb
[
IFLA_INET6_STATS
]) {

164 *
˙t
 = 
	`∆a_d©a
(
tb
[
IFLA_INET6_STATS
]);

165 
uöt64_t
 
°©
;

166 
i
;

167 
Àn
 = 
	`∆a_Àn
(
tb
[
IFLA_INET6_STATS
]) / 8;

168 c⁄° 
uöt8_t
 *
m≠_°©_id
 = 
m≠_°©_id_‰om_IPSTATS_MIB_v2
;

170 i‡(
Àn
 < 32 ||

171 (
tb
[
IFLA_INET6_ICMP6STATS
] && 
	`∆a_Àn
(tb[IFLA_INET6_ICMP6STATS]) < 6)) {

177 
m≠_°©_id
 = 
m≠_°©_id_‰om_IPSTATS_MIB_v1
;

180 
Àn
 = 
	`mö_t
(, 
__IPSTATS_MIB_MAX
,Üen);

181 
i
 = 1; i < 
Àn
; i++) {

182 
	`mem˝y
(&
°©
, &
˙t
[
i
 * (stat)], (stat));

183 
	`π∆_lök_£t_°©
(
lök
, 
m≠_°©_id
[
i
], 
°©
);

187 i‡(
tb
[
IFLA_INET6_ICMP6STATS
]) {

188 *
˙t
 = 
	`∆a_d©a
(
tb
[
IFLA_INET6_ICMP6STATS
]);

189 
uöt64_t
 
°©
;

190 
i
;

191 
Àn
 = 
	`mö_t
(, 
__ICMP6_MIB_MAX
, 
	`∆a_Àn
(
tb
[
IFLA_INET6_ICMP6STATS
]) / 8);

193 
i
 = 1; i < 
Àn
; i++) {

194 
	`mem˝y
(&
°©
, &
˙t
[
i
 * (stat)], (stat));

195 
	`π∆_lök_£t_°©
(
lök
, 
RTNL_LINK_ICMP6_INMSGS
 + 
i
 - 1,

196 
°©
);

201 
	}
}

204 
	#IF_RA_OTHERCONF
 0x80

	)

205 
	#IF_RA_MANAGED
 0x40

	)

206 
	#IF_RA_RCVD
 0x20

	)

207 
	#IF_RS_SENT
 0x10

	)

208 
	#IF_READY
 0x80000000

	)

210 c⁄° 
å™s_tbl
 
	göë6_Êags
[] = {

211 
__ADD
(
IF_RA_OTHERCONF
, 
ø_Ÿhîc⁄f
)

212 
__ADD
(
IF_RA_MANAGED
, 
ø_m™aged
)

213 
__ADD
(
IF_RA_RCVD
, 
ø_rcvd
)

214 
__ADD
(
IF_RS_SENT
, 
rs_£¡
)

215 
__ADD
(
IF_READY
, 
ªady
)

218 *
	$öë6_Êags2°r
(
Êags
, *
buf
, 
size_t
 
Àn
)

220  
	`__Êags2°r
(
Êags
, 
buf
, 
Àn
, 
öë6_Êags
,

221 
	`ARRAY_SIZE
(
öë6_Êags
));

222 
	}
}

224 c⁄° 
å™s_tbl
 
	göë6_devc⁄f
[] = {

225 
__ADD
(
DEVCONF_FORWARDING
, 
f‹w¨dög
)

226 
__ADD
(
DEVCONF_HOPLIMIT
, 
h›limô
)

227 
__ADD
(
DEVCONF_MTU6
, 
mtu6
)

228 
__ADD
(
DEVCONF_ACCEPT_RA
, 
ac˚±_ø
)

229 
__ADD
(
DEVCONF_ACCEPT_REDIRECTS
, 
ac˚±_ªdúe˘s
)

230 
__ADD
(
DEVCONF_AUTOCONF
, 
autoc⁄f
)

231 
__ADD
(
DEVCONF_DAD_TRANSMITS
, 
dad_å™smôs
)

232 
__ADD
(
DEVCONF_RTR_SOLICITS
, 
πr_sﬁicôs
)

233 
__ADD
(
DEVCONF_RTR_SOLICIT_INTERVAL
, 
πr_sﬁicô_öãrvÆ
)

234 
__ADD
(
DEVCONF_RTR_SOLICIT_DELAY
, 
πr_sﬁicô_dñay
)

235 
__ADD
(
DEVCONF_USE_TEMPADDR
, 
u£_ãm∑ddr
)

236 
__ADD
(
DEVCONF_TEMP_VALID_LFT
, 
ãmp_vÆid_l·
)

237 
__ADD
(
DEVCONF_TEMP_PREFERED_LFT
, 
ãmp_¥e„ªd_l·
)

238 
__ADD
(
DEVCONF_REGEN_MAX_RETRY
, 
ªgí_max_ªåy
)

239 
__ADD
(
DEVCONF_MAX_DESYNC_FACTOR
, 
max_desync_Á˘‹
)

240 
__ADD
(
DEVCONF_MAX_ADDRESSES
, 
max_addªs£s
)

241 
__ADD
(
DEVCONF_FORCE_MLD_VERSION
, 
f‹˚_mld_vîsi⁄
)

242 
__ADD
(
DEVCONF_ACCEPT_RA_DEFRTR
, 
ac˚±_ø_de‰å
)

243 
__ADD
(
DEVCONF_ACCEPT_RA_PINFO
, 
ac˚±_ø_pöfo
)

244 
__ADD
(
DEVCONF_ACCEPT_RA_RTR_PREF
, 
ac˚±_ø_πr_¥ef
)

245 
__ADD
(
DEVCONF_RTR_PROBE_INTERVAL
, 
πr_¥obe_öãrvÆ
)

246 
__ADD
(
DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN
, 
ac˚±_ø_π_öfo
)

247 
__ADD
(
DEVCONF_PROXY_NDP
, 
¥oxy_ndp
)

248 
__ADD
(
DEVCONF_OPTIMISTIC_DAD
, 
›timi°ic_dad
)

249 
__ADD
(
DEVCONF_ACCEPT_SOURCE_ROUTE
, 
ac˚±_sour˚_rouã
)

250 
__ADD
(
DEVCONF_MC_FORWARDING
, 
mc_f‹w¨dög
)

251 
__ADD
(
DEVCONF_DISABLE_IPV6
, 
dißbÀ_ùv6
)

252 
__ADD
(
DEVCONF_ACCEPT_DAD
, 
ac˚±_dad
)

253 
__ADD
(
DEVCONF_FORCE_TLLAO
, 
f‹˚_éœo
)

256 *
	$öë6_devc⁄f2°r
(
ty≥
, *
buf
, 
size_t
 
Àn
)

258  
	`__ty≥2°r
(
ty≥
, 
buf
, 
Àn
, 
öë6_devc⁄f
,

259 
	`ARRAY_SIZE
(
öë6_devc⁄f
));

260 
	}
}

263 
	$öë6_dump_dëaûs
(
π∆_lök
 *
lök
,

264 
∆_dump_∑øms
 *
p
, *
d©a
)

266 
öë6_d©a
 *
i6
 = 
d©a
;

267 
buf
[64], 
buf2
[64];

268 
i
, 
n
 = 0;

270 
	`∆_dump_löe
(
p
, " ipv6 max-reasm-len %s",

271 
	`∆_size2°r
(
i6
->
i6_ˇcheöfo
.
max_ªasm_Àn
, 
buf
, (buf)));

273 
	`∆_dump
(
p
, " <%s>\n",

274 
	`öë6_Êags2°r
(
i6
->
i6_Êags
, 
buf
, (buf)));

277 
	`∆_dump_löe
(
p
, " create-stamp %.2fsÑeachable-time %s",

278 (Ë
i6
->
i6_ˇcheöfo
.
t°amp
 / 100.,

279 
	`∆_m£c2°r
(
i6
->
i6_ˇcheöfo
.
ªachabÀ_time
, 
buf
, (buf)));

281 
	`∆_dump
(
p
, "Ñetrans-time %s\n",

282 
	`∆_m£c2°r
(
i6
->
i6_ˇcheöfo
.
ªå™s_time
, 
buf
, (buf)));

284 
	`∆_dump_löe
(
p
, " devconf:\n");

285 
	`∆_dump_löe
(
p
, " ");

287 
i
 = 0; i < 
DEVCONF_MAX
; i++) {

288 
uöt32_t
 
vÆue
 = 
i6
->
i6_c⁄f
[
i
];

289 
x
, 
off£t
;

291 
i
) {

292 
DEVCONF_TEMP_VALID_LFT
:

293 
DEVCONF_TEMP_PREFERED_LFT
:

294 
	`∆_m£c2°r
((
uöt64_t
Ë
vÆue
 * 1000., 
buf2
, (buf2));

297 
DEVCONF_RTR_PROBE_INTERVAL
:

298 
DEVCONF_RTR_SOLICIT_INTERVAL
:

299 
DEVCONF_RTR_SOLICIT_DELAY
:

300 
	`∆_m£c2°r
(
vÆue
, 
buf2
, (buf2));

304 
	`¢¥ötf
(
buf2
, (buf2), "%u", 
vÆue
);

309 
	`öë6_devc⁄f2°r
(
i
, 
buf
, (buf));

311 
off£t
 = 23 - 
	`°æí
(
buf2
);

312 i‡(
off£t
 < 0)

313 
off£t
 = 0;

315 
x
 = 
	`°æí
(
buf
); x < 
off£t
; x++)

316 
buf
[
x
] = ' ';

318 
	`°∫˝y
(&
buf
[
off£t
], 
buf2
, 
	`°æí
(buf2));

320 
	`∆_dump_löe
(
p
, "%s", 
buf
);

322 i‡(++
n
 == 3) {

323 
	`∆_dump
(
p
, "\n");

324 
	`∆_dump_löe
(
p
, " ");

325 
n
 = 0;

327 
	`∆_dump
(
p
, " ");

330 i‡(
n
 != 0)

331 
	`∆_dump
(
p
, "\n");

332 
	}
}

334 
	$öë6_dump_°©s
(
π∆_lök
 *
lök
,

335 
∆_dump_∑øms
 *
p
, *
d©a
)

337 
o˘ës
;

338 *
o˘ësUnô
;

340 
	`∆_dump
(
p
, " IPv6: InPkts InOctets "

342 
	`∆_dump
(
p
, " %18" 
PRIu64
 " ", 
lök
->
l_°©s
[
RTNL_LINK_IP6_INPKTS
]);

344 
o˘ës
 = 
	`∆_ˇn˚l_down_byãs
(
lök
->
l_°©s
[
RTNL_LINK_IP6_INOCTETS
],

345 &
o˘ësUnô
);

346 i‡(
o˘ës
)

347 
	`∆_dump
(
p
, "%14.2‡%3†", 
o˘ës
, 
o˘ësUnô
);

349 
	`∆_dump
(
p
, "%16" 
PRIu64
 " B ", 0);

351 
	`∆_dump
(
p
, "%18" 
PRIu64
 " %18" PRIu64 "\n",

352 
lök
->
l_°©s
[
RTNL_LINK_IP6_INDISCARDS
],

353 
lök
->
l_°©s
[
RTNL_LINK_IP6_INDELIVERS
]);

355 
	`∆_dump
(
p
, " OutPkts OutOctets "

358 
	`∆_dump
(
p
, " %18" 
PRIu64
 " ", 
lök
->
l_°©s
[
RTNL_LINK_IP6_OUTPKTS
]);

360 
o˘ës
 = 
	`∆_ˇn˚l_down_byãs
(
lök
->
l_°©s
[
RTNL_LINK_IP6_OUTOCTETS
],

361 &
o˘ësUnô
);

362 i‡(
o˘ës
)

363 
	`∆_dump
(
p
, "%14.2‡%3†", 
o˘ës
, 
o˘ësUnô
);

365 
	`∆_dump
(
p
, "%16" 
PRIu64
 " B ", 0);

367 
	`∆_dump
(
p
, "%18" 
PRIu64
 " %18" PRIu64 "\n",

368 
lök
->
l_°©s
[
RTNL_LINK_IP6_OUTDISCARDS
],

369 
lök
->
l_°©s
[
RTNL_LINK_IP6_OUTFORWDATAGRAMS
]);

371 
	`∆_dump
(
p
, " InMcastPkts InMcastOctets "

374 
	`∆_dump
(
p
, " %18" 
PRIu64
 " ", 
lök
->
l_°©s
[
RTNL_LINK_IP6_INMCASTPKTS
]);

376 
o˘ës
 = 
	`∆_ˇn˚l_down_byãs
(
lök
->
l_°©s
[
RTNL_LINK_IP6_INMCASTOCTETS
],

377 &
o˘ësUnô
);

378 i‡(
o˘ës
)

379 
	`∆_dump
(
p
, "%14.2‡%3†", 
o˘ës
, 
o˘ësUnô
);

381 
	`∆_dump
(
p
, "%16" 
PRIu64
 " B ", 0);

383 
	`∆_dump
(
p
, "%18" 
PRIu64
 " ", 
lök
->
l_°©s
[
RTNL_LINK_IP6_INBCASTPKTS
]);

384 
o˘ës
 = 
	`∆_ˇn˚l_down_byãs
(
lök
->
l_°©s
[
RTNL_LINK_IP6_INBCASTOCTETS
],

385 &
o˘ësUnô
);

386 i‡(
o˘ës
)

387 
	`∆_dump
(
p
, "%14.2‡%3s\n", 
o˘ës
, 
o˘ësUnô
);

389 
	`∆_dump
(
p
, "%16" 
PRIu64
 " B\n", 0);

391 
	`∆_dump
(
p
, " OutMcastPkts OutMcastOctets "

394 
	`∆_dump
(
p
, " %18" 
PRIu64
 " ", 
lök
->
l_°©s
[
RTNL_LINK_IP6_OUTMCASTPKTS
]);

396 
o˘ës
 = 
	`∆_ˇn˚l_down_byãs
(
lök
->
l_°©s
[
RTNL_LINK_IP6_OUTMCASTOCTETS
],

397 &
o˘ësUnô
);

398 i‡(
o˘ës
)

399 
	`∆_dump
(
p
, "%14.2‡%3†", 
o˘ës
, 
o˘ësUnô
);

401 
	`∆_dump
(
p
, "%16" 
PRIu64
 " B ", 0);

403 
	`∆_dump
(
p
, "%18" 
PRIu64
 " ", 
lök
->
l_°©s
[
RTNL_LINK_IP6_OUTBCASTPKTS
]);

404 
o˘ës
 = 
	`∆_ˇn˚l_down_byãs
(
lök
->
l_°©s
[
RTNL_LINK_IP6_OUTBCASTOCTETS
],

405 &
o˘ësUnô
);

406 i‡(
o˘ës
)

407 
	`∆_dump
(
p
, "%14.2‡%3s\n", 
o˘ës
, 
o˘ësUnô
);

409 
	`∆_dump
(
p
, "%16" 
PRIu64
 " B\n", 0);

411 
	`∆_dump
(
p
, " ReasmOKs ReasmFails "

413 
	`∆_dump
(
p
, " %18" 
PRIu64
 " %18" PRIu64 " %18" PRIu64 " %18" PRIu64 "\n",

414 
lök
->
l_°©s
[
RTNL_LINK_IP6_REASMOKS
],

415 
lök
->
l_°©s
[
RTNL_LINK_IP6_REASMFAILS
],

416 
lök
->
l_°©s
[
RTNL_LINK_IP6_REASMREQDS
],

417 
lök
->
l_°©s
[
RTNL_LINK_IP6_REASMTIMEOUT
]);

419 
	`∆_dump
(
p
, " FragOKs FragFails "

421 
	`∆_dump
(
p
, " %18" 
PRIu64
 " %18" PRIu64 " %18" PRIu64 "\n",

422 
lök
->
l_°©s
[
RTNL_LINK_IP6_FRAGOKS
],

423 
lök
->
l_°©s
[
RTNL_LINK_IP6_FRAGFAILS
],

424 
lök
->
l_°©s
[
RTNL_LINK_IP6_FRAGCREATES
]);

426 
	`∆_dump
(
p
, " InHdrErrors InTooBigErrors "

428 
	`∆_dump
(
p
, " %18" 
PRIu64
 " %18" PRIu64 " %18" PRIu64 " %18" PRIu64 "\n",

429 
lök
->
l_°©s
[
RTNL_LINK_IP6_INHDRERRORS
],

430 
lök
->
l_°©s
[
RTNL_LINK_IP6_INTOOBIGERRORS
],

431 
lök
->
l_°©s
[
RTNL_LINK_IP6_INNOROUTES
],

432 
lök
->
l_°©s
[
RTNL_LINK_IP6_INADDRERRORS
]);

434 
	`∆_dump
(
p
, " InUnknownProtos InTruncatedPkts "

436 
	`∆_dump
(
p
, " %18" 
PRIu64
 " %18" PRIu64 " %18" PRIu64 " %18" PRIu64 "\n",

437 
lök
->
l_°©s
[
RTNL_LINK_IP6_INUNKNOWNPROTOS
],

438 
lök
->
l_°©s
[
RTNL_LINK_IP6_INTRUNCATEDPKTS
],

439 
lök
->
l_°©s
[
RTNL_LINK_IP6_OUTNOROUTES
],

440 
lök
->
l_°©s
[
RTNL_LINK_IP6_CSUMERRORS
]);

442 
	`∆_dump
(
p
, " InNoECTPkts InECT1Pkts "

444 
	`∆_dump
(
p
, " %18" 
PRIu64
 " %18" PRIu64 " %18" PRIu64 " %18" PRIu64 "\n",

445 
lök
->
l_°©s
[
RTNL_LINK_IP6_NOECTPKTS
],

446 
lök
->
l_°©s
[
RTNL_LINK_IP6_ECT1PKTS
],

447 
lök
->
l_°©s
[
RTNL_LINK_IP6_ECT0PKTS
],

448 
lök
->
l_°©s
[
RTNL_LINK_IP6_CEPKTS
]);

450 
	`∆_dump
(
p
, " ICMPv6: InMsgs InErrors "

452 
	`∆_dump
(
p
, " %18" 
PRIu64
 " %18" PRIu64 " %18" PRIu64 " %18" PRIu64 " %18" PRIu64 "\n",

453 
lök
->
l_°©s
[
RTNL_LINK_ICMP6_INMSGS
],

454 
lök
->
l_°©s
[
RTNL_LINK_ICMP6_INERRORS
],

455 
lök
->
l_°©s
[
RTNL_LINK_ICMP6_OUTMSGS
],

456 
lök
->
l_°©s
[
RTNL_LINK_ICMP6_OUTERRORS
],

457 
lök
->
l_°©s
[
RTNL_LINK_ICMP6_CSUMERRORS
]);

458 
	}
}

460 c⁄° 
∆a_pﬁicy
 
	g¥Ÿöfo_pﬁicy
 = {

461 .
ty≥
 = 
NLA_NESTED
,

464 
π∆_lök_af_›s
 
	göë6_›s
 = {

465 .
ao_Ámûy
 = 
AF_INET6
,

466 .
	gao_Æloc
 = &
öë6_Æloc
,

467 .
	gao_˛⁄e
 = &
öë6_˛⁄e
,

468 .
	gao_‰ì
 = &
öë6_‰ì
,

469 .
	gao_∑r£_¥Ÿöfo
 = &
öë6_∑r£_¥Ÿöfo
,

470 .
	gao_∑r£_af
 = &
öë6_∑r£_¥Ÿöfo
,

471 .
	gao_dump
[
NL_DUMP_DETAILS
] = &
öë6_dump_dëaûs
,

472 .
	gao_dump
[
NL_DUMP_STATS
] = &
öë6_dump_°©s
,

473 .
	gao_¥Ÿöfo_pﬁicy
 = &
¥Ÿöfo_pﬁicy
,

476 
__öô
 
	$öë6_öô
()

478 
	`π∆_lök_af_ªgi°î
(&
öë6_›s
);

479 
	}
}

481 
__exô
 
	$öë6_exô
()

483 
	`π∆_lök_af_uƒegi°î
(&
öë6_›s
);

484 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/link/ip6tnl.c

25 
	~<√éök-¥iv©e/√éök.h
>

26 
	~<√éök/√éök.h
>

27 
	~<√éök/©å.h
>

28 
	~<√éök/utûs.h
>

29 
	~<√éök/obje˘.h
>

30 
	~<√éök/rouã/π∆.h
>

31 
	~<√éök-¥iv©e/rouã/lök/≠i.h
>

32 
	~<löux/if_tu¬ñ.h
>

33 
	~<√töë/ö.h
>

35 
	#IP6_TNL_ATTR_LINK
 (1 << 0)

	)

36 
	#IP6_TNL_ATTR_LOCAL
 (1 << 1)

	)

37 
	#IP6_TNL_ATTR_REMOTE
 (1 << 2)

	)

38 
	#IP6_TNL_ATTR_TTL
 (1 << 3)

	)

39 
	#IP6_TNL_ATTR_TOS
 (1 << 4)

	)

40 
	#IP6_TNL_ATTR_ENCAPLIMIT
 (1 << 5)

	)

41 
	#IP6_TNL_ATTR_FLAGS
 (1 << 6)

	)

42 
	#IP6_TNL_ATTR_PROTO
 (1 << 7)

	)

43 
	#IP6_TNL_ATTR_FLOWINFO
 (1 << 8)

	)

45 
	sù6_äl_öfo


47 
uöt8_t
 
	mâl
;

48 
uöt8_t
 
	mtos
;

49 
uöt8_t
 
	míˇp_limô
;

50 
uöt8_t
 
	m¥Ÿo
;

51 
uöt32_t
 
	mÊags
;

52 
uöt32_t
 
	mlök
;

53 
uöt32_t
 
	mÊowöfo
;

54 
ö6_addr
 
	mloˇl
;

55 
ö6_addr
 
	mªmŸe
;

56 
uöt32_t
 
	mù6_äl_mask
;

59 
∆a_pﬁicy
 
	gù6_äl_pﬁicy
[
IFLA_IPTUN_MAX
 + 1] = {

60 [
IFLA_IPTUN_LINK
] = { .
ty≥
 = 
NLA_U32
 },

61 [
IFLA_IPTUN_LOCAL
] = { .
möÀn
 = (
ö6_addr
) },

62 [
IFLA_IPTUN_REMOTE
] = { .
möÀn
 = (
ö6_addr
) },

63 [
IFLA_IPTUN_TTL
] = { .
ty≥
 = 
NLA_U8
 },

64 [
IFLA_IPTUN_TOS
] = { .
ty≥
 = 
NLA_U8
 },

65 [
IFLA_IPTUN_ENCAP_LIMIT
] = { .
ty≥
 = 
NLA_U8
 },

66 [
IFLA_IPTUN_FLOWINFO
] = { .
ty≥
 = 
NLA_U32
 },

67 [
IFLA_IPTUN_FLAGS
] = { .
ty≥
 = 
NLA_U32
 },

68 [
IFLA_IPTUN_PROTO
] = { .
ty≥
 = 
NLA_U8
 },

71 
	$ù6_äl_Æloc
(
π∆_lök
 *
lök
)

73 
ù6_äl_öfo
 *
ù6_äl
;

75 
ù6_äl
 = 
	`ˇŒoc
(1, (*ip6_tnl));

76 i‡(!
ù6_äl
)

77  -
NLE_NOMEM
;

79 
lök
->
l_öfo
 = 
ù6_äl
;

82 
	}
}

84 
	$ù6_äl_∑r£
(
π∆_lök
 *
lök
, 
∆©å
 *
d©a
,

85 
∆©å
 *
x°©s
)

87 
∆©å
 *
tb
[
IFLA_IPTUN_MAX
 + 1];

88 
ù6_äl_öfo
 *
ù6_äl
;

89 
îr
;

91 
	`NL_DBG
(3, "Parsing IP6_TNLÜink info");

93 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
IFLA_IPTUN_MAX
, 
d©a
, 
ù6_äl_pﬁicy
);

94 i‡(
îr
 < 0)

95 
îrout
;

97 
îr
 = 
	`ù6_äl_Æloc
(
lök
);

98 i‡(
îr
 < 0)

99 
îrout
;

101 
ù6_äl
 = 
lök
->
l_öfo
;

103 i‡(
tb
[
IFLA_IPTUN_LINK
]) {

104 
ù6_äl
->
lök
 = 
	`∆a_gë_u32
(
tb
[
IFLA_IPTUN_LINK
]);

105 
ù6_äl
->
ù6_äl_mask
 |
IP6_TNL_ATTR_LINK
;

108 i‡(
tb
[
IFLA_IPTUN_LOCAL
]) {

109 
	`∆a_mem˝y
(&
ù6_äl
->
loˇl
, 
tb
[
IFLA_IPTUN_LOCAL
], (
ö6_addr
));

110 
ù6_äl
->
ù6_äl_mask
 |
IP6_TNL_ATTR_LOCAL
;

113 i‡(
tb
[
IFLA_IPTUN_REMOTE
]) {

114 
	`∆a_mem˝y
(&
ù6_äl
->
ªmŸe
, 
tb
[
IFLA_IPTUN_REMOTE
], (
ö6_addr
));

115 
ù6_äl
->
ù6_äl_mask
 |
IP6_TNL_ATTR_REMOTE
;

118 i‡(
tb
[
IFLA_IPTUN_TTL
]) {

119 
ù6_äl
->
âl
 = 
	`∆a_gë_u8
(
tb
[
IFLA_IPTUN_TTL
]);

120 
ù6_äl
->
ù6_äl_mask
 |
IP6_TNL_ATTR_TTL
;

123 i‡(
tb
[
IFLA_IPTUN_TOS
]) {

124 
ù6_äl
->
tos
 = 
	`∆a_gë_u8
(
tb
[
IFLA_IPTUN_TOS
]);

125 
ù6_äl
->
ù6_äl_mask
 |
IP6_TNL_ATTR_TOS
;

128 i‡(
tb
[
IFLA_IPTUN_ENCAP_LIMIT
]) {

129 
ù6_äl
->
íˇp_limô
 = 
	`∆a_gë_u8
(
tb
[
IFLA_IPTUN_ENCAP_LIMIT
]);

130 
ù6_äl
->
ù6_äl_mask
 |
IP6_TNL_ATTR_ENCAPLIMIT
;

133 i‡(
tb
[
IFLA_IPTUN_FLAGS
]) {

134 
ù6_äl
->
Êags
 = 
	`∆a_gë_u32
(
tb
[
IFLA_IPTUN_FLAGS
]);

135 
ù6_äl
->
ù6_äl_mask
 |
IP6_TNL_ATTR_FLAGS
;

138 i‡(
tb
[
IFLA_IPTUN_FLOWINFO
]) {

139 
ù6_äl
->
Êowöfo
 = 
	`∆a_gë_u32
(
tb
[
IFLA_IPTUN_FLOWINFO
]);

140 
ù6_äl
->
ù6_äl_mask
 |
IP6_TNL_ATTR_FLOWINFO
;

143 i‡(
tb
[
IFLA_IPTUN_PROTO
]) {

144 
ù6_äl
->
¥Ÿo
 = 
	`∆a_gë_u8
(
tb
[
IFLA_IPTUN_PROTO
]);

145 
ù6_äl
->
ù6_äl_mask
 |
IP6_TNL_ATTR_PROTO
;

148 
îr
 = 0;

150 
îrout
:

151  
îr
;

152 
	}
}

154 
	$ù6_äl_put_©ås
(
∆_msg
 *
msg
, 
π∆_lök
 *
lök
)

156 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

157 
∆©å
 *
d©a
;

159 
d©a
 = 
	`∆a_√°_°¨t
(
msg
, 
IFLA_INFO_DATA
);

160 i‡(!
d©a
)

161  -
NLE_MSGSIZE
;

163 i‡(
ù6_äl
->
ù6_äl_mask
 & 
IP6_TNL_ATTR_LINK
)

164 
	`NLA_PUT_U32
(
msg
, 
IFLA_IPTUN_LINK
, 
ù6_äl
->
lök
);

166 i‡(
ù6_äl
->
ù6_äl_mask
 & 
IP6_TNL_ATTR_LOCAL
)

167 
	`NLA_PUT
(
msg
, 
IFLA_IPTUN_LOCAL
, (
ö6_addr
), &
ù6_äl
->
loˇl
);

169 i‡(
ù6_äl
->
ù6_äl_mask
 & 
IP6_TNL_ATTR_REMOTE
)

170 
	`NLA_PUT
(
msg
, 
IFLA_IPTUN_REMOTE
, (
ö6_addr
), &
ù6_äl
->
ªmŸe
);

172 i‡(
ù6_äl
->
ù6_äl_mask
 & 
IP6_TNL_ATTR_TTL
)

173 
	`NLA_PUT_U8
(
msg
, 
IFLA_IPTUN_TTL
, 
ù6_äl
->
âl
);

175 i‡(
ù6_äl
->
ù6_äl_mask
 & 
IP6_TNL_ATTR_TOS
)

176 
	`NLA_PUT_U8
(
msg
, 
IFLA_IPTUN_TOS
, 
ù6_äl
->
tos
);

178 i‡(
ù6_äl
->
ù6_äl_mask
 & 
IP6_TNL_ATTR_ENCAPLIMIT
)

179 
	`NLA_PUT_U8
(
msg
, 
IFLA_IPTUN_ENCAP_LIMIT
, 
ù6_äl
->
íˇp_limô
);

181 i‡(
ù6_äl
->
ù6_äl_mask
 & 
IP6_TNL_ATTR_FLAGS
)

182 
	`NLA_PUT_U32
(
msg
, 
IFLA_IPTUN_FLAGS
, 
ù6_äl
->
Êags
);

184 i‡(
ù6_äl
->
ù6_äl_mask
 & 
IP6_TNL_ATTR_FLOWINFO
)

185 
	`NLA_PUT_U32
(
msg
, 
IFLA_IPTUN_FLOWINFO
, 
ù6_äl
->
Êowöfo
);

188 i‡(
ù6_äl
->
ù6_äl_mask
 & 
IP6_TNL_ATTR_PROTO
)

189 
	`NLA_PUT_U8
(
msg
, 
IFLA_IPTUN_PROTO
, 
ù6_äl
->
¥Ÿo
);

191 
	`NLA_PUT_U8
(
msg
, 
IFLA_IPTUN_PROTO
, 0);

193 
	`∆a_√°_íd
(
msg
, 
d©a
);

195 
∆a_put_Áûuª
:

197 
	}
}

199 
	$ù6_äl_‰ì
(
π∆_lök
 *
lök
)

201 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

203 
	`‰ì
(
ù6_äl
);

204 
lök
->
l_öfo
 = 
NULL
;

205 
	}
}

207 
	$ù6_äl_dump_löe
(
π∆_lök
 *
lök
, 
∆_dump_∑øms
 *
p
)

209 
	`∆_dump
(
p
, "ù6_ä»: %s", 
lök
->
l_«me
);

210 
	}
}

212 
	$ù6_äl_dump_dëaûs
(
π∆_lök
 *
lök
, 
∆_dump_∑øms
 *
p
)

214 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

215 *
«me
, 
addr
[
INET6_ADDRSTRLEN
];

217 i‡(
ù6_äl
->
ù6_äl_mask
 & 
IP6_TNL_ATTR_LINK
) {

218 
	`∆_dump
(
p
, "Üink ");

219 
«me
 = 
	`π∆_lök_gë_«me
(
lök
);

220 i‡(
«me
)

221 
	`∆_dump_löe
(
p
, "%s\n", 
«me
);

223 
	`∆_dump_löe
(
p
, "%u\n", 
ù6_äl
->
lök
);

226 i‡(
ù6_äl
->
ù6_äl_mask
 & 
IP6_TNL_ATTR_LOCAL
) {

227 
	`∆_dump
(
p
, "Üocal ");

229 if(
	`öë_¡›
(
AF_INET6
, &
ù6_äl
->
loˇl
, 
addr
, 
INET6_ADDRSTRLEN
))

230 
	`∆_dump_löe
(
p
, "%s\n", 
addr
);

232 
	`∆_dump_löe
(
p
, "%#x\n", 
ù6_äl
->
loˇl
);

235 i‡(
ù6_äl
->
ù6_äl_mask
 & 
IP6_TNL_ATTR_REMOTE
) {

236 
	`∆_dump
(
p
, "Ñemote ");

238 if(
	`öë_¡›
(
AF_INET6
, &
ù6_äl
->
ªmŸe
, 
addr
, 
INET6_ADDRSTRLEN
))

239 
	`∆_dump_löe
(
p
, "%s\n", 
addr
);

241 
	`∆_dump_löe
(
p
, "%#x\n", 
ù6_äl
->
ªmŸe
);

244 i‡(
ù6_äl
->
ù6_äl_mask
 & 
IP6_TNL_ATTR_TTL
) {

245 
	`∆_dump
(
p
, "Åtl ");

246 
	`∆_dump_löe
(
p
, "%d\n", 
ù6_äl
->
âl
);

249 i‡(
ù6_äl
->
ù6_äl_mask
 & 
IP6_TNL_ATTR_TOS
) {

250 
	`∆_dump
(
p
, "Åos ");

251 
	`∆_dump_löe
(
p
, "%d\n", 
ù6_äl
->
tos
);

254 i‡(
ù6_äl
->
ù6_äl_mask
 & 
IP6_TNL_ATTR_ENCAPLIMIT
) {

255 
	`∆_dump
(
p
, "Éncaplimit ");

256 
	`∆_dump_löe
(
p
, "%d\n", 
ù6_äl
->
íˇp_limô
);

259 i‡(
ù6_äl
->
ù6_äl_mask
 & 
IP6_TNL_ATTR_FLAGS
) {

260 
	`∆_dump
(
p
, " flags ");

261 
	`∆_dump_löe
(
p
, " (%x)\n", 
ù6_äl
->
Êags
);

264 i‡(
ù6_äl
->
ù6_äl_mask
 & 
IP6_TNL_ATTR_FLOWINFO
) {

265 
	`∆_dump
(
p
, " flowinfo ");

266 
	`∆_dump_löe
(
p
, " (%x)\n", 
ù6_äl
->
Êowöfo
);

269 i‡(
ù6_äl
->
ù6_äl_mask
 & 
IP6_TNL_ATTR_PROTO
) {

270 
	`∆_dump
(
p
, "Öroto ");

271 
	`∆_dump_löe
(
p
, " (%x)\n", 
ù6_äl
->
¥Ÿo
);

273 
	}
}

275 
	$ù6_äl_˛⁄e
(
π∆_lök
 *
d°
, π∆_lök *
§c
)

277 
ù6_äl_öfo
 *
ù6_äl_d°
, *
ù6_äl_§c
 = 
§c
->
l_öfo
;

278 
îr
;

280 
d°
->
l_öfo
 = 
NULL
;

282 
îr
 = 
	`π∆_lök_£t_ty≥
(
d°
, "ip6tnl");

283 i‡(
îr
 < 0)

284  
îr
;

286 
ù6_äl_d°
 = 
d°
->
l_öfo
;

288 i‡(!
ù6_äl_d°
 || !
ù6_äl_§c
)

289 
	`BUG
();

291 
	`mem˝y
(
ù6_äl_d°
, 
ù6_äl_§c
, (
ù6_äl_öfo
));

294 
	}
}

296 
π∆_lök_öfo_›s
 
	gù6_äl_öfo_›s
 = {

297 .
io_«me
 = "ip6tnl",

298 .
	gio_Æloc
 = 
ù6_äl_Æloc
,

299 .
	gio_∑r£
 = 
ù6_äl_∑r£
,

300 .
	gio_dump
 = {

301 [
NL_DUMP_LINE
] = 
ù6_äl_dump_löe
,

302 [
NL_DUMP_DETAILS
] = 
ù6_äl_dump_dëaûs
,

304 .
	gio_˛⁄e
 = 
ù6_äl_˛⁄e
,

305 .
	gio_put_©ås
 = 
ù6_äl_put_©ås
,

306 .
	gio_‰ì
 = 
ù6_äl_‰ì
,

309 
	#IS_IP6_TNL_LINK_ASSERT
(
lök
)\

310 i‡((
lök
)->
l_öfo_›s
 !&
ù6_äl_öfo_›s
) {\

311 
	`APPBUG
("Link isÇotá ip6_tnlÜink. setÅype \"ip6tnl\" first.");\

312  -
NLE_OPNOTSUPP
;\

313 }

	)

315 
π∆_lök
 *
	$π∆_lök_ù6_äl_Æloc
()

317 
π∆_lök
 *
lök
;

318 
îr
;

320 
lök
 = 
	`π∆_lök_Æloc
();

321 i‡(!
lök
)

322  
NULL
;

324 
îr
 = 
	`π∆_lök_£t_ty≥
(
lök
, "ip6tnl");

325 i‡(
îr
 < 0) {

326 
	`π∆_lök_put
(
lök
);

327  
NULL
;

330  
lök
;

331 
	}
}

339 
	$π∆_lök_is_ù6_äl
(
π∆_lök
 *
lök
)

341  
lök
->
l_öfo_›s
 && !
	`°rcmp
÷ök->l_öfo_›s->
io_«me
, "ip6tnl");

342 
	}
}

352 
	$π∆_lök_ù6_äl_add
(
∆_sock
 *
sk
, c⁄° *
«me
)

354 
π∆_lök
 *
lök
;

355 
îr
;

357 
lök
 = 
	`π∆_lök_ù6_äl_Æloc
();

358 i‡(!
lök
)

359  -
NLE_NOMEM
;

361 if(
«me
)

362 
	`π∆_lök_£t_«me
(
lök
, 
«me
);

364 
îr
 = 
	`π∆_lök_add
(
sk
, 
lök
, 
NLM_F_CREATE
);

365 
	`π∆_lök_put
(
lök
);

367  
îr
;

368 
	}
}

377 
	$π∆_lök_ù6_äl_£t_lök
(
π∆_lök
 *
lök
, 
uöt32_t
 
ödex
)

379 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

381 
	`IS_IP6_TNL_LINK_ASSERT
(
lök
);

383 
ù6_äl
->
lök
 = 
ödex
;

384 
ù6_äl
->
ù6_äl_mask
 |
IP6_TNL_ATTR_LINK
;

387 
	}
}

395 
uöt32_t
 
	$π∆_lök_ù6_äl_gë_lök
(
π∆_lök
 *
lök
)

397 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

399 
	`IS_IP6_TNL_LINK_ASSERT
(
lök
);

401  
ù6_äl
->
lök
;

402 
	}
}

411 
	$π∆_lök_ù6_äl_£t_loˇl
(
π∆_lök
 *
lök
, 
ö6_addr
 *
addr
)

413 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

415 
	`IS_IP6_TNL_LINK_ASSERT
(
lök
);

417 
	`mem˝y
(&
ù6_äl
->
loˇl
, 
addr
, (
ö6_addr
));

418 
ù6_äl
->
ù6_äl_mask
 |
IP6_TNL_ATTR_LOCAL
;

421 
	}
}

429 
	$π∆_lök_ù6_äl_gë_loˇl
(
π∆_lök
 *
lök
, 
ö6_addr
 *
addr
)

431 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

433 
	`IS_IP6_TNL_LINK_ASSERT
(
lök
);

435 
	`mem˝y
(
addr
, &
ù6_äl
->
loˇl
, (
ö6_addr
));

438 
	}
}

447 
	$π∆_lök_ù6_äl_£t_ªmŸe
(
π∆_lök
 *
lök
, 
ö6_addr
 *
addr
)

449 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

451 
	`IS_IP6_TNL_LINK_ASSERT
(
lök
);

453 
	`mem˝y
(&
ù6_äl
->
ªmŸe
, 
addr
, (
ö6_addr
));

454 
ù6_äl
->
ù6_äl_mask
 |
IP6_TNL_ATTR_REMOTE
;

457 
	}
}

465 
	$π∆_lök_ù6_äl_gë_ªmŸe
(
π∆_lök
 *
lök
, 
ö6_addr
 *
addr
)

467 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

469 
	`IS_IP6_TNL_LINK_ASSERT
(
lök
);

471 
	`mem˝y
(
addr
, &
ù6_äl
->
ªmŸe
, (
ö6_addr
));

474 
	}
}

483 
	$π∆_lök_ù6_äl_£t_âl
(
π∆_lök
 *
lök
, 
uöt8_t
 
âl
)

485 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

487 
	`IS_IP6_TNL_LINK_ASSERT
(
lök
);

489 
ù6_äl
->
âl
 =Åtl;

490 
ù6_äl
->
ù6_äl_mask
 |
IP6_TNL_ATTR_TTL
;

493 
	}
}

501 
uöt8_t
 
	$π∆_lök_ù6_äl_gë_âl
(
π∆_lök
 *
lök
)

503 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

505 
	`IS_IP6_TNL_LINK_ASSERT
(
lök
);

507  
ù6_äl
->
âl
;

508 
	}
}

517 
	$π∆_lök_ù6_äl_£t_tos
(
π∆_lök
 *
lök
, 
uöt8_t
 
tos
)

519 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

521 
	`IS_IP6_TNL_LINK_ASSERT
(
lök
);

523 
ù6_äl
->
tos
 =Åos;

524 
ù6_äl
->
ù6_äl_mask
 |
IP6_TNL_ATTR_TOS
;

527 
	}
}

535 
uöt8_t
 
	$π∆_lök_ù6_äl_gë_tos
(
π∆_lök
 *
lök
)

537 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

539 
	`IS_IP6_TNL_LINK_ASSERT
(
lök
);

541  
ù6_äl
->
tos
;

542 
	}
}

551 
	$π∆_lök_ù6_äl_£t_íˇ∂imô
(
π∆_lök
 *
lök
, 
uöt8_t
 
íˇp_limô
)

553 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

555 
	`IS_IP6_TNL_LINK_ASSERT
(
lök
);

557 
ù6_äl
->
íˇp_limô
 =Éncap_limit;

558 
ù6_äl
->
ù6_äl_mask
 |
IP6_TNL_ATTR_ENCAPLIMIT
;

561 
	}
}

569 
uöt8_t
 
	$π∆_lök_ù6_äl_gë_íˇ∂imô
(
π∆_lök
 *
lök
)

571 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

573 
	`IS_IP6_TNL_LINK_ASSERT
(
lök
);

575  
ù6_äl
->
íˇp_limô
;

576 
	}
}

585 
	$π∆_lök_ù6_äl_£t_Êowöfo
(
π∆_lök
 *
lök
, 
uöt32_t
 
Êowöfo
)

587 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

589 
	`IS_IP6_TNL_LINK_ASSERT
(
lök
);

591 
ù6_äl
->
Êowöfo
 = flowinfo;

592 
ù6_äl
->
ù6_äl_mask
 |
IP6_TNL_ATTR_FLOWINFO
;

595 
	}
}

603 
uöt32_t
 
	$π∆_lök_ù6_äl_gë_Êowöfo
(
π∆_lök
 *
lök
)

605 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

607 
	`IS_IP6_TNL_LINK_ASSERT
(
lök
);

609  
ù6_äl
->
Êowöfo
;

610 
	}
}

619 
	$π∆_lök_ù6_äl_£t_Êags
(
π∆_lök
 *
lök
, 
uöt32_t
 
Êags
)

621 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

623 
	`IS_IP6_TNL_LINK_ASSERT
(
lök
);

625 
ù6_äl
->
Êags
 = flags;

626 
ù6_äl
->
ù6_äl_mask
 |
IP6_TNL_ATTR_FLAGS
;

629 
	}
}

637 
uöt32_t
 
	$π∆_lök_ù6_äl_gë_Êags
(
π∆_lök
 *
lök
)

639 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

641 
	`IS_IP6_TNL_LINK_ASSERT
(
lök
);

643  
ù6_äl
->
Êags
;

644 
	}
}

653 
	$π∆_lök_ù6_äl_£t_¥Ÿo
(
π∆_lök
 *
lök
, 
uöt8_t
 
¥Ÿo
)

655 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

657 
	`IS_IP6_TNL_LINK_ASSERT
(
lök
);

659 
ù6_äl
->
¥Ÿo
 =Öroto;

660 
ù6_äl
->
ù6_äl_mask
 |
IP6_TNL_ATTR_PROTO
;

663 
	}
}

671 
uöt8_t
 
	$π∆_lök_ù6_äl_gë_¥Ÿo
(
π∆_lök
 *
lök
)

673 
ù6_äl_öfo
 *
ù6_äl
 = 
lök
->
l_öfo
;

675 
	`IS_IP6_TNL_LINK_ASSERT
(
lök
);

677  
ù6_äl
->
¥Ÿo
;

678 
	}
}

680 
__öô
 
	$ù6_äl_öô
()

682 
	`π∆_lök_ªgi°î_öfo
(&
ù6_äl_öfo_›s
);

683 
	}
}

685 
__exô
 
	$ù6_äl_exô
()

687 
	`π∆_lök_uƒegi°î_öfo
(&
ù6_äl_öfo_›s
);

688 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/link/ipgre.c

25 
	~<√éök-¥iv©e/√éök.h
>

26 
	~<√éök/√éök.h
>

27 
	~<√éök/©å.h
>

28 
	~<√éök/utûs.h
>

29 
	~<√éök/obje˘.h
>

30 
	~<√éök/rouã/π∆.h
>

31 
	~<√éök-¥iv©e/rouã/lök/≠i.h
>

32 
	~<löux/if_tu¬ñ.h
>

34 
	#IPGRE_ATTR_LINK
 (1 << 0)

	)

35 
	#IPGRE_ATTR_IFLAGS
 (1 << 1)

	)

36 
	#IPGRE_ATTR_OFLAGS
 (1 << 2)

	)

37 
	#IPGRE_ATTR_IKEY
 (1 << 3)

	)

38 
	#IPGRE_ATTR_OKEY
 (1 << 4)

	)

39 
	#IPGRE_ATTR_LOCAL
 (1 << 5)

	)

40 
	#IPGRE_ATTR_REMOTE
 (1 << 6)

	)

41 
	#IPGRE_ATTR_TTL
 (1 << 7)

	)

42 
	#IPGRE_ATTR_TOS
 (1 << 8)

	)

43 
	#IPGRE_ATTR_PMTUDISC
 (1 << 9)

	)

45 
	sùgª_öfo


47 
uöt8_t
 
	mâl
;

48 
uöt8_t
 
	mtos
;

49 
uöt8_t
 
	mpmtudisc
;

50 
uöt16_t
 
	miÊags
;

51 
uöt16_t
 
	moÊags
;

52 
uöt32_t
 
	mikey
;

53 
uöt32_t
 
	mokey
;

54 
uöt32_t
 
	mlök
;

55 
uöt32_t
 
	mloˇl
;

56 
uöt32_t
 
	mªmŸe
;

57 
uöt32_t
 
	mùgª_mask
;

60 
∆a_pﬁicy
 
	gùgª_pﬁicy
[
IFLA_GRE_MAX
 + 1] = {

61 [
IFLA_GRE_LINK
] = { .
ty≥
 = 
NLA_U32
 },

62 [
IFLA_GRE_IFLAGS
] = { .
ty≥
 = 
NLA_U16
 },

63 [
IFLA_GRE_OFLAGS
] = { .
ty≥
 = 
NLA_U16
 },

64 [
IFLA_GRE_IKEY
] = { .
ty≥
 = 
NLA_U32
 },

65 [
IFLA_GRE_OKEY
] = { .
ty≥
 = 
NLA_U32
 },

66 [
IFLA_GRE_LOCAL
] = { .
ty≥
 = 
NLA_U32
 },

67 [
IFLA_GRE_REMOTE
] = { .
ty≥
 = 
NLA_U32
 },

68 [
IFLA_GRE_TTL
] = { .
ty≥
 = 
NLA_U8
 },

69 [
IFLA_GRE_TOS
] = { .
ty≥
 = 
NLA_U8
 },

70 [
IFLA_GRE_PMTUDISC
] = { .
ty≥
 = 
NLA_U8
 },

73 
	$ùgª_Æloc
(
π∆_lök
 *
lök
)

75 
ùgª_öfo
 *
ùgª
;

77 
ùgª
 = 
	`ˇŒoc
(1, (*ipgre));

78 i‡(!
ùgª
)

79  -
NLE_NOMEM
;

81 
lök
->
l_öfo
 = 
ùgª
;

84 
	}
}

86 
	$ùgª_∑r£
(
π∆_lök
 *
lök
, 
∆©å
 *
d©a
,

87 
∆©å
 *
x°©s
)

89 
∆©å
 *
tb
[
IFLA_IPTUN_MAX
 + 1];

90 
ùgª_öfo
 *
ùgª
;

91 
îr
;

93 
	`NL_DBG
(3, "Parsing IPGREÜink info");

95 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
IFLA_GRE_MAX
, 
d©a
, 
ùgª_pﬁicy
);

96 i‡(
îr
 < 0)

97 
îrout
;

99 
îr
 = 
	`ùgª_Æloc
(
lök
);

100 i‡(
îr
 < 0)

101 
îrout
;

103 
ùgª
 = 
lök
->
l_öfo
;

105 i‡(
tb
[
IFLA_GRE_LINK
]) {

106 
ùgª
->
lök
 = 
	`∆a_gë_u32
(
tb
[
IFLA_GRE_LINK
]);

107 
ùgª
->
ùgª_mask
 |
IPGRE_ATTR_LINK
;

110 i‡(
tb
[
IFLA_GRE_IFLAGS
]) {

111 
ùgª
->
iÊags
 = 
	`∆a_gë_u16
(
tb
[
IFLA_GRE_IFLAGS
]);

112 
ùgª
->
ùgª_mask
 |
IPGRE_ATTR_IFLAGS
;

115 i‡(
tb
[
IFLA_GRE_OFLAGS
]) {

116 
ùgª
->
oÊags
 = 
	`∆a_gë_u16
(
tb
[
IFLA_GRE_OFLAGS
]);

117 
ùgª
->
ùgª_mask
 |
IPGRE_ATTR_OFLAGS
;

120 i‡(
tb
[
IFLA_GRE_IKEY
]) {

121 
ùgª
->
ikey
 = 
	`∆a_gë_u32
(
tb
[
IFLA_GRE_IKEY
]);

122 
ùgª
->
ùgª_mask
 |
IPGRE_ATTR_IKEY
;

125 i‡(
tb
[
IFLA_GRE_OKEY
]) {

126 
ùgª
->
okey
 = 
	`∆a_gë_u32
(
tb
[
IFLA_GRE_OKEY
]);

127 
ùgª
->
ùgª_mask
 |
IPGRE_ATTR_OKEY
;

130 i‡(
tb
[
IFLA_GRE_LOCAL
]) {

131 
ùgª
->
loˇl
 = 
	`∆a_gë_u32
(
tb
[
IFLA_GRE_LOCAL
]);

132 
ùgª
->
ùgª_mask
 |
IPGRE_ATTR_LOCAL
;

135 i‡(
tb
[
IFLA_GRE_LOCAL
]) {

136 
ùgª
->
ªmŸe
 = 
	`∆a_gë_u32
(
tb
[
IFLA_GRE_LOCAL
]);

137 
ùgª
->
ùgª_mask
 |
IPGRE_ATTR_REMOTE
;

140 i‡(
tb
[
IFLA_GRE_TTL
]) {

141 
ùgª
->
âl
 = 
	`∆a_gë_u8
(
tb
[
IFLA_GRE_TTL
]);

142 
ùgª
->
ùgª_mask
 |
IPGRE_ATTR_TTL
;

145 i‡(
tb
[
IFLA_GRE_TOS
]) {

146 
ùgª
->
tos
 = 
	`∆a_gë_u8
(
tb
[
IFLA_GRE_TOS
]);

147 
ùgª
->
ùgª_mask
 |
IPGRE_ATTR_TOS
;

150 i‡(
tb
[
IFLA_GRE_PMTUDISC
]) {

151 
ùgª
->
pmtudisc
 = 
	`∆a_gë_u8
(
tb
[
IFLA_GRE_PMTUDISC
]);

152 
ùgª
->
ùgª_mask
 |
IPGRE_ATTR_PMTUDISC
;

155 
îr
 = 0;

157 
îrout
:

158  
îr
;

159 
	}
}

161 
	$ùgª_put_©ås
(
∆_msg
 *
msg
, 
π∆_lök
 *
lök
)

163 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

164 
∆©å
 *
d©a
;

166 
d©a
 = 
	`∆a_√°_°¨t
(
msg
, 
IFLA_INFO_DATA
);

167 i‡(!
d©a
)

168  -
NLE_MSGSIZE
;

170 i‡(
ùgª
->
ùgª_mask
 & 
IPGRE_ATTR_LINK
)

171 
	`NLA_PUT_U32
(
msg
, 
IFLA_GRE_LINK
, 
ùgª
->
lök
);

173 i‡(
ùgª
->
ùgª_mask
 & 
IFLA_GRE_IFLAGS
)

174 
	`NLA_PUT_U16
(
msg
, 
IFLA_GRE_IFLAGS
, 
ùgª
->
iÊags
);

176 i‡(
ùgª
->
ùgª_mask
 & 
IFLA_GRE_OFLAGS
)

177 
	`NLA_PUT_U16
(
msg
, 
IFLA_GRE_OFLAGS
, 
ùgª
->
oÊags
);

179 i‡(
ùgª
->
ùgª_mask
 & 
IPGRE_ATTR_IKEY
)

180 
	`NLA_PUT_U32
(
msg
, 
IFLA_GRE_IKEY
, 
ùgª
->
ikey
);

182 i‡(
ùgª
->
ùgª_mask
 & 
IPGRE_ATTR_OKEY
)

183 
	`NLA_PUT_U32
(
msg
, 
IFLA_GRE_OKEY
, 
ùgª
->
okey
);

185 i‡(
ùgª
->
ùgª_mask
 & 
IPGRE_ATTR_LOCAL
)

186 
	`NLA_PUT_U32
(
msg
, 
IFLA_GRE_LOCAL
, 
ùgª
->
loˇl
);

188 i‡(
ùgª
->
ùgª_mask
 & 
IPGRE_ATTR_REMOTE
)

189 
	`NLA_PUT_U32
(
msg
, 
IFLA_GRE_REMOTE
, 
ùgª
->
ªmŸe
);

191 i‡(
ùgª
->
ùgª_mask
 & 
IPGRE_ATTR_TTL
)

192 
	`NLA_PUT_U8
(
msg
, 
IFLA_GRE_TTL
, 
ùgª
->
âl
);

194 i‡(
ùgª
->
ùgª_mask
 & 
IPGRE_ATTR_TOS
)

195 
	`NLA_PUT_U8
(
msg
, 
IFLA_GRE_TOS
, 
ùgª
->
tos
);

197 i‡(
ùgª
->
ùgª_mask
 & 
IPGRE_ATTR_PMTUDISC
)

198 
	`NLA_PUT_U8
(
msg
, 
IFLA_GRE_PMTUDISC
, 
ùgª
->
pmtudisc
);

200 
	`∆a_√°_íd
(
msg
, 
d©a
);

202 
∆a_put_Áûuª
:

205 
	}
}

207 
	$ùgª_‰ì
(
π∆_lök
 *
lök
)

209 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

211 
	`‰ì
(
ùgª
);

212 
lök
->
l_öfo
 = 
NULL
;

213 
	}
}

215 
	$ùgª_dump_löe
(
π∆_lök
 *
lök
, 
∆_dump_∑øms
 *
p
)

217 
	`∆_dump
(
p
, "ùgª : %s", 
lök
->
l_«me
);

218 
	}
}

220 
	$ùgª_dump_dëaûs
(
π∆_lök
 *
lök
, 
∆_dump_∑øms
 *
p
)

222 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

223 *
«me
, 
addr
[
INET_ADDRSTRLEN
];

225 i‡(
ùgª
->
ùgª_mask
 & 
IPGRE_ATTR_LINK
) {

226 
	`∆_dump
(
p
, "Üink ");

227 
«me
 = 
	`π∆_lök_gë_«me
(
lök
);

228 i‡(
«me
)

229 
	`∆_dump_löe
(
p
, "%s\n", 
«me
);

231 
	`∆_dump_löe
(
p
, "%u\n", 
ùgª
->
lök
);

234 i‡(
ùgª
->
ùgª_mask
 & 
IPGRE_ATTR_IFLAGS
) {

235 
	`∆_dump
(
p
, " iflags ");

236 
	`∆_dump_löe
(
p
, "%x\n", 
ùgª
->
iÊags
);

239 i‡(
ùgª
->
ùgª_mask
 & 
IPGRE_ATTR_OFLAGS
) {

240 
	`∆_dump
(
p
, " oflags ");

241 
	`∆_dump_löe
(
p
, "%x\n", 
ùgª
->
oÊags
);

244 i‡(
ùgª
->
ùgª_mask
 & 
IPGRE_ATTR_IKEY
) {

245 
	`∆_dump
(
p
, " ikey ");

246 
	`∆_dump_löe
(
p
, "%x\n",
ùgª
->
ikey
);

249 i‡(
ùgª
->
ùgª_mask
 & 
IPGRE_ATTR_OKEY
) {

250 
	`∆_dump
(
p
, " okey ");

251 
	`∆_dump_löe
(
p
, "%x\n", 
ùgª
->
okey
);

254 i‡(
ùgª
->
ùgª_mask
 & 
IPGRE_ATTR_LOCAL
) {

255 
	`∆_dump
(
p
, "Üocal ");

256 if(
	`öë_¡›
(
AF_INET
, &
ùgª
->
loˇl
, 
addr
, (addr)))

257 
	`∆_dump_löe
(
p
, "%s\n", 
addr
);

259 
	`∆_dump_löe
(
p
, "%#x\n", 
	`¡ohs
(
ùgª
->
loˇl
));

262 i‡(
ùgª
->
ùgª_mask
 & 
IPGRE_ATTR_REMOTE
) {

263 
	`∆_dump
(
p
, "Ñemote ");

264 if(
	`öë_¡›
(
AF_INET
, &
ùgª
->
ªmŸe
, 
addr
, (addr)))

265 
	`∆_dump_löe
(
p
, "%s\n", 
addr
);

267 
	`∆_dump_löe
(
p
, "%#x\n", 
	`¡ohs
(
ùgª
->
ªmŸe
));

270 i‡(
ùgª
->
ùgª_mask
 & 
IPGRE_ATTR_TTL
) {

271 
	`∆_dump
(
p
, "Åtl ");

272 
	`∆_dump_löe
(
p
, "%u\n", 
ùgª
->
âl
);

275 i‡(
ùgª
->
ùgª_mask
 & 
IPGRE_ATTR_TOS
) {

276 
	`∆_dump
(
p
, "Åos ");

277 
	`∆_dump_löe
(
p
, "%u\n", 
ùgª
->
tos
);

280 i‡(
ùgª
->
ùgª_mask
 & 
IPGRE_ATTR_PMTUDISC
) {

281 
	`∆_dump
(
p
, "Ömtudisc ");

282 
	`∆_dump_löe
(
p
, "íabÀd (%#x)\n", 
ùgª
->
pmtudisc
);

284 
	}
}

286 
	$ùgª_˛⁄e
(
π∆_lök
 *
d°
, π∆_lök *
§c
)

288 
ùgª_öfo
 *
ùgª_d°
, *
ùgª_§c
 = 
§c
->
l_öfo
;

289 
îr
;

291 
d°
->
l_öfo
 = 
NULL
;

293 
îr
 = 
	`π∆_lök_£t_ty≥
(
d°
, "gre");

294 i‡(
îr
 < 0)

295  
îr
;

297 
ùgª_d°
 = 
d°
->
l_öfo
;

299 i‡(!
ùgª_d°
 || !
ùgª_§c
)

300 
	`BUG
();

302 
	`mem˝y
(
ùgª_d°
, 
ùgª_§c
, (
ùgª_öfo
));

305 
	}
}

307 
π∆_lök_öfo_›s
 
	gùgª_öfo_›s
 = {

308 .
io_«me
 = "gre",

309 .
	gio_Æloc
 = 
ùgª_Æloc
,

310 .
	gio_∑r£
 = 
ùgª_∑r£
,

311 .
	gio_dump
 = {

312 [
NL_DUMP_LINE
] = 
ùgª_dump_löe
,

313 [
NL_DUMP_DETAILS
] = 
ùgª_dump_dëaûs
,

315 .
	gio_˛⁄e
 = 
ùgª_˛⁄e
,

316 .
	gio_put_©ås
 = 
ùgª_put_©ås
,

317 .
	gio_‰ì
 = 
ùgª_‰ì
,

320 
	#IS_IPGRE_LINK_ASSERT
(
lök
) \

321 i‡((
lök
)->
l_öfo_›s
 !&
ùgª_öfo_›s
) { \

322 
	`APPBUG
("Link isÇotá ipgreÜink. setÅype \"gre\" first.");\

323  -
NLE_OPNOTSUPP
; \

324 }

	)

326 
π∆_lök
 *
	$π∆_lök_ùgª_Æloc
()

328 
π∆_lök
 *
lök
;

329 
îr
;

331 
lök
 = 
	`π∆_lök_Æloc
();

332 i‡(!
lök
)

333  
NULL
;

335 
îr
 = 
	`π∆_lök_£t_ty≥
(
lök
, "gre");

336 i‡(
îr
 < 0) {

337 
	`π∆_lök_put
(
lök
);

338  
NULL
;

341  
lök
;

342 
	}
}

350 
	$π∆_lök_is_ùgª
(
π∆_lök
 *
lök
)

352  
lök
->
l_öfo_›s
 && !
	`°rcmp
÷ök->l_öfo_›s->
io_«me
, "gre");

353 
	}
}

362 
	$π∆_lök_ùgª_add
(
∆_sock
 *
sk
, c⁄° *
«me
)

364 
π∆_lök
 *
lök
;

365 
îr
;

367 
lök
 = 
	`π∆_lök_ùgª_Æloc
();

368 i‡(!
lök
)

369  -
NLE_NOMEM
;

371 if(
«me
)

372 
	`π∆_lök_£t_«me
(
lök
, 
«me
);

374 
îr
 = 
	`π∆_lök_add
(
sk
, 
lök
, 
NLM_F_CREATE
);

375 
	`π∆_lök_put
(
lök
);

377  
îr
;

378 
	}
}

386 
	$π∆_lök_ùgª_£t_lök
(
π∆_lök
 *
lök
, 
uöt32_t
 
ödex
)

388 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

390 
	`IS_IPGRE_LINK_ASSERT
(
lök
);

392 
ùgª
->
lök
 = 
ödex
;

393 
ùgª
->
ùgª_mask
 |
IPGRE_ATTR_LINK
;

396 
	}
}

404 
uöt32_t
 
	$π∆_lök_ùgª_gë_lök
(
π∆_lök
 *
lök
)

406 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

408 
	`IS_IPGRE_LINK_ASSERT
(
lök
);

410  
ùgª
->
lök
;

411 
	}
}

420 
	$π∆_lök_ùgª_£t_iÊags
(
π∆_lök
 *
lök
, 
uöt16_t
 
iÊags
)

422 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

424 
	`IS_IPGRE_LINK_ASSERT
(
lök
);

426 
ùgª
->
iÊags
 = iflags;

427 
ùgª
->
ùgª_mask
 |
IPGRE_ATTR_IFLAGS
;

430 
	}
}

438 
uöt16_t
 
	$π∆_lök_ùgª_gë_iÊags
(
π∆_lök
 *
lök
)

440 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

442 
	`IS_IPGRE_LINK_ASSERT
(
lök
);

444  
ùgª
->
iÊags
;

445 
	}
}

454 
	$π∆_lök_ùgª_£t_oÊags
(
π∆_lök
 *
lök
, 
uöt16_t
 
oÊags
)

456 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

458 
	`IS_IPGRE_LINK_ASSERT
(
lök
);

460 
ùgª
->
oÊags
 = oflags;

461 
ùgª
->
ùgª_mask
 |
IPGRE_ATTR_OFLAGS
;

464 
	}
}

472 
uöt16_t
 
	$π∆_lök_ùgª_gë_oÊags
(
π∆_lök
 *
lök
)

474 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

476 
	`IS_IPGRE_LINK_ASSERT
(
lök
);

478  
ùgª
->
oÊags
;

479 
	}
}

488 
	$π∆_lök_ùgª_£t_ikey
(
π∆_lök
 *
lök
, 
uöt32_t
 
ikey
)

490 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

492 
	`IS_IPGRE_LINK_ASSERT
(
lök
);

494 
ùgª
->
ikey
 = ikey;

495 
ùgª
->
ùgª_mask
 |
IPGRE_ATTR_IKEY
;

498 
	}
}

506 
uöt32_t
 
	$π∆_lök_ùgª_gë_ikey
(
π∆_lök
 *
lök
)

508 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

510 
	`IS_IPGRE_LINK_ASSERT
(
lök
);

512  
ùgª
->
ikey
;

513 
	}
}

522 
	$π∆_lök_ùgª_£t_okey
(
π∆_lök
 *
lök
, 
uöt32_t
 
okey
)

524 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

526 
	`IS_IPGRE_LINK_ASSERT
(
lök
);

528 
ùgª
->
okey
 = okey;

529 
ùgª
->
ùgª_mask
 |
IPGRE_ATTR_OKEY
;

532 
	}
}

540 
uöt32_t
 
	$π∆_lök_ùgª_gë_okey
(
π∆_lök
 *
lök
)

542 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

544 
	`IS_IPGRE_LINK_ASSERT
(
lök
);

546  
ùgª
->
okey
;

547 
	}
}

556 
	$π∆_lök_ùgª_£t_loˇl
(
π∆_lök
 *
lök
, 
uöt32_t
 
addr
)

558 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

560 
	`IS_IPGRE_LINK_ASSERT
(
lök
);

562 
ùgª
->
loˇl
 = 
addr
;

563 
ùgª
->
ùgª_mask
 |
IPGRE_ATTR_LOCAL
;

566 
	}
}

574 
uöt32_t
 
	$π∆_lök_ùgª_gë_loˇl
(
π∆_lök
 *
lök
)

576 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

578 
	`IS_IPGRE_LINK_ASSERT
(
lök
);

580  
ùgª
->
loˇl
;

581 
	}
}

590 
	$π∆_lök_ùgª_£t_ªmŸe
(
π∆_lök
 *
lök
, 
uöt32_t
 
ªmŸe
)

592 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

594 
	`IS_IPGRE_LINK_ASSERT
(
lök
);

596 
ùgª
->
ªmŸe
 =Ñemote;

597 
ùgª
->
ùgª_mask
 |
IPGRE_ATTR_REMOTE
;

600 
	}
}

608 
uöt32_t
 
	$π∆_lök_ùgª_gë_ªmŸe
(
π∆_lök
 *
lök
)

610 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

612 
	`IS_IPGRE_LINK_ASSERT
(
lök
);

614  
ùgª
->
ªmŸe
;

615 
	}
}

624 
	$π∆_lök_ùgª_£t_âl
(
π∆_lök
 *
lök
, 
uöt8_t
 
âl
)

626 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

628 
	`IS_IPGRE_LINK_ASSERT
(
lök
);

630 
ùgª
->
âl
 =Åtl;

631 
ùgª
->
ùgª_mask
 |
IPGRE_ATTR_TTL
;

634 
	}
}

642 
uöt8_t
 
	$π∆_lök_ùgª_gë_âl
(
π∆_lök
 *
lök
)

644 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

646 
	`IS_IPGRE_LINK_ASSERT
(
lök
);

648  
ùgª
->
âl
;

649 
	}
}

658 
	$π∆_lök_ùgª_£t_tos
(
π∆_lök
 *
lök
, 
uöt8_t
 
tos
)

660 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

662 
	`IS_IPGRE_LINK_ASSERT
(
lök
);

664 
ùgª
->
tos
 =Åos;

665 
ùgª
->
ùgª_mask
 |
IPGRE_ATTR_TOS
;

668 
	}
}

676 
uöt8_t
 
	$π∆_lök_ùgª_gë_tos
(
π∆_lök
 *
lök
)

678 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

680 
	`IS_IPGRE_LINK_ASSERT
(
lök
);

682  
ùgª
->
tos
;

683 
	}
}

692 
	$π∆_lök_ùgª_£t_pmtudisc
(
π∆_lök
 *
lök
, 
uöt8_t
 
pmtudisc
)

694 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

696 
	`IS_IPGRE_LINK_ASSERT
(
lök
);

698 
ùgª
->
pmtudisc
 =Ömtudisc;

699 
ùgª
->
ùgª_mask
 |
IPGRE_ATTR_PMTUDISC
;

702 
	}
}

710 
uöt8_t
 
	$π∆_lök_gë_pmtudisc
(
π∆_lök
 *
lök
)

712 
ùgª_öfo
 *
ùgª
 = 
lök
->
l_öfo
;

714 
	`IS_IPGRE_LINK_ASSERT
(
lök
);

716  
ùgª
->
pmtudisc
;

717 
	}
}

719 
__öô
 
	$ùgª_öô
()

721 
	`π∆_lök_ªgi°î_öfo
(&
ùgª_öfo_›s
);

722 
	}
}

724 
__exô
 
	$ùgª_exô
()

726 
	`π∆_lök_uƒegi°î_öfo
(&
ùgª_öfo_›s
);

727 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/link/ipip.c

25 
	~<√éök-¥iv©e/√éök.h
>

26 
	~<√éök/√éök.h
>

27 
	~<√éök/©å.h
>

28 
	~<√éök/utûs.h
>

29 
	~<√éök/obje˘.h
>

30 
	~<√éök/rouã/π∆.h
>

31 
	~<√éök-¥iv©e/rouã/lök/≠i.h
>

32 
	~<löux/if_tu¬ñ.h
>

34 
	#IPIP_ATTR_LINK
 (1 << 0)

	)

35 
	#IPIP_ATTR_LOCAL
 (1 << 1)

	)

36 
	#IPIP_ATTR_REMOTE
 (1 << 2)

	)

37 
	#IPIP_ATTR_TTL
 (1 << 3)

	)

38 
	#IPIP_ATTR_TOS
 (1 << 4)

	)

39 
	#IPIP_ATTR_PMTUDISC
 (1 << 5)

	)

41 
	sùù_öfo


43 
uöt8_t
 
	mâl
;

44 
uöt8_t
 
	mtos
;

45 
uöt8_t
 
	mpmtudisc
;

46 
uöt32_t
 
	mlök
;

47 
uöt32_t
 
	mloˇl
;

48 
uöt32_t
 
	mªmŸe
;

49 
uöt32_t
 
	mùù_mask
;

52 
∆a_pﬁicy
 
	gùù_pﬁicy
[
IFLA_IPTUN_MAX
 + 1] = {

53 [
IFLA_IPTUN_LINK
] = { .
ty≥
 = 
NLA_U32
 },

54 [
IFLA_IPTUN_LOCAL
] = { .
ty≥
 = 
NLA_U32
 },

55 [
IFLA_IPTUN_REMOTE
] = { .
ty≥
 = 
NLA_U32
 },

56 [
IFLA_IPTUN_TTL
] = { .
ty≥
 = 
NLA_U8
 },

57 [
IFLA_IPTUN_TOS
] = { .
ty≥
 = 
NLA_U8
 },

58 [
IFLA_IPTUN_PMTUDISC
] = { .
ty≥
 = 
NLA_U8
 },

61 
	$ùù_Æloc
(
π∆_lök
 *
lök
)

63 
ùù_öfo
 *
ùù
;

65 
ùù
 = 
	`ˇŒoc
(1, (*ipip));

66 i‡(!
ùù
)

67  -
NLE_NOMEM
;

69 
lök
->
l_öfo
 = 
ùù
;

72 
	}
}

74 
	$ùù_∑r£
(
π∆_lök
 *
lök
, 
∆©å
 *
d©a
,

75 
∆©å
 *
x°©s
)

77 
∆©å
 *
tb
[
IFLA_IPTUN_MAX
 + 1];

78 
ùù_öfo
 *
ùù
;

79 
îr
;

81 
	`NL_DBG
(3, "Parsing IPIPÜink info");

83 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
IFLA_IPTUN_MAX
, 
d©a
, 
ùù_pﬁicy
);

84 i‡(
îr
 < 0)

85 
îrout
;

87 
îr
 = 
	`ùù_Æloc
(
lök
);

88 i‡(
îr
 < 0)

89 
îrout
;

91 
ùù
 = 
lök
->
l_öfo
;

93 i‡(
tb
[
IFLA_IPTUN_LINK
]) {

94 
ùù
->
lök
 = 
	`∆a_gë_u32
(
tb
[
IFLA_IPTUN_LINK
]);

95 
ùù
->
ùù_mask
 |
IPIP_ATTR_LINK
;

98 i‡(
tb
[
IFLA_IPTUN_LOCAL
]) {

99 
ùù
->
loˇl
 = 
	`∆a_gë_u32
(
tb
[
IFLA_IPTUN_LOCAL
]);

100 
ùù
->
ùù_mask
 |
IPIP_ATTR_LOCAL
;

103 i‡(
tb
[
IFLA_IPTUN_REMOTE
]) {

104 
ùù
->
ªmŸe
 = 
	`∆a_gë_u32
(
tb
[
IFLA_IPTUN_REMOTE
]);

105 
ùù
->
ùù_mask
 |
IPIP_ATTR_REMOTE
;

108 i‡(
tb
[
IFLA_IPTUN_TTL
]) {

109 
ùù
->
âl
 = 
	`∆a_gë_u8
(
tb
[
IFLA_IPTUN_TTL
]);

110 
ùù
->
ùù_mask
 |
IPIP_ATTR_TTL
;

113 i‡(
tb
[
IFLA_IPTUN_TOS
]) {

114 
ùù
->
tos
 = 
	`∆a_gë_u8
(
tb
[
IFLA_IPTUN_TOS
]);

115 
ùù
->
ùù_mask
 |
IPIP_ATTR_TOS
;

118 i‡(
tb
[
IFLA_IPTUN_PMTUDISC
]) {

119 
ùù
->
pmtudisc
 = 
	`∆a_gë_u8
(
tb
[
IFLA_IPTUN_PMTUDISC
]);

120 
ùù
->
ùù_mask
 |
IPIP_ATTR_PMTUDISC
;

123 
îr
 = 0;

125 
îrout
:

126  
îr
;

127 
	}
}

129 
	$ùù_put_©ås
(
∆_msg
 *
msg
, 
π∆_lök
 *
lök
)

131 
ùù_öfo
 *
ùù
 = 
lök
->
l_öfo
;

132 
∆©å
 *
d©a
;

134 
d©a
 = 
	`∆a_√°_°¨t
(
msg
, 
IFLA_INFO_DATA
);

135 i‡(!
d©a
)

136  -
NLE_MSGSIZE
;

138 i‡(
ùù
->
ùù_mask
 & 
IPIP_ATTR_LINK
)

139 
	`NLA_PUT_U32
(
msg
, 
IFLA_IPTUN_LINK
, 
ùù
->
lök
);

141 i‡(
ùù
->
ùù_mask
 & 
IPIP_ATTR_LOCAL
)

142 
	`NLA_PUT_U32
(
msg
, 
IFLA_IPTUN_LOCAL
, 
ùù
->
loˇl
);

144 i‡(
ùù
->
ùù_mask
 & 
IPIP_ATTR_REMOTE
)

145 
	`NLA_PUT_U32
(
msg
, 
IFLA_IPTUN_REMOTE
, 
ùù
->
ªmŸe
);

147 i‡(
ùù
->
ùù_mask
 & 
IPIP_ATTR_TTL
)

148 
	`NLA_PUT_U8
(
msg
, 
IFLA_IPTUN_TTL
, 
ùù
->
âl
);

150 i‡(
ùù
->
ùù_mask
 & 
IPIP_ATTR_TOS
)

151 
	`NLA_PUT_U8
(
msg
, 
IFLA_IPTUN_TOS
, 
ùù
->
tos
);

153 i‡(
ùù
->
ùù_mask
 & 
IPIP_ATTR_PMTUDISC
)

154 
	`NLA_PUT_U8
(
msg
, 
IFLA_IPTUN_PMTUDISC
, 
ùù
->
pmtudisc
);

156 
	`∆a_√°_íd
(
msg
, 
d©a
);

158 
∆a_put_Áûuª
:

160 
	}
}

162 
	$ùù_‰ì
(
π∆_lök
 *
lök
)

164 
ùù_öfo
 *
ùù
 = 
lök
->
l_öfo
;

166 
	`‰ì
(
ùù
);

167 
lök
->
l_öfo
 = 
NULL
;

168 
	}
}

170 
	$ùù_dump_löe
(
π∆_lök
 *
lök
, 
∆_dump_∑øms
 *
p
)

172 
	`∆_dump
(
p
, "ùù : %s", 
lök
->
l_«me
);

173 
	}
}

175 
	$ùù_dump_dëaûs
(
π∆_lök
 *
lök
, 
∆_dump_∑øms
 *
p
)

177 
ùù_öfo
 *
ùù
 = 
lök
->
l_öfo
;

178 *
«me
, 
addr
[
INET_ADDRSTRLEN
];

180 i‡(
ùù
->
ùù_mask
 & 
IPIP_ATTR_LINK
) {

181 
	`∆_dump
(
p
, "Üink ");

182 
«me
 = 
	`π∆_lök_gë_«me
(
lök
);

183 i‡(
«me
)

184 
	`∆_dump_löe
(
p
, "%s\n", 
«me
);

186 
	`∆_dump_löe
(
p
, "%u\n", 
ùù
->
lök
);

189 i‡(
ùù
->
ùù_mask
 & 
IPIP_ATTR_LOCAL
) {

190 
	`∆_dump
(
p
, "Üocal ");

191 if(
	`öë_¡›
(
AF_INET
, &
ùù
->
loˇl
, 
addr
, (addr)))

192 
	`∆_dump_löe
(
p
, "%s\n", 
addr
);

194 
	`∆_dump_löe
(
p
, "%#x\n", 
	`¡ohs
(
ùù
->
loˇl
));

197 i‡(
ùù
->
ùù_mask
 & 
IPIP_ATTR_REMOTE
) {

198 
	`∆_dump
(
p
, "Ñemote ");

199 if(
	`öë_¡›
(
AF_INET
, &
ùù
->
ªmŸe
, 
addr
, (addr)))

200 
	`∆_dump_löe
(
p
, "%s\n", 
addr
);

202 
	`∆_dump_löe
(
p
, "%#x\n", 
	`¡ohs
(
ùù
->
ªmŸe
));

205 i‡(
ùù
->
ùù_mask
 & 
IPIP_ATTR_TTL
) {

206 
	`∆_dump
(
p
, "Åtl ");

207 
	`∆_dump_löe
(
p
, "%u\n", 
ùù
->
âl
);

210 i‡(
ùù
->
ùù_mask
 & 
IPIP_ATTR_TOS
) {

211 
	`∆_dump
(
p
, "Åos ");

212 
	`∆_dump_löe
(
p
, "%u\n", 
ùù
->
tos
);

215 i‡(
ùù
->
ùù_mask
 & 
IPIP_ATTR_PMTUDISC
) {

216 
	`∆_dump
(
p
, "Ömtudisc ");

217 
	`∆_dump_löe
(
p
, "íabÀd (%#x)\n", 
ùù
->
pmtudisc
);

219 
	}
}

221 
	$ùù_˛⁄e
(
π∆_lök
 *
d°
, π∆_lök *
§c
)

223 
ùù_öfo
 *
ùù_d°
, *
ùù_§c
 = 
§c
->
l_öfo
;

224 
îr
;

226 
d°
->
l_öfo
 = 
NULL
;

228 
îr
 = 
	`π∆_lök_£t_ty≥
(
d°
, "ipip");

229 i‡(
îr
 < 0)

230  
îr
;

232 
ùù_d°
 = 
d°
->
l_öfo
;

234 i‡(!
ùù_d°
 || !
ùù_§c
)

235 
	`BUG
();

237 
	`mem˝y
(
ùù_d°
, 
ùù_§c
, (
ùù_öfo
));

240 
	}
}

242 
π∆_lök_öfo_›s
 
	gùù_öfo_›s
 = {

243 .
io_«me
 = "ipip",

244 .
	gio_Æloc
 = 
ùù_Æloc
,

245 .
	gio_∑r£
 = 
ùù_∑r£
,

246 .
	gio_dump
 = {

247 [
NL_DUMP_LINE
] = 
ùù_dump_löe
,

248 [
NL_DUMP_DETAILS
] = 
ùù_dump_dëaûs
,

250 .
	gio_˛⁄e
 = 
ùù_˛⁄e
,

251 .
	gio_put_©ås
 = 
ùù_put_©ås
,

252 .
	gio_‰ì
 = 
ùù_‰ì
,

255 
	#IS_IPIP_LINK_ASSERT
(
lök
) \

256 i‡((
lök
)->
l_öfo_›s
 !&
ùù_öfo_›s
) { \

257 
	`APPBUG
("Link isÇotá ipipÜink. setÅype \"ipip\" first."); \

258  -
NLE_OPNOTSUPP
; \

259 }

	)

261 
π∆_lök
 *
	$π∆_lök_ùù_Æloc
()

263 
π∆_lök
 *
lök
;

264 
îr
;

266 
lök
 = 
	`π∆_lök_Æloc
();

267 i‡(!
lök
)

268  
NULL
;

270 
îr
 = 
	`π∆_lök_£t_ty≥
(
lök
, "ipip");

271 i‡(
îr
 < 0) {

272 
	`π∆_lök_put
(
lök
);

273  
NULL
;

276  
lök
;

277 
	}
}

285 
	$π∆_lök_is_ùù
(
π∆_lök
 *
lök
)

287  
lök
->
l_öfo_›s
 && !
	`°rcmp
÷ök->l_öfo_›s->
io_«me
, "ipip");

288 
	}
}

298 
	$π∆_lök_ùù_add
(
∆_sock
 *
sk
, c⁄° *
«me
)

300 
π∆_lök
 *
lök
;

301 
îr
;

303 
lök
 = 
	`π∆_lök_ùù_Æloc
();

304 i‡(!
lök
)

305  -
NLE_NOMEM
;

307 if(
«me
)

308 
	`π∆_lök_£t_«me
(
lök
, 
«me
);

310 
îr
 = 
	`π∆_lök_add
(
sk
, 
lök
, 
NLM_F_CREATE
);

311 
	`π∆_lök_put
(
lök
);

313  
îr
;

314 
	}
}

323 
	$π∆_lök_ùù_£t_lök
(
π∆_lök
 *
lök
, 
uöt32_t
 
ödex
)

325 
ùù_öfo
 *
ùù
 = 
lök
->
l_öfo
;

327 
	`IS_IPIP_LINK_ASSERT
(
lök
);

329 
ùù
->
lök
 = 
ödex
;

330 
ùù
->
ùù_mask
 |
IPIP_ATTR_LINK
;

333 
	}
}

341 
uöt32_t
 
	$π∆_lök_ùù_gë_lök
(
π∆_lök
 *
lök
)

343 
ùù_öfo
 *
ùù
 = 
lök
->
l_öfo
;

345 
	`IS_IPIP_LINK_ASSERT
(
lök
);

347  
ùù
->
lök
;

348 
	}
}

357 
	$π∆_lök_ùù_£t_loˇl
(
π∆_lök
 *
lök
, 
uöt32_t
 
addr
)

359 
ùù_öfo
 *
ùù
 = 
lök
->
l_öfo
;

361 
	`IS_IPIP_LINK_ASSERT
(
lök
);

363 
ùù
->
loˇl
 = 
addr
;

364 
ùù
->
ùù_mask
 |
IPIP_ATTR_LOCAL
;

367 
	}
}

375 
uöt32_t
 
	$π∆_lök_ùù_gë_loˇl
(
π∆_lök
 *
lök
)

377 
ùù_öfo
 *
ùù
 = 
lök
->
l_öfo
;

379 
	`IS_IPIP_LINK_ASSERT
(
lök
);

381  
ùù
->
loˇl
;

382 
	}
}

391 
	$π∆_lök_ùù_£t_ªmŸe
(
π∆_lök
 *
lök
, 
uöt32_t
 
addr
)

393 
ùù_öfo
 *
ùù
 = 
lök
->
l_öfo
;

395 
	`IS_IPIP_LINK_ASSERT
(
lök
);

397 
ùù
->
ªmŸe
 = 
addr
;

398 
ùù
->
ùù_mask
 |
IPIP_ATTR_REMOTE
;

401 
	}
}

409 
uöt32_t
 
	$π∆_lök_ùù_gë_ªmŸe
(
π∆_lök
 *
lök
)

411 
ùù_öfo
 *
ùù
 = 
lök
->
l_öfo
;

413 
	`IS_IPIP_LINK_ASSERT
(
lök
);

415  
ùù
->
ªmŸe
;

416 
	}
}

425 
	$π∆_lök_ùù_£t_âl
(
π∆_lök
 *
lök
, 
uöt8_t
 
âl
)

427 
ùù_öfo
 *
ùù
 = 
lök
->
l_öfo
;

429 
	`IS_IPIP_LINK_ASSERT
(
lök
);

431 
ùù
->
âl
 =Åtl;

432 
ùù
->
ùù_mask
 |
IPIP_ATTR_TTL
;

435 
	}
}

443 
uöt8_t
 
	$π∆_lök_ùù_gë_âl
(
π∆_lök
 *
lök
)

445 
ùù_öfo
 *
ùù
 = 
lök
->
l_öfo
;

447 
	`IS_IPIP_LINK_ASSERT
(
lök
);

449  
ùù
->
âl
;

450 
	}
}

459 
	$π∆_lök_ùù_£t_tos
(
π∆_lök
 *
lök
, 
uöt8_t
 
tos
)

461 
ùù_öfo
 *
ùù
 = 
lök
->
l_öfo
;

463 
	`IS_IPIP_LINK_ASSERT
(
lök
);

465 
ùù
->
tos
 =Åos;

466 
ùù
->
ùù_mask
 |
IPIP_ATTR_TOS
;

469 
	}
}

477 
uöt8_t
 
	$π∆_lök_ùù_gë_tos
(
π∆_lök
 *
lök
)

479 
ùù_öfo
 *
ùù
 = 
lök
->
l_öfo
;

481 
	`IS_IPIP_LINK_ASSERT
(
lök
);

483  
ùù
->
tos
;

484 
	}
}

493 
	$π∆_lök_ùù_£t_pmtudisc
(
π∆_lök
 *
lök
, 
uöt8_t
 
pmtudisc
)

495 
ùù_öfo
 *
ùù
 = 
lök
->
l_öfo
;

497 
	`IS_IPIP_LINK_ASSERT
(
lök
);

499 
ùù
->
pmtudisc
 =Ömtudisc;

500 
ùù
->
ùù_mask
 |
IPIP_ATTR_PMTUDISC
;

503 
	}
}

511 
uöt8_t
 
	$π∆_lök_ùù_gë_pmtudisc
(
π∆_lök
 *
lök
)

513 
ùù_öfo
 *
ùù
 = 
lök
->
l_öfo
;

515 
	`IS_IPIP_LINK_ASSERT
(
lök
);

517  
ùù
->
pmtudisc
;

518 
	}
}

520 
__öô
 
	$ùù_öô
()

522 
	`π∆_lök_ªgi°î_öfo
(&
ùù_öfo_›s
);

523 
	}
}

525 
__exô
 
	$ùù_exô
()

527 
	`π∆_lök_uƒegi°î_öfo
(&
ùù_öfo_›s
);

528 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/link/ipvti.c

25 
	~<√éök-¥iv©e/√éök.h
>

26 
	~<√éök/√éök.h
>

27 
	~<√éök/©å.h
>

28 
	~<√éök/utûs.h
>

29 
	~<√éök/obje˘.h
>

30 
	~<√éök/rouã/π∆.h
>

31 
	~<√éök-¥iv©e/rouã/lök/≠i.h
>

32 
	~<löux/if_tu¬ñ.h
>

34 
	#IPVTI_ATTR_LINK
 (1 << 0)

	)

35 
	#IPVTI_ATTR_IKEY
 (1 << 1)

	)

36 
	#IPVTI_ATTR_OKEY
 (1 << 2)

	)

37 
	#IPVTI_ATTR_LOCAL
 (1 << 3)

	)

38 
	#IPVTI_ATTR_REMOTE
 (1 << 4)

	)

40 
	sùvti_öfo


42 
uöt32_t
 
	mlök
;

43 
uöt32_t
 
	mikey
;

44 
uöt32_t
 
	mokey
;

45 
uöt32_t
 
	mloˇl
;

46 
uöt32_t
 
	mªmŸe
;

47 
uöt32_t
 
	mùvti_mask
;

50 
∆a_pﬁicy
 
	gùvti_pﬁicy
[
IFLA_GRE_MAX
 + 1] = {

51 [
IFLA_VTI_LINK
] = { .
ty≥
 = 
NLA_U32
 },

52 [
IFLA_VTI_IKEY
] = { .
ty≥
 = 
NLA_U32
 },

53 [
IFLA_VTI_OKEY
] = { .
ty≥
 = 
NLA_U32
 },

54 [
IFLA_VTI_LOCAL
] = { .
ty≥
 = 
NLA_U32
 },

55 [
IFLA_VTI_REMOTE
] = { .
ty≥
 = 
NLA_U32
 },

58 
	$ùvti_Æloc
(
π∆_lök
 *
lök
)

60 
ùvti_öfo
 *
ùvti
;

62 
ùvti
 = 
	`ˇŒoc
(1, (*ipvti));

63 i‡(!
ùvti
)

64  -
NLE_NOMEM
;

66 
lök
->
l_öfo
 = 
ùvti
;

69 
	}
}

71 
	$ùvti_∑r£
(
π∆_lök
 *
lök
, 
∆©å
 *
d©a
,

72 
∆©å
 *
x°©s
)

74 
∆©å
 *
tb
[
IFLA_IPTUN_MAX
 + 1];

75 
ùvti_öfo
 *
ùvti
;

76 
îr
;

78 
	`NL_DBG
(3, "Parsing IPVTIÜink info");

80 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
IFLA_GRE_MAX
, 
d©a
, 
ùvti_pﬁicy
);

81 i‡(
îr
 < 0)

82 
îrout
;

84 
îr
 = 
	`ùvti_Æloc
(
lök
);

85 i‡(
îr
 < 0)

86 
îrout
;

88 
ùvti
 = 
lök
->
l_öfo
;

90 i‡(
tb
[
IFLA_VTI_LINK
]) {

91 
ùvti
->
lök
 = 
	`∆a_gë_u32
(
tb
[
IFLA_VTI_LINK
]);

92 
ùvti
->
ùvti_mask
 |
IPVTI_ATTR_LINK
;

95 i‡(
tb
[
IFLA_VTI_IKEY
]) {

96 
ùvti
->
ikey
 = 
	`∆a_gë_u32
(
tb
[
IFLA_VTI_IKEY
]);

97 
ùvti
->
ùvti_mask
 |
IPVTI_ATTR_IKEY
;

100 i‡(
tb
[
IFLA_VTI_OKEY
]) {

101 
ùvti
->
okey
 = 
	`∆a_gë_u32
(
tb
[
IFLA_VTI_OKEY
]);

102 
ùvti
->
ùvti_mask
 |
IPVTI_ATTR_OKEY
;

105 i‡(
tb
[
IFLA_VTI_LOCAL
]) {

106 
ùvti
->
loˇl
 = 
	`∆a_gë_u32
(
tb
[
IFLA_VTI_LOCAL
]);

107 
ùvti
->
ùvti_mask
 |
IPVTI_ATTR_LOCAL
;

110 i‡(
tb
[
IFLA_VTI_REMOTE
]) {

111 
ùvti
->
ªmŸe
 = 
	`∆a_gë_u32
(
tb
[
IFLA_VTI_REMOTE
]);

112 
ùvti
->
ùvti_mask
 |
IPVTI_ATTR_REMOTE
;

115 
îr
 = 0;

117 
îrout
:

118  
îr
;

119 
	}
}

121 
	$ùvti_put_©ås
(
∆_msg
 *
msg
, 
π∆_lök
 *
lök
)

123 
ùvti_öfo
 *
ùvti
 = 
lök
->
l_öfo
;

124 
∆©å
 *
d©a
;

126 
d©a
 = 
	`∆a_√°_°¨t
(
msg
, 
IFLA_INFO_DATA
);

127 i‡(!
d©a
)

128  -
NLE_MSGSIZE
;

130 i‡(
ùvti
->
ùvti_mask
 & 
IPVTI_ATTR_LINK
)

131 
	`NLA_PUT_U32
(
msg
, 
IFLA_VTI_LINK
, 
ùvti
->
lök
);

133 i‡(
ùvti
->
ùvti_mask
 & 
IPVTI_ATTR_IKEY
)

134 
	`NLA_PUT_U32
(
msg
, 
IFLA_VTI_IKEY
, 
ùvti
->
ikey
);

136 i‡(
ùvti
->
ùvti_mask
 & 
IFLA_VTI_IKEY
)

137 
	`NLA_PUT_U32
(
msg
, 
IFLA_VTI_OKEY
, 
ùvti
->
okey
);

139 i‡(
ùvti
->
ùvti_mask
 & 
IPVTI_ATTR_LOCAL
)

140 
	`NLA_PUT_U32
(
msg
, 
IFLA_VTI_LOCAL
, 
ùvti
->
loˇl
);

142 i‡(
ùvti
->
ùvti_mask
 & 
IPVTI_ATTR_REMOTE
)

143 
	`NLA_PUT_U32
(
msg
, 
IFLA_VTI_REMOTE
, 
ùvti
->
ªmŸe
);

145 
	`∆a_√°_íd
(
msg
, 
d©a
);

147 
∆a_put_Áûuª
:

150 
	}
}

152 
	$ùvti_‰ì
(
π∆_lök
 *
lök
)

154 
ùvti_öfo
 *
ùvti
 = 
lök
->
l_öfo
;

156 
	`‰ì
(
ùvti
);

157 
lök
->
l_öfo
 = 
NULL
;

158 
	}
}

160 
	$ùvti_dump_löe
(
π∆_lök
 *
lök
, 
∆_dump_∑øms
 *
p
)

162 
	`∆_dump
(
p
, "ùvtò: %s", 
lök
->
l_«me
);

163 
	}
}

165 
	$ùvti_dump_dëaûs
(
π∆_lök
 *
lök
, 
∆_dump_∑øms
 *
p
)

167 
ùvti_öfo
 *
ùvti
 = 
lök
->
l_öfo
;

168 *
«me
, 
addr
[
INET_ADDRSTRLEN
];

170 i‡(
ùvti
->
ùvti_mask
 & 
IPVTI_ATTR_LINK
) {

171 
	`∆_dump
(
p
, "Üink ");

172 
«me
 = 
	`π∆_lök_gë_«me
(
lök
);

173 i‡(
«me
)

174 
	`∆_dump_löe
(
p
, "%s\n", 
«me
);

176 
	`∆_dump_löe
(
p
, "%u\n", 
ùvti
->
lök
);

179 i‡(
ùvti
->
ùvti_mask
 & 
IPVTI_ATTR_IKEY
) {

180 
	`∆_dump
(
p
, " ikey ");

181 
	`∆_dump_löe
(
p
, "%x\n",
ùvti
->
ikey
);

184 i‡(
ùvti
->
ùvti_mask
 & 
IPVTI_ATTR_OKEY
) {

185 
	`∆_dump
(
p
, " okey ");

186 
	`∆_dump_löe
(
p
, "%x\n", 
ùvti
->
okey
);

189 i‡(
ùvti
->
ùvti_mask
 & 
IPVTI_ATTR_LOCAL
) {

190 
	`∆_dump
(
p
, "Üocal ");

191 if(
	`öë_¡›
(
AF_INET
, &
ùvti
->
loˇl
, 
addr
, (addr)))

192 
	`∆_dump_löe
(
p
, "%s\n", 
addr
);

194 
	`∆_dump_löe
(
p
, "%#x\n", 
	`¡ohs
(
ùvti
->
loˇl
));

197 i‡(
ùvti
->
ùvti_mask
 & 
IPVTI_ATTR_REMOTE
) {

198 
	`∆_dump
(
p
, "Ñemote ");

199 if(
	`öë_¡›
(
AF_INET
, &
ùvti
->
ªmŸe
, 
addr
, (addr)))

200 
	`∆_dump_löe
(
p
, "%s\n", 
addr
);

202 
	`∆_dump_löe
(
p
, "%#x\n", 
	`¡ohs
(
ùvti
->
ªmŸe
));

204 
	}
}

206 
	$ùvti_˛⁄e
(
π∆_lök
 *
d°
, π∆_lök *
§c
)

208 
ùvti_öfo
 *
ùvti_d°
, *
ùvti_§c
 = 
§c
->
l_öfo
;

209 
îr
;

211 
d°
->
l_öfo
 = 
NULL
;

213 
îr
 = 
	`π∆_lök_£t_ty≥
(
d°
, "vti");

214 i‡(
îr
 < 0)

215  
îr
;

217 
ùvti_d°
 = 
d°
->
l_öfo
;

219 i‡(!
ùvti_d°
 || !
ùvti_§c
)

220 
	`BUG
();

222 
	`mem˝y
(
ùvti_d°
, 
ùvti_§c
, (
ùvti_öfo
));

225 
	}
}

227 
π∆_lök_öfo_›s
 
	gùvti_öfo_›s
 = {

228 .
io_«me
 = "vti",

229 .
	gio_Æloc
 = 
ùvti_Æloc
,

230 .
	gio_∑r£
 = 
ùvti_∑r£
,

231 .
	gio_dump
 = {

232 [
NL_DUMP_LINE
] = 
ùvti_dump_löe
,

233 [
NL_DUMP_DETAILS
] = 
ùvti_dump_dëaûs
,

235 .
	gio_˛⁄e
 = 
ùvti_˛⁄e
,

236 .
	gio_put_©ås
 = 
ùvti_put_©ås
,

237 .
	gio_‰ì
 = 
ùvti_‰ì
,

240 
	#IS_IPVTI_LINK_ASSERT
(
lök
) \

241 i‡((
lök
)->
l_öfo_›s
 !&
ùvti_öfo_›s
) { \

242 
	`APPBUG
("Link isÇotá ipvtiÜink. setÅype \vti\" first."); \

243  -
NLE_OPNOTSUPP
; \

244 }

	)

246 
π∆_lök
 *
	$π∆_lök_ùvti_Æloc
()

248 
π∆_lök
 *
lök
;

249 
îr
;

251 
lök
 = 
	`π∆_lök_Æloc
();

252 i‡(!
lök
)

253  
NULL
;

255 
îr
 = 
	`π∆_lök_£t_ty≥
(
lök
, "vti");

256 i‡(
îr
 < 0) {

257 
	`π∆_lök_put
(
lök
);

258  
NULL
;

261  
lök
;

262 
	}
}

270 
	$π∆_lök_is_ùvti
(
π∆_lök
 *
lök
)

272  
lök
->
l_öfo_›s
 && !
	`°rcmp
÷ök->l_öfo_›s->
io_«me
, "vti");

273 
	}
}

282 
	$π∆_lök_ùvti_add
(
∆_sock
 *
sk
, c⁄° *
«me
)

284 
π∆_lök
 *
lök
;

285 
îr
;

287 
lök
 = 
	`π∆_lök_ùvti_Æloc
();

288 i‡(!
lök
)

289  -
NLE_NOMEM
;

291 if(
«me
)

292 
	`π∆_lök_£t_«me
(
lök
, 
«me
);

294 
îr
 = 
	`π∆_lök_add
(
sk
, 
lök
, 
NLM_F_CREATE
);

295 
	`π∆_lök_put
(
lök
);

297  
îr
;

298 
	}
}

306 
	$π∆_lök_ùvti_£t_lök
(
π∆_lök
 *
lök
, 
uöt32_t
 
ödex
)

308 
ùvti_öfo
 *
ùvti
 = 
lök
->
l_öfo
;

310 
	`IS_IPVTI_LINK_ASSERT
(
lök
);

312 
ùvti
->
lök
 = 
ödex
;

313 
ùvti
->
ùvti_mask
 |
IPVTI_ATTR_LINK
;

316 
	}
}

324 
uöt32_t
 
	$π∆_lök_ùvti_gë_lök
(
π∆_lök
 *
lök
)

326 
ùvti_öfo
 *
ùvti
 = 
lök
->
l_öfo
;

328 
	`IS_IPVTI_LINK_ASSERT
(
lök
);

330  
ùvti
->
lök
;

331 
	}
}

340 
	$π∆_lök_ùvti_£t_ikey
(
π∆_lök
 *
lök
, 
uöt32_t
 
ikey
)

342 
ùvti_öfo
 *
ùvti
 = 
lök
->
l_öfo
;

344 
	`IS_IPVTI_LINK_ASSERT
(
lök
);

346 
ùvti
->
ikey
 = ikey;

347 
ùvti
->
ùvti_mask
 |
IPVTI_ATTR_IKEY
;

350 
	}
}

358 
uöt32_t
 
	$π∆_lök_ùvti_gë_ikey
(
π∆_lök
 *
lök
)

360 
ùvti_öfo
 *
ùvti
 = 
lök
->
l_öfo
;

362 
	`IS_IPVTI_LINK_ASSERT
(
lök
);

364  
ùvti
->
ikey
;

365 
	}
}

374 
	$π∆_lök_ùvti_£t_okey
(
π∆_lök
 *
lök
, 
uöt32_t
 
okey
)

376 
ùvti_öfo
 *
ùvti
 = 
lök
->
l_öfo
;

378 
	`IS_IPVTI_LINK_ASSERT
(
lök
);

380 
ùvti
->
okey
 = okey;

381 
ùvti
->
ùvti_mask
 |
IPVTI_ATTR_OKEY
;

384 
	}
}

392 
uöt32_t
 
	$π∆_lök_ùvti_gë_okey
(
π∆_lök
 *
lök
)

394 
ùvti_öfo
 *
ùvti
 = 
lök
->
l_öfo
;

396 
	`IS_IPVTI_LINK_ASSERT
(
lök
);

398  
ùvti
->
okey
;

399 
	}
}

408 
	$π∆_lök_ùvti_£t_loˇl
(
π∆_lök
 *
lök
, 
uöt32_t
 
addr
)

410 
ùvti_öfo
 *
ùvti
 = 
lök
->
l_öfo
;

412 
	`IS_IPVTI_LINK_ASSERT
(
lök
);

414 
ùvti
->
loˇl
 = 
addr
;

415 
ùvti
->
ùvti_mask
 |
IPVTI_ATTR_LOCAL
;

418 
	}
}

426 
uöt32_t
 
	$π∆_lök_ùvti_gë_loˇl
(
π∆_lök
 *
lök
)

428 
ùvti_öfo
 *
ùvti
 = 
lök
->
l_öfo
;

430 
	`IS_IPVTI_LINK_ASSERT
(
lök
);

432  
ùvti
->
loˇl
;

433 
	}
}

442 
	$π∆_lök_ùvti_£t_ªmŸe
(
π∆_lök
 *
lök
, 
uöt32_t
 
ªmŸe
)

444 
ùvti_öfo
 *
ùvti
 = 
lök
->
l_öfo
;

446 
	`IS_IPVTI_LINK_ASSERT
(
lök
);

448 
ùvti
->
ªmŸe
 =Ñemote;

449 
ùvti
->
ùvti_mask
 |
IPVTI_ATTR_REMOTE
;

452 
	}
}

460 
uöt32_t
 
	$π∆_lök_ùvti_gë_ªmŸe
(
π∆_lök
 *
lök
)

462 
ùvti_öfo
 *
ùvti
 = 
lök
->
l_öfo
;

464 
	`IS_IPVTI_LINK_ASSERT
(
lök
);

466  
ùvti
->
ªmŸe
;

467 
	}
}

469 
__öô
 
	$ùvti_öô
()

471 
	`π∆_lök_ªgi°î_öfo
(&
ùvti_öfo_›s
);

472 
	}
}

474 
__exô
 
	$ùvti_exô
()

476 
	`π∆_lök_uƒegi°î_öfo
(&
ùvti_öfo_›s
);

477 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/link/macvlan.c

25 
	~<√éök-¥iv©e/√éök.h
>

26 
	~<√éök/√éök.h
>

27 
	~<√éök/©å.h
>

28 
	~<√éök/utûs.h
>

29 
	~<√éök/obje˘.h
>

30 
	~<√éök/rouã/π∆.h
>

31 
	~<√éök-¥iv©e/rouã/lök/≠i.h
>

32 
	~<√éök/rouã/lök/macvœn.h
>

34 
	~<löux/if_lök.h
>

37 
	#MACVLAN_HAS_MODE
 (1<<0)

	)

38 
	#MACVLAN_HAS_FLAGS
 (1<<1)

	)

40 
	smacvœn_öfo


42 
uöt32_t
 
	mmvi_mode
;

43 
uöt16_t
 
	mmvi_Êags
;

44 
uöt32_t
 
	mmvi_mask
;

49 
∆a_pﬁicy
 
	gmacvœn_pﬁicy
[
IFLA_MACVLAN_MAX
+1] = {

50 [
IFLA_MACVLAN_MODE
] = { .
ty≥
 = 
NLA_U32
 },

51 [
IFLA_MACVLAN_FLAGS
] = { .
ty≥
 = 
NLA_U16
 },

54 
	$macvœn_Æloc
(
π∆_lök
 *
lök
)

56 
macvœn_öfo
 *
mvi
;

58 i‡((
mvi
 = 
	`ˇŒoc
(1, (*mvi))Ë=
NULL
)

59  -
NLE_NOMEM
;

61 
lök
->
l_öfo
 = 
mvi
;

64 
	}
}

66 
	$macvœn_∑r£
(
π∆_lök
 *
lök
, 
∆©å
 *
d©a
,

67 
∆©å
 *
x°©s
)

69 
∆©å
 *
tb
[
IFLA_MACVLAN_MAX
+1];

70 
macvœn_öfo
 *
mvi
;

71 
îr
;

73 
	`NL_DBG
(3, "Parsing MACVLANÜink info");

75 i‡((
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
IFLA_MACVLAN_MAX
, 
d©a
, 
macvœn_pﬁicy
)) < 0)

76 
îrout
;

78 i‡((
îr
 = 
	`macvœn_Æloc
(
lök
)) < 0)

79 
îrout
;

81 
mvi
 = 
lök
->
l_öfo
;

83 i‡(
tb
[
IFLA_MACVLAN_MODE
]) {

84 
mvi
->
mvi_mode
 = 
	`∆a_gë_u32
(
tb
[
IFLA_MACVLAN_MODE
]);

85 
mvi
->
mvi_mask
 |
MACVLAN_HAS_MODE
;

88 i‡(
tb
[
IFLA_MACVLAN_FLAGS
]) {

89 
mvi
->
mvi_mode
 = 
	`∆a_gë_u16
(
tb
[
IFLA_MACVLAN_FLAGS
]);

90 
mvi
->
mvi_mask
 |
MACVLAN_HAS_FLAGS
;

93 
îr
 = 0;

94 
îrout
:

95  
îr
;

96 
	}
}

98 
	$macvœn_‰ì
(
π∆_lök
 *
lök
)

100 
	`‰ì
(
lök
->
l_öfo
);

101 
lök
->
l_öfo
 = 
NULL
;

102 
	}
}

104 
	$macvœn_dump
(
π∆_lök
 *
lök
, 
∆_dump_∑øms
 *
p
)

106 
buf
[64];

107 
macvœn_öfo
 *
mvi
 = 
lök
->
l_öfo
;

109 i‡(
mvi
->
mvi_mask
 & 
MACVLAN_HAS_MODE
) {

110 
	`π∆_lök_macvœn_mode2°r
(
mvi
->
mvi_mode
, 
buf
, (buf));

111 
	`∆_dump
(
p
, "macvœn-modê%s", 
buf
);

114 i‡(
mvi
->
mvi_mask
 & 
MACVLAN_HAS_FLAGS
) {

115 
	`π∆_lök_macvœn_Êags2°r
(
mvi
->
mvi_Êags
, 
buf
, (buf));

116 
	`∆_dump
(
p
, "macvœn-Êag†%s", 
buf
);

118 
	}
}

120 
	$macvœn_˛⁄e
(
π∆_lök
 *
d°
, π∆_lök *
§c
)

122 
macvœn_öfo
 *
vd°
, *
v§c
 = 
§c
->
l_öfo
;

123 
îr
;

125 
d°
->
l_öfo
 = 
NULL
;

126 i‡((
îr
 = 
	`π∆_lök_£t_ty≥
(
d°
, "macvlan")) < 0)

127  
îr
;

128 
vd°
 = 
d°
->
l_öfo
;

130 i‡(!
vd°
 || !
v§c
)

131  -
NLE_NOMEM
;

133 
	`mem˝y
(
vd°
, 
v§c
, (
macvœn_öfo
));

136 
	}
}

138 
	$macvœn_put_©ås
(
∆_msg
 *
msg
, 
π∆_lök
 *
lök
)

140 
macvœn_öfo
 *
mvi
 = 
lök
->
l_öfo
;

141 
∆©å
 *
d©a
;

143 i‡(!(
d©a
 = 
	`∆a_√°_°¨t
(
msg
, 
IFLA_INFO_DATA
)))

144  -
NLE_MSGSIZE
;

146 i‡(
mvi
->
mvi_mask
 & 
MACVLAN_HAS_MODE
)

147 
	`NLA_PUT_U32
(
msg
, 
IFLA_MACVLAN_MODE
, 
mvi
->
mvi_mode
);

149 i‡(
mvi
->
mvi_mask
 & 
MACVLAN_HAS_FLAGS
)

150 
	`NLA_PUT_U16
(
msg
, 
IFLA_MACVLAN_FLAGS
, 
mvi
->
mvi_Êags
);

152 
	`∆a_√°_íd
(
msg
, 
d©a
);

154 
∆a_put_Áûuª
:

157 
	}
}

159 
π∆_lök_öfo_›s
 
	gmacvœn_öfo_›s
 = {

160 .
io_«me
 = "macvlan",

161 .
	gio_Æloc
 = 
macvœn_Æloc
,

162 .
	gio_∑r£
 = 
macvœn_∑r£
,

163 .
	gio_dump
 = {

164 [
NL_DUMP_LINE
] = 
macvœn_dump
,

165 [
NL_DUMP_DETAILS
] = 
macvœn_dump
,

167 .
	gio_˛⁄e
 = 
macvœn_˛⁄e
,

168 .
	gio_put_©ås
 = 
macvœn_put_©ås
,

169 .
	gio_‰ì
 = 
macvœn_‰ì
,

173 
	#IS_MACVLAN_LINK_ASSERT
(
lök
) \

174 i‡((
lök
)->
l_öfo_›s
 !&
macvœn_öfo_›s
) { \

175 
	`APPBUG
("Link isÇotá macvlanÜink. setÅype \"macvlan\" first."); \

176  -
NLE_OPNOTSUPP
; \

177 }

	)

190 
π∆_lök
 *
	$π∆_lök_macvœn_Æloc
()

192 
π∆_lök
 *
lök
;

193 
îr
;

195 i‡(!(
lök
 = 
	`π∆_lök_Æloc
()))

196  
NULL
;

198 i‡((
îr
 = 
	`π∆_lök_£t_ty≥
(
lök
, "macvlan")) < 0) {

199 
	`π∆_lök_put
(
lök
);

200  
NULL
;

203  
lök
;

204 
	}
}

212 
	$π∆_lök_is_macvœn
(
π∆_lök
 *
lök
)

214  
lök
->
l_öfo_›s
 && !
	`°rcmp
÷ök->l_öfo_›s->
io_«me
, "macvlan");

215 
	}
}

224 
	$π∆_lök_macvœn_£t_mode
(
π∆_lök
 *
lök
, 
uöt32_t
 
mode
)

226 
macvœn_öfo
 *
mvi
 = 
lök
->
l_öfo
;

228 
	`IS_MACVLAN_LINK_ASSERT
(
lök
);

230 
mvi
->
mvi_mode
 = 
mode
;

231 
mvi
->
mvi_mask
 |
MACVLAN_HAS_MODE
;

234 
	}
}

242 
uöt32_t
 
	$π∆_lök_macvœn_gë_mode
(
π∆_lök
 *
lök
)

244 
macvœn_öfo
 *
mvi
 = 
lök
->
l_öfo
;

246 
	`IS_MACVLAN_LINK_ASSERT
(
lök
);

248 i‡(
mvi
->
mvi_mask
 & 
MACVLAN_HAS_MODE
)

249  
mvi
->
mvi_mode
;

252 
	}
}

261 
	$π∆_lök_macvœn_£t_Êags
(
π∆_lök
 *
lök
, 
uöt16_t
 
Êags
)

263 
macvœn_öfo
 *
mvi
 = 
lök
->
l_öfo
;

265 
	`IS_MACVLAN_LINK_ASSERT
(
lök
);

267 
mvi
->
mvi_Êags
 |
Êags
;

268 
mvi
->
mvi_mask
 |
MACVLAN_HAS_FLAGS
;

271 
	}
}

283 
	$π∆_lök_macvœn_un£t_Êags
(
π∆_lök
 *
lök
, 
uöt16_t
 
Êags
)

285 
macvœn_öfo
 *
mvi
 = 
lök
->
l_öfo
;

287 
	`IS_MACVLAN_LINK_ASSERT
(
lök
);

289 
mvi
->
mvi_Êags
 &~
Êags
;

290 
mvi
->
mvi_mask
 |
MACVLAN_HAS_FLAGS
;

293 
	}
}

301 
uöt16_t
 
	$π∆_lök_macvœn_gë_Êags
(
π∆_lök
 *
lök
)

303 
macvœn_öfo
 *
mvi
 = 
lök
->
l_öfo
;

305 
	`IS_MACVLAN_LINK_ASSERT
(
lök
);

307  
mvi
->
mvi_Êags
;

308 
	}
}

312 c⁄° 
å™s_tbl
 
	gmacvœn_Êags
[] = {

313 
__ADD
(
MACVLAN_FLAG_NOPROMISC
, 
n›romisc
)

316 c⁄° 
å™s_tbl
 
	gmacvœn_modes
[] = {

317 
__ADD
(
MACVLAN_MODE_PRIVATE
, 
¥iv©e
)

318 
__ADD
(
MACVLAN_MODE_VEPA
, 
vïa
)

319 
__ADD
(
MACVLAN_MODE_BRIDGE
, 
bridge
)

320 
__ADD
(
MACVLAN_MODE_PASSTHRU
, 
∑s°hru
)

328 *
	$π∆_lök_macvœn_Êags2°r
(
Êags
, *
buf
, 
size_t
 
Àn
)

330  
	`__Êags2°r
(
Êags
, 
buf
, 
Àn
, 
macvœn_Êags
, 
	`ARRAY_SIZE
(macvlan_flags));

331 
	}
}

333 
	$π∆_lök_macvœn_°r2Êags
(c⁄° *
«me
)

335  
	`__°r2Êags
(
«me
, 
macvœn_Êags
, 
	`ARRAY_SIZE
(macvlan_flags));

336 
	}
}

345 *
	$π∆_lök_macvœn_mode2°r
(
mode
, *
buf
, 
size_t
 
Àn
)

347  
	`__ty≥2°r
(
mode
, 
buf
, 
Àn
, 
macvœn_modes
, 
	`ARRAY_SIZE
(macvlan_modes));

348 
	}
}

350 
	$π∆_lök_macvœn_°r2mode
(c⁄° *
«me
)

352  
	`__°r2ty≥
(
«me
, 
macvœn_modes
, 
	`ARRAY_SIZE
(macvlan_modes));

353 
	}
}

357 
__öô
 
	$macvœn_öô
()

359 
	`π∆_lök_ªgi°î_öfo
(&
macvœn_öfo_›s
);

360 
	}
}

362 
__exô
 
	$macvœn_exô
()

364 
	`π∆_lök_uƒegi°î_öfo
(&
macvœn_öfo_›s
);

365 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/link/sit.c

25 
	~<√éök-¥iv©e/√éök.h
>

26 
	~<√éök/√éök.h
>

27 
	~<√éök/©å.h
>

28 
	~<√éök/utûs.h
>

29 
	~<√éök/obje˘.h
>

30 
	~<√éök/rouã/π∆.h
>

31 
	~<√éök-¥iv©e/rouã/lök/≠i.h
>

32 
	~<löux/if_tu¬ñ.h
>

34 
	#SIT_ATTR_LINK
 (1 << 0)

	)

35 
	#SIT_ATTR_LOCAL
 (1 << 1)

	)

36 
	#SIT_ATTR_REMOTE
 (1 << 2)

	)

37 
	#SIT_ATTR_TTL
 (1 << 3)

	)

38 
	#SIT_ATTR_TOS
 (1 << 4)

	)

39 
	#SIT_ATTR_PMTUDISC
 (1 << 5)

	)

40 
	#SIT_ATTR_FLAGS
 (1 << 6)

	)

41 
	#SIT_ATTR_PROTO
 (1 << 7)

	)

43 
	ssô_öfo


45 
uöt8_t
 
	mâl
;

46 
uöt8_t
 
	mtos
;

47 
uöt8_t
 
	mpmtudisc
;

48 
uöt8_t
 
	m¥Ÿo
;

49 
uöt16_t
 
	mÊags
;

50 
uöt32_t
 
	mlök
;

51 
uöt32_t
 
	mloˇl
;

52 
uöt32_t
 
	mªmŸe
;

53 
uöt32_t
 
	msô_mask
;

56 
∆a_pﬁicy
 
	gsô_pﬁicy
[
IFLA_IPTUN_MAX
 + 1] = {

57 [
IFLA_IPTUN_LINK
] = { .
ty≥
 = 
NLA_U32
 },

58 [
IFLA_IPTUN_LOCAL
] = { .
ty≥
 = 
NLA_U32
 },

59 [
IFLA_IPTUN_REMOTE
] = { .
ty≥
 = 
NLA_U32
 },

60 [
IFLA_IPTUN_TTL
] = { .
ty≥
 = 
NLA_U8
 },

61 [
IFLA_IPTUN_TOS
] = { .
ty≥
 = 
NLA_U8
 },

62 [
IFLA_IPTUN_PMTUDISC
] = { .
ty≥
 = 
NLA_U8
 },

63 [
IFLA_IPTUN_FLAGS
] = { .
ty≥
 = 
NLA_U16
 },

64 [
IFLA_IPTUN_PROTO
] = { .
ty≥
 = 
NLA_U8
 },

67 
	$sô_Æloc
(
π∆_lök
 *
lök
)

69 
sô_öfo
 *
sô
;

71 
sô
 = 
	`ˇŒoc
(1, (*sit));

72 i‡(!
sô
)

73  -
NLE_NOMEM
;

75 
lök
->
l_öfo
 = 
sô
;

78 
	}
}

80 
	$sô_∑r£
(
π∆_lök
 *
lök
, 
∆©å
 *
d©a
,

81 
∆©å
 *
x°©s
)

83 
∆©å
 *
tb
[
IFLA_IPTUN_MAX
 + 1];

84 
sô_öfo
 *
sô
;

85 
îr
;

87 
	`NL_DBG
(3, "Parsing SITÜink info");

89 
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
IFLA_IPTUN_MAX
, 
d©a
, 
sô_pﬁicy
);

90 i‡(
îr
 < 0)

91 
îrout
;

93 
îr
 = 
	`sô_Æloc
(
lök
);

94 i‡(
îr
 < 0)

95 
îrout
;

97 
sô
 = 
lök
->
l_öfo
;

99 i‡(
tb
[
IFLA_IPTUN_LINK
]) {

100 
sô
->
lök
 = 
	`∆a_gë_u32
(
tb
[
IFLA_IPTUN_LINK
]);

101 
sô
->
sô_mask
 |
SIT_ATTR_LINK
;

104 i‡(
tb
[
IFLA_IPTUN_LOCAL
]) {

105 
sô
->
loˇl
 = 
	`∆a_gë_u32
(
tb
[
IFLA_IPTUN_LOCAL
]);

106 
sô
->
sô_mask
 |
SIT_ATTR_LOCAL
;

109 i‡(
tb
[
IFLA_IPTUN_REMOTE
]) {

110 
sô
->
ªmŸe
 = 
	`∆a_gë_u32
(
tb
[
IFLA_IPTUN_REMOTE
]);

111 
sô
->
sô_mask
 |
SIT_ATTR_REMOTE
;

114 i‡(
tb
[
IFLA_IPTUN_TTL
]) {

115 
sô
->
âl
 = 
	`∆a_gë_u8
(
tb
[
IFLA_IPTUN_TTL
]);

116 
sô
->
sô_mask
 |
SIT_ATTR_TTL
;

119 i‡(
tb
[
IFLA_IPTUN_TOS
]) {

120 
sô
->
tos
 = 
	`∆a_gë_u8
(
tb
[
IFLA_IPTUN_TOS
]);

121 
sô
->
sô_mask
 |
SIT_ATTR_TOS
;

124 i‡(
tb
[
IFLA_IPTUN_PMTUDISC
]) {

125 
sô
->
pmtudisc
 = 
	`∆a_gë_u8
(
tb
[
IFLA_IPTUN_PMTUDISC
]);

126 
sô
->
sô_mask
 |
SIT_ATTR_PMTUDISC
;

129 i‡(
tb
[
IFLA_IPTUN_FLAGS
]) {

130 
sô
->
Êags
 = 
	`∆a_gë_u16
(
tb
[
IFLA_IPTUN_FLAGS
]);

131 
sô
->
sô_mask
 |
SIT_ATTR_FLAGS
;

134 i‡(
tb
[
IFLA_IPTUN_PROTO
]) {

135 
sô
->
¥Ÿo
 = 
	`∆a_gë_u8
(
tb
[
IFLA_IPTUN_PROTO
]);

136 
sô
->
sô_mask
 |
SIT_ATTR_PROTO
;

139 
îr
 = 0;

141 
îrout
:

142  
îr
;

143 
	}
}

145 
	$sô_put_©ås
(
∆_msg
 *
msg
, 
π∆_lök
 *
lök
)

147 
sô_öfo
 *
sô
 = 
lök
->
l_öfo
;

148 
∆©å
 *
d©a
;

150 
d©a
 = 
	`∆a_√°_°¨t
(
msg
, 
IFLA_INFO_DATA
);

151 i‡(!
d©a
)

152  -
NLE_MSGSIZE
;

154 i‡(
sô
->
sô_mask
 & 
SIT_ATTR_LINK
)

155 
	`NLA_PUT_U32
(
msg
, 
IFLA_IPTUN_LINK
, 
sô
->
lök
);

157 i‡(
sô
->
sô_mask
 & 
SIT_ATTR_LOCAL
)

158 
	`NLA_PUT_U32
(
msg
, 
IFLA_IPTUN_LOCAL
, 
sô
->
loˇl
);

160 i‡(
sô
->
sô_mask
 & 
SIT_ATTR_REMOTE
)

161 
	`NLA_PUT_U32
(
msg
, 
IFLA_IPTUN_REMOTE
, 
sô
->
ªmŸe
);

163 i‡(
sô
->
sô_mask
 & 
SIT_ATTR_TTL
)

164 
	`NLA_PUT_U8
(
msg
, 
IFLA_IPTUN_TTL
, 
sô
->
âl
);

166 i‡(
sô
->
sô_mask
 & 
SIT_ATTR_TOS
)

167 
	`NLA_PUT_U8
(
msg
, 
IFLA_IPTUN_TOS
, 
sô
->
tos
);

169 i‡(
sô
->
sô_mask
 & 
SIT_ATTR_PMTUDISC
)

170 
	`NLA_PUT_U8
(
msg
, 
IFLA_IPTUN_PMTUDISC
, 
sô
->
pmtudisc
);

172 i‡(
sô
->
sô_mask
 & 
SIT_ATTR_FLAGS
)

173 
	`NLA_PUT_U16
(
msg
, 
IFLA_IPTUN_FLAGS
, 
sô
->
Êags
);

175 i‡(
sô
->
sô_mask
 & 
SIT_ATTR_PROTO
)

176 
	`NLA_PUT_U8
(
msg
, 
IFLA_IPTUN_PROTO
, 
sô
->
¥Ÿo
);

178 
	`∆a_√°_íd
(
msg
, 
d©a
);

180 
∆a_put_Áûuª
:

183 
	}
}

185 
	$sô_‰ì
(
π∆_lök
 *
lök
)

187 
sô_öfo
 *
sô
 = 
lök
->
l_öfo
;

189 
	`‰ì
(
sô
);

190 
lök
->
l_öfo
 = 
NULL
;

191 
	}
}

193 
	$sô_dump_löe
(
π∆_lök
 *
lök
, 
∆_dump_∑øms
 *
p
)

195 
	`∆_dump
(
p
, "sô : %s", 
lök
->
l_«me
);

196 
	}
}

198 
	$sô_dump_dëaûs
(
π∆_lök
 *
lök
, 
∆_dump_∑øms
 *
p
)

200 
sô_öfo
 *
sô
 = 
lök
->
l_öfo
;

201 *
«me
, 
addr
[
INET_ADDRSTRLEN
];

203 i‡(
sô
->
sô_mask
 & 
SIT_ATTR_LINK
) {

204 
	`∆_dump
(
p
, "Üink ");

205 
«me
 = 
	`π∆_lök_gë_«me
(
lök
);

206 i‡(
«me
)

207 
	`∆_dump_löe
(
p
, "%s\n", 
«me
);

209 
	`∆_dump_löe
(
p
, "%u\n", 
sô
->
lök
);

212 i‡(
sô
->
sô_mask
 & 
SIT_ATTR_LOCAL
) {

213 
	`∆_dump
(
p
, "Üocal ");

214 if(
	`öë_¡›
(
AF_INET
, &
sô
->
loˇl
, 
addr
, (addr)))

215 
	`∆_dump_löe
(
p
, "%s\n", 
addr
);

217 
	`∆_dump_löe
(
p
, "%#x\n", 
	`¡ohs
(
sô
->
loˇl
));

220 i‡(
sô
->
sô_mask
 & 
SIT_ATTR_REMOTE
) {

221 
	`∆_dump
(
p
, "Ñemote ");

222 if(
	`öë_¡›
(
AF_INET
, &
sô
->
ªmŸe
, 
addr
, (addr)))

223 
	`∆_dump_löe
(
p
, "%s\n", 
addr
);

225 
	`∆_dump_löe
(
p
, "%#x\n", 
	`¡ohs
(
sô
->
ªmŸe
));

228 i‡(
sô
->
sô_mask
 & 
SIT_ATTR_TTL
) {

229 
	`∆_dump
(
p
, "Åtl ");

230 
	`∆_dump_löe
(
p
, "%u\n", 
sô
->
âl
);

233 i‡(
sô
->
sô_mask
 & 
SIT_ATTR_TOS
) {

234 
	`∆_dump
(
p
, "Åos ");

235 
	`∆_dump_löe
(
p
, "%u\n", 
sô
->
tos
);

238 i‡(
sô
->
sô_mask
 & 
SIT_ATTR_FLAGS
) {

239 
	`∆_dump
(
p
, " flags ");

240 
	`∆_dump_löe
(
p
, " (%x)\n", 
sô
->
Êags
);

243 i‡(
sô
->
sô_mask
 & 
SIT_ATTR_PROTO
) {

244 
	`∆_dump
(
p
, "Öroto ");

245 
	`∆_dump_löe
(
p
, " (%x)\n", 
sô
->
¥Ÿo
);

247 
	}
}

249 
	$sô_˛⁄e
(
π∆_lök
 *
d°
, π∆_lök *
§c
)

251 
sô_öfo
 *
sô_d°
, *
sô_§c
 = 
§c
->
l_öfo
;

252 
îr
;

254 
d°
->
l_öfo
 = 
NULL
;

256 
îr
 = 
	`π∆_lök_£t_ty≥
(
d°
, "sit");

257 i‡(
îr
 < 0)

258  
îr
;

260 
sô_d°
 = 
d°
->
l_öfo
;

262 i‡(!
sô_d°
 || !
sô_§c
)

263  -
NLE_NOMEM
;

265 
	`mem˝y
(
sô_d°
, 
sô_§c
, (
sô_öfo
));

268 
	}
}

270 
π∆_lök_öfo_›s
 
	gsô_öfo_›s
 = {

271 .
io_«me
 = "sit",

272 .
	gio_Æloc
 = 
sô_Æloc
,

273 .
	gio_∑r£
 = 
sô_∑r£
,

274 .
	gio_dump
 = {

275 [
NL_DUMP_LINE
] = 
sô_dump_löe
,

276 [
NL_DUMP_DETAILS
] = 
sô_dump_dëaûs
,

278 .
	gio_˛⁄e
 = 
sô_˛⁄e
,

279 .
	gio_put_©ås
 = 
sô_put_©ås
,

280 .
	gio_‰ì
 = 
sô_‰ì
,

283 
	#IS_SIT_LINK_ASSERT
(
lök
) \

284 i‡((
lök
)->
l_öfo_›s
 !&
sô_öfo_›s
) { \

285 
	`APPBUG
("Link isÇotá sitÜink. setÅype \"sit\" first."); \

286  -
NLE_OPNOTSUPP
; \

287 }

	)

289 
π∆_lök
 *
	$π∆_lök_sô_Æloc
()

291 
π∆_lök
 *
lök
;

292 
îr
;

294 
lök
 = 
	`π∆_lök_Æloc
();

295 i‡(!
lök
)

296  
NULL
;

298 
îr
 = 
	`π∆_lök_£t_ty≥
(
lök
, "sit");

299 i‡(
îr
 < 0) {

300 
	`π∆_lök_put
(
lök
);

301  
NULL
;

304  
lök
;

305 
	}
}

313 
	$π∆_lök_is_sô
(
π∆_lök
 *
lök
)

315  
lök
->
l_öfo_›s
 && !
	`°rcmp
÷ök->l_öfo_›s->
io_«me
, "sit");

316 
	}
}

326 
	$π∆_lök_sô_add
(
∆_sock
 *
sk
, c⁄° *
«me
)

328 
π∆_lök
 *
lök
;

329 
îr
;

331 
lök
 = 
	`π∆_lök_sô_Æloc
();

332 i‡(!
lök
)

333  -
NLE_NOMEM
;

335 if(
«me
)

336 
	`π∆_lök_£t_«me
(
lök
, 
«me
);

338 
îr
 = 
	`π∆_lök_add
(
sk
, 
lök
, 
NLM_F_CREATE
);

339 
	`π∆_lök_put
(
lök
);

341  
îr
;

342 
	}
}

351 
	$π∆_lök_sô_£t_lök
(
π∆_lök
 *
lök
, 
uöt32_t
 
ödex
)

353 
sô_öfo
 *
sô
 = 
lök
->
l_öfo
;

355 
	`IS_SIT_LINK_ASSERT
(
lök
);

357 
sô
->
lök
 = 
ödex
;

358 
sô
->
sô_mask
 |
SIT_ATTR_LINK
;

361 
	}
}

369 
uöt32_t
 
	$π∆_lök_sô_gë_lök
(
π∆_lök
 *
lök
)

371 
sô_öfo
 *
sô
 = 
lök
->
l_öfo
;

373 
	`IS_SIT_LINK_ASSERT
(
lök
);

375  
sô
->
lök
;

376 
	}
}

385 
	$π∆_lök_sô_£t_loˇl
(
π∆_lök
 *
lök
, 
uöt32_t
 
addr
)

387 
sô_öfo
 *
sô
 = 
lök
->
l_öfo
;

389 
	`IS_SIT_LINK_ASSERT
(
lök
);

391 
sô
->
loˇl
 = 
addr
;

392 
sô
->
sô_mask
 |
SIT_ATTR_LOCAL
;

395 
	}
}

403 
uöt32_t
 
	$π∆_lök_sô_gë_loˇl
(
π∆_lök
 *
lök
)

405 
sô_öfo
 *
sô
 = 
lök
->
l_öfo
;

407 
	`IS_SIT_LINK_ASSERT
(
lök
);

409  
sô
->
loˇl
;

410 
	}
}

419 
	$π∆_lök_sô_£t_ªmŸe
(
π∆_lök
 *
lök
, 
uöt32_t
 
addr
)

421 
sô_öfo
 *
sô
 = 
lök
->
l_öfo
;

423 
	`IS_SIT_LINK_ASSERT
(
lök
);

425 
sô
->
ªmŸe
 = 
addr
;

426 
sô
->
sô_mask
 |
SIT_ATTR_REMOTE
;

429 
	}
}

437 
uöt32_t
 
	$π∆_lök_sô_gë_ªmŸe
(
π∆_lök
 *
lök
)

439 
sô_öfo
 *
sô
 = 
lök
->
l_öfo
;

441 
	`IS_SIT_LINK_ASSERT
(
lök
);

443  
sô
->
ªmŸe
;

444 
	}
}

453 
	$π∆_lök_sô_£t_âl
(
π∆_lök
 *
lök
, 
uöt8_t
 
âl
)

455 
sô_öfo
 *
sô
 = 
lök
->
l_öfo
;

457 
	`IS_SIT_LINK_ASSERT
(
lök
);

459 
sô
->
âl
 =Åtl;

460 
sô
->
sô_mask
 |
SIT_ATTR_TTL
;

463 
	}
}

471 
uöt8_t
 
	$π∆_lök_sô_gë_âl
(
π∆_lök
 *
lök
)

473 
sô_öfo
 *
sô
 = 
lök
->
l_öfo
;

475 
	`IS_SIT_LINK_ASSERT
(
lök
);

477  
sô
->
âl
;

478 
	}
}

487 
	$π∆_lök_sô_£t_tos
(
π∆_lök
 *
lök
, 
uöt8_t
 
tos
)

489 
sô_öfo
 *
sô
 = 
lök
->
l_öfo
;

491 
	`IS_SIT_LINK_ASSERT
(
lök
);

493 
sô
->
tos
 =Åos;

494 
sô
->
sô_mask
 |
SIT_ATTR_TOS
;

497 
	}
}

505 
uöt8_t
 
	$π∆_lök_sô_gë_tos
(
π∆_lök
 *
lök
)

507 
sô_öfo
 *
sô
 = 
lök
->
l_öfo
;

509 
	`IS_SIT_LINK_ASSERT
(
lök
);

511  
sô
->
tos
;

512 
	}
}

521 
	$π∆_lök_sô_£t_pmtudisc
(
π∆_lök
 *
lök
, 
uöt8_t
 
pmtudisc
)

523 
sô_öfo
 *
sô
 = 
lök
->
l_öfo
;

525 
	`IS_SIT_LINK_ASSERT
(
lök
);

527 
sô
->
pmtudisc
 =Ömtudisc;

528 
sô
->
sô_mask
 |
SIT_ATTR_PMTUDISC
;

531 
	}
}

539 
uöt8_t
 
	$π∆_lök_sô_gë_pmtudisc
(
π∆_lök
 *
lök
)

541 
sô_öfo
 *
sô
 = 
lök
->
l_öfo
;

543 
	`IS_SIT_LINK_ASSERT
(
lök
);

545  
sô
->
pmtudisc
;

546 
	}
}

555 
	$π∆_lök_sô_£t_Êags
(
π∆_lök
 *
lök
, 
uöt16_t
 
Êags
)

557 
sô_öfo
 *
sô
 = 
lök
->
l_öfo
;

559 
	`IS_SIT_LINK_ASSERT
(
lök
);

561 
sô
->
Êags
 = flags;

562 
sô
->
sô_mask
 |
SIT_ATTR_FLAGS
;

565 
	}
}

573 
uöt16_t
 
	$π∆_lök_sô_gë_Êags
(
π∆_lök
 *
lök
)

575 
sô_öfo
 *
sô
 = 
lök
->
l_öfo
;

577 
	`IS_SIT_LINK_ASSERT
(
lök
);

579  
sô
->
Êags
;

580 
	}
}

589 
	$π∆_lök_sô_£t_¥Ÿo
(
π∆_lök
 *
lök
, 
uöt8_t
 
¥Ÿo
)

591 
sô_öfo
 *
sô
 = 
lök
->
l_öfo
;

593 
	`IS_SIT_LINK_ASSERT
(
lök
);

595 
sô
->
¥Ÿo
 =Öroto;

596 
sô
->
sô_mask
 |
SIT_ATTR_PROTO
;

599 
	}
}

607 
uöt8_t
 
	$π∆_lök_sô_gë_¥Ÿo
(
π∆_lök
 *
lök
)

609 
sô_öfo
 *
sô
 = 
lök
->
l_öfo
;

611 
	`IS_SIT_LINK_ASSERT
(
lök
);

613  
sô
->
¥Ÿo
;

614 
	}
}

616 
__öô
 
	$sô_öô
()

618 
	`π∆_lök_ªgi°î_öfo
(&
sô_öfo_›s
);

619 
	}
}

621 
__exô
 
	$sô_exô
()

623 
	`π∆_lök_uƒegi°î_öfo
(&
sô_öfo_›s
);

624 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/link/veth.c

25 
	~<√éök-¥iv©e/√éök.h
>

26 
	~<√éök/√éök.h
>

27 
	~<√éök/©å.h
>

28 
	~<√éök/utûs.h
>

29 
	~<√éök/obje˘.h
>

30 
	~<√éök/rouã/π∆.h
>

31 
	~<√éök-¥iv©e/rouã/lök/≠i.h
>

32 
	~<√éök/rouã/lök/vëh.h
>

34 
	~<löux/if_lök.h
>

36 
∆a_pﬁicy
 
	gvëh_pﬁicy
[
VETH_INFO_MAX
+1] = {

37 [
VETH_INFO_PEER
] = { .
möÀn
 = (
iföfomsg
) },

40 
	$vëh_∑r£
(
π∆_lök
 *
lök
, 
∆©å
 *
d©a
,

41 
∆©å
 *
x°©s
)

43 
∆©å
 *
tb
[
VETH_INFO_MAX
+1];

44 
∆©å
 *
≥î_tb
[
IFLA_MAX
 + 1];

45 
π∆_lök
 *
≥î
 = 
lök
->
l_öfo
;

46 
îr
;

48 
	`NL_DBG
(3, "Parsing vethÜink info");

50 i‡((
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
VETH_INFO_MAX
, 
d©a
, 
vëh_pﬁicy
)) < 0)

51 
îrout
;

53 i‡(
tb
[
VETH_INFO_PEER
]) {

54 
∆©å
 *
∆a_≥î
;

55 
iföfomsg
 *
ifi
;

57 
∆a_≥î
 = 
tb
[
VETH_INFO_PEER
];

58 
ifi
 = 
	`∆a_d©a
(
∆a_≥î
);

60 
≥î
->
l_Ámûy
 = 
ifi
->
ifi_Ámûy
;

61 
≥î
->
l_¨±y≥
 = 
ifi
->
ifi_ty≥
;

62 
≥î
->
l_ödex
 = 
ifi
->
ifi_ödex
;

63 
≥î
->
l_Êags
 = 
ifi
->
ifi_Êags
;

64 
≥î
->
l_ch™ge
 = 
ifi
->
ifi_ch™ge
;

65 
îr
 = 
	`∆a_∑r£
(
≥î_tb
, 
IFLA_MAX
,

66 
	`∆a_d©a
(
∆a_≥î
Ë+ (
iföfomsg
),

67 
	`∆a_Àn
(
∆a_≥î
Ë- (
iföfomsg
),

68 
π _lök_pﬁicy
);

69 i‡(
îr
 < 0)

70 
îrout
;

72 
îr
 = 
	`π∆_lök_öfo_∑r£
(
≥î
, 
≥î_tb
);

73 i‡(
îr
 < 0)

74 
îrout
;

77 
îr
 = 0;

79 
îrout
:

80  
îr
;

81 
	}
}

83 
	$vëh_dump_löe
(
π∆_lök
 *
lök
, 
∆_dump_∑øms
 *
p
)

85 
	}
}

87 
	$vëh_dump_dëaûs
(
π∆_lök
 *
lök
, 
∆_dump_∑øms
 *
p
)

89 
π∆_lök
 *
≥î
 = 
lök
->
l_öfo
;

90 *
«me
;

91 
«me
 = 
	`π∆_lök_gë_«me
(
≥î
);

92 
	`∆_dump
(
p
, "Öeer ");

93 i‡(
«me
)

94 
	`∆_dump_löe
(
p
, "%s\n", 
«me
);

96 
	`∆_dump_löe
(
p
, "%u\n", 
≥î
->
l_ödex
);

97 
	}
}

99 
	$vëh_˛⁄e
(
π∆_lök
 *
d°
, π∆_lök *
§c
)

101 
π∆_lök
 *
d°_≥î
 = 
NULL
, *
§c_≥î
 = 
§c
->
l_öfo
;

105 i‡(
§c_≥î
) {

106 
§c_≥î
->
l_öfo
 = 
NULL
;

107 
d°_≥î
 = (
π∆_lök
 *)
	`∆_obje˘_˛⁄e
(
	`OBJ_CAST
(
§c_≥î
));

108 i‡(!
d°_≥î
)

109  -
NLE_NOMEM
;

110 
§c_≥î
->
l_öfo
 = 
§c
;

111 
d°_≥î
->
l_öfo
 = 
d°
;

113 
d°
->
l_öfo
 = 
d°_≥î
;

115 
	}
}

117 
	$vëh_put_©ås
(
∆_msg
 *
msg
, 
π∆_lök
 *
lök
)

119 
π∆_lök
 *
≥î
 = 
lök
->
l_öfo
;

120 
iföfomsg
 
ifi
;

121 
∆©å
 *
d©a
, *
öfo_≥î
;

123 
	`mem£t
(&
ifi
, 0,  ifi);

124 
ifi
.
ifi_Ámûy
 = 
≥î
->
l_Ámûy
;

125 
ifi
.
ifi_ty≥
 = 
≥î
->
l_¨±y≥
;

126 
ifi
.
ifi_ödex
 = 
≥î
->
l_ödex
;

127 
ifi
.
ifi_Êags
 = 
≥î
->
l_Êags
;

128 
ifi
.
ifi_ch™ge
 = 
≥î
->
l_ch™ge
;

130 i‡(!(
d©a
 = 
	`∆a_√°_°¨t
(
msg
, 
IFLA_INFO_DATA
)))

131  -
NLE_MSGSIZE
;

132 i‡(!(
öfo_≥î
 = 
	`∆a_√°_°¨t
(
msg
, 
VETH_INFO_PEER
)))

133  -
NLE_MSGSIZE
;

134 i‡(
	`∆msg_≠≥nd
(
msg
, &
ifi
, (ifi), 
NLMSG_ALIGNTO
) < 0)

135  -
NLE_MSGSIZE
;

136 
	`π∆_lök_fûl_öfo
(
msg
, 
≥î
);

137 
	`∆a_√°_íd
(
msg
, 
öfo_≥î
);

138 
	`∆a_√°_íd
(
msg
, 
d©a
);

141 
	}
}

143 
	$vëh_Æloc
(
π∆_lök
 *
lök
)

145 
π∆_lök
 *
≥î
;

146 
îr
;

149 i‡(
lök
->
l_öfo
)

152 i‡(!(
≥î
 = 
	`π∆_lök_Æloc
()))

153  -
NLE_NOMEM
;

158 
≥î
->
l_öfo
 = 
lök
;

159 i‡((
îr
 = 
	`π∆_lök_£t_ty≥
(
≥î
, "veth")) < 0) {

160 
	`π∆_lök_put
(
≥î
);

161  
îr
;

164 
lök
->
l_öfo
 = 
≥î
;

166 
	}
}

168 
	$vëh_‰ì
(
π∆_lök
 *
lök
)

170 
π∆_lök
 *
≥î
 = 
lök
->
l_öfo
;

171 i‡(
≥î
) {

172 
lök
->
l_öfo
 = 
NULL
;

174 
≥î
->
l_öfo
 = 
NULL
;

175 
	`π∆_lök_put
(
≥î
);

178 
	}
}

180 
π∆_lök_öfo_›s
 
	gvëh_öfo_›s
 = {

181 .
io_«me
 = "veth",

182 .
	gio_∑r£
 = 
vëh_∑r£
,

183 .
	gio_dump
 = {

184 [
NL_DUMP_LINE
] = 
vëh_dump_löe
,

185 [
NL_DUMP_DETAILS
] = 
vëh_dump_dëaûs
,

187 .
	gio_Æloc
 = 
vëh_Æloc
,

188 .
	gio_˛⁄e
 = 
vëh_˛⁄e
,

189 .
	gio_put_©ås
 = 
vëh_put_©ås
,

190 .
	gio_‰ì
 = 
vëh_‰ì
,

195 
	#IS_VETH_LINK_ASSERT
(
lök
) \

196 i‡((
lök
)->
l_öfo_›s
 !&
vëh_öfo_›s
) { \

197 
	`APPBUG
("Link isÇotá vethÜink. setÅype \"veth\" first."); \

198  
NULL
; \

199 }

	)

212 
π∆_lök
 *
	$π∆_lök_vëh_Æloc
()

214 
π∆_lök
 *
lök
;

215 
îr
;

217 i‡(!(
lök
 = 
	`π∆_lök_Æloc
()))

218  
NULL
;

219 i‡((
îr
 = 
	`π∆_lök_£t_ty≥
(
lök
, "veth")) < 0) {

220 
	`π∆_lök_put
(
lök
);

221  
NULL
;

224  
lök
;

225 
	}
}

232 
π∆_lök
 *
	$π∆_lök_vëh_gë_≥î
(
π∆_lök
 *
lök
)

234 
	`IS_VETH_LINK_ASSERT
(
lök
);

235 
	`∆_obje˘_gë
(
	`OBJ_CAST
(
lök
->
l_öfo
));

236  
lök
->
l_öfo
;

237 
	}
}

243 
	$π∆_lök_vëh_ªÀa£
(
π∆_lök
 *
lök
)

245 
	`vëh_‰ì
(
lök
);

246 
	`π∆_lök_put
(
lök
);

247 
	}
}

255 
	$π∆_lök_is_vëh
(
π∆_lök
 *
lök
)

257  
lök
->
l_öfo_›s
 && !
	`°rcmp
÷ök->l_öfo_›s->
io_«me
, "veth");

258 
	}
}

274 
	$π∆_lök_vëh_add
(
∆_sock
 *
sock
, c⁄° *
«me
,

275 c⁄° *
≥î_«me
, 
pid_t
 
pid
)

277 
π∆_lök
 *
lök
, *
≥î
;

278 
îr
 = -
NLE_NOMEM
;

280 i‡(!(
lök
 = 
	`π∆_lök_vëh_Æloc
()))

281  -
NLE_NOMEM
;

282 
≥î
 = 
lök
->
l_öfo
;

284 i‡(
«me
 && 
≥î_«me
) {

285 
	`π∆_lök_£t_«me
(
lök
, 
«me
);

286 
	`π∆_lök_£t_«me
(
≥î
, 
≥î_«me
);

289 
	`π∆_lök_£t_ns_pid
(
≥î
, 
pid
);

290 
îr
 = 
	`π∆_lök_add
(
sock
, 
lök
, 
NLM_F_CREATE
 | 
NLM_F_EXCL
);

292 
	`π∆_lök_put
(
lök
);

293  
îr
;

294 
	}
}

298 
__öô
 
	$vëh_öô
()

300 
	`π∆_lök_ªgi°î_öfo
(&
vëh_öfo_›s
);

301 
	}
}

303 
__exô
 
	$vëh_exô
()

305 
	`π∆_lök_uƒegi°î_öfo
(&
vëh_öfo_›s
);

306 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/link/vlan.c

25 
	~<√éök-¥iv©e/√éök.h
>

26 
	~<√éök/√éök.h
>

27 
	~<√éök/©å.h
>

28 
	~<√éök/utûs.h
>

29 
	~<√éök/obje˘.h
>

30 
	~<√éök/rouã/π∆.h
>

31 
	~<√éök-¥iv©e/rouã/lök/≠i.h
>

32 
	~<√éök/rouã/lök/vœn.h
>

34 
	~<löux/if_vœn.h
>

37 
	#VLAN_HAS_ID
 (1<<0)

	)

38 
	#VLAN_HAS_FLAGS
 (1<<1)

	)

39 
	#VLAN_HAS_INGRESS_QOS
 (1<<2)

	)

40 
	#VLAN_HAS_EGRESS_QOS
 (1<<3)

	)

41 
	#VLAN_HAS_PROTOCOL
 (1<<4)

	)

43 
	svœn_öfo


45 
uöt16_t
 
	mvi_vœn_id
;

46 
uöt16_t
 
	mvi_¥Ÿocﬁ
;

47 
uöt32_t
 
	mvi_Êags
;

48 
uöt32_t
 
	mvi_Êags_mask
;

49 
uöt32_t
 
	mvi_ögªss_qos
[
VLAN_PRIO_MAX
+1];

50 
uöt32_t
 
	mvi_√gªss
;

51 
uöt32_t
 
	mvi_egªss_size
;

52 
vœn_m≠
 * 
	mvi_egªss_qos
;

53 
uöt32_t
 
	mvi_mask
;

58 
∆a_pﬁicy
 
	gvœn_pﬁicy
[
IFLA_VLAN_MAX
+1] = {

59 [
IFLA_VLAN_ID
] = { .
ty≥
 = 
NLA_U16
 },

60 [
IFLA_VLAN_FLAGS
] = { .
möÀn
 = (
iÊa_vœn_Êags
) },

61 [
IFLA_VLAN_INGRESS_QOS
] = { .
ty≥
 = 
NLA_NESTED
 },

62 [
IFLA_VLAN_EGRESS_QOS
] = { .
ty≥
 = 
NLA_NESTED
 },

63 [
IFLA_VLAN_PROTOCOL
] = { .
ty≥
 = 
NLA_U16
 },

66 
	$vœn_Æloc
(
π∆_lök
 *
lök
)

68 
vœn_öfo
 *
vi
;

70 i‡((
vi
 = 
	`ˇŒoc
(1, (*vi))Ë=
NULL
)

71  -
NLE_NOMEM
;

73 
lök
->
l_öfo
 = 
vi
;

76 
	}
}

78 
	$vœn_∑r£
(
π∆_lök
 *
lök
, 
∆©å
 *
d©a
,

79 
∆©å
 *
x°©s
)

81 
∆©å
 *
tb
[
IFLA_VLAN_MAX
+1];

82 
vœn_öfo
 *
vi
;

83 
îr
;

85 
	`NL_DBG
(3, "Parsing VLANÜink info");

87 i‡((
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
IFLA_VLAN_MAX
, 
d©a
, 
vœn_pﬁicy
)) < 0)

88 
îrout
;

90 i‡((
îr
 = 
	`vœn_Æloc
(
lök
)) < 0)

91 
îrout
;

93 
vi
 = 
lök
->
l_öfo
;

95 i‡(
tb
[
IFLA_VLAN_ID
]) {

96 
vi
->
vi_vœn_id
 = 
	`∆a_gë_u16
(
tb
[
IFLA_VLAN_ID
]);

97 
vi
->
vi_mask
 |
VLAN_HAS_ID
;

100 i‡(
tb
[
IFLA_VLAN_PROTOCOL
]) {

101 
vi
->
vi_¥Ÿocﬁ
 = 
	`∆a_gë_u16
(
tb
[
IFLA_VLAN_PROTOCOL
]);

102 
vi
->
vi_mask
 |
VLAN_HAS_PROTOCOL
;

105 i‡(
tb
[
IFLA_VLAN_FLAGS
]) {

106 
iÊa_vœn_Êags
 
Êags
;

107 
	`∆a_mem˝y
(&
Êags
, 
tb
[
IFLA_VLAN_FLAGS
], (flags));

109 
vi
->
vi_Êags
 = 
Êags
.flags;

110 
vi
->
vi_mask
 |
VLAN_HAS_FLAGS
;

113 i‡(
tb
[
IFLA_VLAN_INGRESS_QOS
]) {

114 
iÊa_vœn_qos_m≠pög
 *
m≠
;

115 
∆©å
 *
∆a
;

116 
ªmaöög
;

118 
	`mem£t
(
vi
->
vi_ögªss_qos
, 0, (vi->vi_ingress_qos));

120 
	`∆a_f‹_óch_√°ed
(
∆a
, 
tb
[
IFLA_VLAN_INGRESS_QOS
], 
ªmaöög
) {

121 i‡(
	`∆a_Àn
(
∆a
Ë< (*
m≠
))

122  -
NLE_INVAL
;

124 
m≠
 = 
	`∆a_d©a
(
∆a
);

125 i‡(
m≠
->
‰om
 > 
VLAN_PRIO_MAX
) {

126  -
NLE_INVAL
;

129 
vi
->
vi_ögªss_qos
[
m≠
->
‰om
] = m≠->
to
;

132 
vi
->
vi_mask
 |
VLAN_HAS_INGRESS_QOS
;

135 i‡(
tb
[
IFLA_VLAN_EGRESS_QOS
]) {

136 
iÊa_vœn_qos_m≠pög
 *
m≠
;

137 
∆©å
 *
∆a
;

138 
ªmaöög
, 
i
 = 0;

140 
	`∆a_f‹_óch_√°ed
(
∆a
, 
tb
[
IFLA_VLAN_EGRESS_QOS
], 
ªmaöög
) {

141 i‡(
	`∆a_Àn
(
∆a
Ë< (*
m≠
))

142  -
NLE_INVAL
;

143 
i
++;

147 
vi
->
vi_egªss_size
 = (
i
 + 32) & ~31;

148 
vi
->
vi_egªss_qos
 = 
	`ˇŒoc
(vi->
vi_egªss_size
, (*vi->vi_egress_qos));

149 i‡(
vi
->
vi_egªss_qos
 =
NULL
)

150  -
NLE_NOMEM
;

152 
i
 = 0;

153 
	`∆a_f‹_óch_√°ed
(
∆a
, 
tb
[
IFLA_VLAN_EGRESS_QOS
], 
ªmaöög
) {

154 
m≠
 = 
	`∆a_d©a
(
∆a
);

155 
	`NL_DBG
(4, "AssignögÉgªs†qo†m≠pög %d\n", 
i
);

156 
vi
->
vi_egªss_qos
[
i
].
vm_‰om
 = 
m≠
->
‰om
;

157 
vi
->
vi_egªss_qos
[
i
++].
vm_to
 = 
m≠
->
to
;

160 
vi
->
vi_√gªss
 = 
i
;

161 
vi
->
vi_mask
 |
VLAN_HAS_EGRESS_QOS
;

164 
îr
 = 0;

165 
îrout
:

166  
îr
;

167 
	}
}

169 
	$vœn_‰ì
(
π∆_lök
 *
lök
)

171 
vœn_öfo
 *
vi
 = 
lök
->
l_öfo
;

173 i‡(
vi
) {

174 
	`‰ì
(
vi
->
vi_egªss_qos
);

175 
vi
->
vi_egªss_qos
 = 
NULL
;

178 
	`‰ì
(
vi
);

179 
lök
->
l_öfo
 = 
NULL
;

180 
	}
}

182 
	$vœn_dump_löe
(
π∆_lök
 *
lök
, 
∆_dump_∑øms
 *
p
)

184 
vœn_öfo
 *
vi
 = 
lök
->
l_öfo
;

186 
	`∆_dump
(
p
, "vœn-id %d", 
vi
->
vi_vœn_id
);

187 
	}
}

189 
	$vœn_dump_dëaûs
(
π∆_lök
 *
lök
, 
∆_dump_∑øms
 *
p
)

191 
vœn_öfo
 *
vi
 = 
lök
->
l_öfo
;

192 
¥öãd
;

193 
uöt32_t
 
i
;

194 
buf
[64];

196 
	`π∆_lök_vœn_Êags2°r
(
vi
->
vi_Êags
, 
buf
, (buf));

197 
	`∆_dump_löe
(
p
, " vœn-öfÿid %d <%s>", 
vi
->
vi_vœn_id
, 
buf
);

199 i‡(
vi
->
vi_mask
 & 
VLAN_HAS_PROTOCOL
)

200 
	`∆_dump_löe
(
p
, " vœ¿¥Ÿocﬁ <%d>", 
vi
->
vi_¥Ÿocﬁ
);

202 
	`∆_dump
(
p
, "\n");

204 i‡(
vi
->
vi_mask
 & 
VLAN_HAS_INGRESS_QOS
) {

205 
	`∆_dump_löe
(
p
,

207 
i
 = 0, 
¥öãd
 = 0; i <
VLAN_PRIO_MAX
; i++) {

208 i‡(
vi
->
vi_ögªss_qos
[
i
]) {

209 i‡(
¥öãd
 == 0)

210 
	`∆_dump_löe
(
p
, " ");

211 
	`∆_dump
(
p
, "%x -> %#08x, ",

212 
i
, 
vi
->
vi_ögªss_qos
[i]);

213 i‡(
¥öãd
++ == 3) {

214 
	`∆_dump
(
p
, "\n");

215 
¥öãd
 = 0;

220 i‡(
¥öãd
 > 0 &&Örinted != 4)

221 
	`∆_dump
(
p
, "\n");

224 i‡(
vi
->
vi_mask
 & 
VLAN_HAS_EGRESS_QOS
) {

225 
	`∆_dump_löe
(
p
,

227 
i
 = 0, 
¥öãd
 = 0; i < 
vi
->
vi_√gªss
; i++) {

228 i‡(
¥öãd
 == 0)

229 
	`∆_dump_löe
(
p
, " ");

230 
	`∆_dump
(
p
, "%#08x -> %x, ",

231 
vi
->
vi_egªss_qos
[
i
].
vm_‰om
,

232 
vi
->
vi_egªss_qos
[
i
].
vm_to
);

233 i‡(
¥öãd
++ == 3) {

234 
	`∆_dump
(
p
, "\n");

235 
¥öãd
 = 0;

239 i‡(
¥öãd
 > 0 &&Örinted != 4)

240 
	`∆_dump
(
p
, "\n");

242 
	}
}

244 
	$vœn_˛⁄e
(
π∆_lök
 *
d°
, π∆_lök *
§c
)

246 
vœn_öfo
 *
vd°
, *
v§c
 = 
§c
->
l_öfo
;

247 
îr
;

249 
d°
->
l_öfo
 = 
NULL
;

250 i‡((
îr
 = 
	`π∆_lök_£t_ty≥
(
d°
, "vlan")) < 0)

251  
îr
;

252 
vd°
 = 
d°
->
l_öfo
;

254 
vd°
->
vi_egªss_qos
 = 
	`ˇŒoc
(
v§c
->
vi_egªss_size
,

255 (
vœn_m≠
));

256 i‡(!
vd°
->
vi_egªss_qos
)

257  -
NLE_NOMEM
;

259 
	`mem˝y
(
vd°
->
vi_egªss_qos
, 
v§c
->vi_egress_qos,

260 
v§c
->
vi_egªss_size
 * (
vœn_m≠
));

263 
	}
}

265 
	$vœn_put_©ås
(
∆_msg
 *
msg
, 
π∆_lök
 *
lök
)

267 
vœn_öfo
 *
vi
 = 
lök
->
l_öfo
;

268 
∆©å
 *
d©a
;

270 i‡(!(
d©a
 = 
	`∆a_√°_°¨t
(
msg
, 
IFLA_INFO_DATA
)))

271  -
NLE_MSGSIZE
;

273 i‡(
vi
->
vi_mask
 & 
VLAN_HAS_ID
)

274 
	`NLA_PUT_U16
(
msg
, 
IFLA_VLAN_ID
, 
vi
->
vi_vœn_id
);

276 i‡(
vi
->
vi_mask
 & 
VLAN_HAS_FLAGS
) {

277 
iÊa_vœn_Êags
 
Êags
 = {

278 .
Êags
 = 
vi
->
vi_Êags
,

279 .
mask
 = 
vi
->
vi_Êags_mask
,

282 
	`NLA_PUT
(
msg
, 
IFLA_VLAN_FLAGS
, (
Êags
), &flags);

285 i‡(
vi
->
vi_mask
 & 
VLAN_HAS_INGRESS_QOS
) {

286 
iÊa_vœn_qos_m≠pög
 
m≠
;

287 
∆©å
 *
qos
;

288 
i
;

290 i‡(!(
qos
 = 
	`∆a_√°_°¨t
(
msg
, 
IFLA_VLAN_INGRESS_QOS
)))

291 
∆a_put_Áûuª
;

293 
i
 = 0; i <
VLAN_PRIO_MAX
; i++) {

294 i‡(
vi
->
vi_ögªss_qos
[
i
]) {

295 
m≠
.
‰om
 = 
i
;

296 
m≠
.
to
 = 
vi
->
vi_ögªss_qos
[
i
];

298 
	`NLA_PUT
(
msg
, 
i
, (
m≠
), &map);

302 
	`∆a_√°_íd
(
msg
, 
qos
);

305 i‡(
vi
->
vi_mask
 & 
VLAN_HAS_EGRESS_QOS
) {

306 
iÊa_vœn_qos_m≠pög
 
m≠
;

307 
∆©å
 *
qos
;

308 
uöt32_t
 
i
;

310 i‡(!(
qos
 = 
	`∆a_√°_°¨t
(
msg
, 
IFLA_VLAN_EGRESS_QOS
)))

311 
∆a_put_Áûuª
;

313 
i
 = 0; i < 
vi
->
vi_√gªss
; i++) {

314 
m≠
.
‰om
 = 
vi
->
vi_egªss_qos
[
i
].
vm_‰om
;

315 
m≠
.
to
 = 
vi
->
vi_egªss_qos
[
i
].
vm_to
;

317 
	`NLA_PUT
(
msg
, 
i
, (
m≠
), &map);

320 
	`∆a_√°_íd
(
msg
, 
qos
);

323 
	`∆a_√°_íd
(
msg
, 
d©a
);

325 
∆a_put_Áûuª
:

328 
	}
}

330 
π∆_lök_öfo_›s
 
	gvœn_öfo_›s
 = {

331 .
io_«me
 = "vlan",

332 .
	gio_Æloc
 = 
vœn_Æloc
,

333 .
	gio_∑r£
 = 
vœn_∑r£
,

334 .
	gio_dump
 = {

335 [
NL_DUMP_LINE
] = 
vœn_dump_löe
,

336 [
NL_DUMP_DETAILS
] = 
vœn_dump_dëaûs
,

338 .
	gio_˛⁄e
 = 
vœn_˛⁄e
,

339 .
	gio_put_©ås
 = 
vœn_put_©ås
,

340 .
	gio_‰ì
 = 
vœn_‰ì
,

344 
	#IS_VLAN_LINK_ASSERT
(
lök
) \

345 i‡((
lök
)->
l_öfo_›s
 !&
vœn_öfo_›s
) { \

346 
	`APPBUG
("Link isÇotá vlanÜink. setÅype \"vlan\" first."); \

347  -
NLE_OPNOTSUPP
; \

348 }

	)

361 
π∆_lök
 *
	$π∆_lök_vœn_Æloc
()

363 
π∆_lök
 *
lök
;

364 
îr
;

366 i‡(!(
lök
 = 
	`π∆_lök_Æloc
()))

367  
NULL
;

369 i‡((
îr
 = 
	`π∆_lök_£t_ty≥
(
lök
, "vlan")) < 0) {

370 
	`π∆_lök_put
(
lök
);

371  
NULL
;

374  
lök
;

375 
	}
}

383 
	$π∆_lök_is_vœn
(
π∆_lök
 *
lök
)

385  
lök
->
l_öfo_›s
 && !
	`°rcmp
÷ök->l_öfo_›s->
io_«me
, "vlan");

386 
	}
}

395 
	$π∆_lök_vœn_£t_id
(
π∆_lök
 *
lök
, 
uöt16_t
 
id
)

397 
vœn_öfo
 *
vi
 = 
lök
->
l_öfo
;

399 
	`IS_VLAN_LINK_ASSERT
(
lök
);

401 
vi
->
vi_vœn_id
 = 
id
;

402 
vi
->
vi_mask
 |
VLAN_HAS_ID
;

405 
	}
}

413 
	$π∆_lök_vœn_gë_id
(
π∆_lök
 *
lök
)

415 
vœn_öfo
 *
vi
 = 
lök
->
l_öfo
;

417 
	`IS_VLAN_LINK_ASSERT
(
lök
);

419 i‡(
vi
->
vi_mask
 & 
VLAN_HAS_ID
)

420  
vi
->
vi_vœn_id
;

423 
	}
}

432 
	$π∆_lök_vœn_£t_¥Ÿocﬁ
(
π∆_lök
 *
lök
, 
uöt16_t
 
¥Ÿocﬁ
)

434 
vœn_öfo
 *
vi
 = 
lök
->
l_öfo
;

436 
	`IS_VLAN_LINK_ASSERT
(
lök
);

438 
vi
->
vi_¥Ÿocﬁ
 = 
¥Ÿocﬁ
;

439 
vi
->
vi_mask
 |
VLAN_HAS_PROTOCOL
;

442 
	}
}

450 
	$π∆_lök_vœn_gë_¥Ÿocﬁ
(
π∆_lök
 *
lök
)

452 
vœn_öfo
 *
vi
 = 
lök
->
l_öfo
;

454 
	`IS_VLAN_LINK_ASSERT
(
lök
);

456 i‡(
vi
->
vi_mask
 & 
VLAN_HAS_PROTOCOL
)

457  
vi
->
vi_¥Ÿocﬁ
;

460 
	}
}

469 
	$π∆_lök_vœn_£t_Êags
(
π∆_lök
 *
lök
, 
Êags
)

471 
vœn_öfo
 *
vi
 = 
lök
->
l_öfo
;

473 
	`IS_VLAN_LINK_ASSERT
(
lök
);

475 
vi
->
vi_Êags_mask
 |
Êags
;

476 
vi
->
vi_Êags
 |
Êags
;

477 
vi
->
vi_mask
 |
VLAN_HAS_FLAGS
;

480 
	}
}

489 
	$π∆_lök_vœn_un£t_Êags
(
π∆_lök
 *
lök
, 
Êags
)

491 
vœn_öfo
 *
vi
 = 
lök
->
l_öfo
;

493 
	`IS_VLAN_LINK_ASSERT
(
lök
);

495 
vi
->
vi_Êags_mask
 |
Êags
;

496 
vi
->
vi_Êags
 &~
Êags
;

497 
vi
->
vi_mask
 |
VLAN_HAS_FLAGS
;

500 
	}
}

508 
	$π∆_lök_vœn_gë_Êags
(
π∆_lök
 *
lök
)

510 
vœn_öfo
 *
vi
 = 
lök
->
l_öfo
;

512 
	`IS_VLAN_LINK_ASSERT
(
lök
);

514  
vi
->
vi_Êags
;

515 
	}
}

524 
	$π∆_lök_vœn_£t_ögªss_m≠
(
π∆_lök
 *
lök
, 
‰om
,

525 
uöt32_t
 
to
)

527 
vœn_öfo
 *
vi
 = 
lök
->
l_öfo
;

529 
	`IS_VLAN_LINK_ASSERT
(
lök
);

531 i‡(
‰om
 < 0 || from > 
VLAN_PRIO_MAX
)

532  -
NLE_INVAL
;

534 
vi
->
vi_ögªss_qos
[
‰om
] = 
to
;

535 
vi
->
vi_mask
 |
VLAN_HAS_INGRESS_QOS
;

538 
	}
}

540 
uöt32_t
 *
	$π∆_lök_vœn_gë_ögªss_m≠
(
π∆_lök
 *
lök
)

542 
vœn_öfo
 *
vi
 = 
lök
->
l_öfo
;

544 i‡(
lök
->
l_öfo_›s
 !&
vœn_öfo_›s
 || !link->l_info_ops)

545  
NULL
;

547 i‡(
vi
->
vi_mask
 & 
VLAN_HAS_INGRESS_QOS
)

548  
vi
->
vi_ögªss_qos
;

550  
NULL
;

551 
	}
}

553 
	$π∆_lök_vœn_£t_egªss_m≠
(
π∆_lök
 *
lök
, 
uöt32_t
 
‰om
, 
to
)

555 
vœn_öfo
 *
vi
 = 
lök
->
l_öfo
;

557 i‡(
lök
->
l_öfo_›s
 !&
vœn_öfo_›s
 || !link->l_info_ops)

558  -
NLE_OPNOTSUPP
;

560 i‡(
to
 < 0 ||Åÿ> 
VLAN_PRIO_MAX
)

561  -
NLE_INVAL
;

563 i‡(
vi
->
vi_√gªss
 >vi->
vi_egªss_size
) {

564 
√w_size
 = 
vi
->
vi_egªss_size
 + 32;

565 *
±r
;

567 
±r
 = 
	`ªÆloc
(
vi
->
vi_egªss_qos
, 
√w_size
);

568 i‡(!
±r
)

569  -
NLE_NOMEM
;

571 
vi
->
vi_egªss_qos
 = 
±r
;

572 
vi
->
vi_egªss_size
 = 
√w_size
;

575 
vi
->
vi_egªss_qos
[vi->
vi_√gªss
].
vm_‰om
 = 
‰om
;

576 
vi
->
vi_egªss_qos
[vi->
vi_√gªss
].
vm_to
 = 
to
;

577 
vi
->
vi_√gªss
++;

578 
vi
->
vi_mask
 |
VLAN_HAS_EGRESS_QOS
;

581 
	}
}

583 
vœn_m≠
 *
	$π∆_lök_vœn_gë_egªss_m≠
(
π∆_lök
 *
lök
,

584 *
√gªss
)

586 
vœn_öfo
 *
vi
 = 
lök
->
l_öfo
;

588 i‡(
lök
->
l_öfo_›s
 !&
vœn_öfo_›s
 || !link->l_info_ops)

589  
NULL
;

591 i‡(
√gªss
 =
NULL
)

592  
NULL
;

594 i‡(
vi
->
vi_mask
 & 
VLAN_HAS_EGRESS_QOS
) {

595 *
√gªss
 = 
vi
->
vi_√gªss
;

596  
vi
->
vi_egªss_qos
;

598 *
√gªss
 = 0;

599  
NULL
;

601 
	}
}

605 c⁄° 
å™s_tbl
 
	gvœn_Êags
[] = {

606 
__ADD
(
VLAN_FLAG_REORDER_HDR
, 
ª‹dî_hdr
)

614 *
	$π∆_lök_vœn_Êags2°r
(
Êags
, *
buf
, 
size_t
 
Àn
)

616  
	`__Êags2°r
(
Êags
, 
buf
, 
Àn
, 
vœn_Êags
, 
	`ARRAY_SIZE
(vlan_flags));

617 
	}
}

619 
	$π∆_lök_vœn_°r2Êags
(c⁄° *
«me
)

621  
	`__°r2Êags
(
«me
, 
vœn_Êags
, 
	`ARRAY_SIZE
(vlan_flags));

622 
	}
}

627 
__öô
 
	$vœn_öô
()

629 
	`π∆_lök_ªgi°î_öfo
(&
vœn_öfo_›s
);

630 
	}
}

632 
__exô
 
	$vœn_exô
()

634 
	`π∆_lök_uƒegi°î_öfo
(&
vœn_öfo_›s
);

635 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/link/vxlan.c

25 
	~<√éök-¥iv©e/√éök.h
>

26 
	~<√éök/√éök.h
>

27 
	~<√éök/©å.h
>

28 
	~<√éök/utûs.h
>

29 
	~<√éök/obje˘.h
>

30 
	~<√éök/rouã/π∆.h
>

31 
	~<√éök-¥iv©e/rouã/lök/≠i.h
>

32 
	~<√éök/rouã/lök/vxœn.h
>

34 
	~<löux/if_lök.h
>

37 
	#VXLAN_HAS_ID
 (1<<0)

	)

38 
	#VXLAN_HAS_GROUP
 (1<<1)

	)

39 
	#VXLAN_HAS_LINK
 (1<<2)

	)

40 
	#VXLAN_HAS_LOCAL
 (1<<3)

	)

41 
	#VXLAN_HAS_TTL
 (1<<4)

	)

42 
	#VXLAN_HAS_TOS
 (1<<5)

	)

43 
	#VXLAN_HAS_LEARNING
 (1<<6)

	)

44 
	#VXLAN_HAS_AGEING
 (1<<7)

	)

45 
	#VXLAN_HAS_LIMIT
 (1<<8)

	)

46 
	#VXLAN_HAS_PORT_RANGE
 (1<<9)

	)

47 
	#VXLAN_HAS_PROXY
 (1<<10)

	)

48 
	#VXLAN_HAS_RSC
 (1<<11)

	)

49 
	#VXLAN_HAS_L2MISS
 (1<<12)

	)

50 
	#VXLAN_HAS_L3MISS
 (1<<13)

	)

52 
	svxœn_öfo


54 
uöt32_t
 
	mvxi_id
;

55 
uöt32_t
 
	mvxi_group
;

56 
uöt32_t
 
	mvxi_lök
;

57 
uöt32_t
 
	mvxi_loˇl
;

58 
uöt8_t
 
	mvxi_âl
;

59 
uöt8_t
 
	mvxi_tos
;

60 
uöt8_t
 
	mvxi_À¨nög
;

61 
uöt32_t
 
	mvxi_ageög
;

62 
uöt32_t
 
	mvxi_limô
;

63 
iÊa_vxœn_p‹t_ønge
 
	mvxi_p‹t_ønge
;

64 
uöt8_t
 
	mvxi_¥oxy
;

65 
uöt8_t
 
	mvxi_rsc
;

66 
uöt8_t
 
	mvxi_l2miss
;

67 
uöt8_t
 
	mvxi_l3miss
;

68 
uöt32_t
 
	mvxi_mask
;

73 
∆a_pﬁicy
 
	gvxœn_pﬁicy
[
IFLA_VXLAN_MAX
+1] = {

74 [
IFLA_VXLAN_ID
] = { .
ty≥
 = 
NLA_U32
 },

75 [
IFLA_VXLAN_GROUP
] = { .
möÀn
 = (
uöt32_t
) },

76 [
IFLA_VXLAN_LINK
] = { .
ty≥
 = 
NLA_U32
 },

77 [
IFLA_VXLAN_LOCAL
] = { .
möÀn
 = (
uöt32_t
) },

78 [
IFLA_VXLAN_TTL
] = { .
ty≥
 = 
NLA_U8
 },

79 [
IFLA_VXLAN_TOS
] = { .
ty≥
 = 
NLA_U8
 },

80 [
IFLA_VXLAN_LEARNING
] = { .
ty≥
 = 
NLA_U8
 },

81 [
IFLA_VXLAN_AGEING
] = { .
ty≥
 = 
NLA_U32
 },

82 [
IFLA_VXLAN_LIMIT
] = { .
ty≥
 = 
NLA_U32
 },

83 [
IFLA_VXLAN_PORT_RANGE
] = { .
möÀn
 = (
iÊa_vxœn_p‹t_ønge
) },

84 [
IFLA_VXLAN_PROXY
] = { .
ty≥
 = 
NLA_U8
 },

85 [
IFLA_VXLAN_RSC
] = { .
ty≥
 = 
NLA_U8
 },

86 [
IFLA_VXLAN_L2MISS
] = { .
ty≥
 = 
NLA_U8
 },

87 [
IFLA_VXLAN_L3MISS
] = { .
ty≥
 = 
NLA_U8
 },

90 
	$vxœn_Æloc
(
π∆_lök
 *
lök
)

92 
vxœn_öfo
 *
vxi
;

94 i‡((
vxi
 = 
	`ˇŒoc
(1, (*vxi))Ë=
NULL
)

95  -
NLE_NOMEM
;

97 
lök
->
l_öfo
 = 
vxi
;

100 
	}
}

102 
	$vxœn_∑r£
(
π∆_lök
 *
lök
, 
∆©å
 *
d©a
,

103 
∆©å
 *
x°©s
)

105 
∆©å
 *
tb
[
IFLA_VXLAN_MAX
+1];

106 
vxœn_öfo
 *
vxi
;

107 
îr
;

109 
	`NL_DBG
(3, "Parsing VXLANÜink info");

111 i‡((
îr
 = 
	`∆a_∑r£_√°ed
(
tb
, 
IFLA_VXLAN_MAX
, 
d©a
, 
vxœn_pﬁicy
)) < 0)

112 
îrout
;

114 i‡((
îr
 = 
	`vxœn_Æloc
(
lök
)) < 0)

115 
îrout
;

117 
vxi
 = 
lök
->
l_öfo
;

119 i‡(
tb
[
IFLA_VXLAN_ID
]) {

120 
vxi
->
vxi_id
 = 
	`∆a_gë_u32
(
tb
[
IFLA_VXLAN_ID
]);

121 
vxi
->
vxi_mask
 |
VXLAN_HAS_ID
;

124 i‡(
tb
[
IFLA_VXLAN_GROUP
]) {

125 
	`∆a_mem˝y
(&
vxi
->
vxi_group
, 
tb
[
IFLA_VXLAN_GROUP
],

126 (
vxi
->
vxi_group
));

127 
vxi
->
vxi_mask
 |
VXLAN_HAS_GROUP
;

130 i‡(
tb
[
IFLA_VXLAN_LINK
]) {

131 
vxi
->
vxi_lök
 = 
	`∆a_gë_u32
(
tb
[
IFLA_VXLAN_LINK
]);

132 
vxi
->
vxi_mask
 |
VXLAN_HAS_LINK
;

135 i‡(
tb
[
IFLA_VXLAN_LOCAL
]) {

136 
	`∆a_mem˝y
(&
vxi
->
vxi_loˇl
, 
tb
[
IFLA_VXLAN_LOCAL
],

137 (
vxi
->
vxi_loˇl
));

138 
vxi
->
vxi_mask
 |
VXLAN_HAS_LOCAL
;

141 i‡(
tb
[
IFLA_VXLAN_TTL
]) {

142 
vxi
->
vxi_âl
 = 
	`∆a_gë_u8
(
tb
[
IFLA_VXLAN_TTL
]);

143 
vxi
->
vxi_mask
 |
VXLAN_HAS_TTL
;

146 i‡(
tb
[
IFLA_VXLAN_TOS
]) {

147 
vxi
->
vxi_tos
 = 
	`∆a_gë_u8
(
tb
[
IFLA_VXLAN_TOS
]);

148 
vxi
->
vxi_mask
 |
VXLAN_HAS_TOS
;

151 i‡(
tb
[
IFLA_VXLAN_LEARNING
]) {

152 
vxi
->
vxi_À¨nög
 = 
	`∆a_gë_u8
(
tb
[
IFLA_VXLAN_LEARNING
]);

153 
vxi
->
vxi_mask
 |
VXLAN_HAS_LEARNING
;

156 i‡(
tb
[
IFLA_VXLAN_AGEING
]) {

157 
vxi
->
vxi_ageög
 = 
	`∆a_gë_u32
(
tb
[
IFLA_VXLAN_AGEING
]);

158 
vxi
->
vxi_mask
 |
VXLAN_HAS_AGEING
;

161 i‡(
tb
[
IFLA_VXLAN_LIMIT
]) {

162 
vxi
->
vxi_limô
 = 
	`∆a_gë_u32
(
tb
[
IFLA_VXLAN_LIMIT
]);

163 
vxi
->
vxi_mask
 |
VXLAN_HAS_LIMIT
;

166 i‡(
tb
[
IFLA_VXLAN_PORT_RANGE
]) {

167 
	`∆a_mem˝y
(&
vxi
->
vxi_p‹t_ønge
, 
tb
[
IFLA_VXLAN_PORT_RANGE
],

168 (
vxi
->
vxi_p‹t_ønge
));

169 
vxi
->
vxi_mask
 |
VXLAN_HAS_PORT_RANGE
;

172 i‡(
tb
[
IFLA_VXLAN_PROXY
]) {

173 
vxi
->
vxi_¥oxy
 = 
	`∆a_gë_u8
(
tb
[
IFLA_VXLAN_PROXY
]);

174 
vxi
->
vxi_mask
 |
VXLAN_HAS_PROXY
;

177 i‡(
tb
[
IFLA_VXLAN_RSC
]) {

178 
vxi
->
vxi_rsc
 = 
	`∆a_gë_u8
(
tb
[
IFLA_VXLAN_RSC
]);

179 
vxi
->
vxi_mask
 |
VXLAN_HAS_RSC
;

182 i‡(
tb
[
IFLA_VXLAN_L2MISS
]) {

183 
vxi
->
vxi_l2miss
 = 
	`∆a_gë_u8
(
tb
[
IFLA_VXLAN_L2MISS
]);

184 
vxi
->
vxi_mask
 |
VXLAN_HAS_L2MISS
;

187 i‡(
tb
[
IFLA_VXLAN_L3MISS
]) {

188 
vxi
->
vxi_l3miss
 = 
	`∆a_gë_u8
(
tb
[
IFLA_VXLAN_L3MISS
]);

189 
vxi
->
vxi_mask
 |
VXLAN_HAS_L3MISS
;

192 
îr
 = 0;

194 
îrout
:

195  
îr
;

196 
	}
}

198 
	$vxœn_‰ì
(
π∆_lök
 *
lök
)

200 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

202 
	`‰ì
(
vxi
);

203 
lök
->
l_öfo
 = 
NULL
;

204 
	}
}

206 
	$vxœn_dump_löe
(
π∆_lök
 *
lök
, 
∆_dump_∑øms
 *
p
)

208 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

210 
	`∆_dump
(
p
, "vxœn-id %u", 
vxi
->
vxi_id
);

211 
	}
}

213 
	$vxœn_dump_dëaûs
(
π∆_lök
 *
lök
, 
∆_dump_∑øms
 *
p
)

215 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

216 *
«me
, 
addr
[
INET_ADDRSTRLEN
];

218 
	`∆_dump_löe
(
p
, " vxœn-id %u\n", 
vxi
->
vxi_id
);

220 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_GROUP
) {

221 
	`∆_dump
(
p
, " group ");

222 if(
	`öë_¡›
(
AF_INET
, &
vxi
->
vxi_group
, 
addr
, (addr)))

223 
	`∆_dump_löe
(
p
, "%s\n", 
addr
);

225 
	`∆_dump_löe
(
p
, "%#x\n", 
	`¡ohs
(
vxi
->
vxi_group
));

228 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_LINK
) {

229 
	`∆_dump
(
p
, "Üink ");

230 
«me
 = 
	`π∆_lök_gë_«me
(
lök
);

231 i‡(
«me
)

232 
	`∆_dump_löe
(
p
, "%s\n", 
«me
);

234 
	`∆_dump_löe
(
p
, "%u\n", 
vxi
->
vxi_lök
);

237 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_LOCAL
) {

238 
	`∆_dump
(
p
, "Üocal ");

239 if(
	`öë_¡›
(
AF_INET
, &
vxi
->
vxi_loˇl
, 
addr
, (addr)))

240 
	`∆_dump_löe
(
p
, "%s\n", 
addr
);

242 
	`∆_dump_löe
(
p
, "%#x\n", 
	`¡ohs
(
vxi
->
vxi_loˇl
));

245 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_TTL
) {

246 
	`∆_dump
(
p
, "Åtl ");

247 if(
vxi
->
vxi_âl
)

248 
	`∆_dump_löe
(
p
, "%u\n", 
vxi
->
vxi_âl
);

250 
	`∆_dump_löe
(
p
, "inherit\n");

253 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_TOS
) {

254 
	`∆_dump
(
p
, "Åos ");

255 i‡(
vxi
->
vxi_tos
 == 1)

256 
	`∆_dump_löe
(
p
, "öhîô\n", 
vxi
->
vxi_tos
);

258 
	`∆_dump_löe
(
p
, "%#x\n", 
vxi
->
vxi_tos
);

261 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_LEARNING
) {

262 
	`∆_dump
(
p
, "Üearning ");

263 i‡(
vxi
->
vxi_À¨nög
)

264 
	`∆_dump_löe
(
p
, "íabÀd (%#x)\n", 
vxi
->
vxi_À¨nög
);

266 
	`∆_dump_löe
(
p
, "disabled\n");

269 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_AGEING
) {

270 
	`∆_dump
(
p
, "ágeing ");

271 i‡(
vxi
->
vxi_ageög
)

272 
	`∆_dump_löe
(
p
, "%u sec⁄ds\n", 
vxi
->
vxi_ageög
);

274 
	`∆_dump_löe
(
p
, "disabled\n");

277 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_LIMIT
) {

278 
	`∆_dump
(
p
, "Üimit ");

279 i‡(
vxi
->
vxi_limô
)

280 
	`∆_dump_löe
(
p
, "%u\n", 
vxi
->
vxi_limô
);

282 
	`∆_dump_löe
(
p
, "unlimited\n");

285 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_PORT_RANGE
)

286 
	`∆_dump_löe
(
p
, "ÖortÑange %u - %u\n",

287 
	`¡ohs
(
vxi
->
vxi_p‹t_ønge
.
low
),

288 
	`¡ohs
(
vxi
->
vxi_p‹t_ønge
.
high
));

290 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_PROXY
) {

291 
	`∆_dump
(
p
, "Öroxy ");

292 i‡(
vxi
->
vxi_¥oxy
)

293 
	`∆_dump_löe
(
p
, "íabÀd (%#x)\n", 
vxi
->
vxi_¥oxy
);

295 
	`∆_dump_löe
(
p
, "disabled\n");

298 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_RSC
) {

299 
	`∆_dump
(
p
, "Ñsc ");

300 i‡(
vxi
->
vxi_rsc
)

301 
	`∆_dump_löe
(
p
, "íabÀd (%#x)\n", 
vxi
->
vxi_rsc
);

303 
	`∆_dump_löe
(
p
, "disabled\n");

306 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_L2MISS
) {

307 
	`∆_dump
(
p
, "Ü2miss ");

308 i‡(
vxi
->
vxi_l2miss
)

309 
	`∆_dump_löe
(
p
, "íabÀd (%#x)\n", 
vxi
->
vxi_l2miss
);

311 
	`∆_dump_löe
(
p
, "disabled\n");

314 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_L3MISS
) {

315 
	`∆_dump
(
p
, "Ü3miss ");

316 i‡(
vxi
->
vxi_l3miss
)

317 
	`∆_dump_löe
(
p
, "íabÀd (%#x)\n", 
vxi
->
vxi_l3miss
);

319 
	`∆_dump_löe
(
p
, "disabled\n");

321 
	}
}

323 
	$vxœn_˛⁄e
(
π∆_lök
 *
d°
, π∆_lök *
§c
)

325 
vxœn_öfo
 *
vd°
, *
v§c
 = 
§c
->
l_öfo
;

326 
îr
;

328 
d°
->
l_öfo
 = 
NULL
;

329 i‡((
îr
 = 
	`π∆_lök_£t_ty≥
(
d°
, "vxlan")) < 0)

330  
îr
;

331 
vd°
 = 
d°
->
l_öfo
;

333 i‡(!
vd°
 || !
v§c
)

334  -
NLE_NOMEM
;

336 
	`mem˝y
(
vd°
, 
v§c
, (
vxœn_öfo
));

339 
	}
}

341 
	$vxœn_put_©ås
(
∆_msg
 *
msg
, 
π∆_lök
 *
lök
)

343 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

344 
∆©å
 *
d©a
;

346 i‡(!(
d©a
 = 
	`∆a_√°_°¨t
(
msg
, 
IFLA_INFO_DATA
)))

347  -
NLE_MSGSIZE
;

349 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_ID
)

350 
	`NLA_PUT_U32
(
msg
, 
IFLA_VXLAN_ID
, 
vxi
->
vxi_id
);

352 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_GROUP
)

353 
	`NLA_PUT
(
msg
, 
IFLA_VXLAN_GROUP
, (
vxi
->
vxi_group
), &vxi->vxi_group);

355 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_LINK
)

356 
	`NLA_PUT_U32
(
msg
, 
IFLA_VXLAN_LINK
, 
vxi
->
vxi_lök
);

358 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_LOCAL
)

359 
	`NLA_PUT
(
msg
, 
IFLA_VXLAN_LOCAL
, (
vxi
->
vxi_loˇl
), &vxi->vxi_local);

361 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_TTL
)

362 
	`NLA_PUT_U8
(
msg
, 
IFLA_VXLAN_TTL
, 
vxi
->
vxi_âl
);

364 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_TOS
)

365 
	`NLA_PUT_U8
(
msg
, 
IFLA_VXLAN_TOS
, 
vxi
->
vxi_tos
);

367 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_LEARNING
)

368 
	`NLA_PUT_U8
(
msg
, 
IFLA_VXLAN_LEARNING
, 
vxi
->
vxi_À¨nög
);

370 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_AGEING
)

371 
	`NLA_PUT_U32
(
msg
, 
IFLA_VXLAN_AGEING
, 
vxi
->
vxi_ageög
);

373 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_LIMIT
)

374 
	`NLA_PUT_U32
(
msg
, 
IFLA_VXLAN_LIMIT
, 
vxi
->
vxi_limô
);

376 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_PORT_RANGE
)

377 
	`NLA_PUT
(
msg
, 
IFLA_VXLAN_PORT_RANGE
, (
vxi
->
vxi_p‹t_ønge
),

378 &
vxi
->
vxi_p‹t_ønge
);

380 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_PROXY
)

381 
	`NLA_PUT_U8
(
msg
, 
IFLA_VXLAN_PROXY
, 
vxi
->
vxi_¥oxy
);

383 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_RSC
)

384 
	`NLA_PUT_U8
(
msg
, 
IFLA_VXLAN_RSC
, 
vxi
->
vxi_rsc
);

386 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_L2MISS
)

387 
	`NLA_PUT_U8
(
msg
, 
IFLA_VXLAN_L2MISS
, 
vxi
->
vxi_l2miss
);

389 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_L3MISS
)

390 
	`NLA_PUT_U8
(
msg
, 
IFLA_VXLAN_L3MISS
, 
vxi
->
vxi_l3miss
);

392 
	`∆a_√°_íd
(
msg
, 
d©a
);

394 
∆a_put_Áûuª
:

397 
	}
}

399 
π∆_lök_öfo_›s
 
	gvxœn_öfo_›s
 = {

400 .
io_«me
 = "vxlan",

401 .
	gio_Æloc
 = 
vxœn_Æloc
,

402 .
	gio_∑r£
 = 
vxœn_∑r£
,

403 .
	gio_dump
 = {

404 [
NL_DUMP_LINE
] = 
vxœn_dump_löe
,

405 [
NL_DUMP_DETAILS
] = 
vxœn_dump_dëaûs
,

407 .
	gio_˛⁄e
 = 
vxœn_˛⁄e
,

408 .
	gio_put_©ås
 = 
vxœn_put_©ås
,

409 .
	gio_‰ì
 = 
vxœn_‰ì
,

413 
	#IS_VXLAN_LINK_ASSERT
(
lök
) \

414 i‡((
lök
)->
l_öfo_›s
 !&
vxœn_öfo_›s
) { \

415 
	`APPBUG
("Link isÇotá vxlanÜink. setÅype \"vxlan\" first."); \

416  -
NLE_OPNOTSUPP
; \

417 }

	)

430 
π∆_lök
 *
	$π∆_lök_vxœn_Æloc
()

432 
π∆_lök
 *
lök
;

433 
îr
;

435 i‡(!(
lök
 = 
	`π∆_lök_Æloc
()))

436  
NULL
;

438 i‡((
îr
 = 
	`π∆_lök_£t_ty≥
(
lök
, "vxlan")) < 0) {

439 
	`π∆_lök_put
(
lök
);

440  
NULL
;

443  
lök
;

444 
	}
}

452 
	$π∆_lök_is_vxœn
(
π∆_lök
 *
lök
)

454  
lök
->
l_öfo_›s
 && !
	`°rcmp
÷ök->l_öfo_›s->
io_«me
, "vxlan");

455 
	}
}

464 
	$π∆_lök_vxœn_£t_id
(
π∆_lök
 *
lök
, 
uöt32_t
 
id
)

466 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

468 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

470 i‡(
id
 > 
VXLAN_ID_MAX
)

471  -
NLE_INVAL
;

473 
vxi
->
vxi_id
 = 
id
;

474 
vxi
->
vxi_mask
 |
VXLAN_HAS_ID
;

477 
	}
}

486 
	$π∆_lök_vxœn_gë_id
(
π∆_lök
 *
lök
, 
uöt32_t
 *
id
)

488 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

490 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

492 if(!
id
)

493  -
NLE_INVAL
;

495 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_ID
)

496 *
id
 = 
vxi
->
vxi_id
;

498  -
NLE_AGAIN
;

501 
	}
}

510 
	$π∆_lök_vxœn_£t_group
(
π∆_lök
 *
lök
, 
∆_addr
 *
addr
)

512 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

514 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

516 i‡((
	`∆_addr_gë_Ámûy
(
addr
Ë!
AF_INET
) ||

517 (
	`∆_addr_gë_Àn
(
addr
Ë!(
vxi
->
vxi_group
)))

518  -
NLE_INVAL
;

520 
	`mem˝y
(&
vxi
->
vxi_group
, 
	`∆_addr_gë_bö¨y_addr
(
addr
),

521 (
vxi
->
vxi_group
));

522 
vxi
->
vxi_mask
 |
VXLAN_HAS_GROUP
;

525 
	}
}

534 
	$π∆_lök_vxœn_gë_group
(
π∆_lök
 *
lök
, 
∆_addr
 **
addr
)

536 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

538 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

540 i‡(!
addr
)

541  -
NLE_INVAL
;

543 i‡(!(
vxi
->
vxi_mask
 & 
VXLAN_HAS_GROUP
))

544  -
NLE_AGAIN
;

546 *
addr
 = 
	`∆_addr_buûd
(
AF_INET
, &
vxi
->
vxi_group
, (vxi->vxi_group));

549 
	}
}

558 
	$π∆_lök_vxœn_£t_lök
(
π∆_lök
 *
lök
, 
uöt32_t
 
ödex
)

560 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

562 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

564 
vxi
->
vxi_lök
 = 
ödex
;

565 
vxi
->
vxi_mask
 |
VXLAN_HAS_LINK
;

568 
	}
}

577 
	$π∆_lök_vxœn_gë_lök
(
π∆_lök
 *
lök
, 
uöt32_t
 *
ödex
)

579 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

581 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

583 i‡(!
ödex
)

584  -
NLE_INVAL
;

586 i‡(!(
vxi
->
vxi_mask
 & 
VXLAN_HAS_LINK
))

587  -
NLE_AGAIN
;

589 *
ödex
 = 
vxi
->
vxi_lök
;

592 
	}
}

601 
	$π∆_lök_vxœn_£t_loˇl
(
π∆_lök
 *
lök
, 
∆_addr
 *
addr
)

603 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

605 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

607 i‡((
	`∆_addr_gë_Ámûy
(
addr
Ë!
AF_INET
) ||

608 (
	`∆_addr_gë_Àn
(
addr
Ë!(
vxi
->
vxi_loˇl
)))

609  -
NLE_INVAL
;

611 
	`mem˝y
(&
vxi
->
vxi_loˇl
, 
	`∆_addr_gë_bö¨y_addr
(
addr
),

612 (
vxi
->
vxi_loˇl
));

613 
vxi
->
vxi_mask
 |
VXLAN_HAS_LOCAL
;

616 
	}
}

625 
	$π∆_lök_vxœn_gë_loˇl
(
π∆_lök
 *
lök
, 
∆_addr
 **
addr
)

627 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

629 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

631 i‡(!
addr
)

632  -
NLE_INVAL
;

634 i‡(!(
vxi
->
vxi_mask
 & 
VXLAN_HAS_LOCAL
))

635  -
NLE_AGAIN
;

637 *
addr
 = 
	`∆_addr_buûd
(
AF_INET
, &
vxi
->
vxi_loˇl
, (vxi->vxi_local));

640 
	}
}

649 
	$π∆_lök_vxœn_£t_âl
(
π∆_lök
 *
lök
, 
uöt8_t
 
âl
)

651 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

653 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

655 
vxi
->
vxi_âl
 = 
âl
;

656 
vxi
->
vxi_mask
 |
VXLAN_HAS_TTL
;

659 
	}
}

667 
	$π∆_lök_vxœn_gë_âl
(
π∆_lök
 *
lök
)

669 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

671 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

673 i‡(!(
vxi
->
vxi_mask
 & 
VXLAN_HAS_TTL
))

674  -
NLE_AGAIN
;

676  
vxi
->
vxi_âl
;

677 
	}
}

686 
	$π∆_lök_vxœn_£t_tos
(
π∆_lök
 *
lök
, 
uöt8_t
 
tos
)

688 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

690 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

692 
vxi
->
vxi_tos
 = 
tos
;

693 
vxi
->
vxi_mask
 |
VXLAN_HAS_TOS
;

696 
	}
}

704 
	$π∆_lök_vxœn_gë_tos
(
π∆_lök
 *
lök
)

706 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

708 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

710 i‡(!(
vxi
->
vxi_mask
 & 
VXLAN_HAS_TOS
))

711  -
NLE_AGAIN
;

713  
vxi
->
vxi_tos
;

714 
	}
}

723 
	$π∆_lök_vxœn_£t_À¨nög
(
π∆_lök
 *
lök
, 
uöt8_t
 
À¨nög
)

725 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

727 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

729 
vxi
->
vxi_À¨nög
 = 
À¨nög
;

730 
vxi
->
vxi_mask
 |
VXLAN_HAS_LEARNING
;

733 
	}
}

741 
	$π∆_lök_vxœn_gë_À¨nög
(
π∆_lök
 *
lök
)

743 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

745 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

747 i‡(!(
vxi
->
vxi_mask
 & 
VXLAN_HAS_LEARNING
))

748  -
NLE_AGAIN
;

750  
vxi
->
vxi_À¨nög
;

751 
	}
}

759 
	$π∆_lök_vxœn_íabÀ_À¨nög
(
π∆_lök
 *
lök
)

761  
	`π∆_lök_vxœn_£t_À¨nög
(
lök
, 1);

762 
	}
}

770 
	$π∆_lök_vxœn_dißbÀ_À¨nög
(
π∆_lök
 *
lök
)

772  
	`π∆_lök_vxœn_£t_À¨nög
(
lök
, 0);

773 
	}
}

782 
	$π∆_lök_vxœn_£t_ageög
(
π∆_lök
 *
lök
, 
uöt32_t
 
expúy
)

784 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

786 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

788 
vxi
->
vxi_ageög
 = 
expúy
;

789 
vxi
->
vxi_mask
 |
VXLAN_HAS_AGEING
;

792 
	}
}

801 
	$π∆_lök_vxœn_gë_ageög
(
π∆_lök
 *
lök
, 
uöt32_t
 *
expúy
)

803 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

805 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

807 i‡(!
expúy
)

808  -
NLE_INVAL
;

810 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_AGEING
)

811 *
expúy
 = 
vxi
->
vxi_ageög
;

813  -
NLE_AGAIN
;

816 
	}
}

825 
	$π∆_lök_vxœn_£t_limô
(
π∆_lök
 *
lök
, 
uöt32_t
 
limô
)

827 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

829 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

831 
vxi
->
vxi_limô
 = 
limô
;

832 
vxi
->
vxi_mask
 |
VXLAN_HAS_LIMIT
;

835 
	}
}

844 
	$π∆_lök_vxœn_gë_limô
(
π∆_lök
 *
lök
, 
uöt32_t
 *
limô
)

846 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

848 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

850 i‡(!
limô
)

851  -
NLE_INVAL
;

853 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_LIMIT
)

854 *
limô
 = 
vxi
->
vxi_limô
;

856  -
NLE_AGAIN
;

859 
	}
}

868 
	$π∆_lök_vxœn_£t_p‹t_ønge
(
π∆_lök
 *
lök
,

869 
iÊa_vxœn_p‹t_ønge
 *
ønge
)

871 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

873 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

875 i‡(!
ønge
)

876  -
NLE_INVAL
;

878 
	`mem˝y
(&
vxi
->
vxi_p‹t_ønge
, 
ønge
, (vxi->vxi_port_range));

879 
vxi
->
vxi_mask
 |
VXLAN_HAS_PORT_RANGE
;

882 
	}
}

891 
	$π∆_lök_vxœn_gë_p‹t_ønge
(
π∆_lök
 *
lök
,

892 
iÊa_vxœn_p‹t_ønge
 *
ønge
)

894 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

896 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

898 i‡(!
ønge
)

899  -
NLE_INVAL
;

901 i‡(
vxi
->
vxi_mask
 & 
VXLAN_HAS_PORT_RANGE
)

902 
	`mem˝y
(
ønge
, &
vxi
->
vxi_p‹t_ønge
, (*range));

904  -
NLE_AGAIN
;

907 
	}
}

916 
	$π∆_lök_vxœn_£t_¥oxy
(
π∆_lök
 *
lök
, 
uöt8_t
 
¥oxy
)

918 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

920 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

922 
vxi
->
vxi_¥oxy
 = 
¥oxy
;

923 
vxi
->
vxi_mask
 |
VXLAN_HAS_PROXY
;

926 
	}
}

934 
	$π∆_lök_vxœn_gë_¥oxy
(
π∆_lök
 *
lök
)

936 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

938 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

940 i‡(!(
vxi
->
vxi_mask
 & 
VXLAN_HAS_PROXY
))

941  -
NLE_AGAIN
;

943  
vxi
->
vxi_¥oxy
;

944 
	}
}

952 
	$π∆_lök_vxœn_íabÀ_¥oxy
(
π∆_lök
 *
lök
)

954  
	`π∆_lök_vxœn_£t_¥oxy
(
lök
, 1);

955 
	}
}

963 
	$π∆_lök_vxœn_dißbÀ_¥oxy
(
π∆_lök
 *
lök
)

965  
	`π∆_lök_vxœn_£t_¥oxy
(
lök
, 0);

966 
	}
}

975 
	$π∆_lök_vxœn_£t_rsc
(
π∆_lök
 *
lök
, 
uöt8_t
 
rsc
)

977 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

979 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

981 
vxi
->
vxi_rsc
 = 
rsc
;

982 
vxi
->
vxi_mask
 |
VXLAN_HAS_RSC
;

985 
	}
}

993 
	$π∆_lök_vxœn_gë_rsc
(
π∆_lök
 *
lök
)

995 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

997 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

999 i‡(!(
vxi
->
vxi_mask
 & 
VXLAN_HAS_RSC
))

1000  -
NLE_AGAIN
;

1002  
vxi
->
vxi_rsc
;

1003 
	}
}

1011 
	$π∆_lök_vxœn_íabÀ_rsc
(
π∆_lök
 *
lök
)

1013  
	`π∆_lök_vxœn_£t_rsc
(
lök
, 1);

1014 
	}
}

1022 
	$π∆_lök_vxœn_dißbÀ_rsc
(
π∆_lök
 *
lök
)

1024  
	`π∆_lök_vxœn_£t_rsc
(
lök
, 0);

1025 
	}
}

1034 
	$π∆_lök_vxœn_£t_l2miss
(
π∆_lök
 *
lök
, 
uöt8_t
 
miss
)

1036 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

1038 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

1040 
vxi
->
vxi_l2miss
 = 
miss
;

1041 
vxi
->
vxi_mask
 |
VXLAN_HAS_L2MISS
;

1044 
	}
}

1052 
	$π∆_lök_vxœn_gë_l2miss
(
π∆_lök
 *
lök
)

1054 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

1056 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

1058 i‡(!(
vxi
->
vxi_mask
 & 
VXLAN_HAS_L2MISS
))

1059  -
NLE_AGAIN
;

1061  
vxi
->
vxi_l2miss
;

1062 
	}
}

1070 
	$π∆_lök_vxœn_íabÀ_l2miss
(
π∆_lök
 *
lök
)

1072  
	`π∆_lök_vxœn_£t_l2miss
(
lök
, 1);

1073 
	}
}

1081 
	$π∆_lök_vxœn_dißbÀ_l2miss
(
π∆_lök
 *
lök
)

1083  
	`π∆_lök_vxœn_£t_l2miss
(
lök
, 0);

1084 
	}
}

1093 
	$π∆_lök_vxœn_£t_l3miss
(
π∆_lök
 *
lök
, 
uöt8_t
 
miss
)

1095 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

1097 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

1099 
vxi
->
vxi_l3miss
 = 
miss
;

1100 
vxi
->
vxi_mask
 |
VXLAN_HAS_L3MISS
;

1103 
	}
}

1111 
	$π∆_lök_vxœn_gë_l3miss
(
π∆_lök
 *
lök
)

1113 
vxœn_öfo
 *
vxi
 = 
lök
->
l_öfo
;

1115 
	`IS_VXLAN_LINK_ASSERT
(
lök
);

1117 i‡(!(
vxi
->
vxi_mask
 & 
VXLAN_HAS_L3MISS
))

1118  -
NLE_AGAIN
;

1120  
vxi
->
vxi_l3miss
;

1121 
	}
}

1129 
	$π∆_lök_vxœn_íabÀ_l3miss
(
π∆_lök
 *
lök
)

1131  
	`π∆_lök_vxœn_£t_l3miss
(
lök
, 1);

1132 
	}
}

1140 
	$π∆_lök_vxœn_dißbÀ_l3miss
(
π∆_lök
 *
lök
)

1142  
	`π∆_lök_vxœn_£t_l3miss
(
lök
, 0);

1143 
	}
}

1147 
__öô
 
	$vxœn_öô
()

1149 
	`π∆_lök_ªgi°î_öfo
(&
vxœn_öfo_›s
);

1150 
	}
}

1152 
__exô
 
	$vxœn_exô
()

1154 
	`π∆_lök_uƒegi°î_öfo
(&
vxœn_öfo_›s
);

1155 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/neigh.c

151 
	~<√éök-¥iv©e/√éök.h
>

152 
	~<√éök/√éök.h
>

153 
	~<√éök/utûs.h
>

154 
	~<√éök/hashèbÀ.h
>

155 
	~<√éök/rouã/π∆.h
>

156 
	~<√éök/rouã/√ighbour.h
>

157 
	~<√éök/rouã/lök.h
>

158 
	~<√éök/hashèbÀ.h
>

161 
	#NEIGH_ATTR_FLAGS
 0x01

	)

162 
	#NEIGH_ATTR_STATE
 0x02

	)

163 
	#NEIGH_ATTR_LLADDR
 0x04

	)

164 
	#NEIGH_ATTR_DST
 0x08

	)

165 
	#NEIGH_ATTR_CACHEINFO
 0x10

	)

166 
	#NEIGH_ATTR_IFINDEX
 0x20

	)

167 
	#NEIGH_ATTR_FAMILY
 0x40

	)

168 
	#NEIGH_ATTR_TYPE
 0x80

	)

169 
	#NEIGH_ATTR_PROBES
 0x100

	)

170 
	#NEIGH_ATTR_MASTER
 0x200

	)

172 
∆_ˇche_›s
 
	gπ∆_√igh_›s
;

173 
∆_obje˘_›s
 
	g√igh_obj_›s
;

176 
	$√igh_‰ì_d©a
(
∆_obje˘
 *
c
)

178 
π∆_√igh
 *
√igh
 = 
	`∆_obje˘_¥iv
(
c
);

180 i‡(!
√igh
)

183 
	`∆_addr_put
(
√igh
->
n_Œaddr
);

184 
	`∆_addr_put
(
√igh
->
n_d°
);

185 
	}
}

187 
	$√igh_˛⁄e
(
∆_obje˘
 *
_d°
, ∆_obje˘ *
_§c
)

189 
π∆_√igh
 *
d°
 = 
	`∆_obje˘_¥iv
(
_d°
);

190 
π∆_√igh
 *
§c
 = 
	`∆_obje˘_¥iv
(
_§c
);

192 i‡(
§c
->
n_Œaddr
)

193 i‡(!(
d°
->
n_Œaddr
 = 
	`∆_addr_˛⁄e
(
§c
->n_lladdr)))

194  -
NLE_NOMEM
;

196 i‡(
§c
->
n_d°
)

197 i‡(!(
d°
->
n_d°
 = 
	`∆_addr_˛⁄e
(
§c
->n_dst)))

198  -
NLE_NOMEM
;

201 
	}
}

203 
	$√igh_keygí
(
∆_obje˘
 *
obj
, 
uöt32_t
 *
hashkey
,

204 
uöt32_t
 
èbÀ_sz
)

206 
π∆_√igh
 *
√igh
 = (π∆_√igh *Ë
obj
;

207 
nkey_sz
;

208 
∆_addr
 *
addr
 = 
NULL
;

209 
	s√igh_hash_key
 {

210 
uöt32_t
 
n_Ámûy
;

211 
uöt32_t
 
n_ifödex
;

212 
n_addr
[0];

213 } 
	`__©åibuã__
((
∑cked
)Ë*
nkey
;

214 #ifde‡
NL_DEBUG


215 
buf
[
INET6_ADDRSTRLEN
+5];

218 i‡(
√igh
->
n_Ámûy
 =
AF_BRIDGE
) {

219 i‡(
√igh
->
n_Œaddr
)

220 
addr
 = 
√igh
->
n_Œaddr
;

221 } i‡(
√igh
->
n_d°
) {

222 
addr
 = 
√igh
->
n_d°
;

225 
nkey_sz
 = (*
nkey
);

226 i‡(
addr
)

227 
nkey_sz
 +
	`∆_addr_gë_Àn
(
addr
);

229 
nkey
 = 
	`ˇŒoc
(1, 
nkey_sz
);

230 i‡(!
nkey
) {

231 *
hashkey
 = 0;

234 
nkey
->
n_Ámûy
 = 
√igh
->n_family;

235 i‡(
√igh
->
n_Ámûy
 =
AF_BRIDGE
)

236 
nkey
->
n_ifödex
 = 
√igh
->
n_ma°î
;

238 
nkey
->
n_ifödex
 = 
√igh
->n_ifindex;

239 i‡(
addr
)

240 
	`mem˝y
(
nkey
->
n_addr
,

241 
	`∆_addr_gë_bö¨y_addr
(
addr
),

242 
	`∆_addr_gë_Àn
(
addr
));

244 *
hashkey
 = 
	`∆_hash
(
nkey
, 
nkey_sz
, 0Ë% 
èbÀ_sz
;

246 
	`NL_DBG
(5, "neigh %p key (fam %d dev %dáddr %s) keysz %d hash 0x%x\n",

247 
√igh
, 
nkey
->
n_Ámûy
,Çkey->
n_ifödex
,

248 
	`∆_addr2°r
(
addr
, 
buf
, (buf)),

249 
nkey_sz
, *
hashkey
);

251 
	`‰ì
(
nkey
);

254 
	}
}

256 
	$√igh_com∑ª
(
∆_obje˘
 *
_a
, ∆_obje˘ *
_b
,

257 
uöt32_t
 
©ås
, 
Êags
)

259 
π∆_√igh
 *
a
 = (π∆_√igh *Ë
_a
;

260 
π∆_√igh
 *
b
 = (π∆_√igh *Ë
_b
;

261 
diff
 = 0;

263 
	#NEIGH_DIFF
(
ATTR
, 
EXPR
Ë
	`ATTR_DIFF
(
©ås
, 
NEIGH_ATTR_
##ATTR, 
a
, 
b
, EXPR)

	)

265 
diff
 |
	`NEIGH_DIFF
(
IFINDEX
, 
a
->
n_ifödex
 !
b
->n_ifindex);

266 
diff
 |
	`NEIGH_DIFF
(
FAMILY
, 
a
->
n_Ámûy
 !
b
->n_family);

267 
diff
 |
	`NEIGH_DIFF
(
TYPE
, 
a
->
n_ty≥
 !
b
->n_type);

268 
diff
 |
	`NEIGH_DIFF
(
LLADDR
, 
	`∆_addr_cmp
(
a
->
n_Œaddr
, 
b
->n_lladdr));

269 
diff
 |
	`NEIGH_DIFF
(
DST
, 
	`∆_addr_cmp
(
a
->
n_d°
, 
b
->n_dst));

270 
diff
 |
	`NEIGH_DIFF
(
MASTER
, 
a
->
n_ma°î
 !
b
->n_master);

272 i‡(
Êags
 & 
LOOSE_COMPARISON
) {

273 
diff
 |
	`NEIGH_DIFF
(
STATE
,

274 (
a
->
n_°©e
 ^ 
b
->n_°©eË& b->
n_°©e_mask
);

275 
diff
 |
	`NEIGH_DIFF
(
FLAGS
,

276 (
a
->
n_Êags
 ^ 
b
->n_ÊagsË& b->
n_Êag_mask
);

278 
diff
 |
	`NEIGH_DIFF
(
STATE
, 
a
->
n_°©e
 !
b
->n_state);

279 
diff
 |
	`NEIGH_DIFF
(
FLAGS
, 
a
->
n_Êags
 !
b
->n_flags);

282 #unde‡
NEIGH_DIFF


284  
diff
;

285 
	}
}

287 c⁄° 
å™s_tbl
 
	g√igh_©ås
[] = {

288 
__ADD
(
NEIGH_ATTR_FLAGS
, 
Êags
)

289 
__ADD
(
NEIGH_ATTR_STATE
, 
°©e
)

290 
__ADD
(
NEIGH_ATTR_LLADDR
, 
Œaddr
)

291 
__ADD
(
NEIGH_ATTR_DST
, 
d°
)

292 
__ADD
(
NEIGH_ATTR_CACHEINFO
, 
ˇcheöfo
)

293 
__ADD
(
NEIGH_ATTR_IFINDEX
, 
ifödex
)

294 
__ADD
(
NEIGH_ATTR_FAMILY
, 
Ámûy
)

295 
__ADD
(
NEIGH_ATTR_TYPE
, 
ty≥
)

296 
__ADD
(
NEIGH_ATTR_PROBES
, 
¥obes
)

299 *
	$√igh_©ås2°r
(
©ås
, *
buf
, 
size_t
 
Àn
)

301  
	`__Êags2°r
(
©ås
, 
buf
, 
Àn
, 
√igh_©ås
,

302 
	`ARRAY_SIZE
(
√igh_©ås
));

303 
	}
}

305 
uöt32_t
 
	$√igh_id_©ås_gë
(
∆_obje˘
 *
obj
)

307 
π∆_√igh
 *
√igh
 = (π∆_√igh *)
obj
;

309 i‡(
√igh
->
n_Ámûy
 =
AF_BRIDGE
)

310  (
NEIGH_ATTR_LLADDR
 | 
NEIGH_ATTR_FAMILY
 | 
NEIGH_ATTR_MASTER
);

312  (
NEIGH_ATTR_IFINDEX
 | 
NEIGH_ATTR_DST
 | 
NEIGH_ATTR_FAMILY
);

313 
	}
}

315 
∆a_pﬁicy
 
	g√igh_pﬁicy
[
NDA_MAX
+1] = {

316 [
NDA_CACHEINFO
] = { .
möÀn
 = (
nda_ˇcheöfo
) },

317 [
NDA_PROBES
] = { .
ty≥
 = 
NLA_U32
 },

320 
	$√igh_msg_∑r£r
(
∆_ˇche_›s
 *
›s
, 
sockaddr_∆
 *
who
,

321 
∆msghdr
 *
n
, 
∆_∑r£r_∑øm
 *
µ
)

323 
π∆_√igh
 *
√igh
;

324 
îr
;

326 i‡((
îr
 = 
	`π∆_√igh_∑r£
(
n
, &
√igh
)) < 0)

327  
îr
;

329 
îr
 = 
µ
->
	`µ_cb
((
∆_obje˘
 *Ë
√igh
,Öp);

331 
	`π∆_√igh_put
(
√igh
);

332  
îr
;

333 
	}
}

336 
	$π∆_√igh_∑r£
(
∆msghdr
 *
n
, 
π∆_√igh
 **
ªsu…
)

338 
π∆_√igh
 *
√igh
;

339 
∆©å
 *
tb
[
NDA_MAX
 + 1];

340 
ndmsg
 *
nm
;

341 
îr
;

343 
√igh
 = 
	`π∆_√igh_Æloc
();

344 i‡(!
√igh
) {

345 
îr
 = -
NLE_NOMEM
;

346 
îrout
;

349 
√igh
->
˚_msgty≥
 = 
n
->
∆msg_ty≥
;

350 
nm
 = 
	`∆msg_d©a
(
n
);

352 
îr
 = 
	`∆msg_∑r£
(
n
, (*
nm
), 
tb
, 
NDA_MAX
, 
√igh_pﬁicy
);

353 i‡(
îr
 < 0)

354 
îrout
;

356 
√igh
->
n_Ámûy
 = 
nm
->
ndm_Ámûy
;

357 
√igh
->
n_ifödex
 = 
nm
->
ndm_ifödex
;

358 
√igh
->
n_°©e
 = 
nm
->
ndm_°©e
;

359 
√igh
->
n_Êags
 = 
nm
->
ndm_Êags
;

360 
√igh
->
n_ty≥
 = 
nm
->
ndm_ty≥
;

362 
√igh
->
˚_mask
 |(
NEIGH_ATTR_FAMILY
 | 
NEIGH_ATTR_IFINDEX
 |

363 
NEIGH_ATTR_STATE
 | 
NEIGH_ATTR_FLAGS
 |

364 
NEIGH_ATTR_TYPE
);

366 i‡(
tb
[
NDA_LLADDR
]) {

367 
√igh
->
n_Œaddr
 = 
	`∆_addr_Æloc_©å
(
tb
[
NDA_LLADDR
], 
AF_UNSPEC
);

368 i‡(!
√igh
->
n_Œaddr
) {

369 
îr
 = -
NLE_NOMEM
;

370 
îrout
;

372 
	`∆_addr_£t_Ámûy
(
√igh
->
n_Œaddr
,

373 
	`∆_addr_guess_Ámûy
(
√igh
->
n_Œaddr
));

374 
√igh
->
˚_mask
 |
NEIGH_ATTR_LLADDR
;

377 i‡(
tb
[
NDA_DST
]) {

378 
√igh
->
n_d°
 = 
	`∆_addr_Æloc_©å
(
tb
[
NDA_DST
],Çeigh->
n_Ámûy
);

379 i‡(!
√igh
->
n_d°
) {

380 
îr
 = -
NLE_NOMEM
;

381 
îrout
;

383 
√igh
->
˚_mask
 |
NEIGH_ATTR_DST
;

386 i‡(
tb
[
NDA_CACHEINFO
]) {

387 
nda_ˇcheöfo
 *
ci
 = 
	`∆a_d©a
(
tb
[
NDA_CACHEINFO
]);

389 
√igh
->
n_ˇcheöfo
.
nci_c⁄fúmed
 = 
ci
->
ndm_c⁄fúmed
;

390 
√igh
->
n_ˇcheöfo
.
nci_u£d
 = 
ci
->
ndm_u£d
;

391 
√igh
->
n_ˇcheöfo
.
nci_upd©ed
 = 
ci
->
ndm_upd©ed
;

392 
√igh
->
n_ˇcheöfo
.
nci_ªf˙t
 = 
ci
->
ndm_ªf˙t
;

394 
√igh
->
˚_mask
 |
NEIGH_ATTR_CACHEINFO
;

397 i‡(
tb
[
NDA_PROBES
]) {

398 
√igh
->
n_¥obes
 = 
	`∆a_gë_u32
(
tb
[
NDA_PROBES
]);

399 
√igh
->
˚_mask
 |
NEIGH_ATTR_PROBES
;

405 i‡(
√igh
->
n_Ámûy
 =
AF_BRIDGE
) {

406 
∆_ˇche
 *
lˇche
 = 
	`∆_ˇche_mngt_ªquúe_ß„
("route/link");

407 i‡(
lˇche
 ) {

408 
π∆_lök
 *
lök
 = 
	`π∆_lök_gë
(
lˇche
,

409 
√igh
->
n_ifödex
);

410 i‡(
lök
) {

411 
√igh
->
n_ma°î
 = 
lök
->
l_ma°î
;

412 
	`π∆_lök_put
(
lök
);

413 
√igh
->
˚_mask
 |
NEIGH_ATTR_MASTER
;

416 
	`∆_ˇche_put
(
lˇche
);

420 *
ªsu…
 = 
√igh
;

423 
îrout
:

424 
	`π∆_√igh_put
(
√igh
);

425  
îr
;

426 
	}
}

428 
	$√igh_ªque°_upd©e
(
∆_ˇche
 *
c
, 
∆_sock
 *
h
)

430 
Ámûy
 = 
c
->
c_ürg1
;

432  
	`∆_πgí_ªque°
(
h
, 
RTM_GETNEIGH
, 
Ámûy
, 
NLM_F_DUMP
);

433 
	}
}

436 
	$√igh_dump_löe
(
∆_obje˘
 *
a
, 
∆_dump_∑øms
 *
p
)

438 
d°
[
INET6_ADDRSTRLEN
+5], 
Œaddr
[INET6_ADDRSTRLEN+5];

439 
π∆_√igh
 *
n
 = (π∆_√igh *Ë
a
;

440 
∆_ˇche
 *
lök_ˇche
;

441 
°©e
[128], 
Êags
[64];

443 
lök_ˇche
 = 
	`∆_ˇche_mngt_ªquúe_ß„
("route/link");

445 i‡(
n
->
n_Ámûy
 !
AF_BRIDGE
)

446 
	`∆_dump_löe
(
p
, "%†", 
	`∆_addr2°r
(
n
->
n_d°
, 
d°
, (dst)));

448 i‡(
lök_ˇche
)

449 
	`∆_dump
(
p
, "dev %s ",

450 
	`π∆_lök_i2«me
(
lök_ˇche
, 
n
->
n_ifödex
,

451 
°©e
, (state)));

453 
	`∆_dump
(
p
, "dev %d ", 
n
->
n_ifödex
);

455 i‡(
n
->
˚_mask
 & 
NEIGH_ATTR_LLADDR
)

456 
	`∆_dump
(
p
, "lladdr %s ",

457 
	`∆_addr2°r
(
n
->
n_Œaddr
, 
Œaddr
, (lladdr)));

459 
	`π∆_√igh_°©e2°r
(
n
->
n_°©e
, 
°©e
, (state));

460 
	`π∆_√igh_Êags2°r
(
n
->
n_Êags
, 
Êags
, (flags));

462 i‡(
°©e
[0])

463 
	`∆_dump
(
p
, "<%s", 
°©e
);

464 i‡(
Êags
[0])

465 
	`∆_dump
(
p
, "%s%s", 
°©e
[0] ? "," : "<", 
Êags
);

466 i‡(
°©e
[0] || 
Êags
[0])

467 
	`∆_dump
(
p
, ">");

468 
	`∆_dump
(
p
, "\n");

470 i‡(
lök_ˇche
)

471 
	`∆_ˇche_put
(
lök_ˇche
);

472 
	}
}

474 
	$√igh_dump_dëaûs
(
∆_obje˘
 *
a
, 
∆_dump_∑øms
 *
p
)

476 
πn_ty≥
[32];

477 
π∆_√igh
 *
n
 = (π∆_√igh *Ë
a
;

478 
hz
 = 
	`∆_gë_u£r_hz
();

480 
	`√igh_dump_löe
(
a
, 
p
);

482 
	`∆_dump_löe
(
p
, "Ñefcnt %uÅype %s confirmed %u used "

484 
n
->
n_ˇcheöfo
.
nci_ªf˙t
,

485 
	`∆_π¡y≥2°r
(
n
->
n_ty≥
, 
πn_ty≥
, (rtn_type)),

486 
n
->
n_ˇcheöfo
.
nci_c⁄fúmed
/
hz
,

487 
n
->
n_ˇcheöfo
.
nci_u£d
/
hz
,Ç->n_ˇcheöfo.
nci_upd©ed
/hz);

488 
	}
}

490 
	$√igh_dump_°©s
(
∆_obje˘
 *
a
, 
∆_dump_∑øms
 *
p
)

492 
	`√igh_dump_dëaûs
(
a
, 
p
);

493 
	}
}

500 
π∆_√igh
 *
	$π∆_√igh_Æloc
()

502  (
π∆_√igh
 *Ë
	`∆_obje˘_Æloc
(&
√igh_obj_›s
);

503 
	}
}

505 
	$π∆_√igh_put
(
π∆_√igh
 *
√igh
)

507 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
√igh
);

508 
	}
}

527 
	$π∆_√igh_Æloc_ˇche
(
∆_sock
 *
sock
, 
∆_ˇche
 **
ªsu…
)

529  
	`∆_ˇche_Æloc_™d_fûl
(&
π∆_√igh_›s
, 
sock
, 
ªsu…
);

530 
	}
}

540 
π∆_√igh
 * 
	$π∆_√igh_gë
(
∆_ˇche
 *
ˇche
, 
ifödex
,

541 
∆_addr
 *
d°
)

543 
π∆_√igh
 *
√igh
;

545 
	`∆_li°_f‹_óch_íåy
(
√igh
, &
ˇche
->
c_ôems
, 
˚_li°
) {

546 i‡(
√igh
->
n_ifödex
 =
ifödex
 &&

547 !
	`∆_addr_cmp
(
√igh
->
n_d°
, 
d°
)) {

548 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
√igh
);

549  
√igh
;

553  
NULL
;

554 
	}
}

563 
	$buûd_√igh_msg
(
π∆_√igh
 *
tm∂
, 
cmd
, 
Êags
,

564 
∆_msg
 **
ªsu…
)

566 
∆_msg
 *
msg
;

567 
ndmsg
 
nhdr
 = {

568 .
ndm_ifödex
 = 
tm∂
->
n_ifödex
,

569 .
ndm_°©e
 = 
NUD_PERMANENT
,

572 i‡(
tm∂
->
n_Ámûy
 !
AF_BRIDGE
) {

573 i‡(!(
tm∂
->
˚_mask
 & 
NEIGH_ATTR_DST
))

574  -
NLE_MISSING_ATTR
;

575 
nhdr
.
ndm_Ámûy
 = 
	`∆_addr_gë_Ámûy
(
tm∂
->
n_d°
);

578 
nhdr
.
ndm_Ámûy
 = 
AF_BRIDGE
;

580 i‡(
tm∂
->
˚_mask
 & 
NEIGH_ATTR_FLAGS
)

581 
nhdr
.
ndm_Êags
 = 
tm∂
->
n_Êags
;

583 i‡(
tm∂
->
˚_mask
 & 
NEIGH_ATTR_STATE
)

584 
nhdr
.
ndm_°©e
 = 
tm∂
->
n_°©e
;

586 
msg
 = 
	`∆msg_Æloc_sim∂e
(
cmd
, 
Êags
);

587 i‡(!
msg
)

588  -
NLE_NOMEM
;

590 i‡(
	`∆msg_≠≥nd
(
msg
, &
nhdr
, “hdr), 
NLMSG_ALIGNTO
) < 0)

591 
∆a_put_Áûuª
;

593 i‡(
tm∂
->
n_Ámûy
 !
AF_BRIDGE
)

594 
	`NLA_PUT_ADDR
(
msg
, 
NDA_DST
, 
tm∂
->
n_d°
);

596 i‡(
tm∂
->
˚_mask
 & 
NEIGH_ATTR_LLADDR
)

597 
	`NLA_PUT_ADDR
(
msg
, 
NDA_LLADDR
, 
tm∂
->
n_Œaddr
);

599 *
ªsu…
 = 
msg
;

602 
∆a_put_Áûuª
:

603 
	`∆msg_‰ì
(
msg
);

604  -
NLE_MSGSIZE
;

605 
	}
}

627 
	$π∆_√igh_buûd_add_ªque°
(
π∆_√igh
 *
tm∂
, 
Êags
,

628 
∆_msg
 **
ªsu…
)

630  
	`buûd_√igh_msg
(
tm∂
, 
RTM_NEWNEIGH
, 
Êags
, 
ªsu…
);

631 
	}
}

651 
	$π∆_√igh_add
(
∆_sock
 *
sk
, 
π∆_√igh
 *
tm∂
, 
Êags
)

653 
îr
;

654 
∆_msg
 *
msg
;

656 i‡((
îr
 = 
	`π∆_√igh_buûd_add_ªque°
(
tm∂
, 
Êags
, &
msg
)) < 0)

657  
îr
;

659 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sk
, 
msg
);

660 
	`∆msg_‰ì
(
msg
);

661 i‡(
îr
 < 0)

662  
îr
;

664  
	`waô_f‹_ack
(
sk
);

665 
	}
}

688 
	$π∆_√igh_buûd_dñëe_ªque°
(
π∆_√igh
 *
√igh
, 
Êags
,

689 
∆_msg
 **
ªsu…
)

691  
	`buûd_√igh_msg
(
√igh
, 
RTM_DELNEIGH
, 
Êags
, 
ªsu…
);

692 
	}
}

706 
	$π∆_√igh_dñëe
(
∆_sock
 *
sk
, 
π∆_√igh
 *
√igh
,

707 
Êags
)

709 
∆_msg
 *
msg
;

710 
îr
;

712 i‡((
îr
 = 
	`π∆_√igh_buûd_dñëe_ªque°
(
√igh
, 
Êags
, &
msg
)) < 0)

713  
îr
;

715 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sk
, 
msg
);

716 
	`∆msg_‰ì
(
msg
);

717 i‡(
îr
 < 0)

718  
îr
;

720  
	`waô_f‹_ack
(
sk
);

721 
	}
}

730 c⁄° 
å™s_tbl
 
	g√igh_°©es
[] = {

731 
__ADD
(
NUD_INCOMPLETE
, 
öcom∂ëe
)

732 
__ADD
(
NUD_REACHABLE
, 
ªachabÀ
)

733 
__ADD
(
NUD_STALE
, 
°Æe
)

734 
__ADD
(
NUD_DELAY
, 
dñay
)

735 
__ADD
(
NUD_PROBE
, 
¥obe
)

736 
__ADD
(
NUD_FAILED
, 
Áûed
)

737 
__ADD
(
NUD_NOARP
, 
n‹¨p
)

738 
__ADD
(
NUD_PERMANENT
, 
≥rm™ít
)

741 * 
	$π∆_√igh_°©e2°r
(
°©e
, *
buf
, 
size_t
 
Àn
)

743  
	`__Êags2°r
(
°©e
, 
buf
, 
Àn
, 
√igh_°©es
,

744 
	`ARRAY_SIZE
(
√igh_°©es
));

745 
	}
}

747 
	$π∆_√igh_°r2°©e
(c⁄° *
«me
)

749  
	`__°r2ty≥
(
«me
, 
√igh_°©es
, 
	`ARRAY_SIZE
(neigh_states));

750 
	}
}

759 c⁄° 
å™s_tbl
 
	g√igh_Êags
[] = {

760 
__ADD
(
NTF_USE
, 
u£
)

761 
__ADD
(
NTF_PROXY
, 
¥oxy
)

762 
__ADD
(
NTF_ROUTER
, 
rouãr
)

765 * 
	$π∆_√igh_Êags2°r
(
Êags
, *
buf
, 
size_t
 
Àn
)

767  
	`__Êags2°r
(
Êags
, 
buf
, 
Àn
, 
√igh_Êags
,

768 
	`ARRAY_SIZE
(
√igh_Êags
));

769 
	}
}

771 
	$π∆_√igh_°r2Êag
(c⁄° *
«me
)

773  
	`__°r2ty≥
(
«me
, 
√igh_Êags
, 
	`ARRAY_SIZE
(neigh_flags));

774 
	}
}

783 
	$π∆_√igh_£t_°©e
(
π∆_√igh
 *
√igh
, 
°©e
)

785 
√igh
->
n_°©e_mask
 |
°©e
;

786 
√igh
->
n_°©e
 |
°©e
;

787 
√igh
->
˚_mask
 |
NEIGH_ATTR_STATE
;

788 
	}
}

790 
	$π∆_√igh_gë_°©e
(
π∆_√igh
 *
√igh
)

792 i‡(
√igh
->
˚_mask
 & 
NEIGH_ATTR_STATE
)

793  
√igh
->
n_°©e
;

796 
	}
}

798 
	$π∆_√igh_un£t_°©e
(
π∆_√igh
 *
√igh
, 
°©e
)

800 
√igh
->
n_°©e_mask
 |
°©e
;

801 
√igh
->
n_°©e
 &~
°©e
;

802 
√igh
->
˚_mask
 |
NEIGH_ATTR_STATE
;

803 
	}
}

805 
	$π∆_√igh_£t_Êags
(
π∆_√igh
 *
√igh
, 
Êags
)

807 
√igh
->
n_Êag_mask
 |
Êags
;

808 
√igh
->
n_Êags
 |
Êags
;

809 
√igh
->
˚_mask
 |
NEIGH_ATTR_FLAGS
;

810 
	}
}

812 
	$π∆_√igh_gë_Êags
(
π∆_√igh
 *
√igh
)

814  
√igh
->
n_Êags
;

815 
	}
}

817 
	$π∆_√igh_un£t_Êags
(
π∆_√igh
 *
√igh
, 
Êags
)

819 
√igh
->
n_Êag_mask
 |
Êags
;

820 
√igh
->
n_Êags
 &~
Êags
;

821 
√igh
->
˚_mask
 |
NEIGH_ATTR_FLAGS
;

822 
	}
}

824 
	$π∆_√igh_£t_ifödex
(
π∆_√igh
 *
√igh
, 
ifödex
)

826 
√igh
->
n_ifödex
 = 
ifödex
;

827 
√igh
->
˚_mask
 |
NEIGH_ATTR_IFINDEX
;

828 
	}
}

830 
	$π∆_√igh_gë_ifödex
(
π∆_√igh
 *
√igh
)

832  
√igh
->
n_ifödex
;

833 
	}
}

835 
ölöe
 
	$__assign_addr
(
π∆_√igh
 *
√igh
, 
∆_addr
 **
pos
,

836 
∆_addr
 *
√w
, 
Êag
, 
nocheck
)

838 i‡(!
nocheck
) {

839 i‡(
√igh
->
˚_mask
 & 
NEIGH_ATTR_FAMILY
) {

840 i‡(
√w
->
a_Ámûy
 !
√igh
->
n_Ámûy
)

841  -
NLE_AF_MISMATCH
;

843 
√igh
->
n_Ámûy
 = 
√w
->
a_Ámûy
;

844 
√igh
->
˚_mask
 |
NEIGH_ATTR_FAMILY
;

848 i‡(*
pos
)

849 
	`∆_addr_put
(*
pos
);

851 
	`∆_addr_gë
(
√w
);

852 *
pos
 = 
√w
;

854 
√igh
->
˚_mask
 |
Êag
;

857 
	}
}

859 
	$π∆_√igh_£t_Œaddr
(
π∆_√igh
 *
√igh
, 
∆_addr
 *
addr
)

861 
	`__assign_addr
(
√igh
, &√igh->
n_Œaddr
, 
addr
, 
NEIGH_ATTR_LLADDR
, 1);

862 
	}
}

864 
∆_addr
 *
	$π∆_√igh_gë_Œaddr
(
π∆_√igh
 *
√igh
)

866 i‡(
√igh
->
˚_mask
 & 
NEIGH_ATTR_LLADDR
)

867  
√igh
->
n_Œaddr
;

869  
NULL
;

870 
	}
}

872 
	$π∆_√igh_£t_d°
(
π∆_√igh
 *
√igh
, 
∆_addr
 *
addr
)

874  
	`__assign_addr
(
√igh
, &√igh->
n_d°
, 
addr
,

875 
NEIGH_ATTR_DST
, 0);

876 
	}
}

878 
∆_addr
 *
	$π∆_√igh_gë_d°
(
π∆_√igh
 *
√igh
)

880 i‡(
√igh
->
˚_mask
 & 
NEIGH_ATTR_DST
)

881  
√igh
->
n_d°
;

883  
NULL
;

884 
	}
}

886 
	$π∆_√igh_£t_Ámûy
(
π∆_√igh
 *
√igh
, 
Ámûy
)

888 
√igh
->
n_Ámûy
 = 
Ámûy
;

889 
√igh
->
˚_mask
 |
NEIGH_ATTR_FAMILY
;

890 
	}
}

892 
	$π∆_√igh_gë_Ámûy
(
π∆_√igh
 *
√igh
)

894  
√igh
->
n_Ámûy
;

895 
	}
}

897 
	$π∆_√igh_£t_ty≥
(
π∆_√igh
 *
√igh
, 
ty≥
)

899 
√igh
->
n_ty≥
 = 
ty≥
;

900 
√igh
->
˚_mask
 = 
NEIGH_ATTR_TYPE
;

901 
	}
}

903 
	$π∆_√igh_gë_ty≥
(
π∆_√igh
 *
√igh
)

905 i‡(
√igh
->
˚_mask
 & 
NEIGH_ATTR_TYPE
)

906  
√igh
->
n_ty≥
;

909 
	}
}

913 
∆_obje˘_›s
 
	g√igh_obj_›s
 = {

914 .
oo_«me
 = "route/neigh",

915 .
	goo_size
 = (
π∆_√igh
),

916 .
	goo_‰ì_d©a
 = 
√igh_‰ì_d©a
,

917 .
	goo_˛⁄e
 = 
√igh_˛⁄e
,

918 .
	goo_dump
 = {

919 [
NL_DUMP_LINE
] = 
√igh_dump_löe
,

920 [
NL_DUMP_DETAILS
] = 
√igh_dump_dëaûs
,

921 [
NL_DUMP_STATS
] = 
√igh_dump_°©s
,

923 .
	goo_com∑ª
 = 
√igh_com∑ª
,

924 .
	goo_keygí
 = 
√igh_keygí
,

925 .
	goo_©ås2°r
 = 
√igh_©ås2°r
,

926 .
	goo_id_©ås
 = (
NEIGH_ATTR_IFINDEX
 | 
NEIGH_ATTR_DST
 | 
NEIGH_ATTR_FAMILY
),

927 .
	goo_id_©ås_gë
 = 
√igh_id_©ås_gë


930 
∆_af_group
 
	g√igh_groups
[] = {

931 { 
AF_UNSPEC
, 
RTNLGRP_NEIGH
 },

932 { 
AF_BRIDGE
, 
RTNLGRP_NEIGH
 },

933 { 
END_OF_GROUP_LIST
 },

936 
∆_ˇche_›s
 
	gπ∆_√igh_›s
 = {

937 .
co_«me
 = "route/neigh",

938 .
	gco_hdrsize
 = (
ndmsg
),

939 .
	gco_msgty≥s
 = {

940 { 
RTM_NEWNEIGH
, 
NL_ACT_NEW
, "new" },

941 { 
RTM_DELNEIGH
, 
NL_ACT_DEL
, "del" },

942 { 
RTM_GETNEIGH
, 
NL_ACT_GET
, "get" },

943 
END_OF_MSGTYPES_LIST
,

945 .
	gco_¥Ÿocﬁ
 = 
NETLINK_ROUTE
,

946 .
	gco_groups
 = 
√igh_groups
,

947 .
	gco_ªque°_upd©e
 = 
√igh_ªque°_upd©e
,

948 .
	gco_msg_∑r£r
 = 
√igh_msg_∑r£r
,

949 .
	gco_obj_›s
 = &
√igh_obj_›s
,

952 
__öô
 
	$√igh_öô
()

954 
	`∆_ˇche_mngt_ªgi°î
(&
π∆_√igh_›s
);

955 
	}
}

957 
__exô
 
	$√igh_exô
()

959 
	`∆_ˇche_mngt_uƒegi°î
(&
π∆_√igh_›s
);

960 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/neightbl.c

19 
	~<√éök-¥iv©e/√éök.h
>

20 
	~<√éök/√éök.h
>

21 
	~<√éök/utûs.h
>

22 
	~<√éök/rouã/π∆.h
>

23 
	~<√éök/rouã/√ightbl.h
>

24 
	~<√éök/rouã/lök.h
>

27 
	#NEIGHTBL_ATTR_FAMILY
 0x001

	)

28 
	#NEIGHTBL_ATTR_STATS
 0x002

	)

29 
	#NEIGHTBL_ATTR_NAME
 0x004

	)

30 
	#NEIGHTBL_ATTR_THRESH1
 0x008

	)

31 
	#NEIGHTBL_ATTR_THRESH2
 0x010

	)

32 
	#NEIGHTBL_ATTR_THRESH3
 0x020

	)

33 
	#NEIGHTBL_ATTR_CONFIG
 0x040

	)

34 
	#NEIGHTBL_ATTR_PARMS
 0x080

	)

35 
	#NEIGHTBL_ATTR_GC_INTERVAL
 0x100

	)

37 
	#NEIGHTBLPARM_ATTR_IFINDEX
 0x0001

	)

38 
	#NEIGHTBLPARM_ATTR_REFCNT
 0x0002

	)

39 
	#NEIGHTBLPARM_ATTR_QUEUE_LEN
 0x0004

	)

40 
	#NEIGHTBLPARM_ATTR_APP_PROBES
 0x0008

	)

41 
	#NEIGHTBLPARM_ATTR_UCAST_PROBES
 0x0010

	)

42 
	#NEIGHTBLPARM_ATTR_MCAST_PROBES
 0x0020

	)

43 
	#NEIGHTBLPARM_ATTR_PROXY_QLEN
 0x0040

	)

44 
	#NEIGHTBLPARM_ATTR_REACHABLE_TIME
 0x0080

	)

45 
	#NEIGHTBLPARM_ATTR_BASE_REACHABLE_TIME
 0x0100

	)

46 
	#NEIGHTBLPARM_ATTR_RETRANS_TIME
 0x0200

	)

47 
	#NEIGHTBLPARM_ATTR_GC_STALETIME
 0x0400

	)

48 
	#NEIGHTBLPARM_ATTR_DELAY_PROBE_TIME
 0x0800

	)

49 
	#NEIGHTBLPARM_ATTR_ANYCAST_DELAY
 0x1000

	)

50 
	#NEIGHTBLPARM_ATTR_PROXY_DELAY
 0x2000

	)

51 
	#NEIGHTBLPARM_ATTR_LOCKTIME
 0x4000

	)

53 
∆_ˇche_›s
 
	gπ∆_√ightbl_›s
;

54 
∆_obje˘_›s
 
	g√ightbl_obj_›s
;

57 
	$√ightbl_com∑ª
(
∆_obje˘
 *
_a
, ∆_obje˘ *
_b
,

58 
uöt32_t
 
©ås
, 
Êags
)

60 
π∆_√ightbl
 *
a
 = (π∆_√ightb»*Ë
_a
;

61 
π∆_√ightbl
 *
b
 = (π∆_√ightb»*Ë
_b
;

62 
diff
 = 0;

64 
	#NT_DIFF
(
ATTR
, 
EXPR
Ë
	`ATTR_DIFF
(
©ås
, 
NEIGHTBL_ATTR_
##ATTR, 
a
, 
b
, EXPR)

	)

66 
diff
 |
	`NT_DIFF
(
FAMILY
, 
a
->
¡_Ámûy
 !
b
->nt_family);

67 
diff
 |
	`NT_DIFF
(
NAME
, 
	`°rcmp
(
a
->
¡_«me
, 
b
->nt_name));

68 
diff
 |
	`NT_DIFF
(
THRESH1
, 
a
->
¡_gc_thªsh1
 !
b
->nt_gc_thresh1);

69 
diff
 |
	`NT_DIFF
(
THRESH2
, 
a
->
¡_gc_thªsh2
 !
b
->nt_gc_thresh2);

70 
diff
 |
	`NT_DIFF
(
THRESH3
, 
a
->
¡_gc_thªsh3
 !
b
->nt_gc_thresh3);

71 
diff
 |
	`NT_DIFF
(
GC_INTERVAL
, 
a
->
¡_gc_öãrvÆ
 !
b
->nt_gc_interval);

73 #unde‡
NT_DIFF


75 i‡(!(
a
->
˚_mask
 & 
NEIGHTBL_ATTR_PARMS
) &&

76 !(
b
->
˚_mask
 & 
NEIGHTBL_ATTR_PARMS
))

77  
diff
;

83 
	#REQ
(
F
Ë(
Â
->
¡p_mask
 & 
NEIGHTBLPARM_ATTR_
##F)

	)

84 
	#AVAIL
(
F
Ë(
›
->
¡p_mask
 & 
NEIGHTBLPARM_ATTR_
##F)

	)

85 
	#_C
(
F
, 
N
Ë(
	`REQ
(FË&& (!
	`AVAIL
(FË|| (
›
->N !
Â
->N)))

	)

86 i‡(
	`_C
(
IFINDEX
, 
¡p_ifödex
) ||

87 
	`_C
(
QUEUE_LEN
, 
¡p_queue_Àn
) ||

88 
	`_C
(
APP_PROBES
, 
¡p_≠p_¥obes
) ||

89 
	`_C
(
UCAST_PROBES
, 
¡p_uˇ°_¥obes
) ||

90 
	`_C
(
MCAST_PROBES
, 
¡p_mˇ°_¥obes
) ||

91 
	`_C
(
PROXY_QLEN
, 
¡p_¥oxy_qÀn
) ||

92 
	`_C
(
LOCKTIME
, 
¡p_locktime
) ||

93 
	`_C
(
RETRANS_TIME
, 
¡p_ªå™s_time
) ||

94 
	`_C
(
BASE_REACHABLE_TIME
, 
¡p_ba£_ªachabÀ_time
) ||

95 
	`_C
(
GC_STALETIME
, 
¡p_gc_°Æe_time
) ||

96 
	`_C
(
DELAY_PROBE_TIME
, 
¡p_¥obe_dñay
) ||

97 
	`_C
(
ANYCAST_DELAY
, 
¡p_™yˇ°_dñay
) ||

98 
	`_C
(
PROXY_DELAY
, 
¡p_¥oxy_dñay
))

100 #unde‡
REQ


101 #unde‡
AVAIL


102 #unde‡
_C


105  
diff
;

106 
	}
}

109 
∆a_pﬁicy
 
	g√ightbl_pﬁicy
[
NDTA_MAX
+1] = {

110 [
NDTA_NAME
] = { .
ty≥
 = 
NLA_STRING
,

111 .
	gmaxÀn
 = 
NTBLNAMSIZ
 },

112 [
NDTA_THRESH1
] = { .
ty≥
 = 
NLA_U32
 },

113 [
NDTA_THRESH2
] = { .
ty≥
 = 
NLA_U32
 },

114 [
NDTA_THRESH3
] = { .
ty≥
 = 
NLA_U32
 },

115 [
NDTA_GC_INTERVAL
] = { .
ty≥
 = 
NLA_U32
 },

116 [
NDTA_CONFIG
] = { .
möÀn
 = (
ndt_c⁄fig
) },

117 [
NDTA_STATS
] = { .
möÀn
 = (
ndt_°©s
) },

118 [
NDTA_PARMS
] = { .
ty≥
 = 
NLA_NESTED
 },

121 
	$√ightbl_msg_∑r£r
(
∆_ˇche_›s
 *
›s
,

122 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
,

123 
∆_∑r£r_∑øm
 *
µ
)

125 
π∆_√ightbl
 *
¡bl
;

126 
∆©å
 *
tb
[
NDTA_MAX
 + 1];

127 
πgímsg
 *
πmsg
;

128 
îr
;

130 
¡bl
 = 
	`π∆_√ightbl_Æloc
();

131 i‡(!
¡bl
) {

132 
îr
 = -
NLE_NOMEM
;

133 
îrout
;

136 
¡bl
->
˚_msgty≥
 = 
n
->
∆msg_ty≥
;

137 
πmsg
 = 
	`∆msg_d©a
(
n
);

139 
îr
 = 
	`∆msg_∑r£
(
n
, (*
πmsg
), 
tb
, 
NDTA_MAX
, 
√ightbl_pﬁicy
);

140 i‡(
îr
 < 0)

141 
îrout
;

143 
¡bl
->
¡_Ámûy
 = 
πmsg
->
πgí_Ámûy
;

145 i‡(
tb
[
NDTA_NAME
] =
NULL
) {

146 
îr
 = -
NLE_MISSING_ATTR
;

147 
îrout
;

150 
	`∆a_°æ˝y
(
¡bl
->
¡_«me
, 
tb
[
NDTA_NAME
], 
NTBLNAMSIZ
);

151 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_NAME
;

153 i‡(
tb
[
NDTA_THRESH1
]) {

154 
¡bl
->
¡_gc_thªsh1
 = 
	`∆a_gë_u32
(
tb
[
NDTA_THRESH1
]);

155 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_THRESH1
;

158 i‡(
tb
[
NDTA_THRESH2
]) {

159 
¡bl
->
¡_gc_thªsh2
 = 
	`∆a_gë_u32
(
tb
[
NDTA_THRESH2
]);

160 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_THRESH2
;

163 i‡(
tb
[
NDTA_THRESH3
]) {

164 
¡bl
->
¡_gc_thªsh3
 = 
	`∆a_gë_u32
(
tb
[
NDTA_THRESH3
]);

165 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_THRESH3
;

168 i‡(
tb
[
NDTA_GC_INTERVAL
]) {

169 
¡bl
->
¡_gc_öãrvÆ
 = 
	`∆a_gë_u32
(
tb
[
NDTA_GC_INTERVAL
]);

170 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_GC_INTERVAL
;

173 i‡(
tb
[
NDTA_CONFIG
]) {

174 
	`∆a_mem˝y
(&
¡bl
->
¡_c⁄fig
, 
tb
[
NDTA_CONFIG
],

175 (
¡bl
->
¡_c⁄fig
));

176 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_CONFIG
;

179 i‡(
tb
[
NDTA_STATS
]) {

180 
	`∆a_mem˝y
(&
¡bl
->
¡_°©s
, 
tb
[
NDTA_STATS
],

181 (
¡bl
->
¡_°©s
));

182 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_STATS
;

185 i‡(
tb
[
NDTA_PARMS
]) {

186 
∆©å
 *
tbp
[
NDTPA_MAX
 + 1];

187 
π∆_√ightbl_∑rms
 *
p
 = &
¡bl
->
¡_∑rms
;

189 
îr
 = 
	`∆a_∑r£_√°ed
(
tbp
, 
NDTPA_MAX
, 
tb
[
NDTA_PARMS
], 
NULL
);

190 i‡(
îr
 < 0)

191 
îrout
;

193 
	#COPY_ENTRY
(
«me
, 
v¨
) \

194 i‡(
tbp
[
NDTPA_
 ##
«me
]) { \

195 
p
->
¡p_
 ##
v¨
 = 
	`∆a_gë_u32
(
tbp
[
NDTPA_
 ##
«me
]); \

196 
p
->
¡p_mask
 |
NEIGHTBLPARM_ATTR_
 ##
«me
; \

197 }

	)

199 
	`COPY_ENTRY
(
IFINDEX
, 
ifödex
);

200 
	`COPY_ENTRY
(
REFCNT
, 
ªf˙t
);

201 
	`COPY_ENTRY
(
QUEUE_LEN
, 
queue_Àn
);

202 
	`COPY_ENTRY
(
APP_PROBES
, 
≠p_¥obes
);

203 
	`COPY_ENTRY
(
UCAST_PROBES
, 
uˇ°_¥obes
);

204 
	`COPY_ENTRY
(
MCAST_PROBES
, 
mˇ°_¥obes
);

205 
	`COPY_ENTRY
(
PROXY_QLEN
, 
¥oxy_qÀn
);

206 
	`COPY_ENTRY
(
PROXY_DELAY
, 
¥oxy_dñay
);

207 
	`COPY_ENTRY
(
ANYCAST_DELAY
, 
™yˇ°_dñay
);

208 
	`COPY_ENTRY
(
LOCKTIME
, 
locktime
);

209 
	`COPY_ENTRY
(
REACHABLE_TIME
, 
ªachabÀ_time
);

210 
	`COPY_ENTRY
(
BASE_REACHABLE_TIME
, 
ba£_ªachabÀ_time
);

211 
	`COPY_ENTRY
(
RETRANS_TIME
, 
ªå™s_time
);

212 
	`COPY_ENTRY
(
GC_STALETIME
, 
gc_°Æe_time
);

213 
	`COPY_ENTRY
(
DELAY_PROBE_TIME
, 
¥obe_dñay
);

214 #unde‡
COPY_ENTRY


216 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_PARMS
;

219 
îr
 = 
µ
->
	`µ_cb
((
∆_obje˘
 *Ë
¡bl
,Öp);

220 
îrout
:

221 
	`π∆_√ightbl_put
(
¡bl
);

222  
îr
;

223 
	}
}

225 
	$√ightbl_ªque°_upd©e
(
∆_ˇche
 *
c
, 
∆_sock
 *
h
)

227  
	`∆_πgí_ªque°
(
h
, 
RTM_GETNEIGHTBL
, 
AF_UNSPEC
, 
NLM_F_DUMP
);

228 
	}
}

231 
	$√ightbl_dump_löe
(
∆_obje˘
 *
¨g
, 
∆_dump_∑øms
 *
p
)

233 
π∆_√ightbl
 *
¡bl
 = (π∆_√ightb»*Ë
¨g
;

235 
	`∆_dump_löe
(
p
, "%s", 
¡bl
->
¡_«me
);

237 i‡(
¡bl
->
¡_∑rms
.
¡p_mask
 & 
NEIGHTBLPARM_ATTR_IFINDEX
) {

238 
∆_ˇche
 *
lök_ˇche
;

240 
lök_ˇche
 = 
	`∆_ˇche_mngt_ªquúe_ß„
("route/link");

242 i‡(
lök_ˇche
) {

243 
buf
[32];

244 
	`∆_dump
(
p
, "<%s> ",

245 
	`π∆_lök_i2«me
(
lök_ˇche
,

246 
¡bl
->
¡_∑rms
.
¡p_ifödex
,

247 
buf
, (buf)));

248 
	`∆_ˇche_put
(
lök_ˇche
);

250 
	`∆_dump
(
p
, "<%u> ", 
¡bl
->
¡_∑rms
.
¡p_ifödex
);

252 
	`∆_dump
(
p
, " ");

254 i‡(
¡bl
->
˚_mask
 & 
NEIGHTBL_ATTR_CONFIG
)

255 
	`∆_dump
(
p
, "íåõ†%u ", 
¡bl
->
¡_c⁄fig
.
ndtc_íåõs
);

257 i‡(
¡bl
->
˚_mask
 & 
NEIGHTBL_ATTR_PARMS
) {

258 
π
[32], 
π2
[32];

259 
π∆_√ightbl_∑rms
 *
∑
 = &
¡bl
->
¡_∑rms
;

261 
	`∆_dump
(
p
, "reachable-time %sÑetransmit-time %s",

262 
	`∆_m£c2°r
(
∑
->
¡p_ªachabÀ_time
, 
π
, (rt)),

263 
	`∆_m£c2°r
(
∑
->
¡p_ªå™s_time
, 
π2
, (rt2)));

266 
	`∆_dump
(
p
, "\n");

267 
	}
}

269 
	$√ightbl_dump_dëaûs
(
∆_obje˘
 *
¨g
, 
∆_dump_∑øms
 *
p
)

271 
x
[32], 
y
[32], 
z
[32];

272 
π∆_√ightbl
 *
¡bl
 = (π∆_√ightb»*Ë
¨g
;

274 
	`√ightbl_dump_löe
(
¨g
, 
p
);

276 i‡(
¡bl
->
˚_mask
 & 
NEIGHTBL_ATTR_CONFIG
) {

277 
	`∆_dump_löe
(
p
, " key-len %uÉntry-size %uÜast-flush %s\n",

278 
¡bl
->
¡_c⁄fig
.
ndtc_key_Àn
,

279 
¡bl
->
¡_c⁄fig
.
ndtc_íåy_size
,

280 
	`∆_m£c2°r
(
¡bl
->
¡_c⁄fig
.
ndtc_œ°_Êush
,

281 
x
, (x)));

283 
	`∆_dump_löe
(
p
, " gcÅhreshold %u/%u/%u interval %s " \

285 
¡bl
->
¡_gc_thªsh1
,Çtbl->
¡_gc_thªsh2
,

286 
¡bl
->
¡_gc_thªsh3
,

287 
	`∆_m£c2°r
(
¡bl
->
¡_gc_öãrvÆ
, 
x
, (x)),

288 
¡bl
->
¡_c⁄fig
.
ndtc_hash_chaö_gc
);

290 
	`∆_dump_löe
(
p
, " hash-rand 0x%08X/0x%08XÜast-rand %s\n",

291 
¡bl
->
¡_c⁄fig
.
ndtc_hash_∫d
,

292 
¡bl
->
¡_c⁄fig
.
ndtc_hash_mask
,

293 
	`∆_m£c2°r
(
¡bl
->
¡_c⁄fig
.
ndtc_œ°_ønd
,

294 
x
, (x)));

297 i‡(
¡bl
->
˚_mask
 & 
NEIGHTBL_ATTR_PARMS
) {

298 
π∆_√ightbl_∑rms
 *
∑
 = &
¡bl
->
¡_∑rms
;

300 
	`∆_dump_löe
(
p
, "Ñefcnt %uÖending-queue-limit %u " \

302 
∑
->
¡p_ªf˙t
,

303 
∑
->
¡p_queue_Àn
,

304 
∑
->
¡p_¥oxy_qÀn
);

306 
	`∆_dump_löe
(
p
, "Çum-userspace-probes %uÇum-unicast-probes " \

308 
∑
->
¡p_≠p_¥obes
,

309 
∑
->
¡p_uˇ°_¥obes
,

310 
∑
->
¡p_mˇ°_¥obes
);

312 
	`∆_dump_löe
(
p
, " min-age %s base-reachable-time %s " \

314 
	`∆_m£c2°r
(
∑
->
¡p_locktime
, 
x
, (x)),

315 
	`∆_m£c2°r
(
∑
->
¡p_ba£_ªachabÀ_time
,

316 
y
, (y)),

317 
	`∆_m£c2°r
(
∑
->
¡p_gc_°Æe_time
, 
z
, (z)));

319 
	`∆_dump_löe
(
p
, " initial-probe-delay %sánswer-delay %s " \

321 
	`∆_m£c2°r
(
∑
->
¡p_¥obe_dñay
, 
x
, (x)),

322 
	`∆_m£c2°r
(
∑
->
¡p_™yˇ°_dñay
, 
y
, (y)),

323 
	`∆_m£c2°r
(
∑
->
¡p_¥oxy_dñay
, 
z
, (z)));

325 
	}
}

327 
	$√ightbl_dump_°©s
(
∆_obje˘
 *
¨g
, 
∆_dump_∑øms
 *
p
)

329 
π∆_√ightbl
 *
¡bl
 = (π∆_√ightb»*Ë
¨g
;

331 
	`√ightbl_dump_dëaûs
(
¨g
, 
p
);

333 i‡(!(
¡bl
->
˚_mask
 & 
NEIGHTBL_ATTR_STATS
))

336 
	`∆_dump_löe
(
p
, " " \

337 "Üookup†%" 
PRIu64
 \

338 " hô†%" 
PRIu64
 \

339 " faûed %" 
PRIu64
 \

340 "áŒoˇti⁄†%" 
PRIu64
 \

341 " de°roy†%" 
PRIu64
 \

343 
¡bl
->
¡_°©s
.
ndts_lookups
,

344 
¡bl
->
¡_°©s
.
ndts_hôs
,

345 
¡bl
->
¡_°©s
.
ndts_ªs_Áûed
,

346 
¡bl
->
¡_°©s
.
ndts_Ælocs
,

347 
¡bl
->
¡_°©s
.
ndts_de°roys
);

349 
	`∆_dump_löe
(
p
, " " \

350 " hash-grow†%" 
PRIu64
 \

351 " f‹˚d-gc-run†%" 
PRIu64
 \

352 "Öîiodic-gc-run†%" 
PRIu64
 \

354 
¡bl
->
¡_°©s
.
ndts_hash_grows
,

355 
¡bl
->
¡_°©s
.
ndts_f‹˚d_gc_runs
,

356 
¡bl
->
¡_°©s
.
ndts_≥riodic_gc_runs
);

358 
	`∆_dump_löe
(
p
, " " \

359 "Ñcv-uniˇ°-¥obe†%" 
PRIu64
 \

360 "Ñcv-mu…iˇ°-¥obe†%" 
PRIu64
 \

362 
¡bl
->
¡_°©s
.
ndts_rcv_¥obes_uˇ°
,

363 
¡bl
->
¡_°©s
.
ndts_rcv_¥obes_mˇ°
);

364 
	}
}

371 
π∆_√ightbl
 *
	$π∆_√ightbl_Æloc
()

373  (
π∆_√ightbl
 *Ë
	`∆_obje˘_Æloc
(&
√ightbl_obj_›s
);

374 
	}
}

376 
	$π∆_√ightbl_put
(
π∆_√ightbl
 *
√ightbl
)

378 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
√ightbl
);

379 
	}
}

399 
	$π∆_√ightbl_Æloc_ˇche
(
∆_sock
 *
sk
, 
∆_ˇche
 **
ªsu…
)

401  
	`∆_ˇche_Æloc_™d_fûl
(&
π∆_√ightbl_›s
, 
sk
, 
ªsu…
);

402 
	}
}

417 
π∆_√ightbl
 *
	$π∆_√ightbl_gë
(
∆_ˇche
 *
ˇche
,

418 c⁄° *
«me
, 
ifödex
)

420 
π∆_√ightbl
 *
¡
;

422 i‡(
ˇche
->
c_›s
 !&
π∆_√ightbl_›s
)

423  
NULL
;

425 
	`∆_li°_f‹_óch_íåy
(
¡
, &
ˇche
->
c_ôems
, 
˚_li°
) {

426 i‡(!
	`°rˇ£cmp
(
¡
->
¡_«me
, 
«me
) &&

427 ((!
ifödex
 && !
¡
->
¡_∑rms
.
¡p_ifödex
) ||

428 (
ifödex
 && ifödex =
¡
->
¡_∑rms
.
¡p_ifödex
))) {

429 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
¡
);

430  
¡
;

434  
NULL
;

435 
	}
}

460 
	$π∆_√ightbl_buûd_ch™ge_ªque°
(
π∆_√ightbl
 *
ﬁd
,

461 
π∆_√ightbl
 *
tm∂
,

462 
∆_msg
 **
ªsu…
)

464 
∆_msg
 *
m
, *
∑rms
 = 
NULL
;

465 
ndtmsg
 
ndt
 = {

466 .
ndtm_Ámûy
 = 
ﬁd
->
¡_Ámûy
,

469 
m
 = 
	`∆msg_Æloc_sim∂e
(
RTM_SETNEIGHTBL
, 0);

470 i‡(!
m
)

471  -
NLE_NOMEM
;

473 i‡(
	`∆msg_≠≥nd
(
m
, &
ndt
, “dt), 
NLMSG_ALIGNTO
) < 0)

474 
∆a_put_Áûuª
;

476 
	`NLA_PUT_STRING
(
m
, 
NDTA_NAME
, 
ﬁd
->
¡_«me
);

478 i‡(
tm∂
->
˚_mask
 & 
NEIGHTBL_ATTR_THRESH1
)

479 
	`NLA_PUT_U32
(
m
, 
NDTA_THRESH1
, 
tm∂
->
¡_gc_thªsh1
);

481 i‡(
tm∂
->
˚_mask
 & 
NEIGHTBL_ATTR_THRESH2
)

482 
	`NLA_PUT_U32
(
m
, 
NDTA_THRESH2
, 
tm∂
->
¡_gc_thªsh2
);

484 i‡(
tm∂
->
˚_mask
 & 
NEIGHTBL_ATTR_THRESH2
)

485 
	`NLA_PUT_U32
(
m
, 
NDTA_THRESH2
, 
tm∂
->
¡_gc_thªsh2
);

487 i‡(
tm∂
->
˚_mask
 & 
NEIGHTBL_ATTR_GC_INTERVAL
)

488 
	`NLA_PUT_U64
(
m
, 
NDTA_GC_INTERVAL
,

489 
tm∂
->
¡_gc_öãrvÆ
);

491 i‡(
tm∂
->
˚_mask
 & 
NEIGHTBL_ATTR_PARMS
) {

492 
π∆_√ightbl_∑rms
 *
p
 = &
tm∂
->
¡_∑rms
;

494 
∑rms
 = 
	`∆msg_Æloc
();

495 i‡(!
∑rms
)

496 
∆a_put_Áûuª
;

498 i‡(
ﬁd
->
¡_∑rms
.
¡p_mask
 & 
NEIGHTBLPARM_ATTR_IFINDEX
)

499 
	`NLA_PUT_U32
(
∑rms
, 
NDTPA_IFINDEX
,

500 
ﬁd
->
¡_∑rms
.
¡p_ifödex
);

503 i‡(
p
->
¡p_mask
 & 
NEIGHTBLPARM_ATTR_QUEUE_LEN
)

504 
	`NLA_PUT_U32
(
∑rms
, 
NDTPA_QUEUE_LEN
, 
p
->
¡p_queue_Àn
);

506 i‡(
p
->
¡p_mask
 & 
NEIGHTBLPARM_ATTR_APP_PROBES
)

507 
	`NLA_PUT_U32
(
∑rms
, 
NDTPA_APP_PROBES
, 
p
->
¡p_≠p_¥obes
);

509 i‡(
p
->
¡p_mask
 & 
NEIGHTBLPARM_ATTR_UCAST_PROBES
)

510 
	`NLA_PUT_U32
(
∑rms
, 
NDTPA_UCAST_PROBES
,

511 
p
->
¡p_uˇ°_¥obes
);

513 i‡(
p
->
¡p_mask
 & 
NEIGHTBLPARM_ATTR_MCAST_PROBES
)

514 
	`NLA_PUT_U32
(
∑rms
, 
NDTPA_MCAST_PROBES
,

515 
p
->
¡p_mˇ°_¥obes
);

517 i‡(
p
->
¡p_mask
 & 
NEIGHTBLPARM_ATTR_PROXY_QLEN
)

518 
	`NLA_PUT_U32
(
∑rms
, 
NDTPA_PROXY_QLEN
,

519 
p
->
¡p_¥oxy_qÀn
);

521 i‡(
p
->
¡p_mask
 & 
NEIGHTBLPARM_ATTR_BASE_REACHABLE_TIME
)

522 
	`NLA_PUT_U64
(
∑rms
, 
NDTPA_BASE_REACHABLE_TIME
,

523 
p
->
¡p_ba£_ªachabÀ_time
);

525 i‡(
p
->
¡p_mask
 & 
NEIGHTBLPARM_ATTR_RETRANS_TIME
)

526 
	`NLA_PUT_U64
(
∑rms
, 
NDTPA_RETRANS_TIME
,

527 
p
->
¡p_ªå™s_time
);

529 i‡(
p
->
¡p_mask
 & 
NEIGHTBLPARM_ATTR_GC_STALETIME
)

530 
	`NLA_PUT_U64
(
∑rms
, 
NDTPA_GC_STALETIME
,

531 
p
->
¡p_gc_°Æe_time
);

533 i‡(
p
->
¡p_mask
 & 
NEIGHTBLPARM_ATTR_DELAY_PROBE_TIME
)

534 
	`NLA_PUT_U64
(
∑rms
, 
NDTPA_DELAY_PROBE_TIME
,

535 
p
->
¡p_¥oxy_dñay
);

537 i‡(
p
->
¡p_mask
 & 
NEIGHTBLPARM_ATTR_ANYCAST_DELAY
)

538 
	`NLA_PUT_U64
(
∑rms
, 
NDTPA_ANYCAST_DELAY
,

539 
p
->
¡p_™yˇ°_dñay
);

541 i‡(
p
->
¡p_mask
 & 
NEIGHTBLPARM_ATTR_PROXY_DELAY
)

542 
	`NLA_PUT_U64
(
∑rms
, 
NDTPA_PROXY_DELAY
,

543 
p
->
¡p_¥oxy_dñay
);

545 i‡(
p
->
¡p_mask
 & 
NEIGHTBLPARM_ATTR_LOCKTIME
)

546 
	`NLA_PUT_U64
(
∑rms
, 
NDTPA_LOCKTIME
, 
p
->
¡p_locktime
);

548 i‡(
	`∆a_put_√°ed
(
m
, 
NDTA_PARMS
, 
∑rms
) < 0)

549 
∆a_put_Áûuª
;

551 
	`∆msg_‰ì
(
∑rms
);

554 *
ªsu…
 = 
m
;

557 
∆a_put_Áûuª
:

558 i‡(
∑rms
)

559 
	`∆msg_‰ì
(
∑rms
);

560 
	`∆msg_‰ì
(
m
);

561  -
NLE_MSGSIZE
;

562 
	}
}

577 
	$π∆_√ightbl_ch™ge
(
∆_sock
 *
sk
, 
π∆_√ightbl
 *
ﬁd
,

578 
π∆_√ightbl
 *
tm∂
)

580 
∆_msg
 *
msg
;

581 
îr
;

583 i‡((
îr
 = 
	`π∆_√ightbl_buûd_ch™ge_ªque°
(
ﬁd
, 
tm∂
, &
msg
)) < 0)

584  
îr
;

586 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sk
, 
msg
);

587 
	`∆msg_‰ì
(
msg
);

588 i‡(
îr
 < 0)

589  
îr
;

591  
	`waô_f‹_ack
(
sk
);

592 
	}
}

601 
	$π∆_√ightbl_£t_Ámûy
(
π∆_√ightbl
 *
¡bl
, 
Ámûy
)

603 
¡bl
->
¡_Ámûy
 = 
Ámûy
;

604 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_FAMILY
;

605 
	}
}

607 
	$π∆_√ightbl_£t_gc_öãrvÆ
(
π∆_√ightbl
 *
¡bl
, 
uöt64_t
 
ms
)

609 
¡bl
->
¡_gc_öãrvÆ
 = 
ms
;

610 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_GC_INTERVAL
;

611 
	}
}

613 
	$π∆_√ightbl_£t_gc_åesh1
(
π∆_√ightbl
 *
¡bl
, 
thªsh
)

615 
¡bl
->
¡_gc_thªsh1
 = 
thªsh
;

616 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_THRESH1
;

617 
	}
}

619 
	$π∆_√ightbl_£t_gc_åesh2
(
π∆_√ightbl
 *
¡bl
, 
thªsh
)

621 
¡bl
->
¡_gc_thªsh2
 = 
thªsh
;

622 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_THRESH2
;

623 
	}
}

625 
	$π∆_√ightbl_£t_gc_åesh3
(
π∆_√ightbl
 *
¡bl
, 
thªsh
)

627 
¡bl
->
¡_gc_thªsh3
 = 
thªsh
;

628 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_THRESH3
;

629 
	}
}

631 
	$π∆_√ightbl_£t_«me
(
π∆_√ightbl
 *
¡bl
, c⁄° *
«me
)

633 
	`°∫˝y
(
¡bl
->
¡_«me
, 
«me
, (ntbl->nt_name) - 1);

634 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_NAME
;

635 
	}
}

637 
	$π∆_√ightbl_£t_dev
(
π∆_√ightbl
 *
¡bl
, 
ifödex
)

639 
¡bl
->
¡_∑rms
.
¡p_ifödex
 = 
ifödex
;

640 
¡bl
->
¡_∑rms
.
¡p_mask
 |
NEIGHTBLPARM_ATTR_IFINDEX
;

641 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_PARMS
;

642 
	}
}

649 
	$π∆_√ightbl_£t_queue_Àn
(
π∆_√ightbl
 *
¡bl
, 
Àn
)

651 
¡bl
->
¡_∑rms
.
¡p_queue_Àn
 = 
Àn
;

652 
¡bl
->
¡_∑rms
.
¡p_mask
 |
NEIGHTBLPARM_ATTR_QUEUE_LEN
;

653 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_PARMS
;

654 
	}
}

661 
	$π∆_√ightbl_£t_¥oxy_queue_Àn
(
π∆_√ightbl
 *
¡bl
, 
Àn
)

663 
¡bl
->
¡_∑rms
.
¡p_¥oxy_qÀn
 = 
Àn
;

664 
¡bl
->
¡_∑rms
.
¡p_mask
 |
NEIGHTBLPARM_ATTR_PROXY_QLEN
;

665 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_PARMS
;

666 
	}
}

673 
	$π∆_√ightbl_£t_≠p_¥obes
(
π∆_√ightbl
 *
¡bl
, 
¥obes
)

675 
¡bl
->
¡_∑rms
.
¡p_≠p_¥obes
 = 
¥obes
;

676 
¡bl
->
¡_∑rms
.
¡p_mask
 |
NEIGHTBLPARM_ATTR_APP_PROBES
;

677 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_PARMS
;

678 
	}
}

685 
	$π∆_√ightbl_£t_uˇ°_¥obes
(
π∆_√ightbl
 *
¡bl
, 
¥obes
)

687 
¡bl
->
¡_∑rms
.
¡p_uˇ°_¥obes
 = 
¥obes
;

688 
¡bl
->
¡_∑rms
.
¡p_mask
 |
NEIGHTBLPARM_ATTR_UCAST_PROBES
;

689 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_PARMS
;

690 
	}
}

697 
	$π∆_√ightbl_£t_mˇ°_¥obes
(
π∆_√ightbl
 *
¡bl
, 
¥obes
)

699 
¡bl
->
¡_∑rms
.
¡p_mˇ°_¥obes
 = 
¥obes
;

700 
¡bl
->
¡_∑rms
.
¡p_mask
 |
NEIGHTBLPARM_ATTR_MCAST_PROBES
;

701 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_PARMS
;

702 
	}
}

709 
	$π∆_√ightbl_£t_ba£_ªachabÀ_time
(
π∆_√ightbl
 *
¡bl
,

710 
uöt64_t
 
ms
)

712 
¡bl
->
¡_∑rms
.
¡p_ba£_ªachabÀ_time
 = 
ms
;

713 
¡bl
->
¡_∑rms
.
¡p_mask
 |
NEIGHTBLPARM_ATTR_BASE_REACHABLE_TIME
;

714 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_PARMS
;

715 
	}
}

722 
	$π∆_√ightbl_£t_ªå™s_time
(
π∆_√ightbl
 *
¡bl
, 
uöt64_t
 
ms
)

724 
¡bl
->
¡_∑rms
.
¡p_ªå™s_time
 = 
ms
;

725 
¡bl
->
¡_∑rms
.
¡p_mask
 |
NEIGHTBLPARM_ATTR_RETRANS_TIME
;

726 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_PARMS
;

727 
	}
}

734 
	$π∆_√ightbl_£t_gc_°Æe_time
(
π∆_√ightbl
 *
¡bl
, 
uöt64_t
 
ms
)

736 
¡bl
->
¡_∑rms
.
¡p_gc_°Æe_time
 = 
ms
;

737 
¡bl
->
¡_∑rms
.
¡p_mask
 |
NEIGHTBLPARM_ATTR_GC_STALETIME
;

738 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_PARMS
;

739 
	}
}

746 
	$π∆_√ightbl_£t_dñay_¥obe_time
(
π∆_√ightbl
 *
¡bl
, 
uöt64_t
 
ms
)

748 
¡bl
->
¡_∑rms
.
¡p_¥obe_dñay
 = 
ms
;

749 
¡bl
->
¡_∑rms
.
¡p_mask
 |
NEIGHTBLPARM_ATTR_DELAY_PROBE_TIME
;

750 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_PARMS
;

751 
	}
}

758 
	$π∆_√ightbl_£t_™yˇ°_dñay
(
π∆_√ightbl
 *
¡bl
, 
uöt64_t
 
ms
)

760 
¡bl
->
¡_∑rms
.
¡p_™yˇ°_dñay
 = 
ms
;

761 
¡bl
->
¡_∑rms
.
¡p_mask
 |
NEIGHTBLPARM_ATTR_ANYCAST_DELAY
;

762 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_PARMS
;

763 
	}
}

770 
	$π∆_√ightbl_£t_¥oxy_dñay
(
π∆_√ightbl
 *
¡bl
, 
uöt64_t
 
ms
)

772 
¡bl
->
¡_∑rms
.
¡p_¥oxy_dñay
 = 
ms
;

773 
¡bl
->
¡_∑rms
.
¡p_mask
 |
NEIGHTBLPARM_ATTR_PROXY_DELAY
;

774 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_PARMS
;

775 
	}
}

782 
	$π∆_√ightbl_£t_locktime
(
π∆_√ightbl
 *
¡bl
, 
uöt64_t
 
ms
)

784 
¡bl
->
¡_∑rms
.
¡p_locktime
 = 
ms
;

785 
¡bl
->
¡_∑rms
.
¡p_mask
 |
NEIGHTBLPARM_ATTR_LOCKTIME
;

786 
¡bl
->
˚_mask
 |
NEIGHTBL_ATTR_PARMS
;

787 
	}
}

791 
∆_obje˘_›s
 
	g√ightbl_obj_›s
 = {

792 .
oo_«me
 = "route/neightbl",

793 .
	goo_size
 = (
π∆_√ightbl
),

794 .
	goo_dump
 = {

795 [
NL_DUMP_LINE
] = 
√ightbl_dump_löe
,

796 [
NL_DUMP_DETAILS
] = 
√ightbl_dump_dëaûs
,

797 [
NL_DUMP_STATS
] = 
√ightbl_dump_°©s
,

799 .
	goo_com∑ª
 = 
√ightbl_com∑ª
,

802 
∆_ˇche_›s
 
	gπ∆_√ightbl_›s
 = {

803 .
co_«me
 = "route/neightbl",

804 .
	gco_hdrsize
 = (
πgímsg
),

805 .
	gco_msgty≥s
 = {

806 { 
RTM_NEWNEIGHTBL
, 
NL_ACT_NEW
, "new" },

807 { 
RTM_SETNEIGHTBL
, 
NL_ACT_SET
, "set" },

808 { 
RTM_GETNEIGHTBL
, 
NL_ACT_GET
, "get" },

809 
END_OF_MSGTYPES_LIST
,

811 .
	gco_¥Ÿocﬁ
 = 
NETLINK_ROUTE
,

812 .
	gco_ªque°_upd©e
 = 
√ightbl_ªque°_upd©e
,

813 .
	gco_msg_∑r£r
 = 
√ightbl_msg_∑r£r
,

814 .
	gco_obj_›s
 = &
√ightbl_obj_›s
,

817 
__öô
 
	$√ightbl_öô
()

819 
	`∆_ˇche_mngt_ªgi°î
(&
π∆_√ightbl_›s
);

820 
	}
}

822 
__exô
 
	$√ightbl_exô
()

824 
	`∆_ˇche_mngt_uƒegi°î
(&
π∆_√ightbl_›s
);

825 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/nexthop.c

18 
	~<√éök-¥iv©e/√éök.h
>

19 
	~<√éök/√éök.h
>

20 
	~<√éök/utûs.h
>

21 
	~<√éök/rouã/π∆.h
>

22 
	~<√éök/rouã/rouã.h
>

25 
	#NH_ATTR_FLAGS
 0x000001

	)

26 
	#NH_ATTR_WEIGHT
 0x000002

	)

27 
	#NH_ATTR_IFINDEX
 0x000004

	)

28 
	#NH_ATTR_GATEWAY
 0x000008

	)

29 
	#NH_ATTR_REALMS
 0x000010

	)

37 
π∆_√xth›
 *
	$π∆_rouã_nh_Æloc
()

39 
π∆_√xth›
 *
nh
;

41 
nh
 = 
	`ˇŒoc
(1, (*nh));

42 i‡(!
nh
)

43  
NULL
;

45 
	`∆_öô_li°_hód
(&
nh
->
πnh_li°
);

47  
nh
;

48 
	}
}

50 
π∆_√xth›
 *
	$π∆_rouã_nh_˛⁄e
(
π∆_√xth›
 *
§c
)

52 
π∆_√xth›
 *
nh
;

54 
nh
 = 
	`π∆_rouã_nh_Æloc
();

55 i‡(!
nh
)

56  
NULL
;

58 
nh
->
πnh_Êags
 = 
§c
->rtnh_flags;

59 
nh
->
πnh_Êag_mask
 = 
§c
->rtnh_flag_mask;

60 
nh
->
πnh_weight
 = 
§c
->rtnh_weight;

61 
nh
->
πnh_ifödex
 = 
§c
->rtnh_ifindex;

62 
nh
->
˚_mask
 = 
§c
->ce_mask;

64 i‡(
§c
->
πnh_g©eway
) {

65 
nh
->
πnh_g©eway
 = 
	`∆_addr_˛⁄e
(
§c
->rtnh_gateway);

66 i‡(!
nh
->
πnh_g©eway
) {

67 
	`‰ì
(
nh
);

68  
NULL
;

72  
nh
;

73 
	}
}

75 
	$π∆_rouã_nh_‰ì
(
π∆_√xth›
 *
nh
)

77 
	`∆_addr_put
(
nh
->
πnh_g©eway
);

78 
	`‰ì
(
nh
);

79 
	}
}

83 
	$π∆_rouã_nh_com∑ª
(
π∆_√xth›
 *
a
, π∆_√xth› *
b
,

84 
uöt32_t
 
©ås
, 
loo£
)

86 
diff
 = 0;

88 
	#NH_DIFF
(
ATTR
, 
EXPR
Ë
	`ATTR_DIFF
(
©ås
, 
NH_ATTR_
##ATTR, 
a
, 
b
, EXPR)

	)

90 
diff
 |
	`NH_DIFF
(
IFINDEX
, 
a
->
πnh_ifödex
 !
b
->rtnh_ifindex);

91 
diff
 |
	`NH_DIFF
(
WEIGHT
, 
a
->
πnh_weight
 !
b
->rtnh_weight);

92 
diff
 |
	`NH_DIFF
(
REALMS
, 
a
->
πnh_ªÆms
 !
b
->rtnh_realms);

93 
diff
 |
	`NH_DIFF
(
GATEWAY
, 
	`∆_addr_cmp
(
a
->
πnh_g©eway
,

94 
b
->
πnh_g©eway
));

96 i‡(
loo£
)

97 
diff
 |
	`NH_DIFF
(
FLAGS
,

98 (
a
->
πnh_Êags
 ^ 
b
->πnh_ÊagsË& b->
πnh_Êag_mask
);

100 
diff
 |
	`NH_DIFF
(
FLAGS
, 
a
->
πnh_Êags
 !
b
->rtnh_flags);

102 #unde‡
NH_DIFF


104  
diff
;

105 
	}
}

107 
	$nh_dump_löe
(
π∆_√xth›
 *
nh
, 
∆_dump_∑øms
 *
dp
)

109 
∆_ˇche
 *
lök_ˇche
;

110 
buf
[128];

112 
lök_ˇche
 = 
	`∆_ˇche_mngt_ªquúe_ß„
("route/link");

114 
	`∆_dump
(
dp
, "via");

116 i‡(
nh
->
˚_mask
 & 
NH_ATTR_GATEWAY
)

117 
	`∆_dump
(
dp
, " %s", 
	`∆_addr2°r
(
nh
->
πnh_g©eway
,

118 
buf
, (buf)));

120 if(
nh
->
˚_mask
 & 
NH_ATTR_IFINDEX
) {

121 i‡(
lök_ˇche
) {

122 
	`∆_dump
(
dp
, " dev %s",

123 
	`π∆_lök_i2«me
(
lök_ˇche
,

124 
nh
->
πnh_ifödex
,

125 
buf
, (buf)));

127 
	`∆_dump
(
dp
, " dev %d", 
nh
->
πnh_ifödex
);

130 
	`∆_dump
(
dp
, " ");

132 i‡(
lök_ˇche
)

133 
	`∆_ˇche_put
(
lök_ˇche
);

134 
	}
}

136 
	$nh_dump_dëaûs
(
π∆_√xth›
 *
nh
, 
∆_dump_∑øms
 *
dp
)

138 
∆_ˇche
 *
lök_ˇche
;

139 
buf
[128];

141 
lök_ˇche
 = 
	`∆_ˇche_mngt_ªquúe_ß„
("route/link");

143 
	`∆_dump
(
dp
, "nexthop");

145 i‡(
nh
->
˚_mask
 & 
NH_ATTR_GATEWAY
)

146 
	`∆_dump
(
dp
, " vü %s", 
	`∆_addr2°r
(
nh
->
πnh_g©eway
,

147 
buf
, (buf)));

149 if(
nh
->
˚_mask
 & 
NH_ATTR_IFINDEX
) {

150 i‡(
lök_ˇche
) {

151 
	`∆_dump
(
dp
, " dev %s",

152 
	`π∆_lök_i2«me
(
lök_ˇche
,

153 
nh
->
πnh_ifödex
,

154 
buf
, (buf)));

156 
	`∆_dump
(
dp
, " dev %d", 
nh
->
πnh_ifödex
);

159 i‡(
nh
->
˚_mask
 & 
NH_ATTR_WEIGHT
)

160 
	`∆_dump
(
dp
, " weighà%u", 
nh
->
πnh_weight
);

162 i‡(
nh
->
˚_mask
 & 
NH_ATTR_REALMS
)

163 
	`∆_dump
(
dp
, "Ñealm %04x:%04x",

164 
	`RTNL_REALM_FROM
(
nh
->
πnh_ªÆms
),

165 
	`RTNL_REALM_TO
(
nh
->
πnh_ªÆms
));

167 i‡(
nh
->
˚_mask
 & 
NH_ATTR_FLAGS
)

168 
	`∆_dump
(
dp
, " <%s>", 
	`π∆_rouã_nh_Êags2°r
(
nh
->
πnh_Êags
,

169 
buf
, (buf)));

171 i‡(
lök_ˇche
)

172 
	`∆_ˇche_put
(
lök_ˇche
);

173 
	}
}

175 
	$π∆_rouã_nh_dump
(
π∆_√xth›
 *
nh
, 
∆_dump_∑øms
 *
dp
)

177 
dp
->
dp_ty≥
) {

178 
NL_DUMP_LINE
:

179 
	`nh_dump_löe
(
nh
, 
dp
);

182 
NL_DUMP_DETAILS
:

183 
NL_DUMP_STATS
:

184 i‡(
dp
->
dp_iv¨
 =
NH_DUMP_FROM_DETAILS
)

185 
	`nh_dump_dëaûs
(
nh
, 
dp
);

191 
	}
}

198 
	$π∆_rouã_nh_£t_weight
(
π∆_√xth›
 *
nh
, 
uöt8_t
 
weight
)

200 
nh
->
πnh_weight
 = 
weight
;

201 
nh
->
˚_mask
 |
NH_ATTR_WEIGHT
;

202 
	}
}

204 
uöt8_t
 
	$π∆_rouã_nh_gë_weight
(
π∆_√xth›
 *
nh
)

206  
nh
->
πnh_weight
;

207 
	}
}

209 
	$π∆_rouã_nh_£t_ifödex
(
π∆_√xth›
 *
nh
, 
ifödex
)

211 
nh
->
πnh_ifödex
 = 
ifödex
;

212 
nh
->
˚_mask
 |
NH_ATTR_IFINDEX
;

213 
	}
}

215 
	$π∆_rouã_nh_gë_ifödex
(
π∆_√xth›
 *
nh
)

217  
nh
->
πnh_ifödex
;

218 
	}
}

221 
	$π∆_rouã_nh_£t_g©eway
(
π∆_√xth›
 *
nh
, 
∆_addr
 *
addr
)

223 
∆_addr
 *
ﬁd
 = 
nh
->
πnh_g©eway
;

225 i‡(
addr
) {

226 
nh
->
πnh_g©eway
 = 
	`∆_addr_gë
(
addr
);

227 
nh
->
˚_mask
 |
NH_ATTR_GATEWAY
;

229 
nh
->
˚_mask
 &~
NH_ATTR_GATEWAY
;

230 
nh
->
πnh_g©eway
 = 
NULL
;

233 i‡(
ﬁd
)

234 
	`∆_addr_put
(
ﬁd
);

235 
	}
}

237 
∆_addr
 *
	$π∆_rouã_nh_gë_g©eway
(
π∆_√xth›
 *
nh
)

239  
nh
->
πnh_g©eway
;

240 
	}
}

242 
	$π∆_rouã_nh_£t_Êags
(
π∆_√xth›
 *
nh
, 
Êags
)

244 
nh
->
πnh_Êag_mask
 |
Êags
;

245 
nh
->
πnh_Êags
 |
Êags
;

246 
nh
->
˚_mask
 |
NH_ATTR_FLAGS
;

247 
	}
}

249 
	$π∆_rouã_nh_un£t_Êags
(
π∆_√xth›
 *
nh
, 
Êags
)

251 
nh
->
πnh_Êag_mask
 |
Êags
;

252 
nh
->
πnh_Êags
 &~
Êags
;

253 
nh
->
˚_mask
 |
NH_ATTR_FLAGS
;

254 
	}
}

256 
	$π∆_rouã_nh_gë_Êags
(
π∆_√xth›
 *
nh
)

258  
nh
->
πnh_Êags
;

259 
	}
}

261 
	$π∆_rouã_nh_£t_ªÆms
(
π∆_√xth›
 *
nh
, 
uöt32_t
 
ªÆms
)

263 
nh
->
πnh_ªÆms
 = 
ªÆms
;

264 
nh
->
˚_mask
 |
NH_ATTR_REALMS
;

265 
	}
}

267 
uöt32_t
 
	$π∆_rouã_nh_gë_ªÆms
(
π∆_√xth›
 *
nh
)

269  
nh
->
πnh_ªÆms
;

270 
	}
}

279 c⁄° 
å™s_tbl
 
	gnh_Êags
[] = {

280 
__ADD
(
RTNH_F_DEAD
, 
dód
)

281 
__ADD
(
RTNH_F_PERVASIVE
, 
≥rvasive
)

282 
__ADD
(
RTNH_F_ONLINK
, 
⁄lök
)

285 *
	$π∆_rouã_nh_Êags2°r
(
Êags
, *
buf
, 
size_t
 
Àn
)

287  
	`__Êags2°r
(
Êags
, 
buf
, 
Àn
, 
nh_Êags
, 
	`ARRAY_SIZE
(nh_flags));

288 
	}
}

290 
	$π∆_rouã_nh_°r2Êags
(c⁄° *
«me
)

292  
	`__°r2Êags
(
«me
, 
nh_Êags
, 
	`ARRAY_SIZE
(nh_flags));

293 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/pktloc.c

34 
	~<√éök-¥iv©e/√éök.h
>

35 
	~<√éök-¥iv©e/tc.h
>

36 
	~<√éök/√éök.h
>

37 
	~<√éök/utûs.h
>

38 
	~<√éök/rouã/pkéoc.h
>

40 
	~"pkéoc_sy¡ax.h
"

41 
	~"pkéoc_gømm¨.h
"

44 
	#PKTLOC_NAME_HT_SIZ
 256

	)

46 
∆_li°_hód
 
	gpkéoc_«me_ht
[
PKTLOC_NAME_HT_SIZ
];

49 
	$pkéoc_hash
(c⁄° *
°r
)

51 
hash
 = 5381;

52 
c
;

54 (
c
 = *
°r
++))

55 
hash
 = ((hash << 5Ë+ hashË+ 
c
;

57  
hash
 % 
PKTLOC_NAME_HT_SIZ
;

58 
	}
}

60 
	$__pkéoc_lookup
(c⁄° *
«me
, 
π∆_pkéoc
 **
ªsu…
)

62 
π∆_pkéoc
 *
loc
;

63 
hash
;

65 
hash
 = 
	`pkéoc_hash
(
«me
);

66 
	`∆_li°_f‹_óch_íåy
(
loc
, &
pkéoc_«me_ht
[
hash
], 
li°
) {

67 i‡(!
	`°rˇ£cmp
(
loc
->
«me
,Çame)) {

68 
loc
->
ªf˙t
++;

69 *
ªsu…
 = 
loc
;

74  -
NLE_OBJ_NOTFOUND
;

75 
	}
}

77 
pkéoc_∑r£
(*
sˇ¬î
);

79 
	$π∆_pkéoc_‰ì
(
π∆_pkéoc
 *
loc
)

81 i‡(!
loc
)

84 
	`‰ì
(
loc
->
«me
);

85 
	`‰ì
(
loc
);

86 
	}
}

88 
	$ªad_pkéocs
()

90 
YY_BUFFER_STATE
 
buf
 = 
NULL
;

91 
yysˇn_t
 
sˇ¬î
 = 
NULL
;

92 
time_t
 
œ°_ªad
;

93 
°©
 
°
;

94 *
∑th
;

95 
i
, 
îr
;

96 
FILE
 *
fd
;

98 i‡(
	`buûd_sysc⁄f_∑th
(&
∑th
, "pktloc") < 0)

99  -
NLE_NOMEM
;

102 i‡(
	`°©
(
∑th
, &
°
) == 0) {

104 i‡(
œ°_ªad
 =
°
.
°_mtime
)

108 
	`NL_DBG
(2, "RódögÖackëÜoˇti⁄ fûê\"%s\"\n", 
∑th
);

110 i‡(!(
fd
 = 
	`f›í
(
∑th
, "r"))) {

111 
îr
 = -
NLE_PKTLOC_FILE
;

112 
îrout
;

115 
i
 = 0; i < 
PKTLOC_NAME_HT_SIZ
; i++) {

116 
π∆_pkéoc
 *
loc
, *
n
;

118 
	`∆_li°_f‹_óch_íåy_ß„
(
loc
, 
n
, &
pkéoc_«me_ht
[
i
], 
li°
)

119 
	`π∆_pkéoc_put
(
loc
);

121 
	`∆_öô_li°_hód
(&
pkéoc_«me_ht
[
i
]);

124 i‡((
îr
 = 
	`pkéoc_Àx_öô
(&
sˇ¬î
)) < 0) {

125 
îr
 = -
NLE_FAILURE
;

126 
îrout_˛o£
;

129 
buf
 = 
	`pkéoc__¸óã_buf„r
(
fd
, 
YY_BUF_SIZE
, 
sˇ¬î
);

130 
	`pkéoc__swôch_to_buf„r
(
buf
, 
sˇ¬î
);

132 i‡((
îr
 = 
	`pkéoc_∑r£
(
sˇ¬î
)) != 0) {

133 
	`pkéoc__dñëe_buf„r
(
buf
, 
sˇ¬î
);

134 
îr
 = -
NLE_PARSE_ERR
;

135 
îrout_sˇ¬î
;

138 
œ°_ªad
 = 
°
.
°_mtime
;

140 
îrout_sˇ¬î
:

141 
	`pkéoc_Àx_de°roy
(
sˇ¬î
);

142 
îrout_˛o£
:

143 
	`f˛o£
(
fd
);

144 
îrout
:

145 
	`‰ì
(
∑th
);

147  
îr
;

148 
	}
}

171 
	$π∆_pkéoc_lookup
(c⁄° *
«me
, 
π∆_pkéoc
 **
ªsu…
)

173 
îr
;

175 i‡((
îr
 = 
	`ªad_pkéocs
()) < 0)

176  
îr
;

178  
	`__pkéoc_lookup
(
«me
, 
ªsu…
);

179 
	}
}

184 
π∆_pkéoc
 *
	$π∆_pkéoc_Æloc
()

186 
π∆_pkéoc
 *
loc
;

188 i‡(!(
loc
 = 
	`ˇŒoc
(1, (*loc))))

189  
NULL
;

191 
loc
->
ªf˙t
 = 1;

192 
	`∆_öô_li°_hód
(&
loc
->
li°
);

194  
loc
;

195 
	}
}

201 
	$π∆_pkéoc_put
(
π∆_pkéoc
 *
loc
)

203 i‡(!
loc
)

206 
loc
->
ªf˙t
--;

207 i‡(
loc
->
ªf˙t
 <= 0)

208 
	`π∆_pkéoc_‰ì
(
loc
);

209 
	}
}

217 
	$π∆_pkéoc_add
(
π∆_pkéoc
 *
loc
)

219 
π∆_pkéoc
 *
l
;

221 i‡(
	`__pkéoc_lookup
(
loc
->
«me
, &
l
) == 0) {

222 
	`π∆_pkéoc_put
(
l
);

223  -
NLE_EXIST
;

226 
	`NL_DBG
(2, "NewÖacketÜocationÉntry \"%s\"álign=%uÜayer=%u "

228 
loc
->
«me
,Üoc->
Æign
,Üoc->
œyî
,Üoc->
off£t
,

229 
loc
->
mask
,Üoc->
shi·
,Üoc->
ªf˙t
);

231 
	`∆_li°_add_èû
(&
loc
->
li°
, &
pkéoc_«me_ht
[
	`pkéoc_hash
÷oc->
«me
)]);

234 
	}
}

236 
π∆_pkéoc_f‹óch
((*
cb
)(
π∆_pkéoc
 *, *), *
¨g
)

238 
π∆_pkéoc
 *
loc
;

239 
i
;

242 
	`ªad_pkéocs
();

244 
i
 = 0; i < 
PKTLOC_NAME_HT_SIZ
; i++)

245 
	`∆_li°_f‹_óch_íåy
(
loc
, &
pkéoc_«me_ht
[
i
], 
li°
)

246 
	`cb
(
loc
, 
¨g
);

247 
	}
}

249 
__öô
 
	$pkéoc_öô
()

251 
i
;

253 
i
 = 0; i < 
PKTLOC_NAME_HT_SIZ
; i++)

254 
	`∆_öô_li°_hód
(&
pkéoc_«me_ht
[
i
]);

257 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/pktloc_grammar.c

5 
	#YY_INT_ALIGNED
 

	)

9 
	#FLEX_SCANNER


	)

10 
	#YY_FLEX_MAJOR_VERSION
 2

	)

11 
	#YY_FLEX_MINOR_VERSION
 5

	)

12 
	#YY_FLEX_SUBMINOR_VERSION
 39

	)

13 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

14 
	#FLEX_BETA


	)

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<î∫o.h
>

23 
	~<°dlib.h
>

29 #i‚de‡
FLEXINT_H


30 
	#FLEXINT_H


	)

34 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

39 #i‚de‡
__STDC_LIMIT_MACROS


40 
	#__STDC_LIMIT_MACROS
 1

	)

43 
	~<öây≥s.h
>

44 
öt8_t
 
	tÊex_öt8_t
;

45 
uöt8_t
 
	tÊex_uöt8_t
;

46 
öt16_t
 
	tÊex_öt16_t
;

47 
uöt16_t
 
	tÊex_uöt16_t
;

48 
öt32_t
 
	tÊex_öt32_t
;

49 
uöt32_t
 
	tÊex_uöt32_t
;

51 sig√d 
	tÊex_öt8_t
;

52 
	tÊex_öt16_t
;

53 
	tÊex_öt32_t
;

54 
	tÊex_uöt8_t
;

55 
	tÊex_uöt16_t
;

56 
	tÊex_uöt32_t
;

59 #i‚de‡
INT8_MIN


60 
	#INT8_MIN
 (-128)

	)

62 #i‚de‡
INT16_MIN


63 
	#INT16_MIN
 (-32767-1)

	)

65 #i‚de‡
INT32_MIN


66 
	#INT32_MIN
 (-2147483647-1)

	)

68 #i‚de‡
INT8_MAX


69 
	#INT8_MAX
 (127)

	)

71 #i‚de‡
INT16_MAX


72 
	#INT16_MAX
 (32767)

	)

74 #i‚de‡
INT32_MAX


75 
	#INT32_MAX
 (2147483647)

	)

77 #i‚de‡
UINT8_MAX


78 
	#UINT8_MAX
 (255U)

	)

80 #i‚de‡
UINT16_MAX


81 
	#UINT16_MAX
 (65535U)

	)

83 #i‚de‡
UINT32_MAX


84 
	#UINT32_MAX
 (4294967295U)

	)

91 #ifde‡
__˝lu•lus


94 
	#YY_USE_CONST


	)

99 #i‡
deföed
 (
__STDC__
)

101 
	#YY_USE_CONST


	)

106 #ifde‡
YY_USE_CONST


107 
	#yyc⁄°
 c⁄°

	)

109 
	#yyc⁄°


	)

113 
	#YY_NULL
 0

	)

120 
	#YY_SC_TO_UI
(
c
Ë((Ë(Ëc)

	)

123 #i‚de‡
YY_TYPEDEF_YY_SCANNER_T


124 
	#YY_TYPEDEF_YY_SCANNER_T


	)

125 * 
	tyysˇn_t
;

130 
	#yyö
 
yyg
->
yyö_r


	)

131 
	#yyout
 
yyg
->
yyout_r


	)

132 
	#yyexåa
 
yyg
->
yyexåa_r


	)

133 
	#yyÀng
 
yyg
->
yyÀng_r


	)

134 
	#yyãxt
 
yyg
->
yyãxt_r


	)

135 
	#yylöío
 (
YY_CURRENT_BUFFER_LVALUE
->
yy_bs_löío
)

	)

136 
	#yycﬁumn
 (
YY_CURRENT_BUFFER_LVALUE
->
yy_bs_cﬁumn
)

	)

137 
	#yy_Êex_debug
 
yyg
->
yy_Êex_debug_r


	)

143 
	#BEGIN
 
yyg
->
yy_°¨t
 = 1 + 2 *

	)

149 
	#YY_START
 ((
yyg
->
yy_°¨t
 - 1Ë/ 2)

	)

150 
	#YYSTATE
 
YY_START


	)

153 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

156 
	#YY_NEW_FILE
 
	`pkéoc_ª°¨t
(
yyö
 ,
yysˇ¬î
 )

	)

158 
	#YY_END_OF_BUFFER_CHAR
 0

	)

161 #i‚de‡
YY_BUF_SIZE


162 #ifde‡
__ü64__


167 
	#YY_BUF_SIZE
 32768

	)

169 
	#YY_BUF_SIZE
 16384

	)

175 
	#YY_STATE_BUF_SIZE
 ((
YY_BUF_SIZE
 + 2Ë* (
yy_°©e_ty≥
))

	)

177 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


178 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

179 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

182 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


183 
	#YY_TYPEDEF_YY_SIZE_T


	)

184 
size_t
 
	tyy_size_t
;

187 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

188 
	#EOB_ACT_END_OF_FILE
 1

	)

189 
	#EOB_ACT_LAST_MATCH
 2

	)

191 
	#YY_LESS_LINENO
(
n
)

	)

192 
	#YY_LINENO_REWIND_TO
(
±r
)

	)

195 
	#yyÀss
(
n
) \

199 
yyÀss_ma¸o_¨g
 = (
n
); \

200 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

201 *
yy_˝
 = 
yyg
->
yy_hﬁd_ch¨
; \

202 
YY_RESTORE_YY_MORE_OFFSET
 \

203 
yyg
->
yy_c_buf_p
 = 
yy_˝
 = 
yy_bp
 + 
yyÀss_ma¸o_¨g
 - 
YY_MORE_ADJ
; \

204 
YY_DO_BEFORE_ACTION
; \

206  0 )

	)

208 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, 
yyg
->
yyãxt_±r
 , 
yysˇ¬î
 )

	)

210 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


211 
	#YY_STRUCT_YY_BUFFER_STATE


	)

212 
	syy_buf„r_°©e


214 
FILE
 *
	myy_öput_fûe
;

216 *
	myy_ch_buf
;

217 *
	myy_buf_pos
;

222 
yy_size_t
 
	myy_buf_size
;

227 
yy_size_t
 
	myy_n_ch¨s
;

233 
	myy_is_our_buf„r
;

240 
	myy_is_öãø˘ive
;

246 
	myy_©_bﬁ
;

248 
	myy_bs_löío
;

249 
	myy_bs_cﬁumn
;

254 
	myy_fûl_buf„r
;

256 
	myy_buf„r_°©us
;

258 
	#YY_BUFFER_NEW
 0

	)

259 
	#YY_BUFFER_NORMAL
 1

	)

270 
	#YY_BUFFER_EOF_PENDING
 2

	)

281 
	#YY_CURRENT_BUFFER
 ( 
yyg
->
yy_buf„r_°ack
 \

282 ? 
yyg
->
yy_buf„r_°ack
[yyg->
yy_buf„r_°ack_t›
] \

283 : 
NULL
)

	)

288 
	#YY_CURRENT_BUFFER_LVALUE
 
yyg
->
yy_buf„r_°ack
[yyg->
yy_buf„r_°ack_t›
]

	)

290 
pkéoc_ª°¨t
 (
FILE
 *
öput_fûe
 ,
yysˇn_t
 
yysˇ¬î
 );

291 
pkéoc__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 ,
yysˇn_t
 
yysˇ¬î
 );

292 
YY_BUFFER_STATE
 
pkéoc__¸óã_buf„r
 (
FILE
 *
fûe
,
size
 ,
yysˇn_t
 
yysˇ¬î
 );

293 
pkéoc__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 ,
yysˇn_t
 
yysˇ¬î
 );

294 
pkéoc__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 ,
yysˇn_t
 
yysˇ¬î
 );

295 
pkéoc_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 ,
yysˇn_t
 
yysˇ¬î
 );

296 
pkéoc_p›_buf„r_°©e
 (
yysˇn_t
 
yysˇ¬î
 );

298 
pkéoc_ísuª_buf„r_°ack
 (
yysˇn_t
 
yysˇ¬î
 );

299 
pkéoc__lﬂd_buf„r_°©e
 (
yysˇn_t
 
yysˇ¬î
 );

300 
pkéoc__öô_buf„r
 (
YY_BUFFER_STATE
 
b
,
FILE
 *
fûe
 ,
yysˇn_t
 
yysˇ¬î
 );

302 
	#YY_FLUSH_BUFFER
 
	`pkéoc__Êush_buf„r
(
YY_CURRENT_BUFFER
 ,
yysˇ¬î
)

	)

304 
YY_BUFFER_STATE
 
pkéoc__sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 ,
yysˇn_t
 
yysˇ¬î
 );

305 
YY_BUFFER_STATE
 
pkéoc__sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

306 
YY_BUFFER_STATE
 
pkéoc__sˇn_byãs
 (
yyc⁄°
 *
byãs
,
yy_size_t
 
Àn
 ,
yysˇn_t
 
yysˇ¬î
 );

308 *
pkéoc_Æloc
 (
yy_size_t
 ,
yysˇn_t
 
yysˇ¬î
 );

309 *
pkéoc_ªÆloc
 (*,
yy_size_t
 ,
yysˇn_t
 
yysˇ¬î
 );

310 
pkéoc_‰ì
 (* ,
yysˇn_t
 
yysˇ¬î
 );

312 
	#yy_√w_buf„r
 
pkéoc__¸óã_buf„r


	)

314 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

316 i‡–! 
YY_CURRENT_BUFFER
 ){ \

317 
	`pkéoc_ísuª_buf„r_°ack
 (
yysˇ¬î
); \

318 
YY_CURRENT_BUFFER_LVALUE
 = \

319 
	`pkéoc__¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ,
yysˇ¬î
); \

321 
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

322 }

	)

324 
	#yy_£t_bﬁ
(
©_bﬁ
) \

326 i‡–! 
YY_CURRENT_BUFFER
 ){\

327 
	`pkéoc_ísuª_buf„r_°ack
 (
yysˇ¬î
); \

328 
YY_CURRENT_BUFFER_LVALUE
 = \

329 
	`pkéoc__¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ,
yysˇ¬î
); \

331 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = 
©_bﬁ
; \

332 }

	)

334 
	#YY_AT_BOL
(Ë(
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
)

	)

336 
	#pkéoc_wøp
(
yysˇ¬î
Ë1

	)

337 
	#YY_SKIP_YYWRAP


	)

339 
	tYY_CHAR
;

341 
	tyy_°©e_ty≥
;

343 
	#yyãxt_±r
 
yyãxt_r


	)

345 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 (
yysˇn_t
 
yysˇ¬î
 );

346 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 (yy_°©e_ty≥ 
cuºít_°©e
 ,
yysˇn_t
 
yysˇ¬î
);

347 
yy_gë_√xt_buf„r
 (
yysˇn_t
 
yysˇ¬î
 );

348 
yy_Áèl_îr‹
 (
yyc⁄°
 
msg
[] ,
yysˇn_t
 
yysˇ¬î
 );

353 
	#YY_DO_BEFORE_ACTION
 \

354 
yyg
->
yyãxt_±r
 = 
yy_bp
; \

355 
yyÀng
 = (
size_t
Ë(
yy_˝
 - 
yy_bp
); \

356 
yyg
->
yy_hﬁd_ch¨
 = *
yy_˝
; \

357 *
yy_˝
 = '\0'; \

358 
yyg
->
yy_c_buf_p
 = 
yy_˝
;

	)

360 
	#YY_NUM_RULES
 16

	)

361 
	#YY_END_OF_BUFFER
 17

	)

364 
	syy_å™s_öfo


366 
Êex_öt32_t
 
	myy_vîify
;

367 
Êex_öt32_t
 
	myy_nxt
;

369 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ac˚±
[47] =

378 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ec
[256] =

410 
yyc⁄°
 
Êex_öt32_t
 
	gyy_mëa
[29] =

417 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ba£
[50] =

426 
yyc⁄°
 
Êex_öt16_t
 
	gyy_def
[50] =

435 
yyc⁄°
 
Êex_öt16_t
 
	gyy_nxt
[116] =

452 
yyc⁄°
 
Êex_öt16_t
 
	gyy_chk
[116] =

472 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

473 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

474 
	#YY_MORE_ADJ
 0

	)

475 
	#YY_RESTORE_YY_MORE_OFFSET


	)

478 
	~<√éök-¥iv©e/√éök.h
>

479 
	~<√éök-¥iv©e/tc.h
>

480 
	~<√éök/√éök.h
>

481 
	~<√éök/utûs.h
>

482 
	~<√éök/rouã/pkéoc.h
>

483 
	~"pkéoc_sy¡ax.h
"

484 
	#YY_NO_INPUT
 1

	)

487 
	#INITIAL
 0

	)

489 #i‚de‡
YY_NO_UNISTD_H


494 
	~<uni°d.h
>

497 #i‚de‡
YY_EXTRA_TYPE


498 
	#YY_EXTRA_TYPE
 *

	)

502 
	syyguts_t


506 
YY_EXTRA_TYPE
 
	myyexåa_r
;

509 
FILE
 *
	myyö_r
, *
	myyout_r
;

510 
size_t
 
	myy_buf„r_°ack_t›
;

511 
size_t
 
	myy_buf„r_°ack_max
;

512 
YY_BUFFER_STATE
 * 
	myy_buf„r_°ack
;

513 
	myy_hﬁd_ch¨
;

514 
yy_size_t
 
	myy_n_ch¨s
;

515 
yy_size_t
 
	myyÀng_r
;

516 *
	myy_c_buf_p
;

517 
	myy_öô
;

518 
	myy_°¨t
;

519 
	myy_did_buf„r_swôch_⁄_eof
;

520 
	myy_°¨t_°ack_±r
;

521 
	myy_°¨t_°ack_dïth
;

522 *
	myy_°¨t_°ack
;

523 
yy_°©e_ty≥
 
	myy_œ°_ac˚±ög_°©e
;

524 * 
	myy_œ°_ac˚±ög_˝os
;

526 
	myylöío_r
;

527 
	myy_Êex_debug_r
;

529 *
	myyãxt_r
;

530 
	myy_m‹e_Êag
;

531 
	myy_m‹e_Àn
;

533 
YYSTYPE
 * 
	myylvÆ_r
;

535 
YYLTYPE
 * 
	myyŒoc_r
;

539 
yy_öô_globÆs
 (
yysˇn_t
 
yysˇ¬î
 );

543 
	#yylvÆ
 
yyg
->
yylvÆ_r


	)

545 
	#yyŒoc
 
yyg
->
yyŒoc_r


	)

547 
pkéoc_Àx_öô
 (
yysˇn_t
* 
sˇ¬î
);

549 
pkéoc_Àx_öô_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
,
yysˇn_t
* 
sˇ¬î
);

554 
pkéoc_Àx_de°roy
 (
yysˇn_t
 
yysˇ¬î
 );

556 
pkéoc_gë_debug
 (
yysˇn_t
 
yysˇ¬î
 );

558 
pkéoc_£t_debug
 (
debug_Êag
 ,
yysˇn_t
 
yysˇ¬î
 );

560 
YY_EXTRA_TYPE
 
pkéoc_gë_exåa
 (
yysˇn_t
 
yysˇ¬î
 );

562 
pkéoc_£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 ,
yysˇn_t
 
yysˇ¬î
 );

564 
FILE
 *
pkéoc_gë_ö
 (
yysˇn_t
 
yysˇ¬î
 );

566 
pkéoc_£t_ö
 (
FILE
 * 
ö_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

568 
FILE
 *
pkéoc_gë_out
 (
yysˇn_t
 
yysˇ¬î
 );

570 
pkéoc_£t_out
 (
FILE
 * 
out_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

572 
yy_size_t
 
pkéoc_gë_Àng
 (
yysˇn_t
 
yysˇ¬î
 );

574 *
pkéoc_gë_ãxt
 (
yysˇn_t
 
yysˇ¬î
 );

576 
pkéoc_gë_löío
 (
yysˇn_t
 
yysˇ¬î
 );

578 
pkéoc_£t_löío
 (
löe_numbî
 ,
yysˇn_t
 
yysˇ¬î
 );

580 
pkéoc_gë_cﬁumn
 (
yysˇn_t
 
yysˇ¬î
 );

582 
pkéoc_£t_cﬁumn
 (
cﬁumn_no
 ,
yysˇn_t
 
yysˇ¬î
 );

584 
YYSTYPE
 * 
pkéoc_gë_lvÆ
 (
yysˇn_t
 
yysˇ¬î
 );

586 
pkéoc_£t_lvÆ
 (
YYSTYPE
 * 
yylvÆ_∑øm
 ,
yysˇn_t
 
yysˇ¬î
 );

588 
YYLTYPE
 *
pkéoc_gë_Œoc
 (
yysˇn_t
 
yysˇ¬î
 );

590 
pkéoc_£t_Œoc
 (
YYLTYPE
 * 
yyŒoc_∑øm
 ,
yysˇn_t
 
yysˇ¬î
 );

596 #i‚de‡
YY_SKIP_YYWRAP


597 #ifde‡
__˝lu•lus


598 "C" 
pkéoc_wøp
 (
yysˇn_t
 
yysˇ¬î
 );

600 
pkéoc_wøp
 (
yysˇn_t
 
yysˇ¬î
 );

604 #i‚de‡
yyãxt_±r


605 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,,
yysˇn_t
 
yysˇ¬î
);

608 #ifde‡
YY_NEED_STRLEN


609 
yy_Êex_°æí
 (
yyc⁄°
 * ,
yysˇn_t
 
yysˇ¬î
);

612 #i‚de‡
YY_NO_INPUT


614 #ifde‡
__˝lu•lus


615 
yyöput
 (
yysˇn_t
 
yysˇ¬î
 );

617 
öput
 (
yysˇn_t
 
yysˇ¬î
 );

623 #i‚de‡
YY_READ_BUF_SIZE


624 #ifde‡
__ü64__


626 
	#YY_READ_BUF_SIZE
 16384

	)

628 
	#YY_READ_BUF_SIZE
 8192

	)

633 #i‚de‡
ECHO


637 
	#ECHO
 dÿ{ i‡(
	`fwrôe
–
yyãxt
, 
yyÀng
, 1, 
yyout
 )Ë{} } 0)

	)

643 #i‚de‡
YY_INPUT


644 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

645 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 ) \

647 
c
 = '*'; \

648 
size_t
 
n
; \

649  
n
 = 0;Ç < 
max_size
 && \

650 (
c
 = 
	`gëc
–
yyö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

651 
buf
[
n
] = (Ë
c
; \

652 i‡–
c
 == '\n' ) \

653 
buf
[
n
++] = (Ë
c
; \

654 i‡–
c
 =
EOF
 && 
	`„º‹
–
yyö
 ) ) \

655 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

656 
ªsu…
 = 
n
; \

660 
î∫o
=0; \

661  (
ªsu…
 = 
	`‰ód
(
buf
, 1, 
max_size
, 
yyö
))==0 && 
	`„º‹
(yyin)) \

663 if–
î∫o
 !
EINTR
) \

665 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

668 
î∫o
=0; \

669 
	`˛óªº
(
yyö
); \

673 

	)

680 #i‚de‡
yyãrmö©e


681 
	#yyãrmö©e
(Ë 
YY_NULL


	)

685 #i‚de‡
YY_START_STACK_INCR


686 
	#YY_START_STACK_INCR
 25

	)

690 #i‚de‡
YY_FATAL_ERROR


691 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg , 
yysˇ¬î
)

	)

699 #i‚de‡
YY_DECL


700 
	#YY_DECL_IS_OURS
 1

	)

702 
pkéoc_Àx
 \

703 (
YYSTYPE
 * 
yylvÆ_∑øm
,
YYLTYPE
 * 
yyŒoc_∑øm
 ,
yysˇn_t
 
yysˇ¬î
);

705 
	#YY_DECL
 
pkéoc_Àx
 \

706 (
YYSTYPE
 * 
yylvÆ_∑øm
, 
YYLTYPE
 * 
yyŒoc_∑øm
 , 
yysˇn_t
 
yysˇ¬î
)

	)

712 #i‚de‡
YY_USER_ACTION


713 
	#YY_USER_ACTION


	)

717 #i‚de‡
YY_BREAK


718 
	#YY_BREAK
 ;

	)

721 
	#YY_RULE_SETUP
 \

722 
YY_USER_ACTION


	)

726 
	gYY_DECL


728 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

729 *
	gyy_˝
, *
	gyy_bp
;

730 
	gyy_a˘
;

731 
yyguts_t
 * 
	gyyg
 = (yyguts_t*)
yysˇ¬î
;

733 
	gyylvÆ
 = 
yylvÆ_∑øm
;

735 
	gyyŒoc
 = 
yyŒoc_∑øm
;

737 i‡–!
	gyyg
->
	gyy_öô
 )

739 
	gyyg
->
	gyy_öô
 = 1;

741 #ifde‡
YY_USER_INIT


742 
	gYY_USER_INIT
;

745 i‡–! 
	gyyg
->
	gyy_°¨t
 )

746 
	gyyg
->
	gyy_°¨t
 = 1;

748 i‡–! 
	gyyö
 )

749 
	gyyö
 = 
°dö
;

751 i‡–! 
	gyyout
 )

752 
	gyyout
 = 
°dout
;

754 i‡–! 
	gYY_CURRENT_BUFFER
 ) {

755 
pkéoc_ísuª_buf„r_°ack
 (
yysˇ¬î
);

756 
	gYY_CURRENT_BUFFER_LVALUE
 =

757 
pkéoc__¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ,
yysˇ¬î
);

760 
pkéoc__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

771 
	gyy_˝
 = 
yyg
->
yy_c_buf_p
;

774 *
	gyy_˝
 = 
yyg
->
yy_hﬁd_ch¨
;

779 
	gyy_bp
 = 
yy_˝
;

781 
	gyy_cuºít_°©e
 = 
yyg
->
yy_°¨t
;

782 
	gyy_m©ch
:

785 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)] ;

786 i‡–
	gyy_ac˚±
[
yy_cuºít_°©e
] )

788 
	gyyg
->
	gyy_œ°_ac˚±ög_°©e
 = 
yy_cuºít_°©e
;

789 
	gyyg
->
	gyy_œ°_ac˚±ög_˝os
 = 
yy_˝
;

791  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

793 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

794 i‡–
	gyy_cuºít_°©e
 >= 47 )

795 
yy_c
 = 
yy_mëa
[() yy_c];

797 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + (Ë
yy_c
];

798 ++
	gyy_˝
;

800  
	gyy_ba£
[
yy_cuºít_°©e
] != 87 );

802 
	gyy_föd_a˘i⁄
:

803 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

804 i‡–
	gyy_a˘
 == 0 )

806 
yy_˝
 = 
yyg
->
yy_œ°_ac˚±ög_˝os
;

807 
	gyy_cuºít_°©e
 = 
yyg
->
yy_œ°_ac˚±ög_°©e
;

808 
	gyy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

811 
	gYY_DO_BEFORE_ACTION
;

813 
	gdo_a˘i⁄
:

815  
yy_a˘
 )

819 *
yy_˝
 = 
yyg
->
yy_hﬁd_ch¨
;

820 
	gyy_˝
 = 
yyg
->
yy_œ°_ac˚±ög_˝os
;

821 
	gyy_cuºít_°©e
 = 
yyg
->
yy_œ°_ac˚±ög_°©e
;

822 
	gyy_föd_a˘i⁄
;

826 
YY_RULE_SETUP


829 
YY_BREAK


831 
YY_RULE_SETUP


834 
YY_BREAK


838 
YY_RULE_SETUP


841 
yylvÆ
->
i
 = 
°πoul
(
yyãxt
, 
NULL
, 0);

842  
	gNUMBER
;

844 
YY_BREAK


846 
YY_RULE_SETUP


848 {  
yylvÆ
->
i
 = 
yyãxt
[0]; }

849 
YY_BREAK


851 
YY_RULE_SETUP


853 { 
yylvÆ
->
i
 = 
TCF_EM_ALIGN_U8
;  
	gALIGN
; }

854 
YY_BREAK


856 
YY_RULE_SETUP


858 { 
yylvÆ
->
i
 = 
TCF_EM_ALIGN_U16
;  
	gALIGN
; }

859 
YY_BREAK


861 
YY_RULE_SETUP


863 { 
yylvÆ
->
i
 = 
TCF_EM_ALIGN_U32
;  
	gALIGN
; }

864 
YY_BREAK


868 
YY_RULE_SETUP


870 { 
yylvÆ
->
i
 = 
TCF_LAYER_LINK
;  
	gLAYER
; }

871 
YY_BREAK


875 
YY_RULE_SETUP


877 { 
yylvÆ
->
i
 = 
TCF_LAYER_NETWORK
;  
	gLAYER
; }

878 
YY_BREAK


882 
YY_RULE_SETUP


884 { 
yylvÆ
->
i
 = 
TCF_LAYER_TRANSPORT
;  
	gLAYER
; }

885 
YY_BREAK


887 
YY_RULE_SETUP


890 
yylvÆ
->
s
 = 
°rdup
(
yyãxt
);

891 i‡(
	gyylvÆ
->
	gs
 =
NULL
)

892  
ERROR
;

893  
	gNAME
;

895 
YY_BREAK


897 
YY_RULE_SETUP


899 
ECHO
;

900 
	gYY_BREAK


902 
YY_STATE_EOF
(
INITIAL
):

903 
yyãrmö©e
();

905 
	gYY_END_OF_BUFFER
:

908 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - 
yyg
->
yyãxt_±r
) - 1;

911 *
	gyy_˝
 = 
yyg
->
yy_hﬁd_ch¨
;

912 
YY_RESTORE_YY_MORE_OFFSET


914 i‡–
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

925 
yyg
->
yy_n_ch¨s
 = 
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

926 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_öput_fûe
 = 
yyö
;

927 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

937 i‡–
	gyyg
->
	gyy_c_buf_p
 <&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
yyg
->
yy_n_ch¨s
] )

939 
yy_°©e_ty≥
 
yy_√xt_°©e
;

941 
	gyyg
->
	gyy_c_buf_p
 = 
yyg
->
yyãxt_±r
 + 
yy_amou¡_of_m©ched_ãxt
;

943 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
–
yysˇ¬î
 );

954 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 , 
yysˇ¬î
);

956 
	gyy_bp
 = 
yyg
->
yyãxt_±r
 + 
YY_MORE_ADJ
;

958 i‡–
	gyy_√xt_°©e
 )

961 
	gyy_˝
 = ++
yyg
->
yy_c_buf_p
;

962 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

963 
	gyy_m©ch
;

968 
	gyy_˝
 = 
yyg
->
yy_c_buf_p
;

969 
	gyy_föd_a˘i⁄
;

973  
yy_gë_√xt_buf„r
–
yysˇ¬î
 ) )

975 
	gEOB_ACT_END_OF_FILE
:

977 
yyg
->
yy_did_buf„r_swôch_⁄_eof
 = 0;

979 i‡–
pkéoc_wøp
(
yysˇ¬î
 ) )

990 
	gyyg
->
	gyy_c_buf_p
 = 
yyg
->
yyãxt_±r
 + 
YY_MORE_ADJ
;

992 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

993 
	gdo_a˘i⁄
;

998 i‡–! 
	gyyg
->
	gyy_did_buf„r_swôch_⁄_eof
 )

999 
	gYY_NEW_FILE
;

1004 
	gEOB_ACT_CONTINUE_SCAN
:

1005 
yyg
->
yy_c_buf_p
 =

1006 
yyg
->
yyãxt_±r
 + 
yy_amou¡_of_m©ched_ãxt
;

1008 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
–
yysˇ¬î
 );

1010 
	gyy_˝
 = 
yyg
->
yy_c_buf_p
;

1011 
	gyy_bp
 = 
yyg
->
yyãxt_±r
 + 
YY_MORE_ADJ
;

1012 
	gyy_m©ch
;

1014 
	gEOB_ACT_LAST_MATCH
:

1015 
yyg
->
yy_c_buf_p
 =

1016 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
yyg
->
yy_n_ch¨s
];

1018 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
–
yysˇ¬î
 );

1020 
	gyy_˝
 = 
yyg
->
yy_c_buf_p
;

1021 
	gyy_bp
 = 
yyg
->
yyãxt_±r
 + 
YY_MORE_ADJ
;

1022 
	gyy_föd_a˘i⁄
;

1028 
YY_FATAL_ERROR
(

1042 
	$yy_gë_√xt_buf„r
 (
yysˇn_t
 
yysˇ¬î
)

1044 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1045 *
de°
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
;

1046 *
sour˚
 = 
yyg
->
yyãxt_±r
;

1047 
numbî_to_move
, 
i
;

1048 
ªt_vÆ
;

1050 i‡–
yyg
->
yy_c_buf_p
 > &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[yyg->
yy_n_ch¨s
 + 1] )

1051 
	`YY_FATAL_ERROR
(

1054 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_fûl_buf„r
 == 0 )

1056 i‡–
yyg
->
yy_c_buf_p
 - yyg->
yyãxt_±r
 - 
YY_MORE_ADJ
 == 1 )

1061  
EOB_ACT_END_OF_FILE
;

1069  
EOB_ACT_LAST_MATCH
;

1076 
numbî_to_move
 = (Ë(
yyg
->
yy_c_buf_p
 - yyg->
yyãxt_±r
) - 1;

1078  
i
 = 0; i < 
numbî_to_move
; ++i )

1079 *(
de°
++Ë*(
sour˚
++);

1081 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

1085 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = 
yyg
->yy_n_chars = 0;

1089 
yy_size_t
 
num_to_ªad
 =

1090 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 - 
numbî_to_move
 - 1;

1092  
num_to_ªad
 <= 0 )

1096 
YY_BUFFER_STATE
 
b
 = 
YY_CURRENT_BUFFER_LVALUE
;

1098 
yy_c_buf_p_off£t
 =

1099 (Ë(
yyg
->
yy_c_buf_p
 - 
b
->
yy_ch_buf
);

1101 i‡–
b
->
yy_is_our_buf„r
 )

1103 
yy_size_t
 
√w_size
 = 
b
->
yy_buf_size
 * 2;

1105 i‡–
√w_size
 <= 0 )

1106 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

1108 
b
->
yy_buf_size
 *= 2;

1110 
b
->
yy_ch_buf
 = (*)

1112 
	`pkéoc_ªÆloc
((*Ë
b
->
yy_ch_buf
,b->
yy_buf_size
 + 2 ,
yysˇ¬î
 );

1116 
b
->
yy_ch_buf
 = 0;

1118 i‡–! 
b
->
yy_ch_buf
 )

1119 
	`YY_FATAL_ERROR
(

1122 
yyg
->
yy_c_buf_p
 = &
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

1124 
num_to_ªad
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 -

1125 
numbî_to_move
 - 1;

1129 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

1130 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

1133 
	`YY_INPUT
–(&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
]),

1134 
yyg
->
yy_n_ch¨s
, 
num_to_ªad
 );

1136 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = 
yyg
->yy_n_chars;

1139 i‡–
yyg
->
yy_n_ch¨s
 == 0 )

1141 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

1143 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

1144 
	`pkéoc_ª°¨t
(
yyö
 ,
yysˇ¬î
);

1149 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

1150 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =

1151 
YY_BUFFER_EOF_PENDING
;

1156 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

1158 i‡((
yy_size_t
Ë(
yyg
->
yy_n_ch¨s
 + 
numbî_to_move
Ë> 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
) {

1160 
yy_size_t
 
√w_size
 = 
yyg
->
yy_n_ch¨s
 + 
numbî_to_move
 + (yyg->yy_n_chars >> 1);

1161 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 = (*Ë
	`pkéoc_ªÆloc
((*ËYY_CURRENT_BUFFER_LVALUE->yy_ch_buf,
√w_size
 ,
yysˇ¬î
 );

1162 i‡–! 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

1163 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_get_next_buffer()" );

1166 
yyg
->
yy_n_ch¨s
 +
numbî_to_move
;

1167 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
yyg
->
yy_n_ch¨s
] = 
YY_END_OF_BUFFER_CHAR
;

1168 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
yyg
->
yy_n_ch¨s
 + 1] = 
YY_END_OF_BUFFER_CHAR
;

1170 
yyg
->
yyãxt_±r
 = &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[0];

1172  
ªt_vÆ
;

1173 
	}
}

1177 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
 (
yysˇn_t
 
yysˇ¬î
)

1179 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

1180 *
yy_˝
;

1181 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1183 
yy_cuºít_°©e
 = 
yyg
->
yy_°¨t
;

1185  
yy_˝
 = 
yyg
->
yyãxt_±r
 + 
YY_MORE_ADJ
; yy_˝ < yyg->
yy_c_buf_p
; ++yy_cp )

1187 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

1188 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1190 
yyg
->
yy_œ°_ac˚±ög_°©e
 = 
yy_cuºít_°©e
;

1191 
yyg
->
yy_œ°_ac˚±ög_˝os
 = 
yy_˝
;

1193  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1195 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1196 i‡–
yy_cuºít_°©e
 >= 47 )

1197 
yy_c
 = 
yy_mëa
[() yy_c];

1199 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1202  
yy_cuºít_°©e
;

1203 
	}
}

1210 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
 (
yy_°©e_ty≥
 
yy_cuºít_°©e
 , 
yysˇn_t
 
yysˇ¬î
)

1212 
yy_is_jam
;

1213 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1214 *
yy_˝
 = 
yyg
->
yy_c_buf_p
;

1216 
YY_CHAR
 
yy_c
 = 1;

1217 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1219 
yyg
->
yy_œ°_ac˚±ög_°©e
 = 
yy_cuºít_°©e
;

1220 
yyg
->
yy_œ°_ac˚±ög_˝os
 = 
yy_˝
;

1222  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1224 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1225 i‡–
yy_cuºít_°©e
 >= 47 )

1226 
yy_c
 = 
yy_mëa
[() yy_c];

1228 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1229 
yy_is_jam
 = (
yy_cuºít_°©e
 == 46);

1231 ()
yyg
;

1232  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

1233 
	}
}

1235 #i‚de‡
YY_NO_INPUT


1236 #ifde‡
__˝lu•lus


1237 
	$yyöput
 (
yysˇn_t
 
yysˇ¬î
)

1239 
	$öput
 (
yysˇn_t
 
yysˇ¬î
)

1243 
c
;

1244 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1246 *
yyg
->
yy_c_buf_p
 = yyg->
yy_hﬁd_ch¨
;

1248 i‡–*
yyg
->
yy_c_buf_p
 =
YY_END_OF_BUFFER_CHAR
 )

1254 i‡–
yyg
->
yy_c_buf_p
 < &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[yyg->
yy_n_ch¨s
] )

1256 *
yyg
->
yy_c_buf_p
 = '\0';

1260 
yy_size_t
 
off£t
 = 
yyg
->
yy_c_buf_p
 - yyg->
yyãxt_±r
;

1261 ++
yyg
->
yy_c_buf_p
;

1263  
	`yy_gë_√xt_buf„r
–
yysˇ¬î
 ) )

1265 
EOB_ACT_LAST_MATCH
:

1277 
	`pkéoc_ª°¨t
(
yyö
 ,
yysˇ¬î
);

1281 
EOB_ACT_END_OF_FILE
:

1283 i‡–
	`pkéoc_wøp
(
yysˇ¬î
 ) )

1284  
EOF
;

1286 i‡–! 
yyg
->
yy_did_buf„r_swôch_⁄_eof
 )

1287 
YY_NEW_FILE
;

1288 #ifde‡
__˝lu•lus


1289  
	`yyöput
(
yysˇ¬î
);

1291  
	`öput
(
yysˇ¬î
);

1295 
EOB_ACT_CONTINUE_SCAN
:

1296 
yyg
->
yy_c_buf_p
 = yyg->
yyãxt_±r
 + 
off£t
;

1302 
c
 = *(*Ë
yyg
->
yy_c_buf_p
;

1303 *
yyg
->
yy_c_buf_p
 = '\0';

1304 
yyg
->
yy_hﬁd_ch¨
 = *++yyg->
yy_c_buf_p
;

1306  
c
;

1307 
	}
}

1315 
	$pkéoc_ª°¨t
 (
FILE
 * 
öput_fûe
 , 
yysˇn_t
 
yysˇ¬î
)

1317 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1319 i‡–! 
YY_CURRENT_BUFFER
 ){

1320 
	`pkéoc_ísuª_buf„r_°ack
 (
yysˇ¬î
);

1321 
YY_CURRENT_BUFFER_LVALUE
 =

1322 
	`pkéoc__¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ,
yysˇ¬î
);

1325 
	`pkéoc__öô_buf„r
(
YY_CURRENT_BUFFER
,
öput_fûe
 ,
yysˇ¬î
);

1326 
	`pkéoc__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

1327 
	}
}

1333 
	$pkéoc__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 , 
yysˇn_t
 
yysˇ¬î
)

1335 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1342 
	`pkéoc_ísuª_buf„r_°ack
 (
yysˇ¬î
);

1343 i‡–
YY_CURRENT_BUFFER
 =
√w_buf„r
 )

1346 i‡–
YY_CURRENT_BUFFER
 )

1349 *
yyg
->
yy_c_buf_p
 = yyg->
yy_hﬁd_ch¨
;

1350 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = 
yyg
->
yy_c_buf_p
;

1351 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = 
yyg
->yy_n_chars;

1354 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1355 
	`pkéoc__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

1362 
yyg
->
yy_did_buf„r_swôch_⁄_eof
 = 1;

1363 
	}
}

1365 
	$pkéoc__lﬂd_buf„r_°©e
 (
yysˇn_t
 
yysˇ¬î
)

1367 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1368 
yyg
->
yy_n_ch¨s
 = 
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1369 
yyg
->
yyãxt_±r
 = yyg->
yy_c_buf_p
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
;

1370 
yyö
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_öput_fûe
;

1371 
yyg
->
yy_hﬁd_ch¨
 = *yyg->
yy_c_buf_p
;

1372 
	}
}

1380 
YY_BUFFER_STATE
 
	$pkéoc__¸óã_buf„r
 (
FILE
 * 
fûe
, 
size
 , 
yysˇn_t
 
yysˇ¬î
)

1382 
YY_BUFFER_STATE
 
b
;

1384 
b
 = (
YY_BUFFER_STATE
Ë
	`pkéoc_Æloc
(–
yy_buf„r_°©e
 ) ,
yysˇ¬î
 );

1385 i‡–! 
b
 )

1386 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖktloc__create_buffer()" );

1388 
b
->
yy_buf_size
 = 
size
;

1393 
b
->
yy_ch_buf
 = (*Ë
	`pkéoc_Æloc
(b->
yy_buf_size
 + 2 ,
yysˇ¬î
 );

1394 i‡–! 
b
->
yy_ch_buf
 )

1395 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖktloc__create_buffer()" );

1397 
b
->
yy_is_our_buf„r
 = 1;

1399 
	`pkéoc__öô_buf„r
(
b
,
fûe
 ,
yysˇ¬î
);

1401  
b
;

1402 
	}
}

1408 
	$pkéoc__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 , 
yysˇn_t
 
yysˇ¬î
)

1410 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1412 i‡–! 
b
 )

1415 i‡–
b
 =
YY_CURRENT_BUFFER
 )

1416 
YY_CURRENT_BUFFER_LVALUE
 = (
YY_BUFFER_STATE
) 0;

1418 i‡–
b
->
yy_is_our_buf„r
 )

1419 
	`pkéoc_‰ì
((*Ë
b
->
yy_ch_buf
 ,
yysˇ¬î
 );

1421 
	`pkéoc_‰ì
((*Ë
b
 ,
yysˇ¬î
 );

1422 
	}
}

1428 
	$pkéoc__öô_buf„r
 (
YY_BUFFER_STATE
 
b
, 
FILE
 * 
fûe
 , 
yysˇn_t
 
yysˇ¬î
)

1431 
€ºno
 = 
î∫o
;

1432 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1434 
	`pkéoc__Êush_buf„r
(
b
 ,
yysˇ¬î
);

1436 
b
->
yy_öput_fûe
 = 
fûe
;

1437 
b
->
yy_fûl_buf„r
 = 1;

1443 i‡(
b
 !
YY_CURRENT_BUFFER
){

1444 
b
->
yy_bs_löío
 = 1;

1445 
b
->
yy_bs_cﬁumn
 = 0;

1448 
b
->
yy_is_öãø˘ive
 = 
fûe
 ? (
	`ißây
–
	`fûío
(file) ) > 0) : 0;

1450 
î∫o
 = 
€ºno
;

1451 
	}
}

1457 
	$pkéoc__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 , 
yysˇn_t
 
yysˇ¬î
)

1459 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1460 i‡–! 
b
 )

1463 
b
->
yy_n_ch¨s
 = 0;

1469 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

1470 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

1472 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

1474 
b
->
yy_©_bﬁ
 = 1;

1475 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1477 i‡–
b
 =
YY_CURRENT_BUFFER
 )

1478 
	`pkéoc__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

1479 
	}
}

1487 
	$pkéoc_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 , 
yysˇn_t
 
yysˇ¬î
)

1489 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1490 i‡(
√w_buf„r
 =
NULL
)

1493 
	`pkéoc_ísuª_buf„r_°ack
(
yysˇ¬î
);

1496 i‡–
YY_CURRENT_BUFFER
 )

1499 *
yyg
->
yy_c_buf_p
 = yyg->
yy_hﬁd_ch¨
;

1500 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = 
yyg
->
yy_c_buf_p
;

1501 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = 
yyg
->yy_n_chars;

1505 i‡(
YY_CURRENT_BUFFER
)

1506 
yyg
->
yy_buf„r_°ack_t›
++;

1507 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1510 
	`pkéoc__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

1511 
yyg
->
yy_did_buf„r_swôch_⁄_eof
 = 1;

1512 
	}
}

1518 
	$pkéoc_p›_buf„r_°©e
 (
yysˇn_t
 
yysˇ¬î
)

1520 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1521 i‡(!
YY_CURRENT_BUFFER
)

1524 
	`pkéoc__dñëe_buf„r
(
YY_CURRENT_BUFFER
 ,
yysˇ¬î
);

1525 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

1526 i‡(
yyg
->
yy_buf„r_°ack_t›
 > 0)

1527 --
yyg
->
yy_buf„r_°ack_t›
;

1529 i‡(
YY_CURRENT_BUFFER
) {

1530 
	`pkéoc__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

1531 
yyg
->
yy_did_buf„r_swôch_⁄_eof
 = 1;

1533 
	}
}

1538 
	$pkéoc_ísuª_buf„r_°ack
 (
yysˇn_t
 
yysˇ¬î
)

1540 
yy_size_t
 
num_to_Æloc
;

1541 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1543 i‡(!
yyg
->
yy_buf„r_°ack
) {

1549 
num_to_Æloc
 = 1;

1550 
yyg
->
yy_buf„r_°ack
 = (
yy_buf„r_°©e
**)
pkéoc_Æloc


1551 (
num_to_Æloc
 * (
yy_buf„r_°©e
*)

1552 , 
yysˇ¬î
);

1553 i‡–! 
yyg
->
yy_buf„r_°ack
 )

1554 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖktloc_ensure_buffer_stack()" );

1556 
	`mem£t
(
yyg
->
yy_buf„r_°ack
, 0, 
num_to_Æloc
 * (
yy_buf„r_°©e
*));

1558 
yyg
->
yy_buf„r_°ack_max
 = 
num_to_Æloc
;

1559 
yyg
->
yy_buf„r_°ack_t›
 = 0;

1563 i‡(
yyg
->
yy_buf„r_°ack_t›
 >(yyg->
yy_buf„r_°ack_max
) - 1){

1566 
grow_size
 = 8 ;

1568 
num_to_Æloc
 = 
yyg
->
yy_buf„r_°ack_max
 + 
grow_size
;

1569 
yyg
->
yy_buf„r_°ack
 = (
yy_buf„r_°©e
**)
pkéoc_ªÆloc


1570 (
yyg
->
yy_buf„r_°ack
,

1571 
num_to_Æloc
 * (
yy_buf„r_°©e
*)

1572 , 
yysˇ¬î
);

1573 i‡–! 
yyg
->
yy_buf„r_°ack
 )

1574 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖktloc_ensure_buffer_stack()" );

1577 
	`mem£t
(
yyg
->
yy_buf„r_°ack
 + yyg->
yy_buf„r_°ack_max
, 0, 
grow_size
 * (
yy_buf„r_°©e
*));

1578 
yyg
->
yy_buf„r_°ack_max
 = 
num_to_Æloc
;

1580 
	}
}

1588 
YY_BUFFER_STATE
 
	$pkéoc__sˇn_buf„r
 (* 
ba£
, 
yy_size_t
 
size
 , 
yysˇn_t
 
yysˇ¬î
)

1590 
YY_BUFFER_STATE
 
b
;

1592 i‡–
size
 < 2 ||

1593 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

1594 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

1598 
b
 = (
YY_BUFFER_STATE
Ë
	`pkéoc_Æloc
(–
yy_buf„r_°©e
 ) ,
yysˇ¬î
 );

1599 i‡–! 
b
 )

1600 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖktloc__scan_buffer()" );

1602 
b
->
yy_buf_size
 = 
size
 - 2;

1603 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

1604 
b
->
yy_is_our_buf„r
 = 0;

1605 
b
->
yy_öput_fûe
 = 0;

1606 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

1607 
b
->
yy_is_öãø˘ive
 = 0;

1608 
b
->
yy_©_bﬁ
 = 1;

1609 
b
->
yy_fûl_buf„r
 = 0;

1610 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1612 
	`pkéoc__swôch_to_buf„r
(
b
 ,
yysˇ¬î
 );

1614  
b
;

1615 
	}
}

1625 
YY_BUFFER_STATE
 
	$pkéoc__sˇn_°rög
 (
yyc⁄°
 * 
yy°r
 , 
yysˇn_t
 
yysˇ¬î
)

1628  
	`pkéoc__sˇn_byãs
(
yy°r
,
	`°æí
(yy°rË,
yysˇ¬î
);

1629 
	}
}

1638 
YY_BUFFER_STATE
 
	$pkéoc__sˇn_byãs
 (
yyc⁄°
 * 
yybyãs
, 
yy_size_t
 
_yybyãs_Àn
 , 
yysˇn_t
 
yysˇ¬î
)

1640 
YY_BUFFER_STATE
 
b
;

1641 *
buf
;

1642 
yy_size_t
 
n
;

1643 
yy_size_t
 
i
;

1646 
n
 = 
_yybyãs_Àn
 + 2;

1647 
buf
 = (*Ë
	`pkéoc_Æloc
(
n
 ,
yysˇ¬î
 );

1648 i‡–! 
buf
 )

1649 
	`YY_FATAL_ERROR
( "out of dynamic memory inÖktloc__scan_bytes()" );

1651  
i
 = 0; i < 
_yybyãs_Àn
; ++i )

1652 
buf
[
i
] = 
yybyãs
[i];

1654 
buf
[
_yybyãs_Àn
] = buf[_yybyãs_Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

1656 
b
 = 
	`pkéoc__sˇn_buf„r
(
buf
,
n
 ,
yysˇ¬î
);

1657 i‡–! 
b
 )

1658 
	`YY_FATAL_ERROR
( "bad buffer inÖktloc__scan_bytes()" );

1663 
b
->
yy_is_our_buf„r
 = 1;

1665  
b
;

1666 
	}
}

1668 #i‚de‡
YY_EXIT_FAILURE


1669 
	#YY_EXIT_FAILURE
 2

	)

1672 
	$yy_Áèl_îr‹
 (
yyc⁄°
 * 
msg
 , 
yysˇn_t
 
yysˇ¬î
)

1674 (Ë
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

1675 
	`exô
–
YY_EXIT_FAILURE
 );

1676 
	}
}

1680 #unde‡
yyÀss


1681 
	#yyÀss
(
n
) \

1685 
yyÀss_ma¸o_¨g
 = (
n
); \

1686 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

1687 
yyãxt
[
yyÀng
] = 
yyg
->
yy_hﬁd_ch¨
; \

1688 
yyg
->
yy_c_buf_p
 = 
yyãxt
 + 
yyÀss_ma¸o_¨g
; \

1689 
yyg
->
yy_hﬁd_ch¨
 = *yyg->
yy_c_buf_p
; \

1690 *
yyg
->
yy_c_buf_p
 = '\0'; \

1691 
yyÀng
 = 
yyÀss_ma¸o_¨g
; \

1693  0 )

	)

1700 
YY_EXTRA_TYPE
 
	$pkéoc_gë_exåa
 (
yysˇn_t
 
yysˇ¬î
)

1702 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1703  
yyexåa
;

1704 
	}
}

1709 
	$pkéoc_gë_löío
 (
yysˇn_t
 
yysˇ¬î
)

1711 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1713 i‡(! 
YY_CURRENT_BUFFER
)

1716  
yylöío
;

1717 
	}
}

1722 
	$pkéoc_gë_cﬁumn
 (
yysˇn_t
 
yysˇ¬î
)

1724 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1726 i‡(! 
YY_CURRENT_BUFFER
)

1729  
yycﬁumn
;

1730 
	}
}

1735 
FILE
 *
	$pkéoc_gë_ö
 (
yysˇn_t
 
yysˇ¬î
)

1737 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1738  
yyö
;

1739 
	}
}

1744 
FILE
 *
	$pkéoc_gë_out
 (
yysˇn_t
 
yysˇ¬î
)

1746 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1747  
yyout
;

1748 
	}
}

1753 
yy_size_t
 
	$pkéoc_gë_Àng
 (
yysˇn_t
 
yysˇ¬î
)

1755 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1756  
yyÀng
;

1757 
	}
}

1763 *
	$pkéoc_gë_ãxt
 (
yysˇn_t
 
yysˇ¬î
)

1765 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1766  
yyãxt
;

1767 
	}
}

1773 
	$pkéoc_£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 , 
yysˇn_t
 
yysˇ¬î
)

1775 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1776 
yyexåa
 = 
u£r_deföed
 ;

1777 
	}
}

1783 
	$pkéoc_£t_löío
 (
löe_numbî
 , 
yysˇn_t
 
yysˇ¬î
)

1785 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1788 i‡(! 
YY_CURRENT_BUFFER
 )

1789 
	`YY_FATAL_ERROR
( "pktloc_set_lineno called withÇo buffer" );

1791 
yylöío
 = 
löe_numbî
;

1792 
	}
}

1798 
	$pkéoc_£t_cﬁumn
 (
cﬁumn_no
 , 
yysˇn_t
 
yysˇ¬î
)

1800 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1803 i‡(! 
YY_CURRENT_BUFFER
 )

1804 
	`YY_FATAL_ERROR
( "pktloc_set_column called withÇo buffer" );

1806 
yycﬁumn
 = 
cﬁumn_no
;

1807 
	}
}

1815 
	$pkéoc_£t_ö
 (
FILE
 * 
ö_°r
 , 
yysˇn_t
 
yysˇ¬î
)

1817 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1818 
yyö
 = 
ö_°r
 ;

1819 
	}
}

1821 
	$pkéoc_£t_out
 (
FILE
 * 
out_°r
 , 
yysˇn_t
 
yysˇ¬î
)

1823 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1824 
yyout
 = 
out_°r
 ;

1825 
	}
}

1827 
	$pkéoc_gë_debug
 (
yysˇn_t
 
yysˇ¬î
)

1829 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1830  
yy_Êex_debug
;

1831 
	}
}

1833 
	$pkéoc_£t_debug
 (
bdebug
 , 
yysˇn_t
 
yysˇ¬î
)

1835 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1836 
yy_Êex_debug
 = 
bdebug
 ;

1837 
	}
}

1841 
YYSTYPE
 * 
	$pkéoc_gë_lvÆ
 (
yysˇn_t
 
yysˇ¬î
)

1843 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1844  
yylvÆ
;

1845 
	}
}

1847 
	$pkéoc_£t_lvÆ
 (
YYSTYPE
 * 
yylvÆ_∑øm
 , 
yysˇn_t
 
yysˇ¬î
)

1849 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1850 
yylvÆ
 = 
yylvÆ_∑øm
;

1851 
	}
}

1853 
YYLTYPE
 *
	$pkéoc_gë_Œoc
 (
yysˇn_t
 
yysˇ¬î
)

1855 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1856  
yyŒoc
;

1857 
	}
}

1859 
	$pkéoc_£t_Œoc
 (
YYLTYPE
 * 
yyŒoc_∑øm
 , 
yysˇn_t
 
yysˇ¬î
)

1861 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1862 
yyŒoc
 = 
yyŒoc_∑øm
;

1863 
	}
}

1872 
	$pkéoc_Àx_öô
(
yysˇn_t
* 
±r_yy_globÆs
)

1875 i‡(
±r_yy_globÆs
 =
NULL
){

1876 
î∫o
 = 
EINVAL
;

1880 *
±r_yy_globÆs
 = (
yysˇn_t
Ë
	`pkéoc_Æloc
 ( –
yyguts_t
 ), 
NULL
 );

1882 i‡(*
±r_yy_globÆs
 =
NULL
){

1883 
î∫o
 = 
ENOMEM
;

1888 
	`mem£t
(*
±r_yy_globÆs
,0x00,(
yyguts_t
));

1890  
	`yy_öô_globÆs
 ( *
±r_yy_globÆs
 );

1891 
	}
}

1901 
	$pkéoc_Àx_öô_exåa
(
YY_EXTRA_TYPE
 
yy_u£r_deföed
,
yysˇn_t
* 
±r_yy_globÆs
 )

1904 
yyguts_t
 
dummy_yyguts
;

1906 
	`pkéoc_£t_exåa
 (
yy_u£r_deföed
, &
dummy_yyguts
);

1908 i‡(
±r_yy_globÆs
 =
NULL
){

1909 
î∫o
 = 
EINVAL
;

1913 *
±r_yy_globÆs
 = (
yysˇn_t
Ë
	`pkéoc_Æloc
 ( –
yyguts_t
 ), &
dummy_yyguts
 );

1915 i‡(*
±r_yy_globÆs
 =
NULL
){

1916 
î∫o
 = 
ENOMEM
;

1922 
	`mem£t
(*
±r_yy_globÆs
,0x00,(
yyguts_t
));

1924 
	`pkéoc_£t_exåa
 (
yy_u£r_deföed
, *
±r_yy_globÆs
);

1926  
	`yy_öô_globÆs
 ( *
±r_yy_globÆs
 );

1927 
	}
}

1929 
	$yy_öô_globÆs
 (
yysˇn_t
 
yysˇ¬î
)

1931 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1936 
yyg
->
yy_buf„r_°ack
 = 0;

1937 
yyg
->
yy_buf„r_°ack_t›
 = 0;

1938 
yyg
->
yy_buf„r_°ack_max
 = 0;

1939 
yyg
->
yy_c_buf_p
 = (*) 0;

1940 
yyg
->
yy_öô
 = 0;

1941 
yyg
->
yy_°¨t
 = 0;

1943 
yyg
->
yy_°¨t_°ack_±r
 = 0;

1944 
yyg
->
yy_°¨t_°ack_dïth
 = 0;

1945 
yyg
->
yy_°¨t_°ack
 = 
NULL
;

1948 #ifde‡
YY_STDINIT


1949 
yyö
 = 
°dö
;

1950 
yyout
 = 
°dout
;

1952 
yyö
 = (
FILE
 *) 0;

1953 
yyout
 = (
FILE
 *) 0;

1960 
	}
}

1963 
	$pkéoc_Àx_de°roy
 (
yysˇn_t
 
yysˇ¬î
)

1965 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

1968 
YY_CURRENT_BUFFER
){

1969 
	`pkéoc__dñëe_buf„r
(
YY_CURRENT_BUFFER
 ,
yysˇ¬î
 );

1970 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

1971 
	`pkéoc_p›_buf„r_°©e
(
yysˇ¬î
);

1975 
	`pkéoc_‰ì
(
yyg
->
yy_buf„r_°ack
 ,
yysˇ¬î
);

1976 
yyg
->
yy_buf„r_°ack
 = 
NULL
;

1979 
	`pkéoc_‰ì
(
yyg
->
yy_°¨t_°ack
 ,
yysˇ¬î
 );

1980 
yyg
->
yy_°¨t_°ack
 = 
NULL
;

1984 
	`yy_öô_globÆs
–
yysˇ¬î
);

1987 
	`pkéoc_‰ì
 ( 
yysˇ¬î
 , yyscanner );

1988 
yysˇ¬î
 = 
NULL
;

1990 
	}
}

1996 #i‚de‡
yyãxt_±r


1997 
	$yy_Êex_°∫˝y
 (* 
s1
, 
yyc⁄°
 * 
s2
, 
n
 , 
yysˇn_t
 
yysˇ¬î
)

1999 
i
;

2000  
i
 = 0; i < 
n
; ++i )

2001 
s1
[
i
] = 
s2
[i];

2002 
	}
}

2005 #ifde‡
YY_NEED_STRLEN


2006 
	$yy_Êex_°æí
 (
yyc⁄°
 * 
s
 , 
yysˇn_t
 
yysˇ¬î
)

2008 
n
;

2009  
n
 = 0; 
s
[n]; ++n )

2012  
n
;

2013 
	}
}

2016 *
	$pkéoc_Æloc
 (
yy_size_t
 
size
 , 
yysˇn_t
 
yysˇ¬î
)

2018  (*Ë
	`mÆloc
–
size
 );

2019 
	}
}

2021 *
	$pkéoc_ªÆloc
 (* 
±r
, 
yy_size_t
 
size
 , 
yysˇn_t
 
yysˇ¬î
)

2030  (*Ë
	`ªÆloc
–(*Ë
±r
, 
size
 );

2031 
	}
}

2033 
	$pkéoc_‰ì
 (* 
±r
 , 
yysˇn_t
 
yysˇ¬î
)

2035 
	`‰ì
–(*Ë
±r
 );

2036 
	}
}

2038 
	#YYTABLES_NAME
 "yyèbÀs"

	)

	@mylibnl/libnl-3.2.25/lib/route/pktloc_grammar.h

1 #i‚de‡
pkéoc_HEADER_H


2 
	#pkéoc_HEADER_H
 1

	)

3 
	#pkéoc_IN_HEADER
 1

	)

9 
	#YY_INT_ALIGNED
 

	)

13 
	#FLEX_SCANNER


	)

14 
	#YY_FLEX_MAJOR_VERSION
 2

	)

15 
	#YY_FLEX_MINOR_VERSION
 5

	)

16 
	#YY_FLEX_SUBMINOR_VERSION
 39

	)

17 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

18 
	#FLEX_BETA


	)

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<î∫o.h
>

27 
	~<°dlib.h
>

33 #i‚de‡
FLEXINT_H


34 
	#FLEXINT_H


	)

38 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

43 #i‚de‡
__STDC_LIMIT_MACROS


44 
	#__STDC_LIMIT_MACROS
 1

	)

47 
	~<öây≥s.h
>

48 
öt8_t
 
	tÊex_öt8_t
;

49 
uöt8_t
 
	tÊex_uöt8_t
;

50 
öt16_t
 
	tÊex_öt16_t
;

51 
uöt16_t
 
	tÊex_uöt16_t
;

52 
öt32_t
 
	tÊex_öt32_t
;

53 
uöt32_t
 
	tÊex_uöt32_t
;

55 sig√d 
	tÊex_öt8_t
;

56 
	tÊex_öt16_t
;

57 
	tÊex_öt32_t
;

58 
	tÊex_uöt8_t
;

59 
	tÊex_uöt16_t
;

60 
	tÊex_uöt32_t
;

63 #i‚de‡
INT8_MIN


64 
	#INT8_MIN
 (-128)

	)

66 #i‚de‡
INT16_MIN


67 
	#INT16_MIN
 (-32767-1)

	)

69 #i‚de‡
INT32_MIN


70 
	#INT32_MIN
 (-2147483647-1)

	)

72 #i‚de‡
INT8_MAX


73 
	#INT8_MAX
 (127)

	)

75 #i‚de‡
INT16_MAX


76 
	#INT16_MAX
 (32767)

	)

78 #i‚de‡
INT32_MAX


79 
	#INT32_MAX
 (2147483647)

	)

81 #i‚de‡
UINT8_MAX


82 
	#UINT8_MAX
 (255U)

	)

84 #i‚de‡
UINT16_MAX


85 
	#UINT16_MAX
 (65535U)

	)

87 #i‚de‡
UINT32_MAX


88 
	#UINT32_MAX
 (4294967295U)

	)

95 #ifde‡
__˝lu•lus


98 
	#YY_USE_CONST


	)

103 #i‡
deföed
 (
__STDC__
)

105 
	#YY_USE_CONST


	)

110 #ifde‡
YY_USE_CONST


111 
	#yyc⁄°
 c⁄°

	)

113 
	#yyc⁄°


	)

117 #i‚de‡
YY_TYPEDEF_YY_SCANNER_T


118 
	#YY_TYPEDEF_YY_SCANNER_T


	)

119 * 
	tyysˇn_t
;

124 
	#yyö
 
yyg
->
yyö_r


	)

125 
	#yyout
 
yyg
->
yyout_r


	)

126 
	#yyexåa
 
yyg
->
yyexåa_r


	)

127 
	#yyÀng
 
yyg
->
yyÀng_r


	)

128 
	#yyãxt
 
yyg
->
yyãxt_r


	)

129 
	#yylöío
 (
YY_CURRENT_BUFFER_LVALUE
->
yy_bs_löío
)

	)

130 
	#yycﬁumn
 (
YY_CURRENT_BUFFER_LVALUE
->
yy_bs_cﬁumn
)

	)

131 
	#yy_Êex_debug
 
yyg
->
yy_Êex_debug_r


	)

134 #i‚de‡
YY_BUF_SIZE


135 #ifde‡
__ü64__


140 
	#YY_BUF_SIZE
 32768

	)

142 
	#YY_BUF_SIZE
 16384

	)

146 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


147 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

148 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

151 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


152 
	#YY_TYPEDEF_YY_SIZE_T


	)

153 
size_t
 
	tyy_size_t
;

156 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


157 
	#YY_STRUCT_YY_BUFFER_STATE


	)

158 
	syy_buf„r_°©e


160 
FILE
 *
	myy_öput_fûe
;

162 *
	myy_ch_buf
;

163 *
	myy_buf_pos
;

168 
yy_size_t
 
	myy_buf_size
;

173 
yy_size_t
 
	myy_n_ch¨s
;

179 
	myy_is_our_buf„r
;

186 
	myy_is_öãø˘ive
;

192 
	myy_©_bﬁ
;

194 
	myy_bs_löío
;

195 
	myy_bs_cﬁumn
;

200 
	myy_fûl_buf„r
;

202 
	myy_buf„r_°©us
;

207 
pkéoc_ª°¨t
 (
FILE
 *
öput_fûe
 ,
yysˇn_t
 
yysˇ¬î
 );

208 
pkéoc__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 ,
yysˇn_t
 
yysˇ¬î
 );

209 
YY_BUFFER_STATE
 
pkéoc__¸óã_buf„r
 (
FILE
 *
fûe
,
size
 ,
yysˇn_t
 
yysˇ¬î
 );

210 
pkéoc__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 ,
yysˇn_t
 
yysˇ¬î
 );

211 
pkéoc__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 ,
yysˇn_t
 
yysˇ¬î
 );

212 
pkéoc_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 ,
yysˇn_t
 
yysˇ¬î
 );

213 
pkéoc_p›_buf„r_°©e
 (
yysˇn_t
 
yysˇ¬î
 );

215 
YY_BUFFER_STATE
 
pkéoc__sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 ,
yysˇn_t
 
yysˇ¬î
 );

216 
YY_BUFFER_STATE
 
pkéoc__sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

217 
YY_BUFFER_STATE
 
pkéoc__sˇn_byãs
 (
yyc⁄°
 *
byãs
,
yy_size_t
 
Àn
 ,
yysˇn_t
 
yysˇ¬î
 );

219 *
pkéoc_Æloc
 (
yy_size_t
 ,
yysˇn_t
 
yysˇ¬î
 );

220 *
pkéoc_ªÆloc
 (*,
yy_size_t
 ,
yysˇn_t
 
yysˇ¬î
 );

221 
pkéoc_‰ì
 (* ,
yysˇn_t
 
yysˇ¬î
 );

223 
	#pkéoc_wøp
(
yysˇ¬î
Ë1

	)

224 
	#YY_SKIP_YYWRAP


	)

226 
	#yyãxt_±r
 
yyãxt_r


	)

228 #ifde‡
YY_HEADER_EXPORT_START_CONDITIONS


229 
	#INITIAL
 0

	)

233 #i‚de‡
YY_NO_UNISTD_H


238 
	~<uni°d.h
>

241 #i‚de‡
YY_EXTRA_TYPE


242 
	#YY_EXTRA_TYPE
 *

	)

245 
pkéoc_Àx_öô
 (
yysˇn_t
* 
sˇ¬î
);

247 
pkéoc_Àx_öô_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
,
yysˇn_t
* 
sˇ¬î
);

252 
pkéoc_Àx_de°roy
 (
yysˇn_t
 
yysˇ¬î
 );

254 
pkéoc_gë_debug
 (
yysˇn_t
 
yysˇ¬î
 );

256 
pkéoc_£t_debug
 (
debug_Êag
 ,
yysˇn_t
 
yysˇ¬î
 );

258 
YY_EXTRA_TYPE
 
pkéoc_gë_exåa
 (
yysˇn_t
 
yysˇ¬î
 );

260 
pkéoc_£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 ,
yysˇn_t
 
yysˇ¬î
 );

262 
FILE
 *
pkéoc_gë_ö
 (
yysˇn_t
 
yysˇ¬î
 );

264 
pkéoc_£t_ö
 (
FILE
 * 
ö_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

266 
FILE
 *
pkéoc_gë_out
 (
yysˇn_t
 
yysˇ¬î
 );

268 
pkéoc_£t_out
 (
FILE
 * 
out_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

270 
yy_size_t
 
pkéoc_gë_Àng
 (
yysˇn_t
 
yysˇ¬î
 );

272 *
pkéoc_gë_ãxt
 (
yysˇn_t
 
yysˇ¬î
 );

274 
pkéoc_gë_löío
 (
yysˇn_t
 
yysˇ¬î
 );

276 
pkéoc_£t_löío
 (
löe_numbî
 ,
yysˇn_t
 
yysˇ¬î
 );

278 
pkéoc_gë_cﬁumn
 (
yysˇn_t
 
yysˇ¬î
 );

280 
pkéoc_£t_cﬁumn
 (
cﬁumn_no
 ,
yysˇn_t
 
yysˇ¬î
 );

282 
YYSTYPE
 * 
pkéoc_gë_lvÆ
 (
yysˇn_t
 
yysˇ¬î
 );

284 
pkéoc_£t_lvÆ
 (
YYSTYPE
 * 
yylvÆ_∑øm
 ,
yysˇn_t
 
yysˇ¬î
 );

286 
YYLTYPE
 *
pkéoc_gë_Œoc
 (
yysˇn_t
 
yysˇ¬î
 );

288 
pkéoc_£t_Œoc
 (
YYLTYPE
 * 
yyŒoc_∑øm
 ,
yysˇn_t
 
yysˇ¬î
 );

294 #i‚de‡
YY_SKIP_YYWRAP


295 #ifde‡
__˝lu•lus


296 "C" 
pkéoc_wøp
 (
yysˇn_t
 
yysˇ¬î
 );

298 
pkéoc_wøp
 (
yysˇn_t
 
yysˇ¬î
 );

302 #i‚de‡
yyãxt_±r


303 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,,
yysˇn_t
 
yysˇ¬î
);

306 #ifde‡
YY_NEED_STRLEN


307 
yy_Êex_°æí
 (
yyc⁄°
 * ,
yysˇn_t
 
yysˇ¬î
);

310 #i‚de‡
YY_NO_INPUT


315 #i‚de‡
YY_READ_BUF_SIZE


316 #ifde‡
__ü64__


318 
	#YY_READ_BUF_SIZE
 16384

	)

320 
	#YY_READ_BUF_SIZE
 8192

	)

325 #i‚de‡
YY_START_STACK_INCR


326 
	#YY_START_STACK_INCR
 25

	)

332 #i‚de‡
YY_DECL


333 
	#YY_DECL_IS_OURS
 1

	)

335 
pkéoc_Àx
 \

336 (
YYSTYPE
 * 
yylvÆ_∑øm
,
YYLTYPE
 * 
yyŒoc_∑øm
 ,
yysˇn_t
 
yysˇ¬î
);

338 
	#YY_DECL
 
pkéoc_Àx
 \

339 (
YYSTYPE
 * 
yylvÆ_∑øm
, 
YYLTYPE
 * 
yyŒoc_∑øm
 , 
yysˇn_t
 
yysˇ¬î
)

	)

344 #unde‡
YY_NEW_FILE


345 #unde‡
YY_FLUSH_BUFFER


346 #unde‡
yy_£t_bﬁ


347 #unde‡
yy_√w_buf„r


348 #unde‡
yy_£t_öãø˘ive


349 #unde‡
YY_DO_BEFORE_ACTION


351 #ifde‡
YY_DECL_IS_OURS


352 #unde‡
YY_DECL_IS_OURS


353 #unde‡
YY_DECL


359 #unde‡
pkéoc_IN_HEADER


	@mylibnl/libnl-3.2.25/lib/route/pktloc_grammar.l

2 
	~<√éök-¥iv©e/√éök.h
>

3 
	~<√éök-¥iv©e/tc.h
>

4 
	~<√éök/√éök.h
>

5 
	~<√éök/utûs.h
>

6 
	~<√éök/rouã/pkéoc.h
>

7 
	~"pkéoc_sy¡ax.h
"

10 %
›ti⁄
 8b
ô


11 %
›ti⁄
 
ªíå™t


12 %
›ti⁄
 
w¨n


13 %
›ti⁄
 
noyywøp


14 %
›ti⁄
 
noöput


15 %
›ti⁄
 
nou≈ut


16 %
›ti⁄
 
bis⁄
-
bridge


17 %
›ti⁄
 
bis⁄
-
loˇti⁄s


18 %
›ti⁄
 
¥efix
="pktloc_"

20 %% /* 
	$yyÀx
 */

22 [ \
t
\
r
\
n
]+

26 [[:
digô
:]]+ |

27 0[
xX
][[:
xdigô
:]]+ {

28 
yylvÆ
->
i
 = 
	`°πoul
(
yyãxt
, 
NULL
, 0);

29  
NUMBER
;

32 "+" {  
yylvÆ
->
i
 = 
yyãxt
[0]; }

34 [
uU
]8 { 
yylvÆ
->
i
 = 
TCF_EM_ALIGN_U8
;  
ALIGN
; }

35 [
uU
]16 { 
yylvÆ
->
i
 = 
TCF_EM_ALIGN_U16
;  
ALIGN
; }

36 [
uU
]32 { 
yylvÆ
->
i
 = 
TCF_EM_ALIGN_U32
;  
ALIGN
; }

38 [
lL
][
iI
][
nN
][
kK
] |

39 [
eE
][
tT
][
hH
] { 
yylvÆ
->
i
 = 
TCF_LAYER_LINK
;  
LAYER
; }

40 [
nN
][
eE
][
tT
] |

41 [
iI
][
pP
] { 
yylvÆ
->
i
 = 
TCF_LAYER_NETWORK
;  
LAYER
; }

42 [
tT
][
rR
][
aA
][
nN
][
sS
][
pP
][
oO
][rR][tT] |

43 [
tT
][
cC
][
pP
] { 
yylvÆ
->
i
 = 
TCF_LAYER_TRANSPORT
;  
LAYER
; }

46 [^ \
t
\
r
\
n
+]+ {

47 
yylvÆ
->
s
 = 
	`°rdup
(
yyãxt
);

48 i‡(
yylvÆ
->
s
 =
NULL
)

49  
ERROR
;

50  
NAME
;

	@mylibnl/libnl-3.2.25/lib/route/pktloc_syntax.c

44 
	#YYBISON
 1

	)

47 
	#YYBISON_VERSION
 "3.0.2"

	)

50 
	#YYSKELETON_NAME
 "yacc.c"

	)

53 
	#YYPURE
 1

	)

56 
	#YYPUSH
 0

	)

59 
	#YYPULL
 1

	)

63 
	#yy∑r£
 
pkéoc_∑r£


	)

64 
	#yyÀx
 
pkéoc_Àx


	)

65 
	#yyîr‹
 
pkéoc_îr‹


	)

66 
	#yydebug
 
pkéoc_debug


	)

67 
	#yy√ºs
 
pkéoc_√ºs


	)

73 
	~<√éök-¥iv©e/√éök.h
>

74 
	~<√éök-¥iv©e/tc.h
>

75 
	~<√éök/√éök.h
>

76 
	~<√éök/utûs.h
>

77 
	~<√éök/rouã/pkéoc.h
>

81 #i‚de‡
YY_NULLPTR


82 #i‡
deföed
 
__˝lu•lus
 && 201103L <= __cplusplus

83 
	#YY_NULLPTR
 
nuŒ±r


	)

85 
	#YY_NULLPTR
 0

	)

90 #ifde‡
YYERROR_VERBOSE


91 #unde‡
YYERROR_VERBOSE


92 
	#YYERROR_VERBOSE
 1

	)

94 
	#YYERROR_VERBOSE
 1

	)

99 #i‚de‡
YY_PKTLOC_ROUTE_PKTLOC_SYNTAX_H_INCLUDED


100 
	#YY_PKTLOC_ROUTE_PKTLOC_SYNTAX_H_INCLUDED


	)

102 #i‚de‡
YYDEBUG


103 
	#YYDEBUG
 0

	)

105 #i‡
YYDEBUG


106 
pkéoc_debug
;

110 #i‚de‡
YYTOKENTYPE


111 
	#YYTOKENTYPE


	)

112 
	eyytokíty≥


114 
	mERROR
 = 258,

115 
	mNUMBER
 = 259,

116 
	mLAYER
 = 260,

117 
	mALIGN
 = 261,

118 
	mNAME
 = 262

122 
	#ERROR
 258

	)

123 
	#NUMBER
 259

	)

124 
	#LAYER
 260

	)

125 
	#ALIGN
 261

	)

126 
	#NAME
 262

	)

129 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


130 
YYSTYPE
 
	tYYSTYPE
;

131 
	uYYSTYPE


135 
π∆_pkéoc
 *
	ml
;

136 
uöt32_t
 
	mi
;

137 *
	ms
;

141 
	#YYSTYPE_IS_TRIVIAL
 1

	)

142 
	#YYSTYPE_IS_DECLARED
 1

	)

146 #i‡! 
deföed
 
YYLTYPE
 && ! deföed 
YYLTYPE_IS_DECLARED


147 
YYLTYPE
 
	tYYLTYPE
;

148 
	sYYLTYPE


150 
	mfú°_löe
;

151 
	mfú°_cﬁumn
;

152 
	mœ°_löe
;

153 
	mœ°_cﬁumn
;

155 
	#YYLTYPE_IS_DECLARED
 1

	)

156 
	#YYLTYPE_IS_TRIVIAL
 1

	)

161 
pkéoc_∑r£
 (*
sˇ¬î
);

168 
pkéoc_Àx
(
YYSTYPE
 *, 
YYLTYPE
 *, *);

170 
	$yyîr‹
(
YYLTYPE
 *
lo˝
, *
sˇ¬î
, c⁄° *
msg
)

172 
	`NL_DBG
(1, "Eº‹ whûê∑rsögÖackëÜoˇti⁄ fûe: %s\n", 
msg
);

173 
	}
}

181 #ifde‡
YYTYPE_UINT8


182 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

184 
	tyyty≥_uöt8
;

187 #ifde‡
YYTYPE_INT8


188 
YYTYPE_INT8
 
	tyyty≥_öt8
;

190 sig√d 
	tyyty≥_öt8
;

193 #ifde‡
YYTYPE_UINT16


194 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

196 
	tyyty≥_uöt16
;

199 #ifde‡
YYTYPE_INT16


200 
YYTYPE_INT16
 
	tyyty≥_öt16
;

202 
	tyyty≥_öt16
;

205 #i‚de‡
YYSIZE_T


206 #ifde‡
__SIZE_TYPE__


207 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

208 #ñi‡
deföed
 
size_t


209 
	#YYSIZE_T
 
size_t


	)

210 #ñi‡! 
deföed
 
YYSIZE_T


211 
	~<°ddef.h
>

212 
	#YYSIZE_T
 
size_t


	)

214 
	#YYSIZE_T
 

	)

218 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

220 #i‚de‡
YY_


221 #i‡
deföed
 
YYENABLE_NLS
 && YYENABLE_NLS

222 #i‡
ENABLE_NLS


223 
	~<liböé.h
>

224 
	#YY_
(
Msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", Msgid)

	)

227 #i‚de‡
YY_


228 
	#YY_
(
Msgid
Ë
	)
Msgid

232 #i‚de‡
YY_ATTRIBUTE


233 #i‡(
deföed
 
__GNUC__
 \

234 && (2 < 
	g__GNUC__
 || (__GNUC__ =2 && 96 <
__GNUC_MINOR__
))) \

235 || 
deföed
 
__SUNPRO_C
 && 0x5110 <= __SUNPRO_C

236 
	#YY_ATTRIBUTE
(
S≥c
Ë
	`__©åibuã__
(S≥c)

	)

238 
	#YY_ATTRIBUTE
(
S≥c
Ë

	)

242 #i‚de‡
YY_ATTRIBUTE_PURE


243 
	#YY_ATTRIBUTE_PURE
 
	`YY_ATTRIBUTE
 ((
__puª__
))

	)

246 #i‚de‡
YY_ATTRIBUTE_UNUSED


247 
	#YY_ATTRIBUTE_UNUSED
 
	`YY_ATTRIBUTE
 ((
__unu£d__
))

	)

250 #i‡!
deföed
 
_N‹ëu∫
 \

251 && (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 201112)

252 #i‡
deföed
 
_MSC_VER
 && 1200 <= _MSC_VER

253 
	#_N‹ëu∫
 
	`__de˛•ec
 (
n‹ëu∫
)

	)

255 
	#_N‹ëu∫
 
	`YY_ATTRIBUTE
 ((
__n‹ëu∫__
))

	)

260 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


261 
	#YYUSE
(
E
Ë((Ë(E))

	)

263 
	#YYUSE
(
E
Ë

	)

266 #i‡
deföed
 
__GNUC__
 && 407 <__GNUC__ * 100 + 
__GNUC_MINOR__


268 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
 \

269 
	`_Pøgma
 ("GCC diagnosticÖush") \

270 
	`_Pøgma
 ("GCC diagnostic ignored \"-Wuninitialized\"")\

271 
	`_Pøgma
 ("GCC dügno°i¯ign‹ed \"-Wmaybe-unöôülized\"")

	)

272 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END
 \

273 
	`_Pøgma
 ("GCC dügno°i¯p›")

	)

275 
	#YY_INITIAL_VALUE
(
VÆue
Ë
	)
VÆue

277 #i‚de‡
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


278 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


	)

279 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END


	)

281 #i‚de‡
YY_INITIAL_VALUE


282 
	#YY_INITIAL_VALUE
(
VÆue
Ë

	)

286 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


290 #ifde‡
YYSTACK_USE_ALLOCA


291 #i‡
YYSTACK_USE_ALLOCA


292 #ifde‡
__GNUC__


293 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

294 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


295 
	~<Æloˇ.h
>

296 #ñi‡
deföed
 
_AIX


297 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

298 #ñi‡
deföed
 
_MSC_VER


299 
	~<mÆloc.h
>

300 
	#Æloˇ
 
_Æloˇ


	)

302 
	#YYSTACK_ALLOC
 
Æloˇ


	)

303 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
EXIT_SUCCESS


304 
	~<°dlib.h
>

306 #i‚de‡
EXIT_SUCCESS


307 
	#EXIT_SUCCESS
 0

	)

314 #ifde‡
YYSTACK_ALLOC


316 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 0)

	)

317 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


322 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

325 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

326 
	#YYSTACK_FREE
 
YYFREE


	)

327 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


328 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

330 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
EXIT_SUCCESS
 \

331 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

332 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

333 
	~<°dlib.h
>

334 #i‚de‡
EXIT_SUCCESS


335 
	#EXIT_SUCCESS
 0

	)

338 #i‚de‡
YYMALLOC


339 
	#YYMALLOC
 
mÆloc


	)

340 #i‡! 
deföed
 
mÆloc
 && ! deföed 
EXIT_SUCCESS


341 *
mÆloc
 (
YYSIZE_T
);

344 #i‚de‡
YYFREE


345 
	#YYFREE
 
‰ì


	)

346 #i‡! 
deföed
 
‰ì
 && ! deföed 
EXIT_SUCCESS


347 
‰ì
 (*);

354 #i‡(! 
deföed
 
yyovîÊow
 \

355 && (! 
deföed
 
	g__˝lu•lus
 \

356 || (
deföed
 
	gYYLTYPE_IS_TRIVIAL
 && YYLTYPE_IS_TRIVIAL \

357 && 
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

360 
	uyyÆloc


362 
yyty≥_öt16
 
	myyss_Æloc
;

363 
YYSTYPE
 
	myyvs_Æloc
;

364 
YYLTYPE
 
	myyls_Æloc
;

368 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

372 
	#YYSTACK_BYTES
(
N
) \

373 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
Ë+  (
YYLTYPE
)) \

374 + 2 * 
YYSTACK_GAP_MAXIMUM
)

	)

376 
	#YYCOPY_NEEDED
 1

	)

383 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

386 
YYSIZE_T
 
yy√wbyãs
; \

387 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

388 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

389 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

390 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

392 0)

	)

396 #i‡
deföed
 
YYCOPY_NEEDED
 && YYCOPY_NEEDED

399 #i‚de‡
YYCOPY


400 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

401 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

402 
	`__buûtö_mem˝y
 (
D°
, 
Src
, (
Cou¡
Ë*  (*(Src)))

	)

404 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

407 
YYSIZE_T
 
yyi
; \

408 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

409 (
D°
)[
yyi
] = (
Src
)[yyi]; \

411 0)

	)

417 
	#YYFINAL
 7

	)

419 
	#YYLAST
 10

	)

422 
	#YYNTOKENS
 9

	)

424 
	#YYNNTS
 7

	)

426 
	#YYNRULES
 12

	)

428 
	#YYNSTATES
 17

	)

432 
	#YYUNDEFTOK
 2

	)

433 
	#YYMAXUTOK
 262

	)

435 
	#YYTRANSLATE
(
YYX
) \

436 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

440 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

471 #i‡
YYDEBUG


473 c⁄° 
yyty≥_uöt8
 
	gyyæöe
[] =

480 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 1

483 c⁄° *c⁄° 
	gyyäame
[] =

487 "shi·", 
YY_NULLPTR


491 #ifde‡
YYPRINT


494 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

500 
	#YYPACT_NINF
 -7

	)

502 
	#yy∑˘_vÆue_is_deÁu…
(
Yy°©e
) \

503 (!!((
Yy°©e
Ë=(-7)))

	)

505 
	#YYTABLE_NINF
 -1

	)

507 
	#yyèbÀ_vÆue_is_îr‹
(
YyèbÀ_vÆue
) \

508 0

	)

512 c⁄° 
yyty≥_öt8
 
	gyy∑˘
[] =

521 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

528 c⁄° 
yyty≥_öt8
 
	gyypgŸo
[] =

534 c⁄° 
yyty≥_öt8
 
	gyydefgŸo
[] =

542 c⁄° 
yyty≥_uöt8
 
	gyyèbÀ
[] =

548 c⁄° 
yyty≥_öt8
 
	gyycheck
[] =

556 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

563 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

570 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

577 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

578 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

579 
	#YYEMPTY
 (-2)

	)

580 
	#YYEOF
 0

	)

582 
	#YYACCEPT
 
yyac˚±œb


	)

583 
	#YYABORT
 
yyab‹éab


	)

584 
	#YYERROR
 
yyîr‹œb


	)

587 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

589 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

591 i‡(
yych¨
 =
YYEMPTY
) \

593 
yych¨
 = (
Tokí
); \

594 
yylvÆ
 = (
VÆue
); \

595 
	`YYPOPSTACK
 (
yyÀn
); \

596 
yy°©e
 = *
yys•
; \

597 
yybackup
; \

601 
	`yyîr‹
 (&
yyŒoc
, 
sˇ¬î
, 
	`YY_
("syntaxÉrror: cannot back up")); \

602 
YYERROR
; \

604 0)

	)

607 
	#YYTERROR
 1

	)

608 
	#YYERRCODE
 256

	)

615 #i‚de‡
YYLLOC_DEFAULT


616 
	#YYLLOC_DEFAULT
(
Cuºít
, 
Rhs
, 
N
) \

618 i‡(
N
) \

620 (
Cuºít
).
fú°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_line; \

621 (
Cuºít
).
fú°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_column; \

622 (
Cuºít
).
œ°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_line; \

623 (
Cuºít
).
œ°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_column; \

627 (
Cuºít
).
fú°_löe
 = (Cuºít).
œ°_löe
 = \

628 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_löe
; \

629 (
Cuºít
).
fú°_cﬁumn
 = (Cuºít).
œ°_cﬁumn
 = \

630 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_cﬁumn
; \

632 0)

	)

635 
	#YYRHSLOC
(
Rhs
, 
K
Ë((Rhs)[K])

	)

639 #i‡
YYDEBUG


641 #i‚de‡
YYFPRINTF


642 
	~<°dio.h
>

643 
	#YYFPRINTF
 
Ârötf


	)

646 
	#YYDPRINTF
(
Args
) \

648 i‡(
yydebug
) \

649 
YYFPRINTF
 
Args
; \

650 } 0)

	)

657 #i‚de‡
YY_LOCATION_PRINT


658 #i‡
deföed
 
YYLTYPE_IS_TRIVIAL
 && YYLTYPE_IS_TRIVIAL

662 
YY_ATTRIBUTE_UNUSED


664 
	$yy_loˇti⁄_¥öt_
 (
FILE
 *
yyo
, 
YYLTYPE
 c⁄° * c⁄° 
yylo˝
)

666 
ªs
 = 0;

667 
íd_cﬁ
 = 0 !
yylo˝
->
œ°_cﬁumn
 ? yylocp->last_column - 1 : 0;

668 i‡(0 <
yylo˝
->
fú°_löe
)

670 
ªs
 +
	`YYFPRINTF
 (
yyo
, "%d", 
yylo˝
->
fú°_löe
);

671 i‡(0 <
yylo˝
->
fú°_cﬁumn
)

672 
ªs
 +
	`YYFPRINTF
 (
yyo
, ".%d", 
yylo˝
->
fú°_cﬁumn
);

674 i‡(0 <
yylo˝
->
œ°_löe
)

676 i‡(
yylo˝
->
fú°_löe
 < yylo˝->
œ°_löe
)

678 
ªs
 +
	`YYFPRINTF
 (
yyo
, "-%d", 
yylo˝
->
œ°_löe
);

679 i‡(0 <
íd_cﬁ
)

680 
ªs
 +
	`YYFPRINTF
 (
yyo
, ".%d", 
íd_cﬁ
);

682 i‡(0 <
íd_cﬁ
 && 
yylo˝
->
fú°_cﬁumn
 <Énd_col)

683 
ªs
 +
	`YYFPRINTF
 (
yyo
, "-%d", 
íd_cﬁ
);

685  
ªs
;

686 
	}
}

688 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
) \

689 
	`yy_loˇti⁄_¥öt_
 (
Fûe
, &(
Loc
))

	)

692 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

697 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

699 i‡(
yydebug
) \

701 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

702 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

703 
Ty≥
, 
VÆue
, 
Loˇti⁄
, 
sˇ¬î
); \

704 
	`YYFPRINTF
 (
°dîr
, "\n"); \

706 } 0)

	)

714 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
, 
YYLTYPE
 c⁄° * c⁄° 
yyloˇti⁄p
, *
sˇ¬î
)

716 
FILE
 *
yyo
 = 
yyouçut
;

717 
	`YYUSE
 (
yyo
);

718 
	`YYUSE
 (
yyloˇti⁄p
);

719 
	`YYUSE
 (
sˇ¬î
);

720 i‡(!
yyvÆuï
)

722 #ifde‡
YYPRINT


723 i‡(
yyty≥
 < 
YYNTOKENS
)

724 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

726 
	`YYUSE
 (
yyty≥
);

727 
	}
}

735 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
, 
YYLTYPE
 c⁄° * c⁄° 
yyloˇti⁄p
, *
sˇ¬î
)

737 
	`YYFPRINTF
 (
yyouçut
, "%s %s (",

738 
yyty≥
 < 
YYNTOKENS
 ? "tokí" : "¡îm", 
yyäame
[yytype]);

740 
	`YY_LOCATION_PRINT
 (
yyouçut
, *
yyloˇti⁄p
);

741 
	`YYFPRINTF
 (
yyouçut
, ": ");

742 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
, 
sˇ¬î
);

743 
	`YYFPRINTF
 (
yyouçut
, ")");

744 
	}
}

752 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

754 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

755 ; 
yybŸtom
 <
yyt›
; yybottom++)

757 
yybŸ
 = *
yybŸtom
;

758 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

760 
	`YYFPRINTF
 (
°dîr
, "\n");

761 
	}
}

763 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

765 i‡(
yydebug
) \

766 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

767 } 0)

	)

775 
	$yy_ªdu˚_¥öt
 (
yyty≥_öt16
 *
yys•
, 
YYSTYPE
 *
yyv•
, 
YYLTYPE
 *
yyl•
, 
yyruÀ
, *
sˇ¬î
)

777 
yy o
 = 
yyæöe
[
yyruÀ
];

778 
yyƒhs
 = 
yyr2
[
yyruÀ
];

779 
yyi
;

780 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

781 
yyruÀ
 - 1, 
yy o
);

783 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

785 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

786 
	`yy_symbﬁ_¥öt
 (
°dîr
,

787 
yy°os
[
yys•
[
yyi
 + 1 - 
yyƒhs
]],

788 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

789 , &(
yyl•
[(
yyi
 + 1Ë- (
yyƒhs
)]Ë, 
sˇ¬î
);

790 
	`YYFPRINTF
 (
°dîr
, "\n");

792 
	}
}

794 
	#YY_REDUCE_PRINT
(
RuÀ
) \

796 i‡(
yydebug
) \

797 
	`yy_ªdu˚_¥öt
 (
yys•
, 
yyv•
, 
yyl•
, 
RuÀ
, 
sˇ¬î
); \

798 } 0)

	)

802 
	gyydebug
;

804 
	#YYDPRINTF
(
Args
)

	)

805 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

806 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

807 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

812 #i‚de‡
YYINITDEPTH


813 
	#YYINITDEPTH
 200

	)

823 #i‚de‡
YYMAXDEPTH


824 
	#YYMAXDEPTH
 10000

	)

828 #i‡
YYERROR_VERBOSE


830 #i‚de‡
yy°æí


831 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


832 
	#yy°æí
 
°æí


	)

835 
YYSIZE_T


836 
	$yy°æí
 (c⁄° *
yy°r
)

838 
YYSIZE_T
 
yyÀn
;

839 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

841  
yyÀn
;

842 
	}
}

846 #i‚de‡
yy°p˝y


847 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


848 
	#yy°p˝y
 
°p˝y


	)

853 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

855 *
yyd
 = 
yyde°
;

856 c⁄° *
yys
 = 
yy§c
;

858 (*
yyd
++ = *
yys
++) != '\0')

861  
yyd
 - 1;

862 
	}
}

866 #i‚de‡
yyäamîr


874 
YYSIZE_T


875 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

877 i‡(*
yy°r
 == '"')

879 
YYSIZE_T
 
yyn
 = 0;

880 c⁄° *
yyp
 = 
yy°r
;

883 *++
yyp
)

887 
do_nŸ_°rù_quŸes
;

890 i‡(*++
yyp
 != '\\')

891 
do_nŸ_°rù_quŸes
;

894 i‡(
yyªs
)

895 
yyªs
[
yyn
] = *
yyp
;

896 
yyn
++;

900 i‡(
yyªs
)

901 
yyªs
[
yyn
] = '\0';

902  
yyn
;

904 
do_nŸ_°rù_quŸes
: ;

907 i‡(! 
yyªs
)

908  
	`yy°æí
 (
yy°r
);

910  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

911 
	}
}

923 
	$yysy¡ax_îr‹
 (
YYSIZE_T
 *
yymsg_Æloc
, **
yymsg
,

924 
yyty≥_öt16
 *
yys•
, 
yytokí
)

926 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yytokí
]);

927 
YYSIZE_T
 
yysize
 = 
yysize0
;

928 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

930 c⁄° *
yyf‹m©
 = 
YY_NULLPTR
;

932 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

935 
yycou¡
 = 0;

960 i‡(
yytokí
 !
YYEMPTY
)

962 
yyn
 = 
yy∑˘
[*
yys•
];

963 
yy¨g
[
yycou¡
++] = 
yyäame
[
yytokí
];

964 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

969 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

971 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

972 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

973 
yyx
;

975 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

976 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR


977 && !
	`yyèbÀ_vÆue_is_îr‹
 (
yyèbÀ
[
yyx
 + 
yyn
]))

979 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

981 
yycou¡
 = 1;

982 
yysize
 = 
yysize0
;

985 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

987 
YYSIZE_T
 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yyx
]);

988 i‡(! (
yysize
 <
yysize1


989 && 
yysize1
 <
YYSTACK_ALLOC_MAXIMUM
))

991 
yysize
 = 
yysize1
;

997 
yycou¡
)

999 
	#YYCASE_
(
N
, 
S
) \

1000 
N
: \

1001 
yyf‹m©
 = 
S
; \

1002 

	)

1003 
	`YYCASE_
(0, 
	`YY_
("syntaxÉrror"));

1004 
	`YYCASE_
(1, 
	`YY_
("syntaxÉrror, unexpected %s"));

1005 
	`YYCASE_
(2, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s"));

1006 
	`YYCASE_
(3, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s"));

1007 
	`YYCASE_
(4, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s"));

1008 
	`YYCASE_
(5, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s"));

1009 #unde‡
YYCASE_


1013 
YYSIZE_T
 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf‹m©
);

1014 i‡(! (
yysize
 <
yysize1
 && yysize1 <
YYSTACK_ALLOC_MAXIMUM
))

1016 
yysize
 = 
yysize1
;

1019 i‡(*
yymsg_Æloc
 < 
yysize
)

1021 *
yymsg_Æloc
 = 2 * 
yysize
;

1022 i‡(! (
yysize
 <*
yymsg_Æloc


1023 && *
yymsg_Æloc
 <
YYSTACK_ALLOC_MAXIMUM
))

1024 *
yymsg_Æloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

1032 *
yyp
 = *
yymsg
;

1033 
yyi
 = 0;

1034 (*
yyp
 = *
yyf‹m©
) != '\0')

1035 i‡(*
yyp
 ='%' && 
yyf‹m©
[1] ='s' && 
yyi
 < 
yycou¡
)

1037 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1038 
yyf‹m©
 += 2;

1042 
yyp
++;

1043 
yyf‹m©
++;

1047 
	}
}

1055 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
, 
YYLTYPE
 *
yyloˇti⁄p
, *
sˇ¬î
)

1057 
	`YYUSE
 (
yyvÆuï
);

1058 
	`YYUSE
 (
yyloˇti⁄p
);

1059 
	`YYUSE
 (
sˇ¬î
);

1060 i‡(!
yymsg
)

1061 
yymsg
 = "Deleting";

1062 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1064 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1065 
yyty≥
)

1069 { 
	`‰ì
(((*
yyvÆuï
).
s
)); }

1077 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1078 
	}
}

1088 
	$yy∑r£
 (*
sˇ¬î
)

1091 
yych¨
;

1097 
	`YY_INITIAL_VALUE
 (
YYSTYPE
 
yyvÆ_deÁu…
;)

1098 
YYSTYPE
 
yylvÆ
 
	`YY_INITIAL_VALUE
 (
yyvÆ_deÁu…
);

1101 
YYLTYPE
 
yyloc_deÁu…


1102 #i‡
deföed
 
YYLTYPE_IS_TRIVIAL
 && YYLTYPE_IS_TRIVIAL

1106 
YYLTYPE
 
yyŒoc
 = 
yyloc_deÁu…
;

1109 
yy√ºs
;

1111 
yy°©e
;

1113 
yyîr°©us
;

1124 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1125 
yyty≥_öt16
 *
yyss
;

1126 
yyty≥_öt16
 *
yys•
;

1129 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1130 
YYSTYPE
 *
yyvs
;

1131 
YYSTYPE
 *
yyv•
;

1134 
YYLTYPE
 
yylß
[
YYINITDEPTH
];

1135 
YYLTYPE
 *
yyls
;

1136 
YYLTYPE
 *
yyl•
;

1139 
YYLTYPE
 
yyîr‹_ønge
[3];

1141 
YYSIZE_T
 
yy°acksize
;

1143 
yyn
;

1144 
yyªsu…
;

1146 
yytokí
 = 0;

1149 
YYSTYPE
 
yyvÆ
;

1150 
YYLTYPE
 
yyloc
;

1152 #i‡
YYERROR_VERBOSE


1154 
yymsgbuf
[128];

1155 *
yymsg
 = 
yymsgbuf
;

1156 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1159 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N), 
yyl•
 -(N))

	)

1163 
yyÀn
 = 0;

1165 
yys•
 = 
yyss
 = 
yysß
;

1166 
yyv•
 = 
yyvs
 = 
yyvß
;

1167 
yyl•
 = 
yyls
 = 
yylß
;

1168 
yy°acksize
 = 
YYINITDEPTH
;

1170 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1172 
yy°©e
 = 0;

1173 
yyîr°©us
 = 0;

1174 
yy√ºs
 = 0;

1175 
yych¨
 = 
YYEMPTY
;

1176 
yyl•
[0] = 
yyŒoc
;

1177 
yy£t°©e
;

1182 
yy√w°©e
:

1185 
yys•
++;

1187 
yy£t°©e
:

1188 *
yys•
 = 
yy°©e
;

1190 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1193 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1195 #ifde‡
yyovîÊow


1200 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1201 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1202 
YYLTYPE
 *
yyls1
 = 
yyls
;

1208 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1209 &
yyss1
, 
yysize
 *  (*
yys•
),

1210 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1211 &
yyls1
, 
yysize
 *  (*
yyl•
),

1212 &
yy°acksize
);

1214 
yyls
 = 
yyls1
;

1215 
yyss
 = 
yyss1
;

1216 
yyvs
 = 
yyvs1
;

1219 #i‚de‡
YYSTACK_RELOCATE


1220 
yyexhau°edœb
;

1223 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1224 
yyexhau°edœb
;

1225 
yy°acksize
 *= 2;

1226 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1227 
yy°acksize
 = 
YYMAXDEPTH
;

1230 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1231 
yyÆloc
 *
yy±r
 =

1232 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1233 i‡(! 
yy±r
)

1234 
yyexhau°edœb
;

1235 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1236 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1237 
	`YYSTACK_RELOCATE
 (
yyls_Æloc
, 
yyls
);

1238 #unde‡
YYSTACK_RELOCATE


1239 i‡(
yyss1
 !
yysß
)

1240 
	`YYSTACK_FREE
 (
yyss1
);

1245 
yys•
 = 
yyss
 + 
yysize
 - 1;

1246 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1247 
yyl•
 = 
yyls
 + 
yysize
 - 1;

1249 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1250 (Ë
yy°acksize
));

1252 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1253 
YYABORT
;

1256 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1258 i‡(
yy°©e
 =
YYFINAL
)

1259 
YYACCEPT
;

1261 
yybackup
;

1266 
yybackup
:

1272 
yyn
 = 
yy∑˘
[
yy°©e
];

1273 i‡(
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1274 
yydeÁu…
;

1279 i‡(
yych¨
 =
YYEMPTY
)

1281 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1282 
yych¨
 = 
	`yyÀx
 (&
yylvÆ
, &
yyŒoc
, 
sˇ¬î
);

1285 i‡(
yych¨
 <
YYEOF
)

1287 
yych¨
 = 
yytokí
 = 
YYEOF
;

1288 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1292 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1293 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1298 
yyn
 +
yytokí
;

1299 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1300 
yydeÁu…
;

1301 
yyn
 = 
yyèbÀ
[yyn];

1302 i‡(
yyn
 <= 0)

1304 i‡(
	`yyèbÀ_vÆue_is_îr‹
 (
yyn
))

1305 
yyîæab
;

1306 
yyn
 = -yyn;

1307 
yyªdu˚
;

1312 i‡(
yyîr°©us
)

1313 
yyîr°©us
--;

1316 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1319 
yych¨
 = 
YYEMPTY
;

1321 
yy°©e
 = 
yyn
;

1322 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1323 *++
yyv•
 = 
yylvÆ
;

1324 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1325 *++
yyl•
 = 
yyŒoc
;

1326 
yy√w°©e
;

1332 
yydeÁu…
:

1333 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1334 i‡(
yyn
 == 0)

1335 
yyîæab
;

1336 
yyªdu˚
;

1342 
yyªdu˚
:

1344 
yyÀn
 = 
yyr2
[
yyn
];

1354 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1357 
	`YYLLOC_DEFAULT
 (
yyloc
, (
yyl•
 - 
yyÀn
), yylen);

1358 
	`YY_REDUCE_PRINT
 (
yyn
);

1359 
yyn
)

1364 
π∆_pkéoc
 *
loc
;

1366 i‡(!(
loc
 = 
	`π∆_pkéoc_Æloc
())) {

1367 
	`NL_DBG
(1, "AllocatingáÖacketÜocation "

1369 
YYABORT
;

1372 
loc
->
«me
 = (
yyv•
[-5].
s
);

1373 
loc
->
Æign
 = (
yyv•
[-4].
i
);

1374 
loc
->
œyî
 = (
yyv•
[-3].
i
);

1375 
loc
->
off£t
 = (
yyv•
[-2].
i
);

1376 
loc
->
mask
 = (
yyv•
[-1].
i
);

1377 
loc
->
shi·
 = (
yyv•
[0].
i
);

1379 i‡(
	`π∆_pkéoc_add
(
loc
) < 0) {

1380 
	`NL_DBG
(1, "DuplicateÖacketÜocationÉntry "

1381 "\"%s\"\n", (
yyv•
[-5].
s
));

1384 (
yyvÆ
.
l
Ë
loc
;

1391 { (
yyvÆ
.
i
Ë(
yyv•
[0].i); }

1397 { (
yyvÆ
.
i
Ë(
yyv•
[0].i); }

1403 { (
yyvÆ
.
i
Ë
TCF_LAYER_NETWORK
; }

1409 { (
yyvÆ
.
i
Ë(
yyv•
[-1].i); }

1415 { (
yyvÆ
.
i
) = 0; }

1421 { (
yyvÆ
.
i
Ë(
yyv•
[0].i); }

1427 { (
yyvÆ
.
i
) = 0; }

1433 { (
yyvÆ
.
i
Ë(
yyv•
[0].i); }

1452 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

1454 
	`YYPOPSTACK
 (
yyÀn
);

1455 
yyÀn
 = 0;

1456 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1458 *++
yyv•
 = 
yyvÆ
;

1459 *++
yyl•
 = 
yyloc
;

1465 
yyn
 = 
yyr1
[yyn];

1467 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

1468 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

1469 
yy°©e
 = 
yyèbÀ
[yystate];

1471 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

1473 
yy√w°©e
;

1479 
yyîæab
:

1482 
yytokí
 = 
yych¨
 =
YYEMPTY
 ? YYEMPTY : 
	`YYTRANSLATE
 (yychar);

1485 i‡(!
yyîr°©us
)

1487 ++
yy√ºs
;

1488 #i‡! 
YYERROR_VERBOSE


1489 
	`yyîr‹
 (&
yyŒoc
, 
sˇ¬î
, 
	`YY_
("syntaxÉrror"));

1491 
	#YYSYNTAX_ERROR
 
	`yysy¡ax_îr‹
 (&
yymsg_Æloc
, &
yymsg
, \

1492 
yys•
, 
yytokí
)

	)

1494 c⁄° *
yymsgp
 = 
	`YY_
("syntaxÉrror");

1495 
yysy¡ax_îr‹_°©us
;

1496 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

1497 i‡(
yysy¡ax_îr‹_°©us
 == 0)

1498 
yymsgp
 = 
yymsg
;

1499 i‡(
yysy¡ax_îr‹_°©us
 == 1)

1501 i‡(
yymsg
 !
yymsgbuf
)

1502 
	`YYSTACK_FREE
 (
yymsg
);

1503 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yymsg_Æloc
);

1504 i‡(!
yymsg
)

1506 
yymsg
 = 
yymsgbuf
;

1507 
yymsg_Æloc
 =  
yymsgbuf
;

1508 
yysy¡ax_îr‹_°©us
 = 2;

1512 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

1513 
yymsgp
 = 
yymsg
;

1516 
	`yyîr‹
 (&
yyŒoc
, 
sˇ¬î
, 
yymsgp
);

1517 i‡(
yysy¡ax_îr‹_°©us
 == 2)

1518 
yyexhau°edœb
;

1520 #unde‡
YYSYNTAX_ERROR


1524 
yyîr‹_ønge
[1] = 
yyŒoc
;

1526 i‡(
yyîr°©us
 == 3)

1531 i‡(
yych¨
 <
YYEOF
)

1534 i‡(
yych¨
 =
YYEOF
)

1535 
YYABORT
;

1539 
	`yyde°ru˘
 ("Error: discarding",

1540 
yytokí
, &
yylvÆ
, &
yyŒoc
, 
sˇ¬î
);

1541 
yych¨
 = 
YYEMPTY
;

1547 
yyîæab1
;

1553 
yyîr‹œb
:

1559 
yyîr‹œb
;

1561 
yyîr‹_ønge
[1] = 
yyl•
[1-
yyÀn
];

1564 
	`YYPOPSTACK
 (
yyÀn
);

1565 
yyÀn
 = 0;

1566 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1567 
yy°©e
 = *
yys•
;

1568 
yyîæab1
;

1574 
yyîæab1
:

1575 
yyîr°©us
 = 3;

1579 
yyn
 = 
yy∑˘
[
yy°©e
];

1580 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1582 
yyn
 +
YYTERROR
;

1583 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

1585 
yyn
 = 
yyèbÀ
[yyn];

1586 i‡(0 < 
yyn
)

1592 i‡(
yys•
 =
yyss
)

1593 
YYABORT
;

1595 
yyîr‹_ønge
[1] = *
yyl•
;

1596 
	`yyde°ru˘
 ("Error:Öopping",

1597 
yy°os
[
yy°©e
], 
yyv•
, 
yyl•
, 
sˇ¬î
);

1598 
	`YYPOPSTACK
 (1);

1599 
yy°©e
 = *
yys•
;

1600 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1603 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1604 *++
yyv•
 = 
yylvÆ
;

1605 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1607 
yyîr‹_ønge
[2] = 
yyŒoc
;

1610 
	`YYLLOC_DEFAULT
 (
yyloc
, 
yyîr‹_ønge
, 2);

1611 *++
yyl•
 = 
yyloc
;

1614 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

1616 
yy°©e
 = 
yyn
;

1617 
yy√w°©e
;

1623 
yyac˚±œb
:

1624 
yyªsu…
 = 0;

1625 
yyªtu∫
;

1630 
yyab‹éab
:

1631 
yyªsu…
 = 1;

1632 
yyªtu∫
;

1634 #i‡!
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


1638 
yyexhau°edœb
:

1639 
	`yyîr‹
 (&
yyŒoc
, 
sˇ¬î
, 
	`YY_
("memoryÉxhausted"));

1640 
yyªsu…
 = 2;

1644 
yyªtu∫
:

1645 i‡(
yych¨
 !
YYEMPTY
)

1649 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1650 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

1651 
yytokí
, &
yylvÆ
, &
yyŒoc
, 
sˇ¬î
);

1655 
	`YYPOPSTACK
 (
yyÀn
);

1656 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1657 
yys•
 !
yyss
)

1659 
	`yyde°ru˘
 ("Cleanup:Öopping",

1660 
yy°os
[*
yys•
], 
yyv•
, 
yyl•
, 
sˇ¬î
);

1661 
	`YYPOPSTACK
 (1);

1663 #i‚de‡
yyovîÊow


1664 i‡(
yyss
 !
yysß
)

1665 
	`YYSTACK_FREE
 (
yyss
);

1667 #i‡
YYERROR_VERBOSE


1668 i‡(
yymsg
 !
yymsgbuf
)

1669 
	`YYSTACK_FREE
 (
yymsg
);

1671  
yyªsu…
;

1672 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/pktloc_syntax.h

33 #i‚de‡
YY_PKTLOC_ROUTE_PKTLOC_SYNTAX_H_INCLUDED


34 
	#YY_PKTLOC_ROUTE_PKTLOC_SYNTAX_H_INCLUDED


	)

36 #i‚de‡
YYDEBUG


37 
	#YYDEBUG
 0

	)

39 #i‡
YYDEBUG


40 
pkéoc_debug
;

44 #i‚de‡
YYTOKENTYPE


45 
	#YYTOKENTYPE


	)

46 
	eyytokíty≥


48 
	mERROR
 = 258,

49 
	mNUMBER
 = 259,

50 
	mLAYER
 = 260,

51 
	mALIGN
 = 261,

52 
	mNAME
 = 262

56 
	#ERROR
 258

	)

57 
	#NUMBER
 259

	)

58 
	#LAYER
 260

	)

59 
	#ALIGN
 261

	)

60 
	#NAME
 262

	)

63 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


64 
YYSTYPE
 
	tYYSTYPE
;

65 
	uYYSTYPE


69 
π∆_pkéoc
 *
	ml
;

70 
uöt32_t
 
	mi
;

71 *
	ms
;

75 
	#YYSTYPE_IS_TRIVIAL
 1

	)

76 
	#YYSTYPE_IS_DECLARED
 1

	)

80 #i‡! 
deföed
 
YYLTYPE
 && ! deföed 
YYLTYPE_IS_DECLARED


81 
YYLTYPE
 
	tYYLTYPE
;

82 
	sYYLTYPE


84 
	mfú°_löe
;

85 
	mfú°_cﬁumn
;

86 
	mœ°_löe
;

87 
	mœ°_cﬁumn
;

89 
	#YYLTYPE_IS_DECLARED
 1

	)

90 
	#YYLTYPE_IS_TRIVIAL
 1

	)

95 
pkéoc_∑r£
 (*
sˇ¬î
);

	@mylibnl/libnl-3.2.25/lib/route/pktloc_syntax.y

2 
	~<√éök-¥iv©e/√éök.h
>

3 
	~<√éök-¥iv©e/tc.h
>

4 
	~<√éök/√éök.h
>

5 
	~<√éök/utûs.h
>

6 
	~<√éök/rouã/pkéoc.h
>

9 %
loˇti⁄s


10 %
îr‹
-
vîbo£


11 %
deföe
 
≠i
.
puª


12 %
«me
-
¥efix
 "pktloc_"

14 %
∑r£
-
∑øm
 {*
sˇ¬î
}

15 %
Àx
-
∑øm
 {*
sˇ¬î
}

16 %
ex≥˘
 1

19 
π∆_pkéoc
 *
l
;

20 
uöt32_t
 
i
;

21 *
s
;

25 
pkéoc_Àx
(
YYSTYPE
 *, 
YYLTYPE
 *, *);

27 
	$yyîr‹
(
YYLTYPE
 *
lo˝
, *
sˇ¬î
, c⁄° *
msg
)

29 
	`NL_DBG
(1, "Eº‹ whûê∑rsögÖackëÜoˇti⁄ fûe: %s\n", 
msg
);

30 
	}
}

33 %
tokí
 <
i
> 
ERROR
 
NUMBER
 
LAYER
 
ALIGN


34 %
tokí
 <
s
> 
NAME


36 %
ty≥
 <
i
> 
mask
 
œyî
 
Æign
 
shi·


37 %
ty≥
 <
l
> 
loˇti⁄


39 %
de°ru˘‹
 { 
‰ì
(
$$
); } 
NAME


41 %
°¨t
 
öput


43 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

45 
öput
:

47 | 
loˇti⁄
 
öput


50 
loˇti⁄
:

51 
NAME
 
Æign
 
œyî
 
NUMBER
 
mask
 
shi·


53 
π∆_pkéoc
 *
loc
;

55 i‡(!(
loc
 = 
	`π∆_pkéoc_Æloc
())) {

56 
	`NL_DBG
(1, "AllocatingáÖacketÜocation "

58 
YYABORT
;

61 
loc
->
«me
 = 
$1
;

62 
loc
->
Æign
 = 
$2
;

63 
loc
->
œyî
 = 
$3
;

64 
loc
->
off£t
 = 
$4
;

65 
loc
->
mask
 = 
$5
;

66 
loc
->
shi·
 = 
$6
;

68 i‡(
	`π∆_pkéoc_add
(
loc
) < 0) {

69 
	`NL_DBG
(1, "DuplicateÖacketÜocationÉntry "

70 "\"%s\"\n", 
$1
);

73 
$$
 = 
loc
;

77 
Æign
:

78 
ALIGN


79 { 
$$
 = 
$1
; }

80 | 
NUMBER


81 { 
$$
 = 
$1
; }

84 
œyî
:

86 { 
$$
 = 
TCF_LAYER_NETWORK
; }

87 | 
LAYER
 '+'

88 { 
$$
 = 
$1
; }

91 
mask
:

93 { 
$$
 = 0; }

94 | 
NUMBER


95 { 
$$
 = 
$1
; }

98 
shi·
:

100 { 
$$
 = 0; }

101 | 
NUMBER


102 { 
$$
 = 
$1
; }

	@mylibnl/libnl-3.2.25/lib/route/qdisc.c

18 
	~<√éök-¥iv©e/√éök.h
>

19 
	~<√éök-¥iv©e/tc.h
>

20 
	~<√éök/√éök.h
>

21 
	~<√éök/utûs.h
>

22 
	~<√éök/rouã/lök.h
>

23 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

24 
	~<√éök/rouã/qdisc.h
>

25 
	~<√éök/rouã/˛ass.h
>

26 
	~<√éök/rouã/˛assifõr.h
>

28 
∆_ˇche_›s
 
	gπ∆_qdisc_›s
;

29 
∆_obje˘_›s
 
	gqdisc_obj_›s
;

31 
	$qdisc_msg_∑r£r
(
∆_ˇche_›s
 *
›s
, 
sockaddr_∆
 *
who
,

32 
∆msghdr
 *
n
, 
∆_∑r£r_∑øm
 *
µ
)

34 
π∆_qdisc
 *
qdisc
;

35 
îr
;

37 i‡(!(
qdisc
 = 
	`π∆_qdisc_Æloc
()))

38  -
NLE_NOMEM
;

40 i‡((
îr
 = 
	`π∆_tc_msg_∑r£
(
n
, 
	`TC_CAST
(
qdisc
))) < 0)

41 
îrout
;

43 
îr
 = 
µ
->
	`µ_cb
(
	`OBJ_CAST
(
qdisc
),Öp);

44 
îrout
:

45 
	`π∆_qdisc_put
(
qdisc
);

47  
îr
;

48 
	}
}

50 
	$qdisc_ªque°_upd©e
(
∆_ˇche
 *
c
, 
∆_sock
 *
sk
)

52 
tcmsg
 
tchdr
 = {

53 .
tcm_Ámûy
 = 
AF_UNSPEC
,

54 .
tcm_ifödex
 = 
c
->
c_ürg1
,

57  
	`∆_£nd_sim∂e
(
sk
, 
RTM_GETQDISC
, 
NLM_F_DUMP
, &
tchdr
,

58 (
tchdr
));

59 
	}
}

66 
π∆_qdisc
 *
	$π∆_qdisc_Æloc
()

68 
π∆_tc
 *
tc
;

70 
tc
 = 
	`TC_CAST
(
	`∆_obje˘_Æloc
(&
qdisc_obj_›s
));

71 i‡(
tc
)

72 
tc
->
tc_ty≥
 = 
RTNL_TC_TYPE_QDISC
;

74  (
π∆_qdisc
 *Ë
tc
;

75 
	}
}

77 
	$π∆_qdisc_put
(
π∆_qdisc
 *
qdisc
)

79 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
qdisc
);

80 
	}
}

89 
	$buûd_qdisc_msg
(
π∆_qdisc
 *
qdisc
, 
ty≥
, 
Êags
,

90 
∆_msg
 **
ªsu…
)

92 i‡(!(
qdisc
->
˚_mask
 & 
TCA_ATTR_IFINDEX
)) {

93 
	`APPBUG
("ifindex must be specified");

94  -
NLE_MISSING_ATTR
;

97  
	`π∆_tc_msg_buûd
(
	`TC_CAST
(
qdisc
), 
ty≥
, 
Êags
, 
ªsu…
);

98 
	}
}

114 
	$π∆_qdisc_buûd_add_ªque°
(
π∆_qdisc
 *
qdisc
, 
Êags
,

115 
∆_msg
 **
ªsu…
)

117 i‡(!(
qdisc
->
˚_mask
 & (
TCA_ATTR_HANDLE
 | 
TCA_ATTR_PARENT
))) {

118 
	`APPBUG
("handle orÖarent must be specified");

119  -
NLE_MISSING_ATTR
;

122  
	`buûd_qdisc_msg
(
qdisc
, 
RTM_NEWQDISC
, 
Êags
, 
ªsu…
);

123 
	}
}

162 
	$π∆_qdisc_add
(
∆_sock
 *
sk
, 
π∆_qdisc
 *
qdisc
, 
Êags
)

164 
∆_msg
 *
msg
;

165 
îr
;

167 i‡((
îr
 = 
	`π∆_qdisc_buûd_add_ªque°
(
qdisc
, 
Êags
, &
msg
)) < 0)

168  
îr
;

170  
	`∆_£nd_sync
(
sk
, 
msg
);

171 
	}
}

188 
	$π∆_qdisc_buûd_upd©e_ªque°
(
π∆_qdisc
 *
qdisc
,

189 
π∆_qdisc
 *
√w
, 
Êags
,

190 
∆_msg
 **
ªsu…
)

192 i‡(
Êags
 & (
NLM_F_CREATE
 | 
NLM_F_EXCL
)) {

193 
	`APPBUG
("NLM_F_CREATEánd NLM_F_EXCL mayÇot be used here, "

195  -
NLE_INVAL
;

198 i‡(!(
qdisc
->
˚_mask
 & 
TCA_ATTR_IFINDEX
)) {

199 
	`APPBUG
("ifindex must be specified");

200  -
NLE_MISSING_ATTR
;

203 i‡(!(
qdisc
->
˚_mask
 & (
TCA_ATTR_HANDLE
 | 
TCA_ATTR_PARENT
))) {

204 
	`APPBUG
("handle orÖarent must be specified");

205  -
NLE_MISSING_ATTR
;

208 
	`π∆_tc_£t_ifödex
(
	`TC_CAST
(
√w
), 
qdisc
->
q_ifödex
);

210 i‡(
qdisc
->
˚_mask
 & 
TCA_ATTR_HANDLE
)

211 
	`π∆_tc_£t_h™dÀ
(
	`TC_CAST
(
√w
), 
qdisc
->
q_h™dÀ
);

213 i‡(
qdisc
->
˚_mask
 & 
TCA_ATTR_PARENT
)

214 
	`π∆_tc_£t_∑ª¡
(
	`TC_CAST
(
√w
), 
qdisc
->
q_∑ª¡
);

216  
	`buûd_qdisc_msg
(
√w
, 
RTM_NEWQDISC
, 
Êags
, 
ªsu…
);

217 
	}
}

247 
	$π∆_qdisc_upd©e
(
∆_sock
 *
sk
, 
π∆_qdisc
 *
qdisc
,

248 
π∆_qdisc
 *
√w
, 
Êags
)

250 
∆_msg
 *
msg
;

251 
îr
;

253 
îr
 = 
	`π∆_qdisc_buûd_upd©e_ªque°
(
qdisc
, 
√w
, 
Êags
, &
msg
);

254 i‡(
îr
 < 0)

255  
îr
;

257  
	`∆_£nd_sync
(
sk
, 
msg
);

258 
	}
}

273 
	$π∆_qdisc_buûd_dñëe_ªque°
(
π∆_qdisc
 *
qdisc
,

274 
∆_msg
 **
ªsu…
)

276 
∆_msg
 *
msg
;

277 
tcmsg
 
tchdr
;

278 
uöt32_t
 
ªquúed
 = 
TCA_ATTR_IFINDEX
 | 
TCA_ATTR_PARENT
;

280 i‡((
qdisc
->
˚_mask
 & 
ªquúed
) !=Ñequired) {

281 
	`APPBUG
("ifindexándÖarent must be specified");

282  -
NLE_MISSING_ATTR
;

285 i‡(!(
msg
 = 
	`∆msg_Æloc_sim∂e
(
RTM_DELQDISC
, 0)))

286  -
NLE_NOMEM
;

288 
	`mem£t
(&
tchdr
, 0, (tchdr));

290 
tchdr
.
tcm_Ámûy
 = 
AF_UNSPEC
;

291 
tchdr
.
tcm_ifödex
 = 
qdisc
->
q_ifödex
;

292 
tchdr
.
tcm_∑ª¡
 = 
qdisc
->
q_∑ª¡
;

294 i‡(
qdisc
->
˚_mask
 & 
TCA_ATTR_HANDLE
)

295 
tchdr
.
tcm_h™dÀ
 = 
qdisc
->
q_h™dÀ
;

297 i‡(
	`∆msg_≠≥nd
(
msg
, &
tchdr
, —chdr), 
NLMSG_ALIGNTO
) < 0)

298 
∆a_put_Áûuª
;

300 i‡(
qdisc
->
˚_mask
 & 
TCA_ATTR_KIND
)

301 
	`NLA_PUT_STRING
(
msg
, 
TCA_KIND
, 
qdisc
->
q_köd
);

303 *
ªsu…
 = 
msg
;

306 
∆a_put_Áûuª
:

307 
	`∆msg_‰ì
(
msg
);

308  -
NLE_MSGSIZE
;

309 
	}
}

340 
	$π∆_qdisc_dñëe
(
∆_sock
 *
sk
, 
π∆_qdisc
 *
qdisc
)

342 
∆_msg
 *
msg
;

343 
îr
;

345 i‡((
îr
 = 
	`π∆_qdisc_buûd_dñëe_ªque°
(
qdisc
, &
msg
)) < 0)

346  
îr
;

348  
	`∆_£nd_sync
(
sk
, 
msg
);

349 
	}
}

368 
	$π∆_qdisc_Æloc_ˇche
(
∆_sock
 *
sk
, 
∆_ˇche
 **
ªsu…
)

370  
	`∆_ˇche_Æloc_™d_fûl
(&
π∆_qdisc_›s
, 
sk
, 
ªsu…
);

371 
	}
}

387 
π∆_qdisc
 *
	$π∆_qdisc_gë_by_∑ª¡
(
∆_ˇche
 *
ˇche
,

388 
ifödex
, 
uöt32_t
 
∑ª¡
)

390 
π∆_qdisc
 *
q
;

392 i‡(
ˇche
->
c_›s
 !&
π∆_qdisc_›s
)

393  
NULL
;

395 
	`∆_li°_f‹_óch_íåy
(
q
, &
ˇche
->
c_ôems
, 
˚_li°
) {

396 i‡(
q
->
q_∑ª¡
 =
∑ª¡
 && q->
q_ifödex
 =
ifödex
) {

397 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
q
);

398  
q
;

402  
NULL
;

403 
	}
}

419 
π∆_qdisc
 *
	$π∆_qdisc_gë
(
∆_ˇche
 *
ˇche
, 
ifödex
,

420 
uöt32_t
 
h™dÀ
)

422 
π∆_qdisc
 *
q
;

424 i‡(
ˇche
->
c_›s
 !&
π∆_qdisc_›s
)

425  
NULL
;

427 
	`∆_li°_f‹_óch_íåy
(
q
, &
ˇche
->
c_ôems
, 
˚_li°
) {

428 i‡(
q
->
q_h™dÀ
 =
h™dÀ
 && q->
q_ifödex
 =
ifödex
) {

429 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
q
);

430  
q
;

434  
NULL
;

435 
	}
}

450 
π∆_qdisc_f‹óch_chûd
(
π∆_qdisc
 *
qdisc
, 
∆_ˇche
 *
ˇche
,

451 (*
cb
)(
∆_obje˘
 *, *), *
¨g
)

453 
π∆_˛ass
 *
fûãr
;

455 
fûãr
 = 
	`π∆_˛ass_Æloc
();

456 i‡(!
fûãr
)

459 
	`π∆_tc_£t_∑ª¡
(
	`TC_CAST
(
fûãr
), 
qdisc
->
q_h™dÀ
);

460 
	`π∆_tc_£t_ifödex
(
	`TC_CAST
(
fûãr
), 
qdisc
->
q_ifödex
);

461 
	`π∆_tc_£t_köd
(
	`TC_CAST
(
fûãr
), 
qdisc
->
q_köd
);

463 
	`∆_ˇche_f‹óch_fûãr
(
ˇche
, 
	`OBJ_CAST
(
fûãr
), 
cb
, 
¨g
);

465 
	`π∆_˛ass_put
(
fûãr
);

466 
	}
}

474 
π∆_qdisc_f‹óch_˛s
(
π∆_qdisc
 *
qdisc
, 
∆_ˇche
 *
ˇche
,

475 (*
cb
)(
∆_obje˘
 *, *), *
¨g
)

477 
π∆_˛s
 *
fûãr
;

479 i‡(!(
fûãr
 = 
	`π∆_˛s_Æloc
()))

482 
	`π∆_tc_£t_ifödex
(
	`TC_CAST
(
fûãr
), 
qdisc
->
q_ifödex
);

483 
	`π∆_tc_£t_∑ª¡
(
	`TC_CAST
(
fûãr
), 
qdisc
->
q_∑ª¡
);

485 
	`∆_ˇche_f‹óch_fûãr
(
ˇche
, 
	`OBJ_CAST
(
fûãr
), 
cb
, 
¨g
);

486 
	`π∆_˛s_put
(
fûãr
);

487 
	}
}

496 
	$π∆_qdisc_buûd_ch™ge_ªque°
(
π∆_qdisc
 *
qdisc
,

497 
π∆_qdisc
 *
√w
,

498 
∆_msg
 **
ªsu…
)

500  
	`π∆_qdisc_buûd_upd©e_ªque°
(
qdisc
, 
√w
, 
NLM_F_REPLACE
,

501 
ªsu…
);

502 
	}
}

511 
	$π∆_qdisc_ch™ge
(
∆_sock
 *
sk
, 
π∆_qdisc
 *
qdisc
,

512 
π∆_qdisc
 *
√w
)

514  
	`π∆_qdisc_upd©e
(
sk
, 
qdisc
, 
√w
, 
NLM_F_REPLACE
);

515 
	}
}

519 
	$qdisc_dump_dëaûs
(
π∆_tc
 *
tc
, 
∆_dump_∑øms
 *
p
)

521 
π∆_qdisc
 *
qdisc
 = (π∆_qdis¯*Ë
tc
;

523 
	`∆_dump
(
p
, "ªf˙à%u ", 
qdisc
->
q_öfo
);

524 
	}
}

526 
π∆_tc_ty≥_›s
 
	gqdisc_›s
 = {

527 .
â_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

528 .
	gâ_dump_¥efix
 = "qdisc",

529 .
	gâ_dump
 = {

530 [
NL_DUMP_DETAILS
] = 
qdisc_dump_dëaûs
,

534 
∆_ˇche_›s
 
	gπ∆_qdisc_›s
 = {

535 .
co_«me
 = "route/qdisc",

536 .
	gco_hdrsize
 = (
tcmsg
),

537 .
	gco_msgty≥s
 = {

538 { 
RTM_NEWQDISC
, 
NL_ACT_NEW
, "new" },

539 { 
RTM_DELQDISC
, 
NL_ACT_DEL
, "del" },

540 { 
RTM_GETQDISC
, 
NL_ACT_GET
, "get" },

541 
END_OF_MSGTYPES_LIST
,

543 .
	gco_¥Ÿocﬁ
 = 
NETLINK_ROUTE
,

544 .
	gco_groups
 = 
tc_groups
,

545 .
	gco_ªque°_upd©e
 = 
qdisc_ªque°_upd©e
,

546 .
	gco_msg_∑r£r
 = 
qdisc_msg_∑r£r
,

547 .
	gco_obj_›s
 = &
qdisc_obj_›s
,

550 
∆_obje˘_›s
 
	gqdisc_obj_›s
 = {

551 .
oo_«me
 = "route/qdisc",

552 .
	goo_size
 = (
π∆_qdisc
),

553 .
	goo_‰ì_d©a
 = 
π∆_tc_‰ì_d©a
,

554 .
	goo_˛⁄e
 = 
π∆_tc_˛⁄e
,

555 .
	goo_dump
 = {

556 [
NL_DUMP_LINE
] = 
π∆_tc_dump_löe
,

557 [
NL_DUMP_DETAILS
] = 
π∆_tc_dump_dëaûs
,

558 [
NL_DUMP_STATS
] = 
π∆_tc_dump_°©s
,

560 .
	goo_com∑ª
 = 
π∆_tc_com∑ª
,

561 .
	goo_id_©ås
 = (
TCA_ATTR_IFINDEX
 | 
TCA_ATTR_HANDLE
),

564 
__öô
 
	$qdisc_öô
()

566 
	`π∆_tc_ty≥_ªgi°î
(&
qdisc_›s
);

567 
	`∆_ˇche_mngt_ªgi°î
(&
π∆_qdisc_›s
);

568 
	}
}

570 
__exô
 
	$qdisc_exô
()

572 
	`∆_ˇche_mngt_uƒegi°î
(&
π∆_qdisc_›s
);

573 
	`π∆_tc_ty≥_uƒegi°î
(&
qdisc_›s
);

574 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/qdisc/blackhole.c

18 
	~<√éök-¥iv©e/√éök.h
>

19 
	~<√éök/√éök.h
>

20 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

22 
π∆_tc_›s
 
	gbœckhﬁe_›s
 = {

23 .
to_köd
 = "blackhole",

24 .
	gto_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

27 
__öô
 
	$bœckhﬁe_öô
()

29 
	`π∆_tc_ªgi°î
(&
bœckhﬁe_›s
);

30 
	}
}

32 
__exô
 
	$bœckhﬁe_exô
()

34 
	`π∆_tc_uƒegi°î
(&
bœckhﬁe_›s
);

35 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/qdisc/cbq.c

12 
	~<√éök-¥iv©e/√éök.h
>

13 
	~<√éök-¥iv©e/tc.h
>

14 
	~<√éök/√éök.h
>

15 
	~<√éök/utûs.h
>

16 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

17 
	~<√éök/rouã/qdisc.h
>

18 
	~<√éök/rouã/˛ass.h
>

19 
	~<√éök/rouã/lök.h
>

20 
	~<√éök/rouã/qdisc/cbq.h
>

21 
	~<√éök/rouã/˛s/pﬁi˚.h
>

30 c⁄° 
å™s_tbl
 
	govl_°øãgõs
[] = {

31 
__ADD
(
TC_CBQ_OVL_CLASSIC
,
˛assic
)

32 
__ADD
(
TC_CBQ_OVL_DELAY
,
dñay
)

33 
__ADD
(
TC_CBQ_OVL_LOWPRIO
,
low¥io
)

34 
__ADD
(
TC_CBQ_OVL_DROP
,
dr›
)

35 
__ADD
(
TC_CBQ_OVL_RCLASSIC
,
r˛assic
)

48 *
	$∆_ovl_°øãgy2°r
(
ty≥
, *
buf
, 
size_t
 
Àn
)

50  
	`__ty≥2°r
(
ty≥
, 
buf
, 
Àn
, 
ovl_°øãgõs
,

51 
	`ARRAY_SIZE
(
ovl_°øãgõs
));

52 
	}
}

61 
	$∆_°r2ovl_°øãgy
(c⁄° *
«me
)

63  
	`__°r2ty≥
(
«me
, 
ovl_°øãgõs
, 
	`ARRAY_SIZE
(ovl_strategies));

64 
	}
}

66 
∆a_pﬁicy
 
	gcbq_pﬁicy
[
TCA_CBQ_MAX
+1] = {

67 [
TCA_CBQ_LSSOPT
] = { .
möÀn
 = (
tc_cbq_lss›t
) },

68 [
TCA_CBQ_RATE
] = { .
möÀn
 = (
tc_øã•ec
) },

69 [
TCA_CBQ_WRROPT
] = { .
möÀn
 = (
tc_cbq_wº›t
) },

70 [
TCA_CBQ_OVL_STRATEGY
] = { .
möÀn
 = (
tc_cbq_ovl
) },

71 [
TCA_CBQ_FOPT
] = { .
möÀn
 = (
tc_cbq_f›t
) },

72 [
TCA_CBQ_POLICE
] = { .
möÀn
 = (
tc_cbq_pﬁi˚
) },

75 
	$cbq_msg_∑r£r
(
π∆_tc
 *
tc
, *
d©a
)

77 
∆©å
 *
tb
[
TCA_CBQ_MAX
 + 1];

78 
π∆_cbq
 *
cbq
 = 
d©a
;

79 
îr
;

81 
îr
 = 
	`tˇ_∑r£
(
tb
, 
TCA_CBQ_MAX
, 
tc
, 
cbq_pﬁicy
);

82 i‡(
îr
 < 0)

83  
îr
;

85 
	`∆a_mem˝y
(&
cbq
->
cbq_lss
, 
tb
[
TCA_CBQ_LSSOPT
], (cbq->cbq_lss));

86 
	`∆a_mem˝y
(&
cbq
->
cbq_øã
, 
tb
[
TCA_CBQ_RATE
], (cbq->cbq_rate));

87 
	`∆a_mem˝y
(&
cbq
->
cbq_wº
, 
tb
[
TCA_CBQ_WRROPT
], (cbq->cbq_wrr));

88 
	`∆a_mem˝y
(&
cbq
->
cbq_f›t
, 
tb
[
TCA_CBQ_FOPT
], (cbq->cbq_fopt));

89 
	`∆a_mem˝y
(&
cbq
->
cbq_ovl
, 
tb
[
TCA_CBQ_OVL_STRATEGY
],

90 (
cbq
->
cbq_ovl
));

91 
	`∆a_mem˝y
(&
cbq
->
cbq_pﬁi˚
, 
tb
[
TCA_CBQ_POLICE
],

92 (
cbq
->
cbq_pﬁi˚
));

95 
	}
}

97 
	$cbq_dump_löe
(
π∆_tc
 *
tc
, *
d©a
,

98 
∆_dump_∑øms
 *
p
)

100 
π∆_cbq
 *
cbq
 = 
d©a
;

101 
r
, 
rbô
;

102 *
ru
, *
rubô
;

104 i‡(!
cbq
)

107 
r
 = 
	`∆_ˇn˚l_down_byãs
(
cbq
->
cbq_øã
.
øã
, &
ru
);

108 
rbô
 = 
	`∆_ˇn˚l_down_bôs
(
cbq
->
cbq_øã
.
øã
 * 8, &
rubô
);

110 
	`∆_dump
(
p
, "Ñate %.2f%s/s (%.0f%s)Örio %u",

111 
r
, 
ru
, 
rbô
, 
rubô
, 
cbq
->
cbq_wº
.
¥i‹ôy
);

112 
	}
}

114 
	$cbq_dump_dëaûs
(
π∆_tc
 *
tc
, *
d©a
,

115 
∆_dump_∑øms
 *
p
)

117 
π∆_cbq
 *
cbq
 = 
d©a
;

118 *
unô
, 
buf
[32];

119 
w
;

120 
uöt32_t
 
ñ
;

122 i‡(!
cbq
)

125 
w
 = 
	`∆_ˇn˚l_down_bôs
(
cbq
->
cbq_wº
.
weight
 * 8, &
unô
);

127 
	`∆_dump
(
p
, "avgpkt %u mpu %u cell %uállot %u weight %.0f%s\n",

128 
cbq
->
cbq_lss
.
avpkt
,

129 
cbq
->
cbq_øã
.
mpu
,

130 1 << 
cbq
->
cbq_øã
.
˚Œ_log
,

131 
cbq
->
cbq_wº
.
ÆlŸ
, 
w
, 
unô
);

133 
ñ
 = 
cbq
->
cbq_lss
.
ewma_log
;

134 
	`∆_dump_löe
(
p
, " minidle %uus maxidle %uus offtime "

136 
	`∆_ticks2us
(
cbq
->
cbq_lss
.
möidÀ
 >> 
ñ
),

137 
	`∆_ticks2us
(
cbq
->
cbq_lss
.
maxidÀ
 >> 
ñ
),

138 
	`∆_ticks2us
(
cbq
->
cbq_lss
.
of·ime
 >> 
ñ
),

139 
cbq
->
cbq_lss
.
Àvñ
,

140 
cbq
->
cbq_lss
.
ewma_log
);

142 
	`∆_dump_löe
(
p
, "Öenalty %uus strategy %s ",

143 
	`∆_ticks2us
(
cbq
->
cbq_ovl
.
≥«…y
),

144 
	`∆_ovl_°øãgy2°r
(
cbq
->
cbq_ovl
.
°øãgy
, 
buf
, (buf)));

146 
	`∆_dump
(
p
, "split %s defmap 0x%08x ",

147 
	`π∆_tc_h™dÀ2°r
(
cbq
->
cbq_f›t
.
•lô
, 
buf
, (buf)),

148 
cbq
->
cbq_f›t
.
defm≠
);

150 
	`∆_dump
(
p
, "police %s",

151 
	`∆_pﬁi˚2°r
(
cbq
->
cbq_pﬁi˚
.
pﬁi˚
, 
buf
, (buf)));

152 
	}
}

154 
	$cbq_dump_°©s
(
π∆_tc
 *
tc
, *
d©a
,

155 
∆_dump_∑øms
 *
p
)

157 
tc_cbq_x°©s
 *
x
;

159 i‡(!(
x
 = 
	`tˇ_x°©s
(
tc
)))

162 
	`∆_dump_löe
(
p
, " borrows overact "

164 
	`∆_dump_löe
(
p
, " %10u %10u %10u %10u\n",

165 
x
->
b‹rows
, x->
ovîa˘i⁄s
, x->
avgidÀ
, x->
undîtime
);

166 
	}
}

168 
π∆_tc_›s
 
	gcbq_qdisc_›s
 = {

169 .
to_köd
 = "cbq",

170 .
	gto_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

171 .
	gto_size
 = (
π∆_cbq
),

172 .
	gto_msg_∑r£r
 = 
cbq_msg_∑r£r
,

173 .
	gto_dump
 = {

174 [
NL_DUMP_LINE
] = 
cbq_dump_löe
,

175 [
NL_DUMP_DETAILS
] = 
cbq_dump_dëaûs
,

176 [
NL_DUMP_STATS
] = 
cbq_dump_°©s
,

180 
π∆_tc_›s
 
	gcbq_˛ass_›s
 = {

181 .
to_köd
 = "cbq",

182 .
	gto_ty≥
 = 
RTNL_TC_TYPE_CLASS
,

183 .
	gto_size
 = (
π∆_cbq
),

184 .
	gto_msg_∑r£r
 = 
cbq_msg_∑r£r
,

185 .
	gto_dump
 = {

186 [
NL_DUMP_LINE
] = 
cbq_dump_löe
,

187 [
NL_DUMP_DETAILS
] = 
cbq_dump_dëaûs
,

188 [
NL_DUMP_STATS
] = 
cbq_dump_°©s
,

192 
__öô
 
	$cbq_öô
()

194 
	`π∆_tc_ªgi°î
(&
cbq_qdisc_›s
);

195 
	`π∆_tc_ªgi°î
(&
cbq_˛ass_›s
);

196 
	}
}

198 
__exô
 
	$cbq_exô
()

200 
	`π∆_tc_uƒegi°î
(&
cbq_qdisc_›s
);

201 
	`π∆_tc_uƒegi°î
(&
cbq_˛ass_›s
);

202 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/qdisc/dsmark.c

19 
	~<√éök-¥iv©e/√éök.h
>

20 
	~<√éök-¥iv©e/tc.h
>

21 
	~<√éök/√éök.h
>

22 
	~<√éök/utûs.h
>

23 
	~<√éök/rouã/qdisc.h
>

24 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

25 
	~<√éök/rouã/˛ass.h
>

26 
	~<√éök/rouã/qdisc/dsm¨k.h
>

29 
	#SCH_DSMARK_ATTR_INDICES
 0x1

	)

30 
	#SCH_DSMARK_ATTR_DEFAULT_INDEX
 0x2

	)

31 
	#SCH_DSMARK_ATTR_SET_TC_INDEX
 0x4

	)

33 
	#SCH_DSMARK_ATTR_MASK
 0x1

	)

34 
	#SCH_DSMARK_ATTR_VALUE
 0x2

	)

37 
∆a_pﬁicy
 
	gdsm¨k_pﬁicy
[
TCA_DSMARK_MAX
+1] = {

38 [
TCA_DSMARK_INDICES
] = { .
ty≥
 = 
NLA_U16
 },

39 [
TCA_DSMARK_DEFAULT_INDEX
] = { .
ty≥
 = 
NLA_U16
 },

40 [
TCA_DSMARK_SET_TC_INDEX
] = { .
ty≥
 = 
NLA_FLAG
 },

41 [
TCA_DSMARK_VALUE
] = { .
ty≥
 = 
NLA_U8
 },

42 [
TCA_DSMARK_MASK
] = { .
ty≥
 = 
NLA_U8
 },

45 
	$dsm¨k_qdisc_msg_∑r£r
(
π∆_tc
 *
tc
, *
d©a
)

47 
π∆_dsm¨k_qdisc
 *
dsm¨k
 = 
d©a
;

48 
∆©å
 *
tb
[
TCA_DSMARK_MAX
 + 1];

49 
îr
;

51 
îr
 = 
	`tˇ_∑r£
(
tb
, 
TCA_DSMARK_MAX
, 
tc
, 
dsm¨k_pﬁicy
);

52 i‡(
îr
 < 0)

53  
îr
;

55 i‡(
tb
[
TCA_DSMARK_INDICES
]) {

56 
dsm¨k
->
qdm_ödi˚s
 = 
	`∆a_gë_u16
(
tb
[
TCA_DSMARK_INDICES
]);

57 
dsm¨k
->
qdm_mask
 |
SCH_DSMARK_ATTR_INDICES
;

60 i‡(
tb
[
TCA_DSMARK_DEFAULT_INDEX
]) {

61 
dsm¨k
->
qdm_deÁu…_ödex
 =

62 
	`∆a_gë_u16
(
tb
[
TCA_DSMARK_DEFAULT_INDEX
]);

63 
dsm¨k
->
qdm_mask
 |
SCH_DSMARK_ATTR_DEFAULT_INDEX
;

66 i‡(
tb
[
TCA_DSMARK_SET_TC_INDEX
]) {

67 
dsm¨k
->
qdm_£t_tc_ödex
 = 1;

68 
dsm¨k
->
qdm_mask
 |
SCH_DSMARK_ATTR_SET_TC_INDEX
;

72 
	}
}

74 
	$dsm¨k_˛ass_msg_∑r£r
(
π∆_tc
 *
tc
, *
d©a
)

76 
π∆_dsm¨k_˛ass
 *
dsm¨k
 = 
d©a
;

77 
∆©å
 *
tb
[
TCA_DSMARK_MAX
 + 1];

78 
îr
;

80 
îr
 = 
	`tˇ_∑r£
(
tb
, 
TCA_DSMARK_MAX
, 
tc
, 
dsm¨k_pﬁicy
);

81 i‡(
îr
 < 0)

82  
îr
;

84 i‡(
tb
[
TCA_DSMARK_MASK
]) {

85 
dsm¨k
->
cdm_bmask
 = 
	`∆a_gë_u8
(
tb
[
TCA_DSMARK_MASK
]);

86 
dsm¨k
->
cdm_mask
 |
SCH_DSMARK_ATTR_MASK
;

89 i‡(
tb
[
TCA_DSMARK_VALUE
]) {

90 
dsm¨k
->
cdm_vÆue
 = 
	`∆a_gë_u8
(
tb
[
TCA_DSMARK_VALUE
]);

91 
dsm¨k
->
cdm_mask
 |
SCH_DSMARK_ATTR_VALUE
;

95 
	}
}

97 
	$dsm¨k_qdisc_dump_löe
(
π∆_tc
 *
tc
, *
d©a
,

98 
∆_dump_∑øms
 *
p
)

100 
π∆_dsm¨k_qdisc
 *
dsm¨k
 = 
d©a
;

102 i‡(
dsm¨k
 && (dsm¨k->
qdm_mask
 & 
SCH_DSMARK_ATTR_INDICES
))

103 
	`∆_dump
(
p
, " indi˚†0x%04x", 
dsm¨k
->
qdm_ödi˚s
);

104 
	}
}

106 
	$dsm¨k_qdisc_dump_dëaûs
(
π∆_tc
 *
tc
, *
d©a
,

107 
∆_dump_∑øms
 *
p
)

109 
π∆_dsm¨k_qdisc
 *
dsm¨k
 = 
d©a
;

111 i‡(!
dsm¨k
)

114 i‡(
dsm¨k
->
qdm_mask
 & 
SCH_DSMARK_ATTR_DEFAULT_INDEX
)

115 
	`∆_dump
(
p
, " deÁu… index 0x%04x", 
dsm¨k
->
qdm_deÁu…_ödex
);

117 i‡(
dsm¨k
->
qdm_mask
 & 
SCH_DSMARK_ATTR_SET_TC_INDEX
)

118 
	`∆_dump
(
p
, " set-tc-index");

119 
	}
}

121 
	$dsm¨k_˛ass_dump_löe
(
π∆_tc
 *
tc
, *
d©a
,

122 
∆_dump_∑øms
 *
p
)

124 
π∆_dsm¨k_˛ass
 *
dsm¨k
 = 
d©a
;

126 i‡(!
dsm¨k
)

129 i‡(
dsm¨k
->
cdm_mask
 & 
SCH_DSMARK_ATTR_VALUE
)

130 
	`∆_dump
(
p
, " vÆuê0x%02x", 
dsm¨k
->
cdm_vÆue
);

132 i‡(
dsm¨k
->
cdm_mask
 & 
SCH_DSMARK_ATTR_MASK
)

133 
	`∆_dump
(
p
, " mask 0x%02x", 
dsm¨k
->
cdm_bmask
);

134 
	}
}

136 
	$dsm¨k_qdisc_msg_fûl
(
π∆_tc
 *
tc
, *
d©a
,

137 
∆_msg
 *
msg
)

139 
π∆_dsm¨k_qdisc
 *
dsm¨k
 = 
d©a
;

141 i‡(!
dsm¨k
)

144 i‡(
dsm¨k
->
qdm_mask
 & 
SCH_DSMARK_ATTR_INDICES
)

145 
	`NLA_PUT_U16
(
msg
, 
TCA_DSMARK_INDICES
, 
dsm¨k
->
qdm_ödi˚s
);

147 i‡(
dsm¨k
->
qdm_mask
 & 
SCH_DSMARK_ATTR_DEFAULT_INDEX
)

148 
	`NLA_PUT_U16
(
msg
, 
TCA_DSMARK_DEFAULT_INDEX
,

149 
dsm¨k
->
qdm_deÁu…_ödex
);

151 i‡(
dsm¨k
->
qdm_mask
 & 
SCH_DSMARK_ATTR_SET_TC_INDEX
)

152 
	`NLA_PUT_FLAG
(
msg
, 
TCA_DSMARK_SET_TC_INDEX
);

156 
∆a_put_Áûuª
:

157  -
NLE_MSGSIZE
;

158 
	}
}

160 
	$dsm¨k_˛ass_msg_fûl
(
π∆_tc
 *
tc
, *
d©a
,

161 
∆_msg
 *
msg
)

163 
π∆_dsm¨k_˛ass
 *
dsm¨k
 = 
d©a
;

165 i‡(!
dsm¨k
)

168 i‡(
dsm¨k
->
cdm_mask
 & 
SCH_DSMARK_ATTR_MASK
)

169 
	`NLA_PUT_U8
(
msg
, 
TCA_DSMARK_MASK
, 
dsm¨k
->
cdm_bmask
);

171 i‡(
dsm¨k
->
cdm_mask
 & 
SCH_DSMARK_ATTR_VALUE
)

172 
	`NLA_PUT_U8
(
msg
, 
TCA_DSMARK_VALUE
, 
dsm¨k
->
cdm_vÆue
);

176 
∆a_put_Áûuª
:

177  -
NLE_MSGSIZE
;

178 
	}
}

191 
	$π∆_˛ass_dsm¨k_£t_bômask
(
π∆_˛ass
 *
˛ass
, 
uöt8_t
 
mask
)

193 
π∆_dsm¨k_˛ass
 *
dsm¨k
;

195 i‡(!(
dsm¨k
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
˛ass
))))

196  -
NLE_NOMEM
;

198 
dsm¨k
->
cdm_bmask
 = 
mask
;

199 
dsm¨k
->
cdm_mask
 |
SCH_DSMARK_ATTR_MASK
;

202 
	}
}

209 
	$π∆_˛ass_dsm¨k_gë_bômask
(
π∆_˛ass
 *
˛ass
)

211 
π∆_dsm¨k_˛ass
 *
dsm¨k
;

213 i‡(!(
dsm¨k
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
˛ass
))))

214  -
NLE_NOMEM
;

216 i‡(
dsm¨k
->
cdm_mask
 & 
SCH_DSMARK_ATTR_MASK
)

217  
dsm¨k
->
cdm_bmask
;

219  -
NLE_NOATTR
;

220 
	}
}

228 
	$π∆_˛ass_dsm¨k_£t_vÆue
(
π∆_˛ass
 *
˛ass
, 
uöt8_t
 
vÆue
)

230 
π∆_dsm¨k_˛ass
 *
dsm¨k
;

232 i‡(!(
dsm¨k
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
˛ass
))))

233  -
NLE_NOMEM
;

235 
dsm¨k
->
cdm_vÆue
 = 
vÆue
;

236 
dsm¨k
->
cdm_mask
 |
SCH_DSMARK_ATTR_VALUE
;

239 
	}
}

246 
	$π∆_˛ass_dsm¨k_gë_vÆue
(
π∆_˛ass
 *
˛ass
)

248 
π∆_dsm¨k_˛ass
 *
dsm¨k
;

250 i‡(!(
dsm¨k
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
˛ass
))))

251  -
NLE_NOMEM
;

253 i‡(
dsm¨k
->
cdm_mask
 & 
SCH_DSMARK_ATTR_VALUE
)

254  
dsm¨k
->
cdm_vÆue
;

256  -
NLE_NOATTR
;

257 
	}
}

271 
	$π∆_qdisc_dsm¨k_£t_ödi˚s
(
π∆_qdisc
 *
qdisc
, 
uöt16_t
 
ödi˚s
)

273 
π∆_dsm¨k_qdisc
 *
dsm¨k
;

275 i‡(!(
dsm¨k
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

276  -
NLE_NOMEM
;

278 
dsm¨k
->
qdm_ödi˚s
 = 
ödi˚s
;

279 
dsm¨k
->
qdm_mask
 |
SCH_DSMARK_ATTR_INDICES
;

282 
	}
}

289 
	$π∆_qdisc_dsm¨k_gë_ödi˚s
(
π∆_qdisc
 *
qdisc
)

291 
π∆_dsm¨k_qdisc
 *
dsm¨k
;

293 i‡(!(
dsm¨k
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

294  -
NLE_NOMEM
;

296 i‡(
dsm¨k
->
qdm_mask
 & 
SCH_DSMARK_ATTR_INDICES
)

297  
dsm¨k
->
qdm_ödi˚s
;

299  -
NLE_NOATTR
;

300 
	}
}

308 
	$π∆_qdisc_dsm¨k_£t_deÁu…_ödex
(
π∆_qdisc
 *
qdisc
,

309 
uöt16_t
 
deÁu…_ödex
)

311 
π∆_dsm¨k_qdisc
 *
dsm¨k
;

313 i‡(!(
dsm¨k
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

314  -
NLE_NOMEM
;

316 
dsm¨k
->
qdm_deÁu…_ödex
 = 
deÁu…_ödex
;

317 
dsm¨k
->
qdm_mask
 |
SCH_DSMARK_ATTR_DEFAULT_INDEX
;

320 
	}
}

327 
	$π∆_qdisc_dsm¨k_gë_deÁu…_ödex
(
π∆_qdisc
 *
qdisc
)

329 
π∆_dsm¨k_qdisc
 *
dsm¨k
;

331 i‡(!(
dsm¨k
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

332  -
NLE_NOMEM
;

334 i‡(
dsm¨k
->
qdm_mask
 & 
SCH_DSMARK_ATTR_DEFAULT_INDEX
)

335  
dsm¨k
->
qdm_deÁu…_ödex
;

337  -
NLE_NOATTR
;

338 
	}
}

346 
	$π∆_qdisc_dsm¨k_£t_£t_tc_ödex
(
π∆_qdisc
 *
qdisc
, 
Êag
)

348 
π∆_dsm¨k_qdisc
 *
dsm¨k
;

350 i‡(!(
dsm¨k
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

351  -
NLE_NOMEM
;

353 
dsm¨k
->
qdm_£t_tc_ödex
 = !!
Êag
;

354 
dsm¨k
->
qdm_mask
 |
SCH_DSMARK_ATTR_SET_TC_INDEX
;

357 
	}
}

365 
	$π∆_qdisc_dsm¨k_gë_£t_tc_ödex
(
π∆_qdisc
 *
qdisc
)

367 
π∆_dsm¨k_qdisc
 *
dsm¨k
;

369 i‡(!(
dsm¨k
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

370  -
NLE_NOMEM
;

372 i‡(
dsm¨k
->
qdm_mask
 & 
SCH_DSMARK_ATTR_SET_TC_INDEX
)

373  
dsm¨k
->
qdm_£t_tc_ödex
;

375  -
NLE_NOATTR
;

376 
	}
}

380 
π∆_tc_›s
 
	gdsm¨k_qdisc_›s
 = {

381 .
to_köd
 = "dsmark",

382 .
	gto_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

383 .
	gto_size
 = (
π∆_dsm¨k_qdisc
),

384 .
	gto_msg_∑r£r
 = 
dsm¨k_qdisc_msg_∑r£r
,

385 .
	gto_dump
 = {

386 [
NL_DUMP_LINE
] = 
dsm¨k_qdisc_dump_löe
,

387 [
NL_DUMP_DETAILS
] = 
dsm¨k_qdisc_dump_dëaûs
,

389 .
	gto_msg_fûl
 = 
dsm¨k_qdisc_msg_fûl
,

392 
π∆_tc_›s
 
	gdsm¨k_˛ass_›s
 = {

393 .
to_köd
 = "dsmark",

394 .
	gto_ty≥
 = 
RTNL_TC_TYPE_CLASS
,

395 .
	gto_size
 = (
π∆_dsm¨k_˛ass
),

396 .
	gto_msg_∑r£r
 = 
dsm¨k_˛ass_msg_∑r£r
,

397 .
	gto_dump
[
NL_DUMP_LINE
] = 
dsm¨k_˛ass_dump_löe
,

398 .
	gto_msg_fûl
 = 
dsm¨k_˛ass_msg_fûl
,

401 
__öô
 
	$dsm¨k_öô
()

403 
	`π∆_tc_ªgi°î
(&
dsm¨k_qdisc_›s
);

404 
	`π∆_tc_ªgi°î
(&
dsm¨k_˛ass_›s
);

405 
	}
}

407 
__exô
 
	$dsm¨k_exô
()

409 
	`π∆_tc_uƒegi°î
(&
dsm¨k_qdisc_›s
);

410 
	`π∆_tc_uƒegi°î
(&
dsm¨k_˛ass_›s
);

411 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/qdisc/fifo.c

32 
	~<√éök-¥iv©e/√éök.h
>

33 
	~<√éök-¥iv©e/tc.h
>

34 
	~<√éök/√éök.h
>

35 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

36 
	~<√éök/rouã/qdisc.h
>

37 
	~<√éök/rouã/qdisc/fifo.h
>

38 
	~<√éök/utûs.h
>

41 
	#SCH_FIFO_ATTR_LIMIT
 1

	)

44 
	$fifo_msg_∑r£r
(
π∆_tc
 *
tc
, *
d©a
)

46 
π∆_fifo
 *
fifo
 = 
d©a
;

47 
tc_fifo_q›t
 *
›t
;

49 i‡(
tc
->
tc_›ts
->
d_size
 < (
tc_fifo_q›t
))

50  -
NLE_INVAL
;

52 
›t
 = (
tc_fifo_q›t
 *Ë
tc
->
tc_›ts
->
d_d©a
;

53 
fifo
->
qf_limô
 = 
›t
->
limô
;

54 
fifo
->
qf_mask
 = 
SCH_FIFO_ATTR_LIMIT
;

57 
	}
}

59 
	$pfifo_dump_löe
(
π∆_tc
 *
tc
, *
d©a
,

60 
∆_dump_∑øms
 *
p
)

62 
π∆_fifo
 *
fifo
 = 
d©a
;

64 i‡(
fifo
)

65 
	`∆_dump
(
p
, "Üimô %uÖackës", 
fifo
->
qf_limô
);

66 
	}
}

68 
	$bfifo_dump_löe
(
π∆_tc
 *
tc
, *
d©a
,

69 
∆_dump_∑øms
 *
p
)

71 
π∆_fifo
 *
fifo
 = 
d©a
;

72 *
unô
;

73 
r
;

75 i‡(!
fifo
)

78 
r
 = 
	`∆_ˇn˚l_down_byãs
(
fifo
->
qf_limô
, &
unô
);

79 
	`∆_dump
(
p
, "Üimô %.1f%s", 
r
, 
unô
);

80 
	}
}

82 
	$fifo_msg_fûl
(
π∆_tc
 *
tc
, *
d©a
, 
∆_msg
 *
msg
)

84 
π∆_fifo
 *
fifo
 = 
d©a
;

85 
tc_fifo_q›t
 
›ts
 = {0};

87 i‡(!
fifo
 || !(fifo->
qf_mask
 & 
SCH_FIFO_ATTR_LIMIT
))

88  -
NLE_INVAL
;

90 
›ts
.
limô
 = 
fifo
->
qf_limô
;

92  
	`∆msg_≠≥nd
(
msg
, &
›ts
, (›ts), 
NL_DONTPAD
);

93 
	}
}

106 
	$π∆_qdisc_fifo_£t_limô
(
π∆_qdisc
 *
qdisc
, 
limô
)

108 
π∆_fifo
 *
fifo
;

110 i‡(!(
fifo
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

111  -
NLE_NOMEM
;

113 
fifo
->
qf_limô
 = 
limô
;

114 
fifo
->
qf_mask
 |
SCH_FIFO_ATTR_LIMIT
;

117 
	}
}

124 
	$π∆_qdisc_fifo_gë_limô
(
π∆_qdisc
 *
qdisc
)

126 
π∆_fifo
 *
fifo
;

128 i‡(!(
fifo
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

129  -
NLE_NOMEM
;

131 i‡(
fifo
->
qf_mask
 & 
SCH_FIFO_ATTR_LIMIT
)

132  
fifo
->
qf_limô
;

134  -
NLE_NOATTR
;

135 
	}
}

139 
π∆_tc_›s
 
	gpfifo_›s
 = {

140 .
to_köd
 = "pfifo",

141 .
	gto_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

142 .
	gto_size
 = (
π∆_fifo
),

143 .
	gto_msg_∑r£r
 = 
fifo_msg_∑r£r
,

144 .
	gto_dump
[
NL_DUMP_LINE
] = 
pfifo_dump_löe
,

145 .
	gto_msg_fûl
 = 
fifo_msg_fûl
,

148 
π∆_tc_›s
 
	gbfifo_›s
 = {

149 .
to_köd
 = "bfifo",

150 .
	gto_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

151 .
	gto_size
 = (
π∆_fifo
),

152 .
	gto_msg_∑r£r
 = 
fifo_msg_∑r£r
,

153 .
	gto_dump
[
NL_DUMP_LINE
] = 
bfifo_dump_löe
,

154 .
	gto_msg_fûl
 = 
fifo_msg_fûl
,

157 
__öô
 
	$fifo_öô
()

159 
	`π∆_tc_ªgi°î
(&
pfifo_›s
);

160 
	`π∆_tc_ªgi°î
(&
bfifo_›s
);

161 
	}
}

163 
__exô
 
	$fifo_exô
()

165 
	`π∆_tc_uƒegi°î
(&
pfifo_›s
);

166 
	`π∆_tc_uƒegi°î
(&
bfifo_›s
);

167 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/qdisc/fq_codel.c

20 
	~<√éök-¥iv©e/√éök.h
>

21 
	~<√éök-¥iv©e/tc.h
>

22 
	~<√éök/√éök.h
>

23 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

24 
	~<√éök/rouã/qdisc.h
>

25 
	~<√éök/rouã/qdisc/fq_codñ.h
>

26 
	~<√éök/utûs.h
>

29 
	#SCH_FQ_CODEL_ATTR_TARGET
 0x1

	)

30 
	#SCH_FQ_CODEL_ATTR_LIMIT
 0x2

	)

31 
	#SCH_FQ_CODEL_ATTR_INTERVAL
 0x4

	)

32 
	#SCH_FQ_CODEL_ATTR_FLOWS
 0x8

	)

33 
	#SCH_FQ_CODEL_ATTR_QUANTUM
 0x10

	)

34 
	#SCH_FQ_CODEL_ATTR_ECN
 0x20

	)

37 
∆a_pﬁicy
 
	gfq_codñ_pﬁicy
[
TCA_FQ_CODEL_MAX
 + 1] = {

38 [
TCA_FQ_CODEL_TARGET
] = { .
ty≥
 = 
NLA_U32
 },

39 [
TCA_FQ_CODEL_LIMIT
] = { .
ty≥
 = 
NLA_U32
 },

40 [
TCA_FQ_CODEL_INTERVAL
] = { .
ty≥
 = 
NLA_U32
 },

41 [
TCA_FQ_CODEL_ECN
] = { .
ty≥
 = 
NLA_U32
 },

42 [
TCA_FQ_CODEL_FLOWS
] = { .
ty≥
 = 
NLA_U32
 },

43 [
TCA_FQ_CODEL_QUANTUM
] = { .
ty≥
 = 
NLA_U32
 },

46 
	$fq_codñ_msg_∑r£r
(
π∆_tc
 *
tc
, *
d©a
)

48 
π∆_fq_codñ
 *
fq_codñ
 = 
d©a
;

49 
∆©å
 *
tb
[
TCA_FQ_CODEL_MAX
 + 1];

50 
îr
;

52 
îr
 = 
	`tˇ_∑r£
(
tb
, 
TCA_FQ_CODEL_MAX
, 
tc
, 
fq_codñ_pﬁicy
);

53 i‡(
îr
 < 0)

54  
îr
;

56 i‡(
tb
[
TCA_FQ_CODEL_TARGET
]) {

57 
fq_codñ
->
fq_èrgë
 = 
	`∆a_gë_u32
(
tb
[
TCA_FQ_CODEL_TARGET
]);

58 
fq_codñ
->
fq_mask
 |
SCH_FQ_CODEL_ATTR_TARGET
;

61 i‡(
tb
[
TCA_FQ_CODEL_INTERVAL
]) {

62 
fq_codñ
->
fq_öãrvÆ
 = 
	`∆a_gë_u32
(
tb
[
TCA_FQ_CODEL_INTERVAL
]);

63 
fq_codñ
->
fq_mask
 |
SCH_FQ_CODEL_ATTR_INTERVAL
;

66 i‡(
tb
[
TCA_FQ_CODEL_LIMIT
]) {

67 
fq_codñ
->
fq_limô
 = 
	`∆a_gë_u32
(
tb
[
TCA_FQ_CODEL_LIMIT
]);

68 
fq_codñ
->
fq_mask
 |
SCH_FQ_CODEL_ATTR_LIMIT
;

71 i‡(
tb
[
TCA_FQ_CODEL_QUANTUM
]) {

72 
fq_codñ
->
fq_qu™tum
 = 
	`∆a_gë_u32
(
tb
[
TCA_FQ_CODEL_QUANTUM
]);

73 
fq_codñ
->
fq_mask
 |
SCH_FQ_CODEL_ATTR_QUANTUM
;

76 i‡(
tb
[
TCA_FQ_CODEL_FLOWS
]) {

77 
fq_codñ
->
fq_Êows
 = 
	`∆a_gë_u32
(
tb
[
TCA_FQ_CODEL_FLOWS
]);

78 
fq_codñ
->
fq_mask
 |
SCH_FQ_CODEL_ATTR_FLOWS
;

81 i‡(
tb
[
TCA_FQ_CODEL_ECN
]) {

82 
fq_codñ
->
fq_e˙
 = 
	`∆a_gë_u32
(
tb
[
TCA_FQ_CODEL_ECN
]);

83 
fq_codñ
->
fq_mask
 |
SCH_FQ_CODEL_ATTR_ECN
;

87 
	}
}

89 
	$fq_codñ_dump_löe
(
π∆_tc
 *
tc
, *
d©a
,

90 
∆_dump_∑øms
 *
p
)

92 
π∆_fq_codñ
 *
fq_codñ
 = 
d©a
;

94 i‡(!
fq_codñ
)

97 i‡(
fq_codñ
->
fq_mask
 & 
SCH_FQ_CODEL_ATTR_LIMIT
)

98 
	`∆_dump
(
p
, "Üimô %uÖackës", 
fq_codñ
->
fq_limô
);

99 i‡(
fq_codñ
->
fq_mask
 & 
SCH_FQ_CODEL_ATTR_TARGET
)

100 
	`∆_dump
(
p
, "Å¨gë %u", 
fq_codñ
->
fq_èrgë
);

101 i‡(
fq_codñ
->
fq_mask
 & 
SCH_FQ_CODEL_ATTR_INTERVAL
)

102 
	`∆_dump
(
p
, " i¡îvÆ %u", 
fq_codñ
->
fq_öãrvÆ
);

103 i‡(
fq_codñ
->
fq_mask
 & 
SCH_FQ_CODEL_ATTR_ECN
)

104 
	`∆_dump
(
p
, "É˙ %u", 
fq_codñ
->
fq_e˙
);

105 i‡(
fq_codñ
->
fq_mask
 & 
SCH_FQ_CODEL_ATTR_FLOWS
)

106 
	`∆_dump
(
p
, " flow†%u", 
fq_codñ
->
fq_Êows
);

107 i‡(
fq_codñ
->
fq_mask
 & 
SCH_FQ_CODEL_ATTR_QUANTUM
)

108 
	`∆_dump
(
p
, " qu™tum %u", 
fq_codñ
->
fq_qu™tum
);

109 
	}
}

111 
	$fq_codñ_msg_fûl
(
π∆_tc
 *
tc
, *
d©a
, 
∆_msg
 *
msg
)

113 
π∆_fq_codñ
 *
fq_codñ
 = 
d©a
;

115 i‡(!
fq_codñ
)

116  -
NLE_INVAL
;

118 i‡(
fq_codñ
->
fq_mask
 & 
SCH_FQ_CODEL_ATTR_LIMIT
)

119 
	`NLA_PUT_U32
(
msg
, 
TCA_FQ_CODEL_LIMIT
, 
fq_codñ
->
fq_limô
);

120 i‡(
fq_codñ
->
fq_mask
 & 
SCH_FQ_CODEL_ATTR_INTERVAL
)

121 
	`NLA_PUT_U32
(
msg
, 
TCA_FQ_CODEL_INTERVAL
, 
fq_codñ
->
fq_öãrvÆ
);

122 i‡(
fq_codñ
->
fq_mask
 & 
SCH_FQ_CODEL_ATTR_TARGET
)

123 
	`NLA_PUT_U32
(
msg
, 
TCA_FQ_CODEL_TARGET
, 
fq_codñ
->
fq_èrgë
);

124 i‡(
fq_codñ
->
fq_mask
 & 
SCH_FQ_CODEL_ATTR_QUANTUM
)

125 
	`NLA_PUT_U32
(
msg
, 
TCA_FQ_CODEL_QUANTUM
, 
fq_codñ
->
fq_qu™tum
);

126 i‡(
fq_codñ
->
fq_mask
 & 
SCH_FQ_CODEL_ATTR_FLOWS
)

127 
	`NLA_PUT_U32
(
msg
, 
TCA_FQ_CODEL_FLOWS
, 
fq_codñ
->
fq_Êows
);

128 i‡(
fq_codñ
->
fq_mask
 & 
SCH_FQ_CODEL_ATTR_ECN
)

129 
	`NLA_PUT_U32
(
msg
, 
TCA_FQ_CODEL_ECN
, 
fq_codñ
->
fq_e˙
);

132 
∆a_put_Áûuª
:

133  -
NLE_MSGSIZE
;

135 
	}
}

148 
	$π∆_qdisc_fq_codñ_£t_limô
(
π∆_qdisc
 *
qdisc
, 
limô
)

150 
π∆_fq_codñ
 *
fq_codñ
;

152 i‡(!(
fq_codñ
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

153  -
NLE_NOMEM
;

155 
fq_codñ
->
fq_limô
 = 
limô
;

156 
fq_codñ
->
fq_mask
 |
SCH_FQ_CODEL_ATTR_LIMIT
;

159 
	}
}

166 
	$π∆_qdisc_fq_codñ_gë_limô
(
π∆_qdisc
 *
qdisc
)

168 
π∆_fq_codñ
 *
fq_codñ
;

170 i‡(!(
fq_codñ
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

171  -
NLE_NOMEM
;

173 i‡(
fq_codñ
->
fq_mask
 & 
SCH_FQ_CODEL_ATTR_LIMIT
)

174  
fq_codñ
->
fq_limô
;

176  -
NLE_NOATTR
;

177 
	}
}

185 
	$π∆_qdisc_fq_codñ_£t_èrgë
(
π∆_qdisc
 *
qdisc
, 
uöt32_t
 
èrgë
)

187 
π∆_fq_codñ
 *
fq_codñ
;

189 i‡(!(
fq_codñ
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

190  -
NLE_NOMEM
;

192 
fq_codñ
->
fq_èrgë
 = 
èrgë
;

193 
fq_codñ
->
fq_mask
 |
SCH_FQ_CODEL_ATTR_TARGET
;

196 
	}
}

203 
uöt32_t
 
	$π∆_qdisc_fq_codñ_gë_èrgë
(
π∆_qdisc
 *
qdisc
)

205 
π∆_fq_codñ
 *
fq_codñ
;

207 i‡((
fq_codñ
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))) &&

208 
fq_codñ
->
fq_mask
 & 
SCH_FQ_CODEL_ATTR_TARGET
)

209  
fq_codñ
->
fq_èrgë
;

212 
	}
}

220 
	$π∆_qdisc_fq_codñ_£t_öãrvÆ
(
π∆_qdisc
 *
qdisc
, 
uöt32_t
 
öãrvÆ
)

222 
π∆_fq_codñ
 *
fq_codñ
;

224 i‡(!(
fq_codñ
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

225  -
NLE_NOMEM
;

227 
fq_codñ
->
fq_öãrvÆ
 = 
öãrvÆ
;

228 
fq_codñ
->
fq_mask
 |
SCH_FQ_CODEL_ATTR_INTERVAL
;

231 
	}
}

238 
uöt32_t
 
	$π∆_qdisc_fq_codñ_gë_öãrvÆ
(
π∆_qdisc
 *
qdisc
)

240 
π∆_fq_codñ
 *
fq_codñ
;

242 i‡((
fq_codñ
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))) &&

243 
fq_codñ
->
fq_mask
 & 
SCH_FQ_CODEL_ATTR_INTERVAL
)

244  
fq_codñ
->
fq_öãrvÆ
;

247 
	}
}

255 
	$π∆_qdisc_fq_codñ_£t_qu™tum
(
π∆_qdisc
 *
qdisc
, 
uöt32_t
 
qu™tum
)

257 
π∆_fq_codñ
 *
fq_codñ
;

259 i‡(!(
fq_codñ
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

260  -
NLE_NOMEM
;

262 
fq_codñ
->
fq_qu™tum
 = 
qu™tum
;

263 
fq_codñ
->
fq_mask
 |
SCH_FQ_CODEL_ATTR_QUANTUM
;

266 
	}
}

273 
uöt32_t
 
	$π∆_qdisc_fq_codñ_gë_qu™tum
(
π∆_qdisc
 *
qdisc
)

275 
π∆_fq_codñ
 *
fq_codñ
;

277 i‡((
fq_codñ
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))) &&

278 (
fq_codñ
->
fq_mask
 & 
SCH_FQ_CODEL_ATTR_QUANTUM
))

279  
fq_codñ
->
fq_qu™tum
;

282 
	}
}

290 
	$π∆_qdisc_fq_codñ_£t_Êows
(
π∆_qdisc
 *
qdisc
, 
Êows
)

292 
π∆_fq_codñ
 *
fq_codñ
;

294 i‡(!(
fq_codñ
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

295  -
NLE_NOMEM
;

297 
fq_codñ
->
fq_Êows
 = 
Êows
;

298 
fq_codñ
->
fq_mask
 |
SCH_FQ_CODEL_ATTR_FLOWS
;

301 
	}
}

308 
	$π∆_qdisc_fq_codñ_gë_Êows
(
π∆_qdisc
 *
qdisc
)

310 
π∆_fq_codñ
 *
fq_codñ
;

312 i‡(!(
fq_codñ
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

313  -
NLE_NOMEM
;

315 i‡(
fq_codñ
->
fq_mask
 & 
SCH_FQ_CODEL_ATTR_FLOWS
)

316  
fq_codñ
->
fq_Êows
;

318  -
NLE_NOATTR
;

319 
	}
}

326 
	$π∆_qdisc_fq_codñ_£t_e˙
(
π∆_qdisc
 *
qdisc
, 
e˙
)

328 
π∆_fq_codñ
 *
fq_codñ
;

330 i‡(!(
fq_codñ
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

331  -
NLE_NOMEM
;

333 
fq_codñ
->
fq_e˙
 = 
e˙
;

334 
fq_codñ
->
fq_mask
 |
SCH_FQ_CODEL_ATTR_ECN
;

337 
	}
}

344 
	$π∆_qdisc_fq_codñ_gë_e˙
(
π∆_qdisc
 *
qdisc
)

346 
π∆_fq_codñ
 *
fq_codñ
;

348 i‡(!(
fq_codñ
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

349  -
NLE_NOMEM
;

351 i‡(
fq_codñ
->
fq_mask
 & 
SCH_FQ_CODEL_ATTR_ECN
)

352  
fq_codñ
->
fq_e˙
;

354  -
NLE_NOATTR
;

355 
	}
}

358 
π∆_tc_›s
 
	gfq_codñ_›s
 = {

359 .
to_köd
 = "fq_codel",

360 .
	gto_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

361 .
	gto_size
 = (
π∆_fq_codñ
),

362 .
	gto_msg_∑r£r
 = 
fq_codñ_msg_∑r£r
,

363 .
	gto_dump
[
NL_DUMP_LINE
] = 
fq_codñ_dump_löe
,

364 .
	gto_msg_fûl
 = 
fq_codñ_msg_fûl
,

367 
__öô
 
	$fq_codñ_öô
()

369 
	`π∆_tc_ªgi°î
(&
fq_codñ_›s
);

370 
	}
}

372 
__exô
 
	$fq_codñ_exô
()

374 
	`π∆_tc_uƒegi°î
(&
fq_codñ_›s
);

375 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/qdisc/htb.c

21 
	~<√éök-¥iv©e/√éök.h
>

22 
	~<√éök-¥iv©e/tc.h
>

23 
	~<√éök/√éök.h
>

24 
	~<√éök/ˇche.h
>

25 
	~<√éök/utûs.h
>

26 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

27 
	~<√éök/rouã/qdisc.h
>

28 
	~<√éök/rouã/˛ass.h
>

29 
	~<√éök/rouã/lök.h
>

30 
	~<√éök/rouã/qdisc/htb.h
>

33 
	#SCH_HTB_HAS_RATE2QUANTUM
 0x01

	)

34 
	#SCH_HTB_HAS_DEFCLS
 0x02

	)

36 
	#SCH_HTB_HAS_PRIO
 0x001

	)

37 
	#SCH_HTB_HAS_RATE
 0x002

	)

38 
	#SCH_HTB_HAS_CEIL
 0x004

	)

39 
	#SCH_HTB_HAS_RBUFFER
 0x008

	)

40 
	#SCH_HTB_HAS_CBUFFER
 0x010

	)

41 
	#SCH_HTB_HAS_QUANTUM
 0x020

	)

42 
	#SCH_HTB_HAS_LEVEL
 0x040

	)

45 
∆a_pﬁicy
 
	ghtb_pﬁicy
[
TCA_HTB_MAX
+1] = {

46 [
TCA_HTB_INIT
] = { .
möÀn
 = (
tc_htb_glob
) },

47 [
TCA_HTB_PARMS
] = { .
möÀn
 = (
tc_htb_›t
) },

50 
	$htb_qdisc_msg_∑r£r
(
π∆_tc
 *
tc
, *
d©a
)

52 
∆©å
 *
tb
[
TCA_HTB_MAX
 + 1];

53 
π∆_htb_qdisc
 *
htb
 = 
d©a
;

54 
îr
;

56 i‡((
îr
 = 
	`tˇ_∑r£
(
tb
, 
TCA_HTB_MAX
, 
tc
, 
htb_pﬁicy
)) < 0)

57  
îr
;

59 i‡(
tb
[
TCA_HTB_INIT
]) {

60 
tc_htb_glob
 
›ts
;

62 
	`∆a_mem˝y
(&
›ts
, 
tb
[
TCA_HTB_INIT
], (opts));

63 
htb
->
qh_øã2qu™tum
 = 
›ts
.
øã2qu™tum
;

64 
htb
->
qh_def˛s
 = 
›ts
.
def˛s
;

65 
htb
->
qh_dúe˘_pkts
 = 
›ts
.
dúe˘_pkts
;

67 
htb
->
qh_mask
 = (
SCH_HTB_HAS_RATE2QUANTUM
 | 
SCH_HTB_HAS_DEFCLS
);

71 
	}
}

73 
	$htb_˛ass_msg_∑r£r
(
π∆_tc
 *
tc
, *
d©a
)

75 
∆©å
 *
tb
[
TCA_HTB_MAX
 + 1];

76 
π∆_htb_˛ass
 *
htb
 = 
d©a
;

77 
îr
;

79 i‡((
îr
 = 
	`tˇ_∑r£
(
tb
, 
TCA_HTB_MAX
, 
tc
, 
htb_pﬁicy
)) < 0)

80  
îr
;

82 i‡(
tb
[
TCA_HTB_PARMS
]) {

83 
tc_htb_›t
 
›ts
;

85 
	`∆a_mem˝y
(&
›ts
, 
tb
[
TCA_HTB_PARMS
], (opts));

86 
htb
->
ch_¥io
 = 
›ts
.
¥io
;

87 
	`π∆_c›y_øã•ec
(&
htb
->
ch_øã
, &
›ts
.
øã
);

88 
	`π∆_c›y_øã•ec
(&
htb
->
ch_˚û
, &
›ts
.
˚û
);

89 
htb
->
ch_rbuf„r
 = 
	`π∆_tc_ˇlc_bufsize
(
	`∆_ticks2us
(
›ts
.
buf„r
),

90 
›ts
.
øã
.rate);

91 
htb
->
ch_cbuf„r
 = 
	`π∆_tc_ˇlc_bufsize
(
	`∆_ticks2us
(
›ts
.
cbuf„r
),

92 
›ts
.
˚û
.
øã
);

93 
htb
->
ch_qu™tum
 = 
›ts
.
qu™tum
;

94 
htb
->
ch_Àvñ
 = 
›ts
.
Àvñ
;

96 
	`π∆_tc_£t_mpu
(
tc
, 
htb
->
ch_øã
.
rs_mpu
);

97 
	`π∆_tc_£t_ovîhód
(
tc
, 
htb
->
ch_øã
.
rs_ovîhód
);

99 
htb
->
ch_mask
 = (
SCH_HTB_HAS_PRIO
 | 
SCH_HTB_HAS_RATE
 |

100 
SCH_HTB_HAS_CEIL
 | 
SCH_HTB_HAS_RBUFFER
 |

101 
SCH_HTB_HAS_CBUFFER
 | 
SCH_HTB_HAS_QUANTUM
 |

102 
SCH_HTB_HAS_LEVEL
);

106 
	}
}

108 
	$htb_qdisc_dump_löe
(
π∆_tc
 *
tc
, *
d©a
,

109 
∆_dump_∑øms
 *
p
)

111 
π∆_htb_qdisc
 *
htb
 = 
d©a
;

113 i‡(!
htb
)

116 i‡(
htb
->
qh_mask
 & 
SCH_HTB_HAS_RATE2QUANTUM
)

117 
	`∆_dump
(
p
, "Ñ2q %u", 
htb
->
qh_øã2qu™tum
);

119 i‡(
htb
->
qh_mask
 & 
SCH_HTB_HAS_DEFCLS
) {

120 
buf
[64];

121 
	`∆_dump
(
p
, " default-class %s",

122 
	`π∆_tc_h™dÀ2°r
(
htb
->
qh_def˛s
, 
buf
, (buf)));

124 
	}
}

126 
	$htb_˛ass_dump_löe
(
π∆_tc
 *
tc
, *
d©a
,

127 
∆_dump_∑øms
 *
p
)

129 
π∆_htb_˛ass
 *
htb
 = 
d©a
;

131 i‡(!
htb
)

134 i‡(
htb
->
ch_mask
 & 
SCH_HTB_HAS_RATE
) {

135 
r
, 
rbô
;

136 *
ru
, *
rubô
;

138 
r
 = 
	`∆_ˇn˚l_down_byãs
(
htb
->
ch_øã
.
rs_øã
, &
ru
);

139 
rbô
 = 
	`∆_ˇn˚l_down_bôs
(
htb
->
ch_øã
.
rs_øã
*8, &
rubô
);

141 
	`∆_dump
(
p
, "Ñate %.2f%s/s (%.0f%s)Üog %u",

142 
r
, 
ru
, 
rbô
, 
rubô
, 1<<
htb
->
ch_øã
.
rs_˚Œ_log
);

144 
	}
}

146 
	$htb_˛ass_dump_dëaûs
(
π∆_tc
 *
tc
, *
d©a
,

147 
∆_dump_∑øms
 *
p
)

149 
π∆_htb_˛ass
 *
htb
 = 
d©a
;

151 i‡(!
htb
)

155 i‡(
htb
->
ch_mask
 & 
SCH_HTB_HAS_CEIL
) {

156 
r
, 
rbô
;

157 *
ru
, *
rubô
;

159 
r
 = 
	`∆_ˇn˚l_down_byãs
(
htb
->
ch_˚û
.
rs_øã
, &
ru
);

160 
rbô
 = 
	`∆_ˇn˚l_down_bôs
(
htb
->
ch_˚û
.
rs_øã
*8, &
rubô
);

162 
	`∆_dump
(
p
, " ceil %.2f%s/s (%.0f%s)Üog %u",

163 
r
, 
ru
, 
rbô
, 
rubô
, 1<<
htb
->
ch_˚û
.
rs_˚Œ_log
);

166 i‡(
htb
->
ch_mask
 & 
SCH_HTB_HAS_PRIO
)

167 
	`∆_dump
(
p
, "Öriÿ%u", 
htb
->
ch_¥io
);

169 i‡(
htb
->
ch_mask
 & 
SCH_HTB_HAS_RBUFFER
) {

170 
b
;

171 *
bu
;

173 
b
 = 
	`∆_ˇn˚l_down_byãs
(
htb
->
ch_rbuf„r
, &
bu
);

174 
	`∆_dump
(
p
, "Ñbuf„∏%.2f%s", 
b
, 
bu
);

177 i‡(
htb
->
ch_mask
 & 
SCH_HTB_HAS_CBUFFER
) {

178 
b
;

179 *
bu
;

181 
b
 = 
	`∆_ˇn˚l_down_byãs
(
htb
->
ch_cbuf„r
, &
bu
);

182 
	`∆_dump
(
p
, " cbuf„∏%.2f%s", 
b
, 
bu
);

185 i‡(
htb
->
ch_mask
 & 
SCH_HTB_HAS_QUANTUM
)

186 
	`∆_dump
(
p
, " qu™tum %u", 
htb
->
ch_qu™tum
);

187 
	}
}

189 
	$htb_qdisc_msg_fûl
(
π∆_tc
 *
tc
, *
d©a
,

190 
∆_msg
 *
msg
)

192 
π∆_htb_qdisc
 *
htb
 = 
d©a
;

193 
tc_htb_glob
 
›ts
 = {

194 .
vîsi⁄
 = 
TC_HTB_PROTOVER
,

195 .
øã2qu™tum
 = 10,

198 i‡(
htb
) {

199 i‡(
htb
->
qh_mask
 & 
SCH_HTB_HAS_RATE2QUANTUM
)

200 
›ts
.
øã2qu™tum
 = 
htb
->
qh_øã2qu™tum
;

202 i‡(
htb
->
qh_mask
 & 
SCH_HTB_HAS_DEFCLS
)

203 
›ts
.
def˛s
 = 
htb
->
qh_def˛s
;

206  
	`∆a_put
(
msg
, 
TCA_HTB_INIT
, (
›ts
), &opts);

207 
	}
}

209 
	$htb_˛ass_msg_fûl
(
π∆_tc
 *
tc
, *
d©a
,

210 
∆_msg
 *
msg
)

212 
π∆_htb_˛ass
 *
htb
 = 
d©a
;

213 
uöt32_t
 
mtu
, 
πabÀ
[
RTNL_TC_RTABLE_SIZE
], 
˘abÀ
[RTNL_TC_RTABLE_SIZE];

214 
tc_htb_›t
 
›ts
;

215 
buf„r
, 
cbuf„r
;

217 i‡(!
htb
 || !(htb->
ch_mask
 & 
SCH_HTB_HAS_RATE
))

218 
	`BUG
();

220 
	`mem£t
(&
›ts
, 0, (opts));

223 i‡(
htb
->
ch_mask
 & 
SCH_HTB_HAS_PRIO
)

224 
›ts
.
¥io
 = 
htb
->
ch_¥io
;

226 
mtu
 = 
	`π∆_tc_gë_mtu
(
tc
);

228 
	`π∆_tc_buûd_øã_èbÀ
(
tc
, &
htb
->
ch_øã
, 
πabÀ
);

229 
	`π∆_rc›y_øã•ec
(&
›ts
.
øã
, &
htb
->
ch_øã
);

231 i‡(
htb
->
ch_mask
 & 
SCH_HTB_HAS_CEIL
) {

232 
	`π∆_tc_buûd_øã_èbÀ
(
tc
, &
htb
->
ch_˚û
, 
˘abÀ
);

233 
	`π∆_rc›y_øã•ec
(&
›ts
.
˚û
, &
htb
->
ch_˚û
);

239 
	`mem˝y
(&
›ts
.
˚û
, &›ts.
øã
, (
tc_øã•ec
));

242 i‡(
htb
->
ch_mask
 & 
SCH_HTB_HAS_RBUFFER
)

243 
buf„r
 = 
htb
->
ch_rbuf„r
;

245 
buf„r
 = 
›ts
.
øã
.øã / 
	`∆_gë_psched_hz
(Ë+ 
mtu
;

247 
›ts
.
buf„r
 = 
	`∆_us2ticks
(
	`π∆_tc_ˇlc_txtime
(buf„r, o±s.
øã
.rate));

249 i‡(
htb
->
ch_mask
 & 
SCH_HTB_HAS_CBUFFER
)

250 
cbuf„r
 = 
htb
->
ch_cbuf„r
;

252 
cbuf„r
 = 
›ts
.
˚û
.
øã
 / 
	`∆_gë_psched_hz
(Ë+ 
mtu
;

254 
›ts
.
cbuf„r
 = 
	`∆_us2ticks
(
	`π∆_tc_ˇlc_txtime
(cbuf„r, o±s.
˚û
.
øã
));

256 i‡(
htb
->
ch_mask
 & 
SCH_HTB_HAS_QUANTUM
)

257 
›ts
.
qu™tum
 = 
htb
->
ch_qu™tum
;

259 
	`NLA_PUT
(
msg
, 
TCA_HTB_PARMS
, (
›ts
), &opts);

260 
	`NLA_PUT
(
msg
, 
TCA_HTB_RTAB
, (
πabÀ
), &rtable);

261 
	`NLA_PUT
(
msg
, 
TCA_HTB_CTAB
, (
˘abÀ
), &ctable);

265 
∆a_put_Áûuª
:

266  -
NLE_MSGSIZE
;

267 
	}
}

269 
π∆_tc_›s
 
	ghtb_qdisc_›s
;

270 
π∆_tc_›s
 
	ghtb_˛ass_›s
;

272 
π∆_htb_qdisc
 *
	$htb_qdisc_d©a
(
π∆_qdisc
 *
qdisc
)

274  
	`π∆_tc_d©a_check
(
	`TC_CAST
(
qdisc
), &
htb_qdisc_›s
);

275 
	}
}

277 
π∆_htb_˛ass
 *
	$htb_˛ass_d©a
(
π∆_˛ass
 *
˛ass
)

279  
	`π∆_tc_d©a_check
(
	`TC_CAST
(
˛ass
), &
htb_˛ass_›s
);

280 
	}
}

293 
uöt32_t
 
	$π∆_htb_gë_øã2qu™tum
(
π∆_qdisc
 *
qdisc
)

295 
π∆_htb_qdisc
 *
htb
;

297 i‡((
htb
 = 
	`htb_qdisc_d©a
(
qdisc
)) &&

298 
htb
->
qh_mask
 & 
SCH_HTB_HAS_RATE2QUANTUM
)

299  
htb
->
qh_øã2qu™tum
;

302 
	}
}

304 
	$π∆_htb_£t_øã2qu™tum
(
π∆_qdisc
 *
qdisc
, 
uöt32_t
 
øã2qu™tum
)

306 
π∆_htb_qdisc
 *
htb
;

308 i‡(!(
htb
 = 
	`htb_qdisc_d©a
(
qdisc
)))

309  -
NLE_OPNOTSUPP
;

311 
htb
->
qh_øã2qu™tum
 = 
øã2qu™tum
;

312 
htb
->
qh_mask
 |
SCH_HTB_HAS_RATE2QUANTUM
;

315 
	}
}

326 
uöt32_t
 
	$π∆_htb_gë_def˛s
(
π∆_qdisc
 *
qdisc
)

328 
π∆_htb_qdisc
 *
htb
;

330 i‡((
htb
 = 
	`htb_qdisc_d©a
(
qdisc
)) &&

331 
htb
->
qh_mask
 & 
SCH_HTB_HAS_DEFCLS
)

332  
htb
->
qh_def˛s
;

334  
TC_H_UNSPEC
;

335 
	}
}

342 
	$π∆_htb_£t_def˛s
(
π∆_qdisc
 *
qdisc
, 
uöt32_t
 
def˛s
)

344 
π∆_htb_qdisc
 *
htb
;

346 i‡(!(
htb
 = 
	`htb_qdisc_d©a
(
qdisc
)))

347  -
NLE_OPNOTSUPP
;

349 
htb
->
qh_def˛s
 = 
def˛s
;

350 
htb
->
qh_mask
 |
SCH_HTB_HAS_DEFCLS
;

353 
	}
}

355 
uöt32_t
 
	$π∆_htb_gë_¥io
(
π∆_˛ass
 *
˛ass
)

357 
π∆_htb_˛ass
 *
htb
;

359 i‡((
htb
 = 
	`htb_˛ass_d©a
(
˛ass
)Ë&& htb->
ch_mask
 & 
SCH_HTB_HAS_PRIO
)

360  
htb
->
ch_¥io
;

363 
	}
}

365 
	$π∆_htb_£t_¥io
(
π∆_˛ass
 *
˛ass
, 
uöt32_t
 
¥io
)

367 
π∆_htb_˛ass
 *
htb
;

369 i‡(!(
htb
 = 
	`htb_˛ass_d©a
(
˛ass
)))

370  -
NLE_OPNOTSUPP
;

372 
htb
->
ch_¥io
 = 
¥io
;

373 
htb
->
ch_mask
 |
SCH_HTB_HAS_PRIO
;

376 
	}
}

384 
uöt32_t
 
	$π∆_htb_gë_øã
(
π∆_˛ass
 *
˛ass
)

386 
π∆_htb_˛ass
 *
htb
;

388 i‡((
htb
 = 
	`htb_˛ass_d©a
(
˛ass
)Ë&& htb->
ch_mask
 & 
SCH_HTB_HAS_RATE
)

389  
htb
->
ch_øã
.
rs_øã
;

392 
	}
}

401 
	$π∆_htb_£t_øã
(
π∆_˛ass
 *
˛ass
, 
uöt32_t
 
øã
)

403 
π∆_htb_˛ass
 *
htb
;

405 i‡(!(
htb
 = 
	`htb_˛ass_d©a
(
˛ass
)))

406  -
NLE_OPNOTSUPP
;

408 
htb
->
ch_øã
.
rs_˚Œ_log
 = 
UINT8_MAX
;

409 
htb
->
ch_øã
.
rs_øã
 = 
øã
;

410 
htb
->
ch_mask
 |
SCH_HTB_HAS_RATE
;

413 
	}
}

421 
uöt32_t
 
	$π∆_htb_gë_˚û
(
π∆_˛ass
 *
˛ass
)

423 
π∆_htb_˛ass
 *
htb
;

425 i‡((
htb
 = 
	`htb_˛ass_d©a
(
˛ass
)Ë&& htb->
ch_mask
 & 
SCH_HTB_HAS_CEIL
)

426  
htb
->
ch_˚û
.
rs_øã
;

429 
	}
}

438 
	$π∆_htb_£t_˚û
(
π∆_˛ass
 *
˛ass
, 
uöt32_t
 
˚û
)

440 
π∆_htb_˛ass
 *
htb
;

442 i‡(!(
htb
 = 
	`htb_˛ass_d©a
(
˛ass
)))

443  -
NLE_OPNOTSUPP
;

445 
htb
->
ch_˚û
.
rs_˚Œ_log
 = 
UINT8_MAX
;

446 
htb
->
ch_˚û
.
rs_øã
 = 
˚û
;

447 
htb
->
ch_mask
 |
SCH_HTB_HAS_CEIL
;

450 
	}
}

458 
uöt32_t
 
	$π∆_htb_gë_rbuf„r
(
π∆_˛ass
 *
˛ass
)

460 
π∆_htb_˛ass
 *
htb
;

462 i‡((
htb
 = 
	`htb_˛ass_d©a
(
˛ass
)) &&

463 
htb
->
ch_mask
 & 
SCH_HTB_HAS_RBUFFER
)

464  
htb
->
ch_rbuf„r
;

467 
	}
}

474 
	$π∆_htb_£t_rbuf„r
(
π∆_˛ass
 *
˛ass
, 
uöt32_t
 
rbuf„r
)

476 
π∆_htb_˛ass
 *
htb
;

478 i‡(!(
htb
 = 
	`htb_˛ass_d©a
(
˛ass
)))

479  -
NLE_OPNOTSUPP
;

481 
htb
->
ch_rbuf„r
 = 
rbuf„r
;

482 
htb
->
ch_mask
 |
SCH_HTB_HAS_RBUFFER
;

485 
	}
}

493 
uöt32_t
 
	$π∆_htb_gë_cbuf„r
(
π∆_˛ass
 *
˛ass
)

495 
π∆_htb_˛ass
 *
htb
;

497 i‡((
htb
 = 
	`htb_˛ass_d©a
(
˛ass
)) &&

498 
htb
->
ch_mask
 & 
SCH_HTB_HAS_CBUFFER
)

499  
htb
->
ch_cbuf„r
;

502 
	}
}

509 
	$π∆_htb_£t_cbuf„r
(
π∆_˛ass
 *
˛ass
, 
uöt32_t
 
cbuf„r
)

511 
π∆_htb_˛ass
 *
htb
;

513 i‡(!(
htb
 = 
	`htb_˛ass_d©a
(
˛ass
)))

514  -
NLE_OPNOTSUPP
;

516 
htb
->
ch_cbuf„r
 = 
cbuf„r
;

517 
htb
->
ch_mask
 |
SCH_HTB_HAS_CBUFFER
;

520 
	}
}

530 
uöt32_t
 
	$π∆_htb_gë_qu™tum
(
π∆_˛ass
 *
˛ass
)

532 
π∆_htb_˛ass
 *
htb
;

534 i‡((
htb
 = 
	`htb_˛ass_d©a
(
˛ass
)) &&

535 
htb
->
ch_mask
 & 
SCH_HTB_HAS_QUANTUM
)

536  
htb
->
ch_qu™tum
;

539 
	}
}

550 
	$π∆_htb_£t_qu™tum
(
π∆_˛ass
 *
˛ass
, 
uöt32_t
 
qu™tum
)

552 
π∆_htb_˛ass
 *
htb
;

554 i‡(!(
htb
 = 
	`htb_˛ass_d©a
(
˛ass
)))

555  -
NLE_OPNOTSUPP
;

557 
htb
->
ch_qu™tum
 = 
qu™tum
;

558 
htb
->
ch_mask
 |
SCH_HTB_HAS_QUANTUM
;

561 
	}
}

573 
	$π∆_htb_gë_Àvñ
(
π∆_˛ass
 *
˛ass
)

575 
π∆_htb_˛ass
 *
htb
;

577 i‡((
htb
 = 
	`htb_˛ass_d©a
(
˛ass
)Ë&& htb->
ch_mask
 & 
SCH_HTB_HAS_LEVEL
)

578  
htb
->
ch_Àvñ
;

580  -
NLE_OPNOTSUPP
;

581 
	}
}

595 
	$π∆_htb_£t_Àvñ
(
π∆_˛ass
 *
˛ass
, 
Àvñ
)

597 
π∆_htb_˛ass
 *
htb
;

599 i‡(!(
htb
 = 
	`htb_˛ass_d©a
(
˛ass
)))

600  -
NLE_OPNOTSUPP
;

602 
htb
->
ch_Àvñ
 = 
Àvñ
;

603 
htb
->
ch_mask
 |
SCH_HTB_HAS_LEVEL
;

606 
	}
}

610 
π∆_tc_›s
 
	ghtb_qdisc_›s
 = {

611 .
to_köd
 = "htb",

612 .
	gto_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

613 .
	gto_size
 = (
π∆_htb_qdisc
),

614 .
	gto_msg_∑r£r
 = 
htb_qdisc_msg_∑r£r
,

615 .
	gto_dump
[
NL_DUMP_LINE
] = 
htb_qdisc_dump_löe
,

616 .
	gto_msg_fûl
 = 
htb_qdisc_msg_fûl
,

619 
π∆_tc_›s
 
	ghtb_˛ass_›s
 = {

620 .
to_köd
 = "htb",

621 .
	gto_ty≥
 = 
RTNL_TC_TYPE_CLASS
,

622 .
	gto_size
 = (
π∆_htb_˛ass
),

623 .
	gto_msg_∑r£r
 = 
htb_˛ass_msg_∑r£r
,

624 .
	gto_dump
 = {

625 [
NL_DUMP_LINE
] = 
htb_˛ass_dump_löe
,

626 [
NL_DUMP_DETAILS
] = 
htb_˛ass_dump_dëaûs
,

628 .
	gto_msg_fûl
 = 
htb_˛ass_msg_fûl
,

631 
__öô
 
	$htb_öô
()

633 
	`π∆_tc_ªgi°î
(&
htb_qdisc_›s
);

634 
	`π∆_tc_ªgi°î
(&
htb_˛ass_›s
);

635 
	}
}

637 
__exô
 
	$htb_exô
()

639 
	`π∆_tc_uƒegi°î
(&
htb_qdisc_›s
);

640 
	`π∆_tc_uƒegi°î
(&
htb_˛ass_›s
);

641 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/qdisc/ingress.c

19 
	~<√éök-¥iv©e/√éök.h
>

20 
	~<√éök-¥iv©e/tc.h
>

21 
	~<√éök/√éök.h
>

22 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

23 
	~<√éök/rouã/qdisc.h
>

24 
	~<√éök/utûs.h
>

26 
	sdumb
 {

27 
uöt32_t
 
	mfoo
;

30 
	$dumb_msg_∑r£r
(
π∆_tc
 *
tc
, *
d©a
)

33 
	}
}

35 
	$dumb_dump_löe
(
π∆_tc
 *
tc
, *
d©a
,

36 
∆_dump_∑øms
 *
p
)

38 
	}
}

40 
	$dumb_msg_fûl
(
π∆_tc
 *
tc
, *
d©a
, 
∆_msg
 *
msg
)

43 
	}
}

45 
π∆_tc_›s
 
	gögªss_›s
 = {

46 .
to_köd
 = "ingress",

47 .
	gto_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

48 .
	gto_size
 = (
dumb
),

49 .
	gto_msg_∑r£r
 = 
dumb_msg_∑r£r
,

50 .
	gto_dump
[
NL_DUMP_LINE
] = 
dumb_dump_löe
,

51 .
	gto_msg_fûl
 = 
dumb_msg_fûl
,

54 
__öô
 
	$ögªss_öô
()

56 
	`π∆_tc_ªgi°î
(&
ögªss_›s
);

57 
	}
}

59 
__exô
 
	$ögªss_exô
()

61 
	`π∆_tc_uƒegi°î
(&
ögªss_›s
);

62 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/qdisc/netem.c

21 
	~<√éök-¥iv©e/√éök.h
>

22 
	~<√éök-¥iv©e/tc.h
>

23 
	~<√éök/√éök.h
>

24 
	~<√éök/utûs.h
>

25 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

26 
	~<√éök/rouã/qdisc.h
>

27 
	~<√éök/rouã/qdisc/√ãm.h
>

30 
	#SCH_NETEM_ATTR_LATENCY
 0x0001

	)

31 
	#SCH_NETEM_ATTR_LIMIT
 0x0002

	)

32 
	#SCH_NETEM_ATTR_LOSS
 0x0004

	)

33 
	#SCH_NETEM_ATTR_GAP
 0x0008

	)

34 
	#SCH_NETEM_ATTR_DUPLICATE
 0x0010

	)

35 
	#SCH_NETEM_ATTR_JITTER
 0x0020

	)

36 
	#SCH_NETEM_ATTR_DELAY_CORR
 0x0040

	)

37 
	#SCH_NETEM_ATTR_LOSS_CORR
 0x0080

	)

38 
	#SCH_NETEM_ATTR_DUP_CORR
 0x0100

	)

39 
	#SCH_NETEM_ATTR_RO_PROB
 0x0200

	)

40 
	#SCH_NETEM_ATTR_RO_CORR
 0x0400

	)

41 
	#SCH_NETEM_ATTR_CORRUPT_PROB
 0x0800

	)

42 
	#SCH_NETEM_ATTR_CORRUPT_CORR
 0x1000

	)

43 
	#SCH_NETEM_ATTR_DIST
 0x2000

	)

46 
∆a_pﬁicy
 
	g√ãm_pﬁicy
[
TCA_NETEM_MAX
+1] = {

47 [
TCA_NETEM_CORR
] = { .
möÀn
 = (
tc_√ãm_c‹r
) },

48 [
TCA_NETEM_REORDER
] = { .
möÀn
 = (
tc_√ãm_ª‹dî
) },

49 [
TCA_NETEM_CORRUPT
] = { .
möÀn
 = (
tc_√ãm_c‹ru±
) },

52 
	$√ãm_msg_∑r£r
(
π∆_tc
 *
tc
, *
d©a
)

54 
π∆_√ãm
 *
√ãm
 = 
d©a
;

55 
tc_√ãm_q›t
 *
›ts
;

56 
Àn
, 
îr
 = 0;

58 i‡(
tc
->
tc_›ts
->
d_size
 < (*
›ts
))

59  -
NLE_INVAL
;

61 
›ts
 = (
tc_√ãm_q›t
 *Ë
tc
->
tc_›ts
->
d_d©a
;

62 
√ãm
->
qnm_œãncy
 = 
›ts
->
œãncy
;

63 
√ãm
->
qnm_limô
 = 
›ts
->
limô
;

64 
√ãm
->
qnm_loss
 = 
›ts
->
loss
;

65 
√ãm
->
qnm_g≠
 = 
›ts
->
g≠
;

66 
√ãm
->
qnm_du∂iˇã
 = 
›ts
->
du∂iˇã
;

67 
√ãm
->
qnm_jôãr
 = 
›ts
->
jôãr
;

69 
√ãm
->
qnm_mask
 = (
SCH_NETEM_ATTR_LATENCY
 | 
SCH_NETEM_ATTR_LIMIT
 |

70 
SCH_NETEM_ATTR_LOSS
 | 
SCH_NETEM_ATTR_GAP
 |

71 
SCH_NETEM_ATTR_DUPLICATE
 | 
SCH_NETEM_ATTR_JITTER
);

73 
Àn
 = 
tc
->
tc_›ts
->
d_size
 - (*
›ts
);

75 i‡(
Àn
 > 0) {

76 
∆©å
 *
tb
[
TCA_NETEM_MAX
+1];

78 
îr
 = 
	`∆a_∑r£
(
tb
, 
TCA_NETEM_MAX
, (
∆©å
 *)

79 (
tc
->
tc_›ts
->
d_d©a
 + (*
›ts
)),

80 
Àn
, 
√ãm_pﬁicy
);

81 i‡(
îr
 < 0) {

82 
	`‰ì
(
√ãm
);

83  
îr
;

86 i‡(
tb
[
TCA_NETEM_CORR
]) {

87 
tc_√ãm_c‹r
 
c‹
;

89 
	`∆a_mem˝y
(&
c‹
, 
tb
[
TCA_NETEM_CORR
], (cor));

90 
√ãm
->
qnm_c‹r
.
nmc_dñay
 = 
c‹
.
dñay_c‹r
;

91 
√ãm
->
qnm_c‹r
.
nmc_loss
 = 
c‹
.
loss_c‹r
;

92 
√ãm
->
qnm_c‹r
.
nmc_du∂iˇã
 = 
c‹
.
dup_c‹r
;

94 
√ãm
->
qnm_mask
 |(
SCH_NETEM_ATTR_DELAY_CORR
 |

95 
SCH_NETEM_ATTR_LOSS_CORR
 |

96 
SCH_NETEM_ATTR_DUP_CORR
);

99 i‡(
tb
[
TCA_NETEM_REORDER
]) {

100 
tc_√ãm_ª‹dî
 
ro
;

102 
	`∆a_mem˝y
(&
ro
, 
tb
[
TCA_NETEM_REORDER
], (ro));

103 
√ãm
->
qnm_ro
.
nmro_¥obabûôy
 = 
ro
.
¥obabûôy
;

104 
√ãm
->
qnm_ro
.
nmro_c‹ªœti⁄
 = 
ro
.
c‹ªœti⁄
;

106 
√ãm
->
qnm_mask
 |(
SCH_NETEM_ATTR_RO_PROB
 |

107 
SCH_NETEM_ATTR_RO_CORR
);

110 i‡(
tb
[
TCA_NETEM_CORRUPT
]) {

111 
tc_√ãm_c‹ru±
 
c‹ru±
;

113 
	`∆a_mem˝y
(&
c‹ru±
, 
tb
[
TCA_NETEM_CORRUPT
], (corrupt));

114 
√ãm
->
qnm_¸±
.
nm¸_¥obabûôy
 = 
c‹ru±
.
¥obabûôy
;

115 
√ãm
->
qnm_¸±
.
nm¸_c‹ªœti⁄
 = 
c‹ru±
.
c‹ªœti⁄
;

117 
√ãm
->
qnm_mask
 |(
SCH_NETEM_ATTR_CORRUPT_PROB
 |

118 
SCH_NETEM_ATTR_CORRUPT_CORR
);

122 
√ãm
->
qnm_di°
.
di°_d©a
 = 
NULL
;

123 
√ãm
->
qnm_di°
.
di°_size
 = 0;

127 
	}
}

129 
	$√ãm_‰ì_d©a
(
π∆_tc
 *
tc
, *
d©a
)

131 
π∆_√ãm
 *
√ãm
 = 
d©a
;

133 i‡(!
√ãm
)

136 
	`‰ì
(
√ãm
->
qnm_di°
.
di°_d©a
);

137 
	}
}

139 
	$√ãm_dump_löe
(
π∆_tc
 *
tc
, *
d©a
,

140 
∆_dump_∑øms
 *
p
)

142 
π∆_√ãm
 *
√ãm
 = 
d©a
;

144 i‡(
√ãm
)

145 
	`∆_dump
(
p
, "limô %d", 
√ãm
->
qnm_limô
);

146 
	}
}

148 
	$√ãm_msg_fûl_øw
(
π∆_tc
 *
tc
, *
d©a
,

149 
∆_msg
 *
msg
)

151 
îr
 = 0;

152 
tc_√ãm_q›t
 
›ts
;

153 
tc_√ãm_c‹r
 
c‹
;

154 
tc_√ãm_ª‹dî
 
ª‹dî
;

155 
tc_√ãm_c‹ru±
 
c‹ru±
;

156 
π∆_√ãm
 *
√ãm
 = 
d©a
;

158 
£t_c‹ªœti⁄
 = 0, 
£t_ª‹dî
 = 0,

159 
£t_c‹ru±
 = 0, 
£t_di°
 = 0;

161 i‡(!
√ãm
)

162 
	`BUG
();

164 
	`mem£t
(&
›ts
, 0, (opts));

165 
	`mem£t
(&
c‹
, 0, (cor));

166 
	`mem£t
(&
ª‹dî
, 0, (reorder));

167 
	`mem£t
(&
c‹ru±
, 0, (corrupt));

169 
msg
->
nm_∆h
->
∆msg_Êags
 |
NLM_F_REQUEST
;

171 i‡–
√ãm
->
qnm_ro
.
nmro_¥obabûôy
 != 0 ) {

172 i‡(
√ãm
->
qnm_œãncy
 == 0) {

173  -
NLE_MISSING_ATTR
;

175 i‡(
√ãm
->
qnm_g≠
 == 0)Çetem->qnm_gap = 1;

177 i‡–
√ãm
->
qnm_g≠
 ) {

178  -
NLE_MISSING_ATTR
;

181 i‡–
√ãm
->
qnm_c‹r
.
nmc_dñay
 != 0 ) {

182 i‡–
√ãm
->
qnm_œãncy
 =0 ||Çëem->
qnm_jôãr
 == 0) {

183  -
NLE_MISSING_ATTR
;

185 
£t_c‹ªœti⁄
 = 1;

188 i‡–
√ãm
->
qnm_c‹r
.
nmc_loss
 != 0 ) {

189 i‡–
√ãm
->
qnm_loss
 == 0 ) {

190  -
NLE_MISSING_ATTR
;

192 
£t_c‹ªœti⁄
 = 1;

195 i‡–
√ãm
->
qnm_c‹r
.
nmc_du∂iˇã
 != 0 ) {

196 i‡–
√ãm
->
qnm_du∂iˇã
 == 0 ) {

197  -
NLE_MISSING_ATTR
;

199 
£t_c‹ªœti⁄
 = 1;

202 i‡–
√ãm
->
qnm_ro
.
nmro_¥obabûôy
 !0 ) 
£t_ª‹dî
 = 1;

203 i‡–
√ãm
->
qnm_ro
.
nmro_c‹ªœti⁄
 != 0 ) {

204  -
NLE_MISSING_ATTR
;

207 i‡–
√ãm
->
qnm_¸±
.
nm¸_¥obabûôy
 !0 ) 
£t_c‹ru±
 = 1;

208 i‡–
√ãm
->
qnm_¸±
.
nm¸_c‹ªœti⁄
 != 0 ) {

209  -
NLE_MISSING_ATTR
;

212 i‡–
√ãm
->
qnm_di°
.
di°_d©a
 &&Çëem->qnm_di°.
di°_size
 ) {

213 i‡(
√ãm
->
qnm_œãncy
 =0 ||Çëem->
qnm_jôãr
 == 0) {

214  -
NLE_MISSING_ATTR
;

218 
√w_msg_Àn
 = 
msg
->
nm_size
 + 
√ãm
->
qnm_di°
.
di°_size
 *

219 (
√ãm
->
qnm_di°
.
di°_d©a
[0]);

221 
msg
->
nm_∆h
 = (
∆msghdr
 *Ë
	`ªÆloc
(msg->nm_∆h, 
√w_msg_Àn
);

222 i‡–
msg
->
nm_∆h
 =
NULL
 )

223  -
NLE_NOMEM
;

224 
msg
->
nm_size
 = 
√w_msg_Àn
;

225 
£t_di°
 = 1;

229 
›ts
.
œãncy
 = 
√ãm
->
qnm_œãncy
;

230 
›ts
.
limô
 = 
√ãm
->
qnm_limô
 ?Çetem->qnm_limit : 1000;

231 
›ts
.
loss
 = 
√ãm
->
qnm_loss
;

232 
›ts
.
g≠
 = 
√ãm
->
qnm_g≠
;

233 
›ts
.
du∂iˇã
 = 
√ãm
->
qnm_du∂iˇã
;

234 
›ts
.
jôãr
 = 
√ãm
->
qnm_jôãr
;

236 
	`NLA_PUT
(
msg
, 
TCA_OPTIONS
, (
›ts
), &opts);

238 i‡–
£t_c‹ªœti⁄
 ) {

239 
c‹
.
dñay_c‹r
 = 
√ãm
->
qnm_c‹r
.
nmc_dñay
;

240 
c‹
.
loss_c‹r
 = 
√ãm
->
qnm_c‹r
.
nmc_loss
;

241 
c‹
.
dup_c‹r
 = 
√ãm
->
qnm_c‹r
.
nmc_du∂iˇã
;

243 
	`NLA_PUT
(
msg
, 
TCA_NETEM_CORR
, (
c‹
), &cor);

246 i‡–
£t_ª‹dî
 ) {

247 
ª‹dî
.
¥obabûôy
 = 
√ãm
->
qnm_ro
.
nmro_¥obabûôy
;

248 
ª‹dî
.
c‹ªœti⁄
 = 
√ãm
->
qnm_ro
.
nmro_c‹ªœti⁄
;

250 
	`NLA_PUT
(
msg
, 
TCA_NETEM_REORDER
, (
ª‹dî
), &reorder);

253 i‡–
£t_c‹ru±
 ) {

254 
c‹ru±
.
¥obabûôy
 = 
√ãm
->
qnm_¸±
.
nm¸_¥obabûôy
;

255 
c‹ru±
.
c‹ªœti⁄
 = 
√ãm
->
qnm_¸±
.
nm¸_c‹ªœti⁄
;

257 
	`NLA_PUT
(
msg
, 
TCA_NETEM_CORRUPT
, (
c‹ru±
), &corrupt);

260 i‡–
£t_di°
 ) {

261 
	`NLA_PUT
(
msg
, 
TCA_NETEM_DELAY_DIST
,

262 
√ãm
->
qnm_di°
.
di°_size
 * “ëem->qnm_di°.
di°_d©a
[0]),

263 
√ãm
->
qnm_di°
.
di°_d©a
);

270 
∆©å
* 
hód
 = (∆©å *)(
	`NLMSG_DATA
(
msg
->
nm_∆h
) +

271 
	`NLMSG_LENGTH
((
tcmsg
)Ë- 
NLMSG_ALIGNTO
);

273 
∆©å
* 
èû
 = (∆©å *)(((*Ë(
msg
->
nm_∆h
)) +

274 
	`NLMSG_ALIGN
(
msg
->
nm_∆h
->
∆msg_Àn
));

276 
ﬁd_Àn
 = 
hód
->
∆a_Àn
;

277 
hód
->
∆a_Àn
 = (*)
èû
 - (*)head;

278 
msg
->
nm_∆h
->
∆msg_Àn
 +(
hód
->
∆a_Àn
 - 
ﬁd_Àn
);

280  
îr
;

281 
∆a_put_Áûuª
:

282  -
NLE_MSGSIZE
;

283 
	}
}

296 
	$π∆_√ãm_£t_limô
(
π∆_qdisc
 *
qdisc
, 
limô
)

298 
π∆_√ãm
 *
√ãm
;

300 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

301 
	`BUG
();

303 
√ãm
->
qnm_limô
 = 
limô
;

304 
√ãm
->
qnm_mask
 |
SCH_NETEM_ATTR_LIMIT
;

305 
	}
}

312 
	$π∆_√ãm_gë_limô
(
π∆_qdisc
 *
qdisc
)

314 
π∆_√ãm
 *
√ãm
;

316 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

317  -
NLE_NOMEM
;

319 i‡(
√ãm
->
qnm_mask
 & 
SCH_NETEM_ATTR_LIMIT
)

320  
√ãm
->
qnm_limô
;

322  -
NLE_NOATTR
;

323 
	}
}

338 
	$π∆_√ãm_£t_g≠
(
π∆_qdisc
 *
qdisc
, 
g≠
)

340 
π∆_√ãm
 *
√ãm
;

342 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

343 
	`BUG
();

345 
√ãm
->
qnm_g≠
 = 
g≠
;

346 
√ãm
->
qnm_mask
 |
SCH_NETEM_ATTR_GAP
;

347 
	}
}

354 
	$π∆_√ãm_gë_g≠
(
π∆_qdisc
 *
qdisc
)

356 
π∆_√ãm
 *
√ãm
;

358 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

359  -
NLE_NOMEM
;

361 i‡(
√ãm
->
qnm_mask
 & 
SCH_NETEM_ATTR_GAP
)

362  
√ãm
->
qnm_g≠
;

364  -
NLE_NOATTR
;

365 
	}
}

373 
	$π∆_√ãm_£t_ª‹dî_¥obabûôy
(
π∆_qdisc
 *
qdisc
, 
¥ob
)

375 
π∆_√ãm
 *
√ãm
;

377 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

378 
	`BUG
();

380 
√ãm
->
qnm_ro
.
nmro_¥obabûôy
 = 
¥ob
;

381 
√ãm
->
qnm_mask
 |
SCH_NETEM_ATTR_RO_PROB
;

382 
	}
}

389 
	$π∆_√ãm_gë_ª‹dî_¥obabûôy
(
π∆_qdisc
 *
qdisc
)

391 
π∆_√ãm
 *
√ãm
;

393 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

394  -
NLE_NOMEM
;

396 i‡(
√ãm
->
qnm_mask
 & 
SCH_NETEM_ATTR_RO_PROB
)

397  
√ãm
->
qnm_ro
.
nmro_¥obabûôy
;

399  -
NLE_NOATTR
;

400 
	}
}

408 
	$π∆_√ãm_£t_ª‹dî_c‹ªœti⁄
(
π∆_qdisc
 *
qdisc
, 
¥ob
)

410 
π∆_√ãm
 *
√ãm
;

412 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

413 
	`BUG
();

415 
√ãm
->
qnm_ro
.
nmro_c‹ªœti⁄
 = 
¥ob
;

416 
√ãm
->
qnm_mask
 |
SCH_NETEM_ATTR_RO_CORR
;

417 
	}
}

424 
	$π∆_√ãm_gë_ª‹dî_c‹ªœti⁄
(
π∆_qdisc
 *
qdisc
)

426 
π∆_√ãm
 *
√ãm
;

428 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

429  -
NLE_NOMEM
;

431 i‡(
√ãm
->
qnm_mask
 & 
SCH_NETEM_ATTR_RO_CORR
)

432  
√ãm
->
qnm_ro
.
nmro_c‹ªœti⁄
;

434  -
NLE_NOATTR
;

435 
	}
}

450 
	$π∆_√ãm_£t_c‹ru±i⁄_¥obabûôy
(
π∆_qdisc
 *
qdisc
, 
¥ob
)

452 
π∆_√ãm
 *
√ãm
;

454 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

455 
	`BUG
();

457 
√ãm
->
qnm_¸±
.
nm¸_¥obabûôy
 = 
¥ob
;

458 
√ãm
->
qnm_mask
 |
SCH_NETEM_ATTR_CORRUPT_PROB
;

459 
	}
}

466 
	$π∆_√ãm_gë_c‹ru±i⁄_¥obabûôy
(
π∆_qdisc
 *
qdisc
)

468 
π∆_√ãm
 *
√ãm
;

470 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

471 
	`BUG
();

473 i‡(
√ãm
->
qnm_mask
 & 
SCH_NETEM_ATTR_CORRUPT_PROB
)

474  
√ãm
->
qnm_¸±
.
nm¸_¥obabûôy
;

476  -
NLE_NOATTR
;

477 
	}
}

485 
	$π∆_√ãm_£t_c‹ru±i⁄_c‹ªœti⁄
(
π∆_qdisc
 *
qdisc
, 
¥ob
)

487 
π∆_√ãm
 *
√ãm
;

489 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

490 
	`BUG
();

492 
√ãm
->
qnm_¸±
.
nm¸_c‹ªœti⁄
 = 
¥ob
;

493 
√ãm
->
qnm_mask
 |
SCH_NETEM_ATTR_CORRUPT_CORR
;

494 
	}
}

501 
	$π∆_√ãm_gë_c‹ru±i⁄_c‹ªœti⁄
(
π∆_qdisc
 *
qdisc
)

503 
π∆_√ãm
 *
√ãm
;

505 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

506 
	`BUG
();

508 i‡(
√ãm
->
qnm_mask
 & 
SCH_NETEM_ATTR_CORRUPT_CORR
)

509  
√ãm
->
qnm_¸±
.
nm¸_c‹ªœti⁄
;

511  -
NLE_NOATTR
;

512 
	}
}

527 
	$π∆_√ãm_£t_loss
(
π∆_qdisc
 *
qdisc
, 
¥ob
)

529 
π∆_√ãm
 *
√ãm
;

531 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

532 
	`BUG
();

534 
√ãm
->
qnm_loss
 = 
¥ob
;

535 
√ãm
->
qnm_mask
 |
SCH_NETEM_ATTR_LOSS
;

536 
	}
}

543 
	$π∆_√ãm_gë_loss
(
π∆_qdisc
 *
qdisc
)

545 
π∆_√ãm
 *
√ãm
;

547 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

548 
	`BUG
();

550 i‡(
√ãm
->
qnm_mask
 & 
SCH_NETEM_ATTR_LOSS
)

551  
√ãm
->
qnm_loss
;

553  -
NLE_NOATTR
;

554 
	}
}

562 
	$π∆_√ãm_£t_loss_c‹ªœti⁄
(
π∆_qdisc
 *
qdisc
, 
¥ob
)

564 
π∆_√ãm
 *
√ãm
;

566 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

567 
	`BUG
();

569 
√ãm
->
qnm_c‹r
.
nmc_loss
 = 
¥ob
;

570 
√ãm
->
qnm_mask
 |
SCH_NETEM_ATTR_LOSS_CORR
;

571 
	}
}

578 
	$π∆_√ãm_gë_loss_c‹ªœti⁄
(
π∆_qdisc
 *
qdisc
)

580 
π∆_√ãm
 *
√ãm
;

582 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

583 
	`BUG
();

585 i‡(
√ãm
->
qnm_mask
 & 
SCH_NETEM_ATTR_LOSS_CORR
)

586  
√ãm
->
qnm_c‹r
.
nmc_loss
;

588  -
NLE_NOATTR
;

589 
	}
}

604 
	$π∆_√ãm_£t_du∂iˇã
(
π∆_qdisc
 *
qdisc
, 
¥ob
)

606 
π∆_√ãm
 *
√ãm
;

608 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

609 
	`BUG
();

611 
√ãm
->
qnm_du∂iˇã
 = 
¥ob
;

612 
√ãm
->
qnm_mask
 |
SCH_NETEM_ATTR_DUPLICATE
;

613 
	}
}

620 
	$π∆_√ãm_gë_du∂iˇã
(
π∆_qdisc
 *
qdisc
)

622 
π∆_√ãm
 *
√ãm
;

624 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

625 
	`BUG
();

627 i‡(
√ãm
->
qnm_mask
 & 
SCH_NETEM_ATTR_DUPLICATE
)

628  
√ãm
->
qnm_du∂iˇã
;

630  -
NLE_NOATTR
;

631 
	}
}

639 
	$π∆_√ãm_£t_du∂iˇã_c‹ªœti⁄
(
π∆_qdisc
 *
qdisc
, 
¥ob
)

641 
π∆_√ãm
 *
√ãm
;

643 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

644 
	`BUG
();

646 
√ãm
->
qnm_c‹r
.
nmc_du∂iˇã
 = 
¥ob
;

647 
√ãm
->
qnm_mask
 |
SCH_NETEM_ATTR_DUP_CORR
;

648 
	}
}

655 
	$π∆_√ãm_gë_du∂iˇã_c‹ªœti⁄
(
π∆_qdisc
 *
qdisc
)

657 
π∆_√ãm
 *
√ãm
;

659 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

660 
	`BUG
();

662 i‡(
√ãm
->
qnm_mask
 & 
SCH_NETEM_ATTR_DUP_CORR
)

663  
√ãm
->
qnm_c‹r
.
nmc_du∂iˇã
;

665  -
NLE_NOATTR
;

666 
	}
}

681 
	$π∆_√ãm_£t_dñay
(
π∆_qdisc
 *
qdisc
, 
dñay
)

683 
π∆_√ãm
 *
√ãm
;

685 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

686 
	`BUG
();

688 
√ãm
->
qnm_œãncy
 = 
	`∆_us2ticks
(
dñay
);

689 
√ãm
->
qnm_mask
 |
SCH_NETEM_ATTR_LATENCY
;

690 
	}
}

697 
	$π∆_√ãm_gë_dñay
(
π∆_qdisc
 *
qdisc
)

699 
π∆_√ãm
 *
√ãm
;

701 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

702 
	`BUG
();

704 i‡(
√ãm
->
qnm_mask
 & 
SCH_NETEM_ATTR_LATENCY
)

705  
	`∆_ticks2us
(
√ãm
->
qnm_œãncy
);

707  -
NLE_NOATTR
;

708 
	}
}

716 
	$π∆_√ãm_£t_jôãr
(
π∆_qdisc
 *
qdisc
, 
jôãr
)

718 
π∆_√ãm
 *
√ãm
;

720 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

721 
	`BUG
();

723 
√ãm
->
qnm_jôãr
 = 
	`∆_us2ticks
(
jôãr
);

724 
√ãm
->
qnm_mask
 |
SCH_NETEM_ATTR_JITTER
;

725 
	}
}

732 
	$π∆_√ãm_gë_jôãr
(
π∆_qdisc
 *
qdisc
)

734 
π∆_√ãm
 *
√ãm
;

736 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

737 
	`BUG
();

739 i‡(
√ãm
->
qnm_mask
 & 
SCH_NETEM_ATTR_JITTER
)

740  
	`∆_ticks2us
(
√ãm
->
qnm_jôãr
);

742  -
NLE_NOATTR
;

743 
	}
}

750 
	$π∆_√ãm_£t_dñay_c‹ªœti⁄
(
π∆_qdisc
 *
qdisc
, 
¥ob
)

752 
π∆_√ãm
 *
√ãm
;

754 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

755 
	`BUG
();

757 
√ãm
->
qnm_c‹r
.
nmc_dñay
 = 
¥ob
;

758 
√ãm
->
qnm_mask
 |
SCH_NETEM_ATTR_DELAY_CORR
;

759 
	}
}

766 
	$π∆_√ãm_gë_dñay_c‹ªœti⁄
(
π∆_qdisc
 *
qdisc
)

768 
π∆_√ãm
 *
√ãm
;

770 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

771 
	`BUG
();

773 i‡(
√ãm
->
qnm_mask
 & 
SCH_NETEM_ATTR_DELAY_CORR
)

774  
√ãm
->
qnm_c‹r
.
nmc_dñay
;

776  -
NLE_NOATTR
;

777 
	}
}

784 
	$π∆_√ãm_gë_dñay_di°ributi⁄_size
(
π∆_qdisc
 *
qdisc
)

786 
π∆_√ãm
 *
√ãm
;

788 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

789 
	`BUG
();

791 i‡(
√ãm
->
qnm_mask
 & 
SCH_NETEM_ATTR_DIST
)

792  
√ãm
->
qnm_di°
.
di°_size
;

794  -
NLE_NOATTR
;

795 
	}
}

803 
	$π∆_√ãm_gë_dñay_di°ributi⁄
(
π∆_qdisc
 *
qdisc
, 
öt16_t
 **
di°_±r
)

805 
π∆_√ãm
 *
√ãm
;

807 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

808 
	`BUG
();

810 i‡(
√ãm
->
qnm_mask
 & 
SCH_NETEM_ATTR_DIST
) {

811 *
di°_±r
 = 
√ãm
->
qnm_di°
.
di°_d©a
;

814  -
NLE_NOATTR
;

815 
	}
}

823 
	$π∆_√ãm_£t_dñay_di°ributi⁄
(
π∆_qdisc
 *
qdisc
, c⁄° *
di°_ty≥
) {

824 
π∆_√ãm
 *
√ãm
;

826 i‡(!(
√ãm
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

827 
	`BUG
();

829 
FILE
 *
f
;

830 
n
 = 0;

831 
size_t
 
i
;

832 
size_t
 
Àn
 = 2048;

833 *
löe
;

834 
«me
[
NAME_MAX
];

835 
di°_suffix
[] = ".dist";

838 *
ã°_suffix
 = 
	`°r°r
(
di°_ty≥
, 
di°_suffix
);

839 i‡(
ã°_suffix
 !
NULL
 && 
	`°æí
(test_suffix) == 5)

840 
	`°r˝y
(
di°_suffix
, "");

843 *
ã°_∑th
[] = { "", "./", "/usr/lib/tc/", "/usr/local/lib/tc/" };

845 
i
 = 0; i < 
	`ARRAY_SIZE
(
ã°_∑th
); i++) {

846 
	`¢¥ötf
(
«me
, 
NAME_MAX
, "%s%s%s", 
ã°_∑th
[
i
], 
di°_ty≥
, 
di°_suffix
);

847 i‡((
f
 = 
	`f›í
(
«me
, "r")))

851 i‡–
f
 =
NULL
 )

852  -
	`∆_sy£º2∆îr
(
î∫o
);

854 
√ãm
->
qnm_di°
.
di°_d©a
 = (
öt16_t
 *Ë
	`ˇŒoc
 (
MAXDIST
, (int16_t));

856 
löe
 = (*Ë
	`ˇŒoc
 ((), 
Àn
 + 1);

858 
	`gëlöe
(&
löe
, &
Àn
, 
f
) != -1) {

859 *
p
, *
ídp
;

861 i‡(*
löe
 == '\n' || *line == '#')

864 
p
 = 
löe
; ;Ö = 
ídp
) {

865 
x
 = 
	`°πﬁ
(
p
, &
ídp
, 0);

866 i‡(
ídp
 =
p
) ;

868 i‡(
n
 >
MAXDIST
) {

869 
	`‰ì
(
löe
);

870 
	`f˛o£
(
f
);

871  -
NLE_INVAL
;

873 
√ãm
->
qnm_di°
.
di°_d©a
[
n
++] = 
x
;

877 
	`‰ì
(
löe
);

879 
√ãm
->
qnm_di°
.
di°_size
 = 
n
;

880 
√ãm
->
qnm_mask
 |
SCH_NETEM_ATTR_DIST
;

882 
	`f˛o£
(
f
);

884 
	}
}

888 
π∆_tc_›s
 
	g√ãm_›s
 = {

889 .
to_köd
 = "netem",

890 .
	gto_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

891 .
	gto_size
 = (
π∆_√ãm
),

892 .
	gto_msg_∑r£r
 = 
√ãm_msg_∑r£r
,

893 .
	gto_‰ì_d©a
 = 
√ãm_‰ì_d©a
,

894 .
	gto_dump
[
NL_DUMP_LINE
] = 
√ãm_dump_löe
,

895 .
	gto_msg_fûl_øw
 = 
√ãm_msg_fûl_øw
,

898 
__öô
 
	$√ãm_öô
()

900 
	`π∆_tc_ªgi°î
(&
√ãm_›s
);

901 
	}
}

903 
__exô
 
	$√ãm_exô
()

905 
	`π∆_tc_uƒegi°î
(&
√ãm_›s
);

906 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/qdisc/plug.c

63 
	~<√éök-¥iv©e/√éök.h
>

64 
	~<√éök-¥iv©e/tc.h
>

65 
	~<√éök/√éök.h
>

66 
	~<√éök/utûs.h
>

67 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

68 
	~<√éök/rouã/qdisc/∂ug.h
>

70 
	$∂ug_msg_fûl
(
π∆_tc
 *
tc
, *
d©a
, 
∆_msg
 *
msg
)

72 
π∆_∂ug
 *
∂ug
 = 
d©a
;

73 
tc_∂ug_q›t
 
›ts
;

75 i‡(!
∂ug
)

76  -
NLE_INVAL
;

78 
›ts
.
a˘i⁄
 = 
∂ug
->action;

79 
›ts
.
limô
 = 
∂ug
->limit;

81  
	`∆msg_≠≥nd
(
msg
, &
›ts
, (›ts), 
NL_DONTPAD
);

82 
	}
}

94 
	$π∆_qdisc_∂ug_buf„r
(
π∆_qdisc
 *
qdisc
)

96 
π∆_∂ug
 *
∂ug
;

98 i‡(!(
∂ug
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

99  -
NLE_NOMEM
;

101 
∂ug
->
a˘i⁄
 = 
TCQ_PLUG_BUFFER
;

103 
	}
}

111 
	$π∆_qdisc_∂ug_ªÀa£_⁄e
(
π∆_qdisc
 *
qdisc
)

113 
π∆_∂ug
 *
∂ug
;

115 i‡(!(
∂ug
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

116  -
NLE_NOMEM
;

118 
∂ug
->
a˘i⁄
 = 
TCQ_PLUG_RELEASE_ONE
;

120 
	}
}

128 
	$π∆_qdisc_∂ug_ªÀa£_ödeföôe
(
π∆_qdisc
 *
qdisc
)

130 
π∆_∂ug
 *
∂ug
;

132 i‡(!(
∂ug
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

133  -
NLE_NOMEM
;

135 
∂ug
->
a˘i⁄
 = 
TCQ_PLUG_RELEASE_INDEFINITE
;

137 
	}
}

145 
	$π∆_qdisc_∂ug_£t_limô
(
π∆_qdisc
 *
qdisc
, 
limô
)

147 
π∆_∂ug
 *
∂ug
;

149 i‡(!(
∂ug
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

150  -
NLE_NOMEM
;

152 
∂ug
->
a˘i⁄
 = 
TCQ_PLUG_LIMIT
;

153 
∂ug
->
limô
 =Üimit;

156 
	}
}

160 
π∆_tc_›s
 
	g∂ug_›s
 = {

161 .
to_köd
 = "plug",

162 .
	gto_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

163 .
	gto_size
 = (
π∆_∂ug
),

164 .
	gto_msg_fûl
 = 
∂ug_msg_fûl
,

167 
__öô
 
	$∂ug_öô
()

169 
	`π∆_tc_ªgi°î
(&
∂ug_›s
);

170 
	}
}

172 
__exô
 
	$∂ug_exô
()

174 
	`π∆_tc_uƒegi°î
(&
∂ug_›s
);

175 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/qdisc/prio.c

29 
	~<√éök-¥iv©e/√éök.h
>

30 
	~<√éök-¥iv©e/tc.h
>

31 
	~<√éök/√éök.h
>

32 
	~<√éök/utûs.h
>

33 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

34 
	~<√éök/rouã/qdisc.h
>

35 
	~<√éök/rouã/qdisc/¥io.h
>

38 
	#SCH_PRIO_ATTR_BANDS
 1

	)

39 
	#SCH_PRIO_ATTR_PRIOMAP
 2

	)

42 
	$¥io_msg_∑r£r
(
π∆_tc
 *
tc
, *
d©a
)

44 
π∆_¥io
 *
¥io
 = 
d©a
;

45 
tc_¥io_q›t
 *
›t
;

47 i‡(
tc
->
tc_›ts
->
d_size
 < (*
›t
))

48  -
NLE_INVAL
;

50 
›t
 = (
tc_¥io_q›t
 *Ë
tc
->
tc_›ts
->
d_d©a
;

51 
¥io
->
qp_b™ds
 = 
›t
->
b™ds
;

52 
	`mem˝y
(
¥io
->
qp_¥iom≠
, 
›t
->
¥iom≠
, (prio->qp_priomap));

53 
¥io
->
qp_mask
 = (
SCH_PRIO_ATTR_BANDS
 | 
SCH_PRIO_ATTR_PRIOMAP
);

56 
	}
}

58 
	$¥io_dump_löe
(
π∆_tc
 *
tc
, *
d©a
,

59 
∆_dump_∑øms
 *
p
)

61 
π∆_¥io
 *
¥io
 = 
d©a
;

63 i‡(
¥io
)

64 
	`∆_dump
(
p
, " b™d†%u", 
¥io
->
qp_b™ds
);

65 
	}
}

67 
	$¥io_dump_dëaûs
(
π∆_tc
 *
tc
, *
d©a
,

68 
∆_dump_∑øms
 *
p
)

70 
π∆_¥io
 *
¥io
 = 
d©a
;

71 
i
, 
hp
;

73 i‡(!
¥io
)

76 
	`∆_dump
(
p
, "priomap [");

78 
i
 = 0; i <
TC_PRIO_MAX
; i++)

79 
	`∆_dump
(
p
, "%u%s", 
¥io
->
qp_¥iom≠
[
i
],

80 
i
 < 
TC_PRIO_MAX
 ? " " : "");

82 
	`∆_dump
(
p
, "]\n");

83 
	`∆_√w_löe
(
p
);

85 
hp
 = (((
TC_PRIO_MAX
/2) + 1) & ~1);

87 
i
 = 0; i < 
hp
; i++) {

88 
a
[32];

89 
	`∆_dump
(
p
, " %18s => %u",

90 
	`π∆_¥io2°r
(
i
, 
a
, (a)),

91 
¥io
->
qp_¥iom≠
[
i
]);

92 i‡(
hp
+
i
 <
TC_PRIO_MAX
) {

93 
	`∆_dump
(
p
, " %18s => %u",

94 
	`π∆_¥io2°r
(
hp
+
i
, 
a
, (a)),

95 
¥io
->
qp_¥iom≠
[
hp
+
i
]);

96 i‡(
i
 < (
hp
 - 1)) {

97 
	`∆_dump
(
p
, "\n");

98 
	`∆_√w_löe
(
p
);

102 
	}
}

104 
	$¥io_msg_fûl
(
π∆_tc
 *
tc
, *
d©a
, 
∆_msg
 *
msg
)

106 
π∆_¥io
 *
¥io
 = 
d©a
;

107 
tc_¥io_q›t
 
›ts
;

109 i‡(!
¥io
 || !’rio->
qp_mask
 & 
SCH_PRIO_ATTR_PRIOMAP
))

110 
	`BUG
();

112 
›ts
.
b™ds
 = 
¥io
->
qp_b™ds
;

113 
	`mem˝y
(
›ts
.
¥iom≠
, 
¥io
->
qp_¥iom≠
, (opts.priomap));

115  
	`∆msg_≠≥nd
(
msg
, &
›ts
, (›ts), 
NL_DONTPAD
);

116 
	}
}

129 
	$π∆_qdisc_¥io_£t_b™ds
(
π∆_qdisc
 *
qdisc
, 
b™ds
)

131 
π∆_¥io
 *
¥io
;

133 i‡(!(
¥io
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

134 
	`BUG
();

136 
¥io
->
qp_b™ds
 = 
b™ds
;

137 
¥io
->
qp_mask
 |
SCH_PRIO_ATTR_BANDS
;

138 
	}
}

145 
	$π∆_qdisc_¥io_gë_b™ds
(
π∆_qdisc
 *
qdisc
)

147 
π∆_¥io
 *
¥io
;

149 i‡(!(
¥io
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

150 
	`BUG
();

152 i‡(
¥io
->
qp_mask
 & 
SCH_PRIO_ATTR_BANDS
)

153  
¥io
->
qp_b™ds
;

155  -
NLE_NOMEM
;

156 
	}
}

165 
	$π∆_qdisc_¥io_£t_¥iom≠
(
π∆_qdisc
 *
qdisc
, 
uöt8_t
 
¥iom≠
[],

166 
Àn
)

168 
π∆_¥io
 *
¥io
;

169 
i
;

171 i‡(!(
¥io
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

172 
	`BUG
();

174 i‡(!(
¥io
->
qp_mask
 & 
SCH_PRIO_ATTR_BANDS
))

175  -
NLE_MISSING_ATTR
;

177 i‡((
Àn
 / (
uöt8_t
)Ë> (
TC_PRIO_MAX
+1))

178  -
NLE_RANGE
;

180 
i
 = 0; i <
TC_PRIO_MAX
; i++) {

181 i‡(
¥iom≠
[
i
] > 
¥io
->
qp_b™ds
)

182  -
NLE_RANGE
;

185 
	`mem˝y
(
¥io
->
qp_¥iom≠
, 
¥iom≠
, 
Àn
);

186 
¥io
->
qp_mask
 |
SCH_PRIO_ATTR_PRIOMAP
;

189 
	}
}

197 
uöt8_t
 *
	$π∆_qdisc_¥io_gë_¥iom≠
(
π∆_qdisc
 *
qdisc
)

199 
π∆_¥io
 *
¥io
;

201 i‡(!(
¥io
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

202 
	`BUG
();

204 i‡(
¥io
->
qp_mask
 & 
SCH_PRIO_ATTR_PRIOMAP
)

205  
¥io
->
qp_¥iom≠
;

207  
NULL
;

208 
	}
}

217 c⁄° 
å™s_tbl
 
	g¥ios
[] = {

218 
__ADD
(
TC_PRIO_BESTEFFORT
,
be°eff‹t
)

219 
__ADD
(
TC_PRIO_FILLER
,
fûÀr
)

220 
__ADD
(
TC_PRIO_BULK
,
bulk
)

221 
__ADD
(
TC_PRIO_INTERACTIVE_BULK
,
öãø˘ive_bulk
)

222 
__ADD
(
TC_PRIO_INTERACTIVE
,
öãø˘ive
)

223 
__ADD
(
TC_PRIO_CONTROL
,
c⁄åﬁ
)

237 * 
	$π∆_¥io2°r
(
¥io
, *
buf
, 
size_t
 
size
)

239  
	`__ty≥2°r
(
¥io
, 
buf
, 
size
, 
¥ios
, 
	`ARRAY_SIZE
(prios));

240 
	}
}

251 
	$π∆_°r2¥io
(c⁄° *
«me
)

253  
	`__°r2ty≥
(
«me
, 
¥ios
, 
	`ARRAY_SIZE
(prios));

254 
	}
}

258 
π∆_tc_›s
 
	g¥io_›s
 = {

259 .
to_köd
 = "prio",

260 .
	gto_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

261 .
	gto_size
 = (
π∆_¥io
),

262 .
	gto_msg_∑r£r
 = 
¥io_msg_∑r£r
,

263 .
	gto_dump
 = {

264 [
NL_DUMP_LINE
] = 
¥io_dump_löe
,

265 [
NL_DUMP_DETAILS
] = 
¥io_dump_dëaûs
,

267 .
	gto_msg_fûl
 = 
¥io_msg_fûl
,

270 
π∆_tc_›s
 
	gpfifo_Á°_›s
 = {

271 .
to_köd
 = "pfifo_fast",

272 .
	gto_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

273 .
	gto_size
 = (
π∆_¥io
),

274 .
	gto_msg_∑r£r
 = 
¥io_msg_∑r£r
,

275 .
	gto_dump
 = {

276 [
NL_DUMP_LINE
] = 
¥io_dump_löe
,

277 [
NL_DUMP_DETAILS
] = 
¥io_dump_dëaûs
,

279 .
	gto_msg_fûl
 = 
¥io_msg_fûl
,

282 
__öô
 
	$¥io_öô
()

284 
	`π∆_tc_ªgi°î
(&
¥io_›s
);

285 
	`π∆_tc_ªgi°î
(&
pfifo_Á°_›s
);

286 
	}
}

288 
__exô
 
	$¥io_exô
()

290 
	`π∆_tc_uƒegi°î
(&
¥io_›s
);

291 
	`π∆_tc_uƒegi°î
(&
pfifo_Á°_›s
);

292 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/qdisc/red.c

19 
	~<√éök-¥iv©e/√éök.h
>

20 
	~<√éök-¥iv©e/tc.h
>

21 
	~<√éök/√éök.h
>

22 
	~<√éök/utûs.h
>

23 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

24 
	~<√éök/rouã/qdisc.h
>

25 
	~<√éök/rouã/qdisc/ªd.h
>

28 
	#RED_ATTR_LIMIT
 0x01

	)

29 
	#RED_ATTR_QTH_MIN
 0x02

	)

30 
	#RED_ATTR_QTH_MAX
 0x04

	)

31 
	#RED_ATTR_FLAGS
 0x08

	)

32 
	#RED_ATTR_WLOG
 0x10

	)

33 
	#RED_ATTR_PLOG
 0x20

	)

34 
	#RED_ATTR_SCELL_LOG
 0x40

	)

37 
∆a_pﬁicy
 
	gªd_pﬁicy
[
TCA_RED_MAX
+1] = {

38 [
TCA_RED_PARMS
] = { .
möÀn
 = (
tc_ªd_q›t
) },

41 
	$ªd_msg_∑r£r
(
π∆_tc
 *
tc
, *
d©a
)

43 
∆©å
 *
tb
[
TCA_RED_MAX
+1];

44 
π∆_ªd
 *
ªd
 = 
d©a
;

45 
tc_ªd_q›t
 *
›ts
;

46 
îr
;

48 i‡(!(
tc
->
˚_mask
 & 
TCA_ATTR_OPTS
))

51 
îr
 = 
	`tˇ_∑r£
(
tb
, 
TCA_RED_MAX
, 
tc
, 
ªd_pﬁicy
);

52 i‡(
îr
 < 0)

53  
îr
;

55 i‡(!
tb
[
TCA_RED_PARMS
])

56  -
NLE_MISSING_ATTR
;

58 
›ts
 = 
	`∆a_d©a
(
tb
[
TCA_RED_PARMS
]);

60 
ªd
->
qr_limô
 = 
›ts
->
limô
;

61 
ªd
->
qr_qth_mö
 = 
›ts
->
qth_mö
;

62 
ªd
->
qr_qth_max
 = 
›ts
->
qth_max
;

63 
ªd
->
qr_Êags
 = 
›ts
->
Êags
;

64 
ªd
->
qr_wlog
 = 
›ts
->
Wlog
;

65 
ªd
->
qr_∂og
 = 
›ts
->
Plog
;

66 
ªd
->
qr_s˚Œ_log
 = 
›ts
->
S˚Œ_log
;

68 
ªd
->
qr_mask
 = (
RED_ATTR_LIMIT
 | 
RED_ATTR_QTH_MIN
 | 
RED_ATTR_QTH_MAX
 |

69 
RED_ATTR_FLAGS
 | 
RED_ATTR_WLOG
 | 
RED_ATTR_PLOG
 |

70 
RED_ATTR_SCELL_LOG
);

73 
	}
}

75 
	$ªd_dump_löe
(
π∆_tc
 *
tc
, *
d©a
,

76 
∆_dump_∑øms
 *
p
)

78 
π∆_ªd
 *
ªd
 = 
d©a
;

80 i‡(
ªd
) {

83 
	}
}

85 
	$ªd_dump_dëaûs
(
π∆_tc
 *
tc
, *
d©a
,

86 
∆_dump_∑øms
 *
p
)

88 
π∆_ªd
 *
ªd
 = 
d©a
;

90 i‡(
ªd
) {

93 
	}
}

95 
	$ªd_dump_°©s
(
π∆_tc
 *
tc
, *
d©a
,

96 
∆_dump_∑øms
 *
p
)

98 
π∆_ªd
 *
ªd
 = 
d©a
;

100 i‡(
ªd
) {

103 
	}
}

105 
	$ªd_msg_fûl
(
π∆_tc
 *
tc
, *
d©a
, 
∆_msg
 *
msg
)

107 
π∆_ªd
 *
ªd
 = 
d©a
;

109 i‡(!
ªd
)

110 
	`BUG
();

113 
	`mem£t
(&
›ts
, 0, (opts));

114 
›ts
.
qu™tum
 = 
sfq
->
qs_qu™tum
;

115 
›ts
.
≥πurb_≥riod
 = 
sfq
->
qs_≥πurb
;

116 
›ts
.
limô
 = 
sfq
->
qs_limô
;

118 i‡(
	`∆msg_≠≥nd
(
msg
, &
›ts
, (›ts), 
NL_DONTPAD
) < 0)

119 
îrout
;

122  -
NLE_OPNOTSUPP
;

123 
	}
}

136 
	$π∆_ªd_£t_limô
(
π∆_qdisc
 *
qdisc
, 
limô
)

138 
π∆_ªd
 *
ªd
;

140 i‡(!(
ªd
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

141 
	`BUG
();

143 
ªd
->
qr_limô
 = 
limô
;

144 
ªd
->
qr_mask
 |
RED_ATTR_LIMIT
;

145 
	}
}

152 
	$π∆_ªd_gë_limô
(
π∆_qdisc
 *
qdisc
)

154 
π∆_ªd
 *
ªd
;

156 i‡(!(
ªd
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

157 
	`BUG
();

159 i‡(
ªd
->
qr_mask
 & 
RED_ATTR_LIMIT
)

160  
ªd
->
qr_limô
;

162  -
NLE_NOATTR
;

163 
	}
}

167 
π∆_tc_›s
 
	gªd_›s
 = {

168 .
to_köd
 = "red",

169 .
	gto_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

170 .
	gto_size
 = (
π∆_ªd
),

171 .
	gto_msg_∑r£r
 = 
ªd_msg_∑r£r
,

172 .
	gto_dump
 = {

173 [
NL_DUMP_LINE
] = 
ªd_dump_löe
,

174 [
NL_DUMP_DETAILS
] = 
ªd_dump_dëaûs
,

175 [
NL_DUMP_STATS
] = 
ªd_dump_°©s
,

177 .
	gto_msg_fûl
 = 
ªd_msg_fûl
,

180 
__öô
 
	$ªd_öô
()

182 
	`π∆_tc_ªgi°î
(&
ªd_›s
);

183 
	}
}

185 
__exô
 
	$ªd_exô
()

187 
	`π∆_tc_uƒegi°î
(&
ªd_›s
);

188 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/qdisc/sfq.c

26 
	~<√éök-¥iv©e/√éök.h
>

27 
	~<√éök-¥iv©e/tc.h
>

28 
	~<√éök/√éök.h
>

29 
	~<√éök/utûs.h
>

30 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

31 
	~<√éök/rouã/qdisc.h
>

32 
	~<√éök/rouã/qdisc/sfq.h
>

35 
	#SCH_SFQ_ATTR_QUANTUM
 0x01

	)

36 
	#SCH_SFQ_ATTR_PERTURB
 0x02

	)

37 
	#SCH_SFQ_ATTR_LIMIT
 0x04

	)

38 
	#SCH_SFQ_ATTR_DIVISOR
 0x08

	)

39 
	#SCH_SFQ_ATTR_FLOWS
 0x10

	)

42 
	$sfq_msg_∑r£r
(
π∆_tc
 *
tc
, *
d©a
)

44 
π∆_sfq
 *
sfq
 = 
d©a
;

45 
tc_sfq_q›t
 *
›ts
;

47 i‡(!(
tc
->
˚_mask
 & 
TCA_ATTR_OPTS
))

50 i‡(
tc
->
tc_›ts
->
d_size
 < (*
›ts
))

51  -
NLE_INVAL
;

53 
›ts
 = (
tc_sfq_q›t
 *Ë
tc
->
tc_›ts
->
d_d©a
;

55 
sfq
->
qs_qu™tum
 = 
›ts
->
qu™tum
;

56 
sfq
->
qs_≥πurb
 = 
›ts
->
≥πurb_≥riod
;

57 
sfq
->
qs_limô
 = 
›ts
->
limô
;

58 
sfq
->
qs_divis‹
 = 
›ts
->
divis‹
;

59 
sfq
->
qs_Êows
 = 
›ts
->
Êows
;

61 
sfq
->
qs_mask
 = (
SCH_SFQ_ATTR_QUANTUM
 | 
SCH_SFQ_ATTR_PERTURB
 |

62 
SCH_SFQ_ATTR_LIMIT
 | 
SCH_SFQ_ATTR_DIVISOR
 |

63 
SCH_SFQ_ATTR_FLOWS
);

66 
	}
}

68 
	$sfq_dump_löe
(
π∆_tc
 *
tc
, *
d©a
,

69 
∆_dump_∑øms
 *
p
)

71 
π∆_sfq
 *
sfq
 = 
d©a
;

73 i‡(
sfq
)

74 
	`∆_dump
(
p
, " qu™tum %uÖîturb %us", 
sfq
->
qs_qu™tum
,

75 
sfq
->
qs_≥πurb
);

76 
	}
}

78 
	$sfq_dump_dëaûs
(
π∆_tc
 *
tc
, *
d©a
,

79 
∆_dump_∑øms
 *
p
)

81 
π∆_sfq
 *
sfq
 = 
d©a
;

83 i‡(
sfq
)

84 
	`∆_dump
(
p
, "limit %u divisor %u",

85 
sfq
->
qs_limô
, sfq->
qs_divis‹
);

86 
	}
}

88 
	$sfq_msg_fûl
(
π∆_tc
 *
tc
, *
d©a
, 
∆_msg
 *
msg
)

90 
π∆_sfq
 *
sfq
 = 
d©a
;

91 
tc_sfq_q›t
 
›ts
 = {0};

93 i‡(!
sfq
)

94 
	`BUG
();

96 
›ts
.
qu™tum
 = 
sfq
->
qs_qu™tum
;

97 
›ts
.
≥πurb_≥riod
 = 
sfq
->
qs_≥πurb
;

98 
›ts
.
limô
 = 
sfq
->
qs_limô
;

100  
	`∆msg_≠≥nd
(
msg
, &
›ts
, (›ts), 
NL_DONTPAD
);

101 
	}
}

114 
	$π∆_sfq_£t_qu™tum
(
π∆_qdisc
 *
qdisc
, 
qu™tum
)

116 
π∆_sfq
 *
sfq
;

118 i‡(!(
sfq
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

119 
	`BUG
();

121 
sfq
->
qs_qu™tum
 = 
qu™tum
;

122 
sfq
->
qs_mask
 |
SCH_SFQ_ATTR_QUANTUM
;

123 
	}
}

130 
	$π∆_sfq_gë_qu™tum
(
π∆_qdisc
 *
qdisc
)

132 
π∆_sfq
 *
sfq
;

134 i‡(!(
sfq
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

135 
	`BUG
();

137 i‡(
sfq
->
qs_mask
 & 
SCH_SFQ_ATTR_QUANTUM
)

138  
sfq
->
qs_qu™tum
;

140  -
NLE_NOATTR
;

141 
	}
}

149 
	$π∆_sfq_£t_limô
(
π∆_qdisc
 *
qdisc
, 
limô
)

151 
π∆_sfq
 *
sfq
;

153 i‡(!(
sfq
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

154 
	`BUG
();

156 
sfq
->
qs_limô
 = 
limô
;

157 
sfq
->
qs_mask
 |
SCH_SFQ_ATTR_LIMIT
;

158 
	}
}

165 
	$π∆_sfq_gë_limô
(
π∆_qdisc
 *
qdisc
)

167 
π∆_sfq
 *
sfq
;

169 i‡(!(
sfq
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

170 
	`BUG
();

172 i‡(
sfq
->
qs_mask
 & 
SCH_SFQ_ATTR_LIMIT
)

173  
sfq
->
qs_limô
;

175  -
NLE_NOATTR
;

176 
	}
}

185 
	$π∆_sfq_£t_≥πurb
(
π∆_qdisc
 *
qdisc
, 
≥πurb
)

187 
π∆_sfq
 *
sfq
;

189 i‡(!(
sfq
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

190 
	`BUG
();

192 
sfq
->
qs_≥πurb
 = 
≥πurb
;

193 
sfq
->
qs_mask
 |
SCH_SFQ_ATTR_PERTURB
;

194 
	}
}

201 
	$π∆_sfq_gë_≥πurb
(
π∆_qdisc
 *
qdisc
)

203 
π∆_sfq
 *
sfq
;

205 i‡(!(
sfq
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

206 
	`BUG
();

208 i‡(
sfq
->
qs_mask
 & 
SCH_SFQ_ATTR_PERTURB
)

209  
sfq
->
qs_≥πurb
;

211  -
NLE_NOATTR
;

212 
	}
}

219 
	$π∆_sfq_gë_divis‹
(
π∆_qdisc
 *
qdisc
)

221 
π∆_sfq
 *
sfq
;

223 i‡(!(
sfq
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

224 
	`BUG
();

226 i‡(
sfq
->
qs_mask
 & 
SCH_SFQ_ATTR_DIVISOR
)

227  
sfq
->
qs_divis‹
;

229  -
NLE_NOATTR
;

230 
	}
}

234 
π∆_tc_›s
 
	gsfq_›s
 = {

235 .
to_köd
 = "sfq",

236 .
	gto_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

237 .
	gto_size
 = (
π∆_sfq
),

238 .
	gto_msg_∑r£r
 = 
sfq_msg_∑r£r
,

239 .
	gto_dump
 = {

240 [
NL_DUMP_LINE
] = 
sfq_dump_löe
,

241 [
NL_DUMP_DETAILS
] = 
sfq_dump_dëaûs
,

243 .
	gto_msg_fûl
 = 
sfq_msg_fûl
,

246 
__öô
 
	$sfq_öô
()

248 
	`π∆_tc_ªgi°î
(&
sfq_›s
);

249 
	}
}

251 
__exô
 
	$sfq_exô
()

253 
	`π∆_tc_uƒegi°î
(&
sfq_›s
);

254 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/qdisc/tbf.c

18 
	~<√éök-¥iv©e/√éök.h
>

19 
	~<√éök-¥iv©e/tc.h
>

20 
	~<√éök/√éök.h
>

21 
	~<√éök/ˇche.h
>

22 
	~<√éök/utûs.h
>

23 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

24 
	~<√éök/rouã/qdisc.h
>

25 
	~<√éök/rouã/˛ass.h
>

26 
	~<√éök/rouã/lök.h
>

27 
	~<√éök/rouã/qdisc/tbf.h
>

30 
	#TBF_ATTR_LIMIT
 0x01

	)

31 
	#TBF_ATTR_RATE
 0x02

	)

32 
	#TBF_ATTR_PEAKRATE
 0x10

	)

35 
∆a_pﬁicy
 
	gtbf_pﬁicy
[
TCA_TBF_MAX
+1] = {

36 [
TCA_TBF_PARMS
] = { .
möÀn
 = (
tc_tbf_q›t
) },

39 
	$tbf_msg_∑r£r
(
π∆_tc
 *
tc
, *
d©a
)

41 
∆©å
 *
tb
[
TCA_TBF_MAX
 + 1];

42 
π∆_tbf
 *
tbf
 = 
d©a
;

43 
îr
;

45 i‡((
îr
 = 
	`tˇ_∑r£
(
tb
, 
TCA_TBF_MAX
, 
tc
, 
tbf_pﬁicy
)) < 0)

46  
îr
;

48 i‡(
tb
[
TCA_TBF_PARMS
]) {

49 
tc_tbf_q›t
 
›ts
;

50 
bufsize
;

52 
	`∆a_mem˝y
(&
›ts
, 
tb
[
TCA_TBF_PARMS
], (opts));

53 
tbf
->
qt_limô
 = 
›ts
.
limô
;

55 
	`π∆_c›y_øã•ec
(&
tbf
->
qt_øã
, &
›ts
.
øã
);

56 
tbf
->
qt_øã_txtime
 = 
›ts
.
buf„r
;

57 
bufsize
 = 
	`π∆_tc_ˇlc_bufsize
(
	`∆_ticks2us
(
›ts
.
buf„r
),

58 
›ts
.
øã
.rate);

59 
tbf
->
qt_øã_buckë
 = 
bufsize
;

61 
	`π∆_c›y_øã•ec
(&
tbf
->
qt_≥akøã
, &
›ts
.
≥akøã
);

62 
tbf
->
qt_≥akøã_txtime
 = 
›ts
.
mtu
;

63 
bufsize
 = 
	`π∆_tc_ˇlc_bufsize
(
	`∆_ticks2us
(
›ts
.
mtu
),

64 
›ts
.
≥akøã
.
øã
);

65 
tbf
->
qt_≥akøã_buckë
 = 
bufsize
;

67 
	`π∆_tc_£t_mpu
(
tc
, 
tbf
->
qt_øã
.
rs_mpu
);

68 
	`π∆_tc_£t_ovîhód
(
tc
, 
tbf
->
qt_øã
.
rs_ovîhód
);

70 
tbf
->
qt_mask
 = (
TBF_ATTR_LIMIT
 | 
TBF_ATTR_RATE
 | 
TBF_ATTR_PEAKRATE
);

74 
	}
}

76 
	$tbf_dump_löe
(
π∆_tc
 *
tc
, *
d©a
,

77 
∆_dump_∑øms
 *
p
)

79 
r
, 
rbô
, 
lim
;

80 *
ru
, *
rubô
, *
limu
;

81 
π∆_tbf
 *
tbf
 = 
d©a
;

83 i‡(!
tbf
)

86 
r
 = 
	`∆_ˇn˚l_down_byãs
(
tbf
->
qt_øã
.
rs_øã
, &
ru
);

87 
rbô
 = 
	`∆_ˇn˚l_down_bôs
(
tbf
->
qt_øã
.
rs_øã
*8, &
rubô
);

88 
lim
 = 
	`∆_ˇn˚l_down_byãs
(
tbf
->
qt_limô
, &
limu
);

90 
	`∆_dump
(
p
, "Ñate %.2f%s/s (%.0f%s)Üimit %.2f%s",

91 
r
, 
ru
, 
rbô
, 
rubô
, 
lim
, 
limu
);

92 
	}
}

94 
	$tbf_dump_dëaûs
(
π∆_tc
 *
tc
, *
d©a
,

95 
∆_dump_∑øms
 *
p
)

97 
π∆_tbf
 *
tbf
 = 
d©a
;

99 i‡(!
tbf
)

103 *
bu
, *
cu
;

104 
bs
 = 
	`∆_ˇn˚l_down_byãs
(
tbf
->
qt_øã_buckë
, &
bu
);

105 
˛
 = 
	`∆_ˇn˚l_down_byãs
(1 << 
tbf
->
qt_øã
.
rs_˚Œ_log
,

106 &
cu
);

108 
	`∆_dump
(
p
, "rate-bucket-size %1.f%s "

110 
bs
, 
bu
, 
˛
, 
cu
);

114 i‡(
tbf
->
qt_mask
 & 
TBF_ATTR_PEAKRATE
) {

115 *
¥u
, *
¥bu
, *
bsu
, *
˛u
;

116 
¥
, 
¥b
, 
bs
, 
˛
;

118 
¥
 = 
	`∆_ˇn˚l_down_byãs
(
tbf
->
qt_≥akøã
.
rs_øã
, &
¥u
);

119 
¥b
 = 
	`∆_ˇn˚l_down_bôs
(
tbf
->
qt_≥akøã
.
rs_øã
 * 8, &
¥bu
);

120 
bs
 = 
	`∆_ˇn˚l_down_bôs
(
tbf
->
qt_≥akøã_buckë
, &
bsu
);

121 
˛
 = 
	`∆_ˇn˚l_down_bôs
(1 << 
tbf
->
qt_≥akøã
.
rs_˚Œ_log
,

122 &
˛u
);

124 
	`∆_dump_löe
(
p
, "Öeak-rate %.2f%s/s (%.0f%s) "

127 
¥
, 
¥u
, 
¥b
, 
¥bu
, 
bs
, 
bsu
, 
˛
, 
˛u
);

129 
	}
}

131 
	$tbf_msg_fûl
(
π∆_tc
 *
tc
, *
d©a
, 
∆_msg
 *
msg
)

133 
uöt32_t
 
πab
[
RTNL_TC_RTABLE_SIZE
], 
±ab
[RTNL_TC_RTABLE_SIZE];

134 
tc_tbf_q›t
 
›ts
;

135 
π∆_tbf
 *
tbf
 = 
d©a
;

136 
ªquúed
 = 
TBF_ATTR_RATE
 | 
TBF_ATTR_LIMIT
;

138 i‡((
tbf
->
qt_mask
 & 
ªquúed
) !=Ñequired)

139  -
NLE_MISSING_ATTR
;

141 
	`mem£t
(&
›ts
, 0, (opts));

142 
›ts
.
limô
 = 
tbf
->
qt_limô
;

143 
›ts
.
buf„r
 = 
tbf
->
qt_øã_txtime
;

145 
	`π∆_tc_buûd_øã_èbÀ
(
tc
, &
tbf
->
qt_øã
, 
πab
);

146 
	`π∆_rc›y_øã•ec
(&
›ts
.
øã
, &
tbf
->
qt_øã
);

148 i‡(
tbf
->
qt_mask
 & 
TBF_ATTR_PEAKRATE
) {

149 
›ts
.
mtu
 = 
tbf
->
qt_≥akøã_txtime
;

150 
	`π∆_tc_buûd_øã_èbÀ
(
tc
, &
tbf
->
qt_≥akøã
, 
±ab
);

151 
	`π∆_rc›y_øã•ec
(&
›ts
.
≥akøã
, &
tbf
->
qt_≥akøã
);

155 
	`NLA_PUT
(
msg
, 
TCA_TBF_PARMS
, (
›ts
), &opts);

156 
	`NLA_PUT
(
msg
, 
TCA_TBF_RTAB
, (
πab
),Ñtab);

158 i‡(
tbf
->
qt_mask
 & 
TBF_ATTR_PEAKRATE
)

159 
	`NLA_PUT
(
msg
, 
TCA_TBF_PTAB
, (
±ab
),Ötab);

163 
∆a_put_Áûuª
:

164  -
NLE_MSGSIZE
;

165 
	}
}

178 
	$π∆_qdisc_tbf_£t_limô
(
π∆_qdisc
 *
qdisc
, 
limô
)

180 
π∆_tbf
 *
tbf
;

182 i‡(!(
tbf
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

183 
	`BUG
();

185 
tbf
->
qt_limô
 = 
limô
;

186 
tbf
->
qt_mask
 |
TBF_ATTR_LIMIT
;

187 
	}
}

189 
ölöe
 
	$ˇlc_limô
(
π∆_øã•ec
 *
•ec
, 
œãncy
,

190 
buckë
)

192 
limô
;

194 
limô
 = (Ë
•ec
->
rs_øã
 * ((Ë
œãncy
 / 1000000.);

195 
limô
 +
buckë
;

197  
limô
;

198 
	}
}

218 
	$π∆_qdisc_tbf_£t_limô_by_œãncy
(
π∆_qdisc
 *
qdisc
, 
œãncy
)

220 
π∆_tbf
 *
tbf
;

221 
limô
, 
limô2
;

223 i‡(!(
tbf
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

224 
	`BUG
();

226 i‡(!(
tbf
->
qt_mask
 & 
TBF_ATTR_RATE
))

227  -
NLE_MISSING_ATTR
;

229 
limô
 = 
	`ˇlc_limô
(&
tbf
->
qt_øã
, 
œãncy
,Åbf->
qt_øã_buckë
);

231 i‡(
tbf
->
qt_mask
 & 
TBF_ATTR_PEAKRATE
) {

232 
limô2
 = 
	`ˇlc_limô
(&
tbf
->
qt_≥akøã
, 
œãncy
,

233 
tbf
->
qt_≥akøã_buckë
);

235 i‡(
limô2
 < 
limô
)

236 
limô
 = 
limô2
;

239 
	`π∆_qdisc_tbf_£t_limô
(
qdisc
, (Ë
limô
);

242 
	}
}

249 
	$π∆_qdisc_tbf_gë_limô
(
π∆_qdisc
 *
qdisc
)

251 
π∆_tbf
 *
tbf
;

253 i‡(!(
tbf
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

254 
	`BUG
();

256 i‡(
tbf
->
qt_mask
 & 
TBF_ATTR_LIMIT
)

257  
tbf
->
qt_limô
;

259  -
NLE_NOATTR
;

260 
	}
}

262 
ölöe
 
	$ˇlc_˚Œ_log
(
˚Œ
, 
buckë
)

264 
˚Œ
 = 
	`π∆_tc_ˇlc_˚Œ_log
(cell);

265  
˚Œ
;

266 
	}
}

276 
	$π∆_qdisc_tbf_£t_øã
(
π∆_qdisc
 *
qdisc
, 
øã
, 
buckë
,

277 
˚Œ
)

279 
π∆_tbf
 *
tbf
;

280 
˚Œ_log
;

282 i‡(!(
tbf
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

283 
	`BUG
();

285 i‡(!
˚Œ
)

286 
˚Œ_log
 = 
UINT8_MAX
;

288 
˚Œ_log
 = 
	`π∆_tc_ˇlc_˚Œ_log
(
˚Œ
);

290 
tbf
->
qt_øã
.
rs_øã
 = 
øã
;

291 
tbf
->
qt_øã_buckë
 = 
buckë
;

292 
tbf
->
qt_øã
.
rs_˚Œ_log
 = 
˚Œ_log
;

293 
tbf
->
qt_øã_txtime
 = 
	`∆_us2ticks
(
	`π∆_tc_ˇlc_txtime
(
buckë
, 
øã
));

294 
tbf
->
qt_mask
 |
TBF_ATTR_RATE
;

295 
	}
}

302 
	$π∆_qdisc_tbf_gë_øã
(
π∆_qdisc
 *
qdisc
)

304 
π∆_tbf
 *
tbf
;

306 i‡(!(
tbf
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

307 
	`BUG
();

309 i‡(
tbf
->
qt_mask
 & 
TBF_ATTR_RATE
)

310  
tbf
->
qt_øã
.
rs_øã
;

313 
	}
}

320 
	$π∆_qdisc_tbf_gë_øã_buckë
(
π∆_qdisc
 *
qdisc
)

322 
π∆_tbf
 *
tbf
;

324 i‡(!(
tbf
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

325 
	`BUG
();

327 i‡(
tbf
->
qt_mask
 & 
TBF_ATTR_RATE
)

328  
tbf
->
qt_øã_buckë
;

331 
	}
}

338 
	$π∆_qdisc_tbf_gë_øã_˚Œ
(
π∆_qdisc
 *
qdisc
)

340 
π∆_tbf
 *
tbf
;

342 i‡(!(
tbf
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

343 
	`BUG
();

345 i‡(
tbf
->
qt_mask
 & 
TBF_ATTR_RATE
)

346  (1 << 
tbf
->
qt_øã
.
rs_˚Œ_log
);

349 
	}
}

359 
	$π∆_qdisc_tbf_£t_≥akøã
(
π∆_qdisc
 *
qdisc
, 
øã
, 
buckë
,

360 
˚Œ
)

362 
π∆_tbf
 *
tbf
;

363 
˚Œ_log
;

365 i‡(!(
tbf
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

366 
	`BUG
();

368 
˚Œ_log
 = 
	`ˇlc_˚Œ_log
(
˚Œ
, 
buckë
);

369 i‡(
˚Œ_log
 < 0)

370  
˚Œ_log
;

372 
tbf
->
qt_≥akøã
.
rs_øã
 = 
øã
;

373 
tbf
->
qt_≥akøã_buckë
 = 
buckë
;

374 
tbf
->
qt_≥akøã
.
rs_˚Œ_log
 = 
˚Œ_log
;

375 
tbf
->
qt_≥akøã_txtime
 = 
	`∆_us2ticks
(
	`π∆_tc_ˇlc_txtime
(
buckë
, 
øã
));

377 
tbf
->
qt_mask
 |
TBF_ATTR_PEAKRATE
;

380 
	}
}

387 
	$π∆_qdisc_tbf_gë_≥akøã
(
π∆_qdisc
 *
qdisc
)

389 
π∆_tbf
 *
tbf
;

391 i‡(!(
tbf
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

392 
	`BUG
();

394 i‡(
tbf
->
qt_mask
 & 
TBF_ATTR_PEAKRATE
)

395  
tbf
->
qt_≥akøã
.
rs_øã
;

398 
	}
}

405 
	$π∆_qdisc_tbf_gë_≥akøã_buckë
(
π∆_qdisc
 *
qdisc
)

407 
π∆_tbf
 *
tbf
;

409 i‡(!(
tbf
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

410 
	`BUG
();

412 i‡(
tbf
->
qt_mask
 & 
TBF_ATTR_PEAKRATE
)

413  
tbf
->
qt_≥akøã_buckë
;

416 
	}
}

423 
	$π∆_qdisc_tbf_gë_≥akøã_˚Œ
(
π∆_qdisc
 *
qdisc
)

425 
π∆_tbf
 *
tbf
;

427 i‡(!(
tbf
 = 
	`π∆_tc_d©a
(
	`TC_CAST
(
qdisc
))))

428 
	`BUG
();

430 i‡(
tbf
->
qt_mask
 & 
TBF_ATTR_PEAKRATE
)

431  (1 << 
tbf
->
qt_≥akøã
.
rs_˚Œ_log
);

434 
	}
}

438 
π∆_tc_›s
 
	gtbf_tc_›s
 = {

439 .
to_köd
 = "tbf",

440 .
	gto_ty≥
 = 
RTNL_TC_TYPE_QDISC
,

441 .
	gto_size
 = (
π∆_tbf
),

442 .
	gto_msg_∑r£r
 = 
tbf_msg_∑r£r
,

443 .
	gto_dump
 = {

444 [
NL_DUMP_LINE
] = 
tbf_dump_löe
,

445 [
NL_DUMP_DETAILS
] = 
tbf_dump_dëaûs
,

447 .
	gto_msg_fûl
 = 
tbf_msg_fûl
,

450 
__öô
 
	$tbf_öô
()

452 
	`π∆_tc_ªgi°î
(&
tbf_tc_›s
);

453 
	}
}

455 
__exô
 
	$tbf_exô
()

457 
	`π∆_tc_uƒegi°î
(&
tbf_tc_›s
);

458 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/route.c

19 
	~<√éök-¥iv©e/√éök.h
>

20 
	~<√éök/√éök.h
>

21 
	~<√éök/ˇche.h
>

22 
	~<√éök/utûs.h
>

23 
	~<√éök/d©a.h
>

24 
	~<√éök/rouã/π∆.h
>

25 
	~<√éök/rouã/rouã.h
>

26 
	~<√éök/rouã/lök.h
>

28 
∆_ˇche_›s
 
	gπ∆_rouã_›s
;

30 
	$rouã_msg_∑r£r
(
∆_ˇche_›s
 *
›s
, 
sockaddr_∆
 *
who
,

31 
∆msghdr
 *
∆h
, 
∆_∑r£r_∑øm
 *
µ
)

33 
π∆_rouã
 *
rouã
;

34 
îr
;

36 i‡((
îr
 = 
	`π∆_rouã_∑r£
(
∆h
, &
rouã
)) < 0)

37  
îr
;

39 
îr
 = 
µ
->
	`µ_cb
((
∆_obje˘
 *Ë
rouã
,Öp);

41 
	`π∆_rouã_put
(
rouã
);

42  
îr
;

43 
	}
}

45 
	$rouã_ªque°_upd©e
(
∆_ˇche
 *
c
, 
∆_sock
 *
h
)

47 
πmsg
 
rhdr
 = {

48 .
πm_Ámûy
 = 
c
->
c_ürg1
,

51 i‡(
c
->
c_ürg2
 & 
ROUTE_CACHE_CONTENT
)

52 
rhdr
.
πm_Êags
 |
RTM_F_CLONED
;

54  
	`∆_£nd_sim∂e
(
h
, 
RTM_GETROUTE
, 
NLM_F_DUMP
, &
rhdr
, (rhdr));

55 
	}
}

80 
	$π∆_rouã_Æloc_ˇche
(
∆_sock
 *
sk
, 
Ámûy
, 
Êags
,

81 
∆_ˇche
 **
ªsu…
)

83 
∆_ˇche
 *
ˇche
;

84 
îr
;

86 i‡(!(
ˇche
 = 
	`∆_ˇche_Æloc
(&
π∆_rouã_›s
)))

87  -
NLE_NOMEM
;

89 
ˇche
->
c_ürg1
 = 
Ámûy
;

90 
ˇche
->
c_ürg2
 = 
Êags
;

92 i‡(
sk
 && (
îr
 = 
	`∆_ˇche_ªfûl
(sk, 
ˇche
)) < 0) {

93 
	`‰ì
(
ˇche
);

94  
îr
;

97 *
ªsu…
 = 
ˇche
;

99 
	}
}

108 
	$buûd_rouã_msg
(
π∆_rouã
 *
tm∂
, 
cmd
, 
Êags
,

109 
∆_msg
 **
ªsu…
)

111 
∆_msg
 *
msg
;

112 
îr
;

114 i‡(!(
msg
 = 
	`∆msg_Æloc_sim∂e
(
cmd
, 
Êags
)))

115  -
NLE_NOMEM
;

117 i‡((
îr
 = 
	`π∆_rouã_buûd_msg
(
msg
, 
tm∂
)) < 0) {

118 
	`∆msg_‰ì
(
msg
);

119  
îr
;

122 *
ªsu…
 = 
msg
;

124 
	}
}

126 
	$π∆_rouã_buûd_add_ªque°
(
π∆_rouã
 *
tm∂
, 
Êags
,

127 
∆_msg
 **
ªsu…
)

129  
	`buûd_rouã_msg
(
tm∂
, 
RTM_NEWROUTE
, 
NLM_F_CREATE
 | 
Êags
,

130 
ªsu…
);

131 
	}
}

133 
	$π∆_rouã_add
(
∆_sock
 *
sk
, 
π∆_rouã
 *
rouã
, 
Êags
)

135 
∆_msg
 *
msg
;

136 
îr
;

138 i‡((
îr
 = 
	`π∆_rouã_buûd_add_ªque°
(
rouã
, 
Êags
, &
msg
)) < 0)

139  
îr
;

141 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sk
, 
msg
);

142 
	`∆msg_‰ì
(
msg
);

143 i‡(
îr
 < 0)

144  
îr
;

146  
	`waô_f‹_ack
(
sk
);

147 
	}
}

149 
	$π∆_rouã_buûd_dñ_ªque°
(
π∆_rouã
 *
tm∂
, 
Êags
,

150 
∆_msg
 **
ªsu…
)

152  
	`buûd_rouã_msg
(
tm∂
, 
RTM_DELROUTE
, 
Êags
, 
ªsu…
);

153 
	}
}

155 
	$π∆_rouã_dñëe
(
∆_sock
 *
sk
, 
π∆_rouã
 *
rouã
, 
Êags
)

157 
∆_msg
 *
msg
;

158 
îr
;

160 i‡((
îr
 = 
	`π∆_rouã_buûd_dñ_ªque°
(
rouã
, 
Êags
, &
msg
)) < 0)

161  
îr
;

163 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sk
, 
msg
);

164 
	`∆msg_‰ì
(
msg
);

165 i‡(
îr
 < 0)

166  
îr
;

168  
	`waô_f‹_ack
(
sk
);

169 
	}
}

173 
∆_af_group
 
	grouã_groups
[] = {

174 { 
AF_INET
, 
RTNLGRP_IPV4_ROUTE
 },

175 { 
AF_INET6
, 
RTNLGRP_IPV6_ROUTE
 },

176 { 
AF_DEC√t
, 
RTNLGRP_DEC√t_ROUTE
 },

177 { 
END_OF_GROUP_LIST
 },

180 
∆_ˇche_›s
 
	gπ∆_rouã_›s
 = {

181 .
co_«me
 = "route/route",

182 .
	gco_hdrsize
 = (
πmsg
),

183 .
	gco_msgty≥s
 = {

184 { 
RTM_NEWROUTE
, 
NL_ACT_NEW
, "new" },

185 { 
RTM_DELROUTE
, 
NL_ACT_DEL
, "del" },

186 { 
RTM_GETROUTE
, 
NL_ACT_GET
, "get" },

187 
END_OF_MSGTYPES_LIST
,

189 .
	gco_¥Ÿocﬁ
 = 
NETLINK_ROUTE
,

190 .
	gco_groups
 = 
rouã_groups
,

191 .
	gco_ªque°_upd©e
 = 
rouã_ªque°_upd©e
,

192 .
	gco_msg_∑r£r
 = 
rouã_msg_∑r£r
,

193 .
	gco_obj_›s
 = &
rouã_obj_›s
,

196 
__öô
 
	$rouã_öô
()

198 
	`∆_ˇche_mngt_ªgi°î
(&
π∆_rouã_›s
);

199 
	}
}

201 
__exô
 
	$rouã_exô
()

203 
	`∆_ˇche_mngt_uƒegi°î
(&
π∆_rouã_›s
);

204 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/route_obj.c

33 
	~<√éök-¥iv©e/√éök.h
>

34 
	~<√éök/√éök.h
>

35 
	~<√éök/ˇche.h
>

36 
	~<√éök/utûs.h
>

37 
	~<√éök/d©a.h
>

38 
	~<√éök/hashèbÀ.h
>

39 
	~<√éök/rouã/π∆.h
>

40 
	~<√éök/rouã/rouã.h
>

41 
	~<√éök/rouã/lök.h
>

42 
	~<√éök/rouã/√xth›.h
>

45 
	#ROUTE_ATTR_FAMILY
 0x000001

	)

46 
	#ROUTE_ATTR_TOS
 0x000002

	)

47 
	#ROUTE_ATTR_TABLE
 0x000004

	)

48 
	#ROUTE_ATTR_PROTOCOL
 0x000008

	)

49 
	#ROUTE_ATTR_SCOPE
 0x000010

	)

50 
	#ROUTE_ATTR_TYPE
 0x000020

	)

51 
	#ROUTE_ATTR_FLAGS
 0x000040

	)

52 
	#ROUTE_ATTR_DST
 0x000080

	)

53 
	#ROUTE_ATTR_SRC
 0x000100

	)

54 
	#ROUTE_ATTR_IIF
 0x000200

	)

55 
	#ROUTE_ATTR_OIF
 0x000400

	)

56 
	#ROUTE_ATTR_GATEWAY
 0x000800

	)

57 
	#ROUTE_ATTR_PRIO
 0x001000

	)

58 
	#ROUTE_ATTR_PREF_SRC
 0x002000

	)

59 
	#ROUTE_ATTR_METRICS
 0x004000

	)

60 
	#ROUTE_ATTR_MULTIPATH
 0x008000

	)

61 
	#ROUTE_ATTR_REALMS
 0x010000

	)

62 
	#ROUTE_ATTR_CACHEINFO
 0x020000

	)

65 
	$rouã_c⁄°ru˘‹
(
∆_obje˘
 *
c
)

67 
π∆_rouã
 *
r
 = (π∆_rouã *Ë
c
;

69 
r
->
π_Ámûy
 = 
AF_UNSPEC
;

70 
r
->
π_sc›e
 = 
RT_SCOPE_NOWHERE
;

71 
r
->
π_èbÀ
 = 
RT_TABLE_MAIN
;

72 
r
->
π_¥Ÿocﬁ
 = 
RTPROT_STATIC
;

73 
r
->
π_ty≥
 = 
RTN_UNICAST
;

74 
r
->
π_¥io
 = 0;

76 
	`∆_öô_li°_hód
(&
r
->
π_√xth›s
);

77 
	}
}

79 
	$rouã_‰ì_d©a
(
∆_obje˘
 *
c
)

81 
π∆_rouã
 *
r
 = (π∆_rouã *Ë
c
;

82 
π∆_√xth›
 *
nh
, *
tmp
;

84 i‡(
r
 =
NULL
)

87 
	`∆_addr_put
(
r
->
π_d°
);

88 
	`∆_addr_put
(
r
->
π_§c
);

89 
	`∆_addr_put
(
r
->
π_¥ef_§c
);

91 
	`∆_li°_f‹_óch_íåy_ß„
(
nh
, 
tmp
, &
r
->
π_√xth›s
, 
πnh_li°
) {

92 
	`π∆_rouã_ªmove_√xth›
(
r
, 
nh
);

93 
	`π∆_rouã_nh_‰ì
(
nh
);

95 
	}
}

97 
	$rouã_˛⁄e
(
∆_obje˘
 *
_d°
, ∆_obje˘ *
_§c
)

99 
π∆_rouã
 *
d°
 = (π∆_rouã *Ë
_d°
;

100 
π∆_rouã
 *
§c
 = (π∆_rouã *Ë
_§c
;

101 
π∆_√xth›
 *
nh
, *
√w
;

103 i‡(
§c
->
π_d°
)

104 i‡(!(
d°
->
π_d°
 = 
	`∆_addr_˛⁄e
(
§c
->rt_dst)))

105  -
NLE_NOMEM
;

107 i‡(
§c
->
π_§c
)

108 i‡(!(
d°
->
π_§c
 = 
	`∆_addr_˛⁄e
(
§c
->rt_src)))

109  -
NLE_NOMEM
;

111 i‡(
§c
->
π_¥ef_§c
)

112 i‡(!(
d°
->
π_¥ef_§c
 = 
	`∆_addr_˛⁄e
(
§c
->rt_pref_src)))

113  -
NLE_NOMEM
;

116 
d°
->
π_ƒ_nh
 = 0;

118 
	`∆_öô_li°_hód
(&
d°
->
π_√xth›s
);

119 
	`∆_li°_f‹_óch_íåy
(
nh
, &
§c
->
π_√xth›s
, 
πnh_li°
) {

120 
√w
 = 
	`π∆_rouã_nh_˛⁄e
(
nh
);

121 i‡(!
√w
)

122  -
NLE_NOMEM
;

124 
	`π∆_rouã_add_√xth›
(
d°
, 
√w
);

128 
	}
}

130 
	$rouã_dump_löe
(
∆_obje˘
 *
a
, 
∆_dump_∑øms
 *
p
)

132 
π∆_rouã
 *
r
 = (π∆_rouã *Ë
a
;

133 
ˇche
 = 0, 
Êags
;

134 
buf
[64];

136 i‡(
r
->
π_Êags
 & 
RTM_F_CLONED
)

137 
ˇche
 = 1;

139 
	`∆_dump_löe
(
p
, "%†", 
	`∆_af2°r
(
r
->
π_Ámûy
, 
buf
, (buf)));

141 i‡(
ˇche
)

142 
	`∆_dump
(
p
, "cache ");

144 i‡(!(
r
->
˚_mask
 & 
ROUTE_ATTR_DST
) ||

145 
	`∆_addr_gë_Àn
(
r
->
π_d°
) == 0)

146 
	`∆_dump
(
p
, "default ");

148 
	`∆_dump
(
p
, "%†", 
	`∆_addr2°r
(
r
->
π_d°
, 
buf
, (buf)));

150 i‡(
r
->
˚_mask
 & 
ROUTE_ATTR_TABLE
 && !
ˇche
)

151 
	`∆_dump
(
p
, "table %s ",

152 
	`π∆_rouã_èbÀ2°r
(
r
->
π_èbÀ
, 
buf
, (buf)));

154 i‡(
r
->
˚_mask
 & 
ROUTE_ATTR_TYPE
)

155 
	`∆_dump
(
p
, "type %s ",

156 
	`∆_π¡y≥2°r
(
r
->
π_ty≥
, 
buf
, (buf)));

158 i‡(
r
->
˚_mask
 & 
ROUTE_ATTR_TOS
 &&Ñ->
π_tos
 != 0)

159 
	`∆_dump
(
p
, "to†%#x ", 
r
->
π_tos
);

161 i‡(
r
->
˚_mask
 & 
ROUTE_ATTR_MULTIPATH
) {

162 
π∆_√xth›
 *
nh
;

164 
	`∆_li°_f‹_óch_íåy
(
nh
, &
r
->
π_√xth›s
, 
πnh_li°
) {

165 
p
->
dp_iv¨
 = 
NH_DUMP_FROM_ONELINE
;

166 
	`π∆_rouã_nh_dump
(
nh
, 
p
);

170 
Êags
 = 
r
->
π_Êags
 & ~(
RTM_F_CLONED
);

171 i‡(
r
->
˚_mask
 & 
ROUTE_ATTR_FLAGS
 && 
Êags
) {

173 
	`∆_dump
(
p
, "<");

175 
	#PRINT_FLAG
(
f
Ëi‡(
Êags
 & 
RTNH_F_
##f) { \

176 
Êags
 &~
RTNH_F_
##
f
; 
	`∆_dump
(
p
, #‡"%s", fœg†? "," : ""); }

	)

177 
	`PRINT_FLAG
(
DEAD
);

178 
	`PRINT_FLAG
(
ONLINK
);

179 
	`PRINT_FLAG
(
PERVASIVE
);

180 #unde‡
PRINT_FLAG


182 
	#PRINT_FLAG
(
f
Ëi‡(
Êags
 & 
RTM_F_
##f) { \

183 
Êags
 &~
RTM_F_
##
f
; 
	`∆_dump
(
p
, #‡"%s", fœg†? "," : ""); }

	)

184 
	`PRINT_FLAG
(
NOTIFY
);

185 
	`PRINT_FLAG
(
EQUALIZE
);

186 
	`PRINT_FLAG
(
PREFIX
);

187 #unde‡
PRINT_FLAG


189 
	#PRINT_FLAG
(
f
Ëi‡(
Êags
 & 
RTCF_
##f) { \

190 
Êags
 &~
RTCF_
##
f
; 
	`∆_dump
(
p
, #‡"%s", fœg†? "," : ""); }

	)

191 
	`PRINT_FLAG
(
NOTIFY
);

192 
	`PRINT_FLAG
(
REDIRECTED
);

193 
	`PRINT_FLAG
(
DOREDIRECT
);

194 
	`PRINT_FLAG
(
DIRECTSRC
);

195 
	`PRINT_FLAG
(
DNAT
);

196 
	`PRINT_FLAG
(
BROADCAST
);

197 
	`PRINT_FLAG
(
MULTICAST
);

198 
	`PRINT_FLAG
(
LOCAL
);

199 #unde‡
PRINT_FLAG


201 
	`∆_dump
(
p
, ">");

204 
	`∆_dump
(
p
, "\n");

205 
	}
}

207 
	$rouã_dump_dëaûs
(
∆_obje˘
 *
a
, 
∆_dump_∑øms
 *
p
)

209 
π∆_rouã
 *
r
 = (π∆_rouã *Ë
a
;

210 
∆_ˇche
 *
lök_ˇche
;

211 
buf
[256];

212 
i
;

214 
lök_ˇche
 = 
	`∆_ˇche_mngt_ªquúe_ß„
("route/link");

216 
	`rouã_dump_löe
(
a
, 
p
);

217 
	`∆_dump_löe
(
p
, " ");

219 i‡(
r
->
˚_mask
 & 
ROUTE_ATTR_PREF_SRC
)

220 
	`∆_dump
(
p
, "preferred-src %s ",

221 
	`∆_addr2°r
(
r
->
π_¥ef_§c
, 
buf
, (buf)));

223 i‡(
r
->
˚_mask
 & 
ROUTE_ATTR_SCOPE
 &&Ñ->
π_sc›e
 !
RT_SCOPE_NOWHERE
)

224 
	`∆_dump
(
p
, "scope %s ",

225 
	`π∆_sc›e2°r
(
r
->
π_sc›e
, 
buf
, (buf)));

227 i‡(
r
->
˚_mask
 & 
ROUTE_ATTR_PRIO
)

228 
	`∆_dump
(
p
, "¥i‹ôy %#x ", 
r
->
π_¥io
);

230 i‡(
r
->
˚_mask
 & 
ROUTE_ATTR_PROTOCOL
)

231 
	`∆_dump
(
p
, "protocol %s ",

232 
	`π∆_rouã_¥Ÿo2°r
(
r
->
π_¥Ÿocﬁ
, 
buf
, (buf)));

234 i‡(
r
->
˚_mask
 & 
ROUTE_ATTR_IIF
) {

235 i‡(
lök_ˇche
) {

236 
	`∆_dump
(
p
, "iif %s ",

237 
	`π∆_lök_i2«me
(
lök_ˇche
, 
r
->
π_iif
,

238 
buf
, (buf)));

240 
	`∆_dump
(
p
, "ii‡%d ", 
r
->
π_iif
);

243 i‡(
r
->
˚_mask
 & 
ROUTE_ATTR_SRC
)

244 
	`∆_dump
(
p
, "§¯%†", 
	`∆_addr2°r
(
r
->
π_§c
, 
buf
, (buf)));

246 
	`∆_dump
(
p
, "\n");

248 i‡(
r
->
˚_mask
 & 
ROUTE_ATTR_MULTIPATH
) {

249 
π∆_√xth›
 *
nh
;

251 
	`∆_li°_f‹_óch_íåy
(
nh
, &
r
->
π_√xth›s
, 
πnh_li°
) {

252 
	`∆_dump_löe
(
p
, " ");

253 
p
->
dp_iv¨
 = 
NH_DUMP_FROM_DETAILS
;

254 
	`π∆_rouã_nh_dump
(
nh
, 
p
);

255 
	`∆_dump
(
p
, "\n");

259 i‡((
r
->
˚_mask
 & 
ROUTE_ATTR_CACHEINFO
Ë&&Ñ->
π_ˇcheöfo
.
πci_îr‹
) {

260 
	`∆_dump_löe
(
p
, " cacheinfoÉrror %d (%s)\n",

261 
r
->
π_ˇcheöfo
.
πci_îr‹
,

262 
	`°ªº‹_r
(-
r
->
π_ˇcheöfo
.
πci_îr‹
, 
buf
, (buf)));

265 i‡(
r
->
˚_mask
 & 
ROUTE_ATTR_METRICS
) {

266 
	`∆_dump_löe
(
p
, " metrics [");

267 
i
 = 0; i < 
RTAX_MAX
; i++)

268 i‡(
r
->
π_mërics_mask
 & (1 << 
i
))

269 
	`∆_dump
(
p
, "%s %u ",

270 
	`π∆_rouã_mëric2°r
(
i
+1,

271 
buf
, (buf)),

272 
r
->
π_mërics
[
i
]);

273 
	`∆_dump
(
p
, "]\n");

276 i‡(
lök_ˇche
)

277 
	`∆_ˇche_put
(
lök_ˇche
);

278 
	}
}

280 
	$rouã_dump_°©s
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
p
)

282 
π∆_rouã
 *
rouã
 = (π∆_rouã *Ë
obj
;

284 
	`rouã_dump_dëaûs
(
obj
, 
p
);

286 i‡(
rouã
->
˚_mask
 & 
ROUTE_ATTR_CACHEINFO
) {

287 
π∆_πˇcheöfo
 *
ci
 = &
rouã
->
π_ˇcheöfo
;

289 
	`∆_dump_löe
(
p
, " used %uÑefcnt %uÜast-use %us "

291 
ci
->
πci_u£d
, ci->
πci_˛¡ªf
,

292 
ci
->
πci_œ°_u£
 / 
	`∆_gë_u£r_hz
(),

293 
ci
->
πci_expúes
 / 
	`∆_gë_u£r_hz
());

295 
	}
}

297 
	$rouã_keygí
(
∆_obje˘
 *
obj
, 
uöt32_t
 *
hashkey
,

298 
uöt32_t
 
èbÀ_sz
)

300 
π∆_rouã
 *
rouã
 = (π∆_rouã *Ë
obj
;

301 
rkey_sz
;

302 
∆_addr
 *
addr
 = 
NULL
;

303 
	srouã_hash_key
 {

304 
uöt8_t
 
π_Ámûy
;

305 
uöt8_t
 
π_tos
;

306 
uöt32_t
 
π_èbÀ
;

307 
uöt32_t
 
π_¥io
;

308 
π_addr
[0];

309 } 
	`__©åibuã__
((
∑cked
)Ë*
rkey
;

310 #ifde‡
NL_DEBUG


311 
buf
[
INET6_ADDRSTRLEN
+5];

314 i‡(
rouã
->
π_d°
)

315 
addr
 = 
rouã
->
π_d°
;

317 
rkey_sz
 = (*
rkey
);

318 i‡(
addr
)

319 
rkey_sz
 +
	`∆_addr_gë_Àn
(
addr
);

320 
rkey
 = 
	`ˇŒoc
(1, 
rkey_sz
);

321 i‡(!
rkey
) {

322 
	`NL_DBG
(2, "W¨nög: cÆlo¯Áûed f‹ %d byãs...\n", 
rkey_sz
);

323 *
hashkey
 = 0;

326 
rkey
->
π_Ámûy
 = 
rouã
->rt_family;

327 
rkey
->
π_tos
 = 
rouã
->rt_tos;

328 
rkey
->
π_èbÀ
 = 
rouã
->rt_table;

329 
rkey
->
π_¥io
 = 
rouã
->rt_prio;

330 i‡(
addr
)

331 
	`mem˝y
(
rkey
->
π_addr
, 
	`∆_addr_gë_bö¨y_addr
(
addr
),

332 
	`∆_addr_gë_Àn
(
addr
));

334 *
hashkey
 = 
	`∆_hash
(
rkey
, 
rkey_sz
, 0Ë% 
èbÀ_sz
;

336 
	`NL_DBG
(5, "route %p key (fam %dÅos %dÅable %dáddr %s) keysz %d "

337 "hash 0x%x\n", 
rouã
, 
rkey
->
π_Ámûy
,Ñkey->
π_tos
,

338 
rkey
->
π_èbÀ
, 
	`∆_addr2°r
(
addr
, 
buf
, (buf)),

339 
rkey_sz
, *
hashkey
);

341 
	`‰ì
(
rkey
);

344 
	}
}

346 
	$rouã_com∑ª
(
∆_obje˘
 *
_a
, ∆_obje˘ *
_b
,

347 
uöt32_t
 
©ås
, 
Êags
)

349 
π∆_rouã
 *
a
 = (π∆_rouã *Ë
_a
;

350 
π∆_rouã
 *
b
 = (π∆_rouã *Ë
_b
;

351 
π∆_√xth›
 *
nh_a
, *
nh_b
;

352 
i
, 
diff
 = 0, 
found
;

354 
	#ROUTE_DIFF
(
ATTR
, 
EXPR
Ë
	`ATTR_DIFF
(
©ås
, 
ROUTE_ATTR_
##ATTR, 
a
, 
b
, EXPR)

	)

356 
diff
 |
	`ROUTE_DIFF
(
FAMILY
, 
a
->
π_Ámûy
 !
b
->rt_family);

357 
diff
 |
	`ROUTE_DIFF
(
TOS
, 
a
->
π_tos
 !
b
->rt_tos);

358 
diff
 |
	`ROUTE_DIFF
(
TABLE
, 
a
->
π_èbÀ
 !
b
->rt_table);

359 
diff
 |
	`ROUTE_DIFF
(
PROTOCOL
, 
a
->
π_¥Ÿocﬁ
 !
b
->rt_protocol);

360 
diff
 |
	`ROUTE_DIFF
(
SCOPE
, 
a
->
π_sc›e
 !
b
->rt_scope);

361 
diff
 |
	`ROUTE_DIFF
(
TYPE
, 
a
->
π_ty≥
 !
b
->rt_type);

362 
diff
 |
	`ROUTE_DIFF
(
PRIO
, 
a
->
π_¥io
 !
b
->rt_prio);

363 
diff
 |
	`ROUTE_DIFF
(
DST
, 
	`∆_addr_cmp
(
a
->
π_d°
, 
b
->rt_dst));

364 
diff
 |
	`ROUTE_DIFF
(
SRC
, 
	`∆_addr_cmp
(
a
->
π_§c
, 
b
->rt_src));

365 
diff
 |
	`ROUTE_DIFF
(
IIF
, 
a
->
π_iif
 !
b
->rt_iif);

366 
diff
 |
	`ROUTE_DIFF
(
PREF_SRC
, 
	`∆_addr_cmp
(
a
->
π_¥ef_§c
,

367 
b
->
π_¥ef_§c
));

369 i‡(
Êags
 & 
LOOSE_COMPARISON
) {

370 
	`∆_li°_f‹_óch_íåy
(
nh_b
, &
b
->
π_√xth›s
, 
πnh_li°
) {

371 
found
 = 0;

372 
	`∆_li°_f‹_óch_íåy
(
nh_a
, &
a
->
π_√xth›s
,

373 
πnh_li°
) {

374 i‡(!
	`π∆_rouã_nh_com∑ª
(
nh_a
, 
nh_b
,

375 
nh_b
->
˚_mask
, 1)) {

376 
found
 = 1;

381 i‡(!
found
)

382 
nh_mism©ch
;

385 
i
 = 0; i < 
RTAX_MAX
 - 1; i++) {

386 i‡(
a
->
π_mërics_mask
 & (1 << 
i
) &&

387 (!(
b
->
π_mërics_mask
 & (1 << 
i
)) ||

388 
a
->
π_mërics
[
i
] !
b
->rt_metrics[i]))

389 
diff
 |
	`ROUTE_DIFF
(
METRICS
, 1);

392 
diff
 |
	`ROUTE_DIFF
(
FLAGS
,

393 (
a
->
π_Êags
 ^ 
b
->π_ÊagsË& b->
π_Êag_mask
);

395 i‡(
a
->
π_ƒ_nh
 !
b
->rt_nr_nh)

396 
nh_mism©ch
;

399 
	`∆_li°_f‹_óch_íåy
(
nh_a
, &
a
->
π_√xth›s
, 
πnh_li°
) {

400 
found
 = 0;

401 
	`∆_li°_f‹_óch_íåy
(
nh_b
, &
b
->
π_√xth›s
,

402 
πnh_li°
) {

403 i‡(!
	`π∆_rouã_nh_com∑ª
(
nh_a
, 
nh_b
, ~0, 0)) {

404 
found
 = 1;

408 i‡(!
found
)

409 
nh_mism©ch
;

414 
	`∆_li°_f‹_óch_íåy
(
nh_b
, &
b
->
π_√xth›s
, 
πnh_li°
) {

415 
found
 = 0;

416 
	`∆_li°_f‹_óch_íåy
(
nh_a
, &
a
->
π_√xth›s
,

417 
πnh_li°
) {

418 i‡(!
	`π∆_rouã_nh_com∑ª
(
nh_a
, 
nh_b
, ~0, 0)) {

419 
found
 = 1;

423 i‡(!
found
)

424 
nh_mism©ch
;

427 
i
 = 0; i < 
RTAX_MAX
 - 1; i++) {

428 i‡((
a
->
π_mërics_mask
 & (1 << 
i
)) ^

429 (
b
->
π_mërics_mask
 & (1 << 
i
)))

430 
diff
 |
	`ROUTE_DIFF
(
METRICS
, 1);

432 
diff
 |
	`ROUTE_DIFF
(
METRICS
,

433 
a
->
π_mërics
[
i
] !
b
->rt_metrics[i]);

436 
diff
 |
	`ROUTE_DIFF
(
FLAGS
, 
a
->
π_Êags
 !
b
->rt_flags);

439 
out
:

440  
diff
;

442 
nh_mism©ch
:

443 
diff
 |
	`ROUTE_DIFF
(
MULTIPATH
, 1);

444 
out
;

446 #unde‡
ROUTE_DIFF


447 
	}
}

449 
	$rouã_upd©e
(
∆_obje˘
 *
ﬁd_obj
, ∆_obje˘ *
√w_obj
)

451 
π∆_rouã
 *
√w_rouã
 = (π∆_rouã *Ë
√w_obj
;

452 
π∆_rouã
 *
ﬁd_rouã
 = (π∆_rouã *Ë
ﬁd_obj
;

453 
π∆_√xth›
 *
√w_nh
;

454 
a˘i⁄
 = 
√w_obj
->
˚_msgty≥
;

455 #ifde‡
NL_DEBUG


456 
buf
[
INET6_ADDRSTRLEN
+5];

466 i‡(
√w_rouã
->
π_Ámûy
 !
AF_INET6
 ||

467 
√w_rouã
->
π_èbÀ
 =
RT_TABLE_LOCAL
)

468  -
NLE_OPNOTSUPP
;

474 i‡(
	`π∆_rouã_gë_¬exth›s
(
√w_rouã
) != 1)

475  -
NLE_OPNOTSUPP
;

482 
√w_nh
 = 
	`π∆_rouã_√xth›_n
(
√w_rouã
, 0);

483 i‡(!
√w_nh
 || !
	`π∆_rouã_nh_gë_g©eway
(new_nh))

484  -
NLE_OPNOTSUPP
;

486 
a˘i⁄
) {

487 
RTM_NEWROUTE
 : {

488 
π∆_√xth›
 *
˛⁄ed_nh
;

493 
˛⁄ed_nh
 = 
	`π∆_rouã_nh_˛⁄e
(
√w_nh
);

494 i‡(!
˛⁄ed_nh
)

495  -
NLE_NOMEM
;

496 
	`π∆_rouã_add_√xth›
(
ﬁd_rouã
, 
˛⁄ed_nh
);

498 
	`NL_DBG
(2, "Route obj %p updated. Added "

499 "√xth› %∞vü %s\n", 
ﬁd_rouã
, 
˛⁄ed_nh
,

500 
	`∆_addr2°r
(
˛⁄ed_nh
->
πnh_g©eway
, 
buf
,

501 (
buf
)));

504 
RTM_DELROUTE
 : {

505 
π∆_√xth›
 *
ﬁd_nh
;

513 i‡(
	`π∆_rouã_gë_¬exth›s
(
ﬁd_rouã
) <= 1)

514  -
NLE_OPNOTSUPP
;

519 
	`∆_li°_f‹_óch_íåy
(
ﬁd_nh
, &
ﬁd_rouã
->
π_√xth›s
,

520 
πnh_li°
) {

521 i‡(!
	`π∆_rouã_nh_com∑ª
(
ﬁd_nh
, 
√w_nh
, ~0, 0)) {

523 
	`π∆_rouã_ªmove_√xth›
(
ﬁd_rouã
, 
ﬁd_nh
);

525 
	`NL_DBG
(2, "Route obj %p updated. Removed "

526 "√xth› %∞vü %s\n", 
ﬁd_rouã
,

527 
ﬁd_nh
,

528 
	`∆_addr2°r
(
ﬁd_nh
->
πnh_g©eway
, 
buf
,

529 (
buf
)));

531 
	`π∆_rouã_nh_‰ì
(
ﬁd_nh
);

538 
	`NL_DBG
(2, "Unknownáctionássociated "

539 "tÿobje˘ %∞durögÑouã upd©e\n", 
√w_obj
);

540  -
NLE_OPNOTSUPP
;

543  
NLE_SUCCESS
;

544 
	}
}

546 c⁄° 
å™s_tbl
 
	grouã_©ås
[] = {

547 
__ADD
(
ROUTE_ATTR_FAMILY
, 
Ámûy
)

548 
__ADD
(
ROUTE_ATTR_TOS
, 
tos
)

549 
__ADD
(
ROUTE_ATTR_TABLE
, 
èbÀ
)

550 
__ADD
(
ROUTE_ATTR_PROTOCOL
, 
¥Ÿocﬁ
)

551 
__ADD
(
ROUTE_ATTR_SCOPE
, 
sc›e
)

552 
__ADD
(
ROUTE_ATTR_TYPE
, 
ty≥
)

553 
__ADD
(
ROUTE_ATTR_FLAGS
, 
Êags
)

554 
__ADD
(
ROUTE_ATTR_DST
, 
d°
)

555 
__ADD
(
ROUTE_ATTR_SRC
, 
§c
)

556 
__ADD
(
ROUTE_ATTR_IIF
, 
iif
)

557 
__ADD
(
ROUTE_ATTR_OIF
, 
oif
)

558 
__ADD
(
ROUTE_ATTR_GATEWAY
, 
g©eway
)

559 
__ADD
(
ROUTE_ATTR_PRIO
, 
¥io
)

560 
__ADD
(
ROUTE_ATTR_PREF_SRC
, 
¥ef_§c
)

561 
__ADD
(
ROUTE_ATTR_METRICS
, 
mërics
)

562 
__ADD
(
ROUTE_ATTR_MULTIPATH
, 
mu…ù©h
)

563 
__ADD
(
ROUTE_ATTR_REALMS
, 
ªÆms
)

564 
__ADD
(
ROUTE_ATTR_CACHEINFO
, 
ˇcheöfo
)

567 *
	$rouã_©ås2°r
(
©ås
, *
buf
, 
size_t
 
Àn
)

569  
	`__Êags2°r
(
©ås
, 
buf
, 
Àn
, 
rouã_©ås
,

570 
	`ARRAY_SIZE
(
rouã_©ås
));

571 
	}
}

578 
π∆_rouã
 *
	$π∆_rouã_Æloc
()

580  (
π∆_rouã
 *Ë
	`∆_obje˘_Æloc
(&
rouã_obj_›s
);

581 
	}
}

583 
	$π∆_rouã_gë
(
π∆_rouã
 *
rouã
)

585 
	`∆_obje˘_gë
((
∆_obje˘
 *Ë
rouã
);

586 
	}
}

588 
	$π∆_rouã_put
(
π∆_rouã
 *
rouã
)

590 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
rouã
);

591 
	}
}

600 
	$π∆_rouã_£t_èbÀ
(
π∆_rouã
 *
rouã
, 
uöt32_t
 
èbÀ
)

602 
rouã
->
π_èbÀ
 = 
èbÀ
;

603 
rouã
->
˚_mask
 |
ROUTE_ATTR_TABLE
;

604 
	}
}

606 
uöt32_t
 
	$π∆_rouã_gë_èbÀ
(
π∆_rouã
 *
rouã
)

608  
rouã
->
π_èbÀ
;

609 
	}
}

611 
	$π∆_rouã_£t_sc›e
(
π∆_rouã
 *
rouã
, 
uöt8_t
 
sc›e
)

613 
rouã
->
π_sc›e
 = 
sc›e
;

614 
rouã
->
˚_mask
 |
ROUTE_ATTR_SCOPE
;

615 
	}
}

617 
uöt8_t
 
	$π∆_rouã_gë_sc›e
(
π∆_rouã
 *
rouã
)

619  
rouã
->
π_sc›e
;

620 
	}
}

622 
	$π∆_rouã_£t_tos
(
π∆_rouã
 *
rouã
, 
uöt8_t
 
tos
)

624 
rouã
->
π_tos
 = 
tos
;

625 
rouã
->
˚_mask
 |
ROUTE_ATTR_TOS
;

626 
	}
}

628 
uöt8_t
 
	$π∆_rouã_gë_tos
(
π∆_rouã
 *
rouã
)

630  
rouã
->
π_tos
;

631 
	}
}

633 
	$π∆_rouã_£t_¥Ÿocﬁ
(
π∆_rouã
 *
rouã
, 
uöt8_t
 
¥Ÿocﬁ
)

635 
rouã
->
π_¥Ÿocﬁ
 = 
¥Ÿocﬁ
;

636 
rouã
->
˚_mask
 |
ROUTE_ATTR_PROTOCOL
;

637 
	}
}

639 
uöt8_t
 
	$π∆_rouã_gë_¥Ÿocﬁ
(
π∆_rouã
 *
rouã
)

641  
rouã
->
π_¥Ÿocﬁ
;

642 
	}
}

644 
	$π∆_rouã_£t_¥i‹ôy
(
π∆_rouã
 *
rouã
, 
uöt32_t
 
¥io
)

646 
rouã
->
π_¥io
 = 
¥io
;

647 
rouã
->
˚_mask
 |
ROUTE_ATTR_PRIO
;

648 
	}
}

650 
uöt32_t
 
	$π∆_rouã_gë_¥i‹ôy
(
π∆_rouã
 *
rouã
)

652  
rouã
->
π_¥io
;

653 
	}
}

655 
	$π∆_rouã_£t_Ámûy
(
π∆_rouã
 *
rouã
, 
uöt8_t
 
Ámûy
)

657 i‡(
Ámûy
 !
AF_INET
 && famûy !
AF_INET6
 && famûy !
AF_DEC√t
)

658  -
NLE_AF_NOSUPPORT
;

660 
rouã
->
π_Ámûy
 = 
Ámûy
;

661 
rouã
->
˚_mask
 |
ROUTE_ATTR_FAMILY
;

664 
	}
}

666 
uöt8_t
 
	$π∆_rouã_gë_Ámûy
(
π∆_rouã
 *
rouã
)

668  
rouã
->
π_Ámûy
;

669 
	}
}

671 
	$π∆_rouã_£t_d°
(
π∆_rouã
 *
rouã
, 
∆_addr
 *
addr
)

673 i‡(
rouã
->
˚_mask
 & 
ROUTE_ATTR_FAMILY
) {

674 i‡(
addr
->
a_Ámûy
 !
rouã
->
π_Ámûy
)

675  -
NLE_AF_MISMATCH
;

677 
rouã
->
π_Ámûy
 = 
addr
->
a_Ámûy
;

679 i‡(
rouã
->
π_d°
)

680 
	`∆_addr_put
(
rouã
->
π_d°
);

682 
	`∆_addr_gë
(
addr
);

683 
rouã
->
π_d°
 = 
addr
;

685 
rouã
->
˚_mask
 |(
ROUTE_ATTR_DST
 | 
ROUTE_ATTR_FAMILY
);

688 
	}
}

690 
∆_addr
 *
	$π∆_rouã_gë_d°
(
π∆_rouã
 *
rouã
)

692  
rouã
->
π_d°
;

693 
	}
}

695 
	$π∆_rouã_£t_§c
(
π∆_rouã
 *
rouã
, 
∆_addr
 *
addr
)

697 i‡(
addr
->
a_Ámûy
 =
AF_INET
)

698  -
NLE_SRCRT_NOSUPPORT
;

700 i‡(
rouã
->
˚_mask
 & 
ROUTE_ATTR_FAMILY
) {

701 i‡(
addr
->
a_Ámûy
 !
rouã
->
π_Ámûy
)

702  -
NLE_AF_MISMATCH
;

704 
rouã
->
π_Ámûy
 = 
addr
->
a_Ámûy
;

706 i‡(
rouã
->
π_§c
)

707 
	`∆_addr_put
(
rouã
->
π_§c
);

709 
	`∆_addr_gë
(
addr
);

710 
rouã
->
π_§c
 = 
addr
;

711 
rouã
->
˚_mask
 |(
ROUTE_ATTR_SRC
 | 
ROUTE_ATTR_FAMILY
);

714 
	}
}

716 
∆_addr
 *
	$π∆_rouã_gë_§c
(
π∆_rouã
 *
rouã
)

718  
rouã
->
π_§c
;

719 
	}
}

721 
	$π∆_rouã_£t_ty≥
(
π∆_rouã
 *
rouã
, 
uöt8_t
 
ty≥
)

723 i‡(
ty≥
 > 
RTN_MAX
)

724  -
NLE_RANGE
;

726 
rouã
->
π_ty≥
 = 
ty≥
;

727 
rouã
->
˚_mask
 |
ROUTE_ATTR_TYPE
;

730 
	}
}

732 
uöt8_t
 
	$π∆_rouã_gë_ty≥
(
π∆_rouã
 *
rouã
)

734  
rouã
->
π_ty≥
;

735 
	}
}

737 
	$π∆_rouã_£t_Êags
(
π∆_rouã
 *
rouã
, 
uöt32_t
 
Êags
)

739 
rouã
->
π_Êag_mask
 |
Êags
;

740 
rouã
->
π_Êags
 |
Êags
;

741 
rouã
->
˚_mask
 |
ROUTE_ATTR_FLAGS
;

742 
	}
}

744 
	$π∆_rouã_un£t_Êags
(
π∆_rouã
 *
rouã
, 
uöt32_t
 
Êags
)

746 
rouã
->
π_Êag_mask
 |
Êags
;

747 
rouã
->
π_Êags
 &~
Êags
;

748 
rouã
->
˚_mask
 |
ROUTE_ATTR_FLAGS
;

749 
	}
}

751 
uöt32_t
 
	$π∆_rouã_gë_Êags
(
π∆_rouã
 *
rouã
)

753  
rouã
->
π_Êags
;

754 
	}
}

756 
	$π∆_rouã_£t_mëric
(
π∆_rouã
 *
rouã
, 
mëric
, 
uöt32_t
 
vÆue
)

758 i‡(
mëric
 > 
RTAX_MAX
 || metric < 1)

759  -
NLE_RANGE
;

761 
rouã
->
π_mërics
[
mëric
 - 1] = 
vÆue
;

763 i‡(!(
rouã
->
π_mërics_mask
 & (1 << (
mëric
 - 1)))) {

764 
rouã
->
π_nmërics
++;

765 
rouã
->
π_mërics_mask
 |(1 << (
mëric
 - 1));

768 
rouã
->
˚_mask
 |
ROUTE_ATTR_METRICS
;

771 
	}
}

773 
	$π∆_rouã_un£t_mëric
(
π∆_rouã
 *
rouã
, 
mëric
)

775 i‡(
mëric
 > 
RTAX_MAX
 || metric < 1)

776  -
NLE_RANGE
;

778 i‡(
rouã
->
π_mërics_mask
 & (1 << (
mëric
 - 1))) {

779 
rouã
->
π_nmërics
--;

780 
rouã
->
π_mërics_mask
 &~(1 << (
mëric
 - 1));

784 
	}
}

786 
	$π∆_rouã_gë_mëric
(
π∆_rouã
 *
rouã
, 
mëric
, 
uöt32_t
 *
vÆue
)

788 i‡(
mëric
 > 
RTAX_MAX
 || metric < 1)

789  -
NLE_RANGE
;

791 i‡(!(
rouã
->
π_mërics_mask
 & (1 << (
mëric
 - 1))))

792  -
NLE_OBJ_NOTFOUND
;

794 i‡(
vÆue
)

795 *
vÆue
 = 
rouã
->
π_mërics
[
mëric
 - 1];

798 
	}
}

800 
	$π∆_rouã_£t_¥ef_§c
(
π∆_rouã
 *
rouã
, 
∆_addr
 *
addr
)

802 i‡(
rouã
->
˚_mask
 & 
ROUTE_ATTR_FAMILY
) {

803 i‡(
addr
->
a_Ámûy
 !
rouã
->
π_Ámûy
)

804  -
NLE_AF_MISMATCH
;

806 
rouã
->
π_Ámûy
 = 
addr
->
a_Ámûy
;

808 i‡(
rouã
->
π_¥ef_§c
)

809 
	`∆_addr_put
(
rouã
->
π_¥ef_§c
);

811 
	`∆_addr_gë
(
addr
);

812 
rouã
->
π_¥ef_§c
 = 
addr
;

813 
rouã
->
˚_mask
 |(
ROUTE_ATTR_PREF_SRC
 | 
ROUTE_ATTR_FAMILY
);

816 
	}
}

818 
∆_addr
 *
	$π∆_rouã_gë_¥ef_§c
(
π∆_rouã
 *
rouã
)

820  
rouã
->
π_¥ef_§c
;

821 
	}
}

823 
	$π∆_rouã_£t_iif
(
π∆_rouã
 *
rouã
, 
ifödex
)

825 
rouã
->
π_iif
 = 
ifödex
;

826 
rouã
->
˚_mask
 |
ROUTE_ATTR_IIF
;

827 
	}
}

829 
	$π∆_rouã_gë_iif
(
π∆_rouã
 *
rouã
)

831  
rouã
->
π_iif
;

832 
	}
}

834 
	$π∆_rouã_add_√xth›
(
π∆_rouã
 *
rouã
, 
π∆_√xth›
 *
nh
)

836 
	`∆_li°_add_èû
(&
nh
->
πnh_li°
, &
rouã
->
π_√xth›s
);

837 
rouã
->
π_ƒ_nh
++;

838 
rouã
->
˚_mask
 |
ROUTE_ATTR_MULTIPATH
;

839 
	}
}

841 
	$π∆_rouã_ªmove_√xth›
(
π∆_rouã
 *
rouã
, 
π∆_√xth›
 *
nh
)

843 i‡(
rouã
->
˚_mask
 & 
ROUTE_ATTR_MULTIPATH
) {

844 
rouã
->
π_ƒ_nh
--;

845 
	`∆_li°_dñ
(&
nh
->
πnh_li°
);

847 
	}
}

849 
∆_li°_hód
 *
	$π∆_rouã_gë_√xth›s
(
π∆_rouã
 *
rouã
)

851 i‡(
rouã
->
˚_mask
 & 
ROUTE_ATTR_MULTIPATH
)

852  &
rouã
->
π_√xth›s
;

854  
NULL
;

855 
	}
}

857 
	$π∆_rouã_gë_¬exth›s
(
π∆_rouã
 *
rouã
)

859 i‡(
rouã
->
˚_mask
 & 
ROUTE_ATTR_MULTIPATH
)

860  
rouã
->
π_ƒ_nh
;

863 
	}
}

865 
π∆_rouã_f‹óch_√xth›
(
π∆_rouã
 *
r
,

866 (*
cb
)(
π∆_√xth›
 *, *),

867 *
¨g
)

869 
π∆_√xth›
 *
nh
;

871 i‡(
r
->
˚_mask
 & 
ROUTE_ATTR_MULTIPATH
) {

872 
	`∆_li°_f‹_óch_íåy
(
nh
, &
r
->
π_√xth›s
, 
πnh_li°
) {

873 
	`cb
(
nh
, 
¨g
);

876 
	}
}

878 
π∆_√xth›
 *
	$π∆_rouã_√xth›_n
(
π∆_rouã
 *
r
, 
n
)

880 
π∆_√xth›
 *
nh
;

881 
uöt32_t
 
i
;

883 i‡(
r
->
˚_mask
 & 
ROUTE_ATTR_MULTIPATH
 &&Ñ->
π_ƒ_nh
 > 
n
) {

884 
i
 = 0;

885 
	`∆_li°_f‹_óch_íåy
(
nh
, &
r
->
π_√xth›s
, 
πnh_li°
) {

886 i‡(
i
 =
n
Ë 
nh
;

887 
i
++;

890  
NULL
;

891 
	}
}

913 
	$π∆_rouã_guess_sc›e
(
π∆_rouã
 *
rouã
)

915 i‡(
rouã
->
π_ty≥
 =
RTN_LOCAL
)

916  
RT_SCOPE_HOST
;

918 i‡(!
	`∆_li°_em±y
(&
rouã
->
π_√xth›s
)) {

919 
π∆_√xth›
 *
nh
;

925 
	`∆_li°_f‹_óch_íåy
(
nh
, &
rouã
->
π_√xth›s
, 
πnh_li°
) {

926 i‡(
nh
->
πnh_g©eway
)

927  
RT_SCOPE_UNIVERSE
;

931  
RT_SCOPE_LINK
;

932 
	}
}

936 
∆a_pﬁicy
 
	grouã_pﬁicy
[
RTA_MAX
+1] = {

937 [
RTA_IIF
] = { .
ty≥
 = 
NLA_U32
 },

938 [
RTA_OIF
] = { .
ty≥
 = 
NLA_U32
 },

939 [
RTA_PRIORITY
] = { .
ty≥
 = 
NLA_U32
 },

940 [
RTA_FLOW
] = { .
ty≥
 = 
NLA_U32
 },

941 [
RTA_CACHEINFO
] = { .
möÀn
 = (
πa_ˇcheöfo
) },

942 [
RTA_METRICS
] = { .
ty≥
 = 
NLA_NESTED
 },

943 [
RTA_MULTIPATH
] = { .
ty≥
 = 
NLA_NESTED
 },

946 
	$∑r£_mu…ù©h
(
π∆_rouã
 *
rouã
, 
∆©å
 *
©å
)

948 
π∆_√xth›
 *
nh
 = 
NULL
;

949 
π√xth›
 *
πnh
 = 
	`∆a_d©a
(
©å
);

950 
size_t
 
éí
 = 
	`∆a_Àn
(
©å
);

951 
îr
;

953 
éí
 >(*
πnh
Ë&&ÅÀ¿>πnh->
πnh_Àn
) {

954 
nh
 = 
	`π∆_rouã_nh_Æloc
();

955 i‡(!
nh
)

956  -
NLE_NOMEM
;

958 
	`π∆_rouã_nh_£t_weight
(
nh
, 
πnh
->
πnh_h›s
);

959 
	`π∆_rouã_nh_£t_ifödex
(
nh
, 
πnh
->
πnh_ifödex
);

960 
	`π∆_rouã_nh_£t_Êags
(
nh
, 
πnh
->
πnh_Êags
);

962 i‡(
πnh
->
πnh_Àn
 > (*rtnh)) {

963 
∆©å
 *
¡b
[
RTA_MAX
 + 1];

965 
îr
 = 
	`∆a_∑r£
(
¡b
, 
RTA_MAX
, (
∆©å
 *)

966 
	`RTNH_DATA
(
πnh
),

967 
πnh
->
πnh_Àn
 - (*rtnh),

968 
rouã_pﬁicy
);

969 i‡(
îr
 < 0)

970 
îrout
;

972 i‡(
¡b
[
RTA_GATEWAY
]) {

973 
∆_addr
 *
addr
;

975 
addr
 = 
	`∆_addr_Æloc_©å
(
¡b
[
RTA_GATEWAY
],

976 
rouã
->
π_Ámûy
);

977 i‡(!
addr
) {

978 
îr
 = -
NLE_NOMEM
;

979 
îrout
;

982 
	`π∆_rouã_nh_£t_g©eway
(
nh
, 
addr
);

983 
	`∆_addr_put
(
addr
);

986 i‡(
¡b
[
RTA_FLOW
]) {

987 
uöt32_t
 
ªÆms
;

989 
ªÆms
 = 
	`∆a_gë_u32
(
¡b
[
RTA_FLOW
]);

990 
	`π∆_rouã_nh_£t_ªÆms
(
nh
, 
ªÆms
);

994 
	`π∆_rouã_add_√xth›
(
rouã
, 
nh
);

995 
éí
 -
	`RTNH_ALIGN
(
πnh
->
πnh_Àn
);

996 
πnh
 = 
	`RTNH_NEXT
(rtnh);

999 
îr
 = 0;

1000 
îrout
:

1001 i‡(
îr
 && 
nh
)

1002 
	`π∆_rouã_nh_‰ì
(
nh
);

1004  
îr
;

1005 
	}
}

1007 
	$π∆_rouã_∑r£
(
∆msghdr
 *
∆h
, 
π∆_rouã
 **
ªsu…
)

1009 
πmsg
 *
πm
;

1010 
π∆_rouã
 *
rouã
;

1011 
∆©å
 *
tb
[
RTA_MAX
 + 1];

1012 
∆_addr
 *
§c
 = 
NULL
, *
d°
 = NULL, *
addr
;

1013 
π∆_√xth›
 *
ﬁd_nh
 = 
NULL
;

1014 
îr
, 
Ámûy
;

1016 
rouã
 = 
	`π∆_rouã_Æloc
();

1017 i‡(!
rouã
) {

1018 
îr
 = -
NLE_NOMEM
;

1019 
îrout
;

1022 
rouã
->
˚_msgty≥
 = 
∆h
->
∆msg_ty≥
;

1024 
îr
 = 
	`∆msg_∑r£
(
∆h
, (
πmsg
), 
tb
, 
RTA_MAX
, 
rouã_pﬁicy
);

1025 i‡(
îr
 < 0)

1026 
îrout
;

1028 
πm
 = 
	`∆msg_d©a
(
∆h
);

1029 
rouã
->
π_Ámûy
 = 
Ámûy
 = 
πm
->
πm_Ámûy
;

1030 
rouã
->
π_tos
 = 
πm
->
πm_tos
;

1031 
rouã
->
π_èbÀ
 = 
πm
->
πm_èbÀ
;

1032 
rouã
->
π_ty≥
 = 
πm
->
πm_ty≥
;

1033 
rouã
->
π_sc›e
 = 
πm
->
πm_sc›e
;

1034 
rouã
->
π_¥Ÿocﬁ
 = 
πm
->
πm_¥Ÿocﬁ
;

1035 
rouã
->
π_Êags
 = 
πm
->
πm_Êags
;

1036 
rouã
->
π_¥io
 = 0;

1038 
rouã
->
˚_mask
 |
ROUTE_ATTR_FAMILY
 | 
ROUTE_ATTR_TOS
 |

1039 
ROUTE_ATTR_TABLE
 | 
ROUTE_ATTR_TYPE
 |

1040 
ROUTE_ATTR_SCOPE
 | 
ROUTE_ATTR_PROTOCOL
 |

1041 
ROUTE_ATTR_FLAGS
 | 
ROUTE_ATTR_PRIO
;

1043 i‡(
tb
[
RTA_DST
]) {

1044 i‡(!(
d°
 = 
	`∆_addr_Æloc_©å
(
tb
[
RTA_DST
], 
Ámûy
)))

1045 
îrout_nomem
;

1047 i‡(!(
d°
 = 
	`∆_addr_Æloc
(0)))

1048 
îrout_nomem
;

1049 
	`∆_addr_£t_Ámûy
(
d°
, 
πm
->
πm_Ámûy
);

1052 
	`∆_addr_£t_¥efixÀn
(
d°
, 
πm
->
πm_d°_Àn
);

1053 
îr
 = 
	`π∆_rouã_£t_d°
(
rouã
, 
d°
);

1054 i‡(
îr
 < 0)

1055 
îrout
;

1057 
	`∆_addr_put
(
d°
);

1059 i‡(
tb
[
RTA_SRC
]) {

1060 i‡(!(
§c
 = 
	`∆_addr_Æloc_©å
(
tb
[
RTA_SRC
], 
Ámûy
)))

1061 
îrout_nomem
;

1062 } i‡(
πm
->
πm_§c_Àn
)

1063 i‡(!(
§c
 = 
	`∆_addr_Æloc
(0)))

1064 
îrout_nomem
;

1066 i‡(
§c
) {

1067 
	`∆_addr_£t_¥efixÀn
(
§c
, 
πm
->
πm_§c_Àn
);

1068 
	`π∆_rouã_£t_§c
(
rouã
, 
§c
);

1069 
	`∆_addr_put
(
§c
);

1072 i‡(
tb
[
RTA_TABLE
])

1073 
	`π∆_rouã_£t_èbÀ
(
rouã
, 
	`∆a_gë_u32
(
tb
[
RTA_TABLE
]));

1075 i‡(
tb
[
RTA_IIF
])

1076 
	`π∆_rouã_£t_iif
(
rouã
, 
	`∆a_gë_u32
(
tb
[
RTA_IIF
]));

1078 i‡(
tb
[
RTA_PRIORITY
])

1079 
	`π∆_rouã_£t_¥i‹ôy
(
rouã
, 
	`∆a_gë_u32
(
tb
[
RTA_PRIORITY
]));

1081 i‡(
tb
[
RTA_PREFSRC
]) {

1082 i‡(!(
addr
 = 
	`∆_addr_Æloc_©å
(
tb
[
RTA_PREFSRC
], 
Ámûy
)))

1083 
îrout_nomem
;

1084 
	`π∆_rouã_£t_¥ef_§c
(
rouã
, 
addr
);

1085 
	`∆_addr_put
(
addr
);

1088 i‡(
tb
[
RTA_METRICS
]) {

1089 
∆©å
 *
mtb
[
RTAX_MAX
 + 1];

1090 
i
;

1092 
îr
 = 
	`∆a_∑r£_√°ed
(
mtb
, 
RTAX_MAX
, 
tb
[
RTA_METRICS
], 
NULL
);

1093 i‡(
îr
 < 0)

1094 
îrout
;

1096 
i
 = 1; i <
RTAX_MAX
; i++) {

1097 i‡(
mtb
[
i
] && 
	`∆a_Àn
(mtb[i]Ë>(
uöt32_t
)) {

1098 
uöt32_t
 
m
 = 
	`∆a_gë_u32
(
mtb
[
i
]);

1099 i‡(
	`π∆_rouã_£t_mëric
(
rouã
, 
i
, 
m
) < 0)

1100 
îrout
;

1105 i‡(
tb
[
RTA_MULTIPATH
])

1106 i‡((
îr
 = 
	`∑r£_mu…ù©h
(
rouã
, 
tb
[
RTA_MULTIPATH
])) < 0)

1107 
îrout
;

1109 i‡(
tb
[
RTA_CACHEINFO
]) {

1110 
	`∆a_mem˝y
(&
rouã
->
π_ˇcheöfo
, 
tb
[
RTA_CACHEINFO
],

1111 (
rouã
->
π_ˇcheöfo
));

1112 
rouã
->
˚_mask
 |
ROUTE_ATTR_CACHEINFO
;

1115 i‡(
tb
[
RTA_OIF
]) {

1116 i‡(!
ﬁd_nh
 && !(ﬁd_nh = 
	`π∆_rouã_nh_Æloc
()))

1117 
îrout
;

1119 
	`π∆_rouã_nh_£t_ifödex
(
ﬁd_nh
, 
	`∆a_gë_u32
(
tb
[
RTA_OIF
]));

1122 i‡(
tb
[
RTA_GATEWAY
]) {

1123 i‡(!
ﬁd_nh
 && !(ﬁd_nh = 
	`π∆_rouã_nh_Æloc
()))

1124 
îrout
;

1126 i‡(!(
addr
 = 
	`∆_addr_Æloc_©å
(
tb
[
RTA_GATEWAY
], 
Ámûy
)))

1127 
îrout_nomem
;

1129 
	`π∆_rouã_nh_£t_g©eway
(
ﬁd_nh
, 
addr
);

1130 
	`∆_addr_put
(
addr
);

1133 i‡(
tb
[
RTA_FLOW
]) {

1134 i‡(!
ﬁd_nh
 && !(ﬁd_nh = 
	`π∆_rouã_nh_Æloc
()))

1135 
îrout
;

1137 
	`π∆_rouã_nh_£t_ªÆms
(
ﬁd_nh
, 
	`∆a_gë_u32
(
tb
[
RTA_FLOW
]));

1140 i‡(
ﬁd_nh
) {

1141 
	`π∆_rouã_nh_£t_Êags
(
ﬁd_nh
, 
πm
->
πm_Êags
 & 0xff);

1142 i‡(
rouã
->
π_ƒ_nh
 == 0) {

1146 
	`π∆_rouã_add_√xth›
(
rouã
, 
ﬁd_nh
);

1150 
π∆_√xth›
 *
fú°
;

1152 
fú°
 = 
	`∆_li°_fú°_íåy
(&
rouã
->
π_√xth›s
,

1153 
π∆_√xth›
,

1154 
πnh_li°
);

1155 i‡(!
fú°
)

1156 
	`BUG
();

1158 i‡(
	`π∆_rouã_nh_com∑ª
(
ﬁd_nh
, 
fú°
,

1159 
ﬁd_nh
->
˚_mask
, 0)) {

1160 
îr
 = -
NLE_INVAL
;

1161 
îrout
;

1164 
	`π∆_rouã_nh_‰ì
(
ﬁd_nh
);

1168 *
ªsu…
 = 
rouã
;

1171 
îrout
:

1172 
	`π∆_rouã_put
(
rouã
);

1173  
îr
;

1175 
îrout_nomem
:

1176 
îr
 = -
NLE_NOMEM
;

1177 
îrout
;

1178 
	}
}

1180 
	$π∆_rouã_buûd_msg
(
∆_msg
 *
msg
, 
π∆_rouã
 *
rouã
)

1182 
i
;

1183 
∆©å
 *
mërics
;

1184 
πmsg
Ñtmsg = {

1185 .
πm_Ámûy
 = 
rouã
->
π_Ámûy
,

1186 .
πm_tos
 = 
rouã
->
π_tos
,

1187 .
πm_èbÀ
 = 
rouã
->
π_èbÀ
,

1188 .
πm_¥Ÿocﬁ
 = 
rouã
->
π_¥Ÿocﬁ
,

1189 .
πm_sc›e
 = 
rouã
->
π_sc›e
,

1190 .
πm_ty≥
 = 
rouã
->
π_ty≥
,

1191 .
πm_Êags
 = 
rouã
->
π_Êags
,

1194 i‡(
rouã
->
π_d°
 =
NULL
)

1195  -
NLE_MISSING_ATTR
;

1197 
πmsg
.
πm_d°_Àn
 = 
	`∆_addr_gë_¥efixÀn
(
rouã
->
π_d°
);

1198 i‡(
rouã
->
π_§c
)

1199 
πmsg
.
πm_§c_Àn
 = 
	`∆_addr_gë_¥efixÀn
(
rouã
->
π_§c
);

1201 i‡(!(
rouã
->
˚_mask
 & 
ROUTE_ATTR_SCOPE
))

1202 
πmsg
.
πm_sc›e
 = 
	`π∆_rouã_guess_sc›e
(
rouã
);

1204 i‡(
	`π∆_rouã_gë_¬exth›s
(
rouã
) == 1) {

1205 
π∆_√xth›
 *
nh
;

1206 
nh
 = 
	`π∆_rouã_√xth›_n
(
rouã
, 0);

1207 
πmsg
.
πm_Êags
 |
nh
->
πnh_Êags
;

1210 i‡(
	`∆msg_≠≥nd
(
msg
, &
πmsg
, ‘tmsg), 
NLMSG_ALIGNTO
) < 0)

1211 
∆a_put_Áûuª
;

1215 
	`NLA_PUT_U32
(
msg
, 
RTA_TABLE
, 
rouã
->
π_èbÀ
);

1217 i‡(
	`∆_addr_gë_Àn
(
rouã
->
π_d°
))

1218 
	`NLA_PUT_ADDR
(
msg
, 
RTA_DST
, 
rouã
->
π_d°
);

1219 
	`NLA_PUT_U32
(
msg
, 
RTA_PRIORITY
, 
rouã
->
π_¥io
);

1221 i‡(
rouã
->
˚_mask
 & 
ROUTE_ATTR_SRC
)

1222 
	`NLA_PUT_ADDR
(
msg
, 
RTA_SRC
, 
rouã
->
π_§c
);

1224 i‡(
rouã
->
˚_mask
 & 
ROUTE_ATTR_PREF_SRC
)

1225 
	`NLA_PUT_ADDR
(
msg
, 
RTA_PREFSRC
, 
rouã
->
π_¥ef_§c
);

1227 i‡(
rouã
->
˚_mask
 & 
ROUTE_ATTR_IIF
)

1228 
	`NLA_PUT_U32
(
msg
, 
RTA_IIF
, 
rouã
->
π_iif
);

1230 i‡(
rouã
->
π_nmërics
 > 0) {

1231 
uöt32_t
 
vÆ
;

1233 
mërics
 = 
	`∆a_√°_°¨t
(
msg
, 
RTA_METRICS
);

1234 i‡(
mërics
 =
NULL
)

1235 
∆a_put_Áûuª
;

1237 
i
 = 1; i <
RTAX_MAX
; i++) {

1238 i‡(!
	`π∆_rouã_gë_mëric
(
rouã
, 
i
, &
vÆ
))

1239 
	`NLA_PUT_U32
(
msg
, 
i
, 
vÆ
);

1242 
	`∆a_√°_íd
(
msg
, 
mërics
);

1245 i‡(
	`π∆_rouã_gë_¬exth›s
(
rouã
) == 1) {

1246 
π∆_√xth›
 *
nh
;

1248 
nh
 = 
	`π∆_rouã_√xth›_n
(
rouã
, 0);

1249 i‡(
nh
->
πnh_g©eway
)

1250 
	`NLA_PUT_ADDR
(
msg
, 
RTA_GATEWAY
, 
nh
->
πnh_g©eway
);

1251 i‡(
nh
->
πnh_ifödex
)

1252 
	`NLA_PUT_U32
(
msg
, 
RTA_OIF
, 
nh
->
πnh_ifödex
);

1253 i‡(
nh
->
πnh_ªÆms
)

1254 
	`NLA_PUT_U32
(
msg
, 
RTA_FLOW
, 
nh
->
πnh_ªÆms
);

1255 } i‡(
	`π∆_rouã_gë_¬exth›s
(
rouã
) > 1) {

1256 
∆©å
 *
mu…ù©h
;

1257 
π∆_√xth›
 *
nh
;

1259 i‡(!(
mu…ù©h
 = 
	`∆a_√°_°¨t
(
msg
, 
RTA_MULTIPATH
)))

1260 
∆a_put_Áûuª
;

1262 
	`∆_li°_f‹_óch_íåy
(
nh
, &
rouã
->
π_√xth›s
, 
πnh_li°
) {

1263 
π√xth›
 *
πnh
;

1265 
πnh
 = 
	`∆msg_ª£rve
(
msg
, (*πnh), 
NLMSG_ALIGNTO
);

1266 i‡(!
πnh
)

1267 
∆a_put_Áûuª
;

1269 
πnh
->
πnh_Êags
 = 
nh
->rtnh_flags;

1270 
πnh
->
πnh_h›s
 = 
nh
->
πnh_weight
;

1271 
πnh
->
πnh_ifödex
 = 
nh
->rtnh_ifindex;

1273 i‡(
nh
->
πnh_g©eway
)

1274 
	`NLA_PUT_ADDR
(
msg
, 
RTA_GATEWAY
,

1275 
nh
->
πnh_g©eway
);

1277 i‡(
nh
->
πnh_ªÆms
)

1278 
	`NLA_PUT_U32
(
msg
, 
RTA_FLOW
, 
nh
->
πnh_ªÆms
);

1280 
πnh
->
πnh_Àn
 = 
	`∆msg_èû
(
msg
->
nm_∆h
) -

1281 (*Ë
πnh
;

1284 
	`∆a_√°_íd
(
msg
, 
mu…ù©h
);

1289 
∆a_put_Áûuª
:

1290  -
NLE_MSGSIZE
;

1291 
	}
}

1294 
∆_obje˘_›s
 
	grouã_obj_›s
 = {

1295 .
oo_«me
 = "route/route",

1296 .
	goo_size
 = (
π∆_rouã
),

1297 .
	goo_c⁄°ru˘‹
 = 
rouã_c⁄°ru˘‹
,

1298 .
	goo_‰ì_d©a
 = 
rouã_‰ì_d©a
,

1299 .
	goo_˛⁄e
 = 
rouã_˛⁄e
,

1300 .
	goo_dump
 = {

1301 [
NL_DUMP_LINE
] = 
rouã_dump_löe
,

1302 [
NL_DUMP_DETAILS
] = 
rouã_dump_dëaûs
,

1303 [
NL_DUMP_STATS
] = 
rouã_dump_°©s
,

1305 .
	goo_com∑ª
 = 
rouã_com∑ª
,

1306 .
	goo_keygí
 = 
rouã_keygí
,

1307 .
	goo_upd©e
 = 
rouã_upd©e
,

1308 .
	goo_©ås2°r
 = 
rouã_©ås2°r
,

1309 .
	goo_id_©ås
 = (
ROUTE_ATTR_FAMILY
 | 
ROUTE_ATTR_TOS
 |

1310 
ROUTE_ATTR_TABLE
 | 
ROUTE_ATTR_DST
 |

1311 
ROUTE_ATTR_PRIO
),

	@mylibnl/libnl-3.2.25/lib/route/route_utils.c

40 
	~<√éök-¥iv©e/√éök.h
>

41 
	~<√éök/√éök.h
>

42 
	~<√éök/utûs.h
>

43 
	~<√éök/rouã/π∆.h
>

44 
	~<√éök/rouã/rouã.h
>

51 
NL_LIST_HEAD
(
èbÀ_«mes
);

53 
	$add_routög_èbÀ_«me
(
id
, c⁄° *
«me
)

55  
	`__å™s_li°_add
(
id
, 
«me
, &
èbÀ_«mes
);

56 
	}
}

58 
__öô
 
	$öô_routög_èbÀ_«mes
()

60 
	`add_routög_èbÀ_«me
(
RT_TABLE_UNSPEC
, "unspec");

61 
	`add_routög_èbÀ_«me
(
RT_TABLE_COMPAT
, "compat");

62 
	`add_routög_èbÀ_«me
(
RT_TABLE_DEFAULT
, "default");

63 
	`add_routög_èbÀ_«me
(
RT_TABLE_MAIN
, "main");

64 
	`add_routög_èbÀ_«me
(
RT_TABLE_LOCAL
, "local");

65 
	}
};

67 
__exô
 
	$ªÀa£_routög_èbÀ_«mes
()

69 
	`__å™s_li°_˛ór
(&
èbÀ_«mes
);

70 
	}
}

72 
	$π∆_rouã_ªad_èbÀ_«mes
(c⁄° *
∑th
)

74 
	`__å™s_li°_˛ór
(&
èbÀ_«mes
);

76  
	`__∆_ªad_num_°r_fûe
(
∑th
, &
add_routög_èbÀ_«me
);

77 
	}
}

79 *
	$π∆_rouã_èbÀ2°r
(
èbÀ
, *
buf
, 
size_t
 
size
)

81  
	`__li°_ty≥2°r
(
èbÀ
, 
buf
, 
size
, &
èbÀ_«mes
);

82 
	}
}

84 
	$π∆_rouã_°r2èbÀ
(c⁄° *
«me
)

86  
	`__li°_°r2ty≥
(
«me
, &
èbÀ_«mes
);

87 
	}
}

97 
NL_LIST_HEAD
(
¥Ÿo_«mes
);

99 
	$add_¥Ÿo_«me
(
id
, c⁄° *
«me
)

101  
	`__å™s_li°_add
(
id
, 
«me
, &
¥Ÿo_«mes
);

102 
	}
}

104 
__öô
 
	$öô_¥Ÿo_«mes
()

106 
	`add_¥Ÿo_«me
(
RTPROT_UNSPEC
, "unspec");

107 
	`add_¥Ÿo_«me
(
RTPROT_REDIRECT
, "redirect");

108 
	`add_¥Ÿo_«me
(
RTPROT_KERNEL
, "kernel");

109 
	`add_¥Ÿo_«me
(
RTPROT_BOOT
, "boot");

110 
	`add_¥Ÿo_«me
(
RTPROT_STATIC
, "static");

111 
	}
};

113 
__exô
 
	$ªÀa£_¥Ÿo_«mes
()

115 
	`__å™s_li°_˛ór
(&
¥Ÿo_«mes
);

116 
	}
}

118 
	$π∆_rouã_ªad_¥Ÿocﬁ_«mes
(c⁄° *
∑th
)

120 
	`__å™s_li°_˛ór
(&
¥Ÿo_«mes
);

122  
	`__∆_ªad_num_°r_fûe
(
∑th
, &
add_¥Ÿo_«me
);

123 
	}
}

125 *
	$π∆_rouã_¥Ÿo2°r
(
¥Ÿo
, *
buf
, 
size_t
 
size
)

127  
	`__li°_ty≥2°r
(
¥Ÿo
, 
buf
, 
size
, &
¥Ÿo_«mes
);

128 
	}
}

130 
	$π∆_rouã_°r2¥Ÿo
(c⁄° *
«me
)

132  
	`__li°_°r2ty≥
(
«me
, &
¥Ÿo_«mes
);

133 
	}
}

142 c⁄° 
å™s_tbl
 
	grouã_mëri˚s
[] = {

143 
__ADD
(
RTAX_UNSPEC
, 
un•ec
)

144 
__ADD
(
RTAX_LOCK
, 
lock
)

145 
__ADD
(
RTAX_MTU
, 
mtu
)

146 
__ADD
(
RTAX_WINDOW
, 
wödow
)

147 
__ADD
(
RTAX_RTT
, 
πt
)

148 
__ADD
(
RTAX_RTTVAR
, 
πtv¨
)

149 
__ADD
(
RTAX_SSTHRESH
, 
s°hªsh
)

150 
__ADD
(
RTAX_CWND
, 
cwnd
)

151 
__ADD
(
RTAX_ADVMSS
, 
advmss
)

152 
__ADD
(
RTAX_REORDERING
, 
ª‹dîög
)

153 
__ADD
(
RTAX_HOPLIMIT
, 
h›limô
)

154 
__ADD
(
RTAX_INITCWND
, 
öôcwnd
)

155 
__ADD
(
RTAX_FEATURES
, 
„©uªs
)

158 *
	$π∆_rouã_mëric2°r
(
mëric
, *
buf
, 
size_t
 
size
)

160  
	`__ty≥2°r
(
mëric
, 
buf
, 
size
, 
rouã_mëri˚s
,

161 
	`ARRAY_SIZE
(
rouã_mëri˚s
));

162 
	}
}

164 
	$π∆_rouã_°r2mëric
(c⁄° *
«me
)

166  
	`__°r2ty≥
(
«me
, 
rouã_mëri˚s
, 
	`ARRAY_SIZE
(route_metrices));

167 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/rtnl.c

17 
	~<√éök-¥iv©e/√éök.h
>

18 
	~<√éök/√éök.h
>

19 
	~<√éök/utûs.h
>

20 
	~<√éök/rouã/π∆.h
>

41 
	$∆_πgí_ªque°
(
∆_sock
 *
sk
, 
ty≥
, 
Ámûy
, 
Êags
)

43 
îr
;

44 
πgímsg
 
gmsg
 = {

45 .
πgí_Ámûy
 = 
Ámûy
,

48 
îr
 = 
	`∆_£nd_sim∂e
(
sk
, 
ty≥
, 
Êags
, &
gmsg
, (gmsg));

50  
îr
 >= 0 ? 0 :Érr;

51 
	}
}

60 c⁄° 
å™s_tbl
 
	gπ¡y≥s
[] = {

61 
__ADD
(
RTN_UNSPEC
,
un•ec
)

62 
__ADD
(
RTN_UNICAST
,
uniˇ°
)

63 
__ADD
(
RTN_LOCAL
,
loˇl
)

64 
__ADD
(
RTN_BROADCAST
,
brﬂdˇ°
)

65 
__ADD
(
RTN_ANYCAST
,
™yˇ°
)

66 
__ADD
(
RTN_MULTICAST
,
mu…iˇ°
)

67 
__ADD
(
RTN_BLACKHOLE
,
bœckhﬁe
)

68 
__ADD
(
RTN_UNREACHABLE
,
uƒóchabÀ
)

69 
__ADD
(
RTN_PROHIBIT
,
¥ohibô
)

70 
__ADD
(
RTN_THROW
,
throw
)

71 
__ADD
(
RTN_NAT
,
«t
)

72 
__ADD
(
RTN_XRESOLVE
,
xªsﬁve
)

75 *
	$∆_π¡y≥2°r
(
ty≥
, *
buf
, 
size_t
 
size
)

77  
	`__ty≥2°r
(
ty≥
, 
buf
, 
size
, 
π¡y≥s
, 
	`ARRAY_SIZE
(rtntypes));

78 
	}
}

80 
	$∆_°r2π¡y≥
(c⁄° *
«me
)

82  
	`__°r2ty≥
(
«me
, 
π¡y≥s
, 
	`ARRAY_SIZE
(rtntypes));

83 
	}
}

92 c⁄° 
å™s_tbl
 
	gsc›es
[] = {

93 
__ADD
(255,
nowhîe
)

94 
__ADD
(254,
ho°
)

95 
__ADD
(253,
lök
)

96 
__ADD
(200,
sôe
)

97 
__ADD
(0,
globÆ
)

100 *
	$π∆_sc›e2°r
(
sc›e
, *
buf
, 
size_t
 
size
)

102  
	`__ty≥2°r
(
sc›e
, 
buf
, 
size
, 
sc›es
, 
	`ARRAY_SIZE
(scopes));

103 
	}
}

105 
	$π∆_°r2sc›e
(c⁄° *
«me
)

107  
	`__°r2ty≥
(
«me
, 
sc›es
, 
	`ARRAY_SIZE
(scopes));

108 
	}
}

117 * 
	$π∆_ªÆms2°r
(
uöt32_t
 
ªÆms
, *
buf
, 
size_t
 
Àn
)

119 
‰om
 = 
	`RTNL_REALM_FROM
(
ªÆms
);

120 
to
 = 
	`RTNL_REALM_TO
(
ªÆms
);

122 
	`¢¥ötf
(
buf
, 
Àn
, "%d/%d", 
‰om
, 
to
);

124  
buf
;

125 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/rule.c

19 
	~<√éök-¥iv©e/√éök.h
>

20 
	~<√éök/√éök.h
>

21 
	~<√éök/utûs.h
>

22 
	~<√éök/rouã/π∆.h
>

23 
	~<√éök/rouã/ruÀ.h
>

24 
	~<öây≥s.h
>

27 
	#RULE_ATTR_FAMILY
 0x0001

	)

28 
	#RULE_ATTR_TABLE
 0x0002

	)

29 
	#RULE_ATTR_ACTION
 0x0004

	)

30 
	#RULE_ATTR_FLAGS
 0x0008

	)

31 
	#RULE_ATTR_IIFNAME
 0x0010

	)

32 
	#RULE_ATTR_OIFNAME
 0x0020

	)

33 
	#RULE_ATTR_PRIO
 0x0040

	)

34 
	#RULE_ATTR_MARK
 0x0080

	)

35 
	#RULE_ATTR_MASK
 0x0100

	)

36 
	#RULE_ATTR_GOTO
 0x0200

	)

37 
	#RULE_ATTR_SRC
 0x0400

	)

38 
	#RULE_ATTR_DST
 0x0800

	)

39 
	#RULE_ATTR_DSFIELD
 0x1000

	)

40 
	#RULE_ATTR_FLOW
 0x2000

	)

42 
∆_ˇche_›s
 
	gπ∆_ruÀ_›s
;

43 
∆_obje˘_›s
 
	gruÀ_obj_›s
;

46 
	$ruÀ_‰ì_d©a
(
∆_obje˘
 *
c
)

48 
π∆_ruÀ
 *
ruÀ
 = 
	`∆_obje˘_¥iv
(
c
);

50 i‡(!
ruÀ
)

53 
	`∆_addr_put
(
ruÀ
->
r_§c
);

54 
	`∆_addr_put
(
ruÀ
->
r_d°
);

55 
	}
}

57 
	$ruÀ_˛⁄e
(
∆_obje˘
 *
_d°
, ∆_obje˘ *
_§c
)

59 
π∆_ruÀ
 *
d°
 = 
	`∆_obje˘_¥iv
(
_d°
);

60 
π∆_ruÀ
 *
§c
 = 
	`∆_obje˘_¥iv
(
_§c
);

62 i‡(
§c
->
r_§c
)

63 i‡(!(
d°
->
r_§c
 = 
	`∆_addr_˛⁄e
(
§c
->r_src)))

64  -
NLE_NOMEM
;

66 i‡(
§c
->
r_d°
)

67 i‡(!(
d°
->
r_d°
 = 
	`∆_addr_˛⁄e
(
§c
->r_dst)))

68  -
NLE_NOMEM
;

71 
	}
}

73 
∆a_pﬁicy
 
	gruÀ_pﬁicy
[
FRA_MAX
+1] = {

74 [
FRA_TABLE
] = { .
ty≥
 = 
NLA_U32
 },

75 [
FRA_IIFNAME
] = { .
ty≥
 = 
NLA_STRING
, .
	gmaxÀn
 = 
IFNAMSIZ
 },

76 [
FRA_OIFNAME
] = { .
ty≥
 = 
NLA_STRING
, .
	gmaxÀn
 = 
IFNAMSIZ
 },

77 [
FRA_PRIORITY
] = { .
ty≥
 = 
NLA_U32
 },

78 [
FRA_FWMARK
] = { .
ty≥
 = 
NLA_U32
 },

79 [
FRA_FWMASK
] = { .
ty≥
 = 
NLA_U32
 },

80 [
FRA_GOTO
] = { .
ty≥
 = 
NLA_U32
 },

81 [
FRA_FLOW
] = { .
ty≥
 = 
NLA_U32
 },

84 
	$ruÀ_msg_∑r£r
(
∆_ˇche_›s
 *
›s
, 
sockaddr_∆
 *
who
,

85 
∆msghdr
 *
n
, 
∆_∑r£r_∑øm
 *
µ
)

87 
π∆_ruÀ
 *
ruÀ
;

88 
fib_ruÀ_hdr
 *
‰h
;

89 
∆©å
 *
tb
[
FRA_MAX
+1];

90 
îr
 = 1, 
Ámûy
;

92 
ruÀ
 = 
	`π∆_ruÀ_Æloc
();

93 i‡(!
ruÀ
) {

94 
îr
 = -
NLE_NOMEM
;

95 
îrout
;

98 
ruÀ
->
˚_msgty≥
 = 
n
->
∆msg_ty≥
;

99 
‰h
 = 
	`∆msg_d©a
(
n
);

101 
îr
 = 
	`∆msg_∑r£
(
n
, (*
‰h
), 
tb
, 
FRA_MAX
, 
ruÀ_pﬁicy
);

102 i‡(
îr
 < 0)

103 
îrout
;

105 
ruÀ
->
r_Ámûy
 = 
Ámûy
 = 
‰h
->family;

106 
ruÀ
->
r_èbÀ
 = 
‰h
->
èbÀ
;

107 
ruÀ
->
r_a˘i⁄
 = 
‰h
->
a˘i⁄
;

108 
ruÀ
->
r_Êags
 = 
‰h
->
Êags
;

110 
ruÀ
->
˚_mask
 = (
RULE_ATTR_FAMILY
 | 
RULE_ATTR_TABLE
 | 
RULE_ATTR_ACTION
 |

111 
RULE_ATTR_FLAGS
);

114 i‡(
‰h
->
tos
) {

115 
ruÀ
->
r_dsfõld
 = 
‰h
->
tos
;

116 
ruÀ
->
˚_mask
 |
RULE_ATTR_DSFIELD
;

119 i‡(
tb
[
FRA_TABLE
]) {

120 
ruÀ
->
r_èbÀ
 = 
	`∆a_gë_u32
(
tb
[
FRA_TABLE
]);

121 
ruÀ
->
˚_mask
 |
RULE_ATTR_TABLE
;

124 i‡(
tb
[
FRA_IIFNAME
]) {

125 
	`∆a_°æ˝y
(
ruÀ
->
r_ii‚ame
, 
tb
[
FRA_IIFNAME
], 
IFNAMSIZ
);

126 
ruÀ
->
˚_mask
 |
RULE_ATTR_IIFNAME
;

129 i‡(
tb
[
FRA_OIFNAME
]) {

130 
	`∆a_°æ˝y
(
ruÀ
->
r_oi‚ame
, 
tb
[
FRA_OIFNAME
], 
IFNAMSIZ
);

131 
ruÀ
->
˚_mask
 |
RULE_ATTR_OIFNAME
;

134 i‡(
tb
[
FRA_PRIORITY
]) {

135 
ruÀ
->
r_¥io
 = 
	`∆a_gë_u32
(
tb
[
FRA_PRIORITY
]);

136 
ruÀ
->
˚_mask
 |
RULE_ATTR_PRIO
;

139 i‡(
tb
[
FRA_FWMARK
]) {

140 
ruÀ
->
r_m¨k
 = 
	`∆a_gë_u32
(
tb
[
FRA_FWMARK
]);

141 
ruÀ
->
˚_mask
 |
RULE_ATTR_MARK
;

144 i‡(
tb
[
FRA_FWMASK
]) {

145 
ruÀ
->
r_mask
 = 
	`∆a_gë_u32
(
tb
[
FRA_FWMASK
]);

146 
ruÀ
->
˚_mask
 |
RULE_ATTR_MASK
;

149 i‡(
tb
[
FRA_GOTO
]) {

150 
ruÀ
->
r_gŸo
 = 
	`∆a_gë_u32
(
tb
[
FRA_GOTO
]);

151 
ruÀ
->
˚_mask
 |
RULE_ATTR_GOTO
;

154 i‡(
tb
[
FRA_SRC
]) {

155 i‡(!(
ruÀ
->
r_§c
 = 
	`∆_addr_Æloc_©å
(
tb
[
FRA_SRC
], 
Ámûy
)))

156 
îrout_íomem
;

158 
	`∆_addr_£t_¥efixÀn
(
ruÀ
->
r_§c
, 
‰h
->
§c_Àn
);

159 
ruÀ
->
˚_mask
 |
RULE_ATTR_SRC
;

162 i‡(
tb
[
FRA_DST
]) {

163 i‡(!(
ruÀ
->
r_d°
 = 
	`∆_addr_Æloc_©å
(
tb
[
FRA_DST
], 
Ámûy
)))

164 
îrout_íomem
;

165 
	`∆_addr_£t_¥efixÀn
(
ruÀ
->
r_d°
, 
‰h
->
d°_Àn
);

166 
ruÀ
->
˚_mask
 |
RULE_ATTR_DST
;

170 i‡(
tb
[
FRA_FLOW
]) {

171 
ruÀ
->
r_Êow
 = 
	`∆a_gë_u32
(
tb
[
FRA_FLOW
]);

172 
ruÀ
->
˚_mask
 |
RULE_ATTR_FLOW
;

175 
îr
 = 
µ
->
	`µ_cb
((
∆_obje˘
 *Ë
ruÀ
,Öp);

176 
îrout
:

177 
	`π∆_ruÀ_put
(
ruÀ
);

178  
îr
;

180 
îrout_íomem
:

181 
îr
 = -
NLE_NOMEM
;

182 
îrout
;

183 
	}
}

185 
	$ruÀ_ªque°_upd©e
(
∆_ˇche
 *
c
, 
∆_sock
 *
h
)

187  
	`∆_πgí_ªque°
(
h
, 
RTM_GETRULE
, 
AF_UNSPEC
, 
NLM_F_DUMP
);

188 
	}
}

190 
	$ruÀ_dump_löe
(
∆_obje˘
 *
o
, 
∆_dump_∑øms
 *
p
)

192 
π∆_ruÀ
 *
r
 = (π∆_ruÀ *Ë
o
;

193 
buf
[128];

195 
	`∆_dump_löe
(
p
, "%8d ", (
r
->
˚_mask
 & 
RULE_ATTR_PRIO
Ë?Ñ->
r_¥io
 : 0);

196 
	`∆_dump
(
p
, "%†", 
	`∆_af2°r
(
r
->
r_Ámûy
, 
buf
, (buf)));

198 i‡(
r
->
˚_mask
 & 
RULE_ATTR_SRC
)

199 
	`∆_dump
(
p
, "from %s ",

200 
	`∆_addr2°r
(
r
->
r_§c
, 
buf
, (buf)));

202 i‡(
r
->
˚_mask
 & 
RULE_ATTR_DST
)

203 
	`∆_dump
(
p
, "to %s ",

204 
	`∆_addr2°r
(
r
->
r_d°
, 
buf
, (buf)));

206 i‡(
r
->
˚_mask
 & 
RULE_ATTR_DSFIELD
)

207 
	`∆_dump
(
p
, "to†%u ", 
r
->
r_dsfõld
);

209 i‡(
r
->
˚_mask
 & (
RULE_ATTR_MARK
 | 
RULE_ATTR_MASK
))

210 
	`∆_dump
(
p
, "m¨k %#x/%#x", 
r
->
r_m¨k
,Ñ->
r_mask
);

212 i‡(
r
->
˚_mask
 & 
RULE_ATTR_IIFNAME
)

213 
	`∆_dump
(
p
, "ii‡%†", 
r
->
r_ii‚ame
);

215 i‡(
r
->
˚_mask
 & 
RULE_ATTR_OIFNAME
)

216 
	`∆_dump
(
p
, "oi‡%†", 
r
->
r_oi‚ame
);

218 i‡(
r
->
˚_mask
 & 
RULE_ATTR_TABLE
)

219 
	`∆_dump
(
p
, "lookup %s ",

220 
	`π∆_rouã_èbÀ2°r
(
r
->
r_èbÀ
, 
buf
, (buf)));

222 i‡(
r
->
˚_mask
 & 
RULE_ATTR_FLOW
)

223 
	`∆_dump
(
p
, "flow %s ",

224 
	`π∆_ªÆms2°r
(
r
->
r_Êow
, 
buf
, (buf)));

226 i‡(
r
->
˚_mask
 & 
RULE_ATTR_GOTO
)

227 
	`∆_dump
(
p
, "gŸÿ%u ", 
r
->
r_gŸo
);

229 i‡(
r
->
˚_mask
 & 
RULE_ATTR_ACTION
)

230 
	`∆_dump
(
p
, "action %s",

231 
	`∆_π¡y≥2°r
(
r
->
r_a˘i⁄
, 
buf
, (buf)));

233 
	`∆_dump
(
p
, "\n");

234 
	}
}

236 
	$ruÀ_dump_dëaûs
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
p
)

238 
	`ruÀ_dump_löe
(
obj
, 
p
);

239 
	}
}

241 
	$ruÀ_dump_°©s
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
p
)

243 
	`ruÀ_dump_dëaûs
(
obj
, 
p
);

244 
	}
}

246 
	#RULE_ATTR_FLAGS
 0x0008

	)

248 
	$ruÀ_com∑ª
(
∆_obje˘
 *
_a
, ∆_obje˘ *
_b
,

249 
uöt32_t
 
©ås
, 
Êags
)

251 
π∆_ruÀ
 *
a
 = (π∆_ruÀ *Ë
_a
;

252 
π∆_ruÀ
 *
b
 = (π∆_ruÀ *Ë
_b
;

253 
diff
 = 0;

255 
	#RULE_DIFF
(
ATTR
, 
EXPR
Ë
	`ATTR_DIFF
(
©ås
, 
RULE_ATTR_
##ATTR, 
a
, 
b
, EXPR)

	)

257 
diff
 |
	`RULE_DIFF
(
FAMILY
, 
a
->
r_Ámûy
 !
b
->r_family);

258 
diff
 |
	`RULE_DIFF
(
TABLE
, 
a
->
r_èbÀ
 !
b
->r_table);

259 
diff
 |
	`RULE_DIFF
(
ACTION
, 
a
->
r_a˘i⁄
 !
b
->r_action);

260 
diff
 |
	`RULE_DIFF
(
IIFNAME
, 
	`°rcmp
(
a
->
r_ii‚ame
, 
b
->r_iifname));

261 
diff
 |
	`RULE_DIFF
(
OIFNAME
, 
	`°rcmp
(
a
->
r_oi‚ame
, 
b
->r_oifname));

262 
diff
 |
	`RULE_DIFF
(
PRIO
, 
a
->
r_¥io
 !
b
->r_prio);

263 
diff
 |
	`RULE_DIFF
(
MARK
, 
a
->
r_m¨k
 !
b
->r_mark);

264 
diff
 |
	`RULE_DIFF
(
MASK
, 
a
->
r_mask
 !
b
->r_mask);

265 
diff
 |
	`RULE_DIFF
(
GOTO
, 
a
->
r_gŸo
 !
b
->r_goto);

266 
diff
 |
	`RULE_DIFF
(
SRC
, 
	`∆_addr_cmp
(
a
->
r_§c
, 
b
->r_src));

267 
diff
 |
	`RULE_DIFF
(
DST
, 
	`∆_addr_cmp
(
a
->
r_d°
, 
b
->r_dst));

268 
diff
 |
	`RULE_DIFF
(
DSFIELD
, 
a
->
r_dsfõld
 !
b
->r_dsfield);

269 
diff
 |
	`RULE_DIFF
(
FLOW
, 
a
->
r_Êow
 !
b
->r_flow);

271 #unde‡
RULE_DIFF


273  
diff
;

274 
	}
}

276 c⁄° 
å™s_tbl
 
	gruÀ_©ås
[] = {

277 
__ADD
(
RULE_ATTR_FAMILY
, 
Ámûy
)

278 
__ADD
(
RULE_ATTR_TABLE
, 
èbÀ
)

279 
__ADD
(
RULE_ATTR_ACTION
, 
a˘i⁄
)

280 
__ADD
(
RULE_ATTR_IIFNAME
, 
ii‚ame
)

281 
__ADD
(
RULE_ATTR_OIFNAME
, 
oi‚ame
)

282 
__ADD
(
RULE_ATTR_PRIO
, 
¥io
)

283 
__ADD
(
RULE_ATTR_MARK
, 
m¨k
)

284 
__ADD
(
RULE_ATTR_MASK
, 
mask
)

285 
__ADD
(
RULE_ATTR_GOTO
, )

286 
__ADD
(
RULE_ATTR_SRC
, 
§c
)

287 
__ADD
(
RULE_ATTR_DST
, 
d°
)

288 
__ADD
(
RULE_ATTR_DSFIELD
, 
dsfõld
)

289 
__ADD
(
RULE_ATTR_FLOW
, 
Êow
)

292 *
	$ruÀ_©ås2°r
(
©ås
, *
buf
, 
size_t
 
Àn
)

294  
	`__Êags2°r
(
©ås
, 
buf
, 
Àn
, 
ruÀ_©ås
,

295 
	`ARRAY_SIZE
(
ruÀ_©ås
));

296 
	}
}

303 
π∆_ruÀ
 *
	$π∆_ruÀ_Æloc
()

305  (
π∆_ruÀ
 *Ë
	`∆_obje˘_Æloc
(&
ruÀ_obj_›s
);

306 
	}
}

308 
	$π∆_ruÀ_put
(
π∆_ruÀ
 *
ruÀ
)

310 
	`∆_obje˘_put
((
∆_obje˘
 *Ë
ruÀ
);

311 
	}
}

331 
	$π∆_ruÀ_Æloc_ˇche
(
∆_sock
 *
sock
, 
Ámûy
,

332 
∆_ˇche
 **
ªsu…
)

334 
∆_ˇche
 * 
ˇche
;

335 
îr
;

337 i‡(!(
ˇche
 = 
	`∆_ˇche_Æloc
(&
π∆_ruÀ_›s
)))

338  -
NLE_NOMEM
;

340 
ˇche
->
c_ürg1
 = 
Ámûy
;

342 i‡(
sock
 && (
îr
 = 
	`∆_ˇche_ªfûl
(sock, 
ˇche
)) < 0) {

343 
	`‰ì
(
ˇche
);

344  
îr
;

347 *
ªsu…
 = 
ˇche
;

349 
	}
}

358 
	$buûd_ruÀ_msg
(
π∆_ruÀ
 *
tm∂
, 
cmd
, 
Êags
,

359 
∆_msg
 **
ªsu…
)

361 
∆_msg
 *
msg
;

362 
fib_ruÀ_hdr
 
‰h
 = {

363 .
Ámûy
 = 
tm∂
->
r_Ámûy
,

364 .
èbÀ
 = 
tm∂
->
r_èbÀ
,

365 .
a˘i⁄
 = 
tm∂
->
r_a˘i⁄
,

366 .
Êags
 = 
tm∂
->
r_Êags
,

367 .
tos
 = 
tm∂
->
r_dsfõld
,

370 i‡(!(
tm∂
->
˚_mask
 & 
RULE_ATTR_FAMILY
))

371  -
NLE_MISSING_ATTR
;

373 
msg
 = 
	`∆msg_Æloc_sim∂e
(
cmd
, 
Êags
);

374 i‡(!
msg
)

375  -
NLE_NOMEM
;

377 i‡(
tm∂
->
˚_mask
 & 
RULE_ATTR_SRC
)

378 
‰h
.
§c_Àn
 = 
	`∆_addr_gë_¥efixÀn
(
tm∂
->
r_§c
);

380 i‡(
tm∂
->
˚_mask
 & 
RULE_ATTR_DST
)

381 
‰h
.
d°_Àn
 = 
	`∆_addr_gë_¥efixÀn
(
tm∂
->
r_d°
);

383 i‡(
	`∆msg_≠≥nd
(
msg
, &
‰h
, (‰h), 
NLMSG_ALIGNTO
) < 0)

384 
∆a_put_Áûuª
;

388 
	`NLA_PUT_U32
(
msg
, 
FRA_TABLE
, 
tm∂
->
r_èbÀ
);

390 i‡(
tm∂
->
˚_mask
 & 
RULE_ATTR_SRC
)

391 
	`NLA_PUT_ADDR
(
msg
, 
FRA_SRC
, 
tm∂
->
r_§c
);

393 i‡(
tm∂
->
˚_mask
 & 
RULE_ATTR_DST
)

394 
	`NLA_PUT_ADDR
(
msg
, 
FRA_DST
, 
tm∂
->
r_d°
);

396 i‡(
tm∂
->
˚_mask
 & 
RULE_ATTR_IIFNAME
)

397 
	`NLA_PUT_STRING
(
msg
, 
FRA_IIFNAME
, 
tm∂
->
r_ii‚ame
);

399 i‡(
tm∂
->
˚_mask
 & 
RULE_ATTR_OIFNAME
)

400 
	`NLA_PUT_STRING
(
msg
, 
FRA_OIFNAME
, 
tm∂
->
r_oi‚ame
);

402 i‡(
tm∂
->
˚_mask
 & 
RULE_ATTR_PRIO
)

403 
	`NLA_PUT_U32
(
msg
, 
FRA_PRIORITY
, 
tm∂
->
r_¥io
);

405 i‡(
tm∂
->
˚_mask
 & 
RULE_ATTR_MARK
)

406 
	`NLA_PUT_U32
(
msg
, 
FRA_FWMARK
, 
tm∂
->
r_m¨k
);

408 i‡(
tm∂
->
˚_mask
 & 
RULE_ATTR_MASK
)

409 
	`NLA_PUT_U32
(
msg
, 
FRA_FWMASK
, 
tm∂
->
r_mask
);

411 i‡(
tm∂
->
˚_mask
 & 
RULE_ATTR_GOTO
)

412 
	`NLA_PUT_U32
(
msg
, 
FRA_GOTO
, 
tm∂
->
r_gŸo
);

414 i‡(
tm∂
->
˚_mask
 & 
RULE_ATTR_FLOW
)

415 
	`NLA_PUT_U32
(
msg
, 
FRA_FLOW
, 
tm∂
->
r_Êow
);

418 *
ªsu…
 = 
msg
;

421 
∆a_put_Áûuª
:

422 
	`∆msg_‰ì
(
msg
);

423  -
NLE_MSGSIZE
;

424 
	}
}

440 
	$π∆_ruÀ_buûd_add_ªque°
(
π∆_ruÀ
 *
tm∂
, 
Êags
,

441 
∆_msg
 **
ªsu…
)

443  
	`buûd_ruÀ_msg
(
tm∂
, 
RTM_NEWRULE
, 
NLM_F_CREATE
 | 
Êags
,

444 
ªsu…
);

445 
	}
}

459 
	$π∆_ruÀ_add
(
∆_sock
 *
sk
, 
π∆_ruÀ
 *
tm∂
, 
Êags
)

461 
∆_msg
 *
msg
;

462 
îr
;

464 i‡((
îr
 = 
	`π∆_ruÀ_buûd_add_ªque°
(
tm∂
, 
Êags
, &
msg
)) < 0)

465  
îr
;

467 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sk
, 
msg
);

468 
	`∆msg_‰ì
(
msg
);

469 i‡(
îr
 < 0)

470  
îr
;

472  
	`waô_f‹_ack
(
sk
);

473 
	}
}

496 
	$π∆_ruÀ_buûd_dñëe_ªque°
(
π∆_ruÀ
 *
ruÀ
, 
Êags
,

497 
∆_msg
 **
ªsu…
)

499  
	`buûd_ruÀ_msg
(
ruÀ
, 
RTM_DELRULE
, 
Êags
, 
ªsu…
);

500 
	}
}

514 
	$π∆_ruÀ_dñëe
(
∆_sock
 *
sk
, 
π∆_ruÀ
 *
ruÀ
, 
Êags
)

516 
∆_msg
 *
msg
;

517 
îr
;

519 i‡((
îr
 = 
	`π∆_ruÀ_buûd_dñëe_ªque°
(
ruÀ
, 
Êags
, &
msg
)) < 0)

520  
îr
;

522 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sk
, 
msg
);

523 
	`∆msg_‰ì
(
msg
);

524 i‡(
îr
 < 0)

525  
îr
;

527  
	`waô_f‹_ack
(
sk
);

528 
	}
}

537 
	$π∆_ruÀ_£t_Ámûy
(
π∆_ruÀ
 *
ruÀ
, 
Ámûy
)

539 
ruÀ
->
r_Ámûy
 = 
Ámûy
;

540 
ruÀ
->
˚_mask
 |
RULE_ATTR_FAMILY
;

541 
	}
}

543 
	$π∆_ruÀ_gë_Ámûy
(
π∆_ruÀ
 *
ruÀ
)

545 i‡(
ruÀ
->
˚_mask
 & 
RULE_ATTR_FAMILY
)

546  
ruÀ
->
r_Ámûy
;

548  
AF_UNSPEC
;

549 
	}
}

551 
	$π∆_ruÀ_£t_¥io
(
π∆_ruÀ
 *
ruÀ
, 
uöt32_t
 
¥io
)

553 
ruÀ
->
r_¥io
 = 
¥io
;

554 
ruÀ
->
˚_mask
 |
RULE_ATTR_PRIO
;

555 
	}
}

557 
uöt32_t
 
	$π∆_ruÀ_gë_¥io
(
π∆_ruÀ
 *
ruÀ
)

559  
ruÀ
->
r_¥io
;

560 
	}
}

562 
	$π∆_ruÀ_£t_m¨k
(
π∆_ruÀ
 *
ruÀ
, 
uöt32_t
 
m¨k
)

564 
ruÀ
->
r_m¨k
 = 
m¨k
;

565 
ruÀ
->
˚_mask
 |
RULE_ATTR_MARK
;

566 
	}
}

568 
uöt32_t
 
	$π∆_ruÀ_gë_m¨k
(
π∆_ruÀ
 *
ruÀ
)

570  
ruÀ
->
r_m¨k
;

571 
	}
}

573 
	$π∆_ruÀ_£t_mask
(
π∆_ruÀ
 *
ruÀ
, 
uöt32_t
 
mask
)

575 
ruÀ
->
r_mask
 = 
mask
;

576 
ruÀ
->
˚_mask
 |
RULE_ATTR_MASK
;

577 
	}
}

579 
uöt32_t
 
	$π∆_ruÀ_gë_mask
(
π∆_ruÀ
 *
ruÀ
)

581  
ruÀ
->
r_mask
;

582 
	}
}

584 
	$π∆_ruÀ_£t_èbÀ
(
π∆_ruÀ
 *
ruÀ
, 
uöt32_t
 
èbÀ
)

586 
ruÀ
->
r_èbÀ
 = 
èbÀ
;

587 
ruÀ
->
˚_mask
 |
RULE_ATTR_TABLE
;

588 
	}
}

590 
uöt32_t
 
	$π∆_ruÀ_gë_èbÀ
(
π∆_ruÀ
 *
ruÀ
)

592  
ruÀ
->
r_èbÀ
;

593 
	}
}

595 
	$π∆_ruÀ_£t_dsfõld
(
π∆_ruÀ
 *
ruÀ
, 
uöt8_t
 
dsfõld
)

597 
ruÀ
->
r_dsfõld
 = 
dsfõld
;

598 
ruÀ
->
˚_mask
 |
RULE_ATTR_DSFIELD
;

599 
	}
}

601 
uöt8_t
 
	$π∆_ruÀ_gë_dsfõld
(
π∆_ruÀ
 *
ruÀ
)

603  
ruÀ
->
r_dsfõld
;

604 
	}
}

606 
ölöe
 
	$__assign_addr
(
π∆_ruÀ
 *
ruÀ
, 
∆_addr
 **
pos
,

607 
∆_addr
 *
√w
, 
Êag
)

609 i‡(
ruÀ
->
˚_mask
 & 
RULE_ATTR_FAMILY
) {

610 i‡(
√w
->
a_Ámûy
 !
ruÀ
->
r_Ámûy
)

611  -
NLE_AF_MISMATCH
;

613 
ruÀ
->
r_Ámûy
 = 
√w
->
a_Ámûy
;

615 i‡(*
pos
)

616 
	`∆_addr_put
(*
pos
);

618 
	`∆_addr_gë
(
√w
);

619 *
pos
 = 
√w
;

621 
ruÀ
->
˚_mask
 |(
Êag
 | 
RULE_ATTR_FAMILY
);

624 
	}
}

626 
	$π∆_ruÀ_£t_§c
(
π∆_ruÀ
 *
ruÀ
, 
∆_addr
 *
§c
)

628  
	`__assign_addr
(
ruÀ
, &ruÀ->
r_§c
, 
§c
, 
RULE_ATTR_SRC
);

629 
	}
}

631 
∆_addr
 *
	$π∆_ruÀ_gë_§c
(
π∆_ruÀ
 *
ruÀ
)

633  
ruÀ
->
r_§c
;

634 
	}
}

636 
	$π∆_ruÀ_£t_d°
(
π∆_ruÀ
 *
ruÀ
, 
∆_addr
 *
d°
)

638  
	`__assign_addr
(
ruÀ
, &ruÀ->
r_d°
, 
d°
, 
RULE_ATTR_DST
);

639 
	}
}

641 
∆_addr
 *
	$π∆_ruÀ_gë_d°
(
π∆_ruÀ
 *
ruÀ
)

643  
ruÀ
->
r_d°
;

644 
	}
}

646 
	$π∆_ruÀ_£t_iif
(
π∆_ruÀ
 *
ruÀ
, c⁄° *
dev
)

648 i‡(
	`°æí
(
dev
Ë> 
IFNAMSIZ
-1)

649  -
NLE_RANGE
;

651 
	`°r˝y
(
ruÀ
->
r_ii‚ame
, 
dev
);

652 
ruÀ
->
˚_mask
 |
RULE_ATTR_IIFNAME
;

654 
	}
}

656 *
	$π∆_ruÀ_gë_iif
(
π∆_ruÀ
 *
ruÀ
)

658 i‡(
ruÀ
->
˚_mask
 & 
RULE_ATTR_IIFNAME
)

659  
ruÀ
->
r_ii‚ame
;

661  
NULL
;

662 
	}
}

664 
	$π∆_ruÀ_£t_oif
(
π∆_ruÀ
 *
ruÀ
, c⁄° *
dev
)

666 i‡(
	`°æí
(
dev
Ë> 
IFNAMSIZ
-1)

667  -
NLE_RANGE
;

669 
	`°r˝y
(
ruÀ
->
r_oi‚ame
, 
dev
);

670 
ruÀ
->
˚_mask
 |
RULE_ATTR_OIFNAME
;

672 
	}
}

674 *
	$π∆_ruÀ_gë_oif
(
π∆_ruÀ
 *
ruÀ
)

676 i‡(
ruÀ
->
˚_mask
 & 
RULE_ATTR_OIFNAME
)

677  
ruÀ
->
r_oi‚ame
;

679  
NULL
;

680 
	}
}

682 
	$π∆_ruÀ_£t_a˘i⁄
(
π∆_ruÀ
 *
ruÀ
, 
uöt8_t
 
a˘i⁄
)

684 
ruÀ
->
r_a˘i⁄
 = 
a˘i⁄
;

685 
ruÀ
->
˚_mask
 |
RULE_ATTR_ACTION
;

686 
	}
}

688 
uöt8_t
 
	$π∆_ruÀ_gë_a˘i⁄
(
π∆_ruÀ
 *
ruÀ
)

690  
ruÀ
->
r_a˘i⁄
;

691 
	}
}

693 
	$π∆_ruÀ_£t_ªÆms
(
π∆_ruÀ
 *
ruÀ
, 
uöt32_t
 
ªÆms
)

695 
ruÀ
->
r_Êow
 = 
ªÆms
;

696 
ruÀ
->
˚_mask
 |
RULE_ATTR_FLOW
;

697 
	}
}

699 
uöt32_t
 
	$π∆_ruÀ_gë_ªÆms
(
π∆_ruÀ
 *
ruÀ
)

701  
ruÀ
->
r_Êow
;

702 
	}
}

704 
	$π∆_ruÀ_£t_gŸo
(
π∆_ruÀ
 *
ruÀ
, 
uöt32_t
 
ªf
)

706 
ruÀ
->
r_gŸo
 = 
ªf
;

707 
ruÀ
->
˚_mask
 |
RULE_ATTR_GOTO
;

708 
	}
}

710 
uöt32_t
 
	$π∆_ruÀ_gë_gŸo
(
π∆_ruÀ
 *
ruÀ
)

712  
ruÀ
->
r_gŸo
;

713 
	}
}

717 
∆_obje˘_›s
 
	gruÀ_obj_›s
 = {

718 .
oo_«me
 = "route/rule",

719 .
	goo_size
 = (
π∆_ruÀ
),

720 .
	goo_‰ì_d©a
 = 
ruÀ_‰ì_d©a
,

721 .
	goo_˛⁄e
 = 
ruÀ_˛⁄e
,

722 .
	goo_dump
 = {

723 [
NL_DUMP_LINE
] = 
ruÀ_dump_löe
,

724 [
NL_DUMP_DETAILS
] = 
ruÀ_dump_dëaûs
,

725 [
NL_DUMP_STATS
] = 
ruÀ_dump_°©s
,

727 .
	goo_com∑ª
 = 
ruÀ_com∑ª
,

728 .
	goo_©ås2°r
 = 
ruÀ_©ås2°r
,

729 .
	goo_id_©ås
 = ~0,

732 
∆_ˇche_›s
 
	gπ∆_ruÀ_›s
 = {

733 .
co_«me
 = "route/rule",

734 .
	gco_hdrsize
 = (
fib_ruÀ_hdr
),

735 .
	gco_msgty≥s
 = {

736 { 
RTM_NEWRULE
, 
NL_ACT_NEW
, "new" },

737 { 
RTM_DELRULE
, 
NL_ACT_DEL
, "del" },

738 { 
RTM_GETRULE
, 
NL_ACT_GET
, "get" },

739 
END_OF_MSGTYPES_LIST
,

741 .
	gco_¥Ÿocﬁ
 = 
NETLINK_ROUTE
,

742 .
	gco_ªque°_upd©e
 = 
ruÀ_ªque°_upd©e
,

743 .
	gco_msg_∑r£r
 = 
ruÀ_msg_∑r£r
,

744 .
	gco_obj_›s
 = &
ruÀ_obj_›s
,

747 
__öô
 
	$ruÀ_öô
()

749 
	`∆_ˇche_mngt_ªgi°î
(&
π∆_ruÀ_›s
);

750 
	}
}

752 
__exô
 
	$ruÀ_exô
()

754 
	`∆_ˇche_mngt_uƒegi°î
(&
π∆_ruÀ_›s
);

755 
	}
}

	@mylibnl/libnl-3.2.25/lib/route/tc.c

18 
	~<√éök-¥iv©e/√éök.h
>

19 
	~<√éök-¥iv©e/tc.h
>

20 
	~<√éök/√éök.h
>

21 
	~<√éök/utûs.h
>

22 
	~<√éök/rouã/π∆.h
>

23 
	~<√éök/rouã/lök.h
>

24 
	~<√éök/rouã/tc.h
>

25 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

29 
∆_li°_hód
 
	gtc_›s_li°
[
__RTNL_TC_TYPE_MAX
];

30 
π∆_tc_ty≥_›s
 *
	gtc_ty≥_›s
[
__RTNL_TC_TYPE_MAX
];

32 
∆a_pﬁicy
 
	gtc_pﬁicy
[
TCA_MAX
+1] = {

33 [
TCA_KIND
] = { .
ty≥
 = 
NLA_STRING
,

34 .
	gmaxÀn
 = 
TCKINDSIZ
 },

35 [
TCA_STATS
] = { .
möÀn
 = (
tc_°©s
) },

36 [
TCA_STATS2
] = { .
ty≥
 = 
NLA_NESTED
 },

39 
	$tˇ_∑r£
(
∆©å
 **
tb
, 
max©å
, 
π∆_tc
 *
g
,

40 
∆a_pﬁicy
 *
pﬁicy
)

43 i‡(
g
->
˚_mask
 & 
TCA_ATTR_OPTS
)

44  
	`∆a_∑r£
(
tb
, 
max©å
,

45 (
∆©å
 *Ë
g
->
tc_›ts
->
d_d©a
,

46 
g
->
tc_›ts
->
d_size
, 
pﬁicy
);

50 
	`mem£t
(
tb
, 0, (
∆©å
 *Ë* (
max©å
 + 1));

53 
	}
}

55 
∆a_pﬁicy
 
	gtc_°©s2_pﬁicy
[
TCA_STATS_MAX
+1] = {

56 [
TCA_STATS_BASIC
] = { .
möÀn
 = (
g√t_°©s_basic
) },

57 [
TCA_STATS_RATE_EST
] = { .
möÀn
 = (
g√t_°©s_øã_e°
) },

58 [
TCA_STATS_QUEUE
] = { .
möÀn
 = (
g√t_°©s_queue
) },

61 
	$π∆_tc_msg_∑r£
(
∆msghdr
 *
n
, 
π∆_tc
 *
tc
)

63 
∆_ˇche
 *
lök_ˇche
;

64 
π∆_tc_›s
 *
›s
;

65 
∆©å
 *
tb
[
TCA_MAX
 + 1];

66 
köd
[
TCKINDSIZ
];

67 
tcmsg
 *
tm
;

68 
îr
;

70 
tc
->
˚_msgty≥
 = 
n
->
∆msg_ty≥
;

72 
îr
 = 
	`∆msg_∑r£
(
n
, (*
tm
), 
tb
, 
TCA_MAX
, 
tc_pﬁicy
);

73 i‡(
îr
 < 0)

74  
îr
;

76 i‡(
tb
[
TCA_KIND
] =
NULL
)

77  -
NLE_MISSING_ATTR
;

79 
	`∆a_°æ˝y
(
köd
, 
tb
[
TCA_KIND
], (kind));

80 
	`π∆_tc_£t_köd
(
tc
, 
köd
);

82 
tm
 = 
	`∆msg_d©a
(
n
);

83 
tc
->
tc_Ámûy
 = 
tm
->
tcm_Ámûy
;

84 
tc
->
tc_ifödex
 = 
tm
->
tcm_ifödex
;

85 
tc
->
tc_h™dÀ
 = 
tm
->
tcm_h™dÀ
;

86 
tc
->
tc_∑ª¡
 = 
tm
->
tcm_∑ª¡
;

87 
tc
->
tc_öfo
 = 
tm
->
tcm_öfo
;

89 
tc
->
˚_mask
 |(
TCA_ATTR_FAMILY
 | 
TCA_ATTR_IFINDEX
 | 
TCA_ATTR_HANDLE
|

90 
TCA_ATTR_PARENT
 | 
TCA_ATTR_INFO
);

92 i‡(
tb
[
TCA_OPTIONS
]) {

93 
tc
->
tc_›ts
 = 
	`∆_d©a_Æloc_©å
(
tb
[
TCA_OPTIONS
]);

94 i‡(!
tc
->
tc_›ts
)

95  -
NLE_NOMEM
;

96 
tc
->
˚_mask
 |
TCA_ATTR_OPTS
;

99 i‡(
tb
[
TCA_STATS2
]) {

100 
∆©å
 *
tbs
[
TCA_STATS_MAX
 + 1];

102 
îr
 = 
	`∆a_∑r£_√°ed
(
tbs
, 
TCA_STATS_MAX
, 
tb
[
TCA_STATS2
],

103 
tc_°©s2_pﬁicy
);

104 i‡(
îr
 < 0)

105  
îr
;

107 i‡(
tbs
[
TCA_STATS_BASIC
]) {

108 
g√t_°©s_basic
 *
bs
;

110 
bs
 = 
	`∆a_d©a
(
tbs
[
TCA_STATS_BASIC
]);

111 
tc
->
tc_°©s
[
RTNL_TC_BYTES
] = 
bs
->
byãs
;

112 
tc
->
tc_°©s
[
RTNL_TC_PACKETS
] = 
bs
->
∑ckës
;

115 i‡(
tbs
[
TCA_STATS_RATE_EST
]) {

116 
g√t_°©s_øã_e°
 *
ª
;

118 
ª
 = 
	`∆a_d©a
(
tbs
[
TCA_STATS_RATE_EST
]);

119 
tc
->
tc_°©s
[
RTNL_TC_RATE_BPS
] = 
ª
->
bps
;

120 
tc
->
tc_°©s
[
RTNL_TC_RATE_PPS
] = 
ª
->
µs
;

123 i‡(
tbs
[
TCA_STATS_QUEUE
]) {

124 
g√t_°©s_queue
 *
q
;

126 
q
 = 
	`∆a_d©a
(
tbs
[
TCA_STATS_QUEUE
]);

127 
tc
->
tc_°©s
[
RTNL_TC_QLEN
] = 
q
->
qÀn
;

128 
tc
->
tc_°©s
[
RTNL_TC_BACKLOG
] = 
q
->
backlog
;

129 
tc
->
tc_°©s
[
RTNL_TC_DROPS
] = 
q
->
dr›s
;

130 
tc
->
tc_°©s
[
RTNL_TC_REQUEUES
] = 
q
->
ªqueues
;

131 
tc
->
tc_°©s
[
RTNL_TC_OVERLIMITS
] = 
q
->
ovîlimôs
;

134 
tc
->
˚_mask
 |
TCA_ATTR_STATS
;

136 i‡(
tbs
[
TCA_STATS_APP
]) {

137 
tc
->
tc_x°©s
 = 
	`∆_d©a_Æloc_©å
(
tbs
[
TCA_STATS_APP
]);

138 i‡(
tc
->
tc_x°©s
 =
NULL
)

139  -
NLE_NOMEM
;

141 
com∑t_x°©s
;

143 i‡(
tb
[
TCA_STATS
]) {

144 
tc_°©s
 *
°
 = 
	`∆a_d©a
(
tb
[
TCA_STATS
]);

146 
tc
->
tc_°©s
[
RTNL_TC_BYTES
] = 
°
->
byãs
;

147 
tc
->
tc_°©s
[
RTNL_TC_PACKETS
] = 
°
->
∑ckës
;

148 
tc
->
tc_°©s
[
RTNL_TC_RATE_BPS
] = 
°
->
bps
;

149 
tc
->
tc_°©s
[
RTNL_TC_RATE_PPS
] = 
°
->
µs
;

150 
tc
->
tc_°©s
[
RTNL_TC_QLEN
] = 
°
->
qÀn
;

151 
tc
->
tc_°©s
[
RTNL_TC_BACKLOG
] = 
°
->
backlog
;

152 
tc
->
tc_°©s
[
RTNL_TC_DROPS
] = 
°
->
dr›s
;

153 
tc
->
tc_°©s
[
RTNL_TC_OVERLIMITS
]
°
->
ovîlimôs
;

155 
tc
->
˚_mask
 |
TCA_ATTR_STATS
;

158 
com∑t_x°©s
:

159 i‡(
tb
[
TCA_XSTATS
]) {

160 
tc
->
tc_x°©s
 = 
	`∆_d©a_Æloc_©å
(
tb
[
TCA_XSTATS
]);

161 i‡(
tc
->
tc_x°©s
 =
NULL
)

162  -
NLE_NOMEM
;

163 
tc
->
˚_mask
 |
TCA_ATTR_XSTATS
;

167 
›s
 = 
	`π∆_tc_gë_›s
(
tc
);

168 i‡(
›s
 && ops->
to_msg_∑r£r
) {

169 *
d©a
 = 
	`π∆_tc_d©a
(
tc
);

171 i‡(!
d©a
)

172  -
NLE_NOMEM
;

174 
îr
 = 
›s
->
	`to_msg_∑r£r
(
tc
, 
d©a
);

175 i‡(
îr
 < 0)

176  
îr
;

179 i‡((
lök_ˇche
 = 
	`__∆_ˇche_mngt_ªquúe
("route/link"))) {

180 
π∆_lök
 *
lök
;

182 i‡((
lök
 = 
	`π∆_lök_gë
(
lök_ˇche
, 
tc
->
tc_ifödex
))) {

183 
	`π∆_tc_£t_lök
(
tc
, 
lök
);

186 
	`π∆_lök_put
(
lök
);

191 
	}
}

193 
	$π∆_tc_msg_buûd
(
π∆_tc
 *
tc
, 
ty≥
, 
Êags
,

194 
∆_msg
 **
ªsu…
)

196 
∆_msg
 *
msg
;

197 
π∆_tc_›s
 *
›s
;

198 
tcmsg
 
tchdr
 = {

199 .
tcm_Ámûy
 = 
AF_UNSPEC
,

200 .
tcm_ifödex
 = 
tc
->
tc_ifödex
,

201 .
tcm_h™dÀ
 = 
tc
->
tc_h™dÀ
,

202 .
tcm_∑ª¡
 = 
tc
->
tc_∑ª¡
,

204 
îr
 = -
NLE_MSGSIZE
;

206 
msg
 = 
	`∆msg_Æloc_sim∂e
(
ty≥
, 
Êags
);

207 i‡(!
msg
)

208  -
NLE_NOMEM
;

210 i‡(
	`∆msg_≠≥nd
(
msg
, &
tchdr
, —chdr), 
NLMSG_ALIGNTO
) < 0)

211 
∆a_put_Áûuª
;

213 i‡(
tc
->
˚_mask
 & 
TCA_ATTR_KIND
)

214 
	`NLA_PUT_STRING
(
msg
, 
TCA_KIND
, 
tc
->
tc_köd
);

216 
›s
 = 
	`π∆_tc_gë_›s
(
tc
);

217 i‡(
›s
 && (›s->
to_msg_fûl
 || ops->
to_msg_fûl_øw
)) {

218 
∆©å
 *
›ts
;

219 *
d©a
 = 
	`π∆_tc_d©a
(
tc
);

221 i‡(
›s
->
to_msg_fûl
) {

222 i‡(!(
›ts
 = 
	`∆a_√°_°¨t
(
msg
, 
TCA_OPTIONS
)))

223 
∆a_put_Áûuª
;

225 i‡((
îr
 = 
›s
->
	`to_msg_fûl
(
tc
, 
d©a
, 
msg
)) < 0)

226 
∆a_put_Áûuª
;

228 
	`∆a_√°_íd
(
msg
, 
›ts
);

229 } i‡((
îr
 = 
›s
->
	`to_msg_fûl_øw
(
tc
, 
d©a
, 
msg
)) < 0)

230 
∆a_put_Áûuª
;

233 *
ªsu…
 = 
msg
;

236 
∆a_put_Áûuª
:

237 
	`∆msg_‰ì
(
msg
);

238  
îr
;

239 
	}
}

241 
	$tˇ_£t_köd
(
π∆_tc
 *
t
, c⁄° *
köd
)

243 
	`°∫˝y
(
t
->
tc_köd
, 
köd
, (t->tc_kind) - 1);

244 
t
->
˚_mask
 |
TCA_ATTR_KIND
;

245 
	}
}

265 
	$π∆_tc_£t_ifödex
(
π∆_tc
 *
tc
, 
ifödex
)

268 
	`π∆_lök_put
(
tc
->
tc_lök
);

269 
tc
->
tc_lök
 = 
NULL
;

270 
tc
->
˚_mask
 &~
TCA_ATTR_LINK
;

272 
tc
->
tc_ifödex
 = 
ifödex
;

273 
tc
->
˚_mask
 |
TCA_ATTR_IFINDEX
;

274 
	}
}

280 
	$π∆_tc_gë_ifödex
(
π∆_tc
 *
tc
)

282  
tc
->
tc_ifödex
;

283 
	}
}

297 
	$π∆_tc_£t_lök
(
π∆_tc
 *
tc
, 
π∆_lök
 *
lök
)

299 
	`π∆_lök_put
(
tc
->
tc_lök
);

301 i‡(!
lök
)

303 i‡(!
lök
->
l_ödex
)

304 
	`BUG
();

306 
	`∆_obje˘_gë
(
	`OBJ_CAST
(
lök
));

307 
tc
->
tc_lök
 = 
lök
;

308 
tc
->
tc_ifödex
 = 
lök
->
l_ödex
;

309 
tc
->
˚_mask
 |
TCA_ATTR_LINK
 | 
TCA_ATTR_IFINDEX
;

310 
	}
}

328 
π∆_lök
 *
	$π∆_tc_gë_lök
(
π∆_tc
 *
tc
)

330 i‡(
tc
->
tc_lök
) {

331 
	`∆_obje˘_gë
(
	`OBJ_CAST
(
tc
->
tc_lök
));

332  
tc
->
tc_lök
;

335  
NULL
;

336 
	}
}

351 
	$π∆_tc_£t_mtu
(
π∆_tc
 *
tc
, 
uöt32_t
 
mtu
)

353 
tc
->
tc_mtu
 = 
mtu
;

354 
tc
->
˚_mask
 |
TCA_ATTR_MTU
;

355 
	}
}

366 
uöt32_t
 
	$π∆_tc_gë_mtu
(
π∆_tc
 *
tc
)

368 i‡(
tc
->
˚_mask
 & 
TCA_ATTR_MTU
)

369  
tc
->
tc_mtu
;

370 i‡(
tc
->
˚_mask
 & 
TCA_ATTR_LINK
)

371  
tc
->
tc_lök
->
l_mtu
;

374 
	}
}

386 
	$π∆_tc_£t_mpu
(
π∆_tc
 *
tc
, 
uöt32_t
 
mpu
)

388 
tc
->
tc_mpu
 = 
mpu
;

389 
tc
->
˚_mask
 |
TCA_ATTR_MPU
;

390 
	}
}

398 
uöt32_t
 
	$π∆_tc_gë_mpu
(
π∆_tc
 *
tc
)

400  
tc
->
tc_mpu
;

401 
	}
}

415 
	$π∆_tc_£t_ovîhód
(
π∆_tc
 *
tc
, 
uöt32_t
 
ovîhód
)

417 
tc
->
tc_ovîhód
 = 
ovîhód
;

418 
tc
->
˚_mask
 |
TCA_ATTR_OVERHEAD
;

419 
	}
}

427 
uöt32_t
 
	$π∆_tc_gë_ovîhód
(
π∆_tc
 *
tc
)

429  
tc
->
tc_ovîhód
;

430 
	}
}

443 
	$π∆_tc_£t_lökty≥
(
π∆_tc
 *
tc
, 
uöt32_t
 
ty≥
)

445 
tc
->
tc_lökty≥
 = 
ty≥
;

446 
tc
->
˚_mask
 |
TCA_ATTR_LINKTYPE
;

447 
	}
}

458 
uöt32_t
 
	$π∆_tc_gë_lökty≥
(
π∆_tc
 *
tc
)

460 i‡(
tc
->
˚_mask
 & 
TCA_ATTR_LINKTYPE
)

461  
tc
->
tc_lökty≥
;

462 i‡(
tc
->
˚_mask
 & 
TCA_ATTR_LINK
)

463  
tc
->
tc_lök
->
l_¨±y≥
;

465  
ARPHRD_ETHER
;

466 
	}
}

473 
	$π∆_tc_£t_h™dÀ
(
π∆_tc
 *
tc
, 
uöt32_t
 
id
)

475 
tc
->
tc_h™dÀ
 = 
id
;

476 
tc
->
˚_mask
 |
TCA_ATTR_HANDLE
;

477 
	}
}

483 
uöt32_t
 
	$π∆_tc_gë_h™dÀ
(
π∆_tc
 *
tc
)

485  
tc
->
tc_h™dÀ
;

486 
	}
}

494 
	$π∆_tc_£t_∑ª¡
(
π∆_tc
 *
tc
, 
uöt32_t
 
∑ª¡
)

496 
tc
->
tc_∑ª¡
 = 
∑ª¡
;

497 
tc
->
˚_mask
 |
TCA_ATTR_PARENT
;

498 
	}
}

504 
uöt32_t
 
	$π∆_tc_gë_∑ª¡
(
π∆_tc
 *
tc
)

506  
tc
->
tc_∑ª¡
;

507 
	}
}

516 
	$π∆_tc_£t_köd
(
π∆_tc
 *
tc
, c⁄° *
köd
)

518 i‡(
tc
->
˚_mask
 & 
TCA_ATTR_KIND
)

519  -
NLE_EXIST
;

521 
	`°∫˝y
(
tc
->
tc_köd
, 
köd
, (tc->tc_kind) - 1);

522 
tc
->
˚_mask
 |
TCA_ATTR_KIND
;

525 
	`π∆_tc_d©a
(
tc
);

528 
	}
}

536 *
	$π∆_tc_gë_köd
(
π∆_tc
 *
tc
)

538 i‡(
tc
->
˚_mask
 & 
TCA_ATTR_KIND
)

539  
tc
->
tc_köd
;

541  
NULL
;

542 
	}
}

551 
uöt64_t
 
	$π∆_tc_gë_°©
(
π∆_tc
 *
tc
, 
π∆_tc_°©
 
id
)

553 i‡(
id
 < 0 || id > 
RTNL_TC_STATS_MAX
)

556  
tc
->
tc_°©s
[
id
];

557 
	}
}

580 
	$π∆_tc_ˇlc_txtime
(
bufsize
, 
øã
)

582 
tx_time_£cs
;

584 
tx_time_£cs
 = (Ë
bufsize
 / (Ë
øã
;

586  
tx_time_£cs
 * 1000000.;

587 
	}
}

603 
	$π∆_tc_ˇlc_bufsize
(
txtime
, 
øã
)

605 
bufsize
;

607 
bufsize
 = (Ë
txtime
 * (Ë
øã
;

609  
bufsize
 / 1000000.;

610 
	}
}

617 
	$π∆_tc_ˇlc_˚Œ_log
(
˚Œ_size
)

619 
i
;

621 
i
 = 0; i < 32; i++)

622 i‡((1 << 
i
Ë=
˚Œ_size
)

623  
i
;

625  -
NLE_INVAL
;

626 
	}
}

651 
	$Æign_to_©m
(
size
)

653 
löksize
, 
˚Œs
;

654 
˚Œs
 = 
size
 / 
ATM_CELL_PAYLOAD
;

655 i‡((
size
 % 
ATM_CELL_PAYLOAD
) > 0)

656 
˚Œs
++;

658 
löksize
 = 
˚Œs
 * 
ATM_CELL_SIZE
;

659  
löksize
;

660 
	}
}

662 
	$adju°_size
(
size
, 
mpu
,

663 
uöt32_t
 
lökty≥
)

665 i‡(
size
 < 
mpu
)

666 
size
 = 
mpu
;

668 
lökty≥
) {

669 
ARPHRD_ATM
:

670  
	`Æign_to_©m
(
size
);

672 
ARPHRD_ETHER
:

674  
size
;

676 
	}
}

691 
	$π∆_tc_buûd_øã_èbÀ
(
π∆_tc
 *
tc
, 
π∆_øã•ec
 *
•ec
,

692 
uöt32_t
 *
d°
)

694 
uöt32_t
 
mtu
 = 
	`π∆_tc_gë_mtu
(
tc
);

695 
uöt32_t
 
lökty≥
 = 
	`π∆_tc_gë_lökty≥
(
tc
);

696 
uöt8_t
 
˚Œ_log
 = 
•ec
->
rs_˚Œ_log
;

697 
size
, 
i
;

699 
•ec
->
rs_mpu
 = 
	`π∆_tc_gë_mpu
(
tc
);

700 
•ec
->
rs_ovîhód
 = 
	`π∆_tc_gë_ovîhód
(
tc
);

702 i‡(
mtu
 == 0)

703 
mtu
 = 2047;

705 i‡(
˚Œ_log
 =
UINT8_MAX
) {

711 
˚Œ_log
 = 0;

712 (
mtu
 >> 
˚Œ_log
Ë>
RTNL_TC_RTABLE_SIZE
)

713 
˚Œ_log
++;

716 
i
 = 0; i < 
RTNL_TC_RTABLE_SIZE
; i++) {

717 
size
 = 
	`adju°_size
((
i
 + 1Ë<< 
˚Œ_log
, 
•ec
->
rs_mpu
, 
lökty≥
);

718 
d°
[
i
] = 
	`∆_us2ticks
(
	`π∆_tc_ˇlc_txtime
(
size
, 
•ec
->
rs_øã
));

721 
•ec
->
rs_˚Œ_Æign
 = -1;

722 
•ec
->
rs_˚Œ_log
 = 
˚Œ_log
;

725 
	}
}

733 
	$π∆_tc_‰ì_d©a
(
∆_obje˘
 *
obj
)

735 
π∆_tc
 *
tc
 = 
	`TC_CAST
(
obj
);

736 
π∆_tc_›s
 *
›s
;

738 
	`π∆_lök_put
(
tc
->
tc_lök
);

739 
	`∆_d©a_‰ì
(
tc
->
tc_›ts
);

740 
	`∆_d©a_‰ì
(
tc
->
tc_x°©s
);

742 i‡(
tc
->
tc_subd©a
) {

743 
›s
 = 
	`π∆_tc_gë_›s
(
tc
);

744 i‡(
›s
 && ops->
to_‰ì_d©a
)

745 
›s
->
	`to_‰ì_d©a
(
tc
, 
	`∆_d©a_gë
—c->
tc_subd©a
));

747 
	`∆_d©a_‰ì
(
tc
->
tc_subd©a
);

749 
	}
}

751 
	$π∆_tc_˛⁄e
(
∆_obje˘
 *
d°obj
, ∆_obje˘ *
§cobj
)

753 
π∆_tc
 *
d°
 = 
	`TC_CAST
(
d°obj
);

754 
π∆_tc
 *
§c
 = 
	`TC_CAST
(
§cobj
);

755 
π∆_tc_›s
 *
›s
;

757 i‡(
§c
->
tc_lök
) {

758 
	`∆_obje˘_gë
(
	`OBJ_CAST
(
§c
->
tc_lök
));

759 
d°
->
tc_lök
 = 
§c
->tc_link;

762 i‡(
§c
->
tc_›ts
) {

763 
d°
->
tc_›ts
 = 
	`∆_d©a_˛⁄e
(
§c
->tc_opts);

764 i‡(!
d°
->
tc_›ts
)

765  -
NLE_NOMEM
;

768 i‡(
§c
->
tc_x°©s
) {

769 
d°
->
tc_x°©s
 = 
	`∆_d©a_˛⁄e
(
§c
->tc_xstats);

770 i‡(!
d°
->
tc_x°©s
)

771  -
NLE_NOMEM
;

774 i‡(
§c
->
tc_subd©a
) {

775 i‡(!(
d°
->
tc_subd©a
 = 
	`∆_d©a_˛⁄e
(
§c
->tc_subdata))) {

776  -
NLE_NOMEM
;

780 
›s
 = 
	`π∆_tc_gë_›s
(
§c
);

781 i‡(
›s
 && ops->
to_˛⁄e
) {

782 *
a
 = 
	`π∆_tc_d©a
(
d°
), *
b
 =Ñäl_tc_d©a(
§c
);

784 i‡(!
a
)

786 i‡(!
b
)

787  -
NLE_NOMEM
;

789  
›s
->
	`to_˛⁄e
(
a
, 
b
);

793 
	}
}

795 
	$tc_dump
(
π∆_tc
 *
tc
, 
∆_dump_ty≥
 
ty≥
,

796 
∆_dump_∑øms
 *
p
)

798 
π∆_tc_ty≥_›s
 *
ty≥_›s
;

799 
π∆_tc_›s
 *
›s
;

800 *
d©a
 = 
	`π∆_tc_d©a
(
tc
);

802 
ty≥_›s
 = 
tc_ty≥_›s
[
tc
->
tc_ty≥
];

803 i‡(
ty≥_›s
 &&Åy≥_›s->
â_dump
[
ty≥
])

804 
ty≥_›s
->
â_dump
[
ty≥
](
tc
, 
p
);

806 
›s
 = 
	`π∆_tc_gë_›s
(
tc
);

807 i‡(
›s
 && ops->
to_dump
[
ty≥
]) {

808 
›s
->
to_dump
[
ty≥
](
tc
, 
d©a
, 
p
);

813 
	}
}

815 
	$π∆_tc_dump_löe
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
p
)

817 
π∆_tc_ty≥_›s
 *
ty≥_›s
;

818 
π∆_tc
 *
tc
 = 
	`TC_CAST
(
obj
);

819 
∆_ˇche
 *
lök_ˇche
;

820 
buf
[32];

822 
	`∆_√w_löe
(
p
);

824 
ty≥_›s
 = 
tc_ty≥_›s
[
tc
->
tc_ty≥
];

825 i‡(
ty≥_›s
 &&Åy≥_›s->
â_dump_¥efix
)

826 
	`∆_dump
(
p
, "%†", 
ty≥_›s
->
â_dump_¥efix
);

828 
	`∆_dump
(
p
, "%†", 
tc
->
tc_köd
);

830 i‡((
lök_ˇche
 = 
	`∆_ˇche_mngt_ªquúe_ß„
("route/link"))) {

831 
	`∆_dump
(
p
, "dev %s ",

832 
	`π∆_lök_i2«me
(
lök_ˇche
, 
tc
->
tc_ifödex
,

833 
buf
, (buf)));

835 
	`∆_dump
(
p
, "dev %u ", 
tc
->
tc_ifödex
);

837 
	`∆_dump
(
p
, "id %s ",

838 
	`π∆_tc_h™dÀ2°r
(
tc
->
tc_h™dÀ
, 
buf
, (buf)));

840 
	`∆_dump
(
p
, "parent %s",

841 
	`π∆_tc_h™dÀ2°r
(
tc
->
tc_∑ª¡
, 
buf
, (buf)));

843 
	`tc_dump
(
tc
, 
NL_DUMP_LINE
, 
p
);

844 
	`∆_dump
(
p
, "\n");

846 i‡(
lök_ˇche
)

847 
	`∆_ˇche_put
(
lök_ˇche
);

848 
	}
}

850 
	$π∆_tc_dump_dëaûs
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
p
)

852 
π∆_tc
 *
tc
 = 
	`TC_CAST
(
obj
);

854 
	`π∆_tc_dump_löe
(
	`OBJ_CAST
(
tc
), 
p
);

856 
	`∆_dump_löe
(
p
, " ");

858 i‡(
tc
->
˚_mask
 & 
TCA_ATTR_MTU
)

859 
	`∆_dump
(
p
, " mtu %u", 
tc
->
tc_mtu
);

861 i‡(
tc
->
˚_mask
 & 
TCA_ATTR_MPU
)

862 
	`∆_dump
(
p
, " mpu %u", 
tc
->
tc_mpu
);

864 i‡(
tc
->
˚_mask
 & 
TCA_ATTR_OVERHEAD
)

865 
	`∆_dump
(
p
, " ovîhód %u", 
tc
->
tc_ovîhód
);

867 i‡(!
	`tc_dump
(
tc
, 
NL_DUMP_DETAILS
, 
p
))

868 
	`∆_dump
(
p
, "no options");

869 
	`∆_dump
(
p
, "\n");

870 
	}
}

872 
	$π∆_tc_dump_°©s
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
p
)

874 
π∆_tc
 *
tc
 = 
	`TC_CAST
(
obj
);

875 *
unô
, 
fmt
[64];

876 
ªs
;

878 
	`π∆_tc_dump_dëaûs
(
	`OBJ_CAST
(
tc
), 
p
);

880 
	`°r˝y
(
fmt
, " %7.2f %s %10u %10u %10u %10u %10u\n");

882 
	`∆_dump_löe
(
p
,

886 
ªs
 = 
	`∆_ˇn˚l_down_byãs
(
tc
->
tc_°©s
[
RTNL_TC_BYTES
], &
unô
);

887 i‡(*
unô
 == 'B')

888 
fmt
[11] = '9';

890 
	`∆_dump_löe
(
p
, 
fmt
, 
ªs
, 
unô
,

891 
tc
->
tc_°©s
[
RTNL_TC_PACKETS
],

892 
tc
->
tc_°©s
[
RTNL_TC_DROPS
],

893 
tc
->
tc_°©s
[
RTNL_TC_OVERLIMITS
],

894 
tc
->
tc_°©s
[
RTNL_TC_QLEN
],

895 
tc
->
tc_°©s
[
RTNL_TC_BACKLOG
]);

897 
ªs
 = 
	`∆_ˇn˚l_down_byãs
(
tc
->
tc_°©s
[
RTNL_TC_RATE_BPS
], &
unô
);

899 
	`°r˝y
(
fmt
, " %7.2f %s/s%9uÖps");

901 i‡(*
unô
 == 'B')

902 
fmt
[11] = '9';

904 
	`∆_dump_löe
(
p
, 
fmt
, 
ªs
, 
unô
, 
tc
->
tc_°©s
[
RTNL_TC_RATE_PPS
]);

906 
	`tc_dump
(
tc
, 
NL_DUMP_LINE
, 
p
);

907 
	`∆_dump
(
p
, "\n");

908 
	}
}

910 
	$π∆_tc_com∑ª
(
∆_obje˘
 *
aobj
, ∆_obje˘ *
bobj
,

911 
uöt32_t
 
©ås
, 
Êags
)

913 
π∆_tc
 *
a
 = 
	`TC_CAST
(
aobj
);

914 
π∆_tc
 *
b
 = 
	`TC_CAST
(
bobj
);

915 
diff
 = 0;

917 
	#TC_DIFF
(
ATTR
, 
EXPR
Ë
	`ATTR_DIFF
(
©ås
, 
TCA_ATTR_
##ATTR, 
a
, 
b
, EXPR)

	)

919 
diff
 |
	`TC_DIFF
(
HANDLE
, 
a
->
tc_h™dÀ
 !
b
->tc_handle);

920 
diff
 |
	`TC_DIFF
(
PARENT
, 
a
->
tc_∑ª¡
 !
b
->tc_parent);

921 
diff
 |
	`TC_DIFF
(
IFINDEX
, 
a
->
tc_ifödex
 !
b
->tc_ifindex);

922 
diff
 |
	`TC_DIFF
(
KIND
, 
	`°rcmp
(
a
->
tc_köd
, 
b
->tc_kind));

924 #unde‡
TC_DIFF


926  
diff
;

927 
	}
}

935 
π∆_tc_›s
 *
	$π∆_tc_lookup_›s
(
π∆_tc_ty≥
 
ty≥
, c⁄° *
köd
)

937 
π∆_tc_›s
 *
›s
;

939 
	`∆_li°_f‹_óch_íåy
(
›s
, &
tc_›s_li°
[
ty≥
], 
to_li°
)

940 i‡(!
	`°rcmp
(
köd
, 
›s
->
to_köd
))

941  
›s
;

943  
NULL
;

944 
	}
}

946 
π∆_tc_›s
 *
	$π∆_tc_gë_›s
(
π∆_tc
 *
tc
)

948 i‡(!
tc
->
tc_›s
)

949 
tc
->
tc_›s
 = 
	`π∆_tc_lookup_›s
—c->
tc_ty≥
,Åc->
tc_köd
);

951  
tc
->
tc_›s
;

952 
	}
}

958 
	$π∆_tc_ªgi°î
(
π∆_tc_›s
 *
›s
)

960 
öô
 = 0;

968 i‡(!
öô
) {

969 
i
;

971 
i
 = 0; i < 
__RTNL_TC_TYPE_MAX
; i++)

972 
	`∆_öô_li°_hód
(&
tc_›s_li°
[
i
]);

974 
öô
 = 1;

977 i‡(!
›s
->
to_köd
 || ops->
to_ty≥
 > 
RTNL_TC_TYPE_MAX
)

978 
	`BUG
();

980 i‡(
	`π∆_tc_lookup_›s
(
›s
->
to_ty≥
, ops->
to_köd
))

981  -
NLE_EXIST
;

983 
	`∆_li°_add_èû
(&
›s
->
to_li°
, &
tc_›s_li°
[›s->
to_ty≥
]);

986 
	}
}

992 
	$π∆_tc_uƒegi°î
(
π∆_tc_›s
 *
›s
)

994 
	`∆_li°_dñ
(&
›s
->
to_li°
);

995 
	}
}

1006 *
	$π∆_tc_d©a
(
π∆_tc
 *
tc
)

1008 i‡(!
tc
->
tc_subd©a
) {

1009 
size_t
 
size
;

1011 i‡(!
tc
->
tc_›s
) {

1012 i‡(!
tc
->
tc_köd
)

1013 
	`BUG
();

1015 i‡(!
	`π∆_tc_gë_›s
(
tc
))

1016  
NULL
;

1019 i‡(!(
size
 = 
tc
->
tc_›s
->
to_size
))

1020 
	`BUG
();

1022 i‡(!(
tc
->
tc_subd©a
 = 
	`∆_d©a_Æloc
(
NULL
, 
size
)))

1023  
NULL
;

1026  
	`∆_d©a_gë
(
tc
->
tc_subd©a
);

1027 
	}
}

1043 *
	$π∆_tc_d©a_check
(
π∆_tc
 *
tc
, 
π∆_tc_›s
 *
›s
)

1045 i‡(
tc
->
tc_›s
 !
›s
) {

1046 
buf
[64];

1048 
	`¢¥ötf
(
buf
, (buf),

1050 
tc
, 
›s
->
to_köd
,Åc->
tc_›s
->to_kind);

1051 
	`APPBUG
(
buf
);

1053  
NULL
;

1056  
	`π∆_tc_d©a
(
tc
);

1057 
	}
}

1059 
∆_af_group
 
	gtc_groups
[] = {

1060 { 
AF_UNSPEC
, 
RTNLGRP_TC
 },

1061 { 
END_OF_GROUP_LIST
 },

1065 
	$π∆_tc_ty≥_ªgi°î
(
π∆_tc_ty≥_›s
 *
›s
)

1067 i‡(
›s
->
â_ty≥
 > 
RTNL_TC_TYPE_MAX
)

1068 
	`BUG
();

1070 
tc_ty≥_›s
[
›s
->
â_ty≥
] = ops;

1071 
	}
}

1073 
	$π∆_tc_ty≥_uƒegi°î
(
π∆_tc_ty≥_›s
 *
›s
)

1075 i‡(
›s
->
â_ty≥
 > 
RTNL_TC_TYPE_MAX
)

1076 
	`BUG
();

1078 
tc_ty≥_›s
[
›s
->
â_ty≥
] = 
NULL
;

1079 
	}
}

	@mylibnl/libnl-3.2.25/lib/socket.c

30 
	~"defs.h
"

32 
	~<√éök-¥iv©e/√éök.h
>

33 
	~<√éök-¥iv©e/sockë.h
>

34 
	~<√éök/√éök.h
>

35 
	~<√éök/utûs.h
>

36 
	~<√éök/h™dÀrs.h
>

37 
	~<√éök/msg.h
>

38 
	~<√éök/©å.h
>

40 
	gdeÁu…_cb
 = 
NL_CB_DEFAULT
;

42 
__öô
 
	$öô_deÁu…_cb
()

44 *
∆cb
;

46 i‡((
∆cb
 = 
	`gëív
("NLCB"))) {

47 i‡(!
	`°rˇ£cmp
(
∆cb
, "default"))

48 
deÁu…_cb
 = 
NL_CB_DEFAULT
;

49 i‡(!
	`°rˇ£cmp
(
∆cb
, "verbose"))

50 
deÁu…_cb
 = 
NL_CB_VERBOSE
;

51 i‡(!
	`°rˇ£cmp
(
∆cb
, "debug"))

52 
deÁu…_cb
 = 
NL_CB_DEBUG
;

54 
	`Ârötf
(
°dîr
, "Unknown value for NLCB, valid values: "

58 
	}
}

60 
uöt32_t
 
	gu£d_p‹ts_m≠
[32];

61 
NL_RW_LOCK
(
p‹t_m≠_lock
);

63 
uöt32_t
 
	$gíî©e_loˇl_p‹t
()

65 
i
, 
j
, 
n
, 
m
;

66 
uöt16_t
 
idx_°©e
 = 0;

67 
uöt32_t
 
pid
 = 
	`gëpid
() & 0x3FFFFF;

69 
	`∆_wrôe_lock
(&
p‹t_m≠_lock
);

71 i‡(
idx_°©e
 == 0) {

72 
uöt32_t
 
t
 = 
	`time
(
NULL
);

76 
idx_°©e
 = 
t
 ^ (t >> 16) ^ 0x3047;

78 
idx_°©e
 = idx_state + 20011;

80 
i
 = 
idx_°©e
 >> 5;

81 
n
 = 
idx_°©e
;

82 
j
 = 0; j < 32; j++) {

88 i‡(
j
 == 31)

89 
i
 = 0;

91 
i
 = (((i-1) + 7) % 31) + 1;

93 i‡(
u£d_p‹ts_m≠
[
i
] == 0xFFFFFFFF)

96 
m
 = 0; m < 32; m++) {

97 
n
 = (n + 13) % 32;

98 i‡(1UL & (
u£d_p‹ts_m≠
[
i
] >> 
n
))

101 
u£d_p‹ts_m≠
[
i
] |(1UL << 
n
);

102 
n
 +(
i
 * 32);

107 
	`∆_wrôe_u∆ock
(&
p‹t_m≠_lock
);

109  
pid
 + (((
uöt32_t
)
n
) << 22);

113 
	`∆_wrôe_u∆ock
(&
p‹t_m≠_lock
);

116 
	`NL_DBG
(1, "Warning: Ran out of uniqueÜocalÖortÇamespace\n");

117  
UINT32_MAX
;

118 
	}
}

120 
	$ªÀa£_loˇl_p‹t
(
uöt32_t
 
p‹t
)

122 
ƒ
;

123 
uöt32_t
 
mask
;

125 i‡(
p‹t
 =
UINT32_MAX
)

128 
	`BUG_ON
(
p‹t
 == 0);

130 
ƒ
 = 
p‹t
 >> 22;

131 
mask
 = 1UL << (
ƒ
 % 32);

132 
ƒ
 /= 32;

134 
	`∆_wrôe_lock
(&
p‹t_m≠_lock
);

135 
	`BUG_ON
((
u£d_p‹ts_m≠
[
ƒ
] & 
mask
) != mask);

136 
u£d_p‹ts_m≠
[
ƒ
] &~
mask
;

137 
	`∆_wrôe_u∆ock
(&
p‹t_m≠_lock
);

138 
	}
}

141 
	$_∆_sockë_u£d_p‹ts_ªÀa£_Æl
(c⁄° 
uöt32_t
 *
u£d_p‹ts
)

143 
i
;

145 
i
 = 0; i < 32; i++) {

146 i‡(
u£d_p‹ts
[
i
] != 0) {

147 
	`∆_wrôe_lock
(&
p‹t_m≠_lock
);

148 ; 
i
 < 32; i++) {

149 
	`BUG_ON
((
u£d_p‹ts_m≠
[
i
] & 
u£d_p‹ts
[i]) != used_ports[i]);

150 
u£d_p‹ts_m≠
[
i
] &~(
u£d_p‹ts
[i]);

152 
	`∆_wrôe_u∆ock
(&
p‹t_m≠_lock
);

156 
	}
}

158 
	$_∆_sockë_u£d_p‹ts_£t
(
uöt32_t
 *
u£d_p‹ts
, uöt32_à
p‹t
)

160 
ƒ
;

161 
öt32_t
 
mask
;

163 
ƒ
 = 
p‹t
 >> 22;

164 
mask
 = 1UL << (
ƒ
 % 32);

165 
ƒ
 /= 32;

172 
u£d_p‹ts
[
ƒ
] |
mask
;

173 
	}
}

181 
∆_sock
 *
	$__Æloc_sockë
(
∆_cb
 *
cb
)

183 
∆_sock
 *
sk
;

185 
sk
 = 
	`ˇŒoc
(1, (*sk));

186 i‡(!
sk
)

187  
NULL
;

189 
sk
->
s_fd
 = -1;

190 
sk
->
s_cb
 = 
	`∆_cb_gë
(
cb
);

191 
sk
->
s_loˇl
.
∆_Ámûy
 = 
AF_NETLINK
;

192 
sk
->
s_≥î
.
∆_Ámûy
 = 
AF_NETLINK
;

193 
sk
->
s_£q_ex≥˘
 = sk->
s_£q_√xt
 = 
	`time
(0);

196 
sk
->
s_Êags
 = 
NL_OWN_PORT
;

198  
sk
;

199 
	}
}

206 
∆_sock
 *
	$∆_sockë_Æloc
()

208 
∆_cb
 *
cb
;

209 
∆_sock
 *
sk
;

211 
cb
 = 
	`∆_cb_Æloc
(
deÁu…_cb
);

212 i‡(!
cb
)

213  
NULL
;

216 
sk
 = 
	`__Æloc_sockë
(
cb
);

218 
	`∆_cb_put
(
cb
);

220  
sk
;

221 
	}
}

232 
∆_sock
 *
	$∆_sockë_Æloc_cb
(
∆_cb
 *
cb
)

234 i‡(
cb
 =
NULL
)

235 
	`BUG
();

237  
	`__Æloc_sockë
(
cb
);

238 
	}
}

244 
	$∆_sockë_‰ì
(
∆_sock
 *
sk
)

246 i‡(!
sk
)

249 i‡(
sk
->
s_fd
 >= 0)

250 
	`˛o£
(
sk
->
s_fd
);

252 i‡(!(
sk
->
s_Êags
 & 
NL_OWN_PORT
))

253 
	`ªÀa£_loˇl_p‹t
(
sk
->
s_loˇl
.
∆_pid
);

255 
	`∆_cb_put
(
sk
->
s_cb
);

256 
	`‰ì
(
sk
);

257 
	}
}

266 
	$no›_£q_check
(
∆_msg
 *
msg
, *
¨g
)

268  
NL_OK
;

269 
	}
}

283 
	$∆_sockë_dißbÀ_£q_check
(
∆_sock
 *
sk
)

285 
	`∆_cb_£t
(
sk
->
s_cb
, 
NL_CB_SEQ_CHECK
,

286 
NL_CB_CUSTOM
, 
no›_£q_check
, 
NULL
);

287 
	}
}

298 
	$∆_sockë_u£_£q
(
∆_sock
 *
sk
)

300  
sk
->
s_£q_√xt
++;

301 
	}
}

315 
	$∆_sockë_dißbÀ_auto_ack
(
∆_sock
 *
sk
)

317 
sk
->
s_Êags
 |
NL_NO_AUTO_ACK
;

318 
	}
}

325 
	$∆_sockë_íabÀ_auto_ack
(
∆_sock
 *
sk
)

327 
sk
->
s_Êags
 &~
NL_NO_AUTO_ACK
;

328 
	}
}

333 
	$_∆_sockë_is_loˇl_p‹t_un•ecifõd
(
∆_sock
 *
sk
)

335  (
sk
->
s_loˇl
.
∆_pid
 == 0);

336 
	}
}

338 
uöt32_t
 
	$_∆_sockë_gíî©e_loˇl_p‹t_no_ªÀa£
(
∆_sock
 *
sk
)

340 
uöt32_t
 
p‹t
;

345 
p‹t
 = 
	`gíî©e_loˇl_p‹t
();

346 
sk
->
s_Êags
 &~
NL_OWN_PORT
;

347 
sk
->
s_loˇl
.
∆_pid
 = 
p‹t
;

348  
p‹t
;

349 
	}
}

357 
uöt32_t
 
	$∆_sockë_gë_loˇl_p‹t
(c⁄° 
∆_sock
 *
sk
)

359 i‡(
sk
->
s_loˇl
.
∆_pid
 == 0) {

369  
	`_∆_sockë_gíî©e_loˇl_p‹t_no_ªÀa£
((
∆_sock
 *Ë
sk
);

371  
sk
->
s_loˇl
.
∆_pid
;

372 
	}
}

386 
	$∆_sockë_£t_loˇl_p‹t
(
∆_sock
 *
sk
, 
uöt32_t
 
p‹t
)

388 i‡(!(
sk
->
s_Êags
 & 
NL_OWN_PORT
))

389 
	`ªÀa£_loˇl_p‹t
(
sk
->
s_loˇl
.
∆_pid
);

390 
sk
->
s_Êags
 |
NL_OWN_PORT
;

391 
sk
->
s_loˇl
.
∆_pid
 = 
p‹t
;

392 
	}
}

417 
	$∆_sockë_add_membîshùs
(
∆_sock
 *
sk
, 
group
, ...)

419 
îr
;

420 
va_li°
 
≠
;

422 i‡(
sk
->
s_fd
 == -1)

423  -
NLE_BAD_SOCK
;

425 
	`va_°¨t
(
≠
, 
group
);

427 
group
 != 0) {

428 i‡(
group
 < 0) {

429 
	`va_íd
(
≠
);

430  -
NLE_INVAL
;

433 
îr
 = 
	`£tsock›t
(
sk
->
s_fd
, 
SOL_NETLINK
, 
NETLINK_ADD_MEMBERSHIP
,

434 &
group
, (group));

435 i‡(
îr
 < 0) {

436 
	`va_íd
(
≠
);

437  -
	`∆_sy£º2∆îr
(
î∫o
);

440 
group
 = 
	`va_¨g
(
≠
, );

443 
	`va_íd
(
≠
);

446 
	}
}

448 
	$∆_sockë_add_membîshù
(
∆_sock
 *
sk
, 
group
)

450  
	`∆_sockë_add_membîshùs
(
sk
, 
group
, 0);

451 
	}
}

465 
	$∆_sockë_dr›_membîshùs
(
∆_sock
 *
sk
, 
group
, ...)

467 
îr
;

468 
va_li°
 
≠
;

470 i‡(
sk
->
s_fd
 == -1)

471  -
NLE_BAD_SOCK
;

473 
	`va_°¨t
(
≠
, 
group
);

475 
group
 != 0) {

476 i‡(
group
 < 0) {

477 
	`va_íd
(
≠
);

478  -
NLE_INVAL
;

481 
îr
 = 
	`£tsock›t
(
sk
->
s_fd
, 
SOL_NETLINK
, 
NETLINK_DROP_MEMBERSHIP
,

482 &
group
, (group));

483 i‡(
îr
 < 0) {

484 
	`va_íd
(
≠
);

485  -
	`∆_sy£º2∆îr
(
î∫o
);

488 
group
 = 
	`va_¨g
(
≠
, );

491 
	`va_íd
(
≠
);

494 
	}
}

496 
	$∆_sockë_dr›_membîshù
(
∆_sock
 *
sk
, 
group
)

498  
	`∆_sockë_dr›_membîshùs
(
sk
, 
group
, 0);

499 
	}
}

511 
	$∆_joö_groups
(
∆_sock
 *
sk
, 
groups
)

513 
sk
->
s_loˇl
.
∆_groups
 |
groups
;

514 
	}
}

524 
uöt32_t
 
	$∆_sockë_gë_≥î_p‹t
(c⁄° 
∆_sock
 *
sk
)

526  
sk
->
s_≥î
.
∆_pid
;

527 
	}
}

529 
	$∆_sockë_£t_≥î_p‹t
(
∆_sock
 *
sk
, 
uöt32_t
 
p‹t
)

531 
sk
->
s_≥î
.
∆_pid
 = 
p‹t
;

532 
	}
}

534 
uöt32_t
 
	$∆_sockë_gë_≥î_groups
(c⁄° 
∆_sock
 *
sk
)

536  
sk
->
s_≥î
.
∆_groups
;

537 
	}
}

539 
	$∆_sockë_£t_≥î_groups
(
∆_sock
 *
sk
, 
uöt32_t
 
groups
)

541 
sk
->
s_≥î
.
∆_groups
 = 
groups
;

542 
	}
}

562 
	$∆_sockë_gë_fd
(c⁄° 
∆_sock
 *
sk
)

564  
sk
->
s_fd
;

565 
	}
}

573 
	$∆_sockë_£t_n⁄blockög
(c⁄° 
∆_sock
 *
sk
)

575 i‡(
sk
->
s_fd
 == -1)

576  -
NLE_BAD_SOCK
;

578 i‡(
	`f˙é
(
sk
->
s_fd
, 
F_SETFL
, 
O_NONBLOCK
) < 0)

579  -
	`∆_sy£º2∆îr
(
î∫o
);

582 
	}
}

588 
	$∆_sockë_íabÀ_msg_≥ek
(
∆_sock
 *
sk
)

590 
sk
->
s_Êags
 |
NL_MSG_PEEK
;

591 
	}
}

597 
	$∆_sockë_dißbÀ_msg_≥ek
(
∆_sock
 *
sk
)

599 
sk
->
s_Êags
 &~
NL_MSG_PEEK
;

600 
	}
}

609 
∆_cb
 *
	$∆_sockë_gë_cb
(c⁄° 
∆_sock
 *
sk
)

611  
	`∆_cb_gë
(
sk
->
s_cb
);

612 
	}
}

614 
	$∆_sockë_£t_cb
(
∆_sock
 *
sk
, 
∆_cb
 *
cb
)

616 i‡(
cb
 =
NULL
)

617 
	`BUG
();

619 
	`∆_cb_put
(
sk
->
s_cb
);

620 
sk
->
s_cb
 = 
	`∆_cb_gë
(
cb
);

621 
	}
}

633 
	$∆_sockë_modify_cb
(
∆_sock
 *
sk
, 
∆_cb_ty≥
 
ty≥
,

634 
∆_cb_köd
 
köd
, 
∆_ªcvmsg_msg_cb_t
 
func
,

635 *
¨g
)

637  
	`∆_cb_£t
(
sk
->
s_cb
, 
ty≥
, 
köd
, 
func
, 
¨g
);

638 
	}
}

649 
	$∆_sockë_modify_îr_cb
(
∆_sock
 *
sk
, 
∆_cb_köd
 
köd
,

650 
∆_ªcvmsg_îr_cb_t
 
func
, *
¨g
)

652  
	`∆_cb_îr
(
sk
->
s_cb
, 
köd
, 
func
, 
¨g
);

653 
	}
}

675 
	$∆_sockë_£t_buf„r_size
(
∆_sock
 *
sk
, 
rxbuf
, 
txbuf
)

677 
îr
;

679 i‡(
rxbuf
 <= 0)

680 
rxbuf
 = 32768;

682 i‡(
txbuf
 <= 0)

683 
txbuf
 = 32768;

685 i‡(
sk
->
s_fd
 == -1)

686  -
NLE_BAD_SOCK
;

688 
îr
 = 
	`£tsock›t
(
sk
->
s_fd
, 
SOL_SOCKET
, 
SO_SNDBUF
,

689 &
txbuf
, (txbuf));

690 i‡(
îr
 < 0)

691  -
	`∆_sy£º2∆îr
(
î∫o
);

693 
îr
 = 
	`£tsock›t
(
sk
->
s_fd
, 
SOL_SOCKET
, 
SO_RCVBUF
,

694 &
rxbuf
, (rxbuf));

695 i‡(
îr
 < 0)

696  -
	`∆_sy£º2∆îr
(
î∫o
);

698 
sk
->
s_Êags
 |
NL_SOCK_BUFSIZE_SET
;

701 
	}
}

715 
	$∆_sockë_£t_msg_buf_size
(
∆_sock
 *
sk
, 
size_t
 
bufsize
)

717 
sk
->
s_bufsize
 = 
bufsize
;

720 
	}
}

728 
size_t
 
	$∆_sockë_gë_msg_buf_size
(
∆_sock
 *
sk
)

730  
sk
->
s_bufsize
;

731 
	}
}

740 
	$∆_sockë_£t_∑ss¸ed
(
∆_sock
 *
sk
, 
°©e
)

742 
îr
;

744 i‡(
sk
->
s_fd
 == -1)

745  -
NLE_BAD_SOCK
;

747 
îr
 = 
	`£tsock›t
(
sk
->
s_fd
, 
SOL_SOCKET
, 
SO_PASSCRED
,

748 &
°©e
, (state));

749 i‡(
îr
 < 0)

750  -
	`∆_sy£º2∆îr
(
î∫o
);

752 i‡(
°©e
)

753 
sk
->
s_Êags
 |
NL_SOCK_PASSCRED
;

755 
sk
->
s_Êags
 &~
NL_SOCK_PASSCRED
;

758 
	}
}

767 
	$∆_sockë_ªcv_pktöfo
(
∆_sock
 *
sk
, 
°©e
)

769 
îr
;

771 i‡(
sk
->
s_fd
 == -1)

772  -
NLE_BAD_SOCK
;

774 
îr
 = 
	`£tsock›t
(
sk
->
s_fd
, 
SOL_NETLINK
, 
NETLINK_PKTINFO
,

775 &
°©e
, (state));

776 i‡(
îr
 < 0)

777  -
	`∆_sy£º2∆îr
(
î∫o
);

780 
	}
}

	@mylibnl/libnl-3.2.25/lib/utils.c

27 
	~<√éök-¥iv©e/√éök.h
>

28 
	~<√éök/√éök.h
>

29 
	~<√éök/utûs.h
>

30 
	~<löux/sockë.h
>

31 
	~<°dlib.h
>

49 
	g∆_debug
 = 0;

52 #ifde‡
NL_DEBUG


53 
∆_dump_∑øms
 
	g∆_debug_dp
 = {

54 .
dp_ty≥
 = 
NL_DUMP_DETAILS
,

57 
__öô
 
	$∆_debug_öô
()

59 *
∆dbg
, *
íd
;

61 i‡((
∆dbg
 = 
	`gëív
("NLDBG"))) {

62 
Àvñ
 = 
	`°πﬁ
(
∆dbg
, &
íd
, 0);

63 i‡(
∆dbg
 !
íd
)

64 
∆_debug
 = 
Àvñ
;

67 
∆_debug_dp
.
dp_fd
 = 
°dîr
;

68 
	}
}

71 
__∆_ªad_num_°r_fûe
(c⁄° *
∑th
, (*
cb
)(, const *))

73 
FILE
 *
fd
;

74 
buf
[128];

76 
fd
 = 
	`f›í
(
∑th
, "r");

77 i‡(
fd
 =
NULL
)

78  -
	`∆_sy£º2∆îr
(
î∫o
);

80 
	`fgës
(
buf
, (buf), 
fd
)) {

81 
goodÀn
, 
îr
;

82 
num
;

83 *
íd
;

85 i‡(*
buf
 == '#' || *buf == '\n' || *buf == '\r')

88 
num
 = 
	`°πﬁ
(
buf
, &
íd
, 0);

89 i‡(
íd
 =
buf
) {

90 
	`f˛o£
(
fd
);

91  -
NLE_INVAL
;

94 i‡(
num
 =
LONG_MIN
 ||Çum =
LONG_MAX
) {

95 
	`f˛o£
(
fd
);

96  -
NLE_RANGE
;

99 *
íd
 == ' ' || *end == '\t')

100 
íd
++;

102 
goodÀn
 = 
	`°rc•n
(
íd
, "#\r\n\t ");

103 i‡(
goodÀn
 == 0) {

104 
	`f˛o£
(
fd
);

105  -
NLE_INVAL
;

108 
íd
[
goodÀn
] = '\0';

110 
îr
 = 
	`cb
(
num
, 
íd
);

111 i‡(
îr
 < 0) {

112 
	`f˛o£
(
fd
);

113  
îr
;

117 
	`f˛o£
(
fd
);

120 
	}
}

139 
	$∆_ˇn˚l_down_byãs
(
l
, **
unô
)

141 i‡(
l
 >= 1099511627776LL) {

142 *
unô
 = "TiB";

143  ((Ë
l
) / 1099511627776LL;

144 } i‡(
l
 >= 1073741824) {

145 *
unô
 = "GiB";

146  ((Ë
l
) / 1073741824;

147 } i‡(
l
 >= 1048576) {

148 *
unô
 = "MiB";

149  ((Ë
l
) / 1048576;

150 } i‡(
l
 >= 1024) {

151 *
unô
 = "KiB";

152  ((Ë
l
) / 1024;

154 *
unô
 = "B";

155  (Ë
l
;

157 
	}
}

170 
	$∆_ˇn˚l_down_bôs
(
l
, **
unô
)

172 i‡(
l
 >= 1000000000000ULL) {

173 *
unô
 = "Tbit";

174  ((Ë
l
) / 1000000000000ULL;

177 i‡(
l
 >= 1000000000) {

178 *
unô
 = "Gbit";

179  ((Ë
l
) / 1000000000;

182 i‡(
l
 >= 1000000) {

183 *
unô
 = "Mbit";

184  ((Ë
l
) / 1000000;

187 i‡(
l
 >= 1000) {

188 *
unô
 = "Kbit";

189  ((Ë
l
) / 1000;

192 *
unô
 = "bit";

193  (Ë
l
;

194 
	}
}

196 
	$∆_øã2°r
(
øã
, 
ty≥
, *
buf
, 
size_t
 
Àn
)

198 *
unô
;

199 
‰ac
;

201 
ty≥
) {

202 
NL_BYTE_RATE
:

203 
‰ac
 = 
	`∆_ˇn˚l_down_byãs
(
øã
, &
unô
);

206 
NL_BIT_RATE
:

207 
‰ac
 = 
	`∆_ˇn˚l_down_bôs
(
øã
, &
unô
);

211 
	`BUG
();

214  
	`¢¥ötf
(
buf
, 
Àn
, "%.2f%s/s", 
‰ac
, 
unô
);

215 
	}
}

227 
	$∆_ˇn˚l_down_us
(
uöt32_t
 
l
, **
unô
)

229 i‡(
l
 >= 1000000) {

230 *
unô
 = "s";

231  ((Ë
l
) / 1000000;

232 } i‡(
l
 >= 1000) {

233 *
unô
 = "ms";

234  ((Ë
l
) / 1000;

236 *
unô
 = "us";

237  (Ë
l
;

239 
	}
}

264 
	$∆_size2öt
(c⁄° *
°r
)

266 *
p
;

267 
l
 = 
	`°πﬁ
(
°r
, &
p
, 0);

268 i‡(
p
 =
°r
)

269  -
NLE_INVAL
;

271 i‡(*
p
) {

272 i‡(!
	`°rˇ£cmp
(
p
, "kb") || !strcasecmp(p, "k"))

273 
l
 *= 1024;

274 i‡(!
	`°rˇ£cmp
(
p
, "gb") || !strcasecmp(p, "g"))

275 
l
 *= 1024*1024*1024;

276 i‡(!
	`°rˇ£cmp
(
p
, "gbit"))

277 
l
 *= 1000000000L/8;

278 i‡(!
	`°rˇ£cmp
(
p
, "mb") || !strcasecmp(p, "m"))

279 
l
 *= 1024*1024;

280 i‡(!
	`°rˇ£cmp
(
p
, "mbit"))

281 
l
 *= 1000000/8;

282 i‡(!
	`°rˇ£cmp
(
p
, "kbit"))

283 
l
 *= 1000/8;

284 i‡(!
	`°rˇ£cmp
(
p
, "bit"))

285 
l
 /= 8;

286 i‡(
	`°rˇ£cmp
(
p
, "b") != 0)

287  -
NLE_INVAL
;

290  
l
;

291 
	}
}

294 
	mlimô
;

295 c⁄° *
	munô
;

296 } 
	gsize_unôs
[] = {

327 *
	$∆_size2°r
(c⁄° 
size_t
 
size
, *
buf
, c⁄° size_à
Àn
)

329 
size_t
 
i
;

331 i‡(
size
 == 0) {

332 
	`¢¥ötf
(
buf
, 
Àn
, "0B");

333  
buf
;

336 
i
 = 0; i < 
	`ARRAY_SIZE
(
size_unôs
); i++) {

337 i‡(
size
 >
size_unôs
[
i
].
limô
) {

338 
	`¢¥ötf
(
buf
, 
Àn
, "%.2g%s",

339 (Ë
size
 / 
size_unôs
[
i
].
limô
,

340 
size_unôs
[
i
].
unô
);

341  
buf
;

345 
	`BUG
();

346 
	}
}

361 
	$∆_¥ob2öt
(c⁄° *
°r
)

363 *
p
;

364 
d
 = 
	`°πod
(
°r
, &
p
);

366 i‡(
p
 =
°r
)

367  -
NLE_INVAL
;

369 i‡(
d
 > 1.0)

370 
d
 /= 100.0f;

372 i‡(
d
 > 1.0f || d < 0.0f)

373  -
NLE_RANGE
;

375 i‡(*
p
 && 
	`°rcmp
(p, "%") != 0)

376  -
NLE_INVAL
;

378  
	`röt
(
d
 * 
NL_PROB_MAX
);

379 
	}
}

388 #i‚de‡
USER_HZ


389 
	#USER_HZ
 100

	)

392 
uöt32_t
 
	gu£r_hz
 = 
USER_HZ
;

393 
uöt32_t
 
	gpsched_hz
 = 
USER_HZ
;

395 
	gticks_≥r_u£c
 = 1.0f;

406 
__öô
 
	$gë_psched_£âögs
()

408 
«me
[
FILENAME_MAX
];

409 
FILE
 *
fd
;

410 
gŸ_hz
 = 0;

412 i‡(
	`gëív
("HZ")) {

413 
hz
 = 
	`°πﬁ
(
	`gëív
("HZ"), 
NULL
, 0);

415 i‡(
LONG_MIN
 !
hz
 && 
LONG_MAX
 != hz) {

416 
u£r_hz
 = 
hz
;

417 
gŸ_hz
 = 1;

421 i‡(!
gŸ_hz
)

422 
u£r_hz
 = 
	`sysc⁄f
(
_SC_CLK_TCK
);

424 
psched_hz
 = 
u£r_hz
;

426 i‡(
	`gëív
("TICKS_PER_USEC")) {

427 
t
 = 
	`°πod
(
	`gëív
("TICKS_PER_USEC"), 
NULL
);

428 
ticks_≥r_u£c
 = 
t
;

431 i‡(
	`gëív
("PROC_NET_PSCHED"))

432 
	`¢¥ötf
(
«me
, “ame), "%s", 
	`gëív
("PROC_NET_PSCHED"));

433 i‡(
	`gëív
("PROC_ROOT"))

434 
	`¢¥ötf
(
«me
, (name), "%s/net/psched",

435 
	`gëív
("PROC_ROOT"));

437 
	`°∫˝y
(
«me
, "/proc/net/psched", (name) - 1);

439 i‡((
fd
 = 
	`f›í
(
«me
, "r"))) {

440 
ns_≥r_u£c
, 
ns_≥r_tick
, 
nom
, 
díom
;

442 i‡(
	`fsˇnf
(
fd
, "%08x %08x %08x %08x",

443 &
ns_≥r_u£c
, &
ns_≥r_tick
, &
nom
, &
díom
) != 4) {

444 
	`NL_DBG
(1, "FatalÉrror: canÇotÑeadÖsched settings from \"%s\". " \

446 "ívú⁄míàv¨übÀs\n", 
«me
);

447 
	`exô
(1);

450 
ticks_≥r_u£c
 = (Ë
ns_≥r_u£c
 /

451 (Ë
ns_≥r_tick
;

453 i‡(
nom
 == 1000000)

454 
psched_hz
 = 
díom
;

456 
	`f˛o£
(
fd
);

459 
	}
}

465 
	$∆_gë_u£r_hz
()

467  
u£r_hz
;

468 
	}
}

473 
	$∆_gë_psched_hz
()

475  
psched_hz
;

476 
	}
}

483 
uöt32_t
 
	$∆_us2ticks
(
uöt32_t
 
us
)

485  
us
 * 
ticks_≥r_u£c
;

486 
	}
}

494 
uöt32_t
 
	$∆_ticks2us
(
uöt32_t
 
ticks
)

496  
ticks
 / 
ticks_≥r_u£c
;

497 
	}
}

499 
	$∆_°r2m£c
(c⁄° *
°r
, 
uöt64_t
 *
ªsu…
)

501 
uöt64_t
 
tŸÆ
 = 0, 
l
;

502 
∂í
;

503 *
p
;

506 
l
 = 
	`°πoul
(
°r
, &
p
, 0);

507 i‡(
p
 =
°r
)

508  -
NLE_INVAL
;

509 i‡(*
p
) {

510 
∂í
 = 
	`°rc•n
(
p
, " \t");

512 i‡(!
∂í
)

513 
tŸÆ
 +
l
;

514 i‡(!
	`°∫ˇ£cmp
(
p
, "£c", 
∂í
))

515 
tŸÆ
 +(
l
 * 1000);

516 i‡(!
	`°∫ˇ£cmp
(
p
, "mö", 
∂í
))

517 
tŸÆ
 +(
l
 * 1000*60);

518 i‡(!
	`°∫ˇ£cmp
(
p
, "hour", 
∂í
))

519 
tŸÆ
 +(
l
 * 1000*60*60);

520 i‡(!
	`°∫ˇ£cmp
(
p
, "day", 
∂í
))

521 
tŸÆ
 +(
l
 * 1000*60*60*24);

523  -
NLE_INVAL
;

525 
°r
 = 
p
 + 
∂í
;

527 
tŸÆ
 +
l
;

528 } *
°r
 && *
p
);

530 *
ªsu…
 = 
tŸÆ
;

533 
	}
}

547 * 
	$∆_m£c2°r
(
uöt64_t
 
m£c
, *
buf
, 
size_t
 
Àn
)

549 
uöt64_t
 
•lô
[5];

550 
size_t
 
i
;

551 c⁄° *
unôs
[5] = {"d", "h", "m", "s", "msec"};

552 * c⁄° 
buf_‹ig
 = 
buf
;

554 i‡(
m£c
 == 0) {

555 
	`¢¥ötf
(
buf
, 
Àn
, "0msec");

556  
buf_‹ig
;

559 
	#_SPLIT
(
idx
, 
unô
Ëi‡((
•lô
[idx] = 
m£c
 / unô)Ëm£¯%
	)
unô

560 
	`_SPLIT
(0, 86400000);

561 
	`_SPLIT
(1, 3600000);

562 
	`_SPLIT
(2, 60000);

563 
	`_SPLIT
(3, 1000);

564 #unde‡
_SPLIT


565 
•lô
[4] = 
m£c
;

567 
i
 = 0; i < 
	`ARRAY_SIZE
(
•lô
Ë&& 
Àn
; i++) {

568 
l
;

569 i‡(
•lô
[
i
] == 0)

571 
l
 = 
	`¢¥ötf
(
buf
, 
Àn
, "%s%" 
PRIu64
 "%s",

572 (
buf
==
buf_‹ig
Ë? "" : " ", 
•lô
[
i
], 
unôs
[i]);

573 
buf
 +
l
;

574 
Àn
 -
l
;

577  
buf_‹ig
;

578 
	}
}

587 c⁄° 
å™s_tbl
 
	g∆Ámûõs
[] = {

588 
__ADD
(
NETLINK_ROUTE
,
rouã
)

589 
__ADD
(
NETLINK_USERSOCK
,
u£rsock
)

590 
__ADD
(
NETLINK_FIREWALL
,
fúewÆl
)

591 
__ADD
(
NETLINK_INET_DIAG
,
öëdüg
)

592 
__ADD
(
NETLINK_NFLOG
,
nÊog
)

593 
__ADD
(
NETLINK_XFRM
,
x‰m
)

594 
__ADD
(
NETLINK_SELINUX
,
£löux
)

595 
__ADD
(
NETLINK_ISCSI
,
iscsi
)

596 
__ADD
(
NETLINK_AUDIT
,
audô
)

597 
__ADD
(
NETLINK_FIB_LOOKUP
,
fib_lookup
)

598 
__ADD
(
NETLINK_CONNECTOR
,
c⁄√˘‹
)

599 
__ADD
(
NETLINK_NETFILTER
,
√tfûãr
)

600 
__ADD
(
NETLINK_IP6_FW
,
ù6_fw
)

601 
__ADD
(
NETLINK_DNRTMSG
,
dƒtmsg
)

602 
__ADD
(
NETLINK_KOBJECT_UEVENT
,
kobje˘_uevít
)

603 
__ADD
(
NETLINK_GENERIC
,
gíîic
)

604 
__ADD
(
NETLINK_SCSITRANSPORT
,
scsôøn•‹t
)

605 
__ADD
(
NETLINK_ECRYPTFS
,
e¸y±fs
)

608 * 
	$∆_∆Ámûy2°r
(
Ámûy
, *
buf
, 
size_t
 
size
)

610  
	`__ty≥2°r
(
Ámûy
, 
buf
, 
size
, 
∆Ámûõs
,

611 
	`ARRAY_SIZE
(
∆Ámûõs
));

612 
	}
}

614 
	$∆_°r2∆Ámûy
(c⁄° *
«me
)

616  
	`__°r2ty≥
(
«me
, 
∆Ámûõs
, 
	`ARRAY_SIZE
(nlfamilies));

617 
	}
}

628 c⁄° 
å™s_tbl
 
	gŒ¥Ÿos
[] = {

630 
__ADD
(
ARPHRD_ETHER
,
ëhî
)

631 
__ADD
(
ARPHRD_EETHER
,
ìthî
)

632 
__ADD
(
ARPHRD_AX25
,
ax25
)

633 
__ADD
(
ARPHRD_PRONET
,
¥⁄ë
)

634 
__ADD
(
ARPHRD_CHAOS
,
chaos
)

635 
__ADD
(
ARPHRD_IEEE802
,
õì802
)

636 
__ADD
(
ARPHRD_ARCNET
,
¨˙ë
)

637 
__ADD
(
ARPHRD_APPLETLK
,
©Æk
)

638 
__ADD
(
ARPHRD_DLCI
,
dlci
)

639 
__ADD
(
ARPHRD_ATM
,
©m
)

640 
__ADD
(
ARPHRD_METRICOM
,
mëricom
)

641 
__ADD
(
ARPHRD_IEEE1394
,
õì1394
)

642 #ifde‡
ARPHRD_EUI64


643 
__ADD
(
ARPHRD_EUI64
,
eui64
)

645 
__ADD
(
ARPHRD_INFINIBAND
,
öföib™d
)

646 
__ADD
(
ARPHRD_SLIP
,
¶ù
)

647 
__ADD
(
ARPHRD_CSLIP
,
c¶ù
)

648 
__ADD
(
ARPHRD_SLIP6
,
¶ù6
)

649 
__ADD
(
ARPHRD_CSLIP6
,
c¶ù6
)

650 
__ADD
(
ARPHRD_RSRVD
,
r§vd
)

651 
__ADD
(
ARPHRD_ADAPT
,
ad≠t
)

652 
__ADD
(
ARPHRD_ROSE
,
ro£
)

653 
__ADD
(
ARPHRD_X25
,
x25
)

654 #ifde‡
ARPHRD_HWX25


655 
__ADD
(
ARPHRD_HWX25
,
hwx25
)

657 
__ADD
(
ARPHRD_CAN
,
ˇn
)

658 
__ADD
(
ARPHRD_PPP
,
µp
)

659 
__ADD
(
ARPHRD_HDLC
,
hdlc
)

660 
__ADD
(
ARPHRD_LAPB
,
œpb
)

661 
__ADD
(
ARPHRD_DDCMP
,
ddcmp
)

662 
__ADD
(
ARPHRD_RAWHDLC
,
øwhdlc
)

663 
__ADD
(
ARPHRD_TUNNEL
,
ùù
)

664 
__ADD
(
ARPHRD_TUNNEL6
,
tu¬ñ6
)

665 
__ADD
(
ARPHRD_FRAD
,
‰ad
)

666 
__ADD
(
ARPHRD_SKIP
,
skù
)

667 
__ADD
(
ARPHRD_LOOPBACK
,
lo›back
)

668 
__ADD
(
ARPHRD_LOCALTLK
,
loˇ…lk
)

669 
__ADD
(
ARPHRD_FDDI
,
fddi
)

670 
__ADD
(
ARPHRD_BIF
,
bif
)

671 
__ADD
(
ARPHRD_SIT
,
sô
)

672 
__ADD
(
ARPHRD_IPDDP
,
ù
/
ddp
)

673 
__ADD
(
ARPHRD_IPGRE
,
gª
)

674 
__ADD
(
ARPHRD_PIMREG
,
pimªg
)

675 
__ADD
(
ARPHRD_HIPPI
,
hùpi
)

676 
__ADD
(
ARPHRD_ASH
,
ash
)

677 
__ADD
(
ARPHRD_ECONET
,
ec⁄ë
)

678 
__ADD
(
ARPHRD_IRDA
,
úda
)

679 
__ADD
(
ARPHRD_FCPP
,
f˝p
)

680 
__ADD
(
ARPHRD_FCAL
,
fˇl
)

681 
__ADD
(
ARPHRD_FCPL
,
f˝l
)

682 
__ADD
(
ARPHRD_FCFABRIC
,
fcfb_0
)

683 
__ADD
(
ARPHRD_FCFABRIC
+1,
fcfb_1
)

684 
__ADD
(
ARPHRD_FCFABRIC
+2,
fcfb_2
)

685 
__ADD
(
ARPHRD_FCFABRIC
+3,
fcfb_3
)

686 
__ADD
(
ARPHRD_FCFABRIC
+4,
fcfb_4
)

687 
__ADD
(
ARPHRD_FCFABRIC
+5,
fcfb_5
)

688 
__ADD
(
ARPHRD_FCFABRIC
+6,
fcfb_6
)

689 
__ADD
(
ARPHRD_FCFABRIC
+7,
fcfb_7
)

690 
__ADD
(
ARPHRD_FCFABRIC
+8,
fcfb_8
)

691 
__ADD
(
ARPHRD_FCFABRIC
+9,
fcfb_9
)

692 
__ADD
(
ARPHRD_FCFABRIC
+10,
fcfb_10
)

693 
__ADD
(
ARPHRD_FCFABRIC
+11,
fcfb_11
)

694 
__ADD
(
ARPHRD_FCFABRIC
+12,
fcfb_12
)

695 
__ADD
(
ARPHRD_IEEE802_TR
,
å
)

696 
__ADD
(
ARPHRD_IEEE80211
,
õì802
.11)

697 
__ADD
(
ARPHRD_PHONET
,
ph⁄ë
)

698 #ifde‡
ARPHRD_CAIF


699 
__ADD
(
ARPHRD_CAIF
, 
ˇif
)

701 #ifde‡
ARPHRD_IEEE80211_PRISM


702 
__ADD
(
ARPHRD_IEEE80211_PRISM
, 
õì802
.11
_¥ism
)

704 #ifde‡
ARPHRD_VOID


705 
__ADD
(
ARPHRD_VOID
,)

707 #ifde‡
ARPHRD_NONE


708 
__ADD
(
ARPHRD_NONE
,
nohdr
)

712 * 
	$∆_Œ¥Ÿo2°r
(
Œ¥Ÿo
, *
buf
, 
size_t
 
Àn
)

714  
	`__ty≥2°r
(
Œ¥Ÿo
, 
buf
, 
Àn
, 
Œ¥Ÿos
, 
	`ARRAY_SIZE
(llprotos));

715 
	}
}

717 
	$∆_°r2Œ¥Ÿo
(c⁄° *
«me
)

719  
	`__°r2ty≥
(
«me
, 
Œ¥Ÿos
, 
	`ARRAY_SIZE
(llprotos));

720 
	}
}

730 c⁄° 
å™s_tbl
 
	gëhî_¥Ÿos
[] = {

731 
__ADD
(
ETH_P_LOOP
,
lo›
)

732 
__ADD
(
ETH_P_PUP
,
pup
)

733 
__ADD
(
ETH_P_PUPAT
,
pu∑t
)

734 
__ADD
(
ETH_P_IP
,
ù
)

735 
__ADD
(
ETH_P_X25
,
x25
)

736 
__ADD
(
ETH_P_ARP
,
¨p
)

737 
__ADD
(
ETH_P_BPQ
,
bpq
)

738 
__ADD
(
ETH_P_IEEEPUP
,
õìpup
)

739 
__ADD
(
ETH_P_IEEEPUPAT
,
õìpu∑t
)

740 
__ADD
(
ETH_P_DEC
,
dec
)

741 
__ADD
(
ETH_P_DNA_DL
,
d«_dl
)

742 
__ADD
(
ETH_P_DNA_RC
,
d«_rc
)

743 
__ADD
(
ETH_P_DNA_RT
,
d«_π
)

744 
__ADD
(
ETH_P_LAT
,
œt
)

745 
__ADD
(
ETH_P_DIAG
,
düg
)

746 
__ADD
(
ETH_P_CUST
,
cu°
)

747 
__ADD
(
ETH_P_SCA
,
sˇ
)

748 
__ADD
(
ETH_P_TEB
,
ãb
)

749 
__ADD
(
ETH_P_RARP
,
øΩ
)

750 
__ADD
(
ETH_P_ATALK
,
©Æk
)

751 
__ADD
(
ETH_P_AARP
,
ØΩ
)

752 #ifde‡
ETH_P_8021Q


753 
__ADD
(
ETH_P_8021Q
,802.1
q
)

755 
__ADD
(
ETH_P_IPX
,
ùx
)

756 
__ADD
(
ETH_P_IPV6
,
ùv6
)

757 
__ADD
(
ETH_P_PAUSE
,
∑u£
)

758 
__ADD
(
ETH_P_SLOW
,
¶ow
)

759 #ifde‡
ETH_P_WCCP


760 
__ADD
(
ETH_P_WCCP
,
wc˝
)

762 
__ADD
(
ETH_P_PPP_DISC
,
µp_disc
)

763 
__ADD
(
ETH_P_PPP_SES
,
µp_£s
)

764 
__ADD
(
ETH_P_MPLS_UC
,
m∂s_uc
)

765 
__ADD
(
ETH_P_MPLS_MC
,
m∂s_mc
)

766 
__ADD
(
ETH_P_ATMMPOA
,
©mmpﬂ
)

767 
__ADD
(
ETH_P_LINK_CTL
,
lök_˘l
)

768 
__ADD
(
ETH_P_ATMFATE
,
©mÁã
)

769 
__ADD
(
ETH_P_PAE
,
∑e
)

770 
__ADD
(
ETH_P_AOE
,
a€
)

771 
__ADD
(
ETH_P_TIPC
,
tùc
)

772 
__ADD
(
ETH_P_1588
,
õì1588
)

773 
__ADD
(
ETH_P_FCOE
,
fc€
)

774 
__ADD
(
ETH_P_FIP
,
fù
)

775 
__ADD
(
ETH_P_EDSA
,
edß
)

776 
__ADD
(
ETH_P_EDP2
,
edp2
)

777 
__ADD
(
ETH_P_802_3
,802.3)

778 
__ADD
(
ETH_P_AX25
,
ax25
)

779 
__ADD
(
ETH_P_ALL
,
Æl
)

780 
__ADD
(
ETH_P_802_2
,802.2)

781 
__ADD
(
ETH_P_SNAP
,
¢≠
)

782 
__ADD
(
ETH_P_DDCMP
,
ddcmp
)

783 
__ADD
(
ETH_P_WAN_PPP
,
w™_µp
)

784 
__ADD
(
ETH_P_PPP_MP
,
µp_mp
)

785 
__ADD
(
ETH_P_LOCALTALK
,
loˇ…Æk
)

786 
__ADD
(
ETH_P_CAN
,
ˇn
)

787 
__ADD
(
ETH_P_PPPTALK
,
µ±Æk
)

788 
__ADD
(
ETH_P_TR_802_2
,
å_802
.2)

789 
__ADD
(
ETH_P_MOBITEX
,
mobôex
)

790 
__ADD
(
ETH_P_CONTROL
,
c⁄åﬁ
)

791 
__ADD
(
ETH_P_IRDA
,
úda
)

792 
__ADD
(
ETH_P_ECONET
,
ec⁄ë
)

793 
__ADD
(
ETH_P_HDLC
,
hdlc
)

794 
__ADD
(
ETH_P_ARCNET
,
¨˙ë
)

795 
__ADD
(
ETH_P_DSA
,
dß
)

796 
__ADD
(
ETH_P_TRAILER
,
åaûî
)

797 
__ADD
(
ETH_P_PHONET
,
ph⁄ë
)

798 
__ADD
(
ETH_P_IEEE802154
,
õì802154
)

799 
__ADD
(
ETH_P_CAIF
,
ˇif
)

802 *
	$∆_ëhî_¥Ÿo2°r
(
ïrŸo
, *
buf
, 
size_t
 
Àn
)

804  
	`__ty≥2°r
(
ïrŸo
, 
buf
, 
Àn
, 
ëhî_¥Ÿos
,

805 
	`ARRAY_SIZE
(
ëhî_¥Ÿos
));

806 
	}
}

808 
	$∆_°r2ëhî_¥Ÿo
(c⁄° *
«me
)

810  
	`__°r2ty≥
(
«me
, 
ëhî_¥Ÿos
, 
	`ARRAY_SIZE
(ether_protos));

811 
	}
}

820 *
	$∆_ù_¥Ÿo2°r
(
¥Ÿo
, *
buf
, 
size_t
 
Àn
)

822 
¥Ÿ€¡
 *
p
 = 
	`gë¥Ÿobynumbî
(
¥Ÿo
);

824 i‡(
p
) {

825 
	`¢¥ötf
(
buf
, 
Àn
, "%s", 
p
->
p_«me
);

826  
buf
;

829 
	`¢¥ötf
(
buf
, 
Àn
, "0x%x", 
¥Ÿo
);

830  
buf
;

831 
	}
}

833 
	$∆_°r2ù_¥Ÿo
(c⁄° *
«me
)

835 
¥Ÿ€¡
 *
p
 = 
	`gë¥Ÿoby«me
(
«me
);

836 
l
;

837 *
íd
;

839 i‡(
p
)

840  
p
->
p_¥Ÿo
;

842 
l
 = 
	`°πoul
(
«me
, &
íd
, 0);

843 i‡(
l
 =
ULONG_MAX
 || *
íd
 != '\0')

844  -
NLE_OBJ_NOTFOUND
;

846  (Ë
l
;

847 
	}
}

866 
	$∆_√w_löe
(
∆_dump_∑øms
 *
∑øms
)

868 
∑øms
->
dp_löe
++;

870 i‡(
∑øms
->
dp_¥efix
) {

871 
i
;

872 
i
 = 0; i < 
∑øms
->
dp_¥efix
; i++) {

873 i‡(
∑øms
->
dp_fd
)

874 
	`Ârötf
(
∑øms
->
dp_fd
, " ");

875 i‡(
∑øms
->
dp_buf
)

876 
	`°∫ˇt
(
∑øms
->
dp_buf
, " ",

877 
∑øms
->
dp_buÊí
 -

878 
	`°æí
(
∑øms
->
dp_buf
) - 1);

882 i‡(
∑øms
->
dp_∆_cb
)

883 
∑øms
->
	`dp_∆_cb
’¨ams,Ö¨ams->
dp_löe
);

884 
	}
}

886 
	$dump_⁄e
(
∆_dump_∑øms
 *
∑rms
, c⁄° *
fmt
,

887 
va_li°
 
¨gs
)

889 i‡(
∑rms
->
dp_fd
)

890 
	`vÂrötf
(
∑rms
->
dp_fd
, 
fmt
, 
¨gs
);

891 i‡(
∑rms
->
dp_buf
 ||Ö¨ms->
dp_cb
) {

892 *
buf
 = 
NULL
;

893 i‡(
	`va•rötf
(&
buf
, 
fmt
, 
¨gs
) >= 0) {

894 i‡(
∑rms
->
dp_cb
)

895 
∑rms
->
	`dp_cb
’¨ms, 
buf
);

897 
	`°∫ˇt
(
∑rms
->
dp_buf
, 
buf
,

898 
∑rms
->
dp_buÊí
 -

899 
	`°æí
(
∑rms
->
dp_buf
) - 1);

900 
	`‰ì
(
buf
);

903 
	}
}

915 
	$∆_dump
(
∆_dump_∑øms
 *
∑øms
, c⁄° *
fmt
, ...)

917 
va_li°
 
¨gs
;

919 
	`va_°¨t
(
¨gs
, 
fmt
);

920 
	`dump_⁄e
(
∑øms
, 
fmt
, 
¨gs
);

921 
	`va_íd
(
¨gs
);

922 
	}
}

924 
	$∆_dump_löe
(
∆_dump_∑øms
 *
∑rms
, c⁄° *
fmt
, ...)

926 
va_li°
 
¨gs
;

928 
	`∆_√w_löe
(
∑rms
);

930 
	`va_°¨t
(
¨gs
, 
fmt
);

931 
	`dump_⁄e
(
∑rms
, 
fmt
, 
¨gs
);

932 
	`va_íd
(
¨gs
);

933 
	}
}

940 
	$__å™s_li°_add
(
i
, c⁄° *
a
, 
∆_li°_hód
 *
hód
)

942 
å™s_li°
 *
é
;

944 
é
 = 
	`ˇŒoc
(1, (*tl));

945 i‡(!
é
)

946  -
NLE_NOMEM
;

948 
é
->
i
 = i;

949 
é
->
a
 = 
	`°rdup
(a);

951 
	`∆_li°_add_èû
(&
é
->
li°
, 
hód
);

954 
	}
}

956 
	$__å™s_li°_˛ór
(
∆_li°_hód
 *
hód
)

958 
å™s_li°
 *
é
, *
√xt
;

960 
	`∆_li°_f‹_óch_íåy_ß„
(
é
, 
√xt
, 
hód
, 
li°
) {

961 
	`‰ì
(
é
->
a
);

962 
	`‰ì
(
é
);

965 
	`∆_öô_li°_hód
(
hód
);

966 
	}
}

968 *
	$__ty≥2°r
(
ty≥
, *
buf
, 
size_t
 
Àn
,

969 c⁄° 
å™s_tbl
 *
tbl
, 
size_t
 
tbl_Àn
)

971 
size_t
 
i
;

972 
i
 = 0; i < 
tbl_Àn
; i++) {

973 i‡(
tbl
[
i
].ò=
ty≥
) {

974 
	`¢¥ötf
(
buf
, 
Àn
, "%s", 
tbl
[
i
].
a
);

975  
buf
;

979 
	`¢¥ötf
(
buf
, 
Àn
, "0x%x", 
ty≥
);

980  
buf
;

981 
	}
}

983 *
	$__li°_ty≥2°r
(
ty≥
, *
buf
, 
size_t
 
Àn
,

984 
∆_li°_hód
 *
hód
)

986 
å™s_li°
 *
é
;

988 
	`∆_li°_f‹_óch_íåy
(
é
, 
hód
, 
li°
) {

989 i‡(
é
->
i
 =
ty≥
) {

990 
	`¢¥ötf
(
buf
, 
Àn
, "%s", 
é
->
a
);

991  
buf
;

995 
	`¢¥ötf
(
buf
, 
Àn
, "0x%x", 
ty≥
);

996  
buf
;

997 
	}
}

999 *
	$__Êags2°r
(
Êags
, *
buf
, 
size_t
 
Àn
,

1000 c⁄° 
å™s_tbl
 *
tbl
, 
size_t
 
tbl_Àn
)

1002 
size_t
 
i
;

1003 
tmp
 = 
Êags
;

1005 
	`mem£t
(
buf
, 0, 
Àn
);

1007 
i
 = 0; i < 
tbl_Àn
; i++) {

1008 i‡(
tbl
[
i
].ò& 
tmp
) {

1009 
tmp
 &~
tbl
[
i
].i;

1010 
	`°∫ˇt
(
buf
, 
tbl
[
i
].
a
, 
Àn
 - 
	`°æí
(buf) - 1);

1011 i‡((
tmp
 & 
Êags
))

1012 
	`°∫ˇt
(
buf
, ",", 
Àn
 - 
	`°æí
(buf) - 1);

1016  
buf
;

1017 
	}
}

1019 
	$__°r2ty≥
(c⁄° *
buf
, c⁄° 
å™s_tbl
 *
tbl
, 
size_t
 
tbl_Àn
)

1021 
l
;

1022 *
íd
;

1023 
size_t
 
i
;

1025 i‡(*
buf
 == '\0')

1026  -
NLE_INVAL
;

1028 
i
 = 0; i < 
tbl_Àn
; i++)

1029 i‡(!
	`°rˇ£cmp
(
tbl
[
i
].
a
, 
buf
))

1030  
tbl
[
i
].i;

1032 
l
 = 
	`°πoul
(
buf
, &
íd
, 0);

1033 i‡(
l
 =
ULONG_MAX
 || *
íd
 != '\0')

1034  -
NLE_OBJ_NOTFOUND
;

1036  (Ë
l
;

1037 
	}
}

1039 
	$__li°_°r2ty≥
(c⁄° *
buf
, 
∆_li°_hód
 *
hód
)

1041 
å™s_li°
 *
é
;

1042 
l
;

1043 *
íd
;

1045 i‡(*
buf
 == '\0')

1046  -
NLE_INVAL
;

1048 
	`∆_li°_f‹_óch_íåy
(
é
, 
hód
, 
li°
) {

1049 i‡(!
	`°rˇ£cmp
(
é
->
a
, 
buf
))

1050  
é
->
i
;

1053 
l
 = 
	`°πoul
(
buf
, &
íd
, 0);

1054 i‡(
l
 =
ULONG_MAX
 || *
íd
 != '\0')

1055  -
NLE_OBJ_NOTFOUND
;

1057  (Ë
l
;

1058 
	}
}

1060 
	$__°r2Êags
(c⁄° *
buf
, c⁄° 
å™s_tbl
 *
tbl
, 
size_t
 
tbl_Àn
)

1062 
Êags
 = 0;

1063 
size_t
 
i
;

1064 
size_t
 
Àn
;

1065 *
p
 = (*Ë
buf
, *
t
;

1068 i‡(*
p
 == ' ')

1069 
p
++;

1071 
t
 = 
	`°rchr
(
p
, ',');

1072 
Àn
 = 
t
 ?Å - 
p
 : 
	`°æí
(p);

1073 
i
 = 0; i < 
tbl_Àn
; i++)

1074 i‡(
Àn
 =
	`°æí
(
tbl
[
i
].
a
) &&

1075 !
	`°∫ˇ£cmp
(
tbl
[
i
].
a
, 
p
, 
Àn
))

1076 
Êags
 |
tbl
[
i
].i;

1078 i‡(!
t
)

1079  
Êags
;

1081 
p
 = ++
t
;

1085 
	}
}

1087 
	$dump_‰om_›s
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
∑øms
)

1089 
ty≥
 = 
∑øms
->
dp_ty≥
;

1091 i‡(
ty≥
 < 0 ||Åy≥ > 
NL_DUMP_MAX
)

1092 
	`BUG
();

1094 
∑øms
->
dp_löe
 = 0;

1096 i‡(
∑øms
->
dp_dump_msgty≥
) {

1099 
buf
[64];

1101 
	`dp_dump_löe
(
∑øms
, 0, "%s ",

1102 
	`∆_ˇche_mngt_ty≥2«me
(
obj
->
˚_›s
,

1103 
obj
->
˚_›s
->
co_¥Ÿocﬁ
,

1104 
obj
->
˚_msgty≥
,

1105 
buf
, (buf)));

1107 
∑øms
->
dp_¥e_dump
 = 1;

1110 i‡(
obj
->
˚_›s
->
oo_dump
[
ty≥
])

1111 
obj
->
˚_›s
->
oo_dump
[
ty≥
](obj, 
∑øms
);

1112 
	}
}

1133 
	$∆_has_ˇ∑bûôy
 (
ˇ∑bûôy
)

1135 c⁄° 
uöt8_t
 
ˇps
[ ( 
NL_CAPABILITY_MAX
 + 7 ) / 8 ] = {

1136 
	#_NL_ASSERT
(
ex¥
Ë–0 * (°ru˘ { 
x
: ( (!!”x¥)Ë? 1 : -1 ); }Ë)

	)

1137 
	#_NL_SETV
(
i
, 
r
, 
v
) \

1138 –
	`_NL_ASSERT
–(
v
Ë=0 || (
i
Ë* 8 + (
r
) == (v) - 1 ) + \

1139 –(
v
Ë=0 ? 0 : (1 << (
r
)ËË)

	)

1140 
	#_NL_SET
(
i
, 
v0
, 
v1
, 
v2
, 
v3
, 
v4
, 
v5
, 
v6
, 
v7
) \

1141 [(
i
)] = ( \

1142 
	`_NL_SETV
((
i
), 0, (
v0
)Ë| _NL_SETV((i), 4, (
v4
)) | \

1143 
	`_NL_SETV
((
i
), 1, (
v1
)Ë| _NL_SETV((i), 5, (
v5
)) | \

1144 
	`_NL_SETV
((
i
), 2, (
v2
)Ë| _NL_SETV((i), 6, (
v6
)) | \

1145 
	`_NL_SETV
((
i
), 3, (
v3
)Ë| _NL_SETV((i), 7, (
v7
)Ë)

	)

1146 
	`_NL_SET
(0,

1147 
NL_CAPABILITY_ROUTE_BUILD_MSG_SET_SCOPE
,

1148 
NL_CAPABILITY_ROUTE_LINK_VETH_GET_PEER_OWN_REFERENCE
,

1149 
NL_CAPABILITY_ROUTE_LINK_CLS_ADD_ACT_OWN_REFERENCE
,

1150 
NL_CAPABILITY_NL_CONNECT_RETRY_GENERATE_PORT_ON_ADDRINUSE
,

1155 #unde‡
_NL_SET


1156 #unde‡
_NL_SETV


1157 #unde‡
_NL_ASSERT


1160 i‡(
ˇ∑bûôy
 <0 || c≠abûôy > 
NL_CAPABILITY_MAX
)

1162 
ˇ∑bûôy
--;

1163  (
ˇps
[
ˇ∑bûôy
 / 8] & (1 << (capability % 8))) != 0;

1164 
	}
}

	@mylibnl/libnl-3.2.25/lib/version.c

27 
	~<√éök/vîsi⁄.h
>

29 c⁄° 
	g∆_vî_num
 = 
LIBNL_VER_NUM
;

30 c⁄° 
	g∆_vî_maj
 = 
LIBNL_VER_MAJ
;

31 c⁄° 
	g∆_vî_mö
 = 
LIBNL_VER_MIN
;

32 c⁄° 
	g∆_vî_mic
 = 
LIBNL_VER_MIC
;

	@mylibnl/libnl-3.2.25/python/netlink/fixes.h

1 
	~<°döt.h
>

	@mylibnl/libnl-3.2.25/python/netlink/utils.h

1 
	sli°_hód
 {

2 
li°_hód
 *
	m√xt
;

5 
	#LIST_HEAD
(
«me
) \

6 
li°_hód
 
«me
 = { &“ameË}

	)

8 
ölöe
 
	$li°_em±y
(c⁄° 
li°_hód
 *
hód
)

10  
hód
->
√xt
 == head;

11 
	}
}

13 
ölöe
 
	$li°_add
(
li°_hód
 *
√w
, li°_hód *
hód
)

15 
√w
->
√xt
 = 
hód
->next;

16 
hód
->
√xt
 = 
√w
;

17 
	}
}

19 
ölöe
 
	$li°_dñ
(
li°_hód
 *
íåy
, li°_hód *
¥ev
)

21 
¥ev
->
√xt
 = 
íåy
->next;

22 
íåy
->
√xt
 =Éntry;

23 
	}
}

25 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

26 
n
 = (
hód
), 
pos
 = (hód)->
√xt
;Öos != (head); \

27 
n
 = 
pos
,Öo†n->
√xt
)

	)

29 #unde‡
off£tof


30 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

32 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ({ \

33 c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

34 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

36 #ifde‡
DEBUG


37 
	#py∆_dbg
(
fmt
, ...) \

38 
	`Ârötf
(
°dîr
, "%s: " 
fmt
, 
__func__
, 
__VA_ARGS__
)

	)

40 
	#py∆_dbg
(
fmt
, ...)

	)

	@mylibnl/libnl-3.2.25/src/genl-ctrl-list.c

12 
	~<√éök/˛i/utûs.h
>

14 
∆_ˇche
 *
	$Æloc_gíl_Ámûy_ˇche
(
∆_sock
 *
sk
)

16  
	`∆_˛i_Æloc_ˇche
(
sk
, "genericÇetlink family",

17 
gíl_˘æ_Æloc_ˇche
);

18 
	}
}

20 
	$¥öt_ußge
()

22 
	`¥ötf
(

30 
	`exô
(0);

31 
	}
}

33 
	$maö
(
¨gc
, *
¨gv
[])

35 
∆_sock
 *
sock
;

36 
∆_ˇche
 *
Ámûy_ˇche
;

37 
∆_dump_∑øms
 
∑øms
 = {

38 .
dp_ty≥
 = 
NL_DUMP_LINE
,

39 .
dp_fd
 = 
°dout
,

42 
sock
 = 
	`∆_˛i_Æloc_sockë
();

43 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_GENERIC
);

44 
Ámûy_ˇche
 = 
	`Æloc_gíl_Ámûy_ˇche
(
sock
);

47 
c
, 
›tidx
 = 0;

48 
›ti⁄
 
l⁄g_›ts
[] = {

56 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "df:hv", 
l⁄g_›ts
, &
›tidx
);

57 i‡(
c
 == -1)

60 
c
) {

61 'f': 
∑øms
.
dp_ty≥
 = 
	`∆_˛i_∑r£_dum±y≥
(
›èrg
); ;

62 'd': 
∑øms
.
dp_ty≥
 = 
NL_DUMP_DETAILS
; ;

63 'h': 
	`¥öt_ußge
(); ;

64 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

68 
	`∆_ˇche_dump
(
Ámûy_ˇche
, &
∑øms
);

71 
	}
}

	@mylibnl/libnl-3.2.25/src/idiag-socket-details.c

11 
	~<√éök/˛i/utûs.h
>

12 
	~<√éök/idüg/idüg∆.h
>

13 
	~<√éök/idüg/msg.h
>

14 
	~<löux/√éök.h
>

16 
	$¥öt_ußge
()

18 
	`¥ötf
(

28 
	`exô
(0);

29 
	}
}

31 
	$maö
(
¨gc
, *
¨gv
[])

33 
∆_sock
 *
sock
;

34 
∆_ˇche
 *
idüg_ˇche
;

35 
∆_dump_∑øms
 
∑øms
 = {

36 .
dp_ty≥
 = 
NL_DUMP_LINE
,

37 .
dp_∆_cb
 = 
NULL
,

38 .
dp_fd
 = 
°dout
,

40 
îr
 = 0;

42 
sock
 = 
	`∆_˛i_Æloc_sockë
();

43 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_INET_DIAG
);

45 
c
, 
›tidx
 = 0;

47 
ARG_SUMMARY
 = 257,

48 
ARG_DETAILS
 = 258,

49 
ARG_STATS
 = 259,

50 
ARG_FAMILY
,

52 
›ti⁄
 
l⁄g_›ts
[] = {

53 { "dëaûs", 0, 0, 
ARG_DETAILS
 },

54 { "summ¨y", 0, 0, 
ARG_SUMMARY
 },

55 { "°©s", 0, 0, 
ARG_STATS
},

61 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hv", 
l⁄g_›ts
, &
›tidx
);

62 i‡(
c
 == -1)

65 
c
) {

66 '?': 
	`exô
(
NLE_INVAL
);

67 
ARG_SUMMARY
: 
∑øms
.
dp_ty≥
 = 
NL_DUMP_LINE
; ;

68 
ARG_DETAILS
: 
∑øms
.
dp_ty≥
 = 
NL_DUMP_DETAILS
; ;

69 
ARG_STATS
: 
∑øms
.
dp_ty≥
 = 
NL_DUMP_STATS
; ;

70 'h': 
	`¥öt_ußge
(); ;

71 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

75 i‡((
îr
 = 
	`idüg∆_msg_Æloc_ˇche
(
sock
, 
AF_INET
, 
IDIAG_SS_ALL
,

76 &
idüg_ˇche
))) {

77 
	`∆_˛i_Áèl
(
îr
, "UnableÅoállocate idiag msg cache: %s",

78 
	`∆_gëîr‹
(
îr
));

81 
	`∆_ˇche_mngt_¥ovide
(
idüg_ˇche
);

83 
	`∆_ˇche_dump_fûãr
(
idüg_ˇche
, &
∑øms
, 
NULL
);

85 
	`∆_ˇche_mngt_u≈rovide
(
idüg_ˇche
);

86 
	`∆_ˇche_‰ì
(
idüg_ˇche
);

87 
	`∆_sockë_‰ì
(
sock
);

90 
	}
}

	@mylibnl/libnl-3.2.25/src/lib/addr.c

19 
	~<√éök/˛i/utûs.h
>

20 
	~<√éök/˛i/addr.h
>

22 
π∆_addr
 *
	$∆_˛i_addr_Æloc
()

24 
π∆_addr
 *
addr
;

26 
addr
 = 
	`π∆_addr_Æloc
();

27 i‡(!
addr
)

28 
	`∆_˛i_Áèl
(
ENOMEM
, "UnableÅoállocateáddress object");

30  
addr
;

31 
	}
}

33 
	$∆_˛i_addr_∑r£_Ámûy
(
π∆_addr
 *
addr
, *
¨g
)

35 
Ámûy
;

37 i‡((
Ámûy
 = 
	`∆_°r2af
(
¨g
)Ë!
AF_UNSPEC
)

38 
	`π∆_addr_£t_Ámûy
(
addr
, 
Ámûy
);

39 
	}
}

41 
	$∆_˛i_addr_∑r£_loˇl
(
π∆_addr
 *
addr
, *
¨g
)

43 
∆_addr
 *
a
;

44 
îr
;

46 
a
 = 
	`∆_˛i_addr_∑r£
(
¨g
, 
	`π∆_addr_gë_Ámûy
(
addr
));

47 i‡((
îr
 = 
	`π∆_addr_£t_loˇl
(
addr
, 
a
)) < 0)

48 
	`∆_˛i_Áèl
(
îr
, "UnableÅo setÜocaláddress: %s",

49 
	`∆_gëîr‹
(
îr
));

51 
	`∆_addr_put
(
a
);

52 
	}
}

54 
	$∆_˛i_addr_∑r£_dev
(
π∆_addr
 *
addr
, 
∆_ˇche
 *
lök_ˇche
,

55 *
¨g
)

57 
ivÆ
;

59 i‡(!(
ivÆ
 = 
	`π∆_lök_«me2i
(
lök_ˇche
, 
¨g
)))

60 
	`∆_˛i_Áèl
(
ENOENT
, "Lök \"%s\" d€†nŸÉxi°", 
¨g
);

62 
	`π∆_addr_£t_ifödex
(
addr
, 
ivÆ
);

63 
	}
}

65 
	$∆_˛i_addr_∑r£_œbñ
(
π∆_addr
 *
addr
, *
¨g
)

67 
îr
;

69 i‡((
îr
 = 
	`π∆_addr_£t_œbñ
(
addr
, 
¨g
)) < 0)

70 
	`∆_˛i_Áèl
(
îr
, "UnableÅo setáddressÜabel: %s",

71 
	`∆_gëîr‹
(
îr
));

72 
	}
}

74 
	$∆_˛i_addr_∑r£_≥î
(
π∆_addr
 *
addr
, *
¨g
)

76 
∆_addr
 *
a
;

77 
îr
;

79 
a
 = 
	`∆_˛i_addr_∑r£
(
¨g
, 
	`π∆_addr_gë_Ámûy
(
addr
));

80 i‡((
îr
 = 
	`π∆_addr_£t_≥î
(
addr
, 
a
)) < 0)

81 
	`∆_˛i_Áèl
(
îr
, "UnableÅo setÖeeráddress: %s",

82 
	`∆_gëîr‹
(
îr
));

84 
	`∆_addr_put
(
a
);

85 
	}
}

87 
	$∆_˛i_addr_∑r£_sc›e
(
π∆_addr
 *
addr
, *
¨g
)

89 
ivÆ
;

91 i‡((
ivÆ
 = 
	`π∆_°r2sc›e
(
¨g
)) < 0)

92 
	`∆_˛i_Áèl
(
EINVAL
, "Unknow¿addªs†sc›ê\"%s\"", 
¨g
);

94 
	`π∆_addr_£t_sc›e
(
addr
, 
ivÆ
);

95 
	}
}

97 
	$∆_˛i_addr_∑r£_brﬂdˇ°
(
π∆_addr
 *
addr
, *
¨g
)

99 
∆_addr
 *
a
;

100 
îr
;

102 
a
 = 
	`∆_˛i_addr_∑r£
(
¨g
, 
	`π∆_addr_gë_Ámûy
(
addr
));

103 i‡((
îr
 = 
	`π∆_addr_£t_brﬂdˇ°
(
addr
, 
a
)) < 0)

104 
	`∆_˛i_Áèl
(
îr
, "UnableÅo set broadcastáddress: %s",

105 
	`∆_gëîr‹
(
îr
));

107 
	`∆_addr_put
(
a
);

108 
	}
}

110 
uöt32_t
 
	$∑r£_li„time
(c⁄° *
¨g
)

112 
uöt64_t
 
m£cs
;

113 
îr
;

115 i‡(!
	`°rˇ£cmp
(
¨g
, "forever"))

118 i‡((
îr
 = 
	`∆_°r2m£c
(
¨g
, &
m£cs
)) < 0)

119 
	`∆_˛i_Áèl
(
îr
, "UnableÅoÖarseÅime string \"%s\": %s",

120 
¨g
, 
	`∆_gëîr‹
(
îr
));

122  (
m£cs
 / 1000);

123 
	}
}

125 
	$∆_˛i_addr_∑r£_¥e„ºed
(
π∆_addr
 *
addr
, *
¨g
)

127 
	`π∆_addr_£t_¥e„ºed_li„time
(
addr
, 
	`∑r£_li„time
(
¨g
));

128 
	}
}

130 
	$∆_˛i_addr_∑r£_vÆid
(
π∆_addr
 *
addr
, *
¨g
)

132 
	`π∆_addr_£t_vÆid_li„time
(
addr
, 
	`∑r£_li„time
(
¨g
));

133 
	}
}

	@mylibnl/libnl-3.2.25/src/lib/class.c

18 
	~<√éök/˛i/utûs.h
>

19 
	~<√éök/˛i/˛ass.h
>

21 
π∆_˛ass
 *
	$∆_˛i_˛ass_Æloc
()

23 
π∆_˛ass
 *
˛ass
;

25 i‡(!(
˛ass
 = 
	`π∆_˛ass_Æloc
()))

26 
	`∆_˛i_Áèl
(
ENOMEM
, "UnableÅoállocate class object");

28  
˛ass
;

29 
	}
}

31 
∆_ˇche
 *
	$∆_˛i_˛ass_Æloc_ˇche
(
∆_sock
 *
sock
, 
ifödex
)

33 
∆_ˇche
 *
ˇche
;

34 
îr
;

36 i‡((
îr
 = 
	`π∆_˛ass_Æloc_ˇche
(
sock
, 
ifödex
, &
ˇche
)) < 0)

37 
	`∆_˛i_Áèl
(
îr
, "UnableÅoállocate class cache: %s",

38 
	`∆_gëîr‹
(
îr
));

40 
	`∆_ˇche_mngt_¥ovide
(
ˇche
);

42  
ˇche
;

43 
	}
}

	@mylibnl/libnl-3.2.25/src/lib/cls.c

18 
	~<√éök/˛i/utûs.h
>

19 
	~<√éök/˛i/˛s.h
>

20 
	~<√éök/rouã/˛s/em©ch.h
>

22 
π∆_˛s
 *
	$∆_˛i_˛s_Æloc
()

24 
π∆_˛s
 *
˛s
;

26 i‡(!(
˛s
 = 
	`π∆_˛s_Æloc
()))

27 
	`∆_˛i_Áèl
(
ENOMEM
, "UnableÅoállocate classifier object");

29  
˛s
;

30 
	}
}

32 
∆_ˇche
 *
	$∆_˛i_˛s_Æloc_ˇche
(
∆_sock
 *
sock
, 
ifödex
,

33 
uöt32_t
 
∑ª¡
)

35 
∆_ˇche
 *
ˇche
;

36 
îr
;

38 i‡((
îr
 = 
	`π∆_˛s_Æloc_ˇche
(
sock
, 
ifödex
, 
∑ª¡
, &
ˇche
)) < 0)

39 
	`∆_˛i_Áèl
(
îr
, "UnableÅoállocate classifier cache: %s",

40 
	`∆_gëîr‹
(
îr
));

42  
ˇche
;

43 
	}
}

45 
	$∆_˛i_˛s_∑r£_¥Ÿo
(
π∆_˛s
 *
˛s
, *
¨g
)

47 
¥Ÿo
;

49 i‡((
¥Ÿo
 = 
	`∆_°r2ëhî_¥Ÿo
(
¨g
)) < 0)

50 
	`∆_˛i_Áèl
(
¥Ÿo
, "Unknow¿¥Ÿocﬁ \"%s\".", 
¨g
);

52 
	`π∆_˛s_£t_¥Ÿocﬁ
(
˛s
, 
¥Ÿo
);

53 
	}
}

55 
π∆_em©ch_åì
 *
	$∆_˛i_˛s_∑r£_em©ch
(
π∆_˛s
 *
˛s
, *
¨g
)

57 
π∆_em©ch_åì
 *
åì
;

58 *
îr°r
 = 
NULL
;

59 
îr
;

61 i‡((
îr
 = 
	`π∆_em©ch_∑r£_ex¥
(
¨g
, &
îr°r
, &
åì
)) < 0)

62 
	`∆_˛i_Áèl
(
îr
, "UnableÅoÖarseÉmatchÉxpression: %s",

63 
îr°r
);

65 i‡(
îr°r
)

66 
	`‰ì
(
îr°r
);

68  
åì
;

69 
	}
}

	@mylibnl/libnl-3.2.25/src/lib/ct.c

19 
	~<√éök/˛i/utûs.h
>

20 
	~<√éök/˛i/˘.h
>

22 
n‚l_˘
 *
	$∆_˛i_˘_Æloc
()

24 
n‚l_˘
 *
˘
;

26 
˘
 = 
	`n‚l_˘_Æloc
();

27 i‡(!
˘
)

28 
	`∆_˛i_Áèl
(
ENOMEM
, "UnableÅoállocate conntrack object");

30  
˘
;

31 
	}
}

33 
∆_ˇche
 *
	$∆_˛i_˘_Æloc_ˇche
(
∆_sock
 *
sk
)

35  
	`∆_˛i_Æloc_ˇche
(
sk
, "c⁄¡øck", 
n‚l_˘_Æloc_ˇche
);

36 
	}
}

38 
	$∆_˛i_˘_∑r£_Ámûy
(
n‚l_˘
 *
˘
, *
¨g
)

40 
Ámûy
;

42 i‡((
Ámûy
 = 
	`∆_°r2af
(
¨g
)Ë=
AF_UNSPEC
)

43 
	`∆_˛i_Áèl
(
EINVAL
,

45 
¨g
, 
	`∆_gëîr‹
(
NLE_INVAL
));

47 
	`n‚l_˘_£t_Ámûy
(
˘
, 
Ámûy
);

48 
	}
}

50 
	$∆_˛i_˘_∑r£_¥Ÿocﬁ
(
n‚l_˘
 *
˘
, *
¨g
)

52 
¥Ÿo
;

54 i‡((
¥Ÿo
 = 
	`∆_°r2ù_¥Ÿo
(
¨g
)) < 0)

55 
	`∆_˛i_Áèl
(
¥Ÿo
,

57 
¨g
, 
	`∆_gëîr‹
(
¥Ÿo
));

59 
	`n‚l_˘_£t_¥Ÿo
(
˘
, 
¥Ÿo
);

60 
	}
}

62 
	$∆_˛i_˘_∑r£_m¨k
(
n‚l_˘
 *
˘
, *
¨g
)

64 
uöt32_t
 
m¨k
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

65 
	`n‚l_˘_£t_m¨k
(
˘
, 
m¨k
);

66 
	}
}

68 
	$∆_˛i_˘_∑r£_timeout
(
n‚l_˘
 *
˘
, *
¨g
)

70 
uöt32_t
 
timeout
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

71 
	`n‚l_˘_£t_timeout
(
˘
, 
timeout
);

72 
	}
}

74 
	$∆_˛i_˘_∑r£_id
(
n‚l_˘
 *
˘
, *
¨g
)

76 
uöt32_t
 
id
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

77 
	`n‚l_˘_£t_id
(
˘
, 
id
);

78 
	}
}

80 
	$∆_˛i_˘_∑r£_u£
(
n‚l_˘
 *
˘
, *
¨g
)

82 
uöt32_t
 
u£
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

83 
	`n‚l_˘_£t_u£
(
˘
, 
u£
);

84 
	}
}

86 
	$∆_˛i_˘_∑r£_§c
(
n‚l_˘
 *
˘
, 
ª∂y
, *
¨g
)

88 
îr
;

89 
∆_addr
 *
a
 = 
	`∆_˛i_addr_∑r£
(
¨g
, 
	`n‚l_˘_gë_Ámûy
(
˘
));

90 i‡((
îr
 = 
	`n‚l_˘_£t_§c
(
˘
, 
ª∂y
, 
a
)) < 0)

91 
	`∆_˛i_Áèl
(
îr
, "UnableÅo set sourceáddress: %s",

92 
	`∆_gëîr‹
(
îr
));

93 
	}
}

95 
	$∆_˛i_˘_∑r£_d°
(
n‚l_˘
 *
˘
, 
ª∂y
, *
¨g
)

97 
îr
;

98 
∆_addr
 *
a
 = 
	`∆_˛i_addr_∑r£
(
¨g
, 
	`n‚l_˘_gë_Ámûy
(
˘
));

99 i‡((
îr
 = 
	`n‚l_˘_£t_d°
(
˘
, 
ª∂y
, 
a
)) < 0)

100 
	`∆_˛i_Áèl
(
îr
, "UnableÅo set destinationáddress: %s",

101 
	`∆_gëîr‹
(
îr
));

102 
	}
}

104 
	$∆_˛i_˘_∑r£_§c_p‹t
(
n‚l_˘
 *
˘
, 
ª∂y
, *
¨g
)

106 
uöt32_t
 
p‹t
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

107 
	`n‚l_˘_£t_§c_p‹t
(
˘
, 
ª∂y
, 
p‹t
);

108 
	}
}

110 
	$∆_˛i_˘_∑r£_d°_p‹t
(
n‚l_˘
 *
˘
, 
ª∂y
, *
¨g
)

112 
uöt32_t
 
p‹t
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

113 
	`n‚l_˘_£t_d°_p‹t
(
˘
, 
ª∂y
, 
p‹t
);

114 
	}
}

116 
	$∆_˛i_˘_∑r£_t˝_°©e
(
n‚l_˘
 *
˘
, *
¨g
)

118 
°©e
;

120 i‡((
°©e
 = 
	`n‚l_˘_°r2t˝_°©e
(
¨g
)) < 0)

121 
	`∆_˛i_Áèl
(
°©e
,

123 
¨g
, 
	`∆_gëîr‹
(
°©e
));

125 
	`n‚l_˘_£t_t˝_°©e
(
˘
, 
°©e
);

126 
	}
}

128 
	$∆_˛i_˘_∑r£_°©us
(
n‚l_˘
 *
˘
, *
¨g
)

130 
°©us
;

132 i‡((
°©us
 = 
	`n‚l_˘_°r2°©us
(
¨g
)) < 0)

133 
	`∆_˛i_Áèl
(
°©us
,

135 
¨g
, 
	`∆_gëîr‹
(
°©us
));

137 
	`n‚l_˘_£t_°©us
(
˘
, 
°©us
);

138 
	}
}

140 
	$∆_˛i_˘_∑r£_z⁄e
(
n‚l_˘
 *
˘
, *
¨g
)

142 
uöt32_t
 
z⁄e
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

143 
	`n‚l_˘_£t_z⁄e
(
˘
, 
z⁄e
);

144 
	}
}

147 } i‡(
¨g_m©ch
("origicmpid")) {

148 i‡(
	g¨gc
 > ++
	gidx
)

149 
n‚l_˘_£t_icmp_id
(
˘
, 0, 
°πoul
(
¨gv
[
idx
++], 
NULL
, 0));

150 } i‡(
¨g_m©ch
("origicmptype")) {

151 i‡(
	g¨gc
 > ++
	gidx
)

152 
n‚l_˘_£t_icmp_ty≥
(
˘
, 0, 
°πoul
(
¨gv
[
idx
++], 
NULL
, 0));

153 } i‡(
¨g_m©ch
("origicmpcode")) {

154 i‡(
	g¨gc
 > ++
	gidx
)

155 
n‚l_˘_£t_icmp_code
(
˘
, 0, 
°πoul
(
¨gv
[
idx
++], 
NULL
, 0));

156 } i‡(
¨g_m©ch
("replyicmpid")) {

157 i‡(
	g¨gc
 > ++
	gidx
)

158 
n‚l_˘_£t_icmp_id
(
˘
, 1, 
°πoul
(
¨gv
[
idx
++], 
NULL
, 0));

159 } i‡(
¨g_m©ch
("replyicmptype")) {

160 i‡(
	g¨gc
 > ++
	gidx
)

161 
n‚l_˘_£t_icmp_ty≥
(
˘
, 1, 
°πoul
(
¨gv
[
idx
++], 
NULL
, 0));

162 } i‡(
¨g_m©ch
("replyicmpcode")) {

163 i‡(
	g¨gc
 > ++
	gidx
)

164 
n‚l_˘_£t_icmp_code
(
˘
, 1, 
°πoul
(
¨gv
[
idx
++], 
NULL
, 0));

	@mylibnl/libnl-3.2.25/src/lib/exp.c

20 
	~<√éök/˛i/utûs.h
>

21 
	~<√éök/˛i/exp.h
>

23 
n‚l_exp
 *
	$∆_˛i_exp_Æloc
()

25 
n‚l_exp
 *
exp
;

27 
exp
 = 
	`n‚l_exp_Æloc
();

28 i‡(!
exp
)

29 
	`∆_˛i_Áèl
(
ENOMEM
, "UnableÅoállocateÉxpectation object");

31  
exp
;

32 
	}
}

34 
∆_ˇche
 *
	$∆_˛i_exp_Æloc_ˇche
(
∆_sock
 *
sk
)

36  
	`∆_˛i_Æloc_ˇche
(
sk
, "ex≥˘©i⁄", 
n‚l_exp_Æloc_ˇche
);

37 
	}
}

39 
	$∆_˛i_exp_∑r£_Ámûy
(
n‚l_exp
 *
exp
, *
¨g
)

41 
Ámûy
;

43 i‡((
Ámûy
 = 
	`∆_°r2af
(
¨g
)Ë=
AF_UNSPEC
)

44 
	`∆_˛i_Áèl
(
EINVAL
,

46 
¨g
, 
	`∆_gëîr‹
(
NLE_INVAL
));

48 
	`n‚l_exp_£t_Ámûy
(
exp
, 
Ámûy
);

49 
	}
}

51 
	$∆_˛i_exp_∑r£_timeout
(
n‚l_exp
 *
exp
, *
¨g
)

53 
uöt32_t
 
timeout
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

54 
	`n‚l_exp_£t_timeout
(
exp
, 
timeout
);

55 
	}
}

57 
	$∆_˛i_exp_∑r£_id
(
n‚l_exp
 *
exp
, *
¨g
)

59 
uöt32_t
 
id
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

60 
	`n‚l_exp_£t_id
(
exp
, 
id
);

61 
	}
}

63 
	$∆_˛i_exp_∑r£_hñ≥r_«me
(
n‚l_exp
 *
exp
, *
¨g
)

65 
	`n‚l_exp_£t_hñ≥r_«me
(
exp
, 
¨g
);

66 
	}
}

68 
	$∆_˛i_exp_∑r£_z⁄e
(
n‚l_exp
 *
exp
, *
¨g
)

70 
uöt32_t
 
z⁄e
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

71 
	`n‚l_exp_£t_z⁄e
(
exp
, 
z⁄e
);

72 
	}
}

74 
	$∆_˛i_exp_∑r£_Êags
(
n‚l_exp
 *
exp
, *
¨g
)

76 
uöt32_t
 
Êags
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

77 
	`n‚l_exp_£t_Êags
(
exp
, 
Êags
);

78 
	}
}

80 
	$∆_˛i_exp_∑r£_˛ass
(
n‚l_exp
 *
exp
, *
¨g
)

82 
uöt32_t
 
˛ass
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

83 
	`n‚l_exp_£t_˛ass
(
exp
, 
˛ass
);

84 
	}
}

86 
	$∆_˛i_exp_∑r£_«t_dú
(
n‚l_exp
 *
exp
, *
¨g
)

88 
uöt32_t
 
«t_dú
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

89 
	`n‚l_exp_£t_«t_dú
(
exp
, 
«t_dú
);

90 
	}
}

92 
	$∆_˛i_exp_∑r£_‚
(
n‚l_exp
 *
exp
, *
¨g
)

94 
	`n‚l_exp_£t_‚
(
exp
, 
¨g
);

95 
	}
}

97 
	$∆_˛i_exp_∑r£_§c
(
n‚l_exp
 *
exp
, 
tu∂e
, *
¨g
)

99 
îr
;

100 
∆_addr
 *
a
 = 
	`∆_˛i_addr_∑r£
(
¨g
, 
	`n‚l_exp_gë_Ámûy
(
exp
));

101 i‡((
îr
 = 
	`n‚l_exp_£t_§c
(
exp
, 
tu∂e
, 
a
)) < 0)

102 
	`∆_˛i_Áèl
(
îr
, "UnableÅo set sourceáddress: %s",

103 
	`∆_gëîr‹
(
îr
));

104 
	}
}

106 
	$∆_˛i_exp_∑r£_d°
(
n‚l_exp
 *
exp
, 
tu∂e
, *
¨g
)

108 
îr
;

109 
∆_addr
 *
a
 = 
	`∆_˛i_addr_∑r£
(
¨g
, 
	`n‚l_exp_gë_Ámûy
(
exp
));

110 i‡((
îr
 = 
	`n‚l_exp_£t_d°
(
exp
, 
tu∂e
, 
a
)) < 0)

111 
	`∆_˛i_Áèl
(
îr
, "UnableÅo set destinationáddress: %s",

112 
	`∆_gëîr‹
(
îr
));

113 
	}
}

115 
	$∆_˛i_exp_∑r£_l4¥Ÿ⁄um
(
n‚l_exp
 *
exp
, 
tu∂e
, *
¨g
)

117 
l4¥Ÿ⁄um
;

119 i‡((
l4¥Ÿ⁄um
 = 
	`∆_°r2ù_¥Ÿo
(
¨g
)) < 0)

120 
	`∆_˛i_Áèl
(
l4¥Ÿ⁄um
,

122 
¨g
, 
	`∆_gëîr‹
(
l4¥Ÿ⁄um
));

124 
	`n‚l_exp_£t_l4¥Ÿ⁄um
(
exp
, 
tu∂e
, 
l4¥Ÿ⁄um
);

125 
	}
}

127 
	$∆_˛i_exp_∑r£_§c_p‹t
(
n‚l_exp
 *
exp
, 
tu∂e
, *
¨g
)

129 
uöt32_t
 
•‹t
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

130 
uöt16_t
 
dp‹t
 = 
	`n‚l_exp_gë_d°_p‹t
(
exp
, 
tu∂e
);

131 
	`n‚l_exp_£t_p‹ts
(
exp
, 
tu∂e
, 
•‹t
, 
dp‹t
);

132 
	}
}

134 
	$∆_˛i_exp_∑r£_d°_p‹t
(
n‚l_exp
 *
exp
, 
tu∂e
, *
¨g
)

136 
uöt32_t
 
dp‹t
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

137 
uöt16_t
 
•‹t
 = 
	`n‚l_exp_gë_§c_p‹t
(
exp
, 
tu∂e
);

138 
	`n‚l_exp_£t_p‹ts
(
exp
, 
tu∂e
, 
•‹t
, 
dp‹t
);

139 
	}
}

141 
	$∆_˛i_exp_∑r£_icmp_id
(
n‚l_exp
 *
exp
, 
tu∂e
, *
¨g
)

143 
uöt32_t
 
id
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

144 
uöt8_t
 
ty≥
 = 
	`n‚l_exp_gë_icmp_ty≥
(
exp
, 
tu∂e
);

145 
uöt8_t
 
code
 = 
	`n‚l_exp_gë_icmp_code
(
exp
, 
tu∂e
);

146 
	`n‚l_exp_£t_icmp
(
exp
, 
tu∂e
, 
id
, 
ty≥
, 
code
);

147 
	}
}

149 
	$∆_˛i_exp_∑r£_icmp_ty≥
(
n‚l_exp
 *
exp
, 
tu∂e
, *
¨g
)

151 
uöt32_t
 
ty≥
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

152 
uöt16_t
 
id
 = 
	`n‚l_exp_gë_icmp_id
(
exp
, 
tu∂e
);

153 
uöt8_t
 
code
 = 
	`n‚l_exp_gë_icmp_code
(
exp
, 
tu∂e
);

154 
	`n‚l_exp_£t_icmp
(
exp
, 
tu∂e
, 
id
, 
ty≥
, 
code
);

155 
	}
}

157 
	$∆_˛i_exp_∑r£_icmp_code
(
n‚l_exp
 *
exp
, 
tu∂e
, *
¨g
)

159 
uöt32_t
 
code
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

160 
uöt16_t
 
id
 = 
	`n‚l_exp_gë_icmp_id
(
exp
, 
tu∂e
);

161 
uöt8_t
 
ty≥
 = 
	`n‚l_exp_gë_icmp_ty≥
(
exp
, 
tu∂e
);

162 
	`n‚l_exp_£t_icmp
(
exp
, 
tu∂e
, 
id
, 
ty≥
, 
code
);

163 
	}
}

	@mylibnl/libnl-3.2.25/src/lib/link.c

19 
	~<√éök/˛i/utûs.h
>

20 
	~<√éök/˛i/lök.h
>

21 
	~<löux/if.h
>

23 
π∆_lök
 *
	$∆_˛i_lök_Æloc
()

25 
π∆_lök
 *
lök
;

27 
lök
 = 
	`π∆_lök_Æloc
();

28 i‡(!
lök
)

29 
	`∆_˛i_Áèl
(
ENOMEM
, "UnableÅoállocateÜink object");

31  
lök
;

32 
	}
}

34 
∆_ˇche
 *
	$∆_˛i_lök_Æloc_ˇche_Ámûy
(
∆_sock
 *
sock
, 
Ámûy
)

36 
∆_ˇche
 *
ˇche
;

37 
îr
;

39 i‡((
îr
 = 
	`π∆_lök_Æloc_ˇche
(
sock
, 
Ámûy
, &
ˇche
)) < 0)

40 
	`∆_˛i_Áèl
(
îr
, "UnableÅoállocateÜink cache: %s",

41 
	`∆_gëîr‹
(
îr
));

43 
	`∆_ˇche_mngt_¥ovide
(
ˇche
);

45  
ˇche
;

46 
	}
}

48 
∆_ˇche
 *
	$∆_˛i_lök_Æloc_ˇche
(
∆_sock
 *
sock
)

50  
	`∆_˛i_lök_Æloc_ˇche_Ámûy
(
sock
, 
AF_UNSPEC
);

51 
	}
}

53 
	$∆_˛i_lök_∑r£_Ámûy
(
π∆_lök
 *
lök
, *
¨g
)

55 
Ámûy
;

57 i‡((
Ámûy
 = 
	`∆_°r2af
(
¨g
)) < 0)

58 
	`∆_˛i_Áèl
(
EINVAL
,

59 "U«bÀÅÿå™¶©êaddªs†Ámûy \"%s\"", 
¨g
);

61 
	`π∆_lök_£t_Ámûy
(
lök
, 
Ámûy
);

62 
	}
}

64 
	$∆_˛i_lök_∑r£_«me
(
π∆_lök
 *
lök
, *
¨g
)

66 
	`π∆_lök_£t_«me
(
lök
, 
¨g
);

67 
	}
}

69 
	$∆_˛i_lök_∑r£_mtu
(
π∆_lök
 *
lök
, *
¨g
)

71 
uöt32_t
 
mtu
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

72 
	`π∆_lök_£t_mtu
(
lök
, 
mtu
);

73 
	}
}

75 
	$∆_˛i_lök_∑r£_ifödex
(
π∆_lök
 *
lök
, *
¨g
)

77 
uöt32_t
 
ödex
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

78 
	`π∆_lök_£t_ifödex
(
lök
, 
ödex
);

79 
	}
}

81 
	$∆_˛i_lök_∑r£_txqÀn
(
π∆_lök
 *
lök
, *
¨g
)

83 
uöt32_t
 
qÀn
 = 
	`∆_˛i_∑r£_u32
(
¨g
);

84 
	`π∆_lök_£t_txqÀn
(
lök
, 
qÀn
);

85 
	}
}

87 
	$∆_˛i_lök_∑r£_weight
(
π∆_lök
 *
lök
, *
¨g
)

89 
	}
}

91 
	$∆_˛i_lök_∑r£_iÁlüs
(
π∆_lök
 *
lök
, *
¨g
)

93 i‡(
	`°æí
(
¨g
Ë> 
IFALIASZ
)

94 
	`∆_˛i_Áèl
(
ERANGE
,

96 
IFALIASZ
);

98 
	`π∆_lök_£t_iÁlüs
(
lök
, 
¨g
);

99 
	}
}

	@mylibnl/libnl-3.2.25/src/lib/neigh.c

19 
	~<√éök/˛i/utûs.h
>

20 
	~<√éök/˛i/√igh.h
>

22 
π∆_√igh
 *
	$∆_˛i_√igh_Æloc
()

24 
π∆_√igh
 *
√igh
;

26 
√igh
 = 
	`π∆_√igh_Æloc
();

27 i‡(!
√igh
)

28 
	`∆_˛i_Áèl
(
ENOMEM
, "UnableÅoállocateÇeighbour object");

30  
√igh
;

31 
	}
}

33 
	$∆_˛i_√igh_∑r£_d°
(
π∆_√igh
 *
√igh
, *
¨g
)

35 
∆_addr
 *
a
;

36 
îr
;

38 
a
 = 
	`∆_˛i_addr_∑r£
(
¨g
, 
	`π∆_√igh_gë_Ámûy
(
√igh
));

39 i‡((
îr
 = 
	`π∆_√igh_£t_d°
(
√igh
, 
a
)) < 0)

40 
	`∆_˛i_Áèl
(
îr
, "UnableÅo setÜocaláddress: %s",

41 
	`∆_gëîr‹
(
îr
));

43 
	`∆_addr_put
(
a
);

44 
	}
}

46 
	$∆_˛i_√igh_∑r£_Œaddr
(
π∆_√igh
 *
√igh
, *
¨g
)

48 
∆_addr
 *
a
;

50 
a
 = 
	`∆_˛i_addr_∑r£
(
¨g
, 
AF_UNSPEC
);

51 
	`π∆_√igh_£t_Œaddr
(
√igh
, 
a
);

52 
	`∆_addr_put
(
a
);

53 
	}
}

55 
	$∆_˛i_√igh_∑r£_dev
(
π∆_√igh
 *
√igh
,

56 
∆_ˇche
 *
lök_ˇche
, *
¨g
)

58 
ivÆ
;

60 i‡(!(
ivÆ
 = 
	`π∆_lök_«me2i
(
lök_ˇche
, 
¨g
)))

61 
	`∆_˛i_Áèl
(
ENOENT
, "Lök \"%s\" d€†nŸÉxi°", 
¨g
);

63 
	`π∆_√igh_£t_ifödex
(
√igh
, 
ivÆ
);

64 
	}
}

66 
	$∆_˛i_√igh_∑r£_Ámûy
(
π∆_√igh
 *
√igh
, *
¨g
)

68 
Ámûy
;

70 i‡((
Ámûy
 = 
	`∆_°r2af
(
¨g
)Ë=
AF_UNSPEC
)

71 
	`∆_˛i_Áèl
(
EINVAL
,

72 "U«bÀÅÿå™¶©êaddªs†Ámûy \"%s\"", 
¨g
);

74 
	`π∆_√igh_£t_Ámûy
(
√igh
, 
Ámûy
);

75 
	}
}

77 
	$∆_˛i_√igh_∑r£_°©e
(
π∆_√igh
 *
√igh
, *
¨g
)

79 
°©e
;

81 i‡((
°©e
 = 
	`π∆_√igh_°r2°©e
(
¨g
)) < 0)

82 
	`∆_˛i_Áèl
(
°©e
, "UnableÅoÅranslate state \"%s\": %s",

83 
¨g
, 
°©e
);

85 
	`π∆_√igh_£t_°©e
(
√igh
, 
°©e
);

86 
	}
}

	@mylibnl/libnl-3.2.25/src/lib/qdisc.c

18 
	~<√éök/˛i/utûs.h
>

19 
	~<√éök/˛i/qdisc.h
>

20 
	~<√éök/rouã/˛ass.h
>

22 
π∆_qdisc
 *
	$∆_˛i_qdisc_Æloc
()

24 
π∆_qdisc
 *
qdisc
;

26 i‡(!(
qdisc
 = 
	`π∆_qdisc_Æloc
()))

27 
	`∆_˛i_Áèl
(
ENOMEM
, "UnableÅoállocate qdisc object");

29  
qdisc
;

30 
	}
}

	@mylibnl/libnl-3.2.25/src/lib/route.c

19 
	~<√éök/˛i/utûs.h
>

20 
	~<√éök/˛i/rouã.h
>

22 
π∆_rouã
 *
	$∆_˛i_rouã_Æloc
()

24 
π∆_rouã
 *
rouã
;

26 
rouã
 = 
	`π∆_rouã_Æloc
();

27 i‡(!
rouã
)

28 
	`∆_˛i_Áèl
(
ENOMEM
, "UnableÅoállocateÑoute object");

30  
rouã
;

31 
	}
}

33 
∆_ˇche
 *
	$∆_˛i_rouã_Æloc_ˇche
(
∆_sock
 *
sk
, 
Êags
)

35 
∆_ˇche
 *
ˇche
;

36 
îr
;

38 i‡((
îr
 = 
	`π∆_rouã_Æloc_ˇche
(
sk
, 
AF_UNSPEC
, 
Êags
, &
ˇche
)) < 0)

39 
	`∆_˛i_Áèl
(
îr
, "UnableÅoállocateÑoute cache: %s\n",

40 
	`∆_gëîr‹
(
îr
));

42 
	`∆_ˇche_mngt_¥ovide
(
ˇche
);

44  
ˇche
;

45 
	}
}

47 
	$∆_˛i_rouã_∑r£_Ámûy
(
π∆_rouã
 *
rouã
, *
¨g
)

49 
Ámûy
;

51 i‡((
Ámûy
 = 
	`∆_°r2af
(
¨g
)Ë!
AF_UNSPEC
)

52 
	`π∆_rouã_£t_Ámûy
(
rouã
, 
Ámûy
);

53 
	}
}

55 
	$∆_˛i_rouã_∑r£_d°
(
π∆_rouã
 *
rouã
, *
¨g
)

57 
∆_addr
 *
addr
;

58 
îr
;

60 
addr
 = 
	`∆_˛i_addr_∑r£
(
¨g
, 
	`π∆_rouã_gë_Ámûy
(
rouã
));

61 i‡((
îr
 = 
	`π∆_rouã_£t_d°
(
rouã
, 
addr
)) < 0)

62 
	`∆_˛i_Áèl
(
îr
, "UnableÅo set destinationáddress: %s",

63 
	`∆_gëîr‹
(
îr
));

65 
	`∆_addr_put
(
addr
);

66 
	}
}

68 
	$∆_˛i_rouã_∑r£_§c
(
π∆_rouã
 *
rouã
, *
¨g
)

70 
∆_addr
 *
addr
;

71 
îr
;

73 
addr
 = 
	`∆_˛i_addr_∑r£
(
¨g
, 
	`π∆_rouã_gë_Ámûy
(
rouã
));

74 i‡((
îr
 = 
	`π∆_rouã_£t_§c
(
rouã
, 
addr
)) < 0)

75 
	`∆_˛i_Áèl
(
îr
, "UnableÅo set sourceáddress: %s",

76 
	`∆_gëîr‹
(
îr
));

78 
	`∆_addr_put
(
addr
);

79 
	}
}

81 
	$∆_˛i_rouã_∑r£_¥ef_§c
(
π∆_rouã
 *
rouã
, *
¨g
)

83 
∆_addr
 *
addr
;

84 
îr
;

86 
addr
 = 
	`∆_˛i_addr_∑r£
(
¨g
, 
	`π∆_rouã_gë_Ámûy
(
rouã
));

87 i‡((
îr
 = 
	`π∆_rouã_£t_¥ef_§c
(
rouã
, 
addr
)) < 0)

88 
	`∆_˛i_Áèl
(
îr
, "UnableÅo setÖreferred sourceáddress: %s",

89 
	`∆_gëîr‹
(
îr
));

91 
	`∆_addr_put
(
addr
);

92 
	}
}

94 
	$∆_˛i_rouã_∑r£_mëric
(
π∆_rouã
 *
rouã
, *
sub›ts
)

97 *c⁄° 
tokís
[] = {

111 
NULL
,

113 
lvÆ
;

114 *
¨g
, *
íd±r
;

116 *
sub›ts
 != '\0') {

117 
ªt
 = 
	`gësub›t
(&
sub›ts
, 
tokís
, &
¨g
);

118 i‡(
ªt
 == -1)

119 
	`∆_˛i_Áèl
(
EINVAL
, "Unknow¿mëri¯tokí \"%s\"", 
¨g
);

121 i‡(
ªt
 == 0)

122 
	`∆_˛i_Áèl
(
EINVAL
, "InvÆid mëri¯\"%s\"", 
tokís
[
ªt
]);

124 i‡(
¨g
 =
NULL
)

125 
	`∆_˛i_Áèl
(
EINVAL
, "Mëri¯\"%s\",ÇÿvÆuêgiví", 
tokís
[
ªt
]);

127 
lvÆ
 = 
	`°πoul
(
¨g
, &
íd±r
, 0);

128 i‡(
íd±r
 =
¨g
)

129 
	`∆_˛i_Áèl
(
EINVAL
, "Mëri¯\"%s\", vÆuênŸÇumîic", 
tokís
[
ªt
]);

131 i‡((
ªt
 = 
	`π∆_rouã_£t_mëric
(
rouã
,Ñë, 
lvÆ
)) < 0)

132 
	`∆_˛i_Áèl
(
ªt
, "UnableÅo set metric: %s",

133 
	`∆_gëîr‹
(
ªt
));

135 
	}
}

137 
	$∆_˛i_rouã_∑r£_√xth›
(
π∆_rouã
 *
rouã
, *
sub›ts
,

138 
∆_ˇche
 *
lök_ˇche
)

141 
NH_DEV
,

142 
NH_VIA
,

143 
NH_WEIGHT
,

145 *c⁄° 
tokís
[] = {

149 
NULL
,

151 
π∆_√xth›
 *
nh
;

152 
lvÆ
;

153 
∆_addr
 *
addr
;

154 
ivÆ
;

155 *
¨g
, *
íd±r
;

157 i‡(!(
nh
 = 
	`π∆_rouã_nh_Æloc
()))

158 
	`∆_˛i_Áèl
(
ENOMEM
, "Out of memory");

160 *
sub›ts
 != '\0') {

161 
ªt
 = 
	`gësub›t
(&
sub›ts
, 
tokís
, &
¨g
);

162 i‡(
ªt
 == -1)

163 
	`∆_˛i_Áèl
(
EINVAL
, "Unknow¿√xth›Åokí \"%s\"", 
¨g
);

165 i‡(
¨g
 =
NULL
)

166 
	`∆_˛i_Áèl
(
EINVAL
, "MissingárgumentÅo option \"%s\"\n",

167 
tokís
[
ªt
]);

169 
ªt
) {

170 
NH_DEV
:

171 i‡(!(
ivÆ
 = 
	`π∆_lök_«me2i
(
lök_ˇche
, 
¨g
)))

172 
	`∆_˛i_Áèl
(
ENOENT
,"Lök \"%s\" d€†nŸÉxi°", 
¨g
);

174 
	`π∆_rouã_nh_£t_ifödex
(
nh
, 
ivÆ
);

177 
NH_VIA
:

178 
addr
 = 
	`∆_˛i_addr_∑r£
(
¨g
,
	`π∆_rouã_gë_Ámûy
(
rouã
));

179 
	`π∆_rouã_nh_£t_g©eway
(
nh
, 
addr
);

180 
	`∆_addr_put
(
addr
);

183 
NH_WEIGHT
:

184 
lvÆ
 = 
	`°πoul
(
¨g
, &
íd±r
, 0);

185 i‡(
íd±r
 =
¨g
)

186 
	`∆_˛i_Áèl
(
EINVAL
,

188 
¨g
);

189 
	`π∆_rouã_nh_£t_weight
(
nh
, 
lvÆ
);

194 
	`π∆_rouã_add_√xth›
(
rouã
, 
nh
);

195 
	}
}

197 
	$∆_˛i_rouã_∑r£_èbÀ
(
π∆_rouã
 *
rouã
, *
¨g
)

199 
lvÆ
;

200 *
íd±r
;

201 
èbÀ
;

203 
lvÆ
 = 
	`°πoul
(
¨g
, &
íd±r
, 0);

204 i‡(
íd±r
 =
¨g
) {

205 i‡((
èbÀ
 = 
	`π∆_rouã_°r2èbÀ
(
¨g
)) < 0)

206 
	`∆_˛i_Áèl
(
EINVAL
, "Unknow¿èbÀÇamê\"%s\"", 
¨g
);

209 
èbÀ
 = 
lvÆ
;

212 
	`π∆_rouã_£t_èbÀ
(
rouã
, 
èbÀ
);

213 
	}
}

215 
	$∆_˛i_rouã_∑r£_¥io
(
π∆_rouã
 *
rouã
, *
¨g
)

217 
lvÆ
;

218 *
íd±r
;

220 
lvÆ
 = 
	`°πoul
(
¨g
, &
íd±r
, 0);

221 i‡(
íd±r
 =
¨g
)

222 
	`∆_˛i_Áèl
(
EINVAL
, "InvalidÖriority value,ÇotÇumeric");

223 
	`π∆_rouã_£t_¥i‹ôy
(
rouã
, 
lvÆ
);

224 
	}
}

226 
	$∆_˛i_rouã_∑r£_sc›e
(
π∆_rouã
 *
rouã
, *
¨g
)

228 
ivÆ
;

230 i‡((
ivÆ
 = 
	`π∆_°r2sc›e
(
¨g
)) < 0)

231 
	`∆_˛i_Áèl
(
EINVAL
, "Unknow¿routög sc›ê\"%s\"", 
¨g
);

233 
	`π∆_rouã_£t_sc›e
(
rouã
, 
ivÆ
);

234 
	}
}

236 
	$∆_˛i_rouã_∑r£_¥Ÿocﬁ
(
π∆_rouã
 *
rouã
, *
¨g
)

238 
lvÆ
;

239 *
íd±r
;

240 
¥Ÿo
;

242 
lvÆ
 = 
	`°πoul
(
¨g
, &
íd±r
, 0);

243 i‡(
íd±r
 =
¨g
) {

244 i‡((
¥Ÿo
 = 
	`π∆_rouã_°r2¥Ÿo
(
¨g
)) < 0)

245 
	`∆_˛i_Áèl
(
EINVAL
,

247 
¨g
);

250 
¥Ÿo
 = 
lvÆ
;

253 
	`π∆_rouã_£t_¥Ÿocﬁ
(
rouã
, 
¥Ÿo
);

254 
	}
}

256 
	$∆_˛i_rouã_∑r£_ty≥
(
π∆_rouã
 *
rouã
, *
¨g
)

258 
ivÆ
;

260 i‡((
ivÆ
 = 
	`∆_°r2π¡y≥
(
¨g
)) < 0)

261 
	`∆_˛i_Áèl
(
EINVAL
, "Unknow¿routögÅy≥ \"%s\"", 
¨g
);

263 i‡((
ivÆ
 = 
	`π∆_rouã_£t_ty≥
(
rouã
, ival)) < 0)

264 
	`∆_˛i_Áèl
(
ivÆ
, "UnableÅo setÑoutingÅype: %s",

265 
	`∆_gëîr‹
(
ivÆ
));

266 
	}
}

268 
	$∆_˛i_rouã_∑r£_iif
(
π∆_rouã
 *
rouã
, *
¨g
, 
∆_ˇche
 *
lök_ˇche
)

270 
ivÆ
;

272 i‡(!(
ivÆ
 = 
	`π∆_lök_«me2i
(
lök_ˇche
, 
¨g
)))

273 
	`∆_˛i_Áèl
(
ENOENT
, "Lök \"%s\" d€†nŸÉxi°", 
¨g
);

275 
	`π∆_rouã_£t_iif
(
rouã
, 
ivÆ
);

276 
	}
}

	@mylibnl/libnl-3.2.25/src/lib/rule.c

19 
	~<√éök/˛i/utûs.h
>

20 
	~<√éök/˛i/ruÀ.h
>

22 
π∆_ruÀ
 *
	$∆_˛i_ruÀ_Æloc
()

24 
π∆_ruÀ
 *
ruÀ
;

26 
ruÀ
 = 
	`π∆_ruÀ_Æloc
();

27 i‡(!
ruÀ
)

28 
	`∆_˛i_Áèl
(
ENOMEM
, "UnableÅoállocateÑule object");

30  
ruÀ
;

31 
	}
}

33 
∆_ˇche
 *
	$∆_˛i_ruÀ_Æloc_ˇche
(
∆_sock
 *
sk
)

35 
∆_ˇche
 *
ˇche
;

36 
îr
;

38 i‡((
îr
 = 
	`π∆_ruÀ_Æloc_ˇche
(
sk
, 
AF_UNSPEC
, &
ˇche
)) < 0)

39 
	`∆_˛i_Áèl
(
îr
, "UnableÅoállocateÑoutingÑule cache: %s\n",

40 
	`∆_gëîr‹
(
îr
));

42 
	`∆_ˇche_mngt_¥ovide
(
ˇche
);

44  
ˇche
;

45 
	}
}

47 
	$∆_˛i_ruÀ_∑r£_Ámûy
(
π∆_ruÀ
 *
ruÀ
, *
¨g
)

49 
Ámûy
;

51 i‡((
Ámûy
 = 
	`∆_°r2af
(
¨g
)Ë!
AF_UNSPEC
)

52 
	`π∆_ruÀ_£t_Ámûy
(
ruÀ
, 
Ámûy
);

53 
	}
}

	@mylibnl/libnl-3.2.25/src/lib/tc.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/tc.h
>

14 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

21 
	$∆_˛i_tc_∑r£_dev
(
π∆_tc
 *
tc
, 
∆_ˇche
 *
lök_ˇche
, *
«me
)

23 
π∆_lök
 *
lök
;

25 
lök
 = 
	`π∆_lök_gë_by_«me
(
lök_ˇche
, 
«me
);

26 i‡(!
lök
)

27 
	`∆_˛i_Áèl
(
ENOENT
, "Lök \"%s\" d€†nŸÉxi°.", 
«me
);

29 
	`π∆_tc_£t_lök
(
tc
, 
lök
);

30 
	`π∆_lök_put
(
lök
);

31 
	}
}

33 
	$∆_˛i_tc_∑r£_∑ª¡
(
π∆_tc
 *
tc
, *
¨g
)

35 
uöt32_t
 
∑ª¡
;

36 
îr
;

38 i‡((
îr
 = 
	`π∆_tc_°r2h™dÀ
(
¨g
, &
∑ª¡
)) < 0)

39 
	`∆_˛i_Áèl
(
îr
, "UnableÅoÖarse handle \"%s\": %s",

40 
¨g
, 
	`∆_gëîr‹
(
îr
));

42 
	`π∆_tc_£t_∑ª¡
(
tc
, 
∑ª¡
);

43 
	}
}

45 
	$∆_˛i_tc_∑r£_h™dÀ
(
π∆_tc
 *
tc
, *
¨g
, 
¸óã
)

47 
uöt32_t
 
h™dÀ
, 
∑ª¡
;

48 
îr
;

50 
∑ª¡
 = 
	`π∆_tc_gë_∑ª¡
(
tc
);

52 i‡((
îr
 = 
	`π∆_tc_°r2h™dÀ
(
¨g
, &
h™dÀ
)) < 0) {

53 i‡(
îr
 =-
NLE_OBJ_NOTFOUND
 && 
¸óã
)

54 
îr
 = 
	`π∆_˛assid_gíî©e
(
¨g
, &
h™dÀ
, 
∑ª¡
);

56 i‡(
îr
 < 0)

57 
	`∆_˛i_Áèl
(
îr
, "UnableÅoÖarse handle \"%s\": %s",

58 
¨g
, 
	`∆_gëîr‹
(
îr
));

61 
	`π∆_tc_£t_h™dÀ
(
tc
, 
h™dÀ
);

62 
	}
}

64 
	$∆_˛i_tc_∑r£_mtu
(
π∆_tc
 *
tc
, *
¨g
)

66 
	`π∆_tc_£t_mtu
(
tc
, 
	`∆_˛i_∑r£_u32
(
¨g
));

67 
	}
}

69 
	$∆_˛i_tc_∑r£_mpu
(
π∆_tc
 *
tc
, *
¨g
)

71 
	`π∆_tc_£t_mpu
(
tc
, 
	`∆_˛i_∑r£_u32
(
¨g
));

72 
	}
}

74 
	$∆_˛i_tc_∑r£_ovîhód
(
π∆_tc
 *
tc
, *
¨g
)

76 
	`π∆_tc_£t_ovîhód
(
tc
, 
	`∆_˛i_∑r£_u32
(
¨g
));

77 
	}
}

79 
	$∆_˛i_tc_∑r£_köd
(
π∆_tc
 *
tc
, *
¨g
)

81 
	`π∆_tc_£t_köd
(
tc
, 
¨g
);

82 
	}
}

84 
	$∆_˛i_tc_∑r£_lökty≥
(
π∆_tc
 *
tc
, *
¨g
)

86 
ty≥
;

88 i‡((
ty≥
 = 
	`∆_°r2Œ¥Ÿo
(
¨g
)) < 0)

89 
	`∆_˛i_Áèl
(
ty≥
, "UnableÅoÖarseÜinktype \"%s\": %s",

90 
¨g
, 
	`∆_gëîr‹
(
ty≥
));

92 
	`π∆_tc_£t_lökty≥
(
tc
, 
ty≥
);

93 
	}
}

95 
NL_LIST_HEAD
(
tc_moduÀs
);

97 
∆_˛i_tc_moduÀ
 *
	$__∆_˛i_tc_lookup
(
π∆_tc_›s
 *
›s
)

99 
∆_˛i_tc_moduÀ
 *
tm
;

101 
	`∆_li°_f‹_óch_íåy
(
tm
, &
tc_moduÀs
, 
tm_li°
)

102 i‡(
tm
->
tm_›s
 =
›s
)

103  
tm
;

105  
NULL
;

106 
	}
}

108 
∆_˛i_tc_moduÀ
 *
	$∆_˛i_tc_lookup
(
π∆_tc_›s
 *
›s
)

110 
∆_˛i_tc_moduÀ
 *
tm
;

112 i‡((
tm
 = 
	`__∆_˛i_tc_lookup
(
›s
)))

113  
tm
;

115 
›s
->
to_ty≥
) {

116 
RTNL_TC_TYPE_QDISC
:

117 
RTNL_TC_TYPE_CLASS
:

118 
	`∆_˛i_lﬂd_moduÀ
("˛i/qdisc", 
›s
->
to_köd
);

121 
RTNL_TC_TYPE_CLS
:

122 
	`∆_˛i_lﬂd_moduÀ
("˛i/˛s", 
›s
->
to_köd
);

126 
	`∆_˛i_Áèl
(
EINVAL
, "BUG: unhandled TC objectÅype %d",

127 
›s
->
to_ty≥
);

130 i‡(!(
tm
 = 
	`__∆_˛i_tc_lookup
(
›s
))) {

131 
	`∆_˛i_Áèl
(
EINVAL
, "Application bug: The sharedÜibrary for "

134 
›s
->
to_köd
);

137  
tm
;

138 
	}
}

140 
	$∆_˛i_tc_ªgi°î
(
∆_˛i_tc_moduÀ
 *
tm
)

142 
π∆_tc_›s
 *
›s
;

144 i‡(!(
›s
 = 
	`π∆_tc_lookup_›s
(
tm
->
tm_ty≥
,Åm->
tm_«me
))) {

145 
	`∆_˛i_Áèl
(
ENOENT
, "UnableÅoÑegister CLI TC module "

146 "\"%s\": Nÿm©chögÜib∆ TC moduÀ found.", 
tm
->
tm_«me
);

149 i‡(
	`__∆_˛i_tc_lookup
(
›s
)) {

150 
	`∆_˛i_Áèl
(
EEXIST
, "UnableÅoÑegister CLI TC module "

151 "\"%s\": ModuÀáÃódyÑegi°îed.", 
tm
->
tm_«me
);

154 
tm
->
tm_›s
 = 
›s
;

156 
	`∆_li°_add_èû
(&
tm
->
tm_li°
, &
tc_moduÀs
);

157 
	}
}

159 
	$∆_˛i_tc_uƒegi°î
(
∆_˛i_tc_moduÀ
 *
tm
)

161 
	`∆_li°_dñ
(&
tm
->
tm_li°
);

162 
	}
}

	@mylibnl/libnl-3.2.25/src/lib/utils.c

24 
	~<√éök/˛i/utûs.h
>

35 
uöt32_t
 
	$∆_˛i_∑r£_u32
(c⁄° *
¨g
)

37 
lvÆ
;

38 *
íd±r
;

40 
lvÆ
 = 
	`°πoul
(
¨g
, &
íd±r
, 0);

41 i‡(
íd±r
 =
¨g
 || 
lvÆ
 =
ULONG_MAX
)

42 
	`∆_˛i_Áèl
(
EINVAL
, "UnableÅoÖarse \"%s\",ÇotáÇumber.",

43 
¨g
);

45  (
uöt32_t
Ë
lvÆ
;

46 
	}
}

48 
	$∆_˛i_¥öt_vîsi⁄
()

50 
	`¥ötf
("lib∆Åoﬁ†vîsi⁄ %s\n", 
LIBNL_VERSION
);

51 
	`¥ötf
(

59 
	`exô
(0);

60 
	}
}

70 
	$∆_˛i_Áèl
(
îr
, c⁄° *
fmt
, ...)

72 
va_li°
 
≠
;

73 
buf
[256];

75 
	`Ârötf
(
°dîr
, "Error: ");

77 i‡(
fmt
) {

78 
	`va_°¨t
(
≠
, 
fmt
);

79 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

80 
	`va_íd
(
≠
);

81 
	`Ârötf
(
°dîr
, "\n");

83 
	`Ârötf
(
°dîr
, "%s\n", 
	`°ªº‹_r
(
îr
, 
buf
, (buf)));

85 
	`exô
(
	`abs
(
îr
));

86 
	}
}

88 
	$∆_˛i_c⁄√˘
(
∆_sock
 *
sk
, 
¥Ÿocﬁ
)

90 
îr
;

92 i‡((
îr
 = 
	`∆_c⁄√˘
(
sk
, 
¥Ÿocﬁ
)) < 0)

93 
	`∆_˛i_Áèl
(
îr
, "UnableÅo connectÇetlink socket: %s",

94 
	`∆_gëîr‹
(
îr
));

96  
îr
;

97 
	}
}

99 
∆_sock
 *
	$∆_˛i_Æloc_sockë
()

101 
∆_sock
 *
sock
;

103 i‡(!(
sock
 = 
	`∆_sockë_Æloc
()))

104 
	`∆_˛i_Áèl
(
ENOBUFS
, "UnableÅoállocateÇetlink socket");

106  
sock
;

107 
	}
}

109 
∆_addr
 *
	$∆_˛i_addr_∑r£
(c⁄° *
°r
, 
Ámûy
)

111 
∆_addr
 *
addr
;

112 
îr
;

114 i‡((
îr
 = 
	`∆_addr_∑r£
(
°r
, 
Ámûy
, &
addr
)) < 0)

115 
	`∆_˛i_Áèl
(
îr
, "UnableÅoÖarseáddress \"%s\": %s",

116 
°r
, 
	`∆_gëîr‹
(
îr
));

118  
addr
;

119 
	}
}

121 
	$∆_˛i_∑r£_dum±y≥
(c⁄° *
°r
)

123 i‡(!
	`°rˇ£cmp
(
°r
, "brief"))

124  
NL_DUMP_LINE
;

125 i‡(!
	`°rˇ£cmp
(
°r
, "details") || !strcasecmp(str, "detailed"))

126  
NL_DUMP_DETAILS
;

127 i‡(!
	`°rˇ£cmp
(
°r
, "stats"))

128  
NL_DUMP_STATS
;

130 
	`∆_˛i_Áèl
(
EINVAL
, "InvÆid dum∞ty≥ \"%s\".\n", 
°r
);

133 
	}
}

135 
	$∆_˛i_c⁄fúm
(
∆_obje˘
 *
obj
, 
∆_dump_∑øms
 *
∑øms
,

136 
deÁu…_yes
)

138 
	`∆_obje˘_dump
(
obj
, 
∑øms
);

141 
buf
[32] = { 0 };

142 
™swî
;

144 
	`¥ötf
("Delete? (%c/%c) ",

145 
deÁu…_yes
 ? 'Y' : 'y',

146 
deÁu…_yes
 ? 'n' : 'N');

148 i‡(!
	`fgës
(
buf
, (buf), 
°dö
)) {

149 
	`Ârötf
(
°dîr
, "Error whileÑeading\n.");

153 (
™swî
 = 
	`tﬁowî
(
buf
[0]))) {

155 
™swî
 = 
deÁu…_yes
 ? 'y' : 'n';

158  
™swî
 == 'y';

161 
	`Ârötf
(
°dîr
, "Invalid input,Åryágain.\n");

166 
	}
}

168 
∆_ˇche
 *
∆_˛i_Æloc_ˇche
(
∆_sock
 *
sock
, c⁄° *
«me
,

169 (*
ac
)(
∆_sock
 *, 
∆_ˇche
 **))

171 
∆_ˇche
 *
ˇche
;

172 
îr
;

174 i‡((
îr
 = 
	`ac
(
sock
, &
ˇche
)) < 0)

175 
	`∆_˛i_Áèl
(
îr
, "UnableÅoállocate %s cache: %s",

176 
«me
, 
	`∆_gëîr‹
(
îr
));

178 
	`∆_ˇche_mngt_¥ovide
(
ˇche
);

180  
ˇche
;

181 
	}
}

183 
	$∆_˛i_lﬂd_moduÀ
(c⁄° *
¥efix
, c⁄° *
«me
)

185 
∑th
[
FILENAME_MAX
+1];

186 *
h™dÀ
;

188 
	`¢¥ötf
(
∑th
, (path), "%s/%s/%s.so",

189 
PKGLIBDIR
, 
¥efix
, 
«me
);

191 i‡(!(
h™dÀ
 = 
	`dl›í
(
∑th
, 
RTLD_NOW
)))

192 
	`∆_˛i_Áèl
(
ENOENT
, "UnableÅoÜoad module \"%s\": %s\n",

193 
∑th
, 
	`dÀº‹
());

194 
	}
}

	@mylibnl/libnl-3.2.25/src/nf-ct-add.c

14 
	~<√éök/˛i/utûs.h
>

15 
	~<√éök/˛i/˘.h
>

17 
	gquõt
 = 0;

19 
	$¥öt_ußge
()

21 
	`¥ötf
(

45 
	`exô
(0);

46 
	}
}

48 
	$maö
(
¨gc
, *
¨gv
[])

50 
∆_sock
 *
sock
;

51 
n‚l_˘
 *
˘
;

52 
∆_dump_∑øms
 
∑øms
 = {

53 .
dp_ty≥
 = 
NL_DUMP_LINE
,

54 .
dp_fd
 = 
°dout
,

56 
îr
, 
∆Êags
 = 
NLM_F_CREATE
;

58 
˘
 = 
	`∆_˛i_˘_Æloc
();

61 
c
, 
›tidx
 = 0;

63 
ARG_ORIG_SRC
 = 257,

64 
ARG_ORIG_SPORT
 = 258,

65 
ARG_ORIG_DST
,

66 
ARG_ORIG_DPORT
,

67 
ARG_REPLY_SRC
,

68 
ARG_REPLY_SPORT
,

69 
ARG_REPLY_DST
,

70 
ARG_REPLY_DPORT
,

71 
ARG_MARK
,

72 
ARG_TIMEOUT
,

73 
ARG_STATUS
,

74 
ARG_ZONE
,

76 
›ti⁄
 
l⁄g_›ts
[] = {

81 { "‹ig-§c", 1, 0, 
ARG_ORIG_SRC
 },

82 { "‹ig-•‹t", 1, 0, 
ARG_ORIG_SPORT
 },

83 { "‹ig-d°", 1, 0, 
ARG_ORIG_DST
 },

84 { "‹ig-dp‹t", 1, 0, 
ARG_ORIG_DPORT
 },

85 { "ª∂y-§c", 1, 0, 
ARG_REPLY_SRC
 },

86 { "ª∂y-•‹t", 1, 0, 
ARG_REPLY_SPORT
 },

87 { "ª∂y-d°", 1, 0, 
ARG_REPLY_DST
 },

88 { "ª∂y-dp‹t", 1, 0, 
ARG_REPLY_DPORT
 },

90 { "m¨k", 1, 0, 
ARG_MARK
 },

91 { "timeout", 1, 0, 
ARG_TIMEOUT
 },

92 { "°©us", 1, 0, 
ARG_STATUS
 },

93 { "z⁄e", 1, 0, 
ARG_ZONE
 },

97 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "46q:hv:p:F:", 
l⁄g_›ts
, &
›tidx
);

98 i‡(
c
 == -1)

101 
c
) {

102 '?': 
	`exô
(
NLE_INVAL
);

103 'q': 
quõt
 = 1; ;

104 '4': 
	`n‚l_˘_£t_Ámûy
(
˘
, 
AF_INET
); ;

105 '6': 
	`n‚l_˘_£t_Ámûy
(
˘
, 
AF_INET6
); ;

106 'h': 
	`¥öt_ußge
(); ;

107 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

108 'p': 
	`∆_˛i_˘_∑r£_¥Ÿocﬁ
(
˘
, 
›èrg
); ;

109 
ARG_ORIG_SRC
: 
	`∆_˛i_˘_∑r£_§c
(
˘
, 0, 
›èrg
); ;

110 
ARG_ORIG_SPORT
: 
	`∆_˛i_˘_∑r£_§c_p‹t
(
˘
, 0, 
›èrg
); ;

111 
ARG_ORIG_DST
: 
	`∆_˛i_˘_∑r£_d°
(
˘
, 0, 
›èrg
); ;

112 
ARG_ORIG_DPORT
: 
	`∆_˛i_˘_∑r£_d°_p‹t
(
˘
, 0, 
›èrg
); ;

113 
ARG_REPLY_SRC
: 
	`∆_˛i_˘_∑r£_§c
(
˘
, 1, 
›èrg
); ;

114 
ARG_REPLY_SPORT
: 
	`∆_˛i_˘_∑r£_§c_p‹t
(
˘
, 1, 
›èrg
); ;

115 
ARG_REPLY_DST
: 
	`∆_˛i_˘_∑r£_d°
(
˘
, 1, 
›èrg
); ;

116 
ARG_REPLY_DPORT
: 
	`∆_˛i_˘_∑r£_d°_p‹t
(
˘
, 1, 
›èrg
); ;

117 'F': 
	`∆_˛i_˘_∑r£_Ámûy
(
˘
, 
›èrg
); ;

118 
ARG_MARK
: 
	`∆_˛i_˘_∑r£_m¨k
(
˘
, 
›èrg
); ;

119 
ARG_TIMEOUT
: 
	`∆_˛i_˘_∑r£_timeout
(
˘
, 
›èrg
); ;

120 
ARG_STATUS
: 
	`∆_˛i_˘_∑r£_°©us
(
˘
, 
›èrg
); ;

121 
ARG_ZONE
: 
	`∆_˛i_˘_∑r£_z⁄e
(
˘
, 
›èrg
); ;

125 i‡(!
quõt
) {

126 
	`¥ötf
("Adding ");

127 
	`∆_obje˘_dump
(
	`OBJ_CAST
(
˘
), &
∑øms
);

130 
sock
 = 
	`∆_˛i_Æloc_sockë
();

131 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_NETFILTER
);

133 i‡((
îr
 = 
	`n‚l_˘_add
(
sock
, 
˘
, 
∆Êags
)) < 0)

134 
	`∆_˛i_Áèl
(
îr
, "U«bÀÅÿadd c⁄¡øck: %s", 
	`∆_gëîr‹
(err));

136 i‡(!
quõt
) {

137 
	`¥ötf
("Added ");

138 
	`∆_obje˘_dump
(
	`OBJ_CAST
(
˘
), &
∑øms
);

142 
	}
}

	@mylibnl/libnl-3.2.25/src/nf-ct-list.c

14 
	~<√éök/˛i/utûs.h
>

15 
	~<√éök/˛i/˘.h
>

17 
	$¥öt_ußge
()

19 
	`¥ötf
(

45 
	`exô
(0);

46 
	}
}

48 
	$maö
(
¨gc
, *
¨gv
[])

50 
∆_sock
 *
sock
;

51 
∆_ˇche
 *
˘_ˇche
;

52 
n‚l_˘
 *
˘
;

53 
∆_dump_∑øms
 
∑øms
 = {

54 .
dp_ty≥
 = 
NL_DUMP_LINE
,

55 .
dp_fd
 = 
°dout
,

58 
˘
 = 
	`∆_˛i_˘_Æloc
();

61 
c
, 
›tidx
 = 0;

63 
ARG_MARK
 = 257,

64 
ARG_TCP_STATE
 = 258,

65 
ARG_ORIG_SRC
,

66 
ARG_ORIG_SPORT
,

67 
ARG_ORIG_DST
,

68 
ARG_ORIG_DPORT
,

69 
ARG_REPLY_SRC
,

70 
ARG_REPLY_SPORT
,

71 
ARG_REPLY_DST
,

72 
ARG_REPLY_DPORT
,

73 
ARG_TIMEOUT
,

74 
ARG_REFCNT
,

75 
ARG_FLAGS
,

77 
›ti⁄
 
l⁄g_›ts
[] = {

83 { "t˝-°©e", 1, 0, 
ARG_TCP_STATE
 },

84 { "‹ig-§c", 1, 0, 
ARG_ORIG_SRC
 },

85 { "‹ig-•‹t", 1, 0, 
ARG_ORIG_SPORT
 },

86 { "‹ig-d°", 1, 0, 
ARG_ORIG_DST
 },

87 { "‹ig-dp‹t", 1, 0, 
ARG_ORIG_DPORT
 },

88 { "ª∂y-§c", 1, 0, 
ARG_REPLY_SRC
 },

89 { "ª∂y-•‹t", 1, 0, 
ARG_REPLY_SPORT
 },

90 { "ª∂y-d°", 1, 0, 
ARG_REPLY_DST
 },

91 { "ª∂y-dp‹t", 1, 0, 
ARG_REPLY_DPORT
 },

93 { "m¨k", 1, 0, 
ARG_MARK
 },

94 { "timeout", 1, 0, 
ARG_TIMEOUT
 },

95 { "ªf˙t", 1, 0, 
ARG_REFCNT
 },

99 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "46f:hvi:p:F:", 
l⁄g_›ts
, &
›tidx
);

100 i‡(
c
 == -1)

103 
c
) {

104 '?': 
	`exô
(
NLE_INVAL
);

105 '4': 
	`n‚l_˘_£t_Ámûy
(
˘
, 
AF_INET
); ;

106 '6': 
	`n‚l_˘_£t_Ámûy
(
˘
, 
AF_INET6
); ;

107 'f': 
∑øms
.
dp_ty≥
 = 
	`∆_˛i_∑r£_dum±y≥
(
›èrg
); ;

108 'h': 
	`¥öt_ußge
(); ;

109 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

110 'i': 
	`∆_˛i_˘_∑r£_id
(
˘
, 
›èrg
); ;

111 'p': 
	`∆_˛i_˘_∑r£_¥Ÿocﬁ
(
˘
, 
›èrg
); ;

112 
ARG_TCP_STATE
: 
	`∆_˛i_˘_∑r£_t˝_°©e
(
˘
, 
›èrg
); ;

113 
ARG_ORIG_SRC
: 
	`∆_˛i_˘_∑r£_§c
(
˘
, 0, 
›èrg
); ;

114 
ARG_ORIG_SPORT
: 
	`∆_˛i_˘_∑r£_§c_p‹t
(
˘
, 0, 
›èrg
); ;

115 
ARG_ORIG_DST
: 
	`∆_˛i_˘_∑r£_d°
(
˘
, 0, 
›èrg
); ;

116 
ARG_ORIG_DPORT
: 
	`∆_˛i_˘_∑r£_d°_p‹t
(
˘
, 0, 
›èrg
); ;

117 
ARG_REPLY_SRC
: 
	`∆_˛i_˘_∑r£_§c
(
˘
, 1, 
›èrg
); ;

118 
ARG_REPLY_SPORT
: 
	`∆_˛i_˘_∑r£_§c_p‹t
(
˘
, 1, 
›èrg
); ;

119 
ARG_REPLY_DST
: 
	`∆_˛i_˘_∑r£_d°
(
˘
, 1, 
›èrg
); ;

120 
ARG_REPLY_DPORT
: 
	`∆_˛i_˘_∑r£_d°_p‹t
(
˘
, 1, 
›èrg
); ;

121 'F': 
	`∆_˛i_˘_∑r£_Ámûy
(
˘
, 
›èrg
); ;

122 
ARG_MARK
: 
	`∆_˛i_˘_∑r£_m¨k
(
˘
, 
›èrg
); ;

123 
ARG_TIMEOUT
: 
	`∆_˛i_˘_∑r£_timeout
(
˘
, 
›èrg
); ;

124 
ARG_REFCNT
: 
	`∆_˛i_˘_∑r£_u£
(
˘
, 
›èrg
); ;

125 
ARG_FLAGS
: 
	`∆_˛i_˘_∑r£_°©us
(
˘
, 
›èrg
); ;

129 
sock
 = 
	`∆_˛i_Æloc_sockë
();

130 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_NETFILTER
);

131 
˘_ˇche
 = 
	`∆_˛i_˘_Æloc_ˇche
(
sock
);

133 
	`∆_ˇche_dump_fûãr
(
˘_ˇche
, &
∑øms
, 
	`OBJ_CAST
(
˘
));

136 
	}
}

	@mylibnl/libnl-3.2.25/src/nf-exp-add.c

16 
	~<√éök/˛i/utûs.h
>

17 
	~<√éök/˛i/exp.h
>

19 
	gquõt
 = 0;

21 
	$¥öt_ußge
()

23 
	`¥ötf
(

54 
	`exô
(0);

55 
	}
}

57 
	$maö
(
¨gc
, *
¨gv
[])

59 
∆_sock
 *
sock
;

60 
n‚l_exp
 *
exp
;

61 
∆_dump_∑øms
 
∑øms
 = {

62 .
dp_ty≥
 = 
NL_DUMP_LINE
,

63 .
dp_fd
 = 
°dout
,

65 
îr
, 
∆Êags
 = 
NLM_F_CREATE
;

67 
exp
 = 
	`∆_˛i_exp_Æloc
();

70 
c
, 
›tidx
 = 0;

72 
ARG_MARK
 = 270,

73 
ARG_TCP_STATE
 = 271,

74 
ARG_EXPECT_PROTO
,

75 
ARG_EXPECT_SRC
,

76 
ARG_EXPECT_SPORT
,

77 
ARG_EXPECT_DST
,

78 
ARG_EXPECT_DPORT
,

79 
ARG_MASTER_PROTO
,

80 
ARG_MASTER_SRC
,

81 
ARG_MASTER_SPORT
,

82 
ARG_MASTER_DST
,

83 
ARG_MASTER_DPORT
,

84 
ARG_MASK_PROTO
,

85 
ARG_MASK_SRC
,

86 
ARG_MASK_SPORT
,

87 
ARG_MASK_DST
,

88 
ARG_MASK_DPORT
,

89 
ARG_NAT_PROTO
,

90 
ARG_NAT_SRC
,

91 
ARG_NAT_SPORT
,

92 
ARG_NAT_DST
,

93 
ARG_NAT_DPORT
,

94 
ARG_NAT_DIR
,

95 
ARG_TIMEOUT
,

96 
ARG_HELPER_NAME
,

97 
ARG_REPLACE
,

98 
ARG_FLAGS
,

100 
›ti⁄
 
l⁄g_›ts
[] = {

101 { "ª∂a˚", 1, 0, 
ARG_REPLACE
 },

106 { "ex≥˘-¥Ÿo", 1, 0, 
ARG_EXPECT_PROTO
 },

107 { "ex≥˘-§c", 1, 0, 
ARG_EXPECT_SRC
 },

108 { "ex≥˘-•‹t", 1, 0, 
ARG_EXPECT_SPORT
 },

109 { "ex≥˘-d°", 1, 0, 
ARG_EXPECT_DST
 },

110 { "ex≥˘-dp‹t", 1, 0, 
ARG_EXPECT_DPORT
 },

111 { "ma°î-¥Ÿo", 1, 0, 
ARG_MASTER_PROTO
 },

112 { "ma°î-§c", 1, 0, 
ARG_MASTER_SRC
 },

113 { "ma°î-•‹t", 1, 0, 
ARG_MASTER_SPORT
 },

114 { "ma°î-d°", 1, 0, 
ARG_MASTER_DST
 },

115 { "ma°î-dp‹t", 1, 0, 
ARG_MASTER_DPORT
 },

116 { "mask-¥Ÿo", 1, 0, 
ARG_MASK_PROTO
 },

117 { "mask-§c", 1, 0, 
ARG_MASK_SRC
 },

118 { "mask-•‹t", 1, 0, 
ARG_MASK_SPORT
 },

119 { "mask-d°", 1, 0, 
ARG_MASK_DST
 },

120 { "mask-dp‹t", 1, 0, 
ARG_MASK_DPORT
 },

121 { "«t-¥Ÿo", 1, 0, 
ARG_NAT_PROTO
 },

122 { "«t-§c", 1, 0, 
ARG_NAT_SRC
 },

123 { "«t-•‹t", 1, 0, 
ARG_NAT_SPORT
 },

124 { "«t-d°", 1, 0, 
ARG_NAT_DST
 },

125 { "«t-dp‹t", 1, 0, 
ARG_NAT_DPORT
 },

126 { "«t-dú", 1, 0, 
ARG_NAT_DIR
 },

128 { "timeout", 1, 0, 
ARG_TIMEOUT
 },

129 { "hñ≥r", 1, 0, 
ARG_HELPER_NAME
 },

130 { "Êags", 1, 0, 
ARG_FLAGS
},

134 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "46f:hvi:p:F:", 
l⁄g_›ts
, &
›tidx
);

135 i‡(
c
 == -1)

138 
c
) {

139 '?': 
	`exô
(
NLE_INVAL
);

140 
ARG_REPLACE
: 
∆Êags
 |
NLM_F_REPLACE
; ;

141 'q': 
quõt
 = 1; ;

142 '4': 
	`n‚l_exp_£t_Ámûy
(
exp
, 
AF_INET
); ;

143 '6': 
	`n‚l_exp_£t_Ámûy
(
exp
, 
AF_INET6
); ;

144 'h': 
	`¥öt_ußge
(); ;

145 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

146 'i': 
	`∆_˛i_exp_∑r£_id
(
exp
, 
›èrg
); ;

147 
ARG_EXPECT_PROTO
: 
	`∆_˛i_exp_∑r£_l4¥Ÿ⁄um
(
exp
, 
NFNL_EXP_TUPLE_EXPECT
, 
›èrg
); ;

148 
ARG_EXPECT_SRC
: 
	`∆_˛i_exp_∑r£_§c
(
exp
, 
NFNL_EXP_TUPLE_EXPECT
, 
›èrg
); ;

149 
ARG_EXPECT_SPORT
: 
	`∆_˛i_exp_∑r£_§c_p‹t
(
exp
, 
NFNL_EXP_TUPLE_EXPECT
, 
›èrg
); ;

150 
ARG_EXPECT_DST
: 
	`∆_˛i_exp_∑r£_d°
(
exp
, 
NFNL_EXP_TUPLE_EXPECT
, 
›èrg
); ;

151 
ARG_EXPECT_DPORT
: 
	`∆_˛i_exp_∑r£_d°_p‹t
(
exp
, 
NFNL_EXP_TUPLE_EXPECT
, 
›èrg
); ;

152 
ARG_MASTER_PROTO
: 
	`∆_˛i_exp_∑r£_l4¥Ÿ⁄um
(
exp
, 
NFNL_EXP_TUPLE_MASTER
, 
›èrg
); ;

153 
ARG_MASTER_SRC
: 
	`∆_˛i_exp_∑r£_§c
(
exp
, 
NFNL_EXP_TUPLE_MASTER
, 
›èrg
); ;

154 
ARG_MASTER_SPORT
: 
	`∆_˛i_exp_∑r£_§c_p‹t
(
exp
, 
NFNL_EXP_TUPLE_MASTER
, 
›èrg
); ;

155 
ARG_MASTER_DST
: 
	`∆_˛i_exp_∑r£_d°
(
exp
, 
NFNL_EXP_TUPLE_MASTER
, 
›èrg
); ;

156 
ARG_MASTER_DPORT
: 
	`∆_˛i_exp_∑r£_d°_p‹t
(
exp
, 
NFNL_EXP_TUPLE_MASTER
, 
›èrg
); ;

157 
ARG_MASK_PROTO
: 
	`∆_˛i_exp_∑r£_l4¥Ÿ⁄um
(
exp
, 
NFNL_EXP_TUPLE_MASK
, 
›èrg
); ;

158 
ARG_MASK_SRC
: 
	`∆_˛i_exp_∑r£_§c
(
exp
, 
NFNL_EXP_TUPLE_MASK
, 
›èrg
); ;

159 
ARG_MASK_SPORT
: 
	`∆_˛i_exp_∑r£_§c_p‹t
(
exp
, 
NFNL_EXP_TUPLE_MASK
, 
›èrg
); ;

160 
ARG_MASK_DST
: 
	`∆_˛i_exp_∑r£_d°
(
exp
, 
NFNL_EXP_TUPLE_MASK
, 
›èrg
); ;

161 
ARG_MASK_DPORT
: 
	`∆_˛i_exp_∑r£_d°_p‹t
(
exp
, 
NFNL_EXP_TUPLE_MASK
, 
›èrg
); ;

162 
ARG_NAT_PROTO
: 
	`∆_˛i_exp_∑r£_l4¥Ÿ⁄um
(
exp
, 
NFNL_EXP_TUPLE_NAT
, 
›èrg
); ;

163 
ARG_NAT_SRC
: 
	`∆_˛i_exp_∑r£_§c
(
exp
, 
NFNL_EXP_TUPLE_NAT
, 
›èrg
); ;

164 
ARG_NAT_SPORT
: 
	`∆_˛i_exp_∑r£_§c_p‹t
(
exp
, 
NFNL_EXP_TUPLE_NAT
, 
›èrg
); ;

165 
ARG_NAT_DST
: 
	`∆_˛i_exp_∑r£_d°
(
exp
, 
NFNL_EXP_TUPLE_NAT
, 
›èrg
); ;

166 
ARG_NAT_DPORT
: 
	`∆_˛i_exp_∑r£_d°_p‹t
(
exp
, 
NFNL_EXP_TUPLE_NAT
, 
›èrg
); ;

167 
ARG_NAT_DIR
: 
	`∆_˛i_exp_∑r£_«t_dú
(
exp
, 
›èrg
); ;

168 'F': 
	`∆_˛i_exp_∑r£_Ámûy
(
exp
, 
›èrg
); ;

169 
ARG_TIMEOUT
: 
	`∆_˛i_exp_∑r£_timeout
(
exp
, 
›èrg
); ;

170 
ARG_HELPER_NAME
: 
	`∆_˛i_exp_∑r£_hñ≥r_«me
(
exp
, 
›èrg
); ;

171 
ARG_FLAGS
: 
	`∆_˛i_exp_∑r£_Êags
(
exp
, 
›èrg
); ;

175 
sock
 = 
	`∆_˛i_Æloc_sockë
();

176 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_NETFILTER
);

178 i‡((
îr
 = 
	`n‚l_exp_add
(
sock
, 
exp
, 
∆Êags
)) < 0)

179 
	`∆_˛i_Áèl
(
îr
, "U«bÀÅÿaddÉx≥˘©i⁄: %s", 
	`∆_gëîr‹
(err));

181 i‡(!
quõt
) {

182 
	`¥ötf
("Added ");

183 
	`∆_obje˘_dump
(
	`OBJ_CAST
(
exp
), &
∑øms
);

187 
	}
}

	@mylibnl/libnl-3.2.25/src/nf-exp-delete.c

15 
	~<√éök/˛i/utûs.h
>

16 
	~<√éök/˛i/exp.h
>

18 
	gquõt
 = 0;

20 
	$¥öt_ußge
()

22 
	`¥ötf
(

53 
	`exô
(0);

54 
	}
}

56 
	$maö
(
¨gc
, *
¨gv
[])

58 
∆_sock
 *
sock
;

59 
n‚l_exp
 *
exp
;

60 
∆_dump_∑øms
 
∑øms
 = {

61 .
dp_ty≥
 = 
NL_DUMP_LINE
,

62 .
dp_fd
 = 
°dout
,

64 
îr
, 
∆Êags
 = 0;

66 
exp
 = 
	`∆_˛i_exp_Æloc
();

69 
c
, 
›tidx
 = 0;

71 
ARG_MARK
 = 270,

72 
ARG_TCP_STATE
 = 271,

73 
ARG_EXPECT_PROTO
,

74 
ARG_EXPECT_SRC
,

75 
ARG_EXPECT_SPORT
,

76 
ARG_EXPECT_DST
,

77 
ARG_EXPECT_DPORT
,

78 
ARG_MASTER_PROTO
,

79 
ARG_MASTER_SRC
,

80 
ARG_MASTER_SPORT
,

81 
ARG_MASTER_DST
,

82 
ARG_MASTER_DPORT
,

83 
ARG_MASK_PROTO
,

84 
ARG_MASK_SRC
,

85 
ARG_MASK_SPORT
,

86 
ARG_MASK_DST
,

87 
ARG_MASK_DPORT
,

88 
ARG_TIMEOUT
,

89 
ARG_HELPER_NAME
,

90 
ARG_FLAGS
,

92 
›ti⁄
 
l⁄g_›ts
[] = {

97 { "ex≥˘-¥Ÿo", 1, 0, 
ARG_EXPECT_PROTO
 },

98 { "ex≥˘-§c", 1, 0, 
ARG_EXPECT_SRC
 },

99 { "ex≥˘-•‹t", 1, 0, 
ARG_EXPECT_SPORT
 },

100 { "ex≥˘-d°", 1, 0, 
ARG_EXPECT_DST
 },

101 { "ex≥˘-dp‹t", 1, 0, 
ARG_EXPECT_DPORT
 },

102 { "ma°î-¥Ÿo", 1, 0, 
ARG_MASTER_PROTO
 },

103 { "ma°î-§c", 1, 0, 
ARG_MASTER_SRC
 },

104 { "ma°î-•‹t", 1, 0, 
ARG_MASTER_SPORT
 },

105 { "ma°î-d°", 1, 0, 
ARG_MASTER_DST
 },

106 { "ma°î-dp‹t", 1, 0, 
ARG_MASTER_DPORT
 },

107 { "mask-¥Ÿo", 1, 0, 
ARG_MASK_PROTO
 },

108 { "mask-§c", 1, 0, 
ARG_MASK_SRC
 },

109 { "mask-•‹t", 1, 0, 
ARG_MASK_SPORT
 },

110 { "mask-d°", 1, 0, 
ARG_MASK_DST
 },

111 { "mask-dp‹t", 1, 0, 
ARG_MASK_DPORT
 },

113 { "timeout", 1, 0, 
ARG_TIMEOUT
 },

114 { "hñ≥r", 1, 0, 
ARG_HELPER_NAME
 },

115 { "Êags", 1, 0, 
ARG_FLAGS
},

119 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "46f:hvi:p:F:", 
l⁄g_›ts
, &
›tidx
);

120 i‡(
c
 == -1)

123 
c
) {

124 '?': 
	`exô
(
NLE_INVAL
);

125 'q': 
quõt
 = 1; ;

126 '4': 
	`n‚l_exp_£t_Ámûy
(
exp
, 
AF_INET
); ;

127 '6': 
	`n‚l_exp_£t_Ámûy
(
exp
, 
AF_INET6
); ;

128 'h': 
	`¥öt_ußge
(); ;

129 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

130 'i': 
	`∆_˛i_exp_∑r£_id
(
exp
, 
›èrg
); ;

131 
ARG_EXPECT_PROTO
: 
	`∆_˛i_exp_∑r£_l4¥Ÿ⁄um
(
exp
, 
NFNL_EXP_TUPLE_EXPECT
, 
›èrg
); ;

132 
ARG_EXPECT_SRC
: 
	`∆_˛i_exp_∑r£_§c
(
exp
, 
NFNL_EXP_TUPLE_EXPECT
, 
›èrg
); ;

133 
ARG_EXPECT_SPORT
: 
	`∆_˛i_exp_∑r£_§c_p‹t
(
exp
, 
NFNL_EXP_TUPLE_EXPECT
, 
›èrg
); ;

134 
ARG_EXPECT_DST
: 
	`∆_˛i_exp_∑r£_d°
(
exp
, 
NFNL_EXP_TUPLE_EXPECT
, 
›èrg
); ;

135 
ARG_EXPECT_DPORT
: 
	`∆_˛i_exp_∑r£_d°_p‹t
(
exp
, 
NFNL_EXP_TUPLE_EXPECT
, 
›èrg
); ;

136 
ARG_MASTER_PROTO
: 
	`∆_˛i_exp_∑r£_l4¥Ÿ⁄um
(
exp
, 
NFNL_EXP_TUPLE_MASTER
, 
›èrg
); ;

137 
ARG_MASTER_SRC
: 
	`∆_˛i_exp_∑r£_§c
(
exp
, 
NFNL_EXP_TUPLE_MASTER
, 
›èrg
); ;

138 
ARG_MASTER_SPORT
: 
	`∆_˛i_exp_∑r£_§c_p‹t
(
exp
, 
NFNL_EXP_TUPLE_MASTER
, 
›èrg
); ;

139 
ARG_MASTER_DST
: 
	`∆_˛i_exp_∑r£_d°
(
exp
, 
NFNL_EXP_TUPLE_MASTER
, 
›èrg
); ;

140 
ARG_MASTER_DPORT
: 
	`∆_˛i_exp_∑r£_d°_p‹t
(
exp
, 
NFNL_EXP_TUPLE_MASTER
, 
›èrg
); ;

141 
ARG_MASK_PROTO
: 
	`∆_˛i_exp_∑r£_l4¥Ÿ⁄um
(
exp
, 
NFNL_EXP_TUPLE_MASK
, 
›èrg
); ;

142 
ARG_MASK_SRC
: 
	`∆_˛i_exp_∑r£_§c
(
exp
, 
NFNL_EXP_TUPLE_MASK
, 
›èrg
); ;

143 
ARG_MASK_SPORT
: 
	`∆_˛i_exp_∑r£_§c_p‹t
(
exp
, 
NFNL_EXP_TUPLE_MASK
, 
›èrg
); ;

144 
ARG_MASK_DST
: 
	`∆_˛i_exp_∑r£_d°
(
exp
, 
NFNL_EXP_TUPLE_MASK
, 
›èrg
); ;

145 
ARG_MASK_DPORT
: 
	`∆_˛i_exp_∑r£_d°_p‹t
(
exp
, 
NFNL_EXP_TUPLE_MASK
, 
›èrg
); ;

146 'F': 
	`∆_˛i_exp_∑r£_Ámûy
(
exp
, 
›èrg
); ;

147 
ARG_TIMEOUT
: 
	`∆_˛i_exp_∑r£_timeout
(
exp
, 
›èrg
); ;

148 
ARG_HELPER_NAME
: 
	`∆_˛i_exp_∑r£_hñ≥r_«me
(
exp
, 
›èrg
); ;

149 
ARG_FLAGS
: 
	`∆_˛i_exp_∑r£_Êags
(
exp
, 
›èrg
); ;

153 
sock
 = 
	`∆_˛i_Æloc_sockë
();

154 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_NETFILTER
);

156 i‡((
îr
 = 
	`n‚l_exp_dñ
(
sock
, 
exp
, 
∆Êags
)) < 0)

157 
	`∆_˛i_Áèl
(
îr
, "U«bÀÅÿdñëêex≥˘©i⁄: %s", 
	`∆_gëîr‹
(err));

159 i‡(!
quõt
) {

160 
	`¥ötf
("Deleted ");

161 
	`∆_obje˘_dump
(
	`OBJ_CAST
(
exp
), &
∑øms
);

165 
	}
}

	@mylibnl/libnl-3.2.25/src/nf-exp-list.c

15 
	~<√éök/˛i/utûs.h
>

16 
	~<√éök/˛i/exp.h
>

18 
	$¥öt_ußge
()

20 
	`¥ötf
(

45 
	`exô
(0);

46 
	}
}

48 
	$maö
(
¨gc
, *
¨gv
[])

50 
∆_sock
 *
sock
;

51 
∆_ˇche
 *
exp_ˇche
;

52 
n‚l_exp
 *
exp
;

53 
∆_dump_∑øms
 
∑øms
 = {

54 .
dp_ty≥
 = 
NL_DUMP_LINE
,

55 .
dp_fd
 = 
°dout
,

58 
exp
 = 
	`∆_˛i_exp_Æloc
();

61 
c
, 
›tidx
 = 0;

63 
ARG_MARK
 = 270,

64 
ARG_TCP_STATE
 = 271,

65 
ARG_EXPECT_PROTO
,

66 
ARG_EXPECT_SRC
,

67 
ARG_EXPECT_SPORT
,

68 
ARG_EXPECT_DST
,

69 
ARG_EXPECT_DPORT
,

70 
ARG_MASTER_PROTO
,

71 
ARG_MASTER_SRC
,

72 
ARG_MASTER_SPORT
,

73 
ARG_MASTER_DST
,

74 
ARG_MASTER_DPORT
,

75 
ARG_TIMEOUT
,

76 
ARG_HELPER_NAME
,

77 
ARG_FLAGS
,

79 
›ti⁄
 
l⁄g_›ts
[] = {

84 { "ex≥˘-¥Ÿo", 1, 0, 
ARG_EXPECT_PROTO
 },

85 { "ex≥˘-§c", 1, 0, 
ARG_EXPECT_SRC
 },

86 { "ex≥˘-•‹t", 1, 0, 
ARG_EXPECT_SPORT
 },

87 { "ex≥˘-d°", 1, 0, 
ARG_EXPECT_DST
 },

88 { "ex≥˘-dp‹t", 1, 0, 
ARG_EXPECT_DPORT
 },

89 { "ma°î-¥Ÿo", 1, 0, 
ARG_MASTER_PROTO
 },

90 { "ma°î-§c", 1, 0, 
ARG_MASTER_SRC
 },

91 { "ma°î-•‹t", 1, 0, 
ARG_MASTER_SPORT
 },

92 { "ma°î-d°", 1, 0, 
ARG_MASTER_DST
 },

93 { "ma°î-dp‹t", 1, 0, 
ARG_MASTER_DPORT
 },

95 { "timeout", 1, 0, 
ARG_TIMEOUT
 },

96 { "hñ≥r", 1, 0, 
ARG_HELPER_NAME
 },

97 { "Êags", 1, 0, 
ARG_FLAGS
},

101 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "46f:hvi:p:F:", 
l⁄g_›ts
, &
›tidx
);

102 i‡(
c
 == -1)

105 
c
) {

106 '?': 
	`exô
(
NLE_INVAL
);

107 '4': 
	`n‚l_exp_£t_Ámûy
(
exp
, 
AF_INET
); ;

108 '6': 
	`n‚l_exp_£t_Ámûy
(
exp
, 
AF_INET6
); ;

109 'f': 
∑øms
.
dp_ty≥
 = 
	`∆_˛i_∑r£_dum±y≥
(
›èrg
); ;

110 'h': 
	`¥öt_ußge
(); ;

111 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

112 'i': 
	`∆_˛i_exp_∑r£_id
(
exp
, 
›èrg
); ;

113 
ARG_EXPECT_PROTO
: 
	`∆_˛i_exp_∑r£_l4¥Ÿ⁄um
(
exp
, 
NFNL_EXP_TUPLE_EXPECT
, 
›èrg
); ;

114 
ARG_EXPECT_SRC
: 
	`∆_˛i_exp_∑r£_§c
(
exp
, 
NFNL_EXP_TUPLE_EXPECT
, 
›èrg
); ;

115 
ARG_EXPECT_SPORT
: 
	`∆_˛i_exp_∑r£_§c_p‹t
(
exp
, 
NFNL_EXP_TUPLE_EXPECT
, 
›èrg
); ;

116 
ARG_EXPECT_DST
: 
	`∆_˛i_exp_∑r£_d°
(
exp
, 
NFNL_EXP_TUPLE_EXPECT
, 
›èrg
); ;

117 
ARG_EXPECT_DPORT
: 
	`∆_˛i_exp_∑r£_d°_p‹t
(
exp
, 
NFNL_EXP_TUPLE_EXPECT
, 
›èrg
); ;

118 
ARG_MASTER_PROTO
: 
	`∆_˛i_exp_∑r£_l4¥Ÿ⁄um
(
exp
, 
NFNL_EXP_TUPLE_MASTER
, 
›èrg
); ;

119 
ARG_MASTER_SRC
: 
	`∆_˛i_exp_∑r£_§c
(
exp
, 
NFNL_EXP_TUPLE_MASTER
, 
›èrg
); ;

120 
ARG_MASTER_SPORT
: 
	`∆_˛i_exp_∑r£_§c_p‹t
(
exp
, 
NFNL_EXP_TUPLE_MASTER
, 
›èrg
); ;

121 
ARG_MASTER_DST
: 
	`∆_˛i_exp_∑r£_d°
(
exp
, 
NFNL_EXP_TUPLE_MASTER
, 
›èrg
); ;

122 
ARG_MASTER_DPORT
: 
	`∆_˛i_exp_∑r£_d°_p‹t
(
exp
, 
NFNL_EXP_TUPLE_MASTER
, 
›èrg
); ;

123 'F': 
	`∆_˛i_exp_∑r£_Ámûy
(
exp
, 
›èrg
); ;

124 
ARG_TIMEOUT
: 
	`∆_˛i_exp_∑r£_timeout
(
exp
, 
›èrg
); ;

125 
ARG_HELPER_NAME
: 
	`∆_˛i_exp_∑r£_hñ≥r_«me
(
exp
, 
›èrg
); ;

126 
ARG_FLAGS
: 
	`∆_˛i_exp_∑r£_Êags
(
exp
, 
›èrg
); ;

130 
sock
 = 
	`∆_˛i_Æloc_sockë
();

131 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_NETFILTER
);

132 
exp_ˇche
 = 
	`∆_˛i_exp_Æloc_ˇche
(
sock
);

134 
	`∆_ˇche_dump_fûãr
(
exp_ˇche
, &
∑øms
, 
	`OBJ_CAST
(
exp
));

137 
	}
}

	@mylibnl/libnl-3.2.25/src/nf-log.c

14 
	~<√éök/˛i/utûs.h
>

15 
	~<√éök/˛i/lök.h
>

16 
	~<löux/√tfûãr/n‚ëlök_log.h
>

17 
	~<√éök/√tfûãr/n‚l.h
>

18 
	~<√éök/√tfûãr/log.h
>

20 
n‚l_log
 *
	$Æloc_log
()

22 
n‚l_log
 *
log
;

24 
log
 = 
	`n‚l_log_Æloc
();

25 i‡(!
log
)

26 
	`∆_˛i_Áèl
(
ENOMEM
, "UnableÅoállocateÜog object");

28  
log
;

29 
	}
}

31 
	$obj_öput
(
∆_obje˘
 *
obj
, *
¨g
)

33 
∆_dump_∑øms
 
dp
 = {

34 .
dp_ty≥
 = 
NL_DUMP_STATS
,

35 .
dp_fd
 = 
°dout
,

36 .
dp_dump_msgty≥
 = 1,

39 
	`∆_obje˘_dump
(
obj
, &
dp
);

40 
	}
}

42 
	$evít_öput
(
∆_msg
 *
msg
, *
¨g
)

44 i‡(
	`∆_msg_∑r£
(
msg
, &
obj_öput
, 
NULL
) < 0)

45 
	`Ârötf
(
°dîr
, "<<EVENT>> Unknown messageÅype\n");

48  
NL_STOP
;

49 
	}
}

51 
	$maö
(
¨gc
, *
¨gv
[])

53 
∆_sock
 *
nf_sock
;

54 
∆_sock
 *
π_sock
;

55 
∆_ˇche
 *
lök_ˇche
;

56 
n‚l_log
 *
log
;

57 
n‚l_log_c›y_mode
 
c›y_mode
;

58 
uöt32_t
 
c›y_ønge
;

59 
îr
;

60 
Ámûy
;

62 
nf_sock
 = 
	`∆_˛i_Æloc_sockë
();

63 
	`∆_sockë_dißbÀ_£q_check
(
nf_sock
);

64 
	`∆_sockë_modify_cb
(
nf_sock
, 
NL_CB_VALID
, 
NL_CB_CUSTOM
, 
evít_öput
, 
NULL
);

66 i‡((
¨gc
 > 1 && !
	`°rˇ£cmp
(
¨gv
[1], "-h")) ||árgc < 3) {

67 
	`¥ötf
("Usage:Çf-log family group [ copy_mode ] "

72 
	`∆_˛i_c⁄√˘
(
nf_sock
, 
NETLINK_NETFILTER
);

74 
Ámûy
 = 
	`∆_°r2af
(
¨gv
[1]);

75 i‡(
Ámûy
 =
AF_UNSPEC
)

76 
	`∆_˛i_Áèl
(
NLE_INVAL
, "Unknown family \"%s\": %s",

77 
¨gv
[1], 
	`∆_gëîr‹
(
Ámûy
));

79 
	`n‚l_log_pf_unböd
(
nf_sock
, 
Ámûy
);

80 i‡((
îr
 = 
	`n‚l_log_pf_böd
(
nf_sock
, 
Ámûy
)) < 0)

81 
	`∆_˛i_Áèl
(
îr
, "UnableÅo bindÜogger: %s",

82 
	`∆_gëîr‹
(
îr
));

84 
log
 = 
	`Æloc_log
();

85 
	`n‚l_log_£t_group
(
log
, 
	`©oi
(
¨gv
[2]));

87 
c›y_mode
 = 
NFNL_LOG_COPY_META
;

88 i‡(
¨gc
 > 3) {

89 
c›y_mode
 = 
	`n‚l_log_°r2c›y_mode
(
¨gv
[3]);

90 i‡(
c›y_mode
 < 0)

91 
	`∆_˛i_Áèl
(
c›y_mode
,

93 
¨gv
[3], 
	`∆_gëîr‹
(
c›y_mode
));

95 
	`n‚l_log_£t_c›y_mode
(
log
, 
c›y_mode
);

97 
c›y_ønge
 = 0xFFFF;

98 i‡(
¨gc
 > 4)

99 
c›y_ønge
 = 
	`©oi
(
¨gv
[4]);

100 
	`n‚l_log_£t_c›y_ønge
(
log
, 
c›y_ønge
);

102 i‡((
îr
 = 
	`n‚l_log_¸óã
(
nf_sock
, 
log
)) < 0)

103 
	`∆_˛i_Áèl
(
îr
, "UnableÅo bind instance: %s",

104 
	`∆_gëîr‹
(
îr
));

107 
∆_dump_∑øms
 
dp
 = {

108 .
dp_ty≥
 = 
NL_DUMP_STATS
,

109 .
dp_fd
 = 
°dout
,

110 .
dp_dump_msgty≥
 = 1,

113 
	`¥ötf
("logÖarams: ");

114 
	`∆_obje˘_dump
((
∆_obje˘
 *Ë
log
, &
dp
);

117 
π_sock
 = 
	`∆_˛i_Æloc_sockë
();

118 
	`∆_˛i_c⁄√˘
(
π_sock
, 
NETLINK_ROUTE
);

119 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
π_sock
);

122 
fd_£t
 
rfds
;

123 
nffd
, 
πfd
, 
maxfd
, 
ªtvÆ
;

125 
	`FD_ZERO
(&
rfds
);

127 
maxfd
 = 
nffd
 = 
	`∆_sockë_gë_fd
(
nf_sock
);

128 
	`FD_SET
(
nffd
, &
rfds
);

130 
πfd
 = 
	`∆_sockë_gë_fd
(
π_sock
);

131 
	`FD_SET
(
πfd
, &
rfds
);

132 i‡(
maxfd
 < 
πfd
)

133 
maxfd
 = 
πfd
;

136 
ªtvÆ
 = 
	`£À˘
(
maxfd
+1, &
rfds
, 
NULL
, NULL, NULL);

138 i‡(
ªtvÆ
) {

139 i‡(
	`FD_ISSET
(
nffd
, &
rfds
))

140 
	`∆_ªcvmsgs_deÁu…
(
nf_sock
);

141 i‡(
	`FD_ISSET
(
πfd
, &
rfds
))

142 
	`∆_ªcvmsgs_deÁu…
(
π_sock
);

147 
	}
}

	@mylibnl/libnl-3.2.25/src/nf-monitor.c

14 
	~<√éök/˛i/utûs.h
>

15 
	~<√éök/√tfûãr/n‚l.h
>

17 
	$obj_öput
(
∆_obje˘
 *
obj
, *
¨g
)

19 
∆_dump_∑øms
 
dp
 = {

20 .
dp_ty≥
 = 
NL_DUMP_STATS
,

21 .
dp_fd
 = 
°dout
,

22 .
dp_dump_msgty≥
 = 1,

25 
	`∆_obje˘_dump
(
obj
, &
dp
);

26 
	}
}

28 
	$evít_öput
(
∆_msg
 *
msg
, *
¨g
)

30 i‡(
	`∆_msg_∑r£
(
msg
, &
obj_öput
, 
NULL
) < 0)

31 
	`Ârötf
(
°dîr
, "<<EVENT>> Unknown messageÅype\n");

34  
NL_STOP
;

35 
	}
}

37 
	$maö
(
¨gc
, *
¨gv
[])

39 
∆_sock
 *
sock
;

40 
îr
;

41 
i
, 
idx
;

44 
n‚ëlök_groups
 
gr_id
;

45 c⁄° * 
gr_«me
;

46 } 
groups
[] = {

47 { 
NFNLGRP_CONNTRACK_NEW
, "ct-new" },

48 { 
NFNLGRP_CONNTRACK_UPDATE
, "ct-update" },

49 { 
NFNLGRP_CONNTRACK_DESTROY
, "ct-destroy" },

50 { 
NFNLGRP_NONE
, 
NULL
 }

53 
sock
 = 
	`∆_˛i_Æloc_sockë
();

54 
	`∆_sockë_dißbÀ_£q_check
(
sock
);

55 
	`∆_sockë_modify_cb
(
sock
, 
NL_CB_VALID
, 
NL_CB_CUSTOM
, 
evít_öput
, 
NULL
);

57 i‡(
¨gc
 > 1 && !
	`°rˇ£cmp
(
¨gv
[1], "-h")) {

58 
	`¥ötf
("Usage:Çf-monitor [<groups>]\n");

60 
	`¥ötf
("Known groups:");

61 
i
 = 0; 
groups
[i].
gr_id
 !
NFNLGRP_NONE
; i++)

62 
	`¥ötf
(" %s", 
groups
[
i
].
gr_«me
);

63 
	`¥ötf
("\n");

67 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_NETFILTER
);

69 
idx
 = 1; 
¨gc
 > idx; idx++) {

70 
i
 = 0; 
groups
[i].
gr_id
 !
NFNLGRP_NONE
; i++) {

71 i‡(
	`°rcmp
(
¨gv
[
idx
], 
groups
[
i
].
gr_«me
))

74 
îr
 = 
	`∆_sockë_add_membîshù
(
sock
, 
groups
[
i
].
gr_id
);

75 i‡(
îr
 < 0)

76 
	`∆_˛i_Áèl
(
îr
,

78 
	`∆_gëîr‹
(
îr
));

82 i‡(
groups
[
i
].
gr_id
 =
NFNLGRP_NONE
)

83 
	`∆_˛i_Áèl
(
NLE_OBJ_NOTFOUND
, "Unknown group: \"%s\"",

84 
¨gv
[
idx
]);

88 
fd_£t
 
rfds
;

89 
fd
, 
ªtvÆ
;

91 
fd
 = 
	`∆_sockë_gë_fd
(
sock
);

93 
	`FD_ZERO
(&
rfds
);

94 
	`FD_SET
(
fd
, &
rfds
);

96 
ªtvÆ
 = 
	`£À˘
(
fd
+1, &
rfds
, 
NULL
, NULL, NULL);

98 i‡(
ªtvÆ
) {

100 
	`∆_ªcvmsgs_deÁu…
(
sock
);

105 
	}
}

	@mylibnl/libnl-3.2.25/src/nf-queue.c

14 
	~<√éök/˛i/utûs.h
>

15 
	~<√éök/˛i/lök.h
>

16 
	~<√töë/ö.h
>

17 
	~<löux/√tfûãr.h
>

18 
	~<löux/√tfûãr/n‚ëlök_queue.h
>

19 
	~<√éök/√tfûãr/n‚l.h
>

20 
	~<√éök/√tfûãr/queue.h
>

21 
	~<√éök/√tfûãr/queue_msg.h
>

23 
∆_sock
 *
	gnf_sock
;

25 
n‚l_queue
 *
	$Æloc_queue
()

27 
n‚l_queue
 *
queue
;

29 
queue
 = 
	`n‚l_queue_Æloc
();

30 i‡(!
queue
)

31 
	`∆_˛i_Áèl
(
ENOMEM
, "UnableÅoállocate queue object");

33  
queue
;

34 
	}
}

37 
	$obj_öput
(
∆_obje˘
 *
obj
, *
¨g
)

39 
n‚l_queue_msg
 *
msg
 = (n‚l_queue_msg *Ë
obj
;

40 
∆_dump_∑øms
 
dp
 = {

41 .
dp_ty≥
 = 
NL_DUMP_STATS
,

42 .
dp_fd
 = 
°dout
,

43 .
dp_dump_msgty≥
 = 1,

46 
	`n‚l_queue_msg_£t_vîdi˘
(
msg
, 
NF_ACCEPT
);

47 
	`∆_obje˘_dump
(
obj
, &
dp
);

48 
	`n‚l_queue_msg_£nd_vîdi˘
(
nf_sock
, 
msg
);

49 
	}
}

51 
	$evít_öput
(
∆_msg
 *
msg
, *
¨g
)

53 i‡(
	`∆_msg_∑r£
(
msg
, &
obj_öput
, 
NULL
) < 0)

54 
	`Ârötf
(
°dîr
, "<<EVENT>> Unknown messageÅype\n");

57  
NL_STOP
;

58 
	}
}

60 
	$maö
(
¨gc
, *
¨gv
[])

62 
∆_sock
 *
π_sock
;

63 
∆_ˇche
 *
lök_ˇche
;

64 
n‚l_queue
 *
queue
;

65 
n‚l_queue_c›y_mode
 
c›y_mode
;

66 
uöt32_t
 
c›y_ønge
;

67 
îr
 = 1;

68 
Ámûy
;

70 
nf_sock
 = 
	`n‚l_queue_sockë_Æloc
();

71 i‡(
nf_sock
 =
NULL
)

72 
	`∆_˛i_Áèl
(
ENOBUFS
, "UnableÅoállocateÇetlink socket");

74 
	`∆_sockë_dißbÀ_£q_check
(
nf_sock
);

75 
	`∆_sockë_modify_cb
(
nf_sock
, 
NL_CB_VALID
, 
NL_CB_CUSTOM
, 
evít_öput
, 
NULL
);

77 i‡((
¨gc
 > 1 && !
	`°rˇ£cmp
(
¨gv
[1], "-h")) ||árgc < 3) {

78 
	`¥ötf
("Usage:Çf-queue family group [ copy_mode ] "

80 
	`¥ötf
("family: [ inet | inet6 | ... ] \n");

81 
	`¥ötf
("group:Åhe --queue-numárgÅhat you gaveÅo iptables\n");

82 
	`¥ötf
("copy_mode: [Çone | meta |Öacket ] \n");

86 
	`∆_˛i_c⁄√˘
(
nf_sock
, 
NETLINK_NETFILTER
);

88 i‡((
Ámûy
 = 
	`∆_°r2af
(
¨gv
[1])Ë=
AF_UNSPEC
)

89 
	`∆_˛i_Áèl
(
NLE_INVAL
, "Unknow¿Ámûy \"%s\"", 
¨gv
[1]);

91 
	`n‚l_queue_pf_unböd
(
nf_sock
, 
Ámûy
);

92 i‡((
îr
 = 
	`n‚l_queue_pf_böd
(
nf_sock
, 
Ámûy
)) < 0)

93 
	`∆_˛i_Áèl
(
îr
, "UnableÅo bindÜogger: %s",

94 
	`∆_gëîr‹
(
îr
));

96 
queue
 = 
	`Æloc_queue
();

97 
	`n‚l_queue_£t_group
(
queue
, 
	`©oi
(
¨gv
[2]));

99 
c›y_mode
 = 
NFNL_QUEUE_COPY_PACKET
;

100 i‡(
¨gc
 > 3) {

101 
c›y_mode
 = 
	`n‚l_queue_°r2c›y_mode
(
¨gv
[3]);

102 i‡(
c›y_mode
 < 0)

103 
	`∆_˛i_Áèl
(
c›y_mode
,

105 
¨gv
[3], 
	`∆_gëîr‹
(
c›y_mode
));

107 
	`n‚l_queue_£t_c›y_mode
(
queue
, 
c›y_mode
);

109 
c›y_ønge
 = 0xFFFF;

110 i‡(
¨gc
 > 4)

111 
c›y_ønge
 = 
	`©oi
(
¨gv
[4]);

112 
	`n‚l_queue_£t_c›y_ønge
(
queue
, 
c›y_ønge
);

114 i‡((
îr
 = 
	`n‚l_queue_¸óã
(
nf_sock
, 
queue
)) < 0)

115 
	`∆_˛i_Áèl
(
îr
, "U«bÀÅÿböd queue: %s", 
	`∆_gëîr‹
(err));

117 
π_sock
 = 
	`∆_˛i_Æloc_sockë
();

118 
	`∆_˛i_c⁄√˘
(
π_sock
, 
NETLINK_ROUTE
);

119 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
π_sock
);

121 
	`∆_sockë_£t_buf„r_size
(
nf_sock
, 1024*127, 1024*127);

124 
fd_£t
 
rfds
;

125 
nffd
, 
πfd
, 
maxfd
, 
ªtvÆ
;

127 
	`FD_ZERO
(&
rfds
);

129 
maxfd
 = 
nffd
 = 
	`∆_sockë_gë_fd
(
nf_sock
);

130 
	`FD_SET
(
nffd
, &
rfds
);

132 
πfd
 = 
	`∆_sockë_gë_fd
(
π_sock
);

133 
	`FD_SET
(
πfd
, &
rfds
);

134 i‡(
maxfd
 < 
πfd
)

135 
maxfd
 = 
πfd
;

138 
ªtvÆ
 = 
	`£À˘
(
maxfd
+1, &
rfds
, 
NULL
, NULL, NULL);

140 i‡(
ªtvÆ
) {

141 i‡(
	`FD_ISSET
(
nffd
, &
rfds
))

142 
	`∆_ªcvmsgs_deÁu…
(
nf_sock
);

143 i‡(
	`FD_ISSET
(
πfd
, &
rfds
))

144 
	`∆_ªcvmsgs_deÁu…
(
π_sock
);

149 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-addr-add.c

11 
	~<√éök/˛i/utûs.h
>

12 
	~<√éök/˛i/addr.h
>

13 
	~<√éök/˛i/lök.h
>

15 
	gquõt
 = 0;

17 
	$¥öt_ußge
()

19 
	`¥ötf
(

40 
	`exô
(0);

41 
	}
}

43 
	$maö
(
¨gc
, *
¨gv
[])

45 
∆_sock
 *
sock
;

46 
π∆_addr
 *
addr
;

47 
∆_ˇche
 *
lök_ˇche
;

48 
∆_dump_∑øms
 
dp
 = {

49 .
dp_ty≥
 = 
NL_DUMP_LINE
,

50 .
dp_fd
 = 
°dout
,

52 
îr
, 
∆Êags
 = 
NLM_F_CREATE
;

54 
sock
 = 
	`∆_˛i_Æloc_sockë
();

55 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

56 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

57 
addr
 = 
	`∆_˛i_addr_Æloc
();

60 
c
, 
›tidx
 = 0;

62 
ARG_FAMILY
 = 257,

63 
ARG_LABEL
 = 258,

64 
ARG_PEER
,

65 
ARG_SCOPE
,

66 
ARG_BROADCAST
,

67 
ARG_REPLACE
,

68 
ARG_PREFERRED
,

69 
ARG_VALID
,

71 
›ti⁄
 
l⁄g_›ts
[] = {

72 { "ª∂a˚", 0, 0, 
ARG_REPLACE
 },

78 { "Ámûy", 1, 0, 
ARG_FAMILY
 },

79 { "œbñ", 1, 0, 
ARG_LABEL
 },

80 { "≥î", 1, 0, 
ARG_PEER
 },

81 { "sc›e", 1, 0, 
ARG_SCOPE
 },

82 { "brﬂdˇ°", 1, 0, 
ARG_BROADCAST
 },

83 { "¥e„ºed", 1, 0, 
ARG_PREFERRED
 },

84 { "vÆid", 1, 0, 
ARG_VALID
 },

88 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "qhva:d:", 
l⁄g_›ts
, &
›tidx
);

89 i‡(
c
 == -1)

92 
c
) {

93 '?': 
	`exô
(
NLE_INVAL
);

94 
ARG_REPLACE
: 
∆Êags
 |
NLM_F_REPLACE
; ;

95 'q': 
quõt
 = 1; ;

96 'h': 
	`¥öt_ußge
(); ;

97 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

98 'a': 
	`∆_˛i_addr_∑r£_loˇl
(
addr
, 
›èrg
); ;

99 'd': 
	`∆_˛i_addr_∑r£_dev
(
addr
, 
lök_ˇche
, 
›èrg
); ;

100 
ARG_FAMILY
: 
	`∆_˛i_addr_∑r£_Ámûy
(
addr
, 
›èrg
); ;

101 
ARG_LABEL
: 
	`∆_˛i_addr_∑r£_œbñ
(
addr
, 
›èrg
); ;

102 
ARG_PEER
: 
	`∆_˛i_addr_∑r£_≥î
(
addr
, 
›èrg
); ;

103 
ARG_SCOPE
: 
	`∆_˛i_addr_∑r£_sc›e
(
addr
, 
›èrg
); ;

104 
ARG_BROADCAST
: 
	`∆_˛i_addr_∑r£_brﬂdˇ°
(
addr
, 
›èrg
); ;

105 
ARG_PREFERRED
: 
	`∆_˛i_addr_∑r£_¥e„ºed
(
addr
, 
›èrg
); ;

106 
ARG_VALID
: 
	`∆_˛i_addr_∑r£_vÆid
(
addr
, 
›èrg
); ;

110 i‡((
îr
 = 
	`π∆_addr_add
(
sock
, 
addr
, 
∆Êags
)) < 0)

111 
	`∆_˛i_Áèl
(
îr
, "UnableÅoáddáddress: %s",

112 
	`∆_gëîr‹
(
îr
));

114 i‡(!
quõt
) {

115 
	`¥ötf
("Added ");

116 
	`∆_obje˘_dump
(
	`OBJ_CAST
(
addr
), &
dp
);

120 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-addr-delete.c

11 
	~<√éök/˛i/utûs.h
>

12 
	~<√éök/˛i/addr.h
>

13 
	~<√éök/˛i/lök.h
>

15 
∆_sock
 *
	gsock
;

16 
	göãø˘ive
 = 0, 
	gdeÁu…_yes
 = 0, 
	gquõt
 = 0;

17 
	gdñëed
 = 0;

19 
	$¥öt_ußge
()

21 
	`¥ötf
(

44 
	`exô
(0);

45 
	}
}

47 
	$dñëe_cb
(
∆_obje˘
 *
obj
, *
¨g
)

49 
π∆_addr
 *
addr
 = 
	`∆_obje˘_¥iv
(
obj
);

50 
∆_dump_∑øms
 
∑øms
 = {

51 .
dp_ty≥
 = 
NL_DUMP_LINE
,

52 .
dp_fd
 = 
°dout
,

54 
îr
;

56 i‡(
öãø˘ive
 && !
	`∆_˛i_c⁄fúm
(
obj
, &
∑øms
, 
deÁu…_yes
))

59 i‡((
îr
 = 
	`π∆_addr_dñëe
(
sock
, 
addr
, 0)) < 0)

60 
	`∆_˛i_Áèl
(
îr
, "UnableÅo deleteáddress: %s\n",

61 
	`∆_gëîr‹
(
îr
));

63 i‡(!
quõt
) {

64 
	`¥ötf
("Deleted ");

65 
	`∆_obje˘_dump
(
obj
, &
∑øms
);

68 
dñëed
++;

69 
	}
}

71 
	$maö
(
¨gc
, *
¨gv
[])

73 
π∆_addr
 *
addr
;

74 
∆_ˇche
 *
lök_ˇche
, *
addr_ˇche
;

76 
sock
 = 
	`∆_˛i_Æloc_sockë
();

77 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

78 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

79 
addr_ˇche
 = 
	`∆_˛i_addr_Æloc_ˇche
(
sock
);

80 
addr
 = 
	`∆_˛i_addr_Æloc
();

83 
c
, 
›tidx
 = 0;

85 
ARG_FAMILY
 = 257,

86 
ARG_LABEL
 = 258,

87 
ARG_YES
,

88 
ARG_PEER
,

89 
ARG_SCOPE
,

90 
ARG_BROADCAST
,

91 
ARG_PREFERRED
,

92 
ARG_VALID
,

94 
›ti⁄
 
l⁄g_›ts
[] = {

96 { "yes", 0, 0, 
ARG_YES
 },

102 { "Ámûy", 1, 0, 
ARG_FAMILY
 },

103 { "œbñ", 1, 0, 
ARG_LABEL
 },

104 { "≥î", 1, 0, 
ARG_PEER
 },

105 { "sc›e", 1, 0, 
ARG_SCOPE
 },

106 { "brﬂdˇ°", 1, 0, 
ARG_BROADCAST
 },

107 { "¥e„ºed", 1, 0, 
ARG_PREFERRED
 },

108 { "vÆid", 1, 0, 
ARG_VALID
 },

112 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "iqhva:d:", 
l⁄g_›ts
, &
›tidx
);

113 i‡(
c
 == -1)

116 
c
) {

117 'i': 
öãø˘ive
 = 1; ;

118 
ARG_YES
: 
deÁu…_yes
 = 1; ;

119 'q': 
quõt
 = 1; ;

120 'h': 
	`¥öt_ußge
(); ;

121 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

122 'a': 
	`∆_˛i_addr_∑r£_loˇl
(
addr
, 
›èrg
); ;

123 'd': 
	`∆_˛i_addr_∑r£_dev
(
addr
, 
lök_ˇche
, 
›èrg
); ;

124 
ARG_FAMILY
: 
	`∆_˛i_addr_∑r£_Ámûy
(
addr
, 
›èrg
); ;

125 
ARG_LABEL
: 
	`∆_˛i_addr_∑r£_œbñ
(
addr
, 
›èrg
); ;

126 
ARG_PEER
: 
	`∆_˛i_addr_∑r£_≥î
(
addr
, 
›èrg
); ;

127 
ARG_SCOPE
: 
	`∆_˛i_addr_∑r£_sc›e
(
addr
, 
›èrg
); ;

128 
ARG_BROADCAST
: 
	`∆_˛i_addr_∑r£_brﬂdˇ°
(
addr
, 
›èrg
); ;

129 
ARG_PREFERRED
: 
	`∆_˛i_addr_∑r£_¥e„ºed
(
addr
, 
›èrg
); ;

130 
ARG_VALID
: 
	`∆_˛i_addr_∑r£_vÆid
(
addr
, 
›èrg
); ;

134 
	`∆_ˇche_f‹óch_fûãr
(
addr_ˇche
, 
	`OBJ_CAST
(
addr
), 
dñëe_cb
, 
NULL
);

136 i‡(!
quõt
)

137 
	`¥ötf
("Dñëed %dáddªs£s\n", 
dñëed
);

140 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-addr-list.c

11 
	~<√éök/˛i/utûs.h
>

12 
	~<√éök/˛i/addr.h
>

13 
	~<√éök/˛i/lök.h
>

15 
	$¥öt_ußge
()

17 
	`¥ötf
(

39 
	`exô
(0);

40 
	}
}

42 *
	g¥efix
;

44 
	$¥öt_¥efix
(
∆_dump_∑øms
 *
p
, 
löe
)

46 i‡(
¥efix
)

47 
	`∆_dump
(
p
, "%s", 
¥efix
);

48 
	}
}

50 
	$ív_dump
(
∆_obje˘
 *
obj
, *
¨g
)

52 
∆_dump_∑øms
 *
p
 = 
¨g
;

53 
π∆_addr
 *
addr
 = (π∆_add∏*Ë
obj
;

54 
∆_ˇche
 *
lök_ˇche
;

55 
∆_addr
 *
a
;

56 
ödex
 = 0;

57 
buf
[128], 
pfx
[32], *
s
;

59 
	`¢¥ötf
(
pfx
, ’fx), "ADDR%d", 
ödex
++);

61 
	`∆_dump_löe
(
p
, "%s_FAMILY=%s\n", 
pfx
,

62 
	`∆_af2°r
(
	`π∆_addr_gë_Ámûy
(
addr
), 
buf
, (buf)));

64 
	`∆_dump_löe
(
p
, "%s_LOCAL=%s\n", 
pfx
,

65 
	`∆_addr2°r
(
	`π∆_addr_gë_loˇl
(
addr
), 
buf
, (buf)));

67 
	`∆_dump_löe
(
p
, "%s_IFINDEX=%u\n", 
pfx
, 
	`π∆_addr_gë_ifödex
(
addr
));

68 
lök_ˇche
 = 
	`∆_ˇche_mngt_ªquúe_ß„
("route/link");

69 i‡(
lök_ˇche
)

70 
	`∆_dump_löe
(
p
, "%s_IFNAME=%s\n", 
pfx
,

71 
	`π∆_lök_i2«me
(
lök_ˇche
,

72 
	`π∆_addr_gë_ifödex
(
addr
),

73 
buf
, (buf)));

75 i‡((
a
 = 
	`π∆_addr_gë_≥î
(
addr
)))

76 
	`∆_dump_löe
(
p
, "%s_PEER=%s\n", 
pfx
,

77 
	`∆_addr2°r
(
a
, 
buf
, (buf)));

79 i‡((
a
 = 
	`π∆_addr_gë_brﬂdˇ°
(
addr
)))

80 
	`∆_dump_löe
(
p
, "%s_BROADCAST=%s\n", 
pfx
,

81 
	`∆_addr2°r
(
a
, 
buf
, (buf)));

83 
	`∆_dump_löe
(
p
, "%s_SCOPE=%s\n", 
pfx
,

84 
	`π∆_sc›e2°r
(
	`π∆_addr_gë_sc›e
(
addr
),

85 
buf
, (buf)));

87 i‡((
s
 = 
	`π∆_addr_gë_œbñ
(
addr
)))

88 
	`∆_dump_löe
(
p
, "%s_LABEL=%s\n", 
pfx
, 
s
);

90 
	`π∆_addr_Êags2°r
(
	`π∆_addr_gë_Êags
(
addr
), 
buf
, (buf));

91 i‡(
buf
[0])

92 
	`∆_dump_löe
(
p
, "%s_FLAGS=%s\n", 
pfx
, 
buf
);

94 
	`∆_dump_löe
(
p
, "%s_CACHEINFO_VALID=%u\n", 
pfx
,

95 
	`π∆_addr_gë_vÆid_li„time
(
addr
));

97 i‡(
lök_ˇche
)

98 
	`∆_ˇche_put
(
lök_ˇche
);

101 i‡(
addr
->
˚_mask
 & 
ADDR_ATTR_CACHEINFO
) {

102 
π∆_addr_ˇcheöfo
 *
ci
 = &
addr
->
a_ˇcheöfo
;

104 
	`∆_dump_löe
(
p
, "ADDR_CACHEINFO_PREFERRED=%u\n",

105 
ci
->
aci_¥e„ªd
);

107 
	`∆_dump_löe
(
p
, "ADDR_CACHEINFO_CREATED=%u\n", 
ci
->
aci_c°amp
);

108 
	`∆_dump_löe
(
p
, "ADDR_CACHEINFO_LASTUPDATE=%u\n",

109 
ci
->
aci_t°amp
);

112 
	}
}

114 
	$maö
(
¨gc
, *
¨gv
[])

116 
∆_sock
 *
sock
;

117 
π∆_addr
 *
addr
;

118 
∆_ˇche
 *
lök_ˇche
, *
addr_ˇche
;

119 
∆_dump_∑øms
 
∑øms
 = {

120 .
dp_ty≥
 = 
NL_DUMP_LINE
,

121 .
dp_∆_cb
 = 
¥öt_¥efix
,

122 .
dp_fd
 = 
°dout
,

124 
dump_ív
 = 0;

126 
sock
 = 
	`∆_˛i_Æloc_sockë
();

127 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

128 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

129 
addr_ˇche
 = 
	`∆_˛i_addr_Æloc_ˇche
(
sock
);

130 
addr
 = 
	`∆_˛i_addr_Æloc
();

133 
c
, 
›tidx
 = 0;

135 
ARG_FAMILY
 = 257,

136 
ARG_LABEL
 = 258,

137 
ARG_PEER
,

138 
ARG_SCOPE
,

139 
ARG_BROADCAST
,

140 
ARG_DETAILS
,

141 
ARG_ENV
,

142 
ARG_PREFIX
,

143 
ARG_PREFERRED
,

144 
ARG_VALID
,

146 
›ti⁄
 
l⁄g_›ts
[] = {

147 { "dëaûs", 0, 0, 
ARG_DETAILS
 },

148 { "ív", 0, 0, 
ARG_ENV
 },

149 { "¥efix", 1, 0, 
ARG_PREFIX
 },

154 { "Ámûy", 1, 0, 
ARG_FAMILY
 },

155 { "œbñ", 1, 0, 
ARG_LABEL
 },

156 { "≥î", 1, 0, 
ARG_PEER
 },

157 { "sc›e", 1, 0, 
ARG_SCOPE
 },

158 { "brﬂdˇ°", 1, 0, 
ARG_BROADCAST
 },

159 { "¥e„ºed", 1, 0, 
ARG_PREFERRED
 },

160 { "vÆid", 1, 0, 
ARG_VALID
 },

164 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "46hva:d:", 
l⁄g_›ts
, &
›tidx
);

165 i‡(
c
 == -1)

168 
c
) {

169 '?': 
	`exô
(
NLE_INVAL
);

170 '4': 
	`π∆_addr_£t_Ámûy
(
addr
, 
AF_INET
); ;

171 '6': 
	`π∆_addr_£t_Ámûy
(
addr
, 
AF_INET6
); ;

172 
ARG_DETAILS
: 
∑øms
.
dp_ty≥
 = 
NL_DUMP_DETAILS
; ;

173 
ARG_ENV
: 
dump_ív
 = 1; ;

174 
ARG_PREFIX
: 
¥efix
 = 
	`°rdup
(
›èrg
); ;

175 'h': 
	`¥öt_ußge
(); ;

176 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

177 'a': 
	`∆_˛i_addr_∑r£_loˇl
(
addr
, 
›èrg
); ;

178 'd': 
	`∆_˛i_addr_∑r£_dev
(
addr
, 
lök_ˇche
, 
›èrg
); ;

179 
ARG_FAMILY
: 
	`∆_˛i_addr_∑r£_Ámûy
(
addr
, 
›èrg
); ;

180 
ARG_LABEL
: 
	`∆_˛i_addr_∑r£_œbñ
(
addr
, 
›èrg
); ;

181 
ARG_PEER
: 
	`∆_˛i_addr_∑r£_≥î
(
addr
, 
›èrg
); ;

182 
ARG_SCOPE
: 
	`∆_˛i_addr_∑r£_sc›e
(
addr
, 
›èrg
); ;

183 
ARG_BROADCAST
: 
	`∆_˛i_addr_∑r£_brﬂdˇ°
(
addr
, 
›èrg
); ;

184 
ARG_PREFERRED
: 
	`∆_˛i_addr_∑r£_¥e„ºed
(
addr
, 
›èrg
); ;

185 
ARG_VALID
: 
	`∆_˛i_addr_∑r£_vÆid
(
addr
, 
›èrg
); ;

189 i‡(
dump_ív
)

190 
	`∆_ˇche_f‹óch_fûãr
(
addr_ˇche
, 
	`OBJ_CAST
(
addr
), 
ív_dump
,

191 &
∑øms
);

193 
	`∆_ˇche_dump_fûãr
(
addr_ˇche
, &
∑øms
, 
	`OBJ_CAST
(
addr
));

196 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-class-add.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/tc.h
>

14 
	~<√éök/˛i/qdisc.h
>

15 
	~<√éök/˛i/˛ass.h
>

16 
	~<√éök/˛i/lök.h
>

18 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

20 
	gquõt
 = 0;

22 
	$¥öt_ußge
()

24 
	`¥ötf
(

48 
	`exô
(0);

49 
	}
}

51 
	$maö
(
¨gc
, *
¨gv
[])

53 
∆_sock
 *
sock
;

54 
π∆_˛ass
 *
˛ass
;

55 
π∆_tc
 *
tc
;

56 
∆_ˇche
 *
lök_ˇche
;

57 
∆_dump_∑øms
 
dp
 = {

58 .
dp_ty≥
 = 
NL_DUMP_DETAILS
,

59 .
dp_fd
 = 
°dout
,

61 
∆_˛i_tc_moduÀ
 *
tm
;

62 
π∆_tc_›s
 *
›s
;

63 
îr
, 
Êags
 = 
NLM_F_CREATE
 | 
NLM_F_EXCL
;

64 *
köd
, *
id
 = 
NULL
;

66 
sock
 = 
	`∆_˛i_Æloc_sockë
();

67 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

69 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

71 
˛ass
 = 
	`∆_˛i_˛ass_Æloc
();

72 
tc
 = (
π∆_tc
 *Ë
˛ass
;

75 
c
, 
›tidx
 = 0;

77 
ARG_UPDATE
 = 257,

78 
ARG_UPDATE_ONLY
 = 258,

79 
ARG_MTU
,

80 
ARG_MPU
,

81 
ARG_OVERHEAD
,

82 
ARG_LINKTYPE
,

84 
›ti⁄
 
l⁄g_›ts
[] = {

91 { "upd©e", 0, 0, 
ARG_UPDATE
 },

92 { "upd©e-⁄ly", 0, 0, 
ARG_UPDATE_ONLY
 },

93 { "mtu", 1, 0, 
ARG_MTU
 },

94 { "mpu", 1, 0, 
ARG_MPU
 },

95 { "ovîhód", 1, 0, 
ARG_OVERHEAD
 },

96 { "lökty≥", 1, 0, 
ARG_LINKTYPE
 },

100 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "+qhvd:p:i:",

101 
l⁄g_›ts
, &
›tidx
);

102 i‡(
c
 == -1)

105 
c
) {

106 'q': 
quõt
 = 1; ;

107 'h': 
	`¥öt_ußge
(); ;

108 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

109 'd': 
	`∆_˛i_tc_∑r£_dev
(
tc
, 
lök_ˇche
, 
›èrg
); ;

110 'p': 
	`∆_˛i_tc_∑r£_∑ª¡
(
tc
, 
›èrg
); ;

111 'i': 
id
 = 
	`°rdup
(
›èrg
); ;

112 
ARG_UPDATE
: 
Êags
 = 
NLM_F_CREATE
; ;

113 
ARG_UPDATE_ONLY
: 
Êags
 = 0; ;

114 
ARG_MTU
: 
	`∆_˛i_tc_∑r£_mtu
(
tc
, 
›èrg
); ;

115 
ARG_MPU
: 
	`∆_˛i_tc_∑r£_mpu
(
tc
, 
›èrg
); ;

116 
ARG_OVERHEAD
: 
	`∆_˛i_tc_∑r£_ovîhód
(
tc
, 
›èrg
); ;

117 
ARG_LINKTYPE
: 
	`∆_˛i_tc_∑r£_lökty≥
(
tc
, 
›èrg
); ;

121 i‡(
›töd
 >
¨gc
)

122 
	`¥öt_ußge
();

124 i‡(!
	`π∆_tc_gë_ifödex
(
tc
))

125 
	`∆_˛i_Áèl
(
EINVAL
, "You must specifyáÇetwork device (--dev=XXX)");

127 i‡(!
	`π∆_tc_gë_∑ª¡
(
tc
))

128 
	`∆_˛i_Áèl
(
EINVAL
, "You must specifyáÖarent (--parent=XXX)");

130 i‡(
id
) {

131 
	`∆_˛i_tc_∑r£_h™dÀ
(
tc
, 
id
, 1);

132 
	`‰ì
(
id
);

135 
köd
 = 
¨gv
[
›töd
++];

136 
	`π∆_tc_£t_köd
(
tc
, 
köd
);

138 i‡(!(
›s
 = 
	`π∆_tc_gë_›s
(
tc
)))

139 
	`∆_˛i_Áèl
(
ENOENT
, "Unknow¿˛as†\"%s\"", 
köd
);

141 i‡(!(
tm
 = 
	`∆_˛i_tc_lookup
(
›s
)))

142 
	`∆_˛i_Áèl
(
ENOTSUP
, "˛as†ty≥ \"%s\"ÇŸ suµ‹ãd.", 
köd
);

144 
tm
->
	`tm_∑r£_¨gv
(
tc
, 
¨gc
, 
¨gv
);

146 i‡(!
quõt
) {

147 
	`¥ötf
("Adding ");

148 
	`∆_obje˘_dump
(
	`OBJ_CAST
(
˛ass
), &
dp
);

151 i‡((
îr
 = 
	`π∆_˛ass_add
(
sock
, 
˛ass
, 
Êags
)) < 0)

152 
	`∆_˛i_Áèl
(
EINVAL
, "U«bÀÅÿadd cœss: %s", 
	`∆_gëîr‹
(
îr
));

155 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-class-delete.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/˛ass.h
>

14 
	~<√éök/˛i/lök.h
>

16 
	gquõt
 = 0, 
	gdeÁu…_yes
 = 0, 
	gdñëed
 = 0, 
	göãø˘ive
 = 0;

17 
∆_sock
 *
	gsock
;

19 
	$¥öt_ußge
()

21 
	`¥ötf
(

42 
	`exô
(0);

43 
	}
}

45 
	$dñëe_cb
(
∆_obje˘
 *
obj
, *
¨g
)

47 
π∆_˛ass
 *
˛ass
 = 
	`∆_obje˘_¥iv
(
obj
);

48 
∆_dump_∑øms
 
∑øms
 = {

49 .
dp_ty≥
 = 
NL_DUMP_LINE
,

50 .
dp_fd
 = 
°dout
,

52 
îr
;

54 i‡(
öãø˘ive
 && !
	`∆_˛i_c⁄fúm
(
obj
, &
∑øms
, 
deÁu…_yes
))

57 i‡((
îr
 = 
	`π∆_˛ass_dñëe
(
sock
, 
˛ass
)) < 0)

58 
	`∆_˛i_Áèl
(
îr
, "U«bÀÅÿdñëê˛ass: %s\n", 
	`∆_gëîr‹
(err));

60 i‡(!
quõt
) {

61 
	`¥ötf
("Deleted ");

62 
	`∆_obje˘_dump
(
obj
, &
∑øms
);

65 
dñëed
++;

66 
	}
}

68 
	$maö
(
¨gc
, *
¨gv
[])

70 
π∆_˛ass
 *
˛ass
;

71 
π∆_tc
 *
tc
;

72 
∆_ˇche
 *
lök_ˇche
, *
˛ass_ˇche
;

74 
sock
 = 
	`∆_˛i_Æloc_sockë
();

75 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

76 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

77 
˛ass
 = 
	`∆_˛i_˛ass_Æloc
();

78 
tc
 = (
π∆_tc
 *Ë
˛ass
;

81 
c
, 
›tidx
 = 0;

83 
ARG_YES
 = 257,

84 
ARG_INTERACTIVE
 = 258,

86 
›ti⁄
 
l⁄g_›ts
[] = {

87 { "öãø˘ive", 0, 0, 
ARG_INTERACTIVE
 },

88 { "yes", 0, 0, 
ARG_YES
 },

99 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "qhvd:p:i:k:", 
l⁄g_›ts
, &
›tidx
);

100 i‡(
c
 == -1)

103 
c
) {

104 '?': 
	`∆_˛i_Áèl
(
EINVAL
, "Invalid options");

105 
ARG_INTERACTIVE
: 
öãø˘ive
 = 1; ;

106 
ARG_YES
: 
deÁu…_yes
 = 1; ;

107 'q': 
quõt
 = 1; ;

108 'h': 
	`¥öt_ußge
(); ;

109 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

110 'd': 
	`∆_˛i_tc_∑r£_dev
(
tc
, 
lök_ˇche
, 
›èrg
); ;

111 'p': 
	`∆_˛i_tc_∑r£_∑ª¡
(
tc
, 
›èrg
); ;

112 'i': 
	`∆_˛i_tc_∑r£_h™dÀ
(
tc
, 
›èrg
, 0); ;

113 'k': 
	`∆_˛i_tc_∑r£_köd
(
tc
, 
›èrg
); ;

117 i‡(!
	`π∆_tc_gë_ifödex
(
tc
))

118 
	`∆_˛i_Áèl
(
EINVAL
, "You must specifyáÇetwork device (--dev=XXX)");

120 
˛ass_ˇche
 = 
	`∆_˛i_˛ass_Æloc_ˇche
(
sock
, 
	`π∆_tc_gë_ifödex
(
tc
));

122 
	`∆_ˇche_f‹óch_fûãr
(
˛ass_ˇche
, 
	`OBJ_CAST
(
˛ass
), 
dñëe_cb
, 
NULL
);

124 i‡(!
quõt
)

125 
	`¥ötf
("Dñëed %d cœsss\n", 
dñëed
);

128 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-class-list.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/tc.h
>

14 
	~<√éök/˛i/˛ass.h
>

15 
	~<√éök/˛i/lök.h
>

17 
∆_sock
 *
	gsock
;

19 
∆_dump_∑øms
 
	g∑øms
 = {

20 .
dp_ty≥
 = 
NL_DUMP_LINE
,

23 
	$¥öt_ußge
()

25 
	`¥ötf
(

44 
	`exô
(0);

45 
	}
}

47 
	$__dump_˛ass
(
ifödex
, 
π∆_˛ass
 *
fûãr
)

49 
∆_ˇche
 *
ˇche
;

51 
ˇche
 = 
	`∆_˛i_˛ass_Æloc_ˇche
(
sock
, 
ifödex
);

52 
	`∆_ˇche_dump_fûãr
(
ˇche
, &
∑øms
, 
	`OBJ_CAST
(
fûãr
));

53 
	}
}

55 
	$dump_˛ass
(
∆_obje˘
 *
obj
, *
¨g
)

57 
π∆_lök
 *
lök
 = 
	`∆_obje˘_¥iv
(
obj
);

59 
	`__dump_˛ass
(
	`π∆_lök_gë_ifödex
(
lök
), 
¨g
);

60 
	}
}

62 
	$maö
(
¨gc
, *
¨gv
[])

64 
π∆_˛ass
 *
˛ass
;

65 
π∆_tc
 *
tc
;

66 
∆_ˇche
 *
lök_ˇche
;

67 
ifödex
;

69 
sock
 = 
	`∆_˛i_Æloc_sockë
();

70 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

71 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

72 
˛ass
 = 
	`∆_˛i_˛ass_Æloc
();

73 
tc
 = (
π∆_tc
 *Ë
˛ass
;

75 
∑øms
.
dp_fd
 = 
°dout
;

78 
c
, 
›tidx
 = 0;

80 
ARG_DETAILS
 = 257,

81 
ARG_STATS
 = 258,

83 
›ti⁄
 
l⁄g_›ts
[] = {

84 { "dëaûs", 0, 0, 
ARG_DETAILS
 },

85 { "°©s", 0, 0, 
ARG_STATS
 },

95 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hvd:p:i:k:", 
l⁄g_›ts
, &
›tidx
);

96 i‡(
c
 == -1)

99 
c
) {

100 
ARG_DETAILS
: 
∑øms
.
dp_ty≥
 = 
NL_DUMP_DETAILS
; ;

101 
ARG_STATS
: 
∑øms
.
dp_ty≥
 = 
NL_DUMP_STATS
; ;

102 'h': 
	`¥öt_ußge
(); ;

103 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

104 'd': 
	`∆_˛i_tc_∑r£_dev
(
tc
, 
lök_ˇche
, 
›èrg
); ;

105 'p': 
	`∆_˛i_tc_∑r£_∑ª¡
(
tc
, 
›èrg
); ;

106 'i': 
	`∆_˛i_tc_∑r£_h™dÀ
(
tc
, 
›èrg
, 0); ;

107 'k': 
	`∆_˛i_tc_∑r£_köd
(
tc
, 
›èrg
); ;

111 i‡((
ifödex
 = 
	`π∆_tc_gë_ifödex
(
tc
)))

112 
	`__dump_˛ass
(
ifödex
, 
˛ass
);

114 
	`∆_ˇche_f‹óch
(
lök_ˇche
, 
dump_˛ass
, 
˛ass
);

117 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-classid-lookup.c

12 
	~<√éök/˛i/utûs.h
>

14 
	$¥öt_ußge
()

16 
	`¥ötf
(

30 
	`exô
(0);

31 
	}
}

33 
	$maö
(
¨gc
, *
¨gv
[])

35 
uöt32_t
 
˛assid
;

36 *
«me
;

37 
îr
, 
ªvî£
 = 0, 
øw
 = 0;

40 
c
, 
›tidx
 = 0;

42 
ARG_RAW
 = 257,

44 
›ti⁄
 
l⁄g_›ts
[] = {

48 { "øw", 0, 0, 
ARG_RAW
 },

52 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hvr", 
l⁄g_›ts
, &
›tidx
);

53 i‡(
c
 == -1)

56 
c
) {

57 'h': 
	`¥öt_ußge
(); ;

58 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

59 'r': 
ªvî£
 = 1; ;

60 
ARG_RAW
: 
øw
 = 1; ;

64 i‡(
›töd
 >
¨gc
)

65 
	`¥öt_ußge
();

67 
«me
 = 
¨gv
[
›töd
++];

74 i‡((
îr
 = 
	`π∆_tc_°r2h™dÀ
(
«me
, &
˛assid
)) < 0)

75 
	`∆_˛i_Áèl
(
îr
, "UnableÅoÜookup classid \"%s\": %s",

76 
«me
, 
	`∆_gëîr‹
(
îr
));

78 i‡(
ªvî£
) {

79 
buf
[64];

80 
	`¥ötf
("%s\n", 
	`π∆_tc_h™dÀ2°r
(
˛assid
, 
buf
, (buf)));

81 } i‡(
øw
)

82 
	`¥ötf
("%#x\n", 
˛assid
);

84 
	`¥ötf
("%x:%x\n", 
	`TC_H_MAJ
(
˛assid
Ë>> 16, 
	`TC_H_MIN
(classid));

87 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-cls-add.c

11 
	~<√éök/˛i/utûs.h
>

12 
	~<√éök/˛i/tc.h
>

13 
	~<√éök/˛i/˛s.h
>

14 
	~<√éök/˛i/lök.h
>

16 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

18 
	gquõt
 = 0;

20 
	$¥öt_ußge
()

22 
	`¥ötf
(

48 
	`exô
(0);

49 
	}
}

51 
	$maö
(
¨gc
, *
¨gv
[])

53 
∆_sock
 *
sock
;

54 
π∆_˛s
 *
˛s
;

55 
π∆_tc
 *
tc
;

56 
∆_ˇche
 *
lök_ˇche
;

57 
∆_dump_∑øms
 
dp
 = {

58 .
dp_ty≥
 = 
NL_DUMP_DETAILS
,

59 .
dp_fd
 = 
°dout
,

61 
∆_˛i_tc_moduÀ
 *
tm
;

62 
π∆_tc_›s
 *
›s
;

63 
îr
, 
Êags
 = 
NLM_F_CREATE
 | 
NLM_F_EXCL
;

64 *
köd
, *
id
 = 
NULL
;

66 
sock
 = 
	`∆_˛i_Æloc_sockë
();

67 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

69 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

71 
˛s
 = 
	`∆_˛i_˛s_Æloc
();

72 
tc
 = (
π∆_tc
 *Ë
˛s
;

75 
c
, 
›tidx
 = 0;

77 
ARG_UPDATE
 = 257,

78 
ARG_UPDATE_ONLY
 = 258,

79 
ARG_MTU
,

80 
ARG_MPU
,

81 
ARG_OVERHEAD
,

82 
ARG_LINKTYPE
,

83 
ARG_PROTO
,

84 
ARG_PRIO
,

86 
›ti⁄
 
l⁄g_›ts
[] = {

93 { "¥Ÿo", 1, 0, 
ARG_PROTO
 },

94 { "¥io", 1, 0, 
ARG_PRIO
 },

95 { "upd©e", 0, 0, 
ARG_UPDATE
 },

96 { "upd©e-⁄ly", 0, 0, 
ARG_UPDATE_ONLY
 },

97 { "mtu", 1, 0, 
ARG_MTU
 },

98 { "mpu", 1, 0, 
ARG_MPU
 },

99 { "ovîhód", 1, 0, 
ARG_OVERHEAD
 },

100 { "lökty≥", 1, 0, 
ARG_LINKTYPE
 },

104 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "+qhvd:p:i:",

105 
l⁄g_›ts
, &
›tidx
);

106 i‡(
c
 == -1)

109 
c
) {

110 'q': 
quõt
 = 1; ;

111 'h': 
	`¥öt_ußge
(); ;

112 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

113 'd': 
	`∆_˛i_tc_∑r£_dev
(
tc
, 
lök_ˇche
, 
›èrg
); ;

114 'p': 
	`∆_˛i_tc_∑r£_∑ª¡
(
tc
, 
›èrg
); ;

115 'i': 
id
 = 
	`°rdup
(
›èrg
); ;

116 
ARG_UPDATE
: 
Êags
 = 
NLM_F_CREATE
; ;

117 
ARG_UPDATE_ONLY
: 
Êags
 = 0; ;

118 
ARG_MTU
: 
	`∆_˛i_tc_∑r£_mtu
(
tc
, 
›èrg
); ;

119 
ARG_MPU
: 
	`∆_˛i_tc_∑r£_mpu
(
tc
, 
›èrg
); ;

120 
ARG_OVERHEAD
: 
	`∆_˛i_tc_∑r£_ovîhód
(
tc
, 
›èrg
); ;

121 
ARG_LINKTYPE
: 
	`∆_˛i_tc_∑r£_lökty≥
(
tc
, 
›èrg
); ;

122 
ARG_PROTO
: 
	`∆_˛i_˛s_∑r£_¥Ÿo
(
˛s
, 
›èrg
); ;

123 
ARG_PRIO
:

124 
	`π∆_˛s_£t_¥io
(
˛s
, 
	`∆_˛i_∑r£_u32
(
›èrg
));

129 i‡(
›töd
 >
¨gc
)

130 
	`¥öt_ußge
();

132 i‡(!
	`π∆_tc_gë_ifödex
(
tc
))

133 
	`∆_˛i_Áèl
(
EINVAL
, "You must specifyáÇetwork device (--dev=XXX)");

135 i‡(!
	`π∆_tc_gë_∑ª¡
(
tc
))

136 
	`∆_˛i_Áèl
(
EINVAL
, "You must specifyáÖarent (--parent=XXX)");

138 i‡(
id
) {

139 
	`∆_˛i_tc_∑r£_h™dÀ
(
tc
, 
id
, 1);

140 
	`‰ì
(
id
);

143 
köd
 = 
¨gv
[
›töd
++];

144 
	`π∆_tc_£t_köd
(
tc
, 
köd
);

146 i‡(!(
›s
 = 
	`π∆_tc_gë_›s
(
tc
)))

147 
	`∆_˛i_Áèl
(
ENOENT
, "Unknow¿˛assifõ∏\"%s\".", 
köd
);

149 i‡(!(
tm
 = 
	`∆_˛i_tc_lookup
(
›s
)))

150 
	`∆_˛i_Áèl
(
ENOTSUP
, "Cœssifõ∏ty≥ \"%s\"ÇŸ suµ‹ãd.", 
köd
);

152 
tm
->
	`tm_∑r£_¨gv
(
tc
, 
¨gc
, 
¨gv
);

154 i‡(!
quõt
) {

155 
	`¥ötf
("Adding ");

156 
	`∆_obje˘_dump
(
	`OBJ_CAST
(
˛s
), &
dp
);

159 i‡((
îr
 = 
	`π∆_˛s_add
(
sock
, 
˛s
, 
Êags
)) < 0)

160 
	`∆_˛i_Áèl
(
EINVAL
, "U«bÀÅÿadd cœssifõr: %s", 
	`∆_gëîr‹
(
îr
));

163 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-cls-delete.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/˛s.h
>

14 
	~<√éök/˛i/lök.h
>

16 
	gquõt
 = 0, 
	gdeÁu…_yes
 = 0, 
	gdñëed
 = 0, 
	göãø˘ive
 = 0;

17 
∆_sock
 *
	gsock
;

19 
	$¥öt_ußge
()

21 
	`¥ötf
(

44 
	`exô
(0);

45 
	}
}

47 
	$dñëe_cb
(
∆_obje˘
 *
obj
, *
¨g
)

49 
π∆_˛s
 *
˛s
 = 
	`∆_obje˘_¥iv
(
obj
);

50 
∆_dump_∑øms
 
∑øms
 = {

51 .
dp_ty≥
 = 
NL_DUMP_LINE
,

52 .
dp_fd
 = 
°dout
,

54 
îr
;

56 i‡(
öãø˘ive
 && !
	`∆_˛i_c⁄fúm
(
obj
, &
∑øms
, 
deÁu…_yes
))

59 i‡((
îr
 = 
	`π∆_˛s_dñëe
(
sock
, 
˛s
, 0)) < 0)

60 
	`∆_˛i_Áèl
(
îr
, "UnableÅo delete classifier: %s\n",

61 
	`∆_gëîr‹
(
îr
));

63 i‡(!
quõt
) {

64 
	`¥ötf
("Deleted ");

65 
	`∆_obje˘_dump
(
obj
, &
∑øms
);

68 
dñëed
++;

69 
	}
}

71 
	$__dñëe_lök
(
ifödex
, 
π∆_˛s
 *
fûãr
)

73 
∆_ˇche
 *
ˇche
;

74 
uöt32_t
 
∑ª¡
 = 
	`π∆_tc_gë_∑ª¡
((
π∆_tc
 *Ë
fûãr
);

76 
ˇche
 = 
	`∆_˛i_˛s_Æloc_ˇche
(
sock
, 
ifödex
, 
∑ª¡
);

77 
	`∆_ˇche_f‹óch_fûãr
(
ˇche
, 
	`OBJ_CAST
(
fûãr
), 
dñëe_cb
, 
NULL
);

78 
	`∆_ˇche_‰ì
(
ˇche
);

79 
	}
}

81 
	$dñëe_lök
(
∆_obje˘
 *
obj
, *
¨g
)

83 
π∆_lök
 *
lök
 = 
	`∆_obje˘_¥iv
(
obj
);

85 
	`__dñëe_lök
(
	`π∆_lök_gë_ifödex
(
lök
), 
¨g
);

86 
	}
}

88 
	$maö
(
¨gc
, *
¨gv
[])

90 
π∆_˛s
 *
˛s
;

91 
π∆_tc
 *
tc
;

92 
∆_ˇche
 *
lök_ˇche
;

93 
ifödex
;

95 
sock
 = 
	`∆_˛i_Æloc_sockë
();

96 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

97 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

98 
˛s
 = 
	`∆_˛i_˛s_Æloc
();

99 
tc
 = (
π∆_tc
 *Ë
˛s
;

102 
c
, 
›tidx
 = 0;

104 
ARG_YES
 = 257,

105 
ARG_INTERACTIVE
 = 258,

106 
ARG_PROTO
,

107 
ARG_PRIO
,

109 
›ti⁄
 
l⁄g_›ts
[] = {

110 { "öãø˘ive", 0, 0, 
ARG_INTERACTIVE
 },

111 { "yes", 0, 0, 
ARG_YES
 },

119 { "¥Ÿo", 1, 0, 
ARG_PROTO
 },

120 { "¥io", 1, 0, 
ARG_PRIO
 },

124 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "qhvd:p:i:k:", 
l⁄g_›ts
, &
›tidx
);

125 i‡(
c
 == -1)

128 
c
) {

129 '?': 
	`∆_˛i_Áèl
(
EINVAL
, "Invalid options");

130 
ARG_INTERACTIVE
: 
öãø˘ive
 = 1; ;

131 
ARG_YES
: 
deÁu…_yes
 = 1; ;

132 'q': 
quõt
 = 1; ;

133 'h': 
	`¥öt_ußge
(); ;

134 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

135 'd': 
	`∆_˛i_tc_∑r£_dev
(
tc
, 
lök_ˇche
, 
›èrg
); ;

136 'p': 
	`∆_˛i_tc_∑r£_∑ª¡
(
tc
, 
›èrg
); ;

137 'i': 
	`∆_˛i_tc_∑r£_h™dÀ
(
tc
, 
›èrg
, 0); ;

138 'k': 
	`∆_˛i_tc_∑r£_köd
(
tc
, 
›èrg
); ;

139 
ARG_PROTO
: 
	`∆_˛i_˛s_∑r£_¥Ÿo
(
˛s
, 
›èrg
); ;

140 
ARG_PRIO
:

141 
	`π∆_˛s_£t_¥io
(
˛s
, 
	`∆_˛i_∑r£_u32
(
›èrg
));

146 i‡((
ifödex
 = 
	`π∆_tc_gë_ifödex
(
tc
)))

147 
	`__dñëe_lök
(
ifödex
, 
˛s
);

149 
	`∆_ˇche_f‹óch
(
lök_ˇche
, 
dñëe_lök
, 
˛s
);

151 i‡(!
quõt
)

152 
	`¥ötf
("Dñëed %d cœsss\n", 
dñëed
);

155 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-cls-list.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/tc.h
>

14 
	~<√éök/˛i/˛s.h
>

15 
	~<√éök/˛i/lök.h
>

17 
∆_sock
 *
	gsock
;

19 
∆_dump_∑øms
 
	g∑øms
 = {

20 .
dp_ty≥
 = 
NL_DUMP_LINE
,

23 
	$¥öt_ußge
()

25 
	`¥ötf
(

46 
	`exô
(0);

47 
	}
}

49 
	$__dump_lök
(
ifödex
, 
π∆_˛s
 *
fûãr
)

51 
∆_ˇche
 *
ˇche
;

52 
uöt32_t
 
∑ª¡
 = 
	`π∆_tc_gë_∑ª¡
((
π∆_tc
 *Ë
fûãr
);

54 
ˇche
 = 
	`∆_˛i_˛s_Æloc_ˇche
(
sock
, 
ifödex
, 
∑ª¡
);

55 
	`∆_ˇche_dump_fûãr
(
ˇche
, &
∑øms
, 
	`OBJ_CAST
(
fûãr
));

56 
	`∆_ˇche_‰ì
(
ˇche
);

57 
	}
}

59 
	$dump_lök
(
∆_obje˘
 *
obj
, *
¨g
)

61 
π∆_lök
 *
lök
 = 
	`∆_obje˘_¥iv
(
obj
);

63 
	`__dump_lök
(
	`π∆_lök_gë_ifödex
(
lök
), 
¨g
);

64 
	}
}

66 
	$maö
(
¨gc
, *
¨gv
[])

68 
π∆_˛s
 *
˛s
;

69 
π∆_tc
 *
tc
;

70 
∆_ˇche
 *
lök_ˇche
;

71 
ifödex
;

73 
sock
 = 
	`∆_˛i_Æloc_sockë
();

74 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

75 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

76 
˛s
 = 
	`∆_˛i_˛s_Æloc
();

77 
tc
 = (
π∆_tc
 *Ë
˛s
;

79 
∑øms
.
dp_fd
 = 
°dout
;

82 
c
, 
›tidx
 = 0;

84 
ARG_DETAILS
 = 257,

85 
ARG_STATS
 = 258,

86 
ARG_PROTO
,

87 
ARG_PRIO
,

89 
›ti⁄
 
l⁄g_›ts
[] = {

90 { "dëaûs", 0, 0, 
ARG_DETAILS
 },

91 { "°©s", 0, 0, 
ARG_STATS
 },

98 { "¥Ÿo", 1, 0, 
ARG_PROTO
 },

99 { "¥io", 1, 0, 
ARG_PRIO
 },

103 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hvd:p:i:k:", 
l⁄g_›ts
, &
›tidx
);

104 i‡(
c
 == -1)

107 
c
) {

108 
ARG_DETAILS
: 
∑øms
.
dp_ty≥
 = 
NL_DUMP_DETAILS
; ;

109 
ARG_STATS
: 
∑øms
.
dp_ty≥
 = 
NL_DUMP_STATS
; ;

110 'h': 
	`¥öt_ußge
(); ;

111 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

112 'd': 
	`∆_˛i_tc_∑r£_dev
(
tc
, 
lök_ˇche
, 
›èrg
); ;

113 'p': 
	`∆_˛i_tc_∑r£_∑ª¡
(
tc
, 
›èrg
); ;

114 'i': 
	`∆_˛i_tc_∑r£_h™dÀ
(
tc
, 
›èrg
, 0); ;

115 'k': 
	`∆_˛i_tc_∑r£_köd
(
tc
, 
›èrg
); ;

116 
ARG_PROTO
: 
	`∆_˛i_˛s_∑r£_¥Ÿo
(
˛s
, 
›èrg
); ;

117 
ARG_PRIO
:

118 
	`π∆_˛s_£t_¥io
(
˛s
, 
	`∆_˛i_∑r£_u32
(
›èrg
));

123 i‡((
ifödex
 = 
	`π∆_tc_gë_ifödex
(
tc
)))

124 
	`__dump_lök
(
ifödex
, 
˛s
);

126 
	`∆_ˇche_f‹óch
(
lök_ˇche
, 
dump_lök
, 
˛s
);

129 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-fib-lookup.c

12 
	~<√éök/˛i/utûs.h
>

14 
	$¥öt_ußge
()

16 
	`¥ötf
(

23 
	`exô
(1);

24 
	}
}

26 
	$maö
(
¨gc
, *
¨gv
[])

28 
∆_sock
 *
∆h
;

29 
∆_ˇche
 *
ªsu…
;

30 
Ê∆_ªque°
 *
ªque°
;

31 
∆_addr
 *
addr
;

32 
∆_dump_∑øms
 
∑øms
 = {

33 .
dp_fd
 = 
°dout
,

34 .
dp_ty≥
 = 
NL_DUMP_DETAILS
,

36 
èbÀ
 = 
RT_TABLE_UNSPEC
, 
sc›e
 = 
RT_SCOPE_UNIVERSE
;

37 
tos
 = 0, 
îr
 = 1;

38 
uöt64_t
 
fwm¨k
 = 0;

41 
›ti⁄
 
l⁄g_›ts
[] = {

49 
c
, 
idx
 = 0;

51 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "t:f:s:T:h", 
l⁄g_›ts
, &
idx
);

52 i‡(
c
 == -1)

55 
c
) {

57 
èbÀ
 = 
	`°πoul
(
›èrg
, 
NULL
, 0);

60 
fwm¨k
 = 
	`°πoul
(
›èrg
, 
NULL
, 0);

63 
sc›e
 = 
	`°πoul
(
›èrg
, 
NULL
, 0);

66 
tos
 = 
	`°πoul
(
›èrg
, 
NULL
, 0);

69 
	`¥öt_ußge
();

73 i‡(
›töd
 >
¨gc
)

74 
	`¥öt_ußge
();

76 
∆h
 = 
	`∆_˛i_Æloc_sockë
();

78 i‡((
îr
 = 
	`∆_addr_∑r£
(
¨gv
[
›töd
], 
AF_INET
, &
addr
)) < 0)

79 
	`∆_˛i_Áèl
(
îr
, "UnableÅoÖarseáddress \"%s\": %s\n",

80 
¨gv
[
›töd
], 
	`∆_gëîr‹
(
îr
));

82 
ªsu…
 = 
	`Ê∆_ªsu…_Æloc_ˇche
();

83 i‡(!
ªsu…
)

84 
	`∆_˛i_Áèl
(
ENOMEM
, "UnableÅoállocate cache");

86 
ªque°
 = 
	`Ê∆_ªque°_Æloc
();

87 i‡(!
ªque°
)

88 
	`∆_˛i_Áèl
(
ENOMEM
, "UnableÅoállocateÑequest");

90 
	`Ê∆_ªque°_£t_èbÀ
(
ªque°
, 
èbÀ
);

91 
	`Ê∆_ªque°_£t_fwm¨k
(
ªque°
, 
fwm¨k
);

92 
	`Ê∆_ªque°_£t_sc›e
(
ªque°
, 
sc›e
);

93 
	`Ê∆_ªque°_£t_tos
(
ªque°
, 
tos
);

95 
îr
 = 
	`Ê∆_ªque°_£t_addr
(
ªque°
, 
addr
);

96 
	`∆_addr_put
(
addr
);

97 i‡(
îr
 < 0)

98 
	`∆_˛i_Áèl
(
îr
, "U«bÀÅÿ£ndÑeque°: %s", 
	`∆_gëîr‹
(err));

100 
	`∆_˛i_c⁄√˘
(
∆h
, 
NETLINK_FIB_LOOKUP
);

102 
îr
 = 
	`Ê∆_lookup
(
∆h
, 
ªque°
, 
ªsu…
);

103 i‡(
îr
 < 0)

104 
	`∆_˛i_Áèl
(
îr
, "U«bÀÅÿlookup: %s\n", 
	`∆_gëîr‹
(err));

106 
	`∆_ˇche_dump
(
ªsu…
, &
∑øms
);

109 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-link-enslave.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/lök.h
>

14 
	~<√éök/rouã/lök/b⁄dög.h
>

16 
	$maö
(
¨gc
, *
¨gv
[])

18 
∆_sock
 *
sock
;

19 
∆_ˇche
 *
lök_ˇche
;

20 
π∆_lök
 *
ma°î
, *
¶ave
;

21 
îr
;

23 i‡(
¨gc
 < 3) {

24 
	`Ârötf
(
°dîr
, "Usage:Çl-link-enslave master slave\n");

28 
sock
 = 
	`∆_˛i_Æloc_sockë
();

29 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

30 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

32 i‡(!(
ma°î
 = 
	`π∆_lök_gë_by_«me
(
lök_ˇche
, 
¨gv
[1]))) {

33 
	`Ârötf
(
°dîr
, "Unknow¿lök: %s\n", 
¨gv
[1]);

37 i‡(!(
¶ave
 = 
	`π∆_lök_gë_by_«me
(
lök_ˇche
, 
¨gv
[2]))) {

38 
	`Ârötf
(
°dîr
, "Unknow¿lök: %s\n", 
¨gv
[2]);

42 i‡((
îr
 = 
	`π∆_lök_b⁄d_í¶ave
(
sock
, 
ma°î
, 
¶ave
)) < 0) {

43 
	`Ârötf
(
°dîr
, "UnableÅoÉnslave %sÅo %s: %s\n",

44 
¨gv
[2],árgv[1], 
	`∆_gëîr‹
(
îr
));

49 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-link-ifindex2name.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/lök.h
>

15 
	$¥öt_ußge
()

17 
	`¥ötf
("Usage:Çl-link-ifindex2name <ifindex>\n");

18 
	`exô
(0);

19 
	}
}

21 
	$maö
(
¨gc
, *
¨gv
[])

23 
∆_sock
 *
sock
;

24 
∆_ˇche
 *
lök_ˇche
;

25 
«me
[
IFNAMSIZ
];

26 
uöt32_t
 
ifödex
;

28 i‡(
¨gc
 < 2)

29 
	`¥öt_ußge
();

31 
sock
 = 
	`∆_˛i_Æloc_sockë
();

32 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

33 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

35 
ifödex
 = 
	`∆_˛i_∑r£_u32
(
¨gv
[1]);

37 i‡(!
	`π∆_lök_i2«me
(
lök_ˇche
, 
ifödex
, 
«me
, (name)))

38 
	`∆_˛i_Áèl
(
ENOENT
, "Interface index %d doesÇotÉxist",

39 
ifödex
);

41 
	`¥ötf
("%s\n", 
«me
);

44 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-link-list.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/lök.h
>

15 
	$¥öt_ußge
()

17 
	`¥ötf
(

33 
	`exô
(0);

34 
	}
}

36 
	$maö
(
¨gc
, *
¨gv
[])

38 
∆_sock
 *
sock
;

39 
∆_ˇche
 *
lök_ˇche
;

40 
π∆_lök
 *
lök
;

41 
∆_dump_∑øms
 
∑øms
 = {

42 .
dp_ty≥
 = 
NL_DUMP_LINE
,

43 .
dp_fd
 = 
°dout
,

46 
sock
 = 
	`∆_˛i_Æloc_sockë
();

47 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

48 
lök
 = 
	`∆_˛i_lök_Æloc
();

51 
c
, 
›tidx
 = 0;

53 
ARG_FAMILY
 = 257,

54 
ARG_MTU
 = 258,

55 
ARG_TXQLEN
,

56 
ARG_WEIGHT
,

57 
ARG_DETAILS
,

58 
ARG_STATS
,

60 
›ti⁄
 
l⁄g_›ts
[] = {

61 { "dëaûs", 0, 0, 
ARG_DETAILS
 },

62 { "°©s", 0, 0, 
ARG_STATS
 },

67 { "Ámûy", 1, 0, 
ARG_FAMILY
 },

68 { "mtu", 1, 0, 
ARG_MTU
 },

69 { "txqÀn", 1, 0, 
ARG_TXQLEN
 },

70 { "weight", 1, 0, 
ARG_WEIGHT
 },

74 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hvn:i:", 
l⁄g_›ts
, &
›tidx
);

75 i‡(
c
 == -1)

78 
c
) {

79 
ARG_DETAILS
: 
∑øms
.
dp_ty≥
 = 
NL_DUMP_DETAILS
; ;

80 
ARG_STATS
: 
∑øms
.
dp_ty≥
 = 
NL_DUMP_STATS
; ;

81 'h': 
	`¥öt_ußge
(); ;

82 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

83 'n': 
	`∆_˛i_lök_∑r£_«me
(
lök
, 
›èrg
); ;

84 'i': 
	`∆_˛i_lök_∑r£_ifödex
(
lök
, 
›èrg
); ;

85 
ARG_FAMILY
: 
	`∆_˛i_lök_∑r£_Ámûy
(
lök
, 
›èrg
); ;

86 
ARG_MTU
: 
	`∆_˛i_lök_∑r£_mtu
(
lök
, 
›èrg
); ;

87 
ARG_TXQLEN
: 
	`∆_˛i_lök_∑r£_txqÀn
(
lök
, 
›èrg
); ;

88 
ARG_WEIGHT
: 
	`∆_˛i_lök_∑r£_weight
(
lök
, 
›èrg
); ;

92 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche_Ámûy
(
sock
,

93 
	`π∆_lök_gë_Ámûy
(
lök
));

95 
	`∆_ˇche_dump_fûãr
(
lök_ˇche
, &
∑øms
, 
	`OBJ_CAST
(
lök
));

98 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-link-name2ifindex.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/lök.h
>

15 
	$¥öt_ußge
()

17 
	`¥ötf
("Usage:Çl-link-name2ifindex <name>\n");

18 
	`exô
(0);

19 
	}
}

21 
	$maö
(
¨gc
, *
¨gv
[])

23 
∆_sock
 *
sock
;

24 
∆_ˇche
 *
lök_ˇche
;

25 
uöt32_t
 
ifödex
;

27 i‡(
¨gc
 < 2)

28 
	`¥öt_ußge
();

30 
sock
 = 
	`∆_˛i_Æloc_sockë
();

31 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

32 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

34 i‡(!(
ifödex
 = 
	`π∆_lök_«me2i
(
lök_ˇche
, 
¨gv
[1])))

35 
	`∆_˛i_Áèl
(
ENOENT
, "Interface \"%s\" doesÇotÉxist",

36 
¨gv
[1]);

38 
	`¥ötf
("%u\n", 
ifödex
);

41 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-link-release.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/lök.h
>

14 
	~<√éök/rouã/lök/b⁄dög.h
>

16 
	$maö
(
¨gc
, *
¨gv
[])

18 
∆_sock
 *
sock
;

19 
∆_ˇche
 *
lök_ˇche
;

20 
π∆_lök
 *
¶ave
;

21 
îr
;

23 i‡(
¨gc
 < 2) {

24 
	`Ârötf
(
°dîr
, "Usage:Çl-link-release slave\n");

28 
sock
 = 
	`∆_˛i_Æloc_sockë
();

29 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

30 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

32 i‡(!(
¶ave
 = 
	`π∆_lök_gë_by_«me
(
lök_ˇche
, 
¨gv
[1]))) {

33 
	`Ârötf
(
°dîr
, "Unknow¿lök: %s\n", 
¨gv
[1]);

37 i‡((
îr
 = 
	`π∆_lök_b⁄d_ªÀa£
(
sock
, 
¶ave
)) < 0) {

38 
	`Ârötf
(
°dîr
, "UnableÅoÑelease slave %s: %s\n",

39 
¨gv
[1], 
	`∆_gëîr‹
(
îr
));

44 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-link-set.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/lök.h
>

15 
∆_sock
 *
	gsock
;

16 
	gquõt
 = 0;

26 
	$¥öt_ußge
()

28 
	`¥ötf
(

47 
	`exô
(0);

48 
	}
}

50 
	$£t_cb
(
∆_obje˘
 *
obj
, *
¨g
)

52 
π∆_lök
 *
lök
 = 
	`∆_obje˘_¥iv
(
obj
);

53 
π∆_lök
 *
ch™ge
 = 
¨g
;

54 
∆_dump_∑øms
 
∑øms
 = {

55 .
dp_ty≥
 = 
NL_DUMP_LINE
,

56 .
dp_fd
 = 
°dout
,

58 
îr
;

60 i‡((
îr
 = 
	`π∆_lök_ch™ge
(
sock
, 
lök
, 
ch™ge
, 0)) < 0)

61 
	`∆_˛i_Áèl
(
îr
, "UnableÅo changeÜink: %s",

62 
	`∆_gëîr‹
(
îr
));

64 i‡(!
quõt
) {

65 
	`¥ötf
("Changed ");

66 
	`∆_obje˘_dump
(
	`OBJ_CAST
(
lök
), &
∑øms
);

68 
	}
}

70 
	$maö
(
¨gc
, *
¨gv
[])

72 
∆_ˇche
 *
lök_ˇche
;

73 
π∆_lök
 *
lök
, *
ch™ge
;

74 
ok
 = 0;

76 
sock
 = 
	`∆_˛i_Æloc_sockë
();

77 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

78 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

79 
lök
 = 
	`∆_˛i_lök_Æloc
();

80 
ch™ge
 = 
	`∆_˛i_lök_Æloc
();

83 
c
, 
›tidx
 = 0;

85 
ARG_RENAME
 = 257,

86 
ARG_MTU
 = 258,

87 
ARG_TXQLEN
,

88 
ARG_WEIGHT
,

89 
ARG_IFALIAS
,

90 
ARG_STATE
,

92 
›ti⁄
 
l⁄g_›ts
[] = {

98 { "ª«me", 1, 0, 
ARG_RENAME
 },

99 { "mtu", 1, 0, 
ARG_MTU
 },

100 { "txqÀn", 1, 0, 
ARG_TXQLEN
 },

101 { "weight", 1, 0, 
ARG_WEIGHT
 },

102 { "iÁlüs", 1, 0, 
ARG_IFALIAS
 },

103 { "°©e", 1, 0, 
ARG_STATE
 },

107 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "qhvn:i:", 
l⁄g_›ts
, &
›tidx
);

108 i‡(
c
 == -1)

111 
c
) {

112 'q': 
quõt
 = 1; ;

113 'h': 
	`¥öt_ußge
(); ;

114 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

115 'n': 
ok
++; 
	`∆_˛i_lök_∑r£_«me
(
lök
, 
›èrg
); ;

116 'i': 
ok
++; 
	`∆_˛i_lök_∑r£_ifödex
(
lök
, 
›èrg
); ;

117 
ARG_RENAME
: 
	`∆_˛i_lök_∑r£_«me
(
ch™ge
, 
›èrg
); ;

118 
ARG_MTU
: 
	`∆_˛i_lök_∑r£_mtu
(
ch™ge
, 
›èrg
); ;

119 
ARG_TXQLEN
: 
	`∆_˛i_lök_∑r£_txqÀn
(
ch™ge
, 
›èrg
); ;

120 
ARG_WEIGHT
: 
	`∆_˛i_lök_∑r£_weight
(
ch™ge
, 
›èrg
); ;

121 
ARG_IFALIAS
: 
	`∆_˛i_lök_∑r£_iÁlüs
(
ch™ge
, 
›èrg
); ;

122 
ARG_STATE
:

123 if(!
	`°rcmp
(
›èrg
, "up"))

124 
	`π∆_lök_£t_Êags
(
ch™ge
, 
IFF_UP
);

125 if(!
	`°rcmp
(
›èrg
, "down"))

126 
	`π∆_lök_un£t_Êags
(
ch™ge
, 
IFF_UP
);

131 i‡(!
ok
)

132 
	`¥öt_ußge
();

134 
	`∆_ˇche_f‹óch_fûãr
(
lök_ˇche
, 
	`OBJ_CAST
(
lök
), 
£t_cb
, 
ch™ge
);

137 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-link-stats.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/lök.h
>

15 
	$¥öt_ußge
()

17 
	`¥ötf
(

29 
	`exô
(0);

30 
	}
}

32 
	$li°_°©_«mes
()

34 
buf
[64];

35 
i
;

37 
i
 = 0; i < 
RTNL_LINK_STATS_MAX
; i++)

38 
	`¥ötf
("%s\n", 
	`π∆_lök_°©2°r
(
i
, 
buf
, (buf)));

40 
	`exô
(0);

41 
	}
}

43 
	gg¨gc
;

45 
	$dump_°©
(
π∆_lök
 *
lök
, 
id
)

47 
uöt64_t
 
°
 = 
	`π∆_lök_gë_°©
(
lök
, 
id
);

48 
buf
[64];

50 
	`¥ötf
("%s.%†%" 
PRIu64
 "\n", 
	`π∆_lök_gë_«me
(
lök
),

51 
	`π∆_lök_°©2°r
(
id
, 
buf
, (buf)), 
°
);

52 
	}
}

54 
	$dump_°©s
(
∆_obje˘
 *
obj
, *
¨g
)

56 
π∆_lök
 *
lök
 = (π∆_lök *Ë
obj
;

57 **
¨gv
 = 
¨g
;

59 i‡(
›töd
 >
g¨gc
) {

60 
i
;

62 
i
 = 0; i < 
RTNL_LINK_STATS_MAX
; i++)

63 
	`dump_°©
(
lök
, 
i
);

65 
›töd
 < 
g¨gc
) {

66 
id
 = 
	`π∆_lök_°r2°©
(
¨gv
[
›töd
]);

68 i‡(
id
 < 0)

69 
	`Ârötf
(
°dîr
, "Warning: Unknown statistic "

70 "\"%s\"\n", 
¨gv
[
›töd
]);

72 
	`dump_°©
(
lök
, 
id
);

74 
›töd
++;

77 
	}
}

79 
	$maö
(
¨gc
, *
¨gv
[])

81 
∆_sock
 *
sock
;

82 
∆_ˇche
 *
lök_ˇche
;

83 
π∆_lök
 *
lök
;

85 
sock
 = 
	`∆_˛i_Æloc_sockë
();

86 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

87 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

88 
lök
 = 
	`∆_˛i_lök_Æloc
();

91 
c
, 
›tidx
 = 0;

92 
›ti⁄
 
l⁄g_›ts
[] = {

101 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "lhvn:i:", 
l⁄g_›ts
, &
›tidx
);

102 i‡(
c
 == -1)

105 
c
) {

106 'l': 
	`li°_°©_«mes
(); ;

107 'h': 
	`¥öt_ußge
(); ;

108 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

109 'n': 
	`∆_˛i_lök_∑r£_«me
(
lök
, 
›èrg
); ;

110 'i': 
	`∆_˛i_lök_∑r£_ifödex
(
lök
, 
›èrg
); ;

114 
g¨gc
 = 
¨gc
;

115 
	`∆_ˇche_f‹óch_fûãr
(
lök_ˇche
, 
	`OBJ_CAST
(
lök
), 
dump_°©s
, 
¨gv
);

118 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-list-caches.c

12 
	~<√éök-¥iv©e/√éök.h
>

13 
	~<√éök/˛i/utûs.h
>

15 
	$¥öt_ußge
()

17 
	`Ârötf
(
°dîr
, "Usage:Çl-list-caches\n");

18 
	`exô
(1);

19 
	}
}

21 *
	$id_©å_li°
(
∆_obje˘_›s
 *
›s
, *
buf
, 
size_t
 
Àn
)

23 i‡(
›s
->
oo_©ås2°r
 !
NULL
)

24  
›s
->
	`oo_©ås2°r
(›s->
oo_id_©ås
, 
buf
, 
Àn
);

26 
	`mem£t
(
buf
, 0, 
Àn
);

27  
buf
;

29 
	}
}

31 
	$¥öt
(
∆_ˇche_›s
 *
›s
, *
¨g
)

33 
buf
[64];

35 
	`¥ötf
("%s:\n" \

40 
›s
->
co_«me
, ops->
co_hdrsize
,

41 
	`∆_∆Ámûy2°r
(
›s
->
co_¥Ÿocﬁ
, 
buf
, (buf)),

42 
›s
->
co_ªque°_upd©e
 ? "yes" : "no",

43 
›s
->
co_msg_∑r£r
 ? "yes" : "no");

45 i‡(
›s
->
co_obj_›s
) {

46 
∆_obje˘_›s
 *
obj_›s
 = 
›s
->
co_obj_›s
;

47 c⁄° *
dump_«mes
[
NL_DUMP_MAX
+1] = {

52 
i
;

54 
	`¥ötf
(" cacheable object:\n" \

63 
obj_›s
->
oo_«me
, obj_›s->
oo_size
,

64 
obj_›s
->
oo_c⁄°ru˘‹
 ? "yes" : "no",

65 
obj_›s
->
oo_‰ì_d©a
 ? "yes" : "no",

66 
obj_›s
->
oo_˛⁄e
 ? "yes" : "no",

67 
obj_›s
->
oo_com∑ª
 ? "yes" : "no",

68 
	`id_©å_li°
(
obj_›s
, 
buf
, (buf)));

70 
i
 = 0; i <
NL_DUMP_MAX
; i++)

71 i‡(
obj_›s
->
oo_dump
[
i
])

72 
	`¥ötf
("%s%s",

73 
i
 == 0 ? "" : ", ",

74 
dump_«mes
[
i
]);

76 
	`¥ötf
("\n");

79 i‡(
›s
->
co_gíl
) {

80 
gíl_›s
 *gíl_›†
›s
->
co_gíl
;

82 
	`¥ötf
(" genl:\n" \

86 
gíl_›s
->
o_«me
, gíl_›s->
o_hdrsize
, gíl_›s->
o_id
);

88 i‡(
gíl_›s
->
o_ncmds
) {

89 
i
;

91 
	`¥ötf
(" cmds:\n");

93 
i
 = 0; i < 
gíl_›s
->
o_ncmds
; i++) {

94 
gíl_cmd
 *
cmd
 = &
gíl_›s
->
o_cmds
[
i
];

96 
	`¥ötf
(" %s:\n"

101 
cmd
->
c_«me
, cmd->
c_id
, cmd->
c_max©å
,

102 
cmd
->
c_msg_∑r£r
 ? "yes" : "no",

103 
cmd
->
c_©å_pﬁicy
 ? "yes" : "no");

107 
	}
}

109 
	$maö
(
¨gc
, *
¨gv
[])

111 i‡(
¨gc
 > 1 && !
	`°rˇ£cmp
(
¨gv
[1], "-h"))

112 
	`¥öt_ußge
();

114 
	`∆_ˇche_›s_f‹óch
(
¥öt
, 
NULL
);

117 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-list-sockets.c

12 
	~<√éök/˛i/utûs.h
>

14 
	#PROC_NETLINK
 "/¥oc/√t/√éök"

	)

16 
	$maö
(
¨gc
, *
¨gv
[])

18 
FILE
 *
fd
;

19 
buf
[2048], 
p
[64];

21 
fd
 = 
	`f›í
(
PROC_NETLINK
, "r");

22 i‡(
fd
 =
NULL
) {

23 
	`≥º‹
("fopen");

27 
	`¥ötf
("Address Family PID GroupsÑmem "

30 
	`fgës
(
buf
, (buf), 
fd
)) {

31 
sk
, 
cb
;

32 
ªt
, 
¥Ÿo
, 
pid
, 
rmem
, 
wmem
, 
ªf˙t
;

33 
groups
;

35 
ªt
 = 
	`ssˇnf
(
buf
, "%lx %d %d %08x %d %d %lx %d\n",

36 &
sk
, &
¥Ÿo
, &
pid
, &
groups
, &
rmem
, &
wmem
,

37 &
cb
, &
ªf˙t
);

38 i‡(
ªt
 != 8)

41 
	`¥ötf
("0x%016lx %-16s %-6d %08x %-6d %-6d 0x%08lx %d\n",

42 
sk
, 
	`∆_∆Ámûy2°r
(
¥Ÿo
, 
p
, ’)), 
pid
,

43 
groups
, 
rmem
, 
wmem
, 
cb
, 
ªf˙t
);

46 
	`f˛o£
(
fd
);

49 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-monitor.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/lök.h
>

15 
	$obj_öput
(
∆_obje˘
 *
obj
, *
¨g
)

17 
∆_dump_∑øms
 
dp
 = {

18 .
dp_ty≥
 = 
NL_DUMP_STATS
,

19 .
dp_fd
 = 
°dout
,

20 .
dp_dump_msgty≥
 = 1,

23 
	`∆_obje˘_dump
(
obj
, &
dp
);

24 
	}
}

26 
	$evít_öput
(
∆_msg
 *
msg
, *
¨g
)

28 i‡(
	`∆_msg_∑r£
(
msg
, &
obj_öput
, 
NULL
) < 0)

29 
	`Ârötf
(
°dîr
, "<<EVENT>> Unknown messageÅype\n");

32  
NL_STOP
;

33 
	}
}

35 
	$maö
(
¨gc
, *
¨gv
[])

37 
∆_sock
 *
sock
;

38 
∆_ˇche
 *
lök_ˇche
;

39 
îr
 = 1;

40 
i
, 
idx
;

43 
π√éök_groups
 
gr_id
;

44 c⁄° * 
gr_«me
;

45 } 
known_groups
[] = {

46 { 
RTNLGRP_LINK
, "link" },

47 { 
RTNLGRP_NOTIFY
, "notify" },

48 { 
RTNLGRP_NEIGH
, "neigh" },

49 { 
RTNLGRP_TC
, "tc" },

50 { 
RTNLGRP_IPV4_IFADDR
, "ipv4-ifaddr" },

51 { 
RTNLGRP_IPV4_MROUTE
, "ipv4-mroute" },

52 { 
RTNLGRP_IPV4_ROUTE
, "ipv4-route" },

53 { 
RTNLGRP_IPV6_IFADDR
, "ipv6-ifaddr" },

54 { 
RTNLGRP_IPV6_MROUTE
, "ipv6-mroute" },

55 { 
RTNLGRP_IPV6_ROUTE
, "ipv6-route" },

56 { 
RTNLGRP_IPV6_IFINFO
, "ipv6-ifinfo" },

57 { 
RTNLGRP_DEC√t_IFADDR
, "decnet-ifaddr" },

58 { 
RTNLGRP_DEC√t_ROUTE
, "decnet-route" },

59 { 
RTNLGRP_IPV6_PREFIX
, "ipv6-prefix" },

60 { 
RTNLGRP_NONE
, 
NULL
 }

63 
sock
 = 
	`∆_˛i_Æloc_sockë
();

64 
	`∆_sockë_dißbÀ_£q_check
(
sock
);

65 
	`∆_sockë_modify_cb
(
sock
, 
NL_CB_VALID
, 
NL_CB_CUSTOM
, 
evít_öput
, 
NULL
);

67 i‡(
¨gc
 > 1 && !
	`°rˇ£cmp
(
¨gv
[1], "-h")) {

68 
	`¥ötf
("Usage:Çl-monitor [<groups>]\n");

70 
	`¥ötf
("Known groups:");

71 
i
 = 0; 
known_groups
[i].
gr_id
 !
RTNLGRP_NONE
; i++)

72 
	`¥ötf
(" %s", 
known_groups
[
i
].
gr_«me
);

73 
	`¥ötf
("\n");

77 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

79 
idx
 = 1; 
¨gc
 > idx; idx++) {

80 
i
 = 0; 
known_groups
[i].
gr_id
 !
RTNLGRP_NONE
; i++) {

81 i‡(!
	`°rcmp
(
¨gv
[
idx
], 
known_groups
[
i
].
gr_«me
)) {

83 i‡((
îr
 = 
	`∆_sockë_add_membîshù
(
sock
, 
known_groups
[
i
].
gr_id
)) < 0) {

84 
	`∆_˛i_Áèl
(
îr
, "%s: %s\n", 
¨gv
[
idx
],

85 
	`∆_gëîr‹
(
îr
));

91 i‡(
known_groups
[
i
].
gr_id
 =
RTNLGRP_NONE
)

92 
	`Ârötf
(
°dîr
, "W¨nög: Unknow¿group: %s\n", 
¨gv
[
idx
]);

95 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

98 
fd_£t
 
rfds
;

99 
fd
, 
ªtvÆ
;

101 
fd
 = 
	`∆_sockë_gë_fd
(
sock
);

103 
	`FD_ZERO
(&
rfds
);

104 
	`FD_SET
(
fd
, &
rfds
);

106 
ªtvÆ
 = 
	`£À˘
(
fd
+1, &
rfds
, 
NULL
, NULL, NULL);

108 i‡(
ªtvÆ
) {

110 
	`∆_ªcvmsgs_deÁu…
(
sock
);

115 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-neigh-add.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/√igh.h
>

14 
	~<√éök/˛i/lök.h
>

16 
	gquõt
 = 0;

18 
	$¥öt_ußge
()

20 
	`¥ötf
(

41 
	`exô
(0);

42 
	}
}

44 
	$maö
(
¨gc
, *
¨gv
[])

46 
∆_sock
 *
sock
;

47 
π∆_√igh
 *
√igh
;

48 
∆_ˇche
 *
lök_ˇche
;

49 
∆_dump_∑øms
 
dp
 = {

50 .
dp_ty≥
 = 
NL_DUMP_LINE
,

51 .
dp_fd
 = 
°dout
,

53 
îr
, 
ok
 = 0, 
∆Êags
 = 
NLM_F_REPLACE
 | 
NLM_F_CREATE
;

55 
sock
 = 
	`∆_˛i_Æloc_sockë
();

56 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

57 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

58 
√igh
 = 
	`∆_˛i_√igh_Æloc
();

61 
c
, 
›tidx
 = 0;

63 
ARG_UPDATE_ONLY
 = 257,

64 
ARG_CREATE_ONLY
 = 258,

65 
ARG_STATE
,

67 
›ti⁄
 
l⁄g_›ts
[] = {

68 { "upd©e-⁄ly", 0, 0, 
ARG_UPDATE_ONLY
 },

69 { "¸óã-⁄ly", 0, 0, 
ARG_CREATE_ONLY
 },

76 { "°©e", 1, 0, 
ARG_STATE
 },

80 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "qhva:l:d:", 
l⁄g_›ts
, &
›tidx
);

81 i‡(
c
 == -1)

84 
c
) {

85 
ARG_UPDATE_ONLY
: 
∆Êags
 &~
NLM_F_CREATE
; ;

86 
ARG_CREATE_ONLY
: 
∆Êags
 |
NLM_F_EXCL
; ;

87 'q': 
quõt
 = 1; ;

88 'h': 
	`¥öt_ußge
(); ;

89 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

90 'a': 
ok
++; 
	`∆_˛i_√igh_∑r£_d°
(
√igh
, 
›èrg
); ;

91 'l': 
	`∆_˛i_√igh_∑r£_Œaddr
(
√igh
, 
›èrg
); ;

92 'd': 
	`∆_˛i_√igh_∑r£_dev
(
√igh
, 
lök_ˇche
, 
›èrg
); ;

93 
ARG_STATE
: 
	`∆_˛i_√igh_∑r£_°©e
(
√igh
, 
›èrg
); ;

97 i‡(!
ok
)

98 
	`¥öt_ußge
();

100 i‡((
îr
 = 
	`π∆_√igh_add
(
sock
, 
√igh
, 
∆Êags
)) < 0)

101 
	`∆_˛i_Áèl
(
îr
, "UnableÅoáddÇeighbour: %s",

102 
	`∆_gëîr‹
(
îr
));

104 i‡(!
quõt
) {

105 
	`¥ötf
("Added ");

106 
	`∆_obje˘_dump
(
	`OBJ_CAST
(
√igh
), &
dp
);

110 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-neigh-delete.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/√igh.h
>

14 
	~<√éök/˛i/lök.h
>

16 
	gquõt
 = 0, 
	gdeÁu…_yes
 = 0, 
	gdñëed
 = 0, 
	göãø˘ive
 = 0;

17 
∆_sock
 *
	gsock
;

19 
	$¥öt_ußge
()

21 
	`¥ötf
(

39 
	`exô
(0);

40 
	}
}

42 
	$dñëe_cb
(
∆_obje˘
 *
obj
, *
¨g
)

44 
π∆_√igh
 *
√igh
 = 
	`∆_obje˘_¥iv
(
obj
);

45 
∆_dump_∑øms
 
∑øms
 = {

46 .
dp_ty≥
 = 
NL_DUMP_LINE
,

47 .
dp_fd
 = 
°dout
,

49 
îr
;

51 i‡(
öãø˘ive
 && !
	`∆_˛i_c⁄fúm
(
obj
, &
∑øms
, 
deÁu…_yes
))

54 i‡((
îr
 = 
	`π∆_√igh_dñëe
(
sock
, 
√igh
, 0)) < 0)

55 
	`∆_˛i_Áèl
(
îr
, "UnableÅo deleteÇeighbour: %s\n",

56 
	`∆_gëîr‹
(
îr
));

58 i‡(!
quõt
) {

59 
	`¥ötf
("Deleted ");

60 
	`∆_obje˘_dump
(
obj
, &
∑øms
);

63 
dñëed
++;

64 
	}
}

66 
	$maö
(
¨gc
, *
¨gv
[])

68 
π∆_√igh
 *
√igh
;

69 
∆_ˇche
 *
lök_ˇche
, *
√igh_ˇche
;

71 
sock
 = 
	`∆_˛i_Æloc_sockë
();

72 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

73 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

74 
√igh_ˇche
 = 
	`∆_˛i_√igh_Æloc_ˇche
(
sock
);

75 
√igh
 = 
	`∆_˛i_√igh_Æloc
();

78 
c
, 
›tidx
 = 0;

80 
ARG_FAMILY
 = 257,

81 
ARG_STATE
 = 258,

82 
ARG_YES
,

84 
›ti⁄
 
l⁄g_›ts
[] = {

86 { "yes", 0, 0, 
ARG_YES
 },

93 { "Ámûy", 1, 0, 
ARG_FAMILY
 },

94 { "°©e", 1, 0, 
ARG_STATE
 },

98 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "qhva:l:d:", 
l⁄g_›ts
, &
›tidx
);

99 i‡(
c
 == -1)

102 
c
) {

103 'i': 
öãø˘ive
 = 1; ;

104 
ARG_YES
: 
deÁu…_yes
 = 1; ;

105 'q': 
quõt
 = 1; ;

106 'h': 
	`¥öt_ußge
(); ;

107 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

108 'a': 
	`∆_˛i_√igh_∑r£_d°
(
√igh
, 
›èrg
); ;

109 'l': 
	`∆_˛i_√igh_∑r£_Œaddr
(
√igh
, 
›èrg
); ;

110 'd': 
	`∆_˛i_√igh_∑r£_dev
(
√igh
, 
lök_ˇche
, 
›èrg
); ;

111 
ARG_FAMILY
: 
	`∆_˛i_√igh_∑r£_Ámûy
(
√igh
, 
›èrg
); ;

112 
ARG_STATE
: 
	`∆_˛i_√igh_∑r£_°©e
(
√igh
, 
›èrg
); ;

116 
	`∆_ˇche_f‹óch_fûãr
(
√igh_ˇche
, 
	`OBJ_CAST
(
√igh
), 
dñëe_cb
, 
NULL
);

118 i‡(!
quõt
)

119 
	`¥ötf
("Dñëed %dÇeighbours\n", 
dñëed
);

122 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-neigh-list.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/√igh.h
>

14 
	~<√éök/˛i/lök.h
>

16 
	$¥öt_ußge
()

18 
	`¥ötf
(

33 
	`exô
(0);

34 
	}
}

36 
	$maö
(
¨gc
, *
¨gv
[])

38 
∆_sock
 *
sock
;

39 
π∆_√igh
 *
√igh
;

40 
∆_ˇche
 *
lök_ˇche
, *
√igh_ˇche
;

41 
∆_dump_∑øms
 
∑øms
 = {

42 .
dp_ty≥
 = 
NL_DUMP_LINE
,

43 .
dp_fd
 = 
°dout
,

46 
sock
 = 
	`∆_˛i_Æloc_sockë
();

47 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

48 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

49 
√igh_ˇche
 = 
	`∆_˛i_√igh_Æloc_ˇche
(
sock
);

50 
√igh
 = 
	`∆_˛i_√igh_Æloc
();

53 
c
, 
›tidx
 = 0;

55 
ARG_FAMILY
 = 257,

56 
ARG_STATE
 = 258,

58 
›ti⁄
 
l⁄g_›ts
[] = {

65 { "Ámûy", 1, 0, 
ARG_FAMILY
 },

66 { "°©e", 1, 0, 
ARG_STATE
 },

70 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "f:hva:l:d:", 
l⁄g_›ts
, &
›tidx
);

71 i‡(
c
 == -1)

74 
c
) {

75 'f': 
∑øms
.
dp_ty≥
 = 
	`∆_˛i_∑r£_dum±y≥
(
›èrg
); ;

76 'h': 
	`¥öt_ußge
(); ;

77 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

78 'a': 
	`∆_˛i_√igh_∑r£_d°
(
√igh
, 
›èrg
); ;

79 'l': 
	`∆_˛i_√igh_∑r£_Œaddr
(
√igh
, 
›èrg
); ;

80 'd': 
	`∆_˛i_√igh_∑r£_dev
(
√igh
, 
lök_ˇche
, 
›èrg
); ;

81 
ARG_FAMILY
: 
	`∆_˛i_√igh_∑r£_Ámûy
(
√igh
, 
›èrg
); ;

82 
ARG_STATE
: 
	`∆_˛i_√igh_∑r£_°©e
(
√igh
, 
›èrg
); ;

86 
	`∆_ˇche_dump_fûãr
(
√igh_ˇche
, &
∑øms
, 
	`OBJ_CAST
(
√igh
));

89 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-neightbl-list.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/lök.h
>

15 
	$¥öt_ußge
()

17 
	`¥ötf
(

25 
	`exô
(0);

26 
	}
}

28 
	$maö
(
¨gc
, *
¨gv
[])

30 
∆_sock
 *
sock
;

31 
∆_ˇche
 *
lök_ˇche
, *
√ightbl_ˇche
;

32 
∆_dump_∑øms
 
∑øms
 = {

33 .
dp_ty≥
 = 
NL_DUMP_LINE
,

34 .
dp_fd
 = 
°dout
,

37 
sock
 = 
	`∆_˛i_Æloc_sockë
();

38 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

39 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

40 
√ightbl_ˇche
 = 
	`∆_˛i_Æloc_ˇche
(
sock
, "neighbourÅable",

41 
π∆_√ightbl_Æloc_ˇche
);

44 
c
, 
›tidx
 = 0;

45 
›ti⁄
 
l⁄g_›ts
[] = {

52 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "f:hv", 
l⁄g_›ts
, &
›tidx
);

53 i‡(
c
 == -1)

56 
c
) {

57 'f': 
∑øms
.
dp_ty≥
 = 
	`∆_˛i_∑r£_dum±y≥
(
›èrg
); ;

58 'h': 
	`¥öt_ußge
(); ;

59 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

63 
	`∆_ˇche_dump
(
√ightbl_ˇche
, &
∑øms
);

66 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-pktloc-lookup.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/rouã/pkéoc.h
>

15 
	$¥öt_ußge
()

17 
	`¥ötf
(

32 
	`exô
(0);

33 
	}
}

35 c⁄° *
	gÆign_txt
[] = {

36 [
TCF_EM_ALIGN_U8
] = "u8",

37 [
TCF_EM_ALIGN_U16
] = "u16",

38 [
TCF_EM_ALIGN_U32
] = "u32"

41 
uöt32_t
 
	gÆign_mask
[] = {

42 [
TCF_EM_ALIGN_U8
] = 0xff,

43 [
TCF_EM_ALIGN_U16
] = 0xffff,

44 [
TCF_EM_ALIGN_U32
] = 0xffffffff,

47 c⁄° *
	gœyî_txt
[] = {

48 [
TCF_LAYER_LINK
] = "eth",

49 [
TCF_LAYER_NETWORK
] = "ip",

50 [
TCF_LAYER_TRANSPORT
] = "tcp"

53 
	$dump_u32_°yÀ
(
π∆_pkéoc
 *
loc
, 
uöt32_t
 
vÆue
)

55 i‡(
loc
->
Æign
 > 4)

56 
	`∆_˛i_Áèl
(
EINVAL
, "u32 only supportsálignments u8|u16|u32.");

58 i‡(
loc
->
œyî
 =
TCF_LAYER_LINK
)

59 
	`∆_˛i_Áèl
(
EINVAL
, "u32 doesÇot supportÜink "

62 i‡(
loc
->
shi·
 > 0)

63 
	`∆_˛i_Áèl
(
EINVAL
, "u32 doesÇot support shifting.");

65 
	`¥ötf
("%s %x %xát %s%u\n",

66 
Æign_txt
[
loc
->
Æign
],

67 
vÆue
, 
loc
->
mask
 ?Üoc->mask : 
Æign_mask
[loc->
Æign
],

68 
loc
->
œyî
 =
TCF_LAYER_TRANSPORT
 ? "nexthdr+" : "",

69 
loc
->
off£t
);

70 
	}
}

72 *
	$gë_Æign_txt
(
π∆_pkéoc
 *
loc
)

74 
buf
[16];

76 i‡(
loc
->
Æign
 <= 4)

77 
	`°r˝y
(
buf
, 
Æign_txt
[
loc
->
Æign
]);

79 
	`¢¥ötf
(
buf
, (buf), "%u", 
loc
->
Æign
);

81  
buf
;

82 
	}
}

84 
	$dump_loc
(
π∆_pkéoc
 *
loc
)

86 
	`¥ötf
("%s = %sát %s+%u & %#x >> %u\n",

87 
loc
->
«me
, 
	`gë_Æign_txt
÷oc), 
œyî_txt
[loc->
œyî
],

88 
loc
->
off£t
,Üoc->
mask
,Üoc->
shi·
);

89 
	}
}

91 
	$li°_cb
(
π∆_pkéoc
 *
loc
, *
¨g
)

93 
	`¥ötf
("%-26s %-5s %3s+%-4u %#-10x %-8u %u\n",

94 
loc
->
«me
, 
	`gë_Æign_txt
÷oc), 
œyî_txt
[loc->
œyî
],

95 
loc
->
off£t
,Üoc->
mask
,Üoc->
shi·
,Üoc->
ªf˙t
);

96 
	}
}

98 
	$do_li°
()

100 
	`¥ötf
(

102 
	`¥ötf
("---------------------------------------------------------\n");

104 
	`π∆_pkéoc_f‹óch
(&
li°_cb
, 
NULL
);

105 
	}
}

107 
	$maö
(
¨gc
, *
¨gv
[])

109 
π∆_pkéoc
 *
loc
;

110 
îr
, 
u°yÀ
 = 0;

111 
uöt32_t
 
uvÆue
 = 0;

114 
c
, 
›tidx
 = 0;

116 
ARG_U32
 = 257,

118 
›ti⁄
 
l⁄g_›ts
[] = {

122 { "u32", 1, 0, 
ARG_U32
 },

126 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hvl", 
l⁄g_›ts
, &
›tidx
);

127 i‡(
c
 == -1)

130 
c
) {

131 'h': 
	`¥öt_ußge
(); ;

132 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

133 'l': 
	`do_li°
(); 
	`exô
(0);

134 
ARG_U32
:

135 
u°yÀ
 = 1;

136 
uvÆue
 = 
	`∆_˛i_∑r£_u32
(
›èrg
);

141 i‡(
›töd
 >
¨gc
)

142 
	`¥öt_ußge
();

144 i‡((
îr
 = 
	`π∆_pkéoc_lookup
(
¨gv
[
›töd
++], &
loc
)) < 0)

145 
	`∆_˛i_Áèl
(
îr
, "UnableÅoÜookupÖacketÜocation: %s",

146 
	`∆_gëîr‹
(
îr
));

148 i‡(
u°yÀ
)

149 
	`dump_u32_°yÀ
(
loc
, 
uvÆue
);

151 
	`dump_loc
(
loc
);

154 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-qdisc-add.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/tc.h
>

14 
	~<√éök/˛i/qdisc.h
>

15 
	~<√éök/˛i/lök.h
>

17 
	~<√éök-¥iv©e/rouã/tc-≠i.h
>

19 
	gquõt
 = 0;

21 
	$¥öt_ußge
()

23 
	`¥ötf
(

45 
	`exô
(0);

46 
	}
}

48 
	$maö
(
¨gc
, *
¨gv
[])

50 
∆_sock
 *
sock
;

51 
π∆_qdisc
 *
qdisc
;

52 
π∆_tc
 *
tc
;

53 
∆_ˇche
 *
lök_ˇche
;

54 
∆_dump_∑øms
 
dp
 = {

55 .
dp_ty≥
 = 
NL_DUMP_DETAILS
,

56 .
dp_fd
 = 
°dout
,

58 
∆_˛i_tc_moduÀ
 *
tm
;

59 
π∆_tc_›s
 *
›s
;

60 
îr
, 
Êags
 = 
NLM_F_CREATE
 | 
NLM_F_EXCL
;

61 *
köd
, *
id
 = 
NULL
;

63 
sock
 = 
	`∆_˛i_Æloc_sockë
();

64 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

66 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

68 
qdisc
 = 
	`∆_˛i_qdisc_Æloc
();

69 
tc
 = (
π∆_tc
 *Ë
qdisc
;

72 
c
, 
›tidx
 = 0;

74 
ARG_REPLACE
 = 257,

75 
ARG_UPDATE
 = 258,

76 
ARG_REPLACE_ONLY
,

77 
ARG_UPDATE_ONLY
,

79 
›ti⁄
 
l⁄g_›ts
[] = {

86 { "ª∂a˚", 0, 0, 
ARG_REPLACE
 },

87 { "upd©e", 0, 0, 
ARG_UPDATE
 },

88 { "ª∂a˚-⁄ly", 0, 0, 
ARG_REPLACE_ONLY
 },

89 { "upd©e-⁄ly", 0, 0, 
ARG_UPDATE_ONLY
 },

93 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "+qhvd:p:i:",

94 
l⁄g_›ts
, &
›tidx
);

95 i‡(
c
 == -1)

98 
c
) {

99 'q': 
quõt
 = 1; ;

100 'h': 
	`¥öt_ußge
(); ;

101 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

102 'd': 
	`∆_˛i_tc_∑r£_dev
(
tc
, 
lök_ˇche
, 
›èrg
); ;

103 'p': 
	`∆_˛i_tc_∑r£_∑ª¡
(
tc
, 
›èrg
); ;

104 'i': 
id
 = 
	`°rdup
(
›èrg
); ;

105 
ARG_UPDATE
: 
Êags
 = 
NLM_F_CREATE
; ;

106 
ARG_REPLACE
: 
Êags
 = 
NLM_F_CREATE
 | 
NLM_F_REPLACE
; ;

107 
ARG_UPDATE_ONLY
: 
Êags
 = 0; ;

108 
ARG_REPLACE_ONLY
: 
Êags
 = 
NLM_F_REPLACE
; ;

112 i‡(
›töd
 >
¨gc
)

113 
	`¥öt_ußge
();

115 i‡(!
	`π∆_tc_gë_ifödex
(
tc
))

116 
	`∆_˛i_Áèl
(
EINVAL
, "You must specifyáÇetwork device (--dev=XXX)");

118 i‡(!
	`π∆_tc_gë_∑ª¡
(
tc
))

119 
	`∆_˛i_Áèl
(
EINVAL
, "You must specifyáÖarent");

121 i‡(
id
) {

122 
	`∆_˛i_tc_∑r£_h™dÀ
(
tc
, 
id
, 1);

123 
	`‰ì
(
id
);

126 
köd
 = 
¨gv
[
›töd
++];

127 
	`π∆_tc_£t_köd
(
tc
, 
köd
);

129 i‡(!(
›s
 = 
	`π∆_tc_gë_›s
(
tc
)))

130 
	`∆_˛i_Áèl
(
ENOENT
, "Unknow¿qdis¯\"%s\"", 
köd
);

132 i‡(!(
tm
 = 
	`∆_˛i_tc_lookup
(
›s
)))

133 
	`∆_˛i_Áèl
(
ENOTSUP
, "Qdis¯ty≥ \"%s\"ÇŸ suµ‹ãd.", 
köd
);

135 
tm
->
	`tm_∑r£_¨gv
(
tc
, 
¨gc
, 
¨gv
);

137 i‡(!
quõt
) {

138 
	`¥ötf
("Adding ");

139 
	`∆_obje˘_dump
(
	`OBJ_CAST
(
qdisc
), &
dp
);

142 i‡((
îr
 = 
	`π∆_qdisc_add
(
sock
, 
qdisc
, 
Êags
)) < 0)

143 
	`∆_˛i_Áèl
(
EINVAL
, "U«bÀÅÿadd qdisc: %s", 
	`∆_gëîr‹
(
îr
));

146 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-qdisc-delete.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/tc.h
>

14 
	~<√éök/˛i/qdisc.h
>

15 
	~<√éök/˛i/lök.h
>

17 
	gquõt
 = 0, 
	gdeÁu…_yes
 = 0, 
	gdñëed
 = 0, 
	göãø˘ive
 = 0;

18 
∆_sock
 *
	gsock
;

20 
	$¥öt_ußge
()

22 
	`¥ötf
(

38 
	`exô
(0);

39 
	}
}

41 
	$dñëe_cb
(
∆_obje˘
 *
obj
, *
¨g
)

43 
π∆_qdisc
 *
qdisc
 = 
	`∆_obje˘_¥iv
(
obj
);

44 
∆_dump_∑øms
 
∑øms
 = {

45 .
dp_ty≥
 = 
NL_DUMP_LINE
,

46 .
dp_fd
 = 
°dout
,

48 
îr
;

51 i‡(
	`π∆_tc_gë_h™dÀ
((
π∆_tc
 *Ë
qdisc
) == 0)

54 i‡(
öãø˘ive
 && !
	`∆_˛i_c⁄fúm
(
obj
, &
∑øms
, 
deÁu…_yes
))

57 i‡((
îr
 = 
	`π∆_qdisc_dñëe
(
sock
, 
qdisc
)) < 0)

58 
	`∆_˛i_Áèl
(
îr
, "U«bÀÅÿdñëêqdisc: %s\n", 
	`∆_gëîr‹
(err));

60 i‡(!
quõt
) {

61 
	`¥ötf
("Deleted ");

62 
	`∆_obje˘_dump
(
obj
, &
∑øms
);

65 
dñëed
++;

66 
	}
}

68 
	$maö
(
¨gc
, *
¨gv
[])

70 
π∆_qdisc
 *
qdisc
;

71 
π∆_tc
 *
tc
;

72 
∆_ˇche
 *
lök_ˇche
, *
qdisc_ˇche
;

73 
nfûãr
 = 0;

75 
sock
 = 
	`∆_˛i_Æloc_sockë
();

76 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

77 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

78 
qdisc_ˇche
 = 
	`∆_˛i_qdisc_Æloc_ˇche
(
sock
);

79 
qdisc
 = 
	`∆_˛i_qdisc_Æloc
();

80 
tc
 = (
π∆_tc
 *Ë
qdisc
;

83 
c
, 
›tidx
 = 0;

85 
ARG_YES
 = 257,

86 
ARG_INTERACTIVE
 = 258,

88 
›ti⁄
 
l⁄g_›ts
[] = {

89 { "öãø˘ive", 0, 0, 
ARG_INTERACTIVE
 },

90 { "yes", 0, 0, 
ARG_YES
 },

101 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "qhvd:p:i:k:", 
l⁄g_›ts
, &
›tidx
);

102 i‡(
c
 == -1)

105 
c
) {

106 '?': 
	`∆_˛i_Áèl
(
EINVAL
, "Invalid options");

107 
ARG_INTERACTIVE
: 
öãø˘ive
 = 1; ;

108 
ARG_YES
: 
deÁu…_yes
 = 1; ;

109 'q': 
quõt
 = 1; ;

110 'h': 
	`¥öt_ußge
(); ;

111 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

113 
nfûãr
++;

114 
	`∆_˛i_tc_∑r£_dev
(
tc
, 
lök_ˇche
, 
›èrg
);

117 
nfûãr
++;

118 
	`∆_˛i_tc_∑r£_∑ª¡
(
tc
, 
›èrg
);

121 
nfûãr
++;

122 
	`∆_˛i_tc_∑r£_h™dÀ
(
tc
, 
›èrg
, 0);

125 
nfûãr
++;

126 
	`∆_˛i_tc_∑r£_köd
(
tc
, 
›èrg
);

131 i‡(
nfûãr
 =0 && !
öãø˘ive
 && !
deÁu…_yes
) {

132 
	`∆_˛i_Áèl
(
EINVAL
,

138 
	`∆_ˇche_f‹óch_fûãr
(
qdisc_ˇche
, 
	`OBJ_CAST
(
qdisc
), 
dñëe_cb
, 
NULL
);

140 i‡(!
quõt
)

141 
	`¥ötf
("Dñëed %d qdiscs\n", 
dñëed
);

144 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-qdisc-list.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/tc.h
>

14 
	~<√éök/˛i/qdisc.h
>

15 
	~<√éök/˛i/˛ass.h
>

16 
	~<√éök/˛i/˛s.h
>

17 
	~<√éök/˛i/lök.h
>

19 
	#NUM_INDENT
 4

	)

21 
∆_sock
 *
	gsock
;

22 
	gªcursive
 = 0;

23 
∆_dump_∑øms
 
	g∑øms
 = {

24 .
dp_ty≥
 = 
NL_DUMP_LINE
,

27 
	$¥öt_ußge
()

29 
	`¥ötf
(

49 
	`exô
(0);

50 
	}
}

52 
li°_˛as£s
(
ifödex
, 
uöt32_t
 
∑ª¡
);

53 
li°_qdiscs
(
ifödex
, 
uöt32_t
 
∑ª¡
);

55 
	$li°_˛ass
(
∆_obje˘
 *
obj
, *
¨g
)

57 
π∆_tc
 *
tc
 = 
	`∆_obje˘_¥iv
(
obj
);

58 
	`∆_obje˘_dump
(
obj
, &
∑øms
);

60 
	`li°_˛as£s
(
	`π∆_tc_gë_ifödex
(
tc
), 
	`π∆_tc_gë_h™dÀ
(tc));

61 
	`li°_qdiscs
(
	`π∆_tc_gë_ifödex
(
tc
), 
	`π∆_tc_gë_h™dÀ
(tc));

62 
	}
}

64 
	$li°_˛as£s
(
ifödex
, 
uöt32_t
 
∑ª¡
)

66 
∆_ˇche
 *
˛ass_ˇche
;

67 
π∆_˛ass
 *
fûãr
 = 
	`∆_˛i_˛ass_Æloc
();

69 
˛ass_ˇche
 = 
	`∆_˛i_˛ass_Æloc_ˇche
(
sock
, 
ifödex
);

71 
	`π∆_tc_£t_∑ª¡
((
π∆_tc
 *Ë
fûãr
, 
∑ª¡
);

72 
∑øms
.
dp_¥efix
 +
NUM_INDENT
;

73 
	`∆_ˇche_f‹óch_fûãr
(
˛ass_ˇche
, 
	`OBJ_CAST
(
fûãr
), 
li°_˛ass
, 
NULL
);

74 
∑øms
.
dp_¥efix
 -
NUM_INDENT
;

76 
	`π∆_˛ass_put
(
fûãr
);

77 
	`∆_ˇche_‰ì
(
˛ass_ˇche
);

78 
	}
}

80 
	$li°_˛s
(
ifödex
, 
uöt32_t
 
∑ª¡
)

82 
∆_ˇche
 *
˛s_ˇche
;

84 
˛s_ˇche
 = 
	`∆_˛i_˛s_Æloc_ˇche
(
sock
, 
ifödex
, 
∑ª¡
);

86 
∑øms
.
dp_¥efix
 +
NUM_INDENT
;

87 
	`∆_ˇche_dump
(
˛s_ˇche
, &
∑øms
);

88 
∑øms
.
dp_¥efix
 -
NUM_INDENT
;

90 
	`∆_ˇche_‰ì
(
˛s_ˇche
);

91 
	}
}

93 
	$li°_qdisc
(
∆_obje˘
 *
obj
, *
¨g
)

95 
π∆_qdisc
 *
qdisc
 = 
	`∆_obje˘_¥iv
(
obj
);

96 
π∆_tc
 *
tc
 = (π∆_t¯*Ë
qdisc
;

98 
	`∆_obje˘_dump
(
obj
, &
∑øms
);

100 
	`li°_˛s
(
	`π∆_tc_gë_ifödex
(
tc
), 
	`π∆_tc_gë_h™dÀ
(tc));

102 i‡(
	`π∆_tc_gë_∑ª¡
(
tc
Ë=
TC_H_ROOT
) {

103 
	`li°_˛s
(
	`π∆_tc_gë_ifödex
(
tc
), 
TC_H_ROOT
);

104 
	`li°_˛as£s
(
	`π∆_tc_gë_ifödex
(
tc
), 
TC_H_ROOT
);

107 
	`li°_˛as£s
(
	`π∆_tc_gë_ifödex
(
tc
), 
	`π∆_tc_gë_h™dÀ
(tc));

108 
	}
}

110 
	$li°_qdiscs
(
ifödex
, 
uöt32_t
 
∑ª¡
)

112 
∆_ˇche
 *
qdisc_ˇche
;

113 
π∆_qdisc
 *
fûãr
 = 
	`∆_˛i_qdisc_Æloc
();

115 
qdisc_ˇche
 = 
	`∆_˛i_qdisc_Æloc_ˇche
(
sock
);

117 
	`π∆_tc_£t_ifödex
((
π∆_tc
 *Ë
fûãr
, 
ifödex
);

118 
	`π∆_tc_£t_∑ª¡
((
π∆_tc
 *Ë
fûãr
, 
∑ª¡
);

119 
∑øms
.
dp_¥efix
 +
NUM_INDENT
;

120 
	`∆_ˇche_f‹óch_fûãr
(
qdisc_ˇche
, 
	`OBJ_CAST
(
fûãr
), 
li°_qdisc
, 
NULL
);

121 
∑øms
.
dp_¥efix
 -
NUM_INDENT
;

123 
	`π∆_qdisc_put
(
fûãr
);

124 
	`∆_ˇche_‰ì
(
qdisc_ˇche
);

125 
	}
}

127 
	$maö
(
¨gc
, *
¨gv
[])

129 
π∆_qdisc
 *
qdisc
;

130 
π∆_tc
 *
tc
;

131 
∆_ˇche
 *
lök_ˇche
, *
qdisc_ˇche
;

133 
∑øms
.
dp_fd
 = 
°dout
;

134 
sock
 = 
	`∆_˛i_Æloc_sockë
();

135 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

136 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

137 
qdisc_ˇche
 = 
	`∆_˛i_qdisc_Æloc_ˇche
(
sock
);

138 
qdisc
 = 
	`∆_˛i_qdisc_Æloc
();

139 
tc
 = (
π∆_tc
 *Ë
qdisc
;

142 
c
, 
›tidx
 = 0;

144 
ARG_DETAILS
 = 257,

145 
ARG_STATS
 = 258,

147 
›ti⁄
 
l⁄g_›ts
[] = {

148 { "dëaûs", 0, 0, 
ARG_DETAILS
 },

149 { "°©s", 0, 0, 
ARG_STATS
 },

160 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "rhvd:p:i:k:", 
l⁄g_›ts
, &
›tidx
);

161 i‡(
c
 == -1)

164 
c
) {

165 
ARG_DETAILS
: 
∑øms
.
dp_ty≥
 = 
NL_DUMP_DETAILS
; ;

166 
ARG_STATS
: 
∑øms
.
dp_ty≥
 = 
NL_DUMP_STATS
; ;

167 'r': 
ªcursive
 = 1; ;

168 'h': 
	`¥öt_ußge
(); ;

169 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

170 'd': 
	`∆_˛i_tc_∑r£_dev
(
tc
, 
lök_ˇche
, 
›èrg
); ;

171 'p': 
	`∆_˛i_tc_∑r£_∑ª¡
(
tc
, 
›èrg
); ;

172 'i': 
	`∆_˛i_tc_∑r£_h™dÀ
(
tc
, 
›èrg
, 0); ;

173 'k': 
	`∆_˛i_tc_∑r£_köd
(
tc
, 
›èrg
); ;

177 i‡(
ªcursive
)

178 
	`∆_ˇche_f‹óch_fûãr
(
qdisc_ˇche
, 
	`OBJ_CAST
(
qdisc
), 
li°_qdisc
, 
NULL
);

180 
	`∆_ˇche_dump_fûãr
(
qdisc_ˇche
, &
∑øms
, 
	`OBJ_CAST
(
qdisc
));

183 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-route-add.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/rouã.h
>

14 
	~<√éök/˛i/lök.h
>

16 
	gquõt
 = 0;

17 
∆_ˇche
 *
	glök_ˇche
, *
	grouã_ˇche
;

19 
	$¥öt_ußge
()

21 
	`¥ötf
(

49 
	`exô
(0);

50 
	}
}

52 
	$maö
(
¨gc
, *
¨gv
[])

54 
∆_sock
 *
sock
;

55 
π∆_rouã
 *
rouã
;

56 
∆_dump_∑øms
 
dp
 = {

57 .
dp_ty≥
 = 
NL_DUMP_LINE
,

58 .
dp_fd
 = 
°dout
,

60 
îr
 = 1;

62 
sock
 = 
	`∆_˛i_Æloc_sockë
();

63 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

64 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

65 
rouã_ˇche
 = 
	`∆_˛i_rouã_Æloc_ˇche
(
sock
, 0);

66 
rouã
 = 
	`∆_˛i_rouã_Æloc
();

69 
c
, 
›tidx
 = 0;

71 
ARG_FAMILY
 = 257,

72 
ARG_SRC
 = 258,

73 
ARG_IIF
,

74 
ARG_PREF_SRC
,

75 
ARG_METRICS
,

76 
ARG_PRIORITY
,

77 
ARG_SCOPE
,

78 
ARG_PROTOCOL
,

79 
ARG_TYPE
,

81 
›ti⁄
 
l⁄g_›ts
[] = {

88 { "Ámûy", 1, 0, 
ARG_FAMILY
 },

89 { "§c", 1, 0, 
ARG_SRC
 },

90 { "iif", 1, 0, 
ARG_IIF
 },

91 { "¥ef-§c", 1, 0, 
ARG_PREF_SRC
 },

92 { "mërics", 1, 0, 
ARG_METRICS
 },

93 { "¥i‹ôy", 1, 0, 
ARG_PRIORITY
 },

94 { "sc›e", 1, 0, 
ARG_SCOPE
 },

95 { "¥Ÿocﬁ", 1, 0, 
ARG_PROTOCOL
 },

96 { "ty≥", 1, 0, 
ARG_TYPE
 },

100 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "qhvd:n:t:", 
l⁄g_›ts
, &
›tidx
);

101 i‡(
c
 == -1)

104 
c
) {

105 'q': 
quõt
 = 1; ;

106 'h': 
	`¥öt_ußge
(); ;

107 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

108 'd': 
	`∆_˛i_rouã_∑r£_d°
(
rouã
, 
›èrg
); ;

109 'n': 
	`∆_˛i_rouã_∑r£_√xth›
(
rouã
, 
›èrg
, 
lök_ˇche
); ;

110 't': 
	`∆_˛i_rouã_∑r£_èbÀ
(
rouã
, 
›èrg
); ;

111 
ARG_FAMILY
: 
	`∆_˛i_rouã_∑r£_Ámûy
(
rouã
, 
›èrg
); ;

112 
ARG_SRC
: 
	`∆_˛i_rouã_∑r£_§c
(
rouã
, 
›èrg
); ;

113 
ARG_IIF
: 
	`∆_˛i_rouã_∑r£_iif
(
rouã
, 
›èrg
, 
lök_ˇche
); ;

114 
ARG_PREF_SRC
: 
	`∆_˛i_rouã_∑r£_¥ef_§c
(
rouã
, 
›èrg
); ;

115 
ARG_METRICS
: 
	`∆_˛i_rouã_∑r£_mëric
(
rouã
, 
›èrg
); ;

116 
ARG_PRIORITY
: 
	`∆_˛i_rouã_∑r£_¥io
(
rouã
, 
›èrg
); ;

117 
ARG_SCOPE
: 
	`∆_˛i_rouã_∑r£_sc›e
(
rouã
, 
›èrg
); ;

118 
ARG_PROTOCOL
: 
	`∆_˛i_rouã_∑r£_¥Ÿocﬁ
(
rouã
, 
›èrg
); ;

119 
ARG_TYPE
: 
	`∆_˛i_rouã_∑r£_ty≥
(
rouã
, 
›èrg
); ;

123 i‡((
îr
 = 
	`π∆_rouã_add
(
sock
, 
rouã
, 
NLM_F_EXCL
)) < 0)

124 
	`∆_˛i_Áèl
(
îr
, "U«bÀÅÿaddÑouã: %s", 
	`∆_gëîr‹
(err));

126 i‡(!
quõt
) {

127 
	`¥ötf
("Added ");

128 
	`∆_obje˘_dump
(
	`OBJ_CAST
(
rouã
), &
dp
);

132 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-route-delete.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/rouã.h
>

14 
	~<√éök/˛i/lök.h
>

16 
	göãø˘ive
 = 0, 
	gdeÁu…_yes
 = 0, 
	gquõt
 = 0;

17 
	gdñëed
 = 0;

18 
∆_sock
 *
	gsock
;

20 
	$¥öt_vîsi⁄
()

22 
	`Ârötf
(
°dîr
, "%s\n", 
LIBNL_STRING
);

23 
	`exô
(0);

24 
	}
}

26 
	$¥öt_ußge
()

28 
	`¥ötf
(

58 
	`exô
(0);

59 
	}
}

61 
	$dñëe_cb
(
∆_obje˘
 *
obj
, *
¨g
)

63 
π∆_rouã
 *
rouã
 = (π∆_rouã *Ë
obj
;

64 
∆_dump_∑øms
 
∑øms
 = {

65 .
dp_ty≥
 = 
NL_DUMP_LINE
,

66 .
dp_fd
 = 
°dout
,

68 
îr
;

70 i‡(
öãø˘ive
 && !
	`∆_˛i_c⁄fúm
(
obj
, &
∑øms
, 
deÁu…_yes
))

73 i‡((
îr
 = 
	`π∆_rouã_dñëe
(
sock
, 
rouã
, 0)) < 0)

74 
	`∆_˛i_Áèl
(
îr
, "U«bÀÅÿdñëêrouã: %s", 
	`∆_gëîr‹
(err));

76 i‡(!
quõt
) {

77 
	`¥ötf
("Deleted ");

78 
	`∆_obje˘_dump
(
obj
, &
∑øms
);

81 
dñëed
++;

82 
	}
}

84 
	$maö
(
¨gc
, *
¨gv
[])

86 
∆_ˇche
 *
lök_ˇche
, *
rouã_ˇche
;

87 
π∆_rouã
 *
rouã
;

88 
nf
 = 0;

90 
sock
 = 
	`∆_˛i_Æloc_sockë
();

91 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

92 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

93 
rouã_ˇche
 = 
	`∆_˛i_rouã_Æloc_ˇche
(
sock
, 0);

94 
rouã
 = 
	`∆_˛i_rouã_Æloc
();

97 
c
, 
›tidx
 = 0;

99 
ARG_FAMILY
 = 257,

100 
ARG_SRC
 = 258,

101 
ARG_IIF
,

102 
ARG_PREF_SRC
,

103 
ARG_METRICS
,

104 
ARG_PRIORITY
,

105 
ARG_SCOPE
,

106 
ARG_PROTOCOL
,

107 
ARG_TYPE
,

108 
ARG_YES
,

110 
›ti⁄
 
l⁄g_›ts
[] = {

112 { "yes", 0, 0, 
ARG_YES
 },

119 { "Ámûy", 1, 0, 
ARG_FAMILY
 },

120 { "§c", 1, 0, 
ARG_SRC
 },

121 { "iif", 1, 0, 
ARG_IIF
 },

122 { "¥ef-§c", 1, 0, 
ARG_PREF_SRC
 },

123 { "mërics", 1, 0, 
ARG_METRICS
 },

124 { "¥i‹ôy", 1, 0, 
ARG_PRIORITY
 },

125 { "sc›e", 1, 0, 
ARG_SCOPE
 },

126 { "¥Ÿocﬁ", 1, 0, 
ARG_PROTOCOL
 },

127 { "ty≥", 1, 0, 
ARG_TYPE
 },

131 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "iqhvd:n:t:", 
l⁄g_›ts
, &
›tidx
);

132 i‡(
c
 == -1)

135 
c
) {

136 'i': 
öãø˘ive
 = 1; ;

137 
ARG_YES
: 
deÁu…_yes
 = 1; ;

138 'q': 
quõt
 = 1; ;

139 'h': 
	`¥öt_ußge
(); ;

140 'v': 
	`¥öt_vîsi⁄
(); ;

141 'd': 
nf
++; 
	`∆_˛i_rouã_∑r£_d°
(
rouã
, 
›èrg
); ;

142 'n': 
nf
++; 
	`∆_˛i_rouã_∑r£_√xth›
(
rouã
, 
›èrg
, 
lök_ˇche
); ;

143 't': 
nf
++; 
	`∆_˛i_rouã_∑r£_èbÀ
(
rouã
, 
›èrg
); ;

144 
ARG_FAMILY
: 
nf
++; 
	`∆_˛i_rouã_∑r£_Ámûy
(
rouã
, 
›èrg
); ;

145 
ARG_SRC
: 
nf
++; 
	`∆_˛i_rouã_∑r£_§c
(
rouã
, 
›èrg
); ;

146 
ARG_IIF
: 
nf
++; 
	`∆_˛i_rouã_∑r£_iif
(
rouã
, 
›èrg
, 
lök_ˇche
); ;

147 
ARG_PREF_SRC
: 
nf
++; 
	`∆_˛i_rouã_∑r£_¥ef_§c
(
rouã
, 
›èrg
); ;

148 
ARG_METRICS
: 
nf
++; 
	`∆_˛i_rouã_∑r£_mëric
(
rouã
, 
›èrg
); ;

149 
ARG_PRIORITY
: 
nf
++; 
	`∆_˛i_rouã_∑r£_¥io
(
rouã
, 
›èrg
); ;

150 
ARG_SCOPE
: 
nf
++; 
	`∆_˛i_rouã_∑r£_sc›e
(
rouã
, 
›èrg
); ;

151 
ARG_PROTOCOL
: 
nf
++; 
	`∆_˛i_rouã_∑r£_¥Ÿocﬁ
(
rouã
, 
›èrg
); ;

152 
ARG_TYPE
: 
nf
++; 
	`∆_˛i_rouã_∑r£_ty≥
(
rouã
, 
›èrg
); ;

156 i‡(
nf
 =0 && !
öãø˘ive
 && !
deÁu…_yes
) {

157 
	`Ârötf
(
°dîr
, "YouáttemptedÅo deleteállÑoutes in "

159 
	`exô
(0);

162 
	`∆_ˇche_f‹óch_fûãr
(
rouã_ˇche
, 
	`OBJ_CAST
(
rouã
), 
dñëe_cb
, 
NULL
);

164 i‡(!
quõt
)

165 
	`¥ötf
("Dñëed %dÑouãs\n", 
dñëed
);

168 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-route-get.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/rouã.h
>

14 
	~<√éök/˛i/lök.h
>

16 
	$¥öt_ußge
()

18 
	`¥ötf
("Usage:Çl-route-get <addr>\n");

19 
	`exô
(1);

20 
	}
}

22 
	$∑r£_cb
(
∆_obje˘
 *
obj
, *
¨g
)

25 
∆_dump_∑øms
 
∑øms
 = {

26 .
dp_fd
 = 
°dout
,

27 .
dp_ty≥
 = 
NL_DUMP_DETAILS
,

30 
	`∆_obje˘_dump
(
obj
, &
∑øms
);

31 
	}
}

33 
	$cb
(
∆_msg
 *
msg
, *
¨g
)

35 
îr
;

37 i‡((
îr
 = 
	`∆_msg_∑r£
(
msg
, &
∑r£_cb
, 
NULL
)) < 0)

38 
	`∆_˛i_Áèl
(
îr
, "U«bÀÅÿ∑r£ obje˘: %s", 
	`∆_gëîr‹
(err));

41 
	}
}

43 
	$maö
(
¨gc
, *
¨gv
[])

45 
∆_sock
 *
sock
;

46 
∆_ˇche
 *
lök_ˇche
, *
rouã_ˇche
;

47 
∆_addr
 *
d°
;

48 
îr
 = 1;

50 i‡(
¨gc
 < 2 || !
	`°rcmp
(
¨gv
[1], "-h"))

51 
	`¥öt_ußge
();

53 
sock
 = 
	`∆_˛i_Æloc_sockë
();

54 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

55 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

56 
rouã_ˇche
 = 
	`∆_˛i_rouã_Æloc_ˇche
(
sock
, 0);

58 
d°
 = 
	`∆_˛i_addr_∑r£
(
¨gv
[1], 
AF_INET
);

61 
∆_msg
 *
m
;

62 
πmsg
 
rmsg
 = {

63 .
πm_Ámûy
 = 
	`∆_addr_gë_Ámûy
(
d°
),

64 .
πm_d°_Àn
 = 
	`∆_addr_gë_¥efixÀn
(
d°
),

67 
m
 = 
	`∆msg_Æloc_sim∂e
(
RTM_GETROUTE
, 0);

68 i‡(!
m
)

69 
	`∆_˛i_Áèl
(
ENOMEM
, "out of memory");

70 i‡(
	`∆msg_≠≥nd
(
m
, &
rmsg
, ‘msg), 
NLMSG_ALIGNTO
) < 0)

71 
	`∆_˛i_Áèl
(
ENOMEM
, "out of memory");

72 i‡(
	`∆a_put_addr
(
m
, 
RTA_DST
, 
d°
) < 0)

73 
	`∆_˛i_Áèl
(
ENOMEM
, "out of memory");

75 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sock
, 
m
);

76 
	`∆msg_‰ì
(
m
);

77 i‡(
îr
 < 0)

78 
	`∆_˛i_Áèl
(
îr
, "%s", 
	`∆_gëîr‹
(err));

80 
	`∆_sockë_modify_cb
(
sock
, 
NL_CB_VALID
, 
NL_CB_CUSTOM
, 
cb
, 
NULL
);

82 i‡(
	`∆_ªcvmsgs_deÁu…
(
sock
) < 0)

83 
	`∆_˛i_Áèl
(
îr
, "%s", 
	`∆_gëîr‹
(err));

89 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-route-list.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/rouã.h
>

14 
	~<√éök/˛i/lök.h
>

16 
	$¥öt_ußge
()

18 
	`¥ötf
(

47 
	`exô
(0);

48 
	}
}

50 
	$maö
(
¨gc
, *
¨gv
[])

52 
∆_sock
 *
sock
;

53 
∆_ˇche
 *
lök_ˇche
, *
rouã_ˇche
;

54 
π∆_rouã
 *
rouã
;

55 
∆_dump_∑øms
 
∑øms
 = {

56 .
dp_fd
 = 
°dout
,

57 .
dp_ty≥
 = 
NL_DUMP_LINE
,

59 
¥öt_ˇche
 = 0;

61 
sock
 = 
	`∆_˛i_Æloc_sockë
();

62 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

63 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

64 
rouã
 = 
	`∆_˛i_rouã_Æloc
();

67 
c
, 
›tidx
 = 0;

69 
ARG_FAMILY
 = 257,

70 
ARG_SRC
 = 258,

71 
ARG_IIF
,

72 
ARG_PREF_SRC
,

73 
ARG_METRICS
,

74 
ARG_PRIORITY
,

75 
ARG_SCOPE
,

76 
ARG_PROTOCOL
,

77 
ARG_TYPE
,

79 
›ti⁄
 
l⁄g_›ts
[] = {

87 { "Ámûy", 1, 0, 
ARG_FAMILY
 },

88 { "§c", 1, 0, 
ARG_SRC
 },

89 { "iif", 1, 0, 
ARG_IIF
 },

90 { "¥ef-§c", 1, 0, 
ARG_PREF_SRC
 },

91 { "mërics", 1, 0, 
ARG_METRICS
 },

92 { "¥i‹ôy", 1, 0, 
ARG_PRIORITY
 },

93 { "sc›e", 1, 0, 
ARG_SCOPE
 },

94 { "¥Ÿocﬁ", 1, 0, 
ARG_PROTOCOL
 },

95 { "ty≥", 1, 0, 
ARG_TYPE
 },

99 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "cf:hvd:n:t:", 
l⁄g_›ts
, &
›tidx
);

100 i‡(
c
 == -1)

103 
c
) {

104 'c': 
¥öt_ˇche
 = 1; ;

105 'f': 
∑øms
.
dp_ty≥
 = 
	`∆_˛i_∑r£_dum±y≥
(
›èrg
); ;

106 'h': 
	`¥öt_ußge
(); ;

107 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

108 'd': 
	`∆_˛i_rouã_∑r£_d°
(
rouã
, 
›èrg
); ;

109 'n': 
	`∆_˛i_rouã_∑r£_√xth›
(
rouã
, 
›èrg
, 
lök_ˇche
); ;

110 't': 
	`∆_˛i_rouã_∑r£_èbÀ
(
rouã
, 
›èrg
); ;

111 
ARG_FAMILY
: 
	`∆_˛i_rouã_∑r£_Ámûy
(
rouã
, 
›èrg
); ;

112 
ARG_SRC
: 
	`∆_˛i_rouã_∑r£_§c
(
rouã
, 
›èrg
); ;

113 
ARG_IIF
: 
	`∆_˛i_rouã_∑r£_iif
(
rouã
, 
›èrg
, 
lök_ˇche
); ;

114 
ARG_PREF_SRC
: 
	`∆_˛i_rouã_∑r£_¥ef_§c
(
rouã
, 
›èrg
); ;

115 
ARG_METRICS
: 
	`∆_˛i_rouã_∑r£_mëric
(
rouã
, 
›èrg
); ;

116 
ARG_PRIORITY
: 
	`∆_˛i_rouã_∑r£_¥io
(
rouã
, 
›èrg
); ;

117 
ARG_SCOPE
: 
	`∆_˛i_rouã_∑r£_sc›e
(
rouã
, 
›èrg
); ;

118 
ARG_PROTOCOL
: 
	`∆_˛i_rouã_∑r£_¥Ÿocﬁ
(
rouã
, 
›èrg
); ;

119 
ARG_TYPE
: 
	`∆_˛i_rouã_∑r£_ty≥
(
rouã
, 
›èrg
); ;

123 
rouã_ˇche
 = 
	`∆_˛i_rouã_Æloc_ˇche
(
sock
,

124 
¥öt_ˇche
 ? 
ROUTE_CACHE_CONTENT
 : 0);

126 
	`∆_ˇche_dump_fûãr
(
rouã_ˇche
, &
∑øms
, 
	`OBJ_CAST
(
rouã
));

129 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-rule-list.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/ruÀ.h
>

14 
	~<√éök/˛i/lök.h
>

16 
	$¥öt_ußge
()

18 
	`¥ötf
(

30 
	`exô
(0);

31 
	}
}

33 
	$maö
(
¨gc
, *
¨gv
[])

35 
∆_sock
 *
sock
;

36 
π∆_ruÀ
 *
ruÀ
;

37 
∆_ˇche
 *
lök_ˇche
, *
ruÀ_ˇche
;

38 
∆_dump_∑øms
 
∑øms
 = {

39 .
dp_fd
 = 
°dout
,

40 .
dp_ty≥
 = 
NL_DUMP_LINE
,

43 
sock
 = 
	`∆_˛i_Æloc_sockë
();

44 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

45 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

46 
ruÀ_ˇche
 = 
	`∆_˛i_ruÀ_Æloc_ˇche
(
sock
);

47 
ruÀ
 = 
	`∆_˛i_ruÀ_Æloc
();

50 
c
, 
›tidx
 = 0;

52 
ARG_FAMILY
 = 257,

54 
›ti⁄
 
l⁄g_›ts
[] = {

58 { "Ámûy", 1, 0, 
ARG_FAMILY
 },

62 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "f:hv", 
l⁄g_›ts
, &
›tidx
);

63 i‡(
c
 == -1)

66 
c
) {

67 'f': 
∑øms
.
dp_ty≥
 = 
	`∆_˛i_∑r£_dum±y≥
(
›èrg
); ;

68 'h': 
	`¥öt_ußge
(); ;

69 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

70 
ARG_FAMILY
: 
	`∆_˛i_ruÀ_∑r£_Ámûy
(
ruÀ
, 
›èrg
); ;

74 
	`∆_ˇche_dump_fûãr
(
ruÀ_ˇche
, &
∑øms
, 
	`OBJ_CAST
(
ruÀ
));

77 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-tctree-list.c

12 
	~<√éök/˛i/utûs.h
>

13 
	~<√éök/˛i/lök.h
>

14 
	~<√éök/˛i/qdisc.h
>

15 
	~<√éök/˛i/˛ass.h
>

16 
	~<löux/pkt_sched.h
>

18 
∆_sock
 *
	gsock
;

19 
∆_ˇche
 *
	gqdisc_ˇche
, *
	g˛ass_ˇche
;

20 
∆_dump_∑øms
 
	g∑øms
 = {

21 .
dp_ty≥
 = 
NL_DUMP_DETAILS
,

24 
	gifödex
;

25 
¥öt_qdisc
(
∆_obje˘
 *, *);

26 
¥öt_tc_chûds
(
π∆_tc
 *, *);

28 
	$¥öt_ußge
()

30 
	`¥ötf
(

38 
	`exô
(0);

39 
	}
}

41 
	$¥öt_˛ass
(
∆_obje˘
 *
obj
, *
¨g
)

43 
π∆_qdisc
 *
Àaf
;

44 
π∆_˛ass
 *
˛ass
 = (π∆_˛as†*Ë
obj
;

45 
∆_ˇche
 *
˛s_ˇche
;

46 
uöt32_t
 
∑ª¡
 = 
	`π∆_tc_gë_h™dÀ
((
π∆_tc
 *Ë
˛ass
);

48 
∑øms
.
dp_¥efix
 = ()(Ë
¨g
;

49 
	`∆_obje˘_dump
(
obj
, &
∑øms
);

51 
Àaf
 = 
	`π∆_˛ass_Àaf_qdisc
(
˛ass
, 
qdisc_ˇche
);

52 i‡(
Àaf
)

53 
	`¥öt_qdisc
((
∆_obje˘
 *Ë
Àaf
, 
¨g
 + 2);

55 
	`¥öt_tc_chûds
(
	`TC_CAST
(
˛ass
), 
¨g
 + 2);

57 i‡(
	`π∆_˛s_Æloc_ˇche
(
sock
, 
ifödex
, 
∑ª¡
, &
˛s_ˇche
) < 0)

60 
∑øms
.
dp_¥efix
 = ()(Ë
¨g
 + 2;

61 
	`∆_ˇche_dump
(
˛s_ˇche
, &
∑øms
);

62 
	`∆_ˇche_‰ì
(
˛s_ˇche
);

63 
	}
}

65 
	$¥öt_tc_chûds
(
π∆_tc
 *
tc
, *
¨g
)

67 
π∆_˛ass
 *
fûãr
;

69 
fûãr
 = 
	`∆_˛i_˛ass_Æloc
();

71 
	`π∆_tc_£t_∑ª¡
(
	`TC_CAST
(
fûãr
), 
	`π∆_tc_gë_h™dÀ
(
tc
));

72 
	`π∆_tc_£t_ifödex
(
	`TC_CAST
(
fûãr
), 
	`π∆_tc_gë_ifödex
(
tc
));

74 
	`∆_ˇche_f‹óch_fûãr
(
˛ass_ˇche
, 
	`OBJ_CAST
(
fûãr
), &
¥öt_˛ass
, 
¨g
);

76 
	`π∆_˛ass_put
(
fûãr
);

77 
	}
}

79 
	$¥öt_qdisc
(
∆_obje˘
 *
obj
, *
¨g
)

81 
π∆_qdisc
 *
qdisc
 = (π∆_qdis¯*Ë
obj
;

82 
∆_ˇche
 *
˛s_ˇche
;

83 
uöt32_t
 
∑ª¡
 = 
	`π∆_tc_gë_h™dÀ
((
π∆_tc
 *Ë
qdisc
);

85 
∑øms
.
dp_¥efix
 = ()(Ë
¨g
;

86 
	`∆_obje˘_dump
(
obj
, &
∑øms
);

88 
	`¥öt_tc_chûds
(
	`TC_CAST
(
qdisc
), 
¨g
 + 2);

90 i‡(
	`π∆_˛s_Æloc_ˇche
(
sock
, 
ifödex
, 
∑ª¡
, &
˛s_ˇche
) < 0)

93 
∑øms
.
dp_¥efix
 = ()(Ë
¨g
 + 2;

94 
	`∆_ˇche_dump
(
˛s_ˇche
, &
∑øms
);

95 
	`∆_ˇche_‰ì
(
˛s_ˇche
);

96 
	}
}

98 
	$¥öt_lök
(
∆_obje˘
 *
obj
, *
¨g
)

100 
π∆_lök
 *
lök
 = (π∆_lök *Ë
obj
;

101 
π∆_qdisc
 *
qdisc
;

103 
ifödex
 = 
	`π∆_lök_gë_ifödex
(
lök
);

104 
∑øms
.
dp_¥efix
 = 0;

105 
	`∆_obje˘_dump
(
obj
, &
∑øms
);

107 i‡(
	`π∆_˛ass_Æloc_ˇche
(
sock
, 
ifödex
, &
˛ass_ˇche
) < 0)

110 
qdisc
 = 
	`π∆_qdisc_gë_by_∑ª¡
(
qdisc_ˇche
, 
ifödex
, 
TC_H_ROOT
);

111 i‡(
qdisc
) {

112 
	`¥öt_qdisc
((
∆_obje˘
 *Ë
qdisc
, (*) 2);

113 
	`π∆_qdisc_put
(
qdisc
);

116 
qdisc
 = 
	`π∆_qdisc_gë_by_∑ª¡
(
qdisc_ˇche
, 
ifödex
, 0);

117 i‡(
qdisc
) {

118 
	`¥öt_qdisc
((
∆_obje˘
 *Ë
qdisc
, (*) 2);

119 
	`π∆_qdisc_put
(
qdisc
);

122 
qdisc
 = 
	`π∆_qdisc_gë_by_∑ª¡
(
qdisc_ˇche
, 
ifödex
, 
TC_H_INGRESS
);

123 i‡(
qdisc
) {

124 
	`¥öt_qdisc
((
∆_obje˘
 *Ë
qdisc
, (*) 2);

125 
	`π∆_qdisc_put
(
qdisc
);

128 
	`∆_ˇche_‰ì
(
˛ass_ˇche
);

129 
	}
}

131 
	$maö
(
¨gc
, *
¨gv
[])

133 
∆_ˇche
 *
lök_ˇche
;

135 
sock
 = 
	`∆_˛i_Æloc_sockë
();

136 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_ROUTE
);

137 
lök_ˇche
 = 
	`∆_˛i_lök_Æloc_ˇche
(
sock
);

138 
qdisc_ˇche
 = 
	`∆_˛i_qdisc_Æloc_ˇche
(
sock
);

140 
∑øms
.
dp_fd
 = 
°dout
;

143 
c
, 
›tidx
 = 0;

144 
›ti⁄
 
l⁄g_›ts
[] = {

151 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "f:hv", 
l⁄g_›ts
, &
›tidx
);

152 i‡(
c
 == -1)

155 
c
) {

156 'f': 
∑øms
.
dp_ty≥
 = 
	`∆_˛i_∑r£_dum±y≥
(
›èrg
); ;

157 'h': 
	`¥öt_ußge
(); ;

158 'v': 
	`∆_˛i_¥öt_vîsi⁄
(); ;

162 
	`∆_ˇche_f‹óch
(
lök_ˇche
, &
¥öt_lök
, 
NULL
);

165 
	}
}

	@mylibnl/libnl-3.2.25/src/nl-util-addr.c

12 
	~<√éök/˛i/utûs.h
>

14 
	$maö
(
¨gc
, *
¨gv
[])

16 
îr
;

17 
ho°
[256];

18 
∆_addr
 *
a
;

20 i‡(
¨gc
 < 2) {

21 
	`Ârötf
(
°dîr
, "Usage:Çl-util-addr <address>\n");

25 
a
 = 
	`∆_˛i_addr_∑r£
(
¨gv
[1], 
AF_UNSPEC
);

26 
îr
 = 
	`∆_addr_ªsﬁve
(
a
, 
ho°
, (host));

27 i‡(
îr
 != 0)

28 
	`∆_˛i_Áèl
(
îr
, "UnableÅoÑesolveáddress \"%s\": %s",

29 
¨gv
[1], 
	`∆_gëîr‹
(
îr
));

31 
	`¥ötf
("%s\n", 
ho°
);

34 
	}
}

	@mylibnl/libnl-3.2.25/tests/check-addr.c

12 
	~<check.h
>

13 
	~<√éök/addr.h
>

15 
	$START_TEST
(
addr_Æloc
)

17 
∆_addr
 *
addr
;

19 
addr
 = 
	`∆_addr_Æloc
(16);

20 
	`Áû_if
(
addr
 =
NULL
,

23 
	`Áû_if
(
	`∆_addr_iszîo
(
addr
) == 0,

26 
	`Áû_if
(
	`∆_addr_gë_Ámûy
(
addr
Ë!
AF_UNSPEC
,

29 
	`Áû_if
(
	`∆_addr_gë_¥efixÀn
(
addr
) != 0,

32 
	`Áû_if
(
	`∆_addr_sh¨ed
(
addr
),

35 
	`Áû_if
(
	`∆_addr_gë
(
addr
) !=áddr,

38 
	`Áû_if
(
	`∆_addr_sh¨ed
(
addr
) == 0,

41 
	`∆_addr_put
(
addr
);

43 
	`Áû_if
(
	`∆_addr_sh¨ed
(
addr
),

46 
	`Áû_if
(
	`∆_addr_fûl_sockaddr
(
addr
, 
NULL
, 0) == 0,

49 
	`∆_addr_put
(
addr
);

50 
	}
}

51 
END_TEST


53 
	$START_TEST
(
addr_bö¨y_addr
)

55 
∆_addr
 *
addr
, *
addr2
;

56 
baddr
[4] = { 0x1, 0x2, 0x3, 0x4 };

57 
baddr2
[6] = { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6 };

59 
addr
 = 
	`∆_addr_Æloc
(4);

60 
	`Áû_if
(
addr
 =
NULL
,

63 
	`Áû_if
(
	`∆_addr_£t_bö¨y_addr
(
addr
, 
baddr
, 4) < 0,

66 
	`Áû_if
(
	`∆_addr_gë_¥efixÀn
(
addr
) != 0,

69 
	`Áû_if
(
	`∆_addr_gë_Àn
(
addr
) != 4,

72 
	`Áû_if
(
	`∆_addr_£t_bö¨y_addr
(
addr
, 
baddr2
, 6) == 0,

75 
	`Áû_if
(
	`∆_addr_gë_Àn
(
addr
) != 4,

78 
	`Áû_if
(
	`∆_addr_guess_Ámûy
(
addr
Ë!
AF_INET
,

81 
	`Áû_if
(
	`memcmp
(
baddr
, 
	`∆_addr_gë_bö¨y_addr
(
addr
), 4) != 0,

84 
addr2
 = 
	`∆_addr_buûd
(
AF_UNSPEC
, 
baddr
, 4);

85 
	`Áû_if
(
addr2
 =
NULL
,

88 
	`∆_addr_£t_¥efixÀn
(
addr
, 32);

89 
	`Áû_if
(
	`∆_addr_gë_¥efixÀn
(
addr
) != 32,

92 
	`Áû_if
(
	`∆_addr_cmp
(
addr
, 
addr2
),

95 
	`∆_addr_put
(
addr
);

96 
	`∆_addr_put
(
addr2
);

97 
	}
}

98 
END_TEST


100 
	$START_TEST
(
addr_∑r£4
)

102 
∆_addr
 *
addr4
, *
˛⁄e
;

103 
sockaddr_ö
 
sö
;

104 
sockÀn_t
 
Àn
 = (
sö
);

105 *
addr_°r
 = "10.0.0.1/16";

106 
buf
[128];

108 
	`Áû_if
(
	`∆_addr_∑r£
(
addr_°r
, 
AF_INET6
, &
addr4
) == 0,

111 
	`Áû_if
(
	`∆_addr_∑r£
(
addr_°r
, 
AF_UNSPEC
, &
addr4
) != 0,

112 "Should bêabÀÅÿ∑r£ \"%s\"", 
addr_°r
);

114 
	`Áû_if
(
	`∆_addr_gë_Ámûy
(
addr4
Ë!
AF_INET
,

117 
	`Áû_if
(
	`∆_addr_gë_¥efixÀn
(
addr4
) != 16,

120 
	`Áû_if
(
	`∆_addr_iszîo
(
addr4
),

123 
˛⁄e
 = 
	`∆_addr_˛⁄e
(
addr4
);

124 
	`Áû_if
(
˛⁄e
 =
NULL
,

127 
	`Áû_if
(
	`∆_addr_cmp
(
addr4
, 
˛⁄e
) != 0,

130 
	`Áû_if
(
	`∆_addr_fûl_sockaddr
(
addr4
, (
sockaddr
 *Ë&
sö
, &
Àn
) != 0,

133 
	`Áû_if
(
	`°rcmp
(
	`∆_addr2°r
(
addr4
, 
buf
, (buf)), 
addr_°r
),

136 
	`∆_addr_put
(
addr4
);

137 
	`∆_addr_put
(
˛⁄e
);

138 
	}
}

139 
END_TEST


141 
	$START_TEST
(
addr_∑r£6
)

143 
∆_addr
 *
addr6
, *
˛⁄e
;

144 
sockaddr_ö6
 
sö
;

145 
sockÀn_t
 
Àn
 = (
sö
);

146 *
addr_°r
 = "2001:1:2::3/64";

147 
buf
[128];

149 
	`Áû_if
(
	`∆_addr_∑r£
(
addr_°r
, 
AF_INET
, &
addr6
) == 0,

152 
	`Áû_if
(
	`∆_addr_∑r£
(
addr_°r
, 
AF_UNSPEC
, &
addr6
) != 0,

153 "Should bêabÀÅÿ∑r£ \"%s\"", 
addr_°r
);

155 
	`Áû_if
(
	`∆_addr_gë_Ámûy
(
addr6
Ë!
AF_INET6
,

158 
	`Áû_if
(
	`∆_addr_gë_¥efixÀn
(
addr6
) != 64,

161 
	`Áû_if
(
	`∆_addr_iszîo
(
addr6
),

164 
˛⁄e
 = 
	`∆_addr_˛⁄e
(
addr6
);

165 
	`Áû_if
(
˛⁄e
 =
NULL
,

168 
	`Áû_if
(
	`∆_addr_cmp
(
addr6
, 
˛⁄e
) != 0,

171 
	`Áû_if
(
	`∆_addr_fûl_sockaddr
(
addr6
, (
sockaddr
 *Ë&
sö
, &
Àn
) != 0,

174 
	`Áû_if
(
	`°rcmp
(
	`∆_addr2°r
(
addr6
, 
buf
, (buf)), 
addr_°r
),

177 
	`∆_addr_put
(
addr6
);

178 
	`∆_addr_put
(
˛⁄e
);

179 
	}
}

180 
END_TEST


182 
	$START_TEST
(
addr_öfo
)

184 
∆_addr
 *
addr
;

185 *
addr_°r
 = "127.0.0.1";

186 
addröfo
 *
ªsu…
;

188 
	`Áû_if
(
	`∆_addr_∑r£
(
addr_°r
, 
AF_UNSPEC
, &
addr
) != 0,

191 
	`Áû_if
(
	`∆_addr_öfo
(
addr
, &
ªsu…
) != 0,

194 
	`‰ìaddröfo
(
ªsu…
);

195 
	`∆_addr_put
(
addr
);

196 
	}
}

197 
END_TEST


199 
Suôe
 *
	$make_∆_addr_suôe
()

201 
Suôe
 *
suôe
 = 
	`suôe_¸óã
("Abstractáddresses");

203 
TCa£
 *
tc_addr
 = 
	`tˇ£_¸óã
("Core");

204 
	`tˇ£_add_ã°
(
tc_addr
, 
addr_Æloc
);

205 
	`tˇ£_add_ã°
(
tc_addr
, 
addr_bö¨y_addr
);

206 
	`tˇ£_add_ã°
(
tc_addr
, 
addr_∑r£4
);

207 
	`tˇ£_add_ã°
(
tc_addr
, 
addr_∑r£6
);

208 
	`tˇ£_add_ã°
(
tc_addr
, 
addr_öfo
);

209 
	`suôe_add_tˇ£
(
suôe
, 
tc_addr
);

211  
suôe
;

212 
	}
}

	@mylibnl/libnl-3.2.25/tests/check-all.c

12 
	~<check.h
>

14 
Suôe
 *
make_∆_addr_suôe
();

15 
Suôe
 *
make_∆_©å_suôe
();

17 
Suôe
 *
	$maö_suôe
()

19 
Suôe
 *
suôe
 = 
	`suôe_¸óã
("main");

21  
suôe
;

22 
	}
}

24 
	$maö
(
¨gc
, *
¨gv
[])

26 
SRu¬î
 *
ru¬î
;

27 
nÁûed
;

29 
ru¬î
 = 
	`§u¬î_¸óã
(
	`maö_suôe
());

33 
	`§u¬î_add_suôe
(
ru¬î
, 
	`make_∆_addr_suôe
());

34 
	`§u¬î_add_suôe
(
ru¬î
, 
	`make_∆_©å_suôe
());

38 
	`§u¬î_run_Æl
(
ru¬î
, 
CK_ENV
);

40 
nÁûed
 = 
	`§u¬î_¡e°s_Áûed
(
ru¬î
);

41 
	`§u¬î_‰ì
(
ru¬î
);

43  
nÁûed
 != 0;

44 
	}
}

	@mylibnl/libnl-3.2.25/tests/check-attr.c

12 
	~"utû.h
"

13 
	~<√éök/©å.h
>

14 
	~<√éök/msg.h
>

16 
	$START_TEST
(
©å_size
)

18 
	`Áû_if
(
	`∆a_©å_size
(0Ë!
NLA_HDRLEN
,

20 
	`Áû_if
(
	`∆a_©å_size
(1Ë!
NLA_HDRLEN
 + 1,

22 
	`Áû_if
(
	`∆a_©å_size
(2Ë!
NLA_HDRLEN
 + 2,

24 
	`Áû_if
(
	`∆a_©å_size
(3Ë!
NLA_HDRLEN
 + 3,

26 
	`Áû_if
(
	`∆a_©å_size
(4Ë!
NLA_HDRLEN
 + 4,

29 
	`Áû_if
(
	`∆a_tŸÆ_size
(1Ë!
NLA_HDRLEN
 + 4,

31 
	`Áû_if
(
	`∆a_tŸÆ_size
(2Ë!
NLA_HDRLEN
 + 4,

33 
	`Áû_if
(
	`∆a_tŸÆ_size
(3Ë!
NLA_HDRLEN
 + 4,

35 
	`Áû_if
(
	`∆a_tŸÆ_size
(4Ë!
NLA_HDRLEN
 + 4,

38 
	`Áû_if
(
	`∆a_∑dÀn
(1) != 3,

40 
	`Áû_if
(
	`∆a_∑dÀn
(2) != 2,

42 
	`Áû_if
(
	`∆a_∑dÀn
(3) != 1,

44 
	`Áû_if
(
	`∆a_∑dÀn
(4) != 0,

46 
	`Áû_if
(
	`∆a_∑dÀn
(5) != 3,

48 
	}
}

49 
END_TEST


51 
	$START_TEST
(
msg_c⁄°ru˘
)

53 
∆_msg
 *
msg
;

54 
∆msghdr
 *
∆h
;

55 
∆©å
 *
a
;

56 
i
, 
ªm
;

58 
msg
 = 
	`∆msg_Æloc
();

59 
	`Áû_if
(!
msg
, "UnableÅoállocateÇetlink message");

61 
i
 = 1; i < 256; i++) {

62 
	`Áû_if
(
	`∆a_put_u32
(
msg
, 
i
, i+1) != 0,

63 "U«bÀÅÿaddáâribuã %d", 
i
);

66 
∆h
 = 
	`∆msg_hdr
(
msg
);

67 
i
 = 1;

68 
	`∆msg_f‹_óch_©å
(
a
, 
∆h
, 0, 
ªm
) {

69 
	`Áû_if
(
	`∆a_ty≥
(
a
Ë!
i
, "Expectedáttribute %d", i);

70 
i
++;

71 
	`Áû_if
(
	`∆a_gë_u32
(
a
Ë!
i
, "Expectedáttribute value %d", i);

74 
	`∆msg_‰ì
(
msg
);

75 
	}
}

76 
END_TEST


78 
Suôe
 *
	$make_∆_©å_suôe
()

80 
Suôe
 *
suôe
 = 
	`suôe_¸óã
("Netlinkáttributes");

82 
TCa£
 *
∆_©å
 = 
	`tˇ£_¸óã
("Core");

83 
	`tˇ£_add_ã°
(
∆_©å
, 
©å_size
);

84 
	`tˇ£_add_ã°
(
∆_©å
, 
msg_c⁄°ru˘
);

85 
	`suôe_add_tˇ£
(
suôe
, 
∆_©å
);

87  
suôe
;

88 
	}
}

	@mylibnl/libnl-3.2.25/tests/test-cache-mngr.c

1 
	~<√éök/√éök.h
>

2 
	~<√éök/ˇche.h
>

3 
	~<√éök/˛i/utûs.h
>

4 
	~<sig«l.h
>

6 
	~<√éök-¥iv©e/ˇche-≠i.h
>

8 
	gquô
 = 0;

10 
∆_dump_∑øms
 
	gdp
 = {

11 .
dp_ty≥
 = 
NL_DUMP_LINE
,

15 
	$ch™ge_cb
(
∆_ˇche
 *
ˇche
, 
∆_obje˘
 *
obj
,

16 
a˘i⁄
, *
d©a
)

18 i‡(
a˘i⁄
 =
NL_ACT_NEW
)

19 
	`¥ötf
("NEW ");

20 i‡(
a˘i⁄
 =
NL_ACT_DEL
)

21 
	`¥ötf
("DEL ");

22 i‡(
a˘i⁄
 =
NL_ACT_CHANGE
)

23 
	`¥ötf
("CHANGE ");

25 
	`∆_obje˘_dump
(
obj
, &
dp
);

26 
	}
}

28 
	$sigöt
(
¨g
)

30 
quô
 = 1;

31 
	}
}

33 
	$maö
(
¨gc
, *
¨gv
[])

35 
∆_ˇche_mngr
 *
mngr
;

36 
∆_ˇche
 *
ˇche
;

37 
îr
, 
i
;

39 
dp
.
dp_fd
 = 
°dout
;

41 
	`sig«l
(
SIGINT
, 
sigöt
);

43 
îr
 = 
	`∆_ˇche_mngr_Æloc
(
NULL
, 
NETLINK_ROUTE
, 
NL_AUTO_PROVIDE
, &
mngr
);

44 i‡(
îr
 < 0)

45 
	`∆_˛i_Áèl
(
îr
, "UnableÅoállocate cache manager: %s",

46 
	`∆_gëîr‹
(
îr
));

48 
i
 = 1; i < 
¨gc
; i++) {

49 
îr
 = 
	`∆_ˇche_mngr_add
(
mngr
, 
¨gv
[
i
], &
ch™ge_cb
, 
NULL
, &
ˇche
);

50 i‡(
îr
 < 0)

51 
	`∆_˛i_Áèl
(
îr
, "UnableÅoádd cache %s: %s",

52 
¨gv
[
i
], 
	`∆_gëîr‹
(
îr
));

55 !
quô
) {

56 
îr
 = 
	`∆_ˇche_mngr_pﬁl
(
mngr
, 1000);

57 i‡(
îr
 < 0 &&Éº !-
NLE_INTR
)

58 
	`∆_˛i_Áèl
(
îr
, "Pﬁlög faûed: %s", 
	`∆_gëîr‹
(err));

60 
	`∆_ˇche_mngr_öfo
(
mngr
, &
dp
);

63 
	`∆_ˇche_mngr_‰ì
(
mngr
);

66 
	}
}

	@mylibnl/libnl-3.2.25/tests/test-complex-HTB-with-hash-filters.c

12 
	~<√éök/rouã/lök.h
>

13 
	~<√éök/rouã/tc.h
>

14 
	~<√éök/rouã/qdisc.h
>

15 
	~<√éök/rouã/qdisc/htb.h
>

16 
	~<√éök/rouã/qdisc/sfq.h
>

17 
	~<√éök/rouã/˛s/u32.h
>

18 
	~<√éök/rouã/˛assifõr.h
>

19 
	~<√éök/rouã/˛ass.h
>

20 
	~<löux/if_ëhî.h
>

22 
	~<√éök/©å.h
>

25 
	~<°dio.h
>

26 
	~<°rög.h
>

29 
	#TC_HANDLE
(
maj
, 
mö
Ë(
	`TC_H_MAJ
((majË<< 16Ë| 
	`TC_H_MIN
(mö))

	)

32 
	$gë_u32
(
__u32
 *
vÆ
, c⁄° *
¨g
, 
ba£
)

34 
ªs
;

35 *
±r
;

37 i‡(!
¨g
 || !*arg)

39 
ªs
 = 
	`°πoul
(
¨g
, &
±r
, 
ba£
);

40 i‡(!
±r
 ||Öå =
¨g
 || *±∏|| 
ªs
 > 0xFFFFFFFFUL)

42 *
vÆ
 = 
ªs
;

44 
	}
}

46 
	$gë_u32_h™dÀ
(
__u32
 *
h™dÀ
, c⁄° *
°r
)

48 
__u32
 
htid
=0, 
hash
=0, 
nodeid
=0;

49 *
tmp
 = 
	`°rchr
(
°r
, ':');

51 i‡(
tmp
 =
NULL
) {

52 i‡(
	`memcmp
("0x", 
°r
, 2) == 0)

53  
	`gë_u32
(
h™dÀ
, 
°r
, 16);

56 
htid
 = 
	`°πoul
(
°r
, &
tmp
, 16);

57 i‡(
tmp
 =
°r
 && *str != ':' && *str != 0)

59 i‡(
htid
>=0x1000)

61 i‡(*
tmp
) {

62 
°r
 = 
tmp
+1;

63 
hash
 = 
	`°πoul
(
°r
, &
tmp
, 16);

64 i‡(
tmp
 =
°r
 && *str != ':' && *str != 0)

66 i‡(
hash
>=0x100)

68 i‡(*
tmp
) {

69 
°r
 = 
tmp
+1;

70 
nodeid
 = 
	`°πoul
(
°r
, &
tmp
, 16);

71 i‡(
tmp
 =
°r
 && *str != 0)

73 i‡(
nodeid
>=0x1000)

77 *
h™dÀ
 = (
htid
<<20)|(
hash
<<12)|
nodeid
;

79 
	}
}

81 
uöt32_t
 
	$gë_u32_∑r£_h™dÀ
(c⁄° *
cH™dÀ
)

83 
uöt32_t
 
h™dÀ
=0;

85 if(
	`gë_u32_h™dÀ
(&
h™dÀ
, 
cH™dÀ
)) {

86 
	`¥ötf
 ("Illegal \"ht\"\n");

90 i‡(
h™dÀ
 && 
	`TC_U32_NODE
(handle)) {

91 
	`¥ötf
("\"link\" must beá hashÅable.\n");

94  
h™dÀ
;

95 
	}
}

97 
	$gë_tc_˛assid
(
__u32
 *
h
, c⁄° *
°r
)

99 
__u32
 
maj
, 
mö
;

100 *
p
;

102 
maj
 = 
TC_H_ROOT
;

103 i‡(
	`°rcmp
(
°r
, "root") == 0)

104 
ok
;

105 
maj
 = 
TC_H_UNSPEC
;

106 i‡(
	`°rcmp
(
°r
, "none") == 0)

107 
ok
;

108 
maj
 = 
	`°πoul
(
°r
, &
p
, 16);

109 i‡(
p
 =
°r
) {

110 
maj
 = 0;

111 i‡(*
p
 != ':')

114 i‡(*
p
 == ':') {

115 i‡(
maj
 >= (1<<16))

117 
maj
 <<= 16;

118 
°r
 = 
p
+1;

119 
mö
 = 
	`°πoul
(
°r
, &
p
, 16);

120 i‡(*
p
 != 0)

122 i‡(
mö
 >= (1<<16))

124 
maj
 |
mö
;

125 } i‡(*
p
 != 0)

128 
ok
:

129 *
h
 = 
maj
;

131 
	}
}

137 
	$u32_add_fûãr_⁄_ht
(
∆_sock
 *
sock
, 
π∆_lök
 *
π∆Lök
, 
uöt32_t
 
¥io
,

138 
uöt32_t
 
keyvÆ
, uöt32_à
keymask
, 
keyoff
, 
keyoffmask
,

139 
uöt32_t
 
htid
, uöt32_à
˛assid


142 
π∆_˛s
 *
˛s
;

143 
îr
;

148 
˛s
=
	`π∆_˛s_Æloc
();

149 i‡(!(
˛s
)) {

150 
	`¥ötf
("CanÇotállocate classifier\n");

151 
	`∆_sockë_‰ì
(
sock
);

152 
	`exô
(1);

155 
	`π∆_tc_£t_lök
(
	`TC_CAST
(
˛s
), 
π∆Lök
);

157 i‡((
îr
 = 
	`π∆_tc_£t_köd
(
	`TC_CAST
(
˛s
), "u32"))) {

158 
	`¥ötf
("CanÇot set classifierás u32\n");

162 
	`π∆_˛s_£t_¥io
(
˛s
, 
¥io
);

163 
	`π∆_˛s_£t_¥Ÿocﬁ
(
˛s
, 
ETH_P_IP
);

165 
	`π∆_tc_£t_∑ª¡
(
	`TC_CAST
(
˛s
), 
	`TC_HANDLE
(1, 0));

167 
	`π∆_u32_£t_hashèbÀ
(
˛s
, 
htid
);

169 
	`π∆_u32_add_key_uöt32
(
˛s
, 
keyvÆ
, 
keymask
, 
keyoff
, 
keyoffmask
);

171 
	`π∆_u32_£t_˛assid
(
˛s
, 
˛assid
);

173 
	`π∆_u32_£t_˛s_ãrmöÆ
(
˛s
);

175 i‡((
îr
 = 
	`π∆_˛s_add
(
sock
, 
˛s
, 
NLM_F_CREATE
))) {

176 
	`¥ötf
("C™ÇŸádd cœssifõr: %s\n", 
	`∆_gëîr‹
(
îr
));

179 
	`π∆_˛s_put
(
˛s
);

182 
	}
}

189 
	$u32_add_fûãr_⁄_ht_wôh_hashmask
(
∆_sock
 *
sock
, 
π∆_lök
 *
π∆Lök
, 
uöt32_t
 
¥io
,

190 
uöt32_t
 
keyvÆ
, uöt32_à
keymask
, 
keyoff
, 
keyoffmask
,

191 
uöt32_t
 
htid
, uöt32_à
héök
, uöt32_à
hmask
, uöt32_à
hoff£t


194 
π∆_˛s
 *
˛s
;

195 
îr
;

200 
˛s
=
	`π∆_˛s_Æloc
();

201 i‡(!(
˛s
)) {

202 
	`¥ötf
("CanÇotállocate classifier\n");

203 
	`∆_sockë_‰ì
(
sock
);

204 
	`exô
(1);

207 
	`π∆_tc_£t_lök
(
	`TC_CAST
(
˛s
), 
π∆Lök
);

209 i‡((
îr
 = 
	`π∆_tc_£t_köd
(
	`TC_CAST
(
˛s
), "u32"))) {

210 
	`¥ötf
("CanÇot set classifierás u32\n");

214 
	`π∆_˛s_£t_¥io
(
˛s
, 
¥io
);

215 
	`π∆_˛s_£t_¥Ÿocﬁ
(
˛s
, 
ETH_P_IP
);

217 
	`π∆_tc_£t_∑ª¡
(
	`TC_CAST
(
˛s
), 
	`TC_HANDLE
(1, 0));

219 i‡(
htid
)

220 
	`π∆_u32_£t_hashèbÀ
(
˛s
, 
htid
);

222 
	`π∆_u32_add_key_uöt32
(
˛s
, 
keyvÆ
, 
keymask
, 
keyoff
, 
keyoffmask
);

224 
	`π∆_u32_£t_hashmask
(
˛s
, 
hmask
, 
hoff£t
);

226 
	`π∆_u32_£t_lök
(
˛s
, 
héök
);

229 i‡((
îr
 = 
	`π∆_˛s_add
(
sock
, 
˛s
, 
NLM_F_CREATE
))) {

230 
	`¥ötf
("C™ÇŸádd cœssifõr: %s\n", 
	`∆_gëîr‹
(
îr
));

233 
	`π∆_˛s_put
(
˛s
);

235 
	}
}

240 
	$u32_add_ht
(
∆_sock
 *
sock
, 
π∆_lök
 *
π∆Lök
, 
uöt32_t
 
¥io
, uöt32_à
htid
, uöt32_à
divis‹
)

243 
îr
;

244 
π∆_˛s
 *
˛s
;

246 
˛s
=
	`π∆_˛s_Æloc
();

247 i‡(!(
˛s
)) {

248 
	`¥ötf
("CanÇotállocate classifier\n");

249 
	`∆_sockë_‰ì
(
sock
);

250 
	`exô
(1);

253 
	`π∆_tc_£t_lök
(
	`TC_CAST
(
˛s
), 
π∆Lök
);

255 i‡((
îr
 = 
	`π∆_tc_£t_köd
(
	`TC_CAST
(
˛s
), "u32"))) {

256 
	`¥ötf
("CanÇot set classifierás u32\n");

260 
	`π∆_˛s_£t_¥io
(
˛s
, 
¥io
);

261 
	`π∆_˛s_£t_¥Ÿocﬁ
(
˛s
, 
ETH_P_IP
);

262 
	`π∆_tc_£t_∑ª¡
(
	`TC_CAST
(
˛s
), 
	`TC_HANDLE
(1, 0));

264 
	`π∆_u32_£t_h™dÀ
(
˛s
, 
htid
, 0x0, 0x0);

266 
	`π∆_u32_£t_divis‹
(
˛s
, 
divis‹
);

268 i‡((
îr
 = 
	`π∆_˛s_add
(
sock
, 
˛s
, 
NLM_F_CREATE
))) {

269 
	`¥ötf
("C™ÇŸádd cœssifõr: %s\n", 
	`∆_gëîr‹
(
îr
));

272 
	`π∆_˛s_put
(
˛s
);

274 
	}
}

279 
	$qdisc_add_HTB
(
∆_sock
 *
sock
, 
π∆_lök
 *
π∆Lök
, 
uöt32_t
 
deÁu…Cœss
)

282 
π∆_qdisc
 *
qdisc
;

283 
îr
;

286 i‡(!(
qdisc
 = 
	`π∆_qdisc_Æloc
())) {

287 
	`¥ötf
("CanÇotállocate Qdisc\n");

292 
	`π∆_tc_£t_lök
(
	`TC_CAST
(
qdisc
), 
π∆Lök
);

293 
	`π∆_tc_£t_∑ª¡
(
	`TC_CAST
(
qdisc
), 
TC_H_ROOT
);

297 
	`π∆_qdisc_dñëe
(
sock
, 
qdisc
);

302 
	`π∆_tc_£t_h™dÀ
(
	`TC_CAST
(
qdisc
), 
	`TC_HANDLE
(1,0));

304 i‡((
îr
 = 
	`π∆_tc_£t_köd
(
	`TC_CAST
(
qdisc
), "htb"))) {

305 
	`¥ötf
("CanÇotállocate HTB\n");

311 
	`π∆_htb_£t_def˛s
(
qdisc
, 
	`TC_HANDLE
(1, 
deÁu…Cœss
));

312 
	`π∆_htb_£t_øã2qu™tum
(
qdisc
, 1);

315 i‡((
îr
 = 
	`π∆_qdisc_add
(
sock
, 
qdisc
, 
NLM_F_CREATE
))) {

316 
	`¥ötf
("CanÇotállocate HTB Qdisc\n");

321 
	`π∆_qdisc_put
(
qdisc
);

324 
	}
}

329 
	$˛ass_add_HTB
(
∆_sock
 *
sock
, 
π∆_lök
 *
π∆Lök
,

330 
uöt32_t
 
∑ª¡Maj
, uöt32_à
∑ª¡Mö
,

331 
uöt32_t
 
chûdMaj
, uöt32_à
chûdMö
,

332 
uöt64_t
 
øã
, uöt64_à
˚û
,

333 
uöt32_t
 
bur°
, uöt32_à
cbur°
,

334 
uöt32_t
 
¥io


337 
îr
;

338 
π∆_˛ass
 *
˛ass
;

343 i‡(!(
˛ass
 = 
	`π∆_˛ass_Æloc
())) {

344 
	`¥ötf
("CanÇotállocate class object\n");

348 
	`π∆_tc_£t_lök
(
	`TC_CAST
(
˛ass
), 
π∆Lök
);

351 
	`π∆_tc_£t_∑ª¡
(
	`TC_CAST
(
˛ass
), 
	`TC_HANDLE
(
∑ª¡Maj
, 
∑ª¡Mö
));

352 
	`π∆_tc_£t_h™dÀ
(
	`TC_CAST
(
˛ass
), 
	`TC_HANDLE
(
chûdMaj
, 
chûdMö
));

354 i‡((
îr
 = 
	`π∆_tc_£t_köd
(
	`TC_CAST
(
˛ass
), "htb"))) {

355 
	`¥ötf
("CanÇot set HTBÅo class\n");

360 
	`π∆_htb_£t_¥io
((
π∆_˛ass
 *)
˛ass
, 
¥io
);

362 i‡(
øã
) {

364 
	`π∆_htb_£t_øã
(
˛ass
, 
øã
);

366 i‡(
˚û
) {

368 
	`π∆_htb_£t_˚û
(
˛ass
, 
˚û
);

371 i‡(
bur°
) {

373 
	`π∆_htb_£t_rbuf„r
(
˛ass
, 
bur°
);

375 i‡(
cbur°
) {

377 
	`π∆_htb_£t_cbuf„r
(
˛ass
, 
cbur°
);

380 i‡((
îr
 = 
	`π∆_˛ass_add
(
sock
, 
˛ass
, 
NLM_F_CREATE
))) {

381 
	`¥ötf
("CanÇotállocate HTB Qdisc\n");

384 
	`π∆_˛ass_put
(
˛ass
);

386 
	}
}

391 
	$˛ass_add_HTB_roŸ
(
∆_sock
 *
sock
, 
π∆_lök
 *
π∆Lök
,

392 
uöt64_t
 
øã
, uöt64_à
˚û
,

393 
uöt32_t
 
bur°
, uöt32_à
cbur°


396 
îr
;

397 
π∆_˛ass
 *
˛ass
;

400 
˛ass
 = (
π∆_˛ass
 *)
	`π∆_˛ass_Æloc
();

402 i‡(!
˛ass
) {

403 
	`¥ötf
("CanÇotállocate class object\n");

407 
	`π∆_tc_£t_lök
(
	`TC_CAST
(
˛ass
), 
π∆Lök
);

408 
	`π∆_tc_£t_∑ª¡
(
	`TC_CAST
(
˛ass
), 
TC_H_ROOT
);

411 
	`π∆_tc_£t_h™dÀ
(
	`TC_CAST
(
˛ass
), 1);

413 i‡((
îr
 = 
	`π∆_tc_£t_köd
(
	`TC_CAST
(
˛ass
), "htb"))) {

414 
	`¥ötf
("CanÇot set HTBÅo class\n");

418 i‡(
øã
) {

420 
	`π∆_htb_£t_øã
(
˛ass
, 
øã
);

422 i‡(
˚û
) {

424 
	`π∆_htb_£t_˚û
(
˛ass
, 
˚û
);

427 i‡(
bur°
) {

428 
	`π∆_htb_£t_rbuf„r
(
˛ass
, 
bur°
);

430 i‡(
cbur°
) {

431 
	`π∆_htb_£t_cbuf„r
(
˛ass
, 
cbur°
);

435 i‡((
îr
 = 
	`π∆_˛ass_add
(
sock
, 
˛ass
, 
NLM_F_CREATE
))) {

436 
	`¥ötf
("CanÇotállocate HTB Qdisc\n");

439 
	`π∆_˛ass_put
(
˛ass
);

441 
	}
}

446 
	$qdisc_add_SFQ_Àaf
(
∆_sock
 *
sock
, 
π∆_lök
 *
π∆Lök
,

447 
uöt32_t
 
∑ª¡Maj
, uöt32_à
∑ª¡Mö
,

448 
qu™tum
, 
limô
, 
≥πurb


451 
îr
;

452 
π∆_qdisc
 *
qdisc
;

454 i‡(!(
qdisc
 = 
	`π∆_qdisc_Æloc
())) {

455 
	`¥ötf
("CanÇotállocate qdisc object\n");

458 
	`π∆_tc_£t_lök
(
	`TC_CAST
(
qdisc
), 
π∆Lök
);

459 
	`π∆_tc_£t_∑ª¡
(
	`TC_CAST
(
qdisc
), 
	`TC_HANDLE
(
∑ª¡Maj
, 
∑ª¡Mö
));

461 
	`π∆_tc_£t_h™dÀ
(
	`TC_CAST
(
qdisc
), 
	`TC_HANDLE
(
∑ª¡Mö
,0));

463 i‡((
îr
 = 
	`π∆_tc_£t_köd
(
	`TC_CAST
(
qdisc
), "sfq"))) {

464 
	`¥ötf
("CanÇot set SQF class\n");

468 if(
qu™tum
) {

469 
	`π∆_sfq_£t_qu™tum
(
qdisc
, 
qu™tum
);

471 
	`π∆_sfq_£t_qu™tum
(
qdisc
, 16000);

473 if(
limô
) {

474 
	`π∆_sfq_£t_limô
(
qdisc
, 
limô
);

476 if(
≥πurb
) {

477 
	`π∆_sfq_£t_≥πurb
(
qdisc
, 
≥πurb
);

481 i‡((
îr
 = 
	`π∆_qdisc_add
(
sock
, 
qdisc
, 
NLM_F_CREATE
))) {

482 
	`¥ötf
("CanÇotállocate SFQ qdisc\n");

487 
	`π∆_qdisc_put
(
qdisc
);

489 
	}
}

494 
	$maö
() {

496 
∆_sock
 *
sock
;

497 
π∆_lök
 *
lök
;

503 
uöt32_t
 
ht
, 
héök
, 
htid
, 
dúe˘i⁄
, 
˛assid
;

506 
chashlök
[16]="";

511 
îr
;

515 
∆_ˇche
 *
lök_ˇche
;

517 i‡(!(
sock
 = 
	`∆_sockë_Æloc
())) {

518 
	`¥ötf
("UnableÅoállocateÇetlink socket\n");

519 
	`exô
(1);

522 i‡((
îr
 = 
	`∆_c⁄√˘
(
sock
, 
NETLINK_ROUTE
)) < 0 ) {

523 
	`¥ötf
("Nu s-aÖutut conectaÜa NETLINK!\n");

524 
	`∆_sockë_‰ì
(
sock
);

525 
	`exô
(1);

529 i‡((
îr
 = 
	`π∆_lök_Æloc_ˇche
(
sock
, 
AF_UNSPEC
, &
lök_ˇche
)) < 0) {

530 
	`¥ötf
("UnableÅoállocateÜink cache: %s\n",

531 
	`∆_gëîr‹
(
îr
));

532 
	`∆_sockë_‰ì
(
sock
);

533 
	`exô
(1);

537 i‡(!(
lök
 = 
	`π∆_lök_gë_by_«me
(
lök_ˇche
, "imq0"))) {

539 
	`¥ötf
("InterfaceÇot found\n");

540 
	`∆_sockë_‰ì
(
sock
);

541 
	`exô
(1);

544 
îr
=
	`qdisc_add_HTB
(
sock
, 
lök
, 0xffff);

548 
îr
=
	`˛ass_add_HTB_roŸ
(
sock
, 
lök
, 12500000, 12500000, 25000, 25000);

549 
îr
=
	`˛ass_add_HTB
(
sock
, 
lök
, 1, 0, 1, 0xffff, 1250000, 12500000, 25000, 25000, 5);

550 
îr
=
	`qdisc_add_SFQ_Àaf
(
sock
, 
lök
, 1, 0xffff, 16000, 0, 10);

551 
îr
=
	`˛ass_add_HTB
(
sock
, 
lök
, 1, 1, 1, 0x5, 2000000, 2000000, 25000, 25000, 5);

552 
îr
=
	`qdisc_add_SFQ_Àaf
(
sock
, 
lök
, 1, 0x5, 16000, 0, 10);

553 
îr
=
	`˛ass_add_HTB
(
sock
, 
lök
, 1, 1, 1, 0x6, 1000000, 1000000, 25000, 25000, 5);

554 
îr
=
	`qdisc_add_SFQ_Àaf
(
sock
, 
lök
, 1, 0x6, 16000, 0, 10);

579 
uöt32_t
 
i
;

580 
i
 = 1; i <= 0xf; i++)

581 
	`u32_add_ht
(
sock
, 
lök
, 1, 
i
, 256);

598 
dúe˘i⁄
 = 16;

610 
	`°r˝y
(
chashlök
, "1:");

613 
héök
 = 0x0;

615 if(
	`gë_u32_h™dÀ
(&
héök
, 
chashlök
)) {

616 
	`¥ötf
 ("Illegal \"link\"");

617 
	`∆_sockë_‰ì
(
sock
);

618 
	`exô
(1);

623 i‡(
héök
 && 
	`TC_U32_NODE
(htlink)) {

624 
	`¥ötf
("\"link\" must beá hashÅable.\n");

625 
	`∆_sockë_‰ì
(
sock
);

626 
	`exô
(1);

646 
	`u32_add_fûãr_⁄_ht_wôh_hashmask
(
sock
, 
lök
, 1,

647 0x0, 0x0, 
dúe˘i⁄
, 0,

648 0, 
héök
, 0xff000000, 
dúe˘i⁄
);

679 
ht
=
	`gë_u32_∑r£_h™dÀ
("1:a:");

680 
htid
 = (
ht
&0xFFFFF000);

681 
héök
=
	`gë_u32_∑r£_h™dÀ
("2:");

683 
	`u32_add_fûãr_⁄_ht_wôh_hashmask
(
sock
, 
lök
, 1,

684 0x0a000000, 0xff000000, 
dúe˘i⁄
, 0,

685 
htid
, 
héök
, 0x00ff0000, 
dúe˘i⁄
);

688 
ht
=
	`gë_u32_∑r£_h™dÀ
("1:ac:");

689 
htid
 = (
ht
&0xFFFFF000);

690 
héök
=
	`gë_u32_∑r£_h™dÀ
("3:");

692 
	`u32_add_fûãr_⁄_ht_wôh_hashmask
(
sock
, 
lök
, 1,

693 0xac000000, 0xff000000, 
dúe˘i⁄
, 0,

694 
htid
, 
héök
, 0x00ff0000, 
dúe˘i⁄
);

699 
ht
=
	`gë_u32_∑r£_h™dÀ
("2:0:");

700 
htid
 = (
ht
&0xFFFFF000);

701 
héök
=
	`gë_u32_∑r£_h™dÀ
("4:");

703 
	`u32_add_fûãr_⁄_ht_wôh_hashmask
(
sock
, 
lök
, 1,

704 0x0a000000, 0xffff0000, 
dúe˘i⁄
, 0,

705 
htid
, 
héök
, 0x0000ff00, 
dúe˘i⁄
);

708 
ht
=
	`gë_u32_∑r£_h™dÀ
("3:11:");

709 
htid
 = (
ht
&0xFFFFF000);

710 
héök
=
	`gë_u32_∑r£_h™dÀ
("5:");

712 
	`u32_add_fûãr_⁄_ht_wôh_hashmask
(
sock
, 
lök
, 1,

713 0xac110000, 0xffff0000, 
dúe˘i⁄
, 0,

714 
htid
, 
héök
, 0x0000ff00, 
dúe˘i⁄
);

718 
ht
=
	`gë_u32_∑r£_h™dÀ
("4:9:");

719 
htid
 = (
ht
&0xFFFFF000);

720 
héök
=
	`gë_u32_∑r£_h™dÀ
("6:");

722 
	`u32_add_fûãr_⁄_ht_wôh_hashmask
(
sock
, 
lök
, 1,

723 0x0a000900, 0xffffff00, 
dúe˘i⁄
, 0,

724 
htid
, 
héök
, 0x000000ff, 
dúe˘i⁄
);

727 
ht
=
	`gë_u32_∑r£_h™dÀ
("5:2:");

728 
htid
 = (
ht
&0xFFFFF000);

729 
héök
=
	`gë_u32_∑r£_h™dÀ
("7:");

731 
	`u32_add_fûãr_⁄_ht_wôh_hashmask
(
sock
, 
lök
, 1,

732 0xac110200, 0xffffff00, 
dúe˘i⁄
, 0,

733 
htid
, 
héök
, 0x000000ff, 
dúe˘i⁄
);

738 
ht
=
	`gë_u32_∑r£_h™dÀ
("6:14:");

739 
htid
 = (
ht
&0xFFFFF000);

741 
îr
 = 
	`gë_tc_˛assid
(&
˛assid
, "1:5");

743 
	`u32_add_fûãr_⁄_ht
(
sock
, 
lök
, 1,

744 0x0a000914, 0xffffffff, 
dúe˘i⁄
, 0,

745 
htid
, 
˛assid
);

748 
ht
=
	`gë_u32_∑r£_h™dÀ
("7:78:");

749 
htid
 = (
ht
&0xFFFFF000);

751 
îr
 = 
	`gë_tc_˛assid
(&
˛assid
, "1:6");

753 
	`u32_add_fûãr_⁄_ht
(
sock
, 
lök
, 1,

754 0xac110278, 0xffffffff, 
dúe˘i⁄
, 0,

755 
htid
, 
˛assid
);

759 
	`∆_sockë_‰ì
(
sock
);

761 
	}
}

	@mylibnl/libnl-3.2.25/tests/test-create-bond.c

1 
	~<√éök/√éök.h
>

2 
	~<√éök/rouã/lök.h
>

3 
	~<√éök/rouã/lök/b⁄dög.h
>

5 
	$maö
(
¨gc
, *
¨gv
[])

7 
π∆_lök
 *
lök
;

8 
∆_sock
 *
sk
;

9 
îr
;

11 
sk
 = 
	`∆_sockë_Æloc
();

12 i‡((
îr
 = 
	`∆_c⁄√˘
(
sk
, 
NETLINK_ROUTE
)) < 0) {

13 
	`∆_≥º‹
(
îr
, "UnableÅo connect socket");

14  
îr
;

17 
lök
 = 
	`π∆_lök_b⁄d_Æloc
();

18 
	`π∆_lök_£t_«me
(
lök
, "my_bond");

20 i‡((
îr
 = 
	`π∆_lök_add
(
sk
, 
lök
, 
NLM_F_CREATE
)) < 0) {

21 
	`∆_≥º‹
(
îr
, "UnableÅoáddÜink");

22  
îr
;

25 
	`π∆_lök_put
(
lök
);

26 
	`∆_˛o£
(
sk
);

29 
	}
}

	@mylibnl/libnl-3.2.25/tests/test-create-bridge.c

1 
	~<√éök/√éök.h
>

2 
	~<√éök/rouã/lök.h
>

3 
	~<√éök/rouã/lök/bridge.h
>

5 
	#TEST_BRIDGE_NAME
 "ã°bridge"

	)

6 
	#TEST_INTERFACE_NAME
 "ã°èp1"

	)

8 
	$¸óã_bridge
(
∆_sock
 *
sk
, 
∆_ˇche
 *
lök_ˇche
, c⁄° *
«me
) {

9 
π∆_lök
 *
lök
;

10 
îr
;

12 
lök
 = 
	`π∆_lök_Æloc
();

13 i‡((
îr
 = 
	`π∆_lök_£t_ty≥
(
lök
, "bridge")) < 0) {

14 
	`π∆_lök_put
(
lök
);

15  
îr
;

17 
	`π∆_lök_£t_«me
(
lök
, 
«me
);

19 i‡((
îr
 = 
	`π∆_lök_add
(
sk
, 
lök
, 
NLM_F_CREATE
)) < 0) {

20  
îr
;

22 
	`π∆_lök_put
(
lök
);

25 
	}
}

27 
	$maö
(
¨gc
, *
¨gv
[])

29 
π∆_lök
 *
lök
;

30 
∆_ˇche
 *
lök_ˇche
;

31 
∆_sock
 *
sk
;

32 
îr
;

34 
sk
 = 
	`∆_sockë_Æloc
();

35 i‡((
îr
 = 
	`∆_c⁄√˘
(
sk
, 
NETLINK_ROUTE
)) < 0) {

36 
	`∆_≥º‹
(
îr
, "UnableÅo connect socket");

37  
îr
;

40 i‡((
îr
 = 
	`π∆_lök_Æloc_ˇche
(
sk
, 
AF_UNSPEC
, &
lök_ˇche
)) < 0) {

41 
	`∆_≥º‹
(
îr
, "UnableÅoállocate cache");

42  
îr
;

45 i‡((
îr
 = 
	`¸óã_bridge
(
sk
, 
lök_ˇche
, 
TEST_BRIDGE_NAME
)) < 0) {

46 
	`∆_≥º‹
(
îr
, "UnableÅoállocateÅestbridge");

47  
îr
;

50 
	`∆_ˇche_ªfûl
(
sk
, 
lök_ˇche
);

52 
lök
 = 
	`π∆_lök_gë_by_«me
(
lök_ˇche
, 
TEST_BRIDGE_NAME
);

53 
π∆_lök
 *
…≠
 = 
	`π∆_lök_gë_by_«me
(
lök_ˇche
, 
TEST_INTERFACE_NAME
);

54 i‡(!
…≠
) {

55 
	`Ârötf
(
°dîr
, "You should cª©ê®è∞öãrÁ˚ bef‹êlunchÅhi†ã° (#Åun˘»-à%s)\n", 
TEST_INTERFACE_NAME
);

59 i‡((
îr
 = 
	`π∆_lök_í¶ave
(
sk
, 
lök
, 
…≠
)) < 0) {

60 
	`∆_≥º‹
(
îr
, "UnableÅoÉnslave interfaceÅo his bridge\n");

61  
îr
;

64 if(
	`π∆_lök_is_bridge
(
lök
) == 0) {

65 
	`Ârötf
(
°dîr
, "Link isÇotá bridge\n");

68 if(
	`π∆_lök_gë_ma°î
(
…≠
) <= 0) {

69 
	`Ârötf
(
°dîr
, "Interface isÇotáttachedÅoá bridge\n");

73 
	`π∆_lök_put
(
…≠
);

74 
	`π∆_lök_put
(
lök
);

76 
	`∆_ˇche_‰ì
(
lök_ˇche
);

77 
	`∆_sockë_‰ì
(
sk
);

80 
	}
}

	@mylibnl/libnl-3.2.25/tests/test-create-ip6tnl.c

1 
	~<√éök/rouã/lök/ù6äl.h
>

2 
	~<√éök-¥iv©e/√éök.h
>

4 
	$maö
(
¨gc
, *
¨gv
[])

6 
∆_ˇche
 *
lök_ˇche
;

7 
π∆_lök
 *
lök
;

8 
ö6_addr
 
addr
;

9 
∆_sock
 *
sk
;

10 
îr
, 
if_ödex
;

12 
sk
 = 
	`∆_sockë_Æloc
();

13 i‡((
îr
 = 
	`∆_c⁄√˘
(
sk
, 
NETLINK_ROUTE
)) < 0) {

14 
	`∆_≥º‹
(
îr
, "UnableÅo connect socket");

15  
îr
;

18 
îr
 = 
	`π∆_lök_Æloc_ˇche
(
sk
, 
AF_UNSPEC
, &
lök_ˇche
);

19 i‡–
îr
 < 0) {

20 
	`∆_≥º‹
(
îr
, "UnableÅoállocate cache");

21  
îr
;

24 
if_ödex
 = 
	`π∆_lök_«me2i
(
lök_ˇche
, "ens33");

25 i‡(!
if_ödex
) {

26 
	`Ârötf
(
°dîr
, "UnableÅoÜookupÉns33");

30 
lök
 = 
	`π∆_lök_ù6_äl_Æloc
();

31 if(!
lök
) {

32 
	`∆_≥º‹
(
îr
, "UnableÅoállocateÜink");

36 
	`π∆_lök_£t_«me
(
lök
, "ip6tnl-tun");

37 
	`π∆_lök_ù6_äl_£t_lök
(
lök
, 
if_ödex
);

39 
	`öë_±⁄
(
AF_INET6
, "2607:f0d0:1002:51::4", &
addr
);

40 
	`π∆_lök_ù6_äl_£t_loˇl
(
lök
, &
addr
);

42 
	`öë_±⁄
(
AF_INET6
, "2607:f0d0:1002:52::5", &
addr
);

43 
	`π∆_lök_ù6_äl_£t_ªmŸe
(
lök
, &
addr
);

45 
îr
 = 
	`π∆_lök_add
(
sk
, 
lök
, 
NLM_F_CREATE
);

46 i‡(
îr
 < 0) {

47 
	`∆_≥º‹
(
îr
, "UnableÅoáddÜink");

48  
îr
;

51 
	`π∆_lök_put
(
lök
);

52 
	`∆_˛o£
(
sk
);

55 
	}
}

	@mylibnl/libnl-3.2.25/tests/test-create-ipgre.c

1 
	~<√éök/rouã/lök/ùgª.h
>

2 
	~<√éök-¥iv©e/√éök.h
>

4 
	$maö
(
¨gc
, *
¨gv
[])

6 
∆_ˇche
 *
lök_ˇche
;

7 
π∆_lök
 *
lök
;

8 
ö_addr
 
addr
;

9 
∆_sock
 *
sk
;

10 
îr
, 
if_ödex
;

12 
sk
 = 
	`∆_sockë_Æloc
();

13 i‡((
îr
 = 
	`∆_c⁄√˘
(
sk
, 
NETLINK_ROUTE
)) < 0) {

14 
	`∆_≥º‹
(
îr
, "UnableÅo connect socket");

15  
îr
;

18 
îr
 = 
	`π∆_lök_Æloc_ˇche
(
sk
, 
AF_UNSPEC
, &
lök_ˇche
);

19 i‡–
îr
 < 0) {

20 
	`∆_≥º‹
(
îr
, "UnableÅoállocate cache");

21  
îr
;

24 
if_ödex
 = 
	`π∆_lök_«me2i
(
lök_ˇche
, "eno16777736");

25 i‡(!
if_ödex
) {

26 
	`Ârötf
(
°dîr
, "UnableÅoÜookupÉno16777736");

30 
lök
 = 
	`π∆_lök_ùgª_Æloc
();

31 if(!
lök
) {

32 
	`∆_≥º‹
(
îr
, "UnableÅoállocateÜink");

36 
	`π∆_lök_£t_«me
(
lök
, "ipgre-tun");

37 
	`π∆_lök_ùgª_£t_lök
(
lök
, 
if_ödex
);

39 
	`öë_±⁄
(
AF_INET
, "192.168.254.12", &
addr
.
s_addr
);

40 
	`π∆_lök_ùgª_£t_loˇl
(
lök
, 
addr
.
s_addr
);

42 
	`öë_±⁄
(
AF_INET
, "192.168.254.13", &
addr
.
s_addr
);

43 
	`π∆_lök_ùgª_£t_ªmŸe
(
lök
, 
addr
.
s_addr
);

45 
	`π∆_lök_ùgª_£t_âl
(
lök
, 64);

46 
îr
 = 
	`π∆_lök_add
(
sk
, 
lök
, 
NLM_F_CREATE
);

47 i‡(
îr
 < 0) {

48 
	`∆_≥º‹
(
îr
, "UnableÅoáddÜink");

49  
îr
;

52 
	`π∆_lök_put
(
lök
);

53 
	`∆_˛o£
(
sk
);

56 
	}
}

	@mylibnl/libnl-3.2.25/tests/test-create-ipip.c

1 
	~<√éök/rouã/lök/ùù.h
>

2 
	~<√éök-¥iv©e/√éök.h
>

4 
	$maö
(
¨gc
, *
¨gv
[])

6 
∆_ˇche
 *
lök_ˇche
;

7 
π∆_lök
 *
lök
;

8 
ö_addr
 
addr
;

9 
∆_sock
 *
sk
;

10 
îr
, 
if_ödex
;

12 
sk
 = 
	`∆_sockë_Æloc
();

13 i‡((
îr
 = 
	`∆_c⁄√˘
(
sk
, 
NETLINK_ROUTE
)) < 0) {

14 
	`∆_≥º‹
(
îr
, "UnableÅo connect socket");

15  
îr
;

18 
îr
 = 
	`π∆_lök_Æloc_ˇche
(
sk
, 
AF_UNSPEC
, &
lök_ˇche
);

19 i‡–
îr
 < 0) {

20 
	`∆_≥º‹
(
îr
, "UnableÅoállocate cache");

21  
îr
;

24 
if_ödex
 = 
	`π∆_lök_«me2i
(
lök_ˇche
, "eno16777736");

25 i‡(!
if_ödex
) {

26 
	`Ârötf
(
°dîr
, "UnableÅoÜookupÉno16777736");

30 
lök
 = 
	`π∆_lök_ùù_Æloc
();

31 if(!
lök
) {

32 
	`∆_≥º‹
(
îr
, "UnableÅoállocateÜink");

36 
	`π∆_lök_£t_«me
(
lök
, "ipip-tun");

37 
	`π∆_lök_ùù_£t_lök
(
lök
, 
if_ödex
);

39 
	`öë_±⁄
(
AF_INET
, "192.168.254.12", &
addr
.
s_addr
);

40 
	`π∆_lök_ùù_£t_loˇl
(
lök
, 
addr
.
s_addr
);

42 
	`öë_±⁄
(
AF_INET
, "192.168.254.13", &
addr
.
s_addr
);

43 
	`π∆_lök_ùù_£t_ªmŸe
(
lök
, 
addr
.
s_addr
);

45 
	`π∆_lök_ùù_£t_âl
(
lök
, 64);

46 
îr
 = 
	`π∆_lök_add
(
sk
, 
lök
, 
NLM_F_CREATE
);

47 i‡(
îr
 < 0) {

48 
	`∆_≥º‹
(
îr
, "UnableÅoáddÜink");

49  
îr
;

52 
	`π∆_lök_put
(
lök
);

53 
	`∆_˛o£
(
sk
);

56 
	}
}

	@mylibnl/libnl-3.2.25/tests/test-create-ipvti.c

1 
	~<√éök/rouã/lök/ùvti.h
>

2 
	~<√éök-¥iv©e/√éök.h
>

4 
	$maö
(
¨gc
, *
¨gv
[])

6 
∆_ˇche
 *
lök_ˇche
;

7 
π∆_lök
 *
lök
;

8 
ö_addr
 
addr
;

9 
∆_sock
 *
sk
;

10 
îr
, 
if_ödex
;

12 
sk
 = 
	`∆_sockë_Æloc
();

13 i‡((
îr
 = 
	`∆_c⁄√˘
(
sk
, 
NETLINK_ROUTE
)) < 0) {

14 
	`∆_≥º‹
(
îr
, "UnableÅo connect socket");

15  
îr
;

18 
îr
 = 
	`π∆_lök_Æloc_ˇche
(
sk
, 
AF_UNSPEC
, &
lök_ˇche
);

19 i‡–
îr
 < 0) {

20 
	`∆_≥º‹
(
îr
, "UnableÅoállocate cache");

21  
îr
;

24 
if_ödex
 = 
	`π∆_lök_«me2i
(
lök_ˇche
, "ens33");

25 i‡(!
if_ödex
) {

26 
	`Ârötf
(
°dîr
, "UnableÅoÜookupÉns33");

30 
lök
 = 
	`π∆_lök_ùvti_Æloc
();

31 if(!
lök
) {

32 
	`∆_≥º‹
(
îr
, "UnableÅoállocateÜink");

36 
	`π∆_lök_£t_«me
(
lök
, "ipvti-tun");

37 
	`π∆_lök_ùvti_£t_lök
(
lök
, 
if_ödex
);

39 
	`öë_±⁄
(
AF_INET
, "192.168.254.12", &
addr
.
s_addr
);

40 
	`π∆_lök_ùvti_£t_loˇl
(
lök
, 
addr
.
s_addr
);

42 
	`öë_±⁄
(
AF_INET
, "192.168.254.13", &
addr
.
s_addr
);

43 
	`π∆_lök_ùvti_£t_ªmŸe
(
lök
, 
addr
.
s_addr
);

45 
îr
 = 
	`π∆_lök_add
(
sk
, 
lök
, 
NLM_F_CREATE
);

46 i‡(
îr
 < 0) {

47 
	`∆_≥º‹
(
îr
, "UnableÅoáddÜink");

48  
îr
;

51 
	`π∆_lök_put
(
lök
);

52 
	`∆_˛o£
(
sk
);

55 
	}
}

	@mylibnl/libnl-3.2.25/tests/test-create-sit.c

1 
	~<√éök/rouã/lök/sô.h
>

2 
	~<√éök-¥iv©e/√éök.h
>

4 
	$maö
(
¨gc
, *
¨gv
[])

6 
∆_ˇche
 *
lök_ˇche
;

7 
π∆_lök
 *
lök
;

8 
ö_addr
 
addr
;

9 
∆_sock
 *
sk
;

10 
îr
, 
if_ödex
;

12 
sk
 = 
	`∆_sockë_Æloc
();

13 i‡((
îr
 = 
	`∆_c⁄√˘
(
sk
, 
NETLINK_ROUTE
)) < 0) {

14 
	`∆_≥º‹
(
îr
, "UnableÅo connect socket");

15  
îr
;

18 
îr
 = 
	`π∆_lök_Æloc_ˇche
(
sk
, 
AF_UNSPEC
, &
lök_ˇche
);

19 i‡–
îr
 < 0) {

20 
	`∆_≥º‹
(
îr
, "UnableÅoállocate cache");

21  
îr
;

24 
if_ödex
 = 
	`π∆_lök_«me2i
(
lök_ˇche
, "eno16777736");

25 i‡(!
if_ödex
) {

26 
	`Ârötf
(
°dîr
, "UnableÅoÜookupÉno16777736");

30 
lök
 = 
	`π∆_lök_sô_Æloc
();

31 if(!
lök
) {

32 
	`∆_≥º‹
(
îr
, "UnableÅoállocateÜink");

36 
	`π∆_lök_£t_«me
(
lök
, "sit-tun");

37 
	`π∆_lök_sô_£t_lök
(
lök
, 
if_ödex
);

39 
	`öë_±⁄
(
AF_INET
, "192.168.254.12", &
addr
.
s_addr
);

40 
	`π∆_lök_sô_£t_loˇl
(
lök
, 
addr
.
s_addr
);

42 
	`öë_±⁄
(
AF_INET
, "192.168.254.13", &
addr
.
s_addr
);

43 
	`π∆_lök_sô_£t_ªmŸe
(
lök
, 
addr
.
s_addr
);

45 
	`π∆_lök_sô_£t_âl
(
lök
, 64);

46 
îr
 = 
	`π∆_lök_add
(
sk
, 
lök
, 
NLM_F_CREATE
);

47 i‡(
îr
 < 0) {

48 
	`∆_≥º‹
(
îr
, "UnableÅoáddÜink");

49  
îr
;

52 
	`π∆_lök_put
(
lök
);

53 
	`∆_˛o£
(
sk
);

56 
	}
}

	@mylibnl/libnl-3.2.25/tests/test-create-veth.c

1 
	~<√éök/√éök.h
>

2 
	~<√éök/rouã/lök.h
>

3 
	~<√éök/rouã/lök/vëh.h
>

5 
	$maö
(
¨gc
, *
¨gv
[])

7 
π∆_lök
 *
lök
;

8 
∆_sock
 *
sk
;

9 
îr
;

10 
π∆_lök
 *
≥î
;

12 
sk
 = 
	`∆_sockë_Æloc
();

13 i‡((
îr
 = 
	`∆_c⁄√˘
(
sk
, 
NETLINK_ROUTE
)) < 0) {

14 
	`∆_≥º‹
(
îr
, "UnableÅo connect socket");

15  
îr
;

19 
	`π∆_lök_vëh_add
(
sk
, "vëh2", "vëh3", 
	`gëpid
());

21 
lök
 = 
	`π∆_lök_vëh_Æloc
();

22 i‡(!
lök
) {

23 
	`∆_≥º‹
(
îr
, "UnableÅoállocÜink");

24  
îr
;

27 
	`π∆_lök_£t_«me
(
lök
, "veth8");

28 
≥î
 = 
	`π∆_lök_vëh_gë_≥î
(
lök
);

29 
	`π∆_lök_£t_«me
(
≥î
, "veth9");

31 i‡((
îr
 = 
	`π∆_lök_add
(
sk
, 
lök
, 
NLM_F_CREATE
)) < 0) {

32 
	`∆_≥º‹
(
îr
, "UnableÅoáddÜink");

33  
îr
;

35 
	`¥ötf
("≥î i†%s\n", 
	`π∆_lök_gë_«me
(
≥î
));

36 
	`π∆_lök_put
(
≥î
);

37 
	`π∆_lök_put
(
lök
);

39 
	`∆_˛o£
(
sk
);

42 
	}
}

	@mylibnl/libnl-3.2.25/tests/test-create-vlan.c

1 
	~<√éök/√éök.h
>

2 
	~<√éök/rouã/lök.h
>

3 
	~<√éök/rouã/lök/vœn.h
>

5 
	$maö
(
¨gc
, *
¨gv
[])

7 
π∆_lök
 *
lök
;

8 
∆_ˇche
 *
lök_ˇche
;

9 
∆_sock
 *
sk
;

10 
îr
, 
ma°î_ödex
;

12 
sk
 = 
	`∆_sockë_Æloc
();

13 i‡((
îr
 = 
	`∆_c⁄√˘
(
sk
, 
NETLINK_ROUTE
)) < 0) {

14 
	`∆_≥º‹
(
îr
, "UnableÅo connect socket");

15  
îr
;

18 i‡((
îr
 = 
	`π∆_lök_Æloc_ˇche
(
sk
, 
AF_UNSPEC
, &
lök_ˇche
)) < 0) {

19 
	`∆_≥º‹
(
îr
, "UnableÅoállocate cache");

20  
îr
;

23 i‡(!(
ma°î_ödex
 = 
	`π∆_lök_«me2i
(
lök_ˇche
, "eth0"))) {

24 
	`Ârötf
(
°dîr
, "UnableÅoÜookupÉth0");

28 
lök
 = 
	`π∆_lök_vœn_Æloc
();

30 
	`π∆_lök_£t_lök
(
lök
, 
ma°î_ödex
);

32 
	`π∆_lök_vœn_£t_id
(
lök
, 10);

34 i‡((
îr
 = 
	`π∆_lök_add
(
sk
, 
lök
, 
NLM_F_CREATE
)) < 0) {

35 
	`∆_≥º‹
(
îr
, "UnableÅoáddÜink");

36  
îr
;

39 
	`π∆_lök_put
(
lök
);

40 
	`∆_˛o£
(
sk
);

43 
	}
}

	@mylibnl/libnl-3.2.25/tests/test-create-vxlan.c

1 
	~<√éök/√éök.h
>

2 
	~<√éök/rouã/lök.h
>

3 
	~<√éök/rouã/lök/vxœn.h
>

5 
	$maö
(
¨gc
, *
¨gv
[])

7 
π∆_lök
 *
lök
;

8 
∆_addr
 *
addr
;

9 
∆_sock
 *
sk
;

10 
îr
;

12 
sk
 = 
	`∆_sockë_Æloc
();

13 i‡((
îr
 = 
	`∆_c⁄√˘
(
sk
, 
NETLINK_ROUTE
)) < 0) {

14 
	`∆_≥º‹
(
îr
, "UnableÅo connect socket");

15  
îr
;

18 
lök
 = 
	`π∆_lök_vxœn_Æloc
();

20 
	`π∆_lök_£t_«me
(
lök
, "vxlan128");

22 i‡((
îr
 = 
	`π∆_lök_vxœn_£t_id
(
lök
, 128)) < 0) {

23 
	`∆_≥º‹
(
îr
, "UnableÅo set VXLANÇetwork identifier");

24  
îr
;

27 i‡((
îr
 = 
	`∆_addr_∑r£
("239.0.0.1", 
AF_INET
, &
addr
)) < 0) {

28 
	`∆_≥º‹
(
îr
, "UnableÅoÖarse IPáddress");

29  
îr
;

32 i‡((
îr
 = 
	`π∆_lök_vxœn_£t_group
(
lök
, 
addr
)) < 0) {

33 
	`∆_≥º‹
(
îr
, "UnableÅo set multicast IPáddress");

34  
îr
;

36 
	`∆_addr_put
(
addr
);

38 i‡((
îr
 = 
	`π∆_lök_add
(
sk
, 
lök
, 
NLM_F_CREATE
)) < 0) {

39 
	`∆_≥º‹
(
îr
, "UnableÅoáddÜink");

40  
îr
;

43 
	`π∆_lök_put
(
lök
);

44 
	`∆_˛o£
(
sk
);

47 
	}
}

	@mylibnl/libnl-3.2.25/tests/test-delete-link.c

1 
	~<√éök/√éök.h
>

2 
	~<√éök/rouã/lök.h
>

4 
	$maö
(
¨gc
, *
¨gv
[])

6 
π∆_lök
 *
lök
;

7 
∆_sock
 *
sk
;

8 
îr
;

10 
sk
 = 
	`∆_sockë_Æloc
();

11 i‡((
îr
 = 
	`∆_c⁄√˘
(
sk
, 
NETLINK_ROUTE
)) < 0) {

12 
	`∆_≥º‹
(
îr
, "UnableÅo connect socket");

13  
îr
;

16 
lök
 = 
	`π∆_lök_Æloc
();

17 
	`π∆_lök_£t_«me
(
lök
, "my_bond");

19 i‡((
îr
 = 
	`π∆_lök_dñëe
(
sk
, 
lök
)) < 0) {

20 
	`∆_≥º‹
(
îr
, "UnableÅo deleteÜink");

21  
îr
;

24 
	`π∆_lök_put
(
lök
);

25 
	`∆_˛o£
(
sk
);

28 
	}
}

	@mylibnl/libnl-3.2.25/tests/test-genl.c

1 
	~<√éök/˛i/utûs.h
>

2 
	~<löux/èsk°©s.h
>

4 
∆a_pﬁicy
 
	g©å_pﬁicy
[
TASKSTATS_TYPE_MAX
+1] = {

5 [
TASKSTATS_TYPE_PID
] = { .
ty≥
 = 
NLA_U32
 },

6 [
TASKSTATS_TYPE_TGID
] = { .
ty≥
 = 
NLA_U32
 },

7 [
TASKSTATS_TYPE_STATS
] = { .
möÀn
 = (
èsk°©s
) },

8 [
TASKSTATS_TYPE_AGGR_PID
] = { .
ty≥
 = 
NLA_NESTED
 },

9 [
TASKSTATS_TYPE_AGGR_TGID
] = { .
ty≥
 = 
NLA_NESTED
 },

13 
	$∑r£_cmd_√w
(
∆_ˇche_›s
 *
unu£d
, 
gíl_cmd
 *
cmd
,

14 
gíl_öfo
 *
öfo
, *
¨g
)

16 
∆©å
 *
©ås
[
TASKSTATS_TYPE_MAX
+1];

17 
∆©å
 *
√°ed
;

18 
îr
;

20 i‡(
öfo
->
©ås
[
TASKSTATS_TYPE_AGGR_PID
])

21 
√°ed
 = 
öfo
->
©ås
[
TASKSTATS_TYPE_AGGR_PID
];

22 i‡(
öfo
->
©ås
[
TASKSTATS_TYPE_AGGR_TGID
])

23 
√°ed
 = 
öfo
->
©ås
[
TASKSTATS_TYPE_AGGR_TGID
];

25 
	`Ârötf
(
°dîr
, "InvalidÅaskstats message: UnableÅo find "

27  
NL_SKIP
;

30 
îr
 = 
	`∆a_∑r£_√°ed
(
©ås
, 
TASKSTATS_TYPE_MAX
, 
√°ed
, 
©å_pﬁicy
);

31 i‡(
îr
 < 0) {

32 
	`∆_≥º‹
(
îr
, "Error whileÖarsing genericÇetlink message");

33  
îr
;

37 i‡(
©ås
[
TASKSTATS_TYPE_STATS
]) {

38 
èsk°©s
 *
°©s
 = 
	`∆a_d©a
(
©ås
[
TASKSTATS_TYPE_STATS
]);

40 
	`¥ötf
("%sÖid %u uid %u gid %uÖarent %u\n",

41 
°©s
->
ac_comm
, sèts->
ac_pid
, sèts->
ac_uid
,

42 
°©s
->
ac_gid
, sèts->
ac_µid
);

46 
	}
}

48 
	$∑r£_cb
(
∆_msg
 *
msg
, *
¨g
)

50  
	`gíl_h™dÀ_msg
(
msg
, 
NULL
);

51 
	}
}

53 
gíl_cmd
 
	gcmds
[] = {

55 .
c_id
 = 
TASKSTATS_CMD_NEW
,

56 .
	gc_«me
 = "taskstats_new()",

57 .
	gc_max©å
 = 
TASKSTATS_TYPE_MAX
,

58 .
	gc_©å_pﬁicy
 = 
©å_pﬁicy
,

59 .
	gc_msg_∑r£r
 = &
∑r£_cmd_√w
,

63 
	#ARRAY_SIZE
(
X
Ë((XË/ ((X)[0]))

	)

65 
gíl_›s
 
	g›s
 = {

66 .
o_«me
 = 
TASKSTATS_GENL_NAME
,

67 .
	go_cmds
 = 
cmds
,

68 .
	go_ncmds
 = 
ARRAY_SIZE
(
cmds
),

71 
	$maö
(
¨gc
, *
¨gv
[])

73 
∆_sock
 *
sock
;

74 
∆_msg
 *
msg
;

75 *
hdr
;

76 
îr
;

78 
sock
 = 
	`∆_˛i_Æloc_sockë
();

79 
	`∆_˛i_c⁄√˘
(
sock
, 
NETLINK_GENERIC
);

81 i‡((
îr
 = 
	`gíl_ªgi°î_Ámûy
(&
›s
)) < 0)

82 
	`∆_˛i_Áèl
(
îr
, "UnableÅoÑegister Generic Netlink family");

84 i‡((
îr
 = 
	`gíl_›s_ªsﬁve
(
sock
, &
›s
)) < 0)

85 
	`∆_˛i_Áèl
(
îr
, "UnableÅoÑesolve familyÇame");

87 i‡(
	`gíl_˘æ_ªsﬁve
(
sock
, "∆˘æ"Ë!
GENL_ID_CTRL
)

88 
	`∆_˛i_Áèl
(
NLE_INVAL
, "Resolving of \"nlctrl\" failed");

90 
msg
 = 
	`∆msg_Æloc
();

91 i‡(
msg
 =
NULL
)

92 
	`∆_˛i_Áèl
(
NLE_NOMEM
, "UnableÅoállocateÇetlink message");

94 
hdr
 = 
	`gílmsg_put
(
msg
, 
NL_AUTO_PORT
, 
NL_AUTO_SEQ
, 
›s
.
o_id
,

95 0, 0, 
TASKSTATS_CMD_GET
, 
TASKSTATS_GENL_VERSION
);

96 i‡(
hdr
 =
NULL
)

97 
	`∆_˛i_Áèl
(
ENOMEM
, "UnableÅo write genl header");

99 i‡((
îr
 = 
	`∆a_put_u32
(
msg
, 
TASKSTATS_CMD_ATTR_PID
, 1)) < 0)

100 
	`∆_˛i_Áèl
(
îr
, "U«bÀÅÿaddáâribuã: %s", 
	`∆_gëîr‹
(err));

102 i‡((
îr
 = 
	`∆_£nd_auto_com∂ëe
(
sock
, 
msg
)) < 0)

103 
	`∆_˛i_Áèl
(
îr
, "U«bÀÅÿ£nd mesßge: %s", 
	`∆_gëîr‹
(err));

105 
	`∆msg_‰ì
(
msg
);

107 i‡((
îr
 = 
	`∆_sockë_modify_cb
(
sock
, 
NL_CB_VALID
, 
NL_CB_CUSTOM
,

108 
∑r£_cb
, 
NULL
)) < 0)

109 
	`∆_˛i_Áèl
(
îr
, "UnableÅo modify valid message callback");

111 i‡((
îr
 = 
	`∆_ªcvmsgs_deÁu…
(
sock
)) < 0)

112 
	`∆_˛i_Áèl
(
îr
, "U«bÀÅÿª˚ivêmesßge: %s", 
	`∆_gëîr‹
(err));

114 
	`∆_˛o£
(
sock
);

115 
	`∆_sockë_‰ì
(
sock
);

118 
	}
}

	@mylibnl/libnl-3.2.25/tests/test-nf-cache-mngr.c

1 
	~<√éök/˛i/utûs.h
>

3 
	$ch™ge_cb
(
∆_ˇche
 *
ˇche
, 
∆_obje˘
 *
obj
,

4 
a˘i⁄
, *
d©a
)

6 
n‚l_˘
 *
˘
 = (n‚l_˘ *Ë
obj
;

7 
∆_addr
 *
hack
 = 
NULL
;

9 i‡(!
hack
)

10 
	`∆_addr_∑r£
("194.88.212.233", 
AF_INET
, &
hack
);

12 i‡(!
	`∆_addr_cmp
(
hack
, 
	`n‚l_˘_gë_§c
(
˘
, 1)) ||

13 !
	`∆_addr_cmp
(
hack
, 
	`n‚l_˘_gë_d°
(
˘
, 1))) {

14 
∆_dump_∑øms
 
dp
 = {

15 .
dp_ty≥
 = 
NL_DUMP_LINE
,

16 .
dp_fd
 = 
°dout
,

19 
	`¥ötf
("UPDATE ");

20 
	`∆_obje˘_dump
(
obj
, &
dp
);

22 
	}
}

24 
	$maö
(
¨gc
, *
¨gv
[])

26 
∆_ˇche_mngr
 *
mngr
;

27 
∆_sock
 *
sock
;

28 
∆_ˇche
 *
˘
;

29 
îr
;

31 
sock
 = 
	`∆_˛i_Æloc_sockë
();

33 
îr
 = 
	`∆_ˇche_mngr_Æloc
(
sock
, 
NETLINK_NETFILTER
, 
NL_AUTO_PROVIDE
, &
mngr
);

34 i‡(
îr
 < 0) {

35 
	`∆_≥º‹
(
îr
, "nl_cache_mngr_alloc");

39 
îr
 = 
	`∆_ˇche_mngr_add
(
mngr
, "√tfûãr/˘", &
ch™ge_cb
, 
NULL
, &
˘
);

40 i‡(
îr
 < 0) {

41 
	`∆_≥º‹
(
îr
, "nl_cache_mngr_add(netfilter/ct)");

46 
îr
 = 
	`∆_ˇche_mngr_pﬁl
(
mngr
, 5000);

47 i‡(
îr
 < 0) {

48 
	`∆_≥º‹
(
îr
, "nl_cache_mngr_poll()");

54 
	`∆_ˇche_mngr_‰ì
(
mngr
);

57 
	}
}

	@mylibnl/libnl-3.2.25/tests/test-socket-creation.c

1 
	~<√éök/√éök.h
>

2 
	~<î∫o.h
>

4 
	$maö
(
¨gc
, *
¨gv
[])

6 
∆_sock
 *
h
[1025];

7 
i
;

9 
h
[0] = 
	`∆_sockë_Æloc
();

10 
	`¥ötf
("Created handle withÖort 0x%x\n",

11 
	`∆_sockë_gë_loˇl_p‹t
(
h
[0]));

12 
	`∆_sockë_‰ì
(
h
[0]);

13 
h
[0] = 
	`∆_sockë_Æloc
();

14 
	`¥ötf
("Created handle withÖort 0x%x\n",

15 
	`∆_sockë_gë_loˇl_p‹t
(
h
[0]));

16 
	`∆_sockë_‰ì
(
h
[0]);

18 
i
 = 0; i < 1025; i++) {

19 
h
[
i
] = 
	`∆_sockë_Æloc
();

20 i‡(
h
[
i
] =
NULL
)

21 
	`∆_≥º‹
(
ENOMEM
, "UnableÅoállocate socket");

23 
	`¥ötf
("Created handle withÖort 0x%x\n",

24 
	`∆_sockë_gë_loˇl_p‹t
(
h
[
i
]));

28 
	}
}

	@mylibnl/libnl-3.2.25/tests/test-u32-filter-with-actions.c

14 
	~<√éök/rouã/lök.h
>

15 
	~<√éök/rouã/tc.h
>

16 
	~<√éök/rouã/qdisc.h
>

17 
	~<√éök/rouã/˛s/u32.h
>

18 
	~<√éök/rouã/˛assifõr.h
>

19 
	~<√éök/rouã/a˘i⁄.h
>

20 
	~<√éök/rouã/a˘/múªd.h
>

21 
	~<√éök/rouã/˛ass.h
>

22 
	~<löux/if_ëhî.h
>

24 
	~<√éök/©å.h
>

25 
	~<°dio.h
>

26 
	~<°rög.h
>

28 
	#TC_HANDLE
(
maj
, 
mö
Ë(
	`TC_H_MAJ
((majË<< 16Ë| 
	`TC_H_MIN
(mö))

	)

31 
	$gë_u32
(
__u32
 *
vÆ
, c⁄° *
¨g
, 
ba£
)

33 
ªs
;

34 *
±r
;

36 i‡(!
¨g
 || !*arg)

38 
ªs
 = 
	`°πoul
(
¨g
, &
±r
, 
ba£
);

39 i‡(!
±r
 ||Öå =
¨g
 || *±∏|| 
ªs
 > 0xFFFFFFFFUL)

41 *
vÆ
 = 
ªs
;

43 
	}
}

45 
	$gë_u32_h™dÀ
(
__u32
 *
h™dÀ
, c⁄° *
°r
)

47 
__u32
 
htid
=0, 
hash
=0, 
nodeid
=0;

48 *
tmp
 = 
	`°rchr
(
°r
, ':');

50 i‡(
tmp
 =
NULL
) {

51 i‡(
	`memcmp
("0x", 
°r
, 2) == 0)

52  
	`gë_u32
(
h™dÀ
, 
°r
, 16);

55 
htid
 = 
	`°πoul
(
°r
, &
tmp
, 16);

56 i‡(
tmp
 =
°r
 && *str != ':' && *str != 0)

58 i‡(
htid
>=0x1000)

60 i‡(*
tmp
) {

61 
°r
 = 
tmp
+1;

62 
hash
 = 
	`°πoul
(
°r
, &
tmp
, 16);

63 i‡(
tmp
 =
°r
 && *str != ':' && *str != 0)

65 i‡(
hash
>=0x100)

67 i‡(*
tmp
) {

68 
°r
 = 
tmp
+1;

69 
nodeid
 = 
	`°πoul
(
°r
, &
tmp
, 16);

70 i‡(
tmp
 =
°r
 && *str != 0)

72 i‡(
nodeid
>=0x1000)

76 *
h™dÀ
 = (
htid
<<20)|(
hash
<<12)|
nodeid
;

78 
	}
}

80 
uöt32_t
 
	$gë_u32_∑r£_h™dÀ
(c⁄° *
cH™dÀ
)

82 
uöt32_t
 
h™dÀ
=0;

84 if(
	`gë_u32_h™dÀ
(&
h™dÀ
, 
cH™dÀ
)) {

85 
	`¥ötf
 ("Illegal \"ht\"\n");

89 i‡(
h™dÀ
 && 
	`TC_U32_NODE
(handle)) {

90 
	`¥ötf
("\"link\" must beá hashÅable.\n");

93  
h™dÀ
;

94 
	}
}

102 
	$u32_add_fûãr_⁄_ht_wôh_hashmask
(
∆_sock
 *
sock
, 
π∆_lök
 *
π∆Lök
, 
uöt32_t
 
¥io
,

103 
uöt32_t
 
keyvÆ
, uöt32_à
keymask
, 
keyoff
, 
keyoffmask
,

104 
uöt32_t
 
htid
, uöt32_à
héök
, uöt32_à
hmask
, uöt32_à
hoff£t
, 
π∆_a˘
 *
a˘
)

106 
π∆_˛s
 *
˛s
;

107 
îr
;

109 
˛s
=
	`π∆_˛s_Æloc
();

110 i‡(!(
˛s
)) {

111 
	`¥ötf
("CanÇotállocate classifier\n");

112 
	`∆_sockë_‰ì
(
sock
);

113 
	`exô
(1);

116 
	`π∆_tc_£t_lök
(
	`TC_CAST
(
˛s
), 
π∆Lök
);

118 i‡((
îr
 = 
	`π∆_tc_£t_köd
(
	`TC_CAST
(
˛s
), "u32"))) {

119 
	`¥ötf
("CanÇot set classifierás u32\n");

123 
	`π∆_˛s_£t_¥io
(
˛s
, 
¥io
);

124 
	`π∆_˛s_£t_¥Ÿocﬁ
(
˛s
, 
ETH_P_IP
);

126 
	`π∆_tc_£t_∑ª¡
(
	`TC_CAST
(
˛s
), 
	`TC_HANDLE
(0xffff, 0));

128 i‡(
htid
)

129 
	`π∆_u32_£t_hashèbÀ
(
˛s
, 
htid
);

131 
	`π∆_u32_add_key_uöt32
(
˛s
, 
keyvÆ
, 
keymask
, 
keyoff
, 
keyoffmask
);

133 
	`π∆_u32_£t_hashmask
(
˛s
, 
hmask
, 
hoff£t
);

135 
	`π∆_u32_£t_lök
(
˛s
, 
héök
);

137 
	`π∆_u32_add_a˘i⁄
(
˛s
, 
a˘
);

140 i‡((
îr
 = 
	`π∆_˛s_add
(
sock
, 
˛s
, 
NLM_F_CREATE
))) {

141 
	`¥ötf
("C™ÇŸádd cœssifõr: %s\n", 
	`∆_gëîr‹
(
îr
));

144 
	`π∆_˛s_put
(
˛s
);

146 
	}
}

152 
	$u32_add_ht
(
∆_sock
 *
sock
, 
π∆_lök
 *
π∆Lök
, 
uöt32_t
 
¥io
, uöt32_à
htid
, uöt32_à
divis‹
)

155 
îr
;

156 
π∆_˛s
 *
˛s
;

158 
˛s
=
	`π∆_˛s_Æloc
();

159 i‡(!(
˛s
)) {

160 
	`¥ötf
("CanÇotállocate classifier\n");

161 
	`∆_sockë_‰ì
(
sock
);

162 
	`exô
(1);

165 
	`π∆_tc_£t_lök
(
	`TC_CAST
(
˛s
), 
π∆Lök
);

167 i‡((
îr
 = 
	`π∆_tc_£t_köd
(
	`TC_CAST
(
˛s
), "u32"))) {

168 
	`¥ötf
("CanÇot set classifierás u32\n");

172 
	`π∆_˛s_£t_¥io
(
˛s
, 
¥io
);

173 
	`π∆_˛s_£t_¥Ÿocﬁ
(
˛s
, 
ETH_P_IP
);

174 
	`π∆_tc_£t_∑ª¡
(
	`TC_CAST
(
˛s
), 
	`TC_HANDLE
(0xffff, 0));

176 
	`π∆_u32_£t_h™dÀ
(
˛s
, 
htid
, 0x0, 0x0);

178 
	`π∆_u32_£t_divis‹
(
˛s
, 
divis‹
);

180 i‡((
îr
 = 
	`π∆_˛s_add
(
sock
, 
˛s
, 
NLM_F_CREATE
))) {

181 
	`¥ötf
("C™ÇŸádd cœssifõr: %s\n", 
	`∆_gëîr‹
(
îr
));

184 
	`π∆_˛s_put
(
˛s
);

186 
	}
}

192 
	$qdisc_add_ögªss
(
∆_sock
 *
sock
, 
π∆_lök
 *
π∆Lök
)

195 
π∆_qdisc
 *
qdisc
;

196 
îr
;

199 i‡(!(
qdisc
 = 
	`π∆_qdisc_Æloc
())) {

200 
	`¥ötf
("CanÇotállocate Qdisc\n");

205 
	`π∆_tc_£t_lök
(
	`TC_CAST
(
qdisc
), 
π∆Lök
);

206 
	`π∆_tc_£t_∑ª¡
(
	`TC_CAST
(
qdisc
), 
TC_H_ROOT
);

209 
	`π∆_qdisc_dñëe
(
sock
, 
qdisc
);

212 
	`π∆_tc_£t_h™dÀ
(
	`TC_CAST
(
qdisc
), 
	`TC_HANDLE
(0xffff, 0));

214 i‡((
îr
 = 
	`π∆_tc_£t_köd
(
	`TC_CAST
(
qdisc
), "ingress"))) {

215 
	`¥ötf
("CanÇotállocate ingress\n");

220 i‡((
îr
 = 
	`π∆_qdisc_add
(
sock
, 
qdisc
, 
NLM_F_CREATE
))) {

221 
	`¥ötf
("CanÇotállocate ingress Qdisc\n");

226 
	`π∆_qdisc_put
(
qdisc
);

229 
	}
}

231 
	$maö
()

233 
∆_sock
 *
sock
;

234 
π∆_lök
 *
lök
;

235 
uöt32_t
 
ht
, 
héök
, 
htid
, 
dúe˘i⁄
;

236 
chashlök
[16]="";

237 
îr
;

238 
∆_ˇche
 *
lök_ˇche
;

239 
π∆_a˘
 *
a˘
;

241 i‡(!(
sock
 = 
	`∆_sockë_Æloc
())) {

242 
	`¥ötf
("UnableÅoállocateÇetlink socket\n");

243 
	`exô
(1);

246 i‡((
îr
 = 
	`∆_c⁄√˘
(
sock
, 
NETLINK_ROUTE
)) < 0 ) {

247 
	`¥ötf
("Nu s-aÖutut conectaÜa NETLINK!\n");

248 
	`∆_sockë_‰ì
(
sock
);

249 
	`exô
(1);

252 i‡((
îr
 = 
	`π∆_lök_Æloc_ˇche
(
sock
, 
AF_UNSPEC
, &
lök_ˇche
)) < 0) {

253 
	`¥ötf
("UnableÅoállocateÜink cache: %s\n",

254 
	`∆_gëîr‹
(
îr
));

255 
	`∆_sockë_‰ì
(
sock
);

256 
	`exô
(1);

260 i‡(!(
lök
 = 
	`π∆_lök_gë_by_«me
(
lök_ˇche
, "eth0"))) {

262 
	`¥ötf
("InterfaceÇot found\n");

263 
	`∆_sockë_‰ì
(
sock
);

264 
	`exô
(1);

267 
îr
=
	`qdisc_add_ögªss
(
sock
, 
lök
);

287 
uöt32_t
 
i
;

288 
i
 = 1; i <= 0xf; i++)

289 
	`u32_add_ht
(
sock
, 
lök
, 1, 
i
, 256);

306 
dúe˘i⁄
 = 16;

318 
	`°r˝y
(
chashlök
, "1:");

321 
héök
 = 0x0;

323 if(
	`gë_u32_h™dÀ
(&
héök
, 
chashlök
)) {

324 
	`¥ötf
 ("Illegal \"link\"");

325 
	`∆_sockë_‰ì
(
sock
);

326 
	`exô
(1);

331 i‡(
héök
 && 
	`TC_U32_NODE
(htlink)) {

332 
	`¥ötf
("\"link\" must beá hashÅable.\n");

333 
	`∆_sockë_‰ì
(
sock
);

334 
	`exô
(1);

355 
	`u32_add_fûãr_⁄_ht_wôh_hashmask
(
sock
, 
lök
, 1,

356 0x0, 0x0, 
dúe˘i⁄
, 0,

357 0, 
héök
, 0xff000000, 
dúe˘i⁄
, 
NULL
);

377 
a˘
 = 
	`π∆_a˘_Æloc
();

378 i‡(!
a˘
) {

379 
	`¥ötf
("π∆_a˘_Æloc(Ëªtu∫†%p\n", 
a˘
);

382 
	`π∆_tc_£t_köd
(
	`TC_CAST
(
a˘
), "mirred");

383 
	`π∆_múªd_£t_a˘i⁄
(
a˘
, 
TCA_EGRESS_REDIR
);

384 
	`π∆_múªd_£t_pﬁicy
(
a˘
, 
TC_ACT_STOLEN
);

385 
	`π∆_múªd_£t_ifödex
(
a˘
, 
	`π∆_lök_«me2i
(
lök_ˇche
, "eth1"));

389 
ht
=
	`gë_u32_∑r£_h™dÀ
("1:a:");

390 
htid
 = (
ht
&0xFFFFF000);

391 
héök
=
	`gë_u32_∑r£_h™dÀ
("2:");

393 
	`u32_add_fûãr_⁄_ht_wôh_hashmask
(
sock
, 
lök
, 1,

394 0x0a000000, 0xff000000, 
dúe˘i⁄
, 0,

395 
htid
, 
héök
, 0x00ff0000, 
dúe˘i⁄
, 
a˘
);

397 
	`π∆_a˘_put
(
a˘
);

398 
	`∆_sockë_‰ì
(
sock
);

400 
	}
}

	@mylibnl/libnl-3.2.25/tests/util.h

1 
	~<check.h
>

3 
	#∆_Áû_if
(
c⁄dôi⁄
, 
îr‹
, 
mesßge
) \

4 
	`Áû_if
((
c⁄dôi⁄
), "nlerr=%d (%s): %s", \

5 (
îr‹
), 
	`∆_gëîr‹
”º‹), (
mesßge
))

	)

	@net_interface/interface.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/sockë.h
>

15 
	~<√töë/ö.h
>

16 
	~"öãrÁ˚.h
"

17 
	#DEFAULT_CMD_SIZE
 128

	)

19 
	$√t•a˚_¸óã
(c⁄° * 
«me
)

21 
ªt
 = 0;

22 
cmd
[
DEFAULT_CMD_SIZE
]={0};

23 if(!
«me
)

25 
	`•rötf
(
cmd
, "ùÇën†add %s", 
«me
);

26 
ªt
 = 
	`sy°em
(
cmd
);

27  
ªt
;

28 
	}
}

29 
	$√t•a˚_dñ
(c⁄° * 
«me
)

31 
ªt
 = 0;

32 
cmd
[
DEFAULT_CMD_SIZE
]={0};

33 if(!
«me
)

35 
	`•rötf
(
cmd
, "ùÇën†dñëê%s", 
«me
);

36 
ªt
 = 
	`sy°em
(
cmd
);

37  
ªt
;

38 
	}
}

40 
	$√t•a˚_gë
(c⁄° * 
«me
)

43 
	}
}

51 
	$vútuÆ_öãrÁ˚_¸óã
(c⁄° * 
if_e
, c⁄° *
if_v
)

53 
ªt
 = 0;

54 
cmd
[
DEFAULT_CMD_SIZE
]={0};

55 if(!
if_e
 || !
if_v
)

57 
	`•rötf
(
cmd
, "ùÜökádd %†ty≥ vëhÖì∏«mê%s", 
if_e
, 
if_v
);

58 
ªt
 = 
	`sy°em
(
cmd
);

59  
ªt
;

60 
	}
}

74 
	$vútuÆ_öãrÁ˚_dñ
(c⁄° * 
if_e
)

76 
ªt
 = 0;

77 
cmd
[
DEFAULT_CMD_SIZE
]={0};

78 if(!
if_e
)

80 
	`•rötf
(
cmd
, "ùÜök dñëê%s", 
if_e
);

81 
ªt
 = 
	`sy°em
(
cmd
);

82  
ªt
;

83 
	}
}

96 
	$öãrÁ˚_£t_addr
(c⁄° * 
öãrÁ˚
, 
ö_addr
 
addr
)

98 
ªt
;

99 
cmd
[
DEFAULT_CMD_SIZE
]={0};

100 * 
addªss
 = 
NULL
;

101 
addªss
 = 
	`öë_¡ﬂ
(
addr
);

102 
	`•rötf
(
cmd
, "ùáddªs†add %s/24 dev %s", 
addªss
, 
öãrÁ˚
);

103 
ªt
 = 
	`sy°em
(
cmd
);

105 
	}
}

116 
	$öãrÁ˚_dñ_addr
(c⁄° * 
öãrÁ˚
)

118 
ªt
;

119 
cmd
[
DEFAULT_CMD_SIZE
]={0};

120 if(!
öãrÁ˚
)

122 
	`•rötf
(
cmd
, "ùáddªs†Êush dev %s", 
öãrÁ˚
);

123 
ªt
 = 
	`sy°em
(
cmd
);

124  
ªt
;

125 
	}
}

138 
	$öãrÁ˚_to_«me•a˚
(c⁄° * 
«me_•a˚
, c⁄° * 
öãrÁ˚
)

140 
ªt
 = 0;

141 
cmd
[
DEFAULT_CMD_SIZE
]={0};

142 if(!
«me_•a˚
 || !
öãrÁ˚
)

144 
	`•rötf
(
cmd
, "ùÜök së dev %†√ä†%s", 
öãrÁ˚
, 
«me_•a˚
);

145 
ªt
 = 
	`sy°em
(
cmd
);

146  
ªt
;

149 
	}
}

160 
	$öãrÁ˚_£t_up
(c⁄° * 
öãrÁ˚
)

162 
ªt
;

163 
cmd
[
DEFAULT_CMD_SIZE
]={0};

164 if(!
öãrÁ˚
)

166 
	`•rötf
(
cmd
, "ùÜök së %†up", 
öãrÁ˚
);

167 
ªt
 = 
	`sy°em
(
cmd
);

168  
ªt
;

169 
	}
}

182 
	$def_rouãr_£t
(
ö_addr
 
addr
)

184 
ªt
;

185 
cmd
[
DEFAULT_CMD_SIZE
]={0};

186 * 
addªss
 = 
NULL
;

187 
addªss
 = 
	`öë_¡ﬂ
(
addr
);

188 if(!
addªss
)

190 
	`•rötf
(
cmd
, "ùÑouãádd deÁu… vü %s", 
addªss
);

191 
ªt
 = 
	`sy°em
(
cmd
);

193 
	}
}

206 
to
 do

208 
	e«t_ruÀ


210 
¢©_ruÀ
 
	m¢©
;

211 
d«t_ruÀ
 
	md«t
;

212 }
	t«t_ruÀ
;

214 *
	$d«t_make_cmd
(
d«t_ruÀ
 *
ruÀ
)

216 *
cmd
;

217 *
cù
;

218 
cù
 = 
	`öë_¡ﬂ
(
ruÀ
->
addr
);

219 if(!
cù
)

220  
NULL
;

221 
cmd
 = (*)
	`ˇŒoc
(
DEFAULT_CMD_SIZE
, ());

222 if(!
cmd
)

223  
NULL
;

224 
	`•rötf
(
cmd
," PREROUTING -pÅcp --dport %d -i %s -j DNAT --to %s:%d",

225 
ruÀ
->
dp‹t
,ÑuÀ->
dev_«me
, 
cù
,ÑuÀ->
˝‹t
);

226  
cmd
;

227 
	}
}

229 *
	$¢©_make_cmd
(
¢©_ruÀ
 *
ruÀ
)

231 *
cmd
;

232 *
sù
;

233 
cmd
 = (*)
	`ˇŒoc
(
DEFAULT_CMD_SIZE
, ());

234 if(!
cmd
)

235  
NULL
;

236 
sù
 = 
	`öë_¡ﬂ
(
ruÀ
->
addr
);

237 
	`•rötf
(
cmd
," POSTROUTING -s %s -o %s -j MASQUERADE",

238 
sù
, 
ruÀ
->
öãrÁ˚
);

239  
cmd
;

240 
	}
}

243 
	$d«t_ruÀ_£t
(
d«t_ruÀ
 *
ruÀ
, ** 
cmd_d©a
, *
Àn
)

245 
ªt
;

246 *
d©a
;

247 
cmd
[
DEFAULT_CMD_SIZE
]={0};

248 if(!
ruÀ
 || !
cmd_d©a
)

250 
d©a
 = 
	`d«t_make_cmd
(
ruÀ
);

251 if(!
d©a
)

253 
	`•rötf
(
cmd
,"ùèbÀ†-à«à-A %s", 
d©a
);

254 
ªt
 = 
	`sy°em
(
cmd
);

255 if(
ªt
 > 0)

257 *
cmd_d©a
 = 
d©a
;

258 *
Àn
 = 
	`°æí
(
d©a
);

262 
	}
}

264 
	$¢©_ruÀ_£t
(
¢©_ruÀ
 * 
ruÀ
, **
cmd_d©a
, *
Àn
)

266 
ªt
;

267 *
d©a
;

268 
cmd
[
DEFAULT_CMD_SIZE
]={0};

269 if(!
ruÀ
 || !
cmd_d©a
)

271 
d©a
 = 
	`¢©_make_cmd
(
ruÀ
);

272 if(!
d©a
)

274 
	`•rötf
(
cmd
,"ùèbÀ†-à«à-A %s", 
d©a
);

275 
ªt
 = 
	`sy°em
(
cmd
);

276 if(
ªt
 > 0)

278 *
cmd_d©a
 = 
d©a
;

279 *
Àn
 = 
	`°æí
(
d©a
);

283 
	}
}

285 
	$«t_ruÀ_dñ
(c⁄° * 
cmd_d©a
)

287 
ªt
;

288 
cmd
[
DEFAULT_CMD_SIZE
]={0};

289 if(!
cmd_d©a
)

291 
	`•rötf
(
cmd
, "ùèbÀ†-à«à-D %s",
cmd_d©a
);

292 
ªt
 = 
	`sy°em
(
cmd
);

293  
ªt
;

294 
	}
}

	@net_interface/interface.h

7 #i‚de‡
MATRIX_INTERFACE_H


8 
	#MATRIX_INTERFACE_H


	)

9 
	~<¨∑/öë.h
>

10 
	sd«t_ruÀ


12 c⁄° * 
	mdev_«me
;

13 
	mdp‹t
;

14 
ö_addr
 
	maddr
;

15 
	m˝‹t
;

16 }
	td«t_ruÀ
;

18 
	s¢©_ruÀ


20 c⁄° * 
	möãrÁ˚
;

21 
ö_addr
 
	maddr
;

22 
ö_addr
 
	mmask
;

23 }
	t¢©_ruÀ
;

25 
√t•a˚_¸óã
(c⁄° * 
«me
);

26 
√t•a˚_dñ
(c⁄° * 
«me
);

27 
vútuÆ_öãrÁ˚_¸óã
(c⁄° * 
if_e
, c⁄° *
if_v
);

28 
vútuÆ_öãrÁ˚_dñ
(c⁄° * 
if_e
);

29 
öãrÁ˚_£t_addr
(c⁄° * 
öãrÁ˚
, 
ö_addr
 
addr
);

30 
öãrÁ˚_dñ_addr
(c⁄° * 
öãrÁ˚
);

31 
öãrÁ˚_to_«me•a˚
(c⁄° * 
«me_•a˚
, c⁄° * 
öãrÁ˚
);

32 
öãrÁ˚_£t_up
(c⁄° * 
öãrÁ˚
);

33 
def_rouãr_£t
(
ö_addr
 
addr
);

34 *
d«t_make_cmd
(
d«t_ruÀ
 *
ruÀ
);

35 *
¢©_make_cmd
(
¢©_ruÀ
 *
ruÀ
);

36 
d«t_ruÀ_£t
(
d«t_ruÀ
 *
ruÀ
, ** 
cmd_d©a
, *
Àn
);

37 
¢©_ruÀ_£t
(
¢©_ruÀ
 * 
ruÀ
, **
cmd_d©a
, *
Àn
);

38 
«t_ruÀ_dñ
(c⁄° * 
cmd_d©a
);

	@net_interface/main.c

7 
	#_GNU_SOURCE


	)

8 
	~<sys/ty≥s.h
>

9 
	~<sys/waô.h
>

10 
	~<sys/mou¡.h
>

11 
	~<°dio.h
>

12 
	~<sched.h
>

13 
	~<sig«l.h
>

14 
	~<uni°d.h
>

15 
	~<°dlib.h
>

17 
	~<sys/sockë.h
>

18 
	~<√töë/ö.h
>

19 
	~<¨∑/öë.h
>

20 
	~"öãrÁ˚.h
"

21 
	#STACK_SIZE
 (1024 * 1024)

	)

24 
	gcheckpoöt
[2];

26 
	gchûd_°ack
[
STACK_SIZE
];

27 * c⁄° 
	gchûd_¨gs
[] = {

29 
NULL


31 
	schûd_¨gv


33 * 
	möãrÁ˚_«me
;

34 
ö_addr
 
	maddªss
;

35 
ö_addr
 
	mrouãr
;

36 }
	tchûd_¨gv
;

39 
	$chûd_maö
(* 
¨g
)

41 
c
;

42 
chûd_¨gv
 *
∑øm
 = (chûd_¨gv *)
¨g
;

44 
	`˛o£
(
checkpoöt
[1]);

47 
	`¥ötf
(" - [%5d] W‹ld !\n", 
	`gëpid
());

48 
	`£tho°«me
("In Namespace", 12);

51 
	`mou¡
("¥oc", "/¥oc", "¥oc", 0, 
NULL
);

54 
	`ªad
(
checkpoöt
[0], &
c
, 1);

57 
	`öãrÁ˚_£t_up
("lo");

58 
	`öãrÁ˚_£t_addr
(
∑øm
->
öãrÁ˚_«me
,Ö¨am->
addªss
);

59 
	`öãrÁ˚_£t_up
(
∑øm
->
öãrÁ˚_«me
);

60 
	`def_rouãr_£t
(
∑øm
->
rouãr
);

62 
	`sy°em
("ipÜink setÜo up");

63 
	`sy°em
("ipÜink set veth11 up");

64 
	`sy°em
("ipáddrádd 169.254.1.2/30 dev veth11");

66 
	`execv
(
chûd_¨gs
[0], child_args);

67 
	`¥ötf
("Ooops\n");

69 
	}
}

70 
	$maö
()

72 
chûd_¨gv
 
c_¨gv
;

73 
•a˚_«me
[10]={0};

74 *
ve_«me
 = "veth0";

75 *
vv_«me
 = "vveth0";

76 *
vvëh0_addr
 = "192.168.8.2";

77 *
vëh0_addr
 = "192.168.8.1";

79 
¢©_ruÀ
 
s_ruÀ
;

80 
d«t_ruÀ
 
d_ruÀ
;

81 *
¢©_°r
 = 
NULL
, *
d«t_°r
 = NULL;

82 
¢©_Àn
, 
d«t_Àn
;

83 
ö_addr
 
ve_ù
, 
vve_ù
;

87 if(
	`öë_©⁄
(
vvëh0_addr
, &
vve_ù
) == 0)

89 
	`¥ötf
("addressÉrror\r\n");

92 if(
	`öë_©⁄
(
vëh0_addr
, &
ve_ù
) == 0)

94 
	`¥ötf
("addressÉrror\r\n");

97 
s_ruÀ
.
öãrÁ˚
 = 
d_ruÀ
.
dev_«me
 = "eth0";

98 
s_ruÀ
.
addr
 = 
vve_ù
;

100 
d_ruÀ
.
dp‹t
 = d_ruÀ.
˝‹t
 = 9999;

101 
d_ruÀ
.
addr
 = 
vve_ù
;

103 
c_¨gv
.
öãrÁ˚_«me
 = 
vv_«me
;

104 
c_¨gv
.
addªss
 = 
vve_ù
;

105 
c_¨gv
.
rouãr
 = 
ve_ù
;

107 
	`pùe
(
checkpoöt
);

109 
	`¥ötf
(" - [%5d] Hñlÿ?\n", 
	`gëpid
());

111 
chûd_pid
 = 
	`˛⁄e
(
chûd_maö
, 
chûd_°ack
+
STACK_SIZE
,

112 
CLONE_NEWUTS
 | 
CLONE_NEWIPC
 | 
CLONE_NEWPID
 | 
CLONE_NEWNS
 | 
CLONE_NEWNET
 | 
SIGCHLD
, &
c_¨gv
);

114 
	`•rötf
(
•a˚_«me
, "%d", ()
chûd_pid
);

115 
	`¥ötf
("chûdÖid i†%s\r\n", 
•a˚_«me
);

118 
	`vútuÆ_öãrÁ˚_¸óã
(
ve_«me
, 
vv_«me
);

120 
	`öãrÁ˚_to_«me•a˚
(
•a˚_«me
, 
vv_«me
);

122 
	`öãrÁ˚_£t_addr
(
ve_«me
, 
ve_ù
);

123 
	`öãrÁ˚_£t_up
(
ve_«me
);

126 
	`d«t_ruÀ_£t
(&
d_ruÀ
, &
d«t_°r
, &
d«t_Àn
);

127 
	`¢©_ruÀ_£t
(&
s_ruÀ
, &
¢©_°r
, &
¢©_Àn
);

130 
	`˛o£
(
checkpoöt
[1]);

132 
	`waôpid
(
chûd_pid
, 
NULL
, 0);

133 if(!
d«t_°r
)

134 
	`«t_ruÀ_dñ
(
d«t_°r
);

135 if(!
¢©_°r
)

136 
	`«t_ruÀ_dñ
(
¢©_°r
);

137 
	`vútuÆ_öãrÁ˚_dñ
(
ve_«me
);

140 
	}
}

	@net_interface/process_manager.h

7 #i‚de‡
MARTIX_PROCESS_MANAGER_H


8 
	#MARTIX_PROCESS_MANAGER_H


	)

9 
¥o˚ss_c⁄fig_gë
();

10 
¥o˚ss_°¨t
();

11 
¥o˚ss_°›
();

12 
¥o˚ss_°©us_gë
();

	@net_space/net_space.c

7 
	#_GNU_SOURCE


	)

8 
	~<sys/ty≥s.h
>

9 
	~<sys/waô.h
>

10 
	~<sys/mou¡.h
>

11 
	~<°dio.h
>

12 
	~<sched.h
>

13 
	~<sig«l.h
>

14 
	~<uni°d.h
>

15 
	~<°dlib.h
>

17 
	#STACK_SIZE
 (1024 * 1024)

	)

20 
	gcheckpoöt
[2];

22 
	gchûd_°ack
[
STACK_SIZE
];

23 * c⁄° 
	gchûd_¨gs
[] = {

25 
NULL


28 
	$chûd_maö
(* 
¨g
)

30 
c
;

33 
	`˛o£
(
checkpoöt
[1]);

36 
	`¥ötf
(" - [%5d] W‹ld !\n", 
	`gëpid
());

37 
	`£tho°«me
("In Namespace", 12);

40 
	`mou¡
("¥oc", "/¥oc", "¥oc", 0, 
NULL
);

43 
	`ªad
(
checkpoöt
[0], &
c
, 1);

46 
	`sy°em
("ipÜink setÜo up");

47 
	`sy°em
("ipÜink set veth11 up");

48 
	`sy°em
("ipáddrádd 169.254.1.2/30 dev veth11");

50 
	`execv
(
chûd_¨gs
[0], child_args);

51 
	`¥ötf
("Ooops\n");

53 
	}
}

55 
	$maö
()

58 
	`pùe
(
checkpoöt
);

60 
	`¥ötf
(" - [%5d] Hñlÿ?\n", 
	`gëpid
());

62 
chûd_pid
 = 
	`˛⁄e
(
chûd_maö
, 
chûd_°ack
+
STACK_SIZE
,

63 
CLONE_NEWUTS
 | 
CLONE_NEWIPC
 | 
CLONE_NEWPID
 | 
CLONE_NEWNS
 | 
CLONE_NEWNET
 | 
SIGCHLD
, 
NULL
);

66 * 
cmd
;

67 
	`a•rötf
(&
cmd
, "ùÜök së vëh11Çën†%d", 
chûd_pid
);

68 
	`sy°em
("ipÜinkádd veth01Åype vethÖeerÇame veth11");

69 
	`sy°em
(
cmd
);

70 
	`sy°em
("ipÜink set veth01 up");

71 
	`sy°em
("ipáddrádd 169.254.1.1/30 dev veth01");

72 
	`‰ì
(
cmd
);

75 
	`˛o£
(
checkpoöt
[1]);

77 
	`waôpid
(
chûd_pid
, 
NULL
, 0);

79 
	}
}

	@route.c

36 
	~<√t/rouã.h
>

37 
	~<√t/if.h
>

39 
	~"libbb.h
"

40 
	~"öë_comm⁄.h
"

43 #i‚de‡
RTF_UP


45 
	#RTF_UP
 0x0001

	)

46 
	#RTF_GATEWAY
 0x0002

	)

47 
	#RTF_HOST
 0x0004

	)

48 
	#RTF_REINSTATE
 0x0008

	)

49 
	#RTF_DYNAMIC
 0x0010

	)

50 
	#RTF_MODIFIED
 0x0020

	)

51 
	#RTF_MTU
 0x0040

	)

52 #i‚de‡
RTF_MSS


53 
	#RTF_MSS
 
RTF_MTU


	)

55 
	#RTF_WINDOW
 0x0080

	)

56 
	#RTF_IRTT
 0x0100

	)

57 
	#RTF_REJECT
 0x0200

	)

60 #i‡
deföed
(
SIOCADDRTOLD
Ë|| deföed(
RTF_IRTT
)

61 
	#HAVE_NEW_ADDRT
 1

	)

64 #i‡
HAVE_NEW_ADDRT


65 
	#mask_ö_addr
(
x
Ë(((
sockaddr_ö
 *)&((x).
π_gímask
))->
sö_addr
.
s_addr
)

	)

66 
	#fuŒ_mask
(
x
Ë(x)

	)

68 
	#mask_ö_addr
(
x
Ë((x).
π_gímask
)

	)

69 
	#fuŒ_mask
(
x
Ë(((
sockaddr_ö
 *)&(x))->
sö_addr
.
s_addr
)

	)

73 
	#RTACTION_ADD
 1

	)

74 
	#RTACTION_DEL
 2

	)

79 
	#NET_FLAG
 1

	)

80 
	#HOST_FLAG
 2

	)

83 c⁄° 
	gtbl_hash_√t_ho°
[] 
	gALIGN1
 =

89 
	#KW_TAKES_ARG
 020

	)

90 
	#KW_SETS_FLAG
 040

	)

92 
	#KW_IPVx_METRIC
 020

	)

93 
	#KW_IPVx_NETMASK
 021

	)

94 
	#KW_IPVx_GATEWAY
 022

	)

95 
	#KW_IPVx_MSS
 023

	)

96 
	#KW_IPVx_WINDOW
 024

	)

97 
	#KW_IPVx_IRTT
 025

	)

98 
	#KW_IPVx_DEVICE
 026

	)

100 
	#KW_IPVx_FLAG_ONLY
 040

	)

101 
	#KW_IPVx_REJECT
 040

	)

102 
	#KW_IPVx_MOD
 041

	)

103 
	#KW_IPVx_DYN
 042

	)

104 
	#KW_IPVx_REINSTATE
 043

	)

106 c⁄° 
	gtbl_ùvx
[] 
	gALIGN1
 =

108 #i‡
HAVE_NEW_ADDRT


116 #ifde‡
RTF_IRTT


122 #ifde‡
RTF_REJECT


131 c⁄° 
	gÊags_ùvx
[] = {

132 #ifde‡
RTF_REJECT


133 
RTF_REJECT
,

135 
RTF_MODIFIED
,

136 
RTF_DYNAMIC
,

137 
RTF_REINSTATE


140 
	$kw_lookup
(c⁄° *
kwtbl
, ***
∑rgs
)

142 i‡(**
∑rgs
) {

144 i‡(
	`°rcmp
(
kwtbl
+2, **
∑rgs
) == 0) {

145 *
∑rgs
 += 1;

146 i‡(
kwtbl
[1] & 
KW_TAKES_ARG
) {

147 i‡(!**
∑rgs
) {

148 
	`bb_show_ußge
();

150 *
∑rgs
 += 1;

152  
kwtbl
[1];

154 
kwtbl
 += *kwtbl;

155 } *
kwtbl
);

158 
	}
}

163 
	$add_deÁu…_rouã
(
ö_addr
 
addr
)

165 
skfd
;

166 
ªt
;

167 
π_buf
[(
πíåy
)];

168 
πíåy
 *c⁄° 
π
 = (*)
π_buf
;

169 
	`mem£t
(
π
, 0, (*rt));

171 
π
->
π_d°
.
sö_Ámûy
 = 
AF_INET
;

172 
π
->
π_d°
.
sö_p‹t
 = 0;

173 
π
->
π_d°
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

176 
π
->
π_g©eway
.
sö_Ámûy
 = 
AF_INET
;

177 
π
->
π_g©eway
.
sö_p‹t
 = 0;

178 
π
->
π_d°
.
sö_addr
 = 
addr
;

181 
π
->
π_Êags
 = 
RTF_HOST
;

182 
π
->
π_Êags
 |
RTF_GATEWAY
;

184 
	`mask_ö_addr
(*
π
) = 0xffffffff;

187 
skfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

188 if(
skfd
 < 0)

190 
	`¥ötf
("create socket failed\r\n");

193 
ªt
 = 
	`io˘l
(
skfd
, 
SIOCADDRT
, 
π
);

194 if(
ªt
 == -1)

196 
	`¥ötf
("£àdeÁu…Ñouã faûed,%s\r\n", 
	`°ªº‹
(
î∫o
));

198 
	`˛o£
(
skfd
);

199 
	}
}

200 
NOINLINE
 
	$INET_£åouã
(
a˘i⁄
, **
¨gs
)

203 
π_buf
[(
πíåy
)];

204 
πíåy
 *c⁄° 
π
 = (*)
π_buf
;

206 c⁄° *
√tmask
 = 
NULL
;

207 
skfd
, 
i¢ë
, 
xÊag
;

210 
xÊag
 = 
	`kw_lookup
(
tbl_hash_√t_ho°
, &
¨gs
);

213 i‡(*
¨gs
 =
NULL
) {

214 
	`bb_show_ußge
();

218 
	`mem£t
(
π
, 0, (*rt));

221 c⁄° *
èrgë
 = *
¨gs
++;

222 *
¥efix
;

226 
√tmask
 = "default";

228 
i¢ë
 = 
	`INET_ªsﬁve
(
èrgë
, (
sockaddr_ö
 *Ë&
π
->
π_d°
,

229 (
xÊag
 & 
HOST_FLAG
));

230 i‡(
i¢ë
 < 0) {

231 
	`bb_îr‹_msg_™d_dõ
("ªsﬁvög %s", 
èrgë
);

235 i‡(
xÊag
) {

236 
i¢ë
 = (
xÊag
 & 
NET_FLAG
);

240 
π
->
π_Êags
 = ((
i¢ë
Ë? 
RTF_UP
 : (RTF_UP | 
RTF_HOST
));

242 *
¨gs
) {

243 
k
 = 
	`kw_lookup
(
tbl_ùvx
, &
¨gs
);

244 c⁄° *
¨gs_m1
 = 
¨gs
[-1];

246 i‡(
k
 & 
KW_IPVx_FLAG_ONLY
) {

247 
π
->
π_Êags
 |
Êags_ùvx
[
k
 & 3];

252 i‡(
k
 =
KW_IPVx_GATEWAY
) {

253 i‡(
π
->
π_Êags
 & 
RTF_GATEWAY
) {

254 
	`bb_show_ußge
();

257 
i¢ë
 = 
	`INET_ªsﬁve
(
¨gs_m1
,

258 (
sockaddr_ö
 *Ë&
π
->
π_g©eway
, 1);

259 
π
->
π_Êags
 |
RTF_GATEWAY
;

261 i‡(
i¢ë
) {

262 i‡(
i¢ë
 < 0) {

263 
	`bb_îr‹_msg_™d_dõ
("ªsﬁvög %s", 
¨gs_m1
);

265 
	`bb_îr‹_msg_™d_dõ
("g©eway %†i†®NETWORK", 
¨gs_m1
);

274 i‡(
	`mask_ö_addr
(*
π
)) {

275 
uöt32_t
 
mask
 = 
	`mask_ö_addr
(*
π
);

277 
mask
 = ~
	`¡ohl
(mask);

278 i‡((
π
->
π_Êags
 & 
RTF_HOST
Ë&& 
mask
 != 0xffffffff) {

279 
	`bb_îr‹_msg_™d_dõ
("netmask %.8xánd hostÑoute conflict",

280 (Ë
mask
);

282 i‡(
mask
 & (mask + 1)) {

283 
	`bb_îr‹_msg_™d_dõ
("bogu†√tmask %s", 
√tmask
);

285 
mask
 = ((
sockaddr_ö
 *Ë&
π
->
π_d°
)->
sö_addr
.
s_addr
;

286 i‡(
mask
 & ~(
uöt32_t
)
	`mask_ö_addr
(*
π
)) {

287 
	`bb_îr‹_msg_™d_dõ
("netmaskándÑouteáddress conflict");

292 i‡((
a˘i⁄
 =
RTACTION_ADD
Ë&& (
π
->
π_Êags
 & 
RTF_HOST
)) {

293 
	`mask_ö_addr
(*
π
) = 0xffffffff;

297 
skfd
 = 
	`xsockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

299 i‡(
a˘i⁄
 =
RTACTION_ADD
)

300 
	`xio˘l
(
skfd
, 
SIOCADDRT
, 
π
);

302 
	`xio˘l
(
skfd
, 
SIOCDELRT
, 
π
);

304 i‡(
ENABLE_FEATURE_CLEAN_UP
Ë
	`˛o£
(
skfd
);

305 
	}
}

307 #i‡
ENABLE_FEATURE_IPV6


309 
NOINLINE
 
	$INET6_£åouã
(
a˘i⁄
, **
¨gs
)

311 
sockaddr_ö6
 
ß6
;

312 
ö6_πmsg
 
π
;

313 
¥efix_Àn
, 
skfd
;

314 c⁄° *
dev«me
;

317 c⁄° *
èrgë
 = *
¨gs
++;

319 i‡(
	`°rcmp
(
èrgë
, "default") == 0) {

320 
¥efix_Àn
 = 0;

321 
	`mem£t
(&
ß6
, 0, (sa6));

323 *
˝
;

324 
˝
 = 
	`°rchr
(
èrgë
, '/');

325 i‡(
˝
) {

326 *
˝
 = '\0';

327 
¥efix_Àn
 = 
	`x©oul_ønge
(
˝
 + 1, 0, 128);

329 
¥efix_Àn
 = 128;

331 i‡(
	`INET6_ªsﬁve
(
èrgë
, (
sockaddr_ö6
 *Ë&
ß6
) < 0) {

332 
	`bb_îr‹_msg_™d_dõ
("ªsﬁvög %s", 
èrgë
);

337 
	`mem£t
(&
π
, 0, (rt));

339 
	`mem˝y
(&
π
.
πmsg_d°
, 
ß6
.
sö6_addr
.
s6_addr
, (
ö6_addr
));

342 
π
.
πmsg_d°_Àn
 = 
¥efix_Àn
;

343 
π
.
πmsg_Êags
 = ((
¥efix_Àn
 =128Ë? (
RTF_UP
|
RTF_HOST
) : RTF_UP);

344 
π
.
πmsg_mëric
 = 1;

346 
dev«me
 = 
NULL
;

348 *
¨gs
) {

349 
k
 = 
	`kw_lookup
(
tbl_ùvx
, &
¨gs
);

350 c⁄° *
¨gs_m1
 = 
¨gs
[-1];

352 i‡((
k
 =
KW_IPVx_MOD
Ë|| (k =
KW_IPVx_DYN
)) {

353 
π
.
πmsg_Êags
 |
Êags_ùvx
[
k
 & 3];

357 i‡(
k
 =
KW_IPVx_METRIC
) {

358 
π
.
πmsg_mëric
 = 
	`x©oul
(
¨gs_m1
);

362 i‡(
k
 =
KW_IPVx_GATEWAY
) {

363 i‡(
π
.
πmsg_Êags
 & 
RTF_GATEWAY
) {

364 
	`bb_show_ußge
();

367 i‡(
	`INET6_ªsﬁve
(
¨gs_m1
, (
sockaddr_ö6
 *Ë&
ß6
) < 0) {

368 
	`bb_îr‹_msg_™d_dõ
("ªsﬁvög %s", 
¨gs_m1
);

370 
	`mem˝y
(&
π
.
πmsg_g©eway
, 
ß6
.
sö6_addr
.
s6_addr
,

371 (
ö6_addr
));

372 
π
.
πmsg_Êags
 |
RTF_GATEWAY
;

378 i‡(!
dev«me
 && ((
k
 =
KW_IPVx_DEVICE
Ë|| (!k && !*++
¨gs
))) {

380 
dev«me
 = 
¨gs
[-1];

385 
	`bb_show_ußge
();

389 
skfd
 = 
	`xsockë
(
AF_INET6
, 
SOCK_DGRAM
, 0);

391 
π
.
πmsg_ifödex
 = 0;

393 i‡(
dev«me
) {

394 
i‰eq
 
i‰
;

395 
	`mem£t
(&
i‰
, 0, (ifr));

396 
	`°∫˝y_IFNAMSIZ
(
i‰
.
i‰_«me
, 
dev«me
);

397 
	`xio˘l
(
skfd
, 
SIOCGIFINDEX
, &
i‰
);

398 
π
.
πmsg_ifödex
 = 
i‰
.
i‰_ifödex
;

402 i‡(
a˘i⁄
 =
RTACTION_ADD
)

403 
	`xio˘l
(
skfd
, 
SIOCADDRT
, &
π
);

405 
	`xio˘l
(
skfd
, 
SIOCDELRT
, &
π
);

407 i‡(
ENABLE_FEATURE_CLEAN_UP
Ë
	`˛o£
(
skfd
);

408 
	}
}

411 c⁄° 
	gÊagvÆs
[] = {

412 
RTF_GATEWAY
,

413 
RTF_HOST
,

414 
RTF_REINSTATE
,

415 
RTF_DYNAMIC
,

416 
RTF_MODIFIED
,

417 #i‡
ENABLE_FEATURE_IPV6


418 
RTF_DEFAULT
,

419 
RTF_ADDRCONF
,

420 
RTF_CACHE


424 
	#IPV4_MASK
 (
RTF_GATEWAY
|
RTF_HOST
|
RTF_REINSTATE
|
RTF_DYNAMIC
|
RTF_MODIFIED
)

	)

425 
	#IPV6_MASK
 (
RTF_GATEWAY
|
RTF_HOST
|
RTF_DEFAULT
|
RTF_ADDRCONF
|
RTF_CACHE
)

	)

428 c⁄° 
	gÊagch¨s
[] 
	gALIGN1
 =

430 #i‡
ENABLE_FEATURE_IPV6


435 
	$£t_Êags
(*
Êag°r
, 
Êags
)

437 
i
;

439 *
Êag°r
++ = 'U';

441 
i
 = 0; (*
Êag°r
 = 
Êagch¨s
[i]) != 0; i++) {

442 i‡(
Êags
 & 
ÊagvÆs
[
i
]) {

443 ++
Êag°r
;

446 
	}
}

449 
FAST_FUNC
 
	$bb_di•œyrouãs
(
n‹esﬁve
, 
√t°©fmt
)

451 
dev«me
[64], 
Êags
[16], *
sde°
, *
sgw
;

452 
d
, 
g
, 
m
;

453 
Êgs
, 
ªf
, 
u£
, 
mëric
, 
mtu
, 
wö
, 
ú
;

454 
sockaddr_ö
 
s_addr
;

455 
ö_addr
 
mask
;

457 
FILE
 *
Â
 = 
	`xf›í_f‹_ªad
("/proc/net/route");

459 
	`¥ötf
("Kernel IPÑoutingÅable\n"

461 
√t°©fmt
 ? " MSS Window irtt" : "Metric Ref Use");

463 i‡(
	`fsˇnf
(
Â
, "%*[^\n]\n") < 0) {

464 
ERROR
;

467 
r
;

468 
r
 = 
	`fsˇnf
(
Â
, "%63s%lx%lx%X%d%d%d%lx%d%d%d\n",

469 
dev«me
, &
d
, &
g
, &
Êgs
, &
ªf
, &
u£
, &
mëric
, &
m
,

470 &
mtu
, &
wö
, &
ú
);

471 i‡(
r
 != 11) {

472 i‡((
r
 < 0Ë&& 
	`„of
(
Â
)) {

475 
ERROR
:

476 
	`bb_îr‹_msg_™d_dõ
("fscanf");

479 i‡(!(
Êgs
 & 
RTF_UP
)) {

483 
	`£t_Êags
(
Êags
, (
Êgs
 & 
IPV4_MASK
));

484 #ifde‡
RTF_REJECT


485 i‡(
Êgs
 & 
RTF_REJECT
) {

486 
Êags
[0] = '!';

490 
	`mem£t
(&
s_addr
, 0, (
sockaddr_ö
));

491 
s_addr
.
sö_Ámûy
 = 
AF_INET
;

492 
s_addr
.
sö_addr
.s_add∏
d
;

493 
sde°
 = 
	`INET_ºesﬁve
(&
s_addr
, (
n‹esﬁve
 | 0x8000), 
m
);

494 
s_addr
.
sö_addr
.s_add∏
g
;

495 
sgw
 = 
	`INET_ºesﬁve
(&
s_addr
, (
n‹esﬁve
 | 0x4000), 
m
);

496 
mask
.
s_addr
 = 
m
;

498 
	`¥ötf
("%-15.15†%-15.15†%-16s%-6s", 
sde°
, 
sgw
, 
	`öë_¡ﬂ
(
mask
), 
Êags
);

499 
	`‰ì
(
sde°
);

500 
	`‰ì
(
sgw
);

501 i‡(
√t°©fmt
) {

502 
	`¥ötf
("%5d %-5d %6d %s\n", 
mtu
, 
wö
, 
ú
, 
dev«me
);

504 
	`¥ötf
("%-6d %-2d %7d %s\n", 
mëric
, 
ªf
, 
u£
, 
dev«me
);

507 
	`f˛o£
(
Â
);

508 
	}
}

510 #i‡
ENABLE_FEATURE_IPV6


512 
	$INET6_di•œyrouãs
()

514 
addr6
[128], *
«ddr6
;

521 
addr6x
[80];

522 
iÁ˚
[16], 
Êags
[16];

523 
iÊags
, 
mëric
, 
ªf˙t
, 
u£
, 
¥efix_Àn
, 
¶í
;

524 
sockaddr_ö6
 
¢addr6
;

526 
FILE
 *
Â
 = 
	`xf›í_f‹_ªad
("/proc/net/ipv6_route");

528 
	`¥ötf
("Kernel IPv6ÑoutingÅable\n%-44s%-40s"

533 
r
;

534 
r
 = 
	`fsˇnf
(
Â
, "%32s%x%*s%x%32s%x%x%x%x%s\n",

535 
addr6x
+14, &
¥efix_Àn
, &
¶í
,áddr6x+40+7,

536 &
mëric
, &
u£
, &
ªf˙t
, &
iÊags
, 
iÁ˚
);

537 i‡(
r
 != 9) {

538 i‡((
r
 < 0Ë&& 
	`„of
(
Â
)) {

541 
ERROR
:

542 
	`bb_îr‹_msg_™d_dõ
("fscanf");

549 
i
 = 0;

550 *
p
 = 
addr6x
+14;

553 i‡(!*
p
) {

554 i‡(
i
 == 40) {

555 
addr6x
[39] = 0;

556 ++
p
;

559 
ERROR
;

561 
addr6x
[
i
++] = *
p
++;

562 i‡(!((
i
+1) % 5)) {

563 
addr6x
[
i
++] = ':';

565 } 
i
 < 40+28+7);

568 i‡(!(
iÊags
 & 
RTF_UP
)) {

572 
	`£t_Êags
(
Êags
, (
iÊags
 & 
IPV6_MASK
));

574 
r
 = 0;

576 
	`öë_±⁄
(
AF_INET6
, 
addr6x
 + 
r
,

577 (
sockaddr
 *Ë&
¢addr6
.
sö6_addr
);

578 
¢addr6
.
sö6_Ámûy
 = 
AF_INET6
;

579 
«ddr6
 = 
	`INET6_ºesﬁve
((
sockaddr_ö6
 *Ë&
¢addr6
,

583 i‡(!
r
) {

584 
	`¢¥ötf
(
addr6
, ◊ddr6), "%s/%d", 
«ddr6
, 
¥efix_Àn
);

585 
r
 += 40;

586 
	`‰ì
(
«ddr6
);

589 
	`¥ötf
("%-43s %-39s %-5s %-6d %-2d %7d %-8s\n",

590 
addr6
, 
«ddr6
, 
Êags
, 
mëric
, 
ªf˙t
, 
u£
, 
iÁ˚
);

591 
	`‰ì
(
«ddr6
);

596 
	`f˛o£
(
Â
);

597 
	}
}

601 
	#ROUTE_OPT_A
 0x01

	)

602 
	#ROUTE_OPT_n
 0x02

	)

603 
	#ROUTE_OPT_e
 0x04

	)

604 
	#ROUTE_OPT_INET6
 0x08

	)

608 c⁄° 
	gtbl_vîb
[] 
	gALIGN1
 =

615 
	$rouã_maö
(
¨gc
, **
¨gv
Ë
MAIN_EXTERNALLY_VISIBLE
;

616 
	$rouã_maö
(
¨gc
 
UNUSED_PARAM
, **
¨gv
)

618 
›t
;

619 
wh©
;

620 *
Ámûy
;

621 **
p
;

624 
p
 = 
¨gv
;

625 *++
p
) {

626 i‡(
	`°rcmp
(*
p
, "-net") == 0 || strcmp(*p, "-host") == 0) {

627 
p
[0][0] = '#';

631 
›t
 = 
	`gë›t32
(
¨gv
, "A:√", &
Ámûy
);

633 i‡((
›t
 & 
ROUTE_OPT_A
Ë&& 
	`°rcmp
(
Ámûy
, "inet") != 0) {

634 #i‡
ENABLE_FEATURE_IPV6


635 i‡(
	`°rcmp
(
Ámûy
, "inet6") == 0) {

636 
›t
 |
ROUTE_OPT_INET6
;

639 
	`bb_show_ußge
();

642 
¨gv
 +
›töd
;

645 i‡(!*
¨gv
) {

646 
n‹esﬁve
 = (
›t
 & 
ROUTE_OPT_n
) ? 0x0fff : 0;

647 #i‡
ENABLE_FEATURE_IPV6


648 i‡(
›t
 & 
ROUTE_OPT_INET6
)

649 
	`INET6_di•œyrouãs
();

652 
	`bb_di•œyrouãs
(
n‹esﬁve
, 
›t
 & 
ROUTE_OPT_e
);

654 
	`fÊush_°dout_™d_exô
(
EXIT_SUCCESS
);

658 
wh©
 = 
	`kw_lookup
(
tbl_vîb
, &
¨gv
);

659 i‡(!
wh©
 || !*
¨gv
) {

660 
	`bb_show_ußge
();

663 #i‡
ENABLE_FEATURE_IPV6


664 i‡(
›t
 & 
ROUTE_OPT_INET6
)

665 
	`INET6_£åouã
(
wh©
, 
¨gv
);

668 
	`INET_£åouã
(
wh©
, 
¨gv
);

670  
EXIT_SUCCESS
;

671 
	}
}

	@server/network.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<î∫o.h
>

12 
	~<î∫o.h
>

13 
	~<uni°d.h
>

14 
	~<evít2/evít.h
>

15 
	~<sys/sockë.h
>

16 
	~<√töë/ö.h
>

17 
	~<¨∑/öë.h
>

18 
	~<sys/sockë.h
>

19 
	~<sys/ty≥s.h
>

20 
	$t˝_£rvî_öô
(
p‹t
, 
li°í_num
)

22 
î∫o_ßve
;

23 
evutû_sockë_t
 
li°íî
;

25 
li°íî
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

26 if–
li°íî
 == -1 )

29 
	`evutû_make_li°í_sockë_ªu£abÀ
(
li°íî
);

31 
sockaddr_ö
 
sö
;

32 
sö
.
sö_Ámûy
 = 
AF_INET
;

33 
sö
.
sö_addr
.
s_addr
 = 0;

34 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

36 if(
	`böd
(
li°íî
, (
sockaddr
 *)&
sö
, (sin)) < 0 )

37 
îr‹
;

39 if(
	`li°í
(
li°íî
, 
li°í_num
) < 0)

40 
îr‹
;

42 
	`evutû_make_sockë_n⁄blockög
(
li°íî
);

43  
li°íî
;

45 
îr‹
:

46 
î∫o_ßve
 = 
î∫o
;

47 
	`evutû_˛o£sockë
(
li°íî
);

48 
î∫o
 = 
î∫o_ßve
;

50 
	}
}

55 
	$maö
()

58 
î∫o_ßve
;

59 
evutû_sockë_t
 
li°íî
;

61 
li°íî
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

62 if–
li°íî
 == -1 )

65 
	`evutû_make_li°í_sockë_ªu£abÀ
(
li°íî
);

67 
sockaddr_ö
 
sö
;

68 
sö
.
sö_Ámûy
 = 
AF_INET
;

69 
sö
.
sö_addr
.
s_addr
 = 0;

70 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

72 if(
	`böd
(
li°íî
, (
sockaddr
 *)&
sö
, (sin)) < 0 )

73 
îr‹
;

75 if(
	`li°í
(
li°íî
, 
li°í_num
) < 0)

76 
îr‹
;

78 
	`evutû_make_sockë_n⁄blockög
(
li°íî
);

79  
li°íî
;

81 
îr‹
:

82 
î∫o_ßve
 = 
î∫o
;

83 
	`evutû_˛o£sockë
(
li°íî
);

84 
î∫o
 = 
î∫o_ßve
;

	@server/queue.h

35 #i‚def 
_SYS_QUEUE_H_


36 
	#_SYS_QUEUE_H_


	)

85 #i‡
deföed
(
QUEUE_MACRO_DEBUG
Ë|| (deföed(
_KERNEL
Ë&& deföed(
DIAGNOSTIC
))

86 
	#_Q_INVALIDATE
(
a
Ë◊Ë((*)-1)

	)

88 
	#_Q_INVALIDATE
(
a
)

	)

94 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

95 
	s«me
 { \

96 
ty≥
 *
¶h_fú°
; \

97 }

	)

99 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

100 { 
NULL
 }

	)

102 
	#SLIST_ENTRY
(
ty≥
) \

104 
ty≥
 *
¶e_√xt
; \

105 }

	)

110 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

111 
	#SLIST_END
(
hód
Ë
NULL


	)

112 
	#SLIST_EMPTY
(
hód
Ë(
	`SLIST_FIRST
(hódË=
	`SLIST_END
(hód))

	)

113 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

115 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

116 (
v¨
Ë
	`SLIST_FIRST
(
hód
); \

117 (
v¨
Ë!
	`SLIST_END
(
hód
); \

118 (
v¨
Ë
	`SLIST_NEXT
(v¨, 
fõld
))

	)

120 
	#SLIST_FOREACH_PREVPTR
(
v¨
, 
v¨p
, 
hód
, 
fõld
) \

121 (
v¨p
Ë&
	`SLIST_FIRST
((
hód
)); \

122 ((
v¨
Ë*(
v¨p
)Ë!
	`SLIST_END
(
hód
); \

123 (
v¨p
Ë&
	`SLIST_NEXT
((
v¨
), 
fõld
))

	)

128 
	#SLIST_INIT
(
hód
) { \

129 
	`SLIST_FIRST
(
hód
Ë
	`SLIST_END
(head); \

130 }

	)

132 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

133 (
ñm
)->
fõld
.
¶e_√xt
 = (
¶i°ñm
)->field.sle_next; \

134 (
¶i°ñm
)->
fõld
.
¶e_√xt
 = (
ñm
); \

135 } 0)

	)

137 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

138 (
ñm
)->
fõld
.
¶e_√xt
 = (
hód
)->
¶h_fú°
; \

139 (
hód
)->
¶h_fú°
 = (
ñm
); \

140 } 0)

	)

142 
	#SLIST_REMOVE_NEXT
(
hód
, 
ñm
, 
fõld
) do { \

143 (
ñm
)->
fõld
.
¶e_√xt
 = (elm)->field.sle_next->field.sle_next; \

144 } 0)

	)

146 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

147 (
hód
)->
¶h_fú°
 = (hód)->¶h_fú°->
fõld
.
¶e_√xt
; \

148 } 0)

	)

150 
	#SLIST_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

151 i‡((
hód
)->
¶h_fú°
 =(
ñm
)) { \

152 
	`SLIST_REMOVE_HEAD
((
hód
), 
fõld
); \

154 
ty≥
 *
cuªlm
 = (
hód
)->
¶h_fú°
; \

156 
cuªlm
->
fõld
.
¶e_√xt
 !(
ñm
)) \

157 
cuªlm
 = cuªlm->
fõld
.
¶e_√xt
; \

158 
cuªlm
->
fõld
.
¶e_√xt
 = \

159 
cuªlm
->
fõld
.
¶e_√xt
->field.sle_next; \

160 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
¶e_√xt
); \

162 } 0)

	)

167 
	#LIST_HEAD
(
«me
, 
ty≥
) \

168 
	s«me
 { \

169 
ty≥
 *
lh_fú°
; \

170 }

	)

172 
	#LIST_HEAD_INITIALIZER
(
hód
) \

173 { 
NULL
 }

	)

175 
	#LIST_ENTRY
(
ty≥
) \

177 
ty≥
 *
À_√xt
; \

178 
ty≥
 **
À_¥ev
; \

179 }

	)

184 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

185 
	#LIST_END
(
hód
Ë
NULL


	)

186 
	#LIST_EMPTY
(
hód
Ë(
	`LIST_FIRST
(hódË=
	`LIST_END
(hód))

	)

187 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

189 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

190 (
v¨
Ë
	`LIST_FIRST
(
hód
); \

191 (
v¨
)!
	`LIST_END
(
hód
); \

192 (
v¨
Ë
	`LIST_NEXT
(v¨, 
fõld
))

	)

197 
	#LIST_INIT
(
hód
) do { \

198 
	`LIST_FIRST
(
hód
Ë
	`LIST_END
(head); \

199 } 0)

	)

201 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

202 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
)->fõld.À_√xtË!
NULL
) \

203 (
li°ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

204 &(
ñm
)->
fõld
.
À_√xt
; \

205 (
li°ñm
)->
fõld
.
À_√xt
 = (
ñm
); \

206 (
ñm
)->
fõld
.
À_¥ev
 = &(
li°ñm
)->fõld.
À_√xt
; \

207 } 0)

	)

209 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

210 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

211 (
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
); \

212 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

213 (
li°ñm
)->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
; \

214 } 0)

	)

216 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

217 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
hód
)->
lh_fú°
Ë!
NULL
) \

218 (
hód
)->
lh_fú°
->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
;\

219 (
hód
)->
lh_fú°
 = (
ñm
); \

220 (
ñm
)->
fõld
.
À_¥ev
 = &(
hód
)->
lh_fú°
; \

221 } 0)

	)

223 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

224 i‡((
ñm
)->
fõld
.
À_√xt
 !
NULL
) \

225 (
ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

226 (
ñm
)->
fõld
.
À_¥ev
; \

227 *(
ñm
)->
fõld
.
À_¥ev
 = (ñm)->fõld.
À_√xt
; \

228 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
À_¥ev
); \

229 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
À_√xt
); \

230 } 0)

	)

232 
	#LIST_REPLACE
(
ñm
, 
ñm2
, 
fõld
) do { \

233 i‡(((
ñm2
)->
fõld
.
À_√xt
 = (
ñm
)->fõld.À_√xtË!
NULL
) \

234 (
ñm2
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

235 &(
ñm2
)->
fõld
.
À_√xt
; \

236 (
ñm2
)->
fõld
.
À_¥ev
 = (
ñm
)->field.le_prev; \

237 *(
ñm2
)->
fõld
.
À_¥ev
 = (elm2); \

238 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
À_¥ev
); \

239 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
À_√xt
); \

240 } 0)

	)

245 
	#SIMPLEQ_HEAD
(
«me
, 
ty≥
) \

246 
	s«me
 { \

247 
ty≥
 *
sqh_fú°
; \

248 
ty≥
 **
sqh_œ°
; \

249 }

	)

251 
	#SIMPLEQ_HEAD_INITIALIZER
(
hód
) \

252 { 
NULL
, &(
hód
).
sqh_fú°
 }

	)

254 
	#SIMPLEQ_ENTRY
(
ty≥
) \

256 
ty≥
 *
sqe_√xt
; \

257 }

	)

262 
	#SIMPLEQ_FIRST
(
hód
Ë((hód)->
sqh_fú°
)

	)

263 
	#SIMPLEQ_END
(
hód
Ë
NULL


	)

264 
	#SIMPLEQ_EMPTY
(
hód
Ë(
	`SIMPLEQ_FIRST
(hódË=
	`SIMPLEQ_END
(hód))

	)

265 
	#SIMPLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
sqe_√xt
)

	)

267 
	#SIMPLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

268 (
v¨
Ë
	`SIMPLEQ_FIRST
(
hód
); \

269 (
v¨
Ë!
	`SIMPLEQ_END
(
hód
); \

270 (
v¨
Ë
	`SIMPLEQ_NEXT
(v¨, 
fõld
))

	)

275 
	#SIMPLEQ_INIT
(
hód
) do { \

276 (
hód
)->
sqh_fú°
 = 
NULL
; \

277 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

278 } 0)

	)

280 
	#SIMPLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

281 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
hód
)->
sqh_fú°
Ë=
NULL
) \

282 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

283 (
hód
)->
sqh_fú°
 = (
ñm
); \

284 } 0)

	)

286 
	#SIMPLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

287 (
ñm
)->
fõld
.
sqe_√xt
 = 
NULL
; \

288 *(
hód
)->
sqh_œ°
 = (
ñm
); \

289 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

290 } 0)

	)

292 
	#SIMPLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

293 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
li°ñm
)->fõld.sqe_√xtË=
NULL
)\

294 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

295 (
li°ñm
)->
fõld
.
sqe_√xt
 = (
ñm
); \

296 } 0)

	)

298 
	#SIMPLEQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

299 i‡(((
hód
)->
sqh_fú°
 = (hód)->sqh_fú°->
fõld
.
sqe_√xt
Ë=
NULL
) \

300 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

301 } 0)

	)

306 
	#TAILQ_HEAD
(
«me
, 
ty≥
) \

307 
	s«me
 { \

308 
ty≥
 *
tqh_fú°
; \

309 
ty≥
 **
tqh_œ°
; \

310 }

	)

312 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

313 { 
NULL
, &(
hód
).
tqh_fú°
 }

	)

315 
	#TAILQ_ENTRY
(
ty≥
) \

317 
ty≥
 *
tqe_√xt
; \

318 
ty≥
 **
tqe_¥ev
; \

319 }

	)

324 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

325 
	#TAILQ_END
(
hód
Ë
NULL


	)

326 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

327 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

328 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

330 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

331 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

332 
	#TAILQ_EMPTY
(
hód
) \

333 (
	`TAILQ_FIRST
(
hód
Ë=
	`TAILQ_END
(hód))

	)

335 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

336 (
v¨
Ë
	`TAILQ_FIRST
(
hód
); \

337 (
v¨
Ë!
	`TAILQ_END
(
hód
); \

338 (
v¨
Ë
	`TAILQ_NEXT
(v¨, 
fõld
))

	)

340 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

341 (
v¨
Ë
	`TAILQ_LAST
(
hód
, 
hód«me
); \

342 (
v¨
Ë!
	`TAILQ_END
(
hód
); \

343 (
v¨
Ë
	`TAILQ_PREV
(v¨, 
hód«me
, 
fõld
))

	)

348 
	#TAILQ_INIT
(
hód
) do { \

349 (
hód
)->
tqh_fú°
 = 
NULL
; \

350 (
hód
)->
tqh_œ°
 = &(hód)->
tqh_fú°
; \

351 } 0)

	)

353 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

354 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
hód
)->
tqh_fú°
Ë!
NULL
) \

355 (
hód
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = \

356 &(
ñm
)->
fõld
.
tqe_√xt
; \

358 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

359 (
hód
)->
tqh_fú°
 = (
ñm
); \

360 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
hód
)->
tqh_fú°
; \

361 } 0)

	)

363 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

364 (
ñm
)->
fõld
.
tqe_√xt
 = 
NULL
; \

365 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

366 *(
hód
)->
tqh_œ°
 = (
ñm
); \

367 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

368 } 0)

	)

370 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

371 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
)->fõld.tqe_√xtË!
NULL
)\

372 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

373 &(
ñm
)->
fõld
.
tqe_√xt
; \

375 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

376 (
li°ñm
)->
fõld
.
tqe_√xt
 = (
ñm
); \

377 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
li°ñm
)->fõld.
tqe_√xt
; \

378 } 0)

	)

380 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

381 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

382 (
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
); \

383 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

384 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &(
ñm
)->fõld.
tqe_√xt
; \

385 } 0)

	)

387 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

388 i‡(((
ñm
)->
fõld
.
tqe_√xt
Ë!
NULL
) \

389 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

390 (
ñm
)->
fõld
.
tqe_¥ev
; \

392 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

393 *(
ñm
)->
fõld
.
tqe_¥ev
 = (ñm)->fõld.
tqe_√xt
; \

394 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
tqe_¥ev
); \

395 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
tqe_√xt
); \

396 } 0)

	)

398 
	#TAILQ_REPLACE
(
hód
, 
ñm
, 
ñm2
, 
fõld
) do { \

399 i‡(((
ñm2
)->
fõld
.
tqe_√xt
 = (
ñm
)->fõld.tqe_√xtË!
NULL
) \

400 (
ñm2
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

401 &(
ñm2
)->
fõld
.
tqe_√xt
; \

403 (
hód
)->
tqh_œ°
 = &(
ñm2
)->
fõld
.
tqe_√xt
; \

404 (
ñm2
)->
fõld
.
tqe_¥ev
 = (
ñm
)->field.tqe_prev; \

405 *(
ñm2
)->
fõld
.
tqe_¥ev
 = (elm2); \

406 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
tqe_¥ev
); \

407 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
tqe_√xt
); \

408 } 0)

	)

413 
	#CIRCLEQ_HEAD
(
«me
, 
ty≥
) \

414 
	s«me
 { \

415 
ty≥
 *
cqh_fú°
; \

416 
ty≥
 *
cqh_œ°
; \

417 }

	)

419 
	#CIRCLEQ_HEAD_INITIALIZER
(
hód
) \

420 { 
	`CIRCLEQ_END
(&
hód
), CIRCLEQ_END(&hódË}

	)

422 
	#CIRCLEQ_ENTRY
(
ty≥
) \

424 
ty≥
 *
cqe_√xt
; \

425 
ty≥
 *
cqe_¥ev
; \

426 }

	)

431 
	#CIRCLEQ_FIRST
(
hód
Ë((hód)->
cqh_fú°
)

	)

432 
	#CIRCLEQ_LAST
(
hód
Ë((hód)->
cqh_œ°
)

	)

433 
	#CIRCLEQ_END
(
hód
Ë((*)(hód))

	)

434 
	#CIRCLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_√xt
)

	)

435 
	#CIRCLEQ_PREV
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_¥ev
)

	)

436 
	#CIRCLEQ_EMPTY
(
hód
) \

437 (
	`CIRCLEQ_FIRST
(
hód
Ë=
	`CIRCLEQ_END
(hód))

	)

439 
	#CIRCLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

440 (
v¨
Ë
	`CIRCLEQ_FIRST
(
hód
); \

441 (
v¨
Ë!
	`CIRCLEQ_END
(
hód
); \

442 (
v¨
Ë
	`CIRCLEQ_NEXT
(v¨, 
fõld
))

	)

444 
	#CIRCLEQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
fõld
) \

445 (
v¨
Ë
	`CIRCLEQ_LAST
(
hód
); \

446 (
v¨
Ë!
	`CIRCLEQ_END
(
hód
); \

447 (
v¨
Ë
	`CIRCLEQ_PREV
(v¨, 
fõld
))

	)

452 
	#CIRCLEQ_INIT
(
hód
) do { \

453 (
hód
)->
cqh_fú°
 = 
	`CIRCLEQ_END
(head); \

454 (
hód
)->
cqh_œ°
 = 
	`CIRCLEQ_END
(head); \

455 } 0)

	)

457 
	#CIRCLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

458 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
)->field.cqe_next; \

459 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
); \

460 i‡((
li°ñm
)->
fõld
.
cqe_√xt
 =
	`CIRCLEQ_END
(
hód
)) \

461 (
hód
)->
cqh_œ°
 = (
ñm
); \

463 (
li°ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = (
ñm
); \

464 (
li°ñm
)->
fõld
.
cqe_√xt
 = (
ñm
); \

465 } 0)

	)

467 
	#CIRCLEQ_INSERT_BEFORE
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

468 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
); \

469 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
)->field.cqe_prev; \

470 i‡((
li°ñm
)->
fõld
.
cqe_¥ev
 =
	`CIRCLEQ_END
(
hód
)) \

471 (
hód
)->
cqh_fú°
 = (
ñm
); \

473 (
li°ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = (
ñm
); \

474 (
li°ñm
)->
fõld
.
cqe_¥ev
 = (
ñm
); \

475 } 0)

	)

477 
	#CIRCLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

478 (
ñm
)->
fõld
.
cqe_√xt
 = (
hód
)->
cqh_fú°
; \

479 (
ñm
)->
fõld
.
cqe_¥ev
 = 
	`CIRCLEQ_END
(
hód
); \

480 i‡((
hód
)->
cqh_œ°
 =
	`CIRCLEQ_END
(head)) \

481 (
hód
)->
cqh_œ°
 = (
ñm
); \

483 (
hód
)->
cqh_fú°
->
fõld
.
cqe_¥ev
 = (
ñm
); \

484 (
hód
)->
cqh_fú°
 = (
ñm
); \

485 } 0)

	)

487 
	#CIRCLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

488 (
ñm
)->
fõld
.
cqe_√xt
 = 
	`CIRCLEQ_END
(
hód
); \

489 (
ñm
)->
fõld
.
cqe_¥ev
 = (
hód
)->
cqh_œ°
; \

490 i‡((
hód
)->
cqh_fú°
 =
	`CIRCLEQ_END
(head)) \

491 (
hód
)->
cqh_fú°
 = (
ñm
); \

493 (
hód
)->
cqh_œ°
->
fõld
.
cqe_√xt
 = (
ñm
); \

494 (
hód
)->
cqh_œ°
 = (
ñm
); \

495 } 0)

	)

497 
	#CIRCLEQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

498 i‡((
ñm
)->
fõld
.
cqe_√xt
 =
	`CIRCLEQ_END
(
hód
)) \

499 (
hód
)->
cqh_œ°
 = (
ñm
)->
fõld
.
cqe_¥ev
; \

501 (
ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = \

502 (
ñm
)->
fõld
.
cqe_¥ev
; \

503 i‡((
ñm
)->
fõld
.
cqe_¥ev
 =
	`CIRCLEQ_END
(
hód
)) \

504 (
hód
)->
cqh_fú°
 = (
ñm
)->
fõld
.
cqe_√xt
; \

506 (
ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = \

507 (
ñm
)->
fõld
.
cqe_√xt
; \

508 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
cqe_¥ev
); \

509 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
cqe_√xt
); \

510 } 0)

	)

512 
	#CIRCLEQ_REPLACE
(
hód
, 
ñm
, 
ñm2
, 
fõld
) do { \

513 i‡(((
ñm2
)->
fõld
.
cqe_√xt
 = (
ñm
)->field.cqe_next) == \

514 
	`CIRCLEQ_END
(
hód
)) \

515 (
hód
).
cqh_œ°
 = (
ñm2
); \

517 (
ñm2
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = (elm2); \

518 i‡(((
ñm2
)->
fõld
.
cqe_¥ev
 = (
ñm
)->field.cqe_prev) == \

519 
	`CIRCLEQ_END
(
hód
)) \

520 (
hód
).
cqh_fú°
 = (
ñm2
); \

522 (
ñm2
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = (elm2); \

523 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
cqe_¥ev
); \

524 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
cqe_√xt
); \

525 } 0)

	)

	@server/server.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

10 
	~<î∫o.h
>

11 
	~<î∫o.h
>

12 
	~<uni°d.h
>

13 
	~<evít2/evít.h
>

14 
	~<sys/sockë.h
>

15 
	~<√töë/ö.h
>

16 
	~<¨∑/öë.h
>

17 
	~<sys/sockë.h
>

18 
	~<sys/ty≥s.h
>

19 
	~"queue.h
"

20 
	s˛õ¡
{

21 
sockaddr_ö
 
	maddr
;

22 
	mfd
;

23 
TAILQ_ENTRY
(
˛õ¡
Ë
	mlök
;

24 }
	t˛õ¡
;

25 
	$TAILQ_HEAD
(
queue
, 
˛õ¡
Ë
hód
;

27 
	`ac˚±_cb
(
fd
, 
evíts
, * 
¨g
);

28 
	`sockë_ªad_cb
(
fd
, 
evíts
, *
¨g
);

29 
	`t˝_£rvî_öô
(
p‹t
, 
li°í_num
);

31 
	$åim
(*
§c
)

33 *
begö
 = 
§c
;

34 *
íd
 = 
§c
;

36  *
íd
++ ) {

40 i‡–
begö
 =
íd
 ) ;

42  *
begö
 == ' ' || *begin == '\t' )

43 ++
begö
;

44  (*
íd
) == '\0' || *end == ' ' || *end == '\t' || *end == '\n' )

45 --
íd
;

47 i‡–
begö
 > 
íd
 ) {

48 *
§c
 = '\0'; ;

51  
begö
 !
íd
 ) {

52 *
§c
++ = *
begö
++;

55 *
§c
++ = *
íd
;

56 *
§c
 = '\0';

59 
	}
}

60 
	$˛õ¡_‰ì
()

62 
˛õ¡
 * 
pc
;

63 
	`TAILQ_FOREACH
(
pc
, &
hód
, 
lök
)

65 
	`TAILQ_REMOVE
(&
hód
, 
pc
, 
lök
);

67 
	}
}

69 
evít
 * 
	$fûe_evít_add
(
evít_ba£
 * 
ba£
, 
evít_ˇŒback_‚
 
cb
)

71 
evít
 *
ev
;

72 
ev
 = 
	`evít_√w
(
ba£
, 1, 
EV_READ
| 
EV_PERSIST
, 
cb
, 
NULL
);

73 if(!
ev
)

74  
NULL
;

75 
	`evít_add
(
ev
, 
NULL
);

76  
ev
;

77 
	}
}

79 
	$maö
(
¨gc
, ** 
¨gv
)

81 
	`TAILQ_INIT
(&
hód
);

82 
li°íî
 = 
	`t˝_£rvî_öô
(9999, 10);

83 if–
li°íî
 == -1 )

85 
	`≥º‹
("Åcp_server_initÉrror ");

88 
	`¥ötf
("Init server .........\r\n");

89 
evít_ba£
* 
ba£
 = 
	`evít_ba£_√w
();

90 
evít
* 
ev_li°í
 = 
	`evít_√w
(
ba£
, 
li°íî
, 
EV_READ
 | 
EV_PERSIST
, 
ac˚±_cb
, base);

91 
	`evít_add
(
ev_li°í
, 
NULL
);

92 
	`evít_ba£_di•©ch
(
ba£
);

93 
	`˛õ¡_‰ì
();

95 
	}
}

97 
	$ac˚±_cb
(
fd
, 
evíts
, * 
¨g
)

99 
˛õ¡
 *
pc
;

100 
evít_ba£
* 
ba£
 = (evít_ba£*)
¨g
;

101 
evít
 *
ev
 = 
NULL
;

102 
evutû_sockë_t
 
sockfd
;

103 
sockÀn_t
 
Àn
;

105 
pc
 = (
˛õ¡
 *)
	`ˇŒoc
(1, (client));

106 if(!
pc
)

108 
	`¥ötf
("create clientÉrror\r\n");

111 
sockfd
 = 
	`ac˚±
(
fd
, (
sockaddr
*)&
pc
->
addr
, &
Àn
 );

112 if(
sockfd
 == -1)

114 
	`¥ötf
("ac˚±Éº‹:%s", 
	`°ªº‹
(
î∫o
));

115 
	`‰ì
(
pc
);

118 
	`¥ötf
("ac˚± sock %d c⁄¬e˘\r\n", 
sockfd
);

119 
	`evutû_make_sockë_n⁄blockög
(
sockfd
);

120 
pc
->
fd
 = 
sockfd
;

121 
	`¥ötf
("%s:%d\r\n", 
__FUNCTION__
, 
__LINE__
);

122 
	`TAILQ_INSERT_HEAD
(&
hód
, 
pc
, 
lök
);

123 
ev
 = 
	`evít_√w
(
NULL
, -1, 0, NULL, NULL);

124 
	`evít_assign
(
ev
, 
ba£
, 
sockfd
, 
EV_READ
 | 
EV_PERSIST
, 
sockë_ªad_cb
, (*)ev);

125 
	`evít_add
(
ev
, 
NULL
);

126 
	`¥ötf
("%s:%d\r\n", 
__FUNCTION__
, 
__LINE__
);

127 
	}
}

130 
	$sockë_ªad_cb
(
fd
, 
evíts
, *
¨g
)

132 
msg
[1024];

133 
˛õ¡
 *
pc
;

134 
evít
 *
ev
 = (evít*)
¨g
;

135 
	`¥ötf
("have message\r\n");

136 
	`¥ötf
("%s:%d\r\n", 
__FUNCTION__
, 
__LINE__
);

137 
Àn
 = 
	`ªad
(
fd
, 
msg
, (msg) - 1);

138 if–
Àn
 < 0 )

140 
	`¥ötf
("somêîr‹ h≠≥¿whíÑód,Ñë i†%d\n", 
Àn
);

141 
	`¥ötf
("î∫ÿi†%d, %s\r\n", 
î∫o
, 
	`°ªº‹
(errno));

142 
	`˛o£
(
	`evít_gë_fd
(
ev
));

143 
	`TAILQ_FOREACH
(
pc
,&
hód
, 
lök
)

145 if(
pc
->
fd
 == fd)

147 
	`TAILQ_REMOVE
(&
hód
, 
pc
, 
lök
);

150 
	`evít_‰ì
(
ev
);

154 
msg
[
Àn
] = '\0';

155 
	`¥ötf
("ªcv msg: %s\r\n", 
msg
);

156 if–
	`°∫cmp
("exô", 
msg
, 4) == 0)

158 
	`˛o£
(
	`evít_gë_fd
(
ev
));

159 
	`TAILQ_FOREACH
(
pc
,&
hód
, 
lök
)

161 if(
pc
->
fd
 == fd)

163 
	`TAILQ_REMOVE
(&
hód
, 
pc
, 
lök
);

166 
	`¥ötf
("childÉxit\n");

167 
	`exô
(0);

171 
	}
}

174 
	$t˝_£rvî_öô
(
p‹t
, 
li°í_num
)

176 
î∫o_ßve
;

177 
evutû_sockë_t
 
li°íî
;

179 
li°íî
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

180 if–
li°íî
 == -1 )

183 
	`evutû_make_li°í_sockë_ªu£abÀ
(
li°íî
);

185 
sockaddr_ö
 
sö
;

186 
sö
.
sö_Ámûy
 = 
AF_INET
;

187 
sö
.
sö_addr
.
s_addr
 = 0;

188 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

190 if(
	`böd
(
li°íî
, (
sockaddr
 *)&
sö
, (sin)) < 0 )

191 
îr‹
;

193 if(
	`li°í
(
li°íî
, 
li°í_num
) < 0)

194 
îr‹
;

196 
	`evutû_make_sockë_n⁄blockög
(
li°íî
);

197  
li°íî
;

199 
îr‹
:

200 
î∫o_ßve
 = 
î∫o
;

201 
	`evutû_˛o£sockë
(
li°íî
);

202 
î∫o
 = 
î∫o_ßve
;

204 
	}
}

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/arpa/nameser.h

52 #i‚de‡
_ARPA_NAMESER_H_


53 
	#_ARPA_NAMESER_H_


	)

57 
	#BIND_4_COMPAT


	)

59 
	~<sys/∑øm.h
>

60 #i‡(!
deföed
(
BSD
)) || (BSD < 199306)

61 
	~<sys/bôy≥s.h
>

63 
	~<sys/ty≥s.h
>

65 
	~<sys/cdefs.h
>

75 
	#__NAMESER
 19991006

	)

79 
	#NS_PACKETSZ
 512

	)

80 
	#NS_MAXDNAME
 1025

	)

81 
	#NS_MAXMSG
 65535

	)

82 
	#NS_MAXCDNAME
 255

	)

83 
	#NS_MAXLABEL
 63

	)

84 
	#NS_HFIXEDSZ
 12

	)

85 
	#NS_QFIXEDSZ
 4

	)

86 
	#NS_RRFIXEDSZ
 10

	)

87 
	#NS_INT32SZ
 4

	)

88 
	#NS_INT16SZ
 2

	)

89 
	#NS_INT8SZ
 1

	)

90 
	#NS_INADDRSZ
 4

	)

91 
	#NS_IN6ADDRSZ
 16

	)

92 
	#NS_CMPRSFLGS
 0xc0

	)

93 
	#NS_DEFAULTPORT
 53

	)

98 
	e__ns_£˘
 {

99 
	mns_s_qd
 = 0,

100 
	mns_s_zn
 = 0,

101 
	mns_s_™
 = 1,

102 
	mns_s_¥
 = 1,

103 
	mns_s_ns
 = 2,

104 
	mns_s_ud
 = 2,

105 
	mns_s_¨
 = 3,

106 
	mns_s_max
 = 4

107 } 
	tns_£˘
;

114 
	s__ns_msg
 {

115 c⁄° 
u_ch¨
 *
	m_msg
, *
	m_eom
;

116 
u_öt16_t
 
	m_id
, 
	m_Êags
, 
	m_cou¡s
[
ns_s_max
];

117 c⁄° 
u_ch¨
 *
	m_£˘i⁄s
[
ns_s_max
];

118 
ns_£˘
 
	m_£˘
;

119 
	m_ºnum
;

120 c⁄° 
u_ch¨
 *
	m_msg_±r
;

121 } 
	tns_msg
;

124 
	s_ns_Êagd©a
 { 
	mmask
, 
	mshi·
; };

125 c⁄° 
_ns_Êagd©a
 _ns_flagdata[];

129 
	#ns_msg_id
(
h™dÀ
Ë((h™dÀ).
_id
 + 0)

	)

130 
	#ns_msg_ba£
(
h™dÀ
Ë((h™dÀ).
_msg
 + 0)

	)

131 
	#ns_msg_íd
(
h™dÀ
Ë((h™dÀ).
_eom
 + 0)

	)

132 
	#ns_msg_size
(
h™dÀ
Ë((h™dÀ).
_eom
 - (h™dÀ).
_msg
)

	)

133 
	#ns_msg_cou¡
(
h™dÀ
, 
£˘i⁄
Ë((h™dÀ).
_cou¡s
[£˘i⁄] + 0)

	)

138 
	s__ns_º
 {

139 
	m«me
[
NS_MAXDNAME
];

140 
u_öt16_t
 
	mty≥
;

141 
u_öt16_t
 
	mº_˛ass
;

142 
u_öt32_t
 
	mâl
;

143 
u_öt16_t
 
	mrdÀngth
;

144 c⁄° 
u_ch¨
 * 
	mrd©a
;

145 } 
	tns_º
;

148 
	#ns_º_«me
(
º
Ë((‘r).
«me
[0] !'\0'Ë? (º).«mê: ".")

	)

149 
	#ns_º_ty≥
(
º
Ë((
ns_ty≥
)(‘r).
ty≥
 + 0))

	)

150 
	#ns_º_˛ass
(
º
Ë((
ns_˛ass
)(‘r).
º_˛ass
 + 0))

	)

151 
	#ns_º_âl
(
º
Ë(‘r).
âl
 + 0)

	)

152 
	#ns_º_rdÀn
(
º
Ë(‘r).
rdÀngth
 + 0)

	)

153 
	#ns_º_rd©a
(
º
Ë(‘r).
rd©a
 + 0)

	)

160 
	e__ns_Êag
 {

161 
	mns_f_qr
,

162 
	mns_f_›code
,

163 
	mns_f_Ø
,

164 
	mns_f_tc
,

165 
	mns_f_rd
,

166 
	mns_f_ø
,

167 
	mns_f_z
,

168 
	mns_f_ad
,

169 
	mns_f_cd
,

170 
	mns_f_rcode
,

171 
	mns_f_max


172 } 
	tns_Êag
;

177 
	e__ns_›code
 {

178 
	mns_o_quîy
 = 0,

179 
	mns_o_iquîy
 = 1,

180 
	mns_o_°©us
 = 2,

182 
	mns_o_nŸify
 = 4,

183 
	mns_o_upd©e
 = 5,

184 
	mns_o_max
 = 6

185 } 
	tns_›code
;

190 
	e__ns_rcode
 {

191 
	mns_r_n€º‹
 = 0,

192 
	mns_r_f‹mîr
 = 1,

193 
	mns_r_£rvÁû
 = 2,

194 
	mns_r_nxdomaö
 = 3,

195 
	mns_r_nŸim∂
 = 4,

196 
	mns_r_ªfu£d
 = 5,

198 
	mns_r_yxdomaö
 = 6,

199 
	mns_r_yxº£t
 = 7,

200 
	mns_r_nxº£t
 = 8,

201 
	mns_r_nŸauth
 = 9,

202 
	mns_r_nŸz⁄e
 = 10,

203 
	mns_r_max
 = 11,

205 
	mns_r_badvîs
 = 16,

207 
	mns_r_badsig
 = 16,

208 
	mns_r_badkey
 = 17,

209 
	mns_r_badtime
 = 18

210 } 
	tns_rcode
;

213 
	e__ns_upd©e_›î©i⁄
 {

214 
	mns_u›_dñëe
 = 0,

215 
	mns_u›_add
 = 1,

216 
	mns_u›_max
 = 2

217 } 
	tns_upd©e_›î©i⁄
;

222 
	sns_tsig_key
 {

223 
	m«me
[
NS_MAXDNAME
], 
	mÆg
[NS_MAXDNAME];

224 *
	md©a
;

225 
	mÀn
;

227 
ns_tsig_key
 
	tns_tsig_key
;

232 
	sns_t˝_tsig_°©e
 {

233 
	mcou¡î
;

234 
d°_key
 *
	mkey
;

235 *
	m˘x
;

236 
	msig
[
NS_PACKETSZ
];

237 
	msigÀn
;

239 
ns_t˝_tsig_°©e
 
	tns_t˝_tsig_°©e
;

241 
	#NS_TSIG_FUDGE
 300

	)

242 
	#NS_TSIG_TCP_COUNT
 100

	)

243 
	#NS_TSIG_ALG_HMAC_MD5
 "HMAC-MD5.SIG-ALG.REG.INT"

	)

245 
	#NS_TSIG_ERROR_NO_TSIG
 -10

	)

246 
	#NS_TSIG_ERROR_NO_SPACE
 -11

	)

247 
	#NS_TSIG_ERROR_FORMERR
 -12

	)

252 
	e__ns_ty≥
 {

253 
	mns_t_övÆid
 = 0,

254 
	mns_t_a
 = 1,

255 
	mns_t_ns
 = 2,

256 
	mns_t_md
 = 3,

257 
	mns_t_mf
 = 4,

258 
	mns_t_˙ame
 = 5,

259 
	mns_t_sﬂ
 = 6,

260 
	mns_t_mb
 = 7,

261 
	mns_t_mg
 = 8,

262 
	mns_t_mr
 = 9,

263 
	mns_t_nuŒ
 = 10,

264 
	mns_t_wks
 = 11,

265 
	mns_t_±r
 = 12,

266 
	mns_t_höfo
 = 13,

267 
	mns_t_möfo
 = 14,

268 
	mns_t_mx
 = 15,

269 
	mns_t_txt
 = 16,

270 
	mns_t_Ω
 = 17,

271 
	mns_t_afsdb
 = 18,

272 
	mns_t_x25
 = 19,

273 
	mns_t_isdn
 = 20,

274 
	mns_t_π
 = 21,

275 
	mns_t_nßp
 = 22,

276 
	mns_t_nßp_±r
 = 23,

277 
	mns_t_sig
 = 24,

278 
	mns_t_key
 = 25,

279 
	mns_t_px
 = 26,

280 
	mns_t_gpos
 = 27,

281 
	mns_t_ØØ
 = 28,

282 
	mns_t_loc
 = 29,

283 
	mns_t_nxt
 = 30,

284 
	mns_t_eid
 = 31,

285 
	mns_t_nimloc
 = 32,

286 
	mns_t_§v
 = 33,

287 
	mns_t_©ma
 = 34,

288 
	mns_t_«±r
 = 35,

289 
	mns_t_kx
 = 36,

290 
	mns_t_˚π
 = 37,

291 
	mns_t_a6
 = 38,

292 
	mns_t_d«me
 = 39,

293 
	mns_t_sök
 = 40,

294 
	mns_t_›t
 = 41,

295 
	mns_t_≠l
 = 42,

296 
	mns_t_tkey
 = 249,

297 
	mns_t_tsig
 = 250,

298 
	mns_t_ix‰
 = 251,

299 
	mns_t_ax‰
 = 252,

300 
	mns_t_maûb
 = 253,

301 
	mns_t_maûa
 = 254,

302 
	mns_t_™y
 = 255,

303 
	mns_t_zx‰
 = 256,

304 
	mns_t_max
 = 65536

305 } 
	tns_ty≥
;

308 
	#ns_t_qt_p
(
t
Ë(
	`ns_t_x‰_p
—Ë|| (tË=
ns_t_™y
 || \

309 (
t
Ë=
ns_t_maûb
 || (tË=
ns_t_maûa
)

	)

311 
	#ns_t_mº_p
(
t
Ë(—Ë=
ns_t_tsig
 || (tË=
ns_t_›t
)

	)

313 
	#ns_t_º_p
(
t
Ë(!
	`ns_t_qt_p
—Ë&& !
	`ns_t_mº_p
—))

	)

314 
	#ns_t_udp_p
(
t
Ë(—Ë!
ns_t_ax‰
 && (tË!
ns_t_zx‰
)

	)

315 
	#ns_t_x‰_p
(
t
Ë(—Ë=
ns_t_ax‰
 || (tË=
ns_t_ix‰
 || \

316 (
t
Ë=
ns_t_zx‰
)

	)

321 
	e__ns_˛ass
 {

322 
	mns_c_övÆid
 = 0,

323 
	mns_c_ö
 = 1,

324 
	mns_c_2
 = 2,

325 
	mns_c_chaos
 = 3,

326 
	mns_c_hs
 = 4,

328 
	mns_c_n⁄e
 = 254,

329 
	mns_c_™y
 = 255,

330 
	mns_c_max
 = 65536

331 } 
	tns_˛ass
;

335 
	e__ns_key_ty≥s
 {

336 
	mns_kt_rß
 = 1,

337 
	mns_kt_dh
 = 2,

338 
	mns_kt_dß
 = 3,

339 
	mns_kt_¥iv©e
 = 254

340 } 
	tns_key_ty≥s
;

342 
	e__ns_˚π_ty≥s
 {

343 
	m˚π_t_pkix
 = 1,

344 
	m˚π_t_•ki
 = 2,

345 
	m˚π_t_pgp
 = 3,

346 
	m˚π_t_uæ
 = 253,

347 
	m˚π_t_oid
 = 254

348 } 
	tns_˚π_ty≥s
;

351 
	#NS_KEY_TYPEMASK
 0xC000

	)

352 
	#NS_KEY_TYPE_AUTH_CONF
 0x0000

	)

353 
	#NS_KEY_TYPE_CONF_ONLY
 0x8000

	)

354 
	#NS_KEY_TYPE_AUTH_ONLY
 0x4000

	)

355 
	#NS_KEY_TYPE_NO_KEY
 0xC000

	)

357 
	#NS_KEY_NO_AUTH
 0x8000

	)

358 
	#NS_KEY_NO_CONF
 0x4000

	)

359 
	#NS_KEY_RESERVED2
 0x2000

	)

360 
	#NS_KEY_EXTENDED_FLAGS
 0x1000

	)

361 
	#NS_KEY_RESERVED4
 0x0800

	)

362 
	#NS_KEY_RESERVED5
 0x0400

	)

363 
	#NS_KEY_NAME_TYPE
 0x0300

	)

364 
	#NS_KEY_NAME_USER
 0x0000

	)

365 
	#NS_KEY_NAME_ENTITY
 0x0200

	)

366 
	#NS_KEY_NAME_ZONE
 0x0100

	)

367 
	#NS_KEY_NAME_RESERVED
 0x0300

	)

368 
	#NS_KEY_RESERVED8
 0x0080

	)

369 
	#NS_KEY_RESERVED9
 0x0040

	)

370 
	#NS_KEY_RESERVED10
 0x0020

	)

371 
	#NS_KEY_RESERVED11
 0x0010

	)

372 
	#NS_KEY_SIGNATORYMASK
 0x000F

	)

373 
	#NS_KEY_RESERVED_BITMASK
 ( 
NS_KEY_RESERVED2
 | \

374 
NS_KEY_RESERVED4
 | \

375 
NS_KEY_RESERVED5
 | \

376 
NS_KEY_RESERVED8
 | \

377 
NS_KEY_RESERVED9
 | \

378 
NS_KEY_RESERVED10
 | \

379 
NS_KEY_RESERVED11
 )

	)

380 
	#NS_KEY_RESERVED_BITMASK2
 0xFFFF

	)

382 
	#NS_ALG_MD5RSA
 1

	)

383 
	#NS_ALG_DH
 2

	)

384 
	#NS_ALG_DSA
 3

	)

385 
	#NS_ALG_DSS
 
NS_ALG_DSA


	)

386 
	#NS_ALG_EXPIRE_ONLY
 253

	)

387 
	#NS_ALG_PRIVATE_OID
 254

	)

390 
	#NS_KEY_PROT_TLS
 1

	)

391 
	#NS_KEY_PROT_EMAIL
 2

	)

392 
	#NS_KEY_PROT_DNSSEC
 3

	)

393 
	#NS_KEY_PROT_IPSEC
 4

	)

394 
	#NS_KEY_PROT_ANY
 255

	)

397 
	#NS_MD5RSA_MIN_BITS
 512

	)

398 
	#NS_MD5RSA_MAX_BITS
 4096

	)

400 
	#NS_MD5RSA_MAX_BYTES
 ((
NS_MD5RSA_MAX_BITS
+7/8)*2+3)

	)

402 
	#NS_MD5RSA_MAX_BASE64
 (((
NS_MD5RSA_MAX_BYTES
+2)/3)*4)

	)

403 
	#NS_MD5RSA_MIN_SIZE
 ((
NS_MD5RSA_MIN_BITS
+7)/8)

	)

404 
	#NS_MD5RSA_MAX_SIZE
 ((
NS_MD5RSA_MAX_BITS
+7)/8)

	)

406 
	#NS_DSA_SIG_SIZE
 41

	)

407 
	#NS_DSA_MIN_SIZE
 213

	)

408 
	#NS_DSA_MAX_BYTES
 405

	)

411 
	#NS_SIG_TYPE
 0

	)

412 
	#NS_SIG_ALG
 2

	)

413 
	#NS_SIG_LABELS
 3

	)

414 
	#NS_SIG_OTTL
 4

	)

415 
	#NS_SIG_EXPIR
 8

	)

416 
	#NS_SIG_SIGNED
 12

	)

417 
	#NS_SIG_FOOT
 16

	)

418 
	#NS_SIG_SIGNER
 18

	)

420 
	#NS_NXT_BITS
 8

	)

421 
	#NS_NXT_BIT_SET
–
n
,
p
Ë’[“)/
NS_NXT_BITS
] |(0x80>>(“)%NS_NXT_BITS)))

	)

422 
	#NS_NXT_BIT_CLEAR
(
n
,
p
Ë’[“)/
NS_NXT_BITS
] &~(0x80>>(“)%NS_NXT_BITS)))

	)

423 
	#NS_NXT_BIT_ISSET
(
n
,
p
Ë’[“)/
NS_NXT_BITS
] & (0x80>>(“)%NS_NXT_BITS)))

	)

424 
	#NS_NXT_MAX
 127

	)

429 
	#NS_OPT_DNSSEC_OK
 0x8000U

	)

430 
	#NS_OPT_NSID
 3

	)

435 
	#NS_GET16
(
s
, 
˝
) do { \

436 c⁄° 
u_ch¨
 *
t_˝
 = (c⁄° u_ch¨ *)(
˝
); \

437 (
s
Ë((
u_öt16_t
)
t_˝
[0] << 8) \

438 | ((
u_öt16_t
)
t_˝
[1]) \

440 (
˝
Ë+
NS_INT16SZ
; \

441 } 0)

	)

443 
	#NS_GET32
(
l
, 
˝
) do { \

444 c⁄° 
u_ch¨
 *
t_˝
 = (c⁄° u_ch¨ *)(
˝
); \

445 (
l
Ë((
u_öt32_t
)
t_˝
[0] << 24) \

446 | ((
u_öt32_t
)
t_˝
[1] << 16) \

447 | ((
u_öt32_t
)
t_˝
[2] << 8) \

448 | ((
u_öt32_t
)
t_˝
[3]) \

450 (
˝
Ë+
NS_INT32SZ
; \

451 } 0)

	)

453 
	#NS_PUT16
(
s
, 
˝
) do { \

454 
u_öt16_t
 
t_s
 = (u_öt16_t)(
s
); \

455 
u_ch¨
 *
t_˝
 = (u_ch¨ *)(
˝
); \

456 *
t_˝
++ = 
t_s
 >> 8; \

457 *
t_˝
 = 
t_s
; \

458 (
˝
Ë+
NS_INT16SZ
; \

459 } 0)

	)

461 
	#NS_PUT32
(
l
, 
˝
) do { \

462 
u_öt32_t
 
t_l
 = (u_öt32_t)(
l
); \

463 
u_ch¨
 *
t_˝
 = (u_ch¨ *)(
˝
); \

464 *
t_˝
++ = 
t_l
 >> 24; \

465 *
t_˝
++ = 
t_l
 >> 16; \

466 *
t_˝
++ = 
t_l
 >> 8; \

467 *
t_˝
 = 
t_l
; \

468 (
˝
Ë+
NS_INT32SZ
; \

469 } 0)

	)

471 
__BEGIN_DECLS


472 
	$ns_msg_gëÊag
 (
ns_msg
, Ë
__THROW
;

473 
u_öt
 
	$ns_gë16
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

474 
u_l⁄g
 
	$ns_gë32
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

475 
	$ns_put16
 (
u_öt
, 
u_ch¨
 *Ë
__THROW
;

476 
	$ns_put32
 (
u_l⁄g
, 
u_ch¨
 *Ë
__THROW
;

477 
	$ns_öô∑r£
 (c⁄° 
u_ch¨
 *, , 
ns_msg
 *Ë
__THROW
;

478 
	$ns_skùº
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
ns_£˘
, )

479 
__THROW
;

480 
	$ns_∑r£º
 (
ns_msg
 *, 
ns_£˘
, , 
ns_º
 *Ë
__THROW
;

481 
	$ns_•röår
 (c⁄° 
ns_msg
 *, c⁄° 
ns_º
 *,

482 c⁄° *, c⁄° *, *, 
size_t
)

483 
__THROW
;

484 
	$ns_•röårf
 (c⁄° 
u_ch¨
 *, 
size_t
, const *,

485 
ns_˛ass
, 
ns_ty≥
, 
u_l⁄g
, c⁄° 
u_ch¨
 *,

486 
size_t
, const *, const *,

487 *, 
size_t
Ë
__THROW
;

488 
	$ns_f‹m©_âl
 (
u_l⁄g
, *, 
size_t
Ë
__THROW
;

489 
	$ns_∑r£_âl
 (c⁄° *, 
u_l⁄g
 *Ë
__THROW
;

490 
u_öt32_t
 
	$ns_d©ëo£cs
 (c⁄° *, *Ë
__THROW
;

491 
	$ns_«me_¡ﬁ
 (c⁄° 
u_ch¨
 *, u_ch¨ *, 
size_t
Ë
__THROW
;

492 
	$ns_«me_¡›
 (c⁄° 
u_ch¨
 *, *, 
size_t
Ë
__THROW
;

493 
	$ns_«me_±⁄
 (c⁄° *, 
u_ch¨
 *, 
size_t
Ë
__THROW
;

494 
	$ns_«me_u≈ack
 (c⁄° 
u_ch¨
 *, const u_char *,

495 c⁄° 
u_ch¨
 *, u_ch¨ *, 
size_t
Ë
__THROW
;

496 
	$ns_«me_∑ck
 (c⁄° 
u_ch¨
 *, u_char *, ,

497 c⁄° 
u_ch¨
 **, c⁄° u_ch¨ **Ë
__THROW
;

498 
	$ns_«me_uncom¥ess
 (c⁄° 
u_ch¨
 *, const u_char *,

499 c⁄° 
u_ch¨
 *, *, 
size_t
Ë
__THROW
;

500 
	$ns_«me_com¥ess
 (c⁄° *, 
u_ch¨
 *, 
size_t
,

501 c⁄° 
u_ch¨
 **, c⁄° u_ch¨ **Ë
__THROW
;

502 
	$ns_«me_skù
 (c⁄° 
u_ch¨
 **, c⁄° u_ch¨ *Ë
__THROW
;

503 
	$ns_«me_rﬁlback
 (c⁄° 
u_ch¨
 *, const u_char **,

504 c⁄° 
u_ch¨
 **Ë
__THROW
;

505 
	$ns_sign
 (
u_ch¨
 *, *, , , *,

506 c⁄° 
u_ch¨
 *, , u_ch¨ *, *, 
time_t
Ë
__THROW
;

507 
	$ns_sign2
 (
u_ch¨
 *, *, , , *,

508 c⁄° 
u_ch¨
 *, , u_ch¨ *, *, 
time_t
,

509 
u_ch¨
 **, u_ch¨ **Ë
__THROW
;

510 
	$ns_sign_t˝
 (
u_ch¨
 *, *, , ,

511 
ns_t˝_tsig_°©e
 *, Ë
__THROW
;

512 
	$ns_sign_t˝2
 (
u_ch¨
 *, *, , ,

513 
ns_t˝_tsig_°©e
 *, ,

514 
u_ch¨
 **, u_ch¨ **Ë
__THROW
;

515 
	$ns_sign_t˝_öô
 (*, c⁄° 
u_ch¨
 *, ,

516 
ns_t˝_tsig_°©e
 *Ë
__THROW
;

517 
u_ch¨
 *
	$ns_föd_tsig
 (
u_ch¨
 *, u_ch¨ *Ë
__THROW
;

518 
	$ns_vîify
 (
u_ch¨
 *, *, *, const u_char *, ,

519 
u_ch¨
 *, *, 
time_t
 *, Ë
__THROW
;

520 
	$ns_vîify_t˝
 (
u_ch¨
 *, *, 
ns_t˝_tsig_°©e
 *, )

521 
__THROW
;

522 
	$ns_vîify_t˝_öô
 (*, c⁄° 
u_ch¨
 *, ,

523 
ns_t˝_tsig_°©e
 *Ë
__THROW
;

524 
	$ns_ßmedomaö
 (c⁄° *, c⁄° *Ë
__THROW
;

525 
	$ns_subdomaö
 (c⁄° *, c⁄° *Ë
__THROW
;

526 
	$ns_makeˇn⁄
 (c⁄° *, *, 
size_t
Ë
__THROW
;

527 
	$ns_ßmíame
 (c⁄° *, c⁄° *Ë
__THROW
;

528 
__END_DECLS


530 #ifde‡
BIND_4_COMPAT


531 
	~<¨∑/«me£r_com∑t.h
>

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


120 #unde‡
°©ic_as£π


121 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/byteswap.h

18 #i‚de‡
_BYTESWAP_H


19 
	#_BYTESWAP_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/byãsw≠.h
>

31 
	#bsw≠_16
(
x
Ë
	`__bsw≠_16
 (x)

	)

34 
	#bsw≠_32
(
x
Ë
	`__bsw≠_32
 (x)

	)

37 
	#bsw≠_64
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

90 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_BSD


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3));

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

195 
	#ªaddú_r
 
ªaddú64_r


	)

199 #ifde‡
__USE_LARGEFILE64


200 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

201 
dúít64
 *
__ª°ri˘
 
__íåy
,

202 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

203 
	`__n⁄nuŒ
 ((1, 2, 3));

208 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

210 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


211 
	~<bôs/ty≥s.h
>

214 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

220 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


223 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


226 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

229 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


230 #i‚de‡
MAXNAMLEN


232 
	~<bôs/posix1_lim.h
>

235 #ifde‡
NAME_MAX


236 
	#MAXNAMLEN
 
NAME_MAX


	)

238 
	#MAXNAMLEN
 255

	)

243 
	#__√ed_size_t


	)

244 
	~<°ddef.h
>

253 #i‚de‡
__USE_FILE_OFFSET64


254 
	`sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

255 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

256 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

257 (*
__cmp
Ë(c⁄° 
dúít
 **,

258 c⁄° 
dúít
 **))

259 
	`__n⁄nuŒ
 ((1, 2));

261 #ifde‡
__REDIRECT


262 
	`__REDIRECT
 (
sˇndú
,

263 (c⁄° *
__ª°ri˘
 
__dú
,

264 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

265 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

266 (*
__cmp
Ë(c⁄° 
dúít
 **,

267 c⁄° 
dúít
 **)),

268 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

270 
	#sˇndú
 
sˇndú64


	)

274 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


277 
	`sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

278 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

279 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

280 (*
__cmp
Ë(c⁄° 
dúít64
 **,

281 c⁄° 
dúít64
 **))

282 
	`__n⁄nuŒ
 ((1, 2));

285 #ifde‡
__USE_GNU


291 #i‚de‡
__USE_FILE_OFFSET64


292 
	`sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

293 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

294 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

295 (*
__cmp
Ë(c⁄° 
dúít
 **,

296 c⁄° 
dúít
 **))

297 
	`__n⁄nuŒ
 ((2, 3));

299 #ifde‡
__REDIRECT


300 
	`__REDIRECT
 (
sˇndú©
,

301 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

302 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

303 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

304 (*
__cmp
Ë(c⁄° 
dúít
 **,

305 c⁄° 
dúít
 **)),

306 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

308 
	#sˇndú©
 
sˇndú©64


	)

314 
	`sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

315 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

316 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

317 (*
__cmp
Ë(c⁄° 
dúít64
 **,

318 c⁄° 
dúít64
 **))

319 
	`__n⁄nuŒ
 ((2, 3));

323 #i‚de‡
__USE_FILE_OFFSET64


324 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

325 c⁄° 
dúít
 **
__e2
)

326 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

328 #ifde‡
__REDIRECT


329 
	`__REDIRECT_NTH
 (
Æphas‹t
,

330 (c⁄° 
dúít
 **
__e1
,

331 c⁄° 
dúít
 **
__e2
),

332 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

334 
	#Æphas‹t
 
Æphas‹t64


	)

338 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


339 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

340 c⁄° 
dúít64
 **
__e2
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


351 #i‚de‡
__USE_FILE_OFFSET64


352 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

353 
size_t
 
__nbyãs
,

354 
__off_t
 *
__ª°ri˘
 
__ba£p
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

357 #ifde‡
__REDIRECT


358 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

359 (
__fd
, *
__ª°ri˘
 
__buf
,

360 
size_t
 
__nbyãs
,

361 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

362 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

364 
	#gëdúíåõs
 
gëdúíåõs64


	)

368 #ifde‡
__USE_LARGEFILE64


369 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

370 
size_t
 
__nbyãs
,

371 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

372 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

376 #ifde‡
__USE_GNU


378 #i‚de‡
__USE_FILE_OFFSET64


379 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

380 c⁄° 
dúít
 **
__e2
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

383 #ifde‡
__REDIRECT


384 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

385 (c⁄° 
dúít
 **
__e1
,

386 c⁄° 
dúít
 **
__e2
),

387 
vîsi⁄s‹t64
)

388 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

390 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

394 #ifde‡
__USE_LARGEFILE64


395 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

396 c⁄° 
dúít64
 **
__e2
)

397 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

401 
__END_DECLS


	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 
Dl_£Ω©h
 
dls_£Ω©h
[1];

184 } 
	tDl_£röfo
;

188 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

137 
f˙é
 (
__fd
, 
__cmd
, ...);

145 #i‚de‡
__USE_FILE_OFFSET64


146 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

148 #ifde‡
__REDIRECT


149 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

150 
	`__n⁄nuŒ
 ((1));

152 
	#›í
 
›í64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__USE_ATFILE


169 #i‚de‡
__USE_FILE_OFFSET64


170 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

171 
	`__n⁄nuŒ
 ((2));

173 #ifde‡
__REDIRECT


174 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

175 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

177 
	#›í©
 
›í©64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__REDIRECT


195 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

196 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

198 
	#¸ót
 
¸ót64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

206 && !
deföed
 
__USE_POSIX
))

215 
	#F_ULOCK
 0

	)

216 
	#F_LOCK
 1

	)

217 
	#F_TLOCK
 2

	)

218 
	#F_TEST
 3

	)

220 #i‚de‡
__USE_FILE_OFFSET64


221 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

223 #ifde‡
__REDIRECT


224 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

226 
	#lockf
 
lockf64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

234 #ifde‡
__USE_XOPEN2K


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

239 
__advi£
Ë
__THROW
;

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

243 
__off64_t
 
__Àn
, 
__advi£
),

244 
posix_Ádvi£64
);

246 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

249 #ifde‡
__USE_LARGEFILE64


250 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

251 
__advi£
Ë
__THROW
;

259 #i‚de‡
__USE_FILE_OFFSET64


260 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

264 
__off64_t
 
__Àn
),

265 
posix_ÁŒoˇã64
);

267 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

270 #ifde‡
__USE_LARGEFILE64


271 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

277 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

278 && 
deföed
 
__va_¨g_∑ck_Àn


279 
	~<bôs/f˙é2.h
>

282 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/fnmatch.h

18 #i‚def 
_FNMATCH_H


19 
	#_FNMATCH_H
 1

	)

21 #ifdef 
__˝lu•lus


27 #unde‡
FNM_PATHNAME


28 #unde‡
FNM_NOESCAPE


29 #unde‡
FNM_PERIOD


32 
	#FNM_PATHNAME
 (1 << 0Ë

	)

33 
	#FNM_NOESCAPE
 (1 << 1Ë

	)

34 
	#FNM_PERIOD
 (1 << 2Ë

	)

36 #i‡!
deföed
 
_POSIX_C_SOURCE
 || _POSIX_C_SOURCE < 2 || deföed 
_GNU_SOURCE


37 
	#FNM_FILE_NAME
 
FNM_PATHNAME


	)

38 
	#FNM_LEADING_DIR
 (1 << 3Ë

	)

39 
	#FNM_CASEFOLD
 (1 << 4Ë

	)

40 
	#FNM_EXTMATCH
 (1 << 5Ë

	)

44 
	#FNM_NOMATCH
 1

	)

50 #ifde‡
_XOPEN_SOURCE


51 
	#FNM_NOSYS
 (-1)

	)

56 
‚m©ch
 (c⁄° *
__∑âîn
, c⁄° *
__«me
, 
__Êags
);

58 #ifdef 
__˝lu•lus


	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/ifaddrs.h

19 #i‚de‡
_IFADDRS_H


20 
	#_IFADDRS_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/sockë.h
>

25 
__BEGIN_DECLS


29 
	siÁddrs


31 
iÁddrs
 *
	miÁ_√xt
;

33 *
	miÁ_«me
;

34 
	miÁ_Êags
;

36 
sockaddr
 *
	miÁ_addr
;

37 
sockaddr
 *
	miÁ_√tmask
;

44 
sockaddr
 *
	mifu_brﬂdaddr
;

45 
sockaddr
 *
	mifu_d°addr
;

46 } 
	miÁ_ifu
;

49 #i‚de‡
iÁ_brﬂdaddr


50 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

52 #i‚de‡
iÁ_d°addr


53 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

56 *
	miÁ_d©a
;

66 
	$gëiÁddrs
 (
iÁddrs
 **
__iÁp
Ë
__THROW
;

69 
	$‰ìiÁddrs
 (
iÁddrs
 *
__iÁ
Ë
__THROW
;

71 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libintl.h

20 #i‚de‡
_LIBINTL_H


21 
	#_LIBINTL_H
 1

	)

23 
	~<„©uªs.h
>

27 
	#__USE_GNU_GETTEXT
 1

	)

31 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

32 ((
maj‹
Ë=0 ? 1 : -1)

	)

34 
__BEGIN_DECLS


39 *
	$gëãxt
 (c⁄° *
__msgid
)

40 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

44 *
	$dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

45 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

46 *
	$__dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

47 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

51 *
	$dcgëãxt
 (c⁄° *
__domaö«me
,

52 c⁄° *
__msgid
, 
__ˇãg‹y
)

53 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

54 *
	$__dcgëãxt
 (c⁄° *
__domaö«me
,

55 c⁄° *
__msgid
, 
__ˇãg‹y
)

56 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

61 *
	$ngëãxt
 (c⁄° *
__msgid1
, c⁄° *
__msgid2
,

62 
__n
)

63 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

67 *
	$dngëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

68 c⁄° *
__msgid2
, 
__n
)

69 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

73 *
	$d˙gëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

74 c⁄° *
__msgid2
, 
__n
,

75 
__ˇãg‹y
)

76 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

82 *
	$ãxtdomaö
 (c⁄° *
__domaö«me
Ë
__THROW
;

86 *
	$bödãxtdomaö
 (c⁄° *
__domaö«me
,

87 c⁄° *
__dú«me
Ë
__THROW
;

91 *
	$böd_ãxtdomaö_code£t
 (c⁄° *
__domaö«me
,

92 c⁄° *
__code£t
Ë
__THROW
;

96 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


99 
	#__√ed_NULL


	)

100 
	~<°ddef.h
>

103 
	~<loˇÀ.h
>

109 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

111 
	#dgëãxt
(
domaö«me
, 
msgid
) \

112 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

114 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

116 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

117 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

121 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/atalk.h

1 #i‚de‡
__LINUX_ATALK_H__


2 
	#__LINUX_ATALK_H__


	)

4 
	~<löux/ty≥s.h
>

5 
	~<asm/byã‹dî.h
>

6 
	~<löux/sockë.h
>

14 
	#ATPORT_FIRST
 1

	)

15 
	#ATPORT_RESERVED
 128

	)

16 
	#ATPORT_LAST
 254

	)

17 
	#ATADDR_ANYNET
 (
__u16
)0

	)

18 
	#ATADDR_ANYNODE
 (
__u8
)0

	)

19 
	#ATADDR_ANYPORT
 (
__u8
)0

	)

20 
	#ATADDR_BCAST
 (
__u8
)255

	)

21 
	#DDP_MAXSZ
 587

	)

22 
	#DDP_MAXHOPS
 15

	)

24 
	#SIOCATALKDIFADDR
 (
SIOCPROTOPRIVATE
 + 0)

	)

26 
	s©Æk_addr
 {

27 
__be16
 
	ms_√t
;

28 
__u8
 
	ms_node
;

31 
	ssockaddr_©
 {

32 
__kî√l_ß_Ámûy_t
 
	mßt_Ámûy
;

33 
__u8
 
	mßt_p‹t
;

34 
©Æk_addr
 
	mßt_addr
;

35 
	mßt_zîo
[8];

38 
	s©Æk_√å™ge
 {

39 
__u8
 
	mƒ_pha£
;

40 
__be16
 
	mƒ_fú°√t
;

41 
__be16
 
	mƒ_œ°√t
;

	@/usr/include/linux/atm.h

11 #i‚de‡
_LINUX_ATM_H


12 
	#_LINUX_ATM_H


	)

20 
	~<löux/©m≠i.h
>

21 
	~<löux/©mßp.h
>

22 
	~<löux/©mioc.h
>

23 
	~<löux/ty≥s.h
>

27 
	#ATM_CELL_SIZE
 53

	)

28 
	#ATM_CELL_PAYLOAD
 48

	)

29 
	#ATM_AAL0_SDU
 52

	)

30 
	#ATM_MAX_AAL34_PDU
 65535

	)

31 
	#ATM_AAL5_TRAILER
 8

	)

32 
	#ATM_MAX_AAL5_PDU
 65535

	)

33 
	#ATM_MAX_CDV
 9999

	)

34 
	#ATM_NOT_RSV_VCI
 32

	)

36 
	#ATM_MAX_VPI
 255

	)

37 
	#ATM_MAX_VPI_NNI
 4096

	)

38 
	#ATM_MAX_VCI
 65535

	)

42 
	#ATM_NO_AAL
 0

	)

43 
	#ATM_AAL0
 13

	)

44 
	#ATM_AAL1
 1

	)

45 
	#ATM_AAL2
 2

	)

46 
	#ATM_AAL34
 3

	)

47 
	#ATM_AAL5
 5

	)

57 
	#__SO_ENCODE
(
l
,
n
,
t
) ((((l) & 0x1FF) << 22) | ((n) << 16) | \

58 (
t
))

	)

59 
	#__SO_LEVEL_MATCH
(
c
,
m
Ë(((cË>> 22Ë=((mË& 0x1FF))

	)

60 
	#__SO_NUMBER
(
c
Ë(((cË>> 16Ë& 0x3f)

	)

61 
	#__SO_SIZE
(
c
Ë((cË& 0x3fff)

	)

67 
	#SO_SETCLP
 
	`__SO_ENCODE
(
SOL_ATM
,0,)

	)

69 
	#SO_CIRANGE
 
	`__SO_ENCODE
(
SOL_ATM
,1,
©m_cú™ge
)

	)

72 
	#SO_ATMQOS
 
	`__SO_ENCODE
(
SOL_ATM
,2,
©m_qos
)

	)

74 
	#SO_ATMSAP
 
	`__SO_ENCODE
(
SOL_ATM
,3,
©m_ßp
)

	)

76 
	#SO_ATMPVC
 
	`__SO_ENCODE
(
SOL_ATM
,4,
sockaddr_©mpvc
)

	)

78 
	#SO_MULTIPOINT
 
	`__SO_ENCODE
(
SOL_ATM
, 5, )

	)

93 
	#ATM_HDR_GFC_MASK
 0xf0000000

	)

94 
	#ATM_HDR_GFC_SHIFT
 28

	)

95 
	#ATM_HDR_VPI_MASK
 0x0ff00000

	)

96 
	#ATM_HDR_VPI_SHIFT
 20

	)

97 
	#ATM_HDR_VCI_MASK
 0x000ffff0

	)

98 
	#ATM_HDR_VCI_SHIFT
 4

	)

99 
	#ATM_HDR_PTI_MASK
 0x0000000e

	)

100 
	#ATM_HDR_PTI_SHIFT
 1

	)

101 
	#ATM_HDR_CLP
 0x00000001

	)

108 
	#ATM_PTI_US0
 0

	)

109 
	#ATM_PTI_US1
 1

	)

110 
	#ATM_PTI_UCES0
 2

	)

111 
	#ATM_PTI_UCES1
 3

	)

112 
	#ATM_PTI_SEGF5
 4

	)

113 
	#ATM_PTI_E2EF5
 5

	)

114 
	#ATM_PTI_RSV_RM
 6

	)

115 
	#ATM_PTI_RSV
 7

	)

126 
	#ATM_NONE
 0

	)

127 
	#ATM_UBR
 1

	)

128 
	#ATM_CBR
 2

	)

129 
	#ATM_VBR
 3

	)

130 
	#ATM_ABR
 4

	)

131 
	#ATM_ANYCLASS
 5

	)

133 
	#ATM_MAX_PCR
 -1

	)

135 
	s©m_åaÂrm
 {

136 
	måaffic_˛ass
;

137 
	mmax_p¸
;

138 
	mp¸
;

139 
	mmö_p¸
;

140 
	mmax_cdv
;

141 
	mmax_sdu
;

143 
	mi¸
;

144 
	mtbe
;

145 
	m‰â
 : 24;

146 
	mrif
 : 4;

147 
	mrdf
 : 4;

148 
	mƒm_¥es
 :1;

149 
	måm_¥es
 :1;

150 
	madtf_¥es
 :1;

151 
	mcdf_¥es
 :1;

152 
	mƒm
 :3;

153 
	måm
 :3;

154 
	madtf
 :10;

155 
	mcdf
 :3;

156 
	m•¨e
 :9;

159 
	s©m_qos
 {

160 
©m_åaÂrm
 
	mtxç
;

161 
©m_åaÂrm
 
rxç
 
	m__ATM_API_ALIGN
;

163 
Øl
 
	m__ATM_API_ALIGN
;

168 
	#ATM_ITF_ANY
 -1

	)

169 
	#ATM_VPI_ANY
 -1

	)

170 
	#ATM_VCI_ANY
 -1

	)

171 
	#ATM_VPI_UNSPEC
 -2

	)

172 
	#ATM_VCI_UNSPEC
 -2

	)

175 
	ssockaddr_©mpvc
 {

176 
	mßp_Ámûy
;

178 
	môf
;

179 
	mvpi
;

180 
	mvci
;

181 } 
ßp_addr
 
	m__ATM_API_ALIGN
;

186 
	#ATM_ESA_LEN
 20

	)

187 
	#ATM_E164_LEN
 12

	)

189 
	#ATM_AFI_DCC
 0x39

	)

190 
	#ATM_AFI_ICD
 0x47

	)

191 
	#ATM_AFI_E164
 0x45

	)

192 
	#ATM_AFI_LOCAL
 0x49

	)

194 
	#ATM_AFI_DCC_GROUP
 0xBD

	)

195 
	#ATM_AFI_ICD_GROUP
 0xC5

	)

196 
	#ATM_AFI_E164_GROUP
 0xC3

	)

197 
	#ATM_AFI_LOCAL_GROUP
 0xC7

	)

199 
	#ATM_LIJ_NONE
 0

	)

200 
	#ATM_LIJ
 1

	)

201 
	#ATM_LIJ_RPJ
 2

	)

202 
	#ATM_LIJ_NJ
 3

	)

205 
	ssockaddr_©msvc
 {

206 
	mßs_Ámûy
;

208 
	m¥v
[
ATM_ESA_LEN
];

209 
	mpub
[
ATM_E164_LEN
+1];

211 
	mlij_ty≥
;

212 
__u32
 
	mlij_id
;

213 } 
ßs_addr
 
	m__ATM_API_ALIGN
;

217 
__ölöe__
 
	$©msvc_addr_ö_u£
(
sockaddr_©msvc
 
addr
)

219  *
addr
.
ßs_addr
.
¥v
 || *addr.ßs_addr.
pub
;

220 
	}
}

223 
__ölöe__
 
	$©mpvc_addr_ö_u£
(
sockaddr_©mpvc
 
addr
)

225  
addr
.
ßp_addr
.
ôf
 ||áddr.ßp_addr.
vpi
 ||áddr.ßp_addr.
vci
;

226 
	}
}

233 
	s©mif_sioc
 {

234 
	mnumbî
;

235 
	mÀngth
;

236 *
	m¨g
;

240 
	t©m_backíd_t
;

	@/usr/include/linux/ax25.h

6 #i‚def 
AX25_KERNEL_H


7 
	#AX25_KERNEL_H


	)

9 
	~<löux/sockë.h
>

11 
	#AX25_MTU
 256

	)

12 
	#AX25_MAX_DIGIS
 8

	)

14 
	#AX25_WINDOW
 1

	)

15 
	#AX25_T1
 2

	)

16 
	#AX25_N2
 3

	)

17 
	#AX25_T3
 4

	)

18 
	#AX25_T2
 5

	)

19 
	#AX25_BACKOFF
 6

	)

20 
	#AX25_EXTSEQ
 7

	)

21 
	#AX25_PIDINCL
 8

	)

22 
	#AX25_IDLE
 9

	)

23 
	#AX25_PACLEN
 10

	)

24 
	#AX25_IAMDIGI
 12

	)

26 
	#AX25_KILL
 99

	)

28 
	#SIOCAX25GETUID
 (
SIOCPROTOPRIVATE
+0)

	)

29 
	#SIOCAX25ADDUID
 (
SIOCPROTOPRIVATE
+1)

	)

30 
	#SIOCAX25DELUID
 (
SIOCPROTOPRIVATE
+2)

	)

31 
	#SIOCAX25NOUID
 (
SIOCPROTOPRIVATE
+3)

	)

32 
	#SIOCAX25OPTRT
 (
SIOCPROTOPRIVATE
+7)

	)

33 
	#SIOCAX25CTLCON
 (
SIOCPROTOPRIVATE
+8)

	)

34 
	#SIOCAX25GETINFOOLD
 (
SIOCPROTOPRIVATE
+9)

	)

35 
	#SIOCAX25ADDFWD
 (
SIOCPROTOPRIVATE
+10)

	)

36 
	#SIOCAX25DELFWD
 (
SIOCPROTOPRIVATE
+11)

	)

37 
	#SIOCAX25DEVCTL
 (
SIOCPROTOPRIVATE
+12)

	)

38 
	#SIOCAX25GETINFO
 (
SIOCPROTOPRIVATE
+13)

	)

40 
	#AX25_SET_RT_IPMODE
 2

	)

42 
	#AX25_NOUID_DEFAULT
 0

	)

43 
	#AX25_NOUID_BLOCK
 1

	)

46 
	max25_ˇŒ
[7];

47 } 
	tax25_addªss
;

49 
	ssockaddr_ax25
 {

50 
__kî√l_ß_Ámûy_t
 
	mßx25_Ámûy
;

51 
ax25_addªss
 
	mßx25_ˇŒ
;

52 
	mßx25_ndigis
;

56 
	#ßx25_uid
 
ßx25_ndigis


	)

58 
	sfuŒ_sockaddr_ax25
 {

59 
sockaddr_ax25
 
	mfß_ax25
;

60 
ax25_addªss
 
	mfß_digùóãr
[
AX25_MAX_DIGIS
];

63 
	sax25_rouãs_°ru˘
 {

64 
ax25_addªss
 
	mp‹t_addr
;

65 
ax25_addªss
 
	mde°_addr
;

66 
	mdigi_cou¡
;

67 
ax25_addªss
 
	mdigi_addr
[
AX25_MAX_DIGIS
];

70 
	sax25_rouã_›t_°ru˘
 {

71 
ax25_addªss
 
	mp‹t_addr
;

72 
ax25_addªss
 
	mde°_addr
;

73 
	mcmd
;

74 
	m¨g
;

77 
	sax25_˘l_°ru˘
 {

78 
ax25_addªss
 
	mp‹t_addr
;

79 
ax25_addªss
 
	msour˚_addr
;

80 
ax25_addªss
 
	mde°_addr
;

81 
	mcmd
;

82 
	m¨g
;

83 
	mdigi_cou¡
;

84 
ax25_addªss
 
	mdigi_addr
[
AX25_MAX_DIGIS
];

88 
	sax25_öfo_°ru˘_dïªˇãd
 {

89 
	mn2
, 
	mn2cou¡
;

90 
	mt1
, 
	mt1timî
;

91 
	mt2
, 
	mt2timî
;

92 
	mt3
, 
	mt3timî
;

93 
	midÀ
, 
	midÀtimî
;

94 
	m°©e
;

95 
	mrcv_q
, 
	m¢d_q
;

98 
	sax25_öfo_°ru˘
 {

99 
	mn2
, 
	mn2cou¡
;

100 
	mt1
, 
	mt1timî
;

101 
	mt2
, 
	mt2timî
;

102 
	mt3
, 
	mt3timî
;

103 
	midÀ
, 
	midÀtimî
;

104 
	m°©e
;

105 
	mrcv_q
, 
	m¢d_q
;

106 
	mvs
, 
	mvr
, 
	mva
, 
	mvs_max
;

107 
	m∑˛í
;

108 
	mwödow
;

111 
	sax25_fwd_°ru˘
 {

112 
ax25_addªss
 
	mp‹t_‰om
;

113 
ax25_addªss
 
	mp‹t_to
;

	@/usr/include/linux/can/netlink.h

18 #i‚de‡
_CAN_NETLINK_H


19 
	#_CAN_NETLINK_H


	)

21 
	~<löux/ty≥s.h
>

30 
	sˇn_bôtimög
 {

31 
__u32
 
	mbôøã
;

32 
__u32
 
	mßm∂e_poöt
;

33 
__u32
 
	mtq
;

34 
__u32
 
	m¥›_£g
;

35 
__u32
 
	mpha£_£g1
;

36 
__u32
 
	mpha£_£g2
;

37 
__u32
 
	msjw
;

38 
__u32
 
	mbΩ
;

46 
	sˇn_bôtimög_c⁄°
 {

47 
	m«me
[16];

48 
__u32
 
	mt£g1_mö
;

49 
__u32
 
	mt£g1_max
;

50 
__u32
 
	mt£g2_mö
;

51 
__u32
 
	mt£g2_max
;

52 
__u32
 
	msjw_max
;

53 
__u32
 
	mbΩ_mö
;

54 
__u32
 
	mbΩ_max
;

55 
__u32
 
	mbΩ_öc
;

61 
	sˇn_˛ock
 {

62 
__u32
 
	m‰eq
;

68 
	eˇn_°©e
 {

69 
	mCAN_STATE_ERROR_ACTIVE
 = 0,

70 
	mCAN_STATE_ERROR_WARNING
,

71 
	mCAN_STATE_ERROR_PASSIVE
,

72 
	mCAN_STATE_BUS_OFF
,

73 
	mCAN_STATE_STOPPED
,

74 
	mCAN_STATE_SLEEPING
,

75 
	mCAN_STATE_MAX


81 
	sˇn_bîr_cou¡î
 {

82 
__u16
 
	mtxîr
;

83 
__u16
 
	mrxîr
;

89 
	sˇn_˘æmode
 {

90 
__u32
 
	mmask
;

91 
__u32
 
	mÊags
;

94 
	#CAN_CTRLMODE_LOOPBACK
 0x01

	)

95 
	#CAN_CTRLMODE_LISTENONLY
 0x02

	)

96 
	#CAN_CTRLMODE_3_SAMPLES
 0x04

	)

97 
	#CAN_CTRLMODE_ONE_SHOT
 0x08

	)

98 
	#CAN_CTRLMODE_BERR_REPORTING
 0x10

	)

99 
	#CAN_CTRLMODE_FD
 0x20

	)

100 
	#CAN_CTRLMODE_PRESUME_ACK
 0x40

	)

101 
	#CAN_CTRLMODE_FD_NON_ISO
 0x80

	)

106 
	sˇn_devi˚_°©s
 {

107 
__u32
 
	mbus_îr‹
;

108 
__u32
 
	mîr‹_w¨nög
;

109 
__u32
 
	mîr‹_∑ssive
;

110 
__u32
 
	mbus_off
;

111 
__u32
 
	m¨bôøti⁄_lo°
;

112 
__u32
 
	mª°¨ts
;

119 
	mIFLA_CAN_UNSPEC
,

120 
	mIFLA_CAN_BITTIMING
,

121 
	mIFLA_CAN_BITTIMING_CONST
,

122 
	mIFLA_CAN_CLOCK
,

123 
	mIFLA_CAN_STATE
,

124 
	mIFLA_CAN_CTRLMODE
,

125 
	mIFLA_CAN_RESTART_MS
,

126 
	mIFLA_CAN_RESTART
,

127 
	mIFLA_CAN_BERR_COUNTER
,

128 
	mIFLA_CAN_DATA_BITTIMING
,

129 
	mIFLA_CAN_DATA_BITTIMING_CONST
,

130 
	m__IFLA_CAN_MAX


133 
	#IFLA_CAN_MAX
 (
__IFLA_CAN_MAX
 - 1)

	)

	@/usr/include/linux/ethtool.h

13 #i‚de‡
_LINUX_ETHTOOL_H


14 
	#_LINUX_ETHTOOL_H


	)

16 
	~<löux/ty≥s.h
>

17 
	~<löux/if_ëhî.h
>

19 
	~<limôs.h
>

96 
	sëhtoﬁ_cmd
 {

97 
__u32
 
	mcmd
;

98 
__u32
 
	msuµ‹ãd
;

99 
__u32
 
	madvîtisög
;

100 
__u16
 
	m•ìd
;

101 
__u8
 
	mdu∂ex
;

102 
__u8
 
	mp‹t
;

103 
__u8
 
	mphy_addªss
;

104 
__u8
 
	må™s˚ivî
;

105 
__u8
 
	maut⁄eg
;

106 
__u8
 
	mmdio_suµ‹t
;

107 
__u32
 
	mmaxtxpkt
;

108 
__u32
 
	mmaxrxpkt
;

109 
__u16
 
	m•ìd_hi
;

110 
__u8
 
	mëh_ç_mdix
;

111 
__u8
 
	mëh_ç_mdix_˘æ
;

112 
__u32
 
	mÕ_advîtisög
;

113 
__u32
 
	mª£rved
[2];

116 
__ölöe__
 
	$ëhtoﬁ_cmd_•ìd_£t
(
ëhtoﬁ_cmd
 *
ï
,

117 
__u32
 
•ìd
)

120 
ï
->
•ìd
 = (
__u16
)speed;

121 
ï
->
•ìd_hi
 = (
__u16
)(
•ìd
 >> 16);

122 
	}
}

124 
__ölöe__
 
__u32
 
	$ëhtoﬁ_cmd_•ìd
(c⁄° 
ëhtoﬁ_cmd
 *
ï
)

126  (
ï
->
•ìd_hi
 << 16Ë|Ép->
•ìd
;

127 
	}
}

134 
	#ETH_MDIO_SUPPORTS_C22
 1

	)

141 
	#ETH_MDIO_SUPPORTS_C45
 2

	)

143 
	#ETHTOOL_FWVERS_LEN
 32

	)

144 
	#ETHTOOL_BUSINFO_LEN
 32

	)

145 
	#ETHTOOL_EROMVERS_LEN
 32

	)

178 
	sëhtoﬁ_drvöfo
 {

179 
__u32
 
	mcmd
;

180 
	mdrivî
[32];

181 
	mvîsi⁄
[32];

182 
	mfw_vîsi⁄
[
ETHTOOL_FWVERS_LEN
];

183 
	mbus_öfo
[
ETHTOOL_BUSINFO_LEN
];

184 
	mîom_vîsi⁄
[
ETHTOOL_EROMVERS_LEN
];

185 
	mª£rved2
[12];

186 
__u32
 
	mn_¥iv_Êags
;

187 
__u32
 
	mn_°©s
;

188 
__u32
 
	mã°öfo_Àn
;

189 
__u32
 
	mìdump_Àn
;

190 
__u32
 
	mªgdump_Àn
;

193 
	#SOPASS_MAX
 6

	)

204 
	sëhtoﬁ_wﬁöfo
 {

205 
__u32
 
	mcmd
;

206 
__u32
 
	msuµ‹ãd
;

207 
__u32
 
	mwﬁ›ts
;

208 
__u8
 
	ms›ass
[
SOPASS_MAX
];

212 
	sëhtoﬁ_vÆue
 {

213 
__u32
 
	mcmd
;

214 
__u32
 
	md©a
;

217 
	etu«bÀ_id
 {

218 
	mETHTOOL_ID_UNSPEC
,

219 
	mETHTOOL_RX_COPYBREAK
,

220 
	mETHTOOL_TX_COPYBREAK
,

225 
	m__ETHTOOL_TUNABLE_COUNT
,

228 
	etu«bÀ_ty≥_id
 {

229 
	mETHTOOL_TUNABLE_UNSPEC
,

230 
	mETHTOOL_TUNABLE_U8
,

231 
	mETHTOOL_TUNABLE_U16
,

232 
	mETHTOOL_TUNABLE_U32
,

233 
	mETHTOOL_TUNABLE_U64
,

234 
	mETHTOOL_TUNABLE_STRING
,

235 
	mETHTOOL_TUNABLE_S8
,

236 
	mETHTOOL_TUNABLE_S16
,

237 
	mETHTOOL_TUNABLE_S32
,

238 
	mETHTOOL_TUNABLE_S64
,

241 
	sëhtoﬁ_tu«bÀ
 {

242 
__u32
 
	mcmd
;

243 
__u32
 
	mid
;

244 
__u32
 
	mty≥_id
;

245 
__u32
 
	mÀn
;

246 *
	md©a
[0];

264 
	sëhtoﬁ_ªgs
 {

265 
__u32
 
	mcmd
;

266 
__u32
 
	mvîsi⁄
;

267 
__u32
 
	mÀn
;

268 
__u8
 
	md©a
[0];

289 
	sëhtoﬁ_ì¥om
 {

290 
__u32
 
	mcmd
;

291 
__u32
 
	mmagic
;

292 
__u32
 
	moff£t
;

293 
__u32
 
	mÀn
;

294 
__u8
 
	md©a
[0];

314 
	sëhtoﬁ_ìe
 {

315 
__u32
 
	mcmd
;

316 
__u32
 
	msuµ‹ãd
;

317 
__u32
 
	madvîti£d
;

318 
__u32
 
	mÕ_advîti£d
;

319 
__u32
 
	mìe_a˘ive
;

320 
__u32
 
	mìe_íabÀd
;

321 
__u32
 
	mtx_Õi_íabÀd
;

322 
__u32
 
	mtx_Õi_timî
;

323 
__u32
 
	mª£rved
[2];

336 
	sëhtoﬁ_modöfo
 {

337 
__u32
 
	mcmd
;

338 
__u32
 
	mty≥
;

339 
__u32
 
	mì¥om_Àn
;

340 
__u32
 
	mª£rved
[8];

416 
	sëhtoﬁ_cﬂÀs˚
 {

417 
__u32
 
	mcmd
;

418 
__u32
 
	mrx_cﬂÀs˚_u£cs
;

419 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames
;

420 
__u32
 
	mrx_cﬂÀs˚_u£cs_úq
;

421 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_úq
;

422 
__u32
 
	mtx_cﬂÀs˚_u£cs
;

423 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames
;

424 
__u32
 
	mtx_cﬂÀs˚_u£cs_úq
;

425 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_úq
;

426 
__u32
 
	m°©s_block_cﬂÀs˚_u£cs
;

427 
__u32
 
	mu£_ad≠tive_rx_cﬂÀs˚
;

428 
__u32
 
	mu£_ad≠tive_tx_cﬂÀs˚
;

429 
__u32
 
	mpkt_øã_low
;

430 
__u32
 
	mrx_cﬂÀs˚_u£cs_low
;

431 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_low
;

432 
__u32
 
	mtx_cﬂÀs˚_u£cs_low
;

433 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_low
;

434 
__u32
 
	mpkt_øã_high
;

435 
__u32
 
	mrx_cﬂÀs˚_u£cs_high
;

436 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_high
;

437 
__u32
 
	mtx_cﬂÀs˚_u£cs_high
;

438 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_high
;

439 
__u32
 
	møã_ßm∂e_öãrvÆ
;

467 
	sëhtoﬁ_rög∑øm
 {

468 
__u32
 
	mcmd
;

469 
__u32
 
	mrx_max_≥ndög
;

470 
__u32
 
	mrx_möi_max_≥ndög
;

471 
__u32
 
	mrx_jumbo_max_≥ndög
;

472 
__u32
 
	mtx_max_≥ndög
;

473 
__u32
 
	mrx_≥ndög
;

474 
__u32
 
	mrx_möi_≥ndög
;

475 
__u32
 
	mrx_jumbo_≥ndög
;

476 
__u32
 
	mtx_≥ndög
;

495 
	sëhtoﬁ_ch™√ls
 {

496 
__u32
 
	mcmd
;

497 
__u32
 
	mmax_rx
;

498 
__u32
 
	mmax_tx
;

499 
__u32
 
	mmax_Ÿhî
;

500 
__u32
 
	mmax_comböed
;

501 
__u32
 
	mrx_cou¡
;

502 
__u32
 
	mtx_cou¡
;

503 
__u32
 
	mŸhî_cou¡
;

504 
__u32
 
	mcomböed_cou¡
;

529 
	sëhtoﬁ_∑u£∑øm
 {

530 
__u32
 
	mcmd
;

531 
__u32
 
	maut⁄eg
;

532 
__u32
 
	mrx_∑u£
;

533 
__u32
 
	mtx_∑u£
;

536 
	#ETH_GSTRING_LEN
 32

	)

549 
	eëhtoﬁ_°rög£t
 {

550 
	mETH_SS_TEST
 = 0,

551 
	mETH_SS_STATS
,

552 
	mETH_SS_PRIV_FLAGS
,

553 
	mETH_SS_NTUPLE_FILTERS
,

554 
	mETH_SS_FEATURES
,

555 
	mETH_SS_RSS_HASH_FUNCS
,

556 
	mETH_SS_TUNABLES
,

571 
	sëhtoﬁ_g°rögs
 {

572 
__u32
 
	mcmd
;

573 
__u32
 
	m°rög_£t
;

574 
__u32
 
	mÀn
;

575 
__u8
 
	md©a
[0];

595 
	sëhtoﬁ_s£t_öfo
 {

596 
__u32
 
	mcmd
;

597 
__u32
 
	mª£rved
;

598 
__u64
 
	ms£t_mask
;

599 
__u32
 
	md©a
[0];

612 
	eëhtoﬁ_ã°_Êags
 {

613 
	mETH_TEST_FL_OFFLINE
 = (1 << 0),

614 
	mETH_TEST_FL_FAILED
 = (1 << 1),

615 
	mETH_TEST_FL_EXTERNAL_LB
 = (1 << 2),

616 
	mETH_TEST_FL_EXTERNAL_LB_DONE
 = (1 << 3),

633 
	sëhtoﬁ_ã°
 {

634 
__u32
 
	mcmd
;

635 
__u32
 
	mÊags
;

636 
__u32
 
	mª£rved
;

637 
__u32
 
	mÀn
;

638 
__u64
 
	md©a
[0];

652 
	sëhtoﬁ_°©s
 {

653 
__u32
 
	mcmd
;

654 
__u32
 
	mn_°©s
;

655 
__u64
 
	md©a
[0];

669 
	sëhtoﬁ_≥rm_addr
 {

670 
__u32
 
	mcmd
;

671 
__u32
 
	msize
;

672 
__u8
 
	md©a
[0];

684 
	eëhtoﬁ_Êags
 {

685 
	mETH_FLAG_TXVLAN
 = (1 << 7),

686 
	mETH_FLAG_RXVLAN
 = (1 << 8),

687 
	mETH_FLAG_LRO
 = (1 << 15),

688 
	mETH_FLAG_NTUPLE
 = (1 << 27),

689 
	mETH_FLAG_RXHASH
 = (1 << 28),

708 
	sëhtoﬁ_t˝ù4_•ec
 {

709 
__be32
 
	mù4§c
;

710 
__be32
 
	mù4d°
;

711 
__be16
 
	mp§c
;

712 
__be16
 
	mpd°
;

713 
__u8
 
	mtos
;

725 
	sëhtoﬁ_ah_e•ù4_•ec
 {

726 
__be32
 
	mù4§c
;

727 
__be32
 
	mù4d°
;

728 
__be32
 
	m•i
;

729 
__u8
 
	mtos
;

732 
	#ETH_RX_NFC_IP4
 1

	)

743 
	sëhtoﬁ_u§ù4_•ec
 {

744 
__be32
 
	mù4§c
;

745 
__be32
 
	mù4d°
;

746 
__be32
 
	ml4_4_byãs
;

747 
__u8
 
	mtos
;

748 
__u8
 
	mù_vî
;

749 
__u8
 
	m¥Ÿo
;

752 
	uëhtoﬁ_Êow_uni⁄
 {

753 
ëhtoﬁ_t˝ù4_•ec
 
	mt˝_ù4_•ec
;

754 
ëhtoﬁ_t˝ù4_•ec
 
	mudp_ù4_•ec
;

755 
ëhtoﬁ_t˝ù4_•ec
 
	ms˘p_ù4_•ec
;

756 
ëhtoﬁ_ah_e•ù4_•ec
 
	mah_ù4_•ec
;

757 
ëhtoﬁ_ah_e•ù4_•ec
 
	me•_ù4_•ec
;

758 
ëhtoﬁ_u§ù4_•ec
 
	mu§_ù4_•ec
;

759 
ëhhdr
 
	mëhî_•ec
;

760 
__u8
 
	mhd©a
[52];

774 
	sëhtoﬁ_Êow_ext
 {

775 
__u8
 
	m∑ddög
[2];

776 
	mh_de°
[
ETH_ALEN
];

777 
__be16
 
	mvœn_ëy≥
;

778 
__be16
 
	mvœn_tci
;

779 
__be32
 
	md©a
[2];

798 
	sëhtoﬁ_rx_Êow_•ec
 {

799 
__u32
 
	mÊow_ty≥
;

800 
ëhtoﬁ_Êow_uni⁄
 
	mh_u
;

801 
ëhtoﬁ_Êow_ext
 
	mh_ext
;

802 
ëhtoﬁ_Êow_uni⁄
 
	mm_u
;

803 
ëhtoﬁ_Êow_ext
 
	mm_ext
;

804 
__u64
 
	mrög_cookõ
;

805 
__u32
 
	mloˇti⁄
;

819 
	#ETHTOOL_RX_FLOW_SPEC_RING
 0x00000000FFFFFFFFLL

	)

820 
	#ETHTOOL_RX_FLOW_SPEC_RING_VF
 0x000000FF00000000LL

	)

821 
	#ETHTOOL_RX_FLOW_SPEC_RING_VF_OFF
 32

	)

822 
__ölöe__
 
__u64
 
	$ëhtoﬁ_gë_Êow_•ec_rög
(
__u64
 
rög_cookõ
)

824  
ETHTOOL_RX_FLOW_SPEC_RING
 & 
rög_cookõ
;

825 
	}
};

827 
__ölöe__
 
__u64
 
	$ëhtoﬁ_gë_Êow_•ec_rög_vf
(
__u64
 
rög_cookõ
)

829  (
ETHTOOL_RX_FLOW_SPEC_RING_VF
 & 
rög_cookõ
) >>

830 
ETHTOOL_RX_FLOW_SPEC_RING_VF_OFF
;

831 
	}
};

885 
	sëhtoﬁ_rxnfc
 {

886 
__u32
 
	mcmd
;

887 
__u32
 
	mÊow_ty≥
;

888 
__u64
 
	md©a
;

889 
ëhtoﬁ_rx_Êow_•ec
 
	mfs
;

890 
__u32
 
	mruÀ_˙t
;

891 
__u32
 
	mruÀ_locs
[0];

908 
	sëhtoﬁ_rxfh_ödú
 {

909 
__u32
 
	mcmd
;

910 
__u32
 
	msize
;

911 
__u32
 
	mrög_ödex
[0];

938 
	sëhtoﬁ_rxfh
 {

939 
__u32
 
	mcmd
;

940 
__u32
 
	mrss_c⁄ãxt
;

941 
__u32
 
	mödú_size
;

942 
__u32
 
	mkey_size
;

943 
__u8
 
	mhfunc
;

944 
__u8
 
	mrsvd8
[3];

945 
__u32
 
	mrsvd32
;

946 
__u32
 
	mrss_c⁄fig
[0];

948 
	#ETH_RXFH_INDIR_NO_CHANGE
 0xffffffff

	)

966 
	sëhtoﬁ_rx_¡u∂e_Êow_•ec
 {

967 
__u32
 
	mÊow_ty≥
;

969 
ëhtoﬁ_t˝ù4_•ec
 
	mt˝_ù4_•ec
;

970 
ëhtoﬁ_t˝ù4_•ec
 
	mudp_ù4_•ec
;

971 
ëhtoﬁ_t˝ù4_•ec
 
	ms˘p_ù4_•ec
;

972 
ëhtoﬁ_ah_e•ù4_•ec
 
	mah_ù4_•ec
;

973 
ëhtoﬁ_ah_e•ù4_•ec
 
	me•_ù4_•ec
;

974 
ëhtoﬁ_u§ù4_•ec
 
	mu§_ù4_•ec
;

975 
ëhhdr
 
	mëhî_•ec
;

976 
__u8
 
	mhd©a
[72];

977 } 
	mh_u
, 
	mm_u
;

979 
__u16
 
	mvœn_èg
;

980 
__u16
 
	mvœn_èg_mask
;

981 
__u64
 
	md©a
;

982 
__u64
 
	md©a_mask
;

984 
__s32
 
	ma˘i⁄
;

985 
	#ETHTOOL_RXNTUPLE_ACTION_DROP
 (-1Ë

	)

986 
	#ETHTOOL_RXNTUPLE_ACTION_CLEAR
 (-2Ë

	)

994 
	sëhtoﬁ_rx_¡u∂e
 {

995 
__u32
 
	mcmd
;

996 
ëhtoﬁ_rx_¡u∂e_Êow_•ec
 
	mfs
;

999 
	#ETHTOOL_FLASH_MAX_FILENAME
 128

	)

1000 
	eëhtoﬁ_Êash_›_ty≥
 {

1001 
	mETHTOOL_FLASH_ALL_REGIONS
 = 0,

1005 
	sëhtoﬁ_Êash
 {

1006 
__u32
 
	mcmd
;

1007 
__u32
 
	mªgi⁄
;

1008 
	md©a
[
ETHTOOL_FLASH_MAX_FILENAME
];

1025 
	sëhtoﬁ_dump
 {

1026 
__u32
 
	mcmd
;

1027 
__u32
 
	mvîsi⁄
;

1028 
__u32
 
	mÊag
;

1029 
__u32
 
	mÀn
;

1030 
__u8
 
	md©a
[0];

1033 
	#ETH_FW_DUMP_DISABLE
 0

	)

1044 
	sëhtoﬁ_gë_„©uªs_block
 {

1045 
__u32
 
	mavaûabÀ
;

1046 
__u32
 
	mªque°ed
;

1047 
__u32
 
	ma˘ive
;

1048 
__u32
 
	m√vî_ch™ged
;

1059 
	sëhtoﬁ_g„©uªs
 {

1060 
__u32
 
	mcmd
;

1061 
__u32
 
	msize
;

1062 
ëhtoﬁ_gë_„©uªs_block
 
	m„©uªs
[0];

1070 
	sëhtoﬁ_£t_„©uªs_block
 {

1071 
__u32
 
	mvÆid
;

1072 
__u32
 
	mªque°ed
;

1081 
	sëhtoﬁ_s„©uªs
 {

1082 
__u32
 
	mcmd
;

1083 
__u32
 
	msize
;

1084 
ëhtoﬁ_£t_„©uªs_block
 
	m„©uªs
[0];

1105 
	sëhtoﬁ_ts_öfo
 {

1106 
__u32
 
	mcmd
;

1107 
__u32
 
	mso_time°ampög
;

1108 
__s32
 
	mphc_ödex
;

1109 
__u32
 
	mtx_ty≥s
;

1110 
__u32
 
	mtx_ª£rved
[3];

1111 
__u32
 
	mrx_fûãrs
;

1112 
__u32
 
	mrx_ª£rved
[3];

1140 
	eëhtoﬁ_s„©uªs_ªtvÆ_bôs
 {

1141 
	mETHTOOL_F_UNSUPPORTED__BIT
,

1142 
	mETHTOOL_F_WISH__BIT
,

1143 
	mETHTOOL_F_COMPAT__BIT
,

1146 
	#ETHTOOL_F_UNSUPPORTED
 (1 << 
ETHTOOL_F_UNSUPPORTED__BIT
)

	)

1147 
	#ETHTOOL_F_WISH
 (1 << 
ETHTOOL_F_WISH__BIT
)

	)

1148 
	#ETHTOOL_F_COMPAT
 (1 << 
ETHTOOL_F_COMPAT__BIT
)

	)

1152 
	#ETHTOOL_GSET
 0x00000001

	)

1155 
	#ETHTOOL_SSET
 0x00000002

	)

1158 
	#ETHTOOL_GDRVINFO
 0x00000003

	)

1159 
	#ETHTOOL_GREGS
 0x00000004

	)

1160 
	#ETHTOOL_GWOL
 0x00000005

	)

1161 
	#ETHTOOL_SWOL
 0x00000006

	)

1162 
	#ETHTOOL_GMSGLVL
 0x00000007

	)

1163 
	#ETHTOOL_SMSGLVL
 0x00000008

	)

1164 
	#ETHTOOL_NWAY_RST
 0x00000009

	)

1167 
	#ETHTOOL_GLINK
 0x0000000a

	)

1168 
	#ETHTOOL_GEEPROM
 0x0000000b

	)

1169 
	#ETHTOOL_SEEPROM
 0x0000000¯

	)

1170 
	#ETHTOOL_GCOALESCE
 0x0000000ê

	)

1171 
	#ETHTOOL_SCOALESCE
 0x0000000‡

	)

1172 
	#ETHTOOL_GRINGPARAM
 0x00000010

	)

1173 
	#ETHTOOL_SRINGPARAM
 0x00000011

	)

1174 
	#ETHTOOL_GPAUSEPARAM
 0x00000012

	)

1175 
	#ETHTOOL_SPAUSEPARAM
 0x00000013

	)

1176 
	#ETHTOOL_GRXCSUM
 0x00000014

	)

1177 
	#ETHTOOL_SRXCSUM
 0x00000015

	)

1178 
	#ETHTOOL_GTXCSUM
 0x00000016

	)

1179 
	#ETHTOOL_STXCSUM
 0x00000017

	)

1180 
	#ETHTOOL_GSG
 0x00000018

	)

1182 
	#ETHTOOL_SSG
 0x00000019

	)

1184 
	#ETHTOOL_TEST
 0x0000001®

	)

1185 
	#ETHTOOL_GSTRINGS
 0x0000001b

	)

1186 
	#ETHTOOL_PHYS_ID
 0x0000001¯

	)

1187 
	#ETHTOOL_GSTATS
 0x0000001d

	)

1188 
	#ETHTOOL_GTSO
 0x0000001ê

	)

1189 
	#ETHTOOL_STSO
 0x0000001‡

	)

1190 
	#ETHTOOL_GPERMADDR
 0x00000020

	)

1191 
	#ETHTOOL_GUFO
 0x00000021

	)

1192 
	#ETHTOOL_SUFO
 0x00000022

	)

1193 
	#ETHTOOL_GGSO
 0x00000023

	)

1194 
	#ETHTOOL_SGSO
 0x00000024

	)

1195 
	#ETHTOOL_GFLAGS
 0x00000025

	)

1196 
	#ETHTOOL_SFLAGS
 0x00000026

	)

1197 
	#ETHTOOL_GPFLAGS
 0x00000027

	)

1198 
	#ETHTOOL_SPFLAGS
 0x00000028

	)

1200 
	#ETHTOOL_GRXFH
 0x00000029

	)

1201 
	#ETHTOOL_SRXFH
 0x0000002®

	)

1202 
	#ETHTOOL_GGRO
 0x0000002b

	)

1203 
	#ETHTOOL_SGRO
 0x0000002¯

	)

1204 
	#ETHTOOL_GRXRINGS
 0x0000002d

	)

1205 
	#ETHTOOL_GRXCLSRLCNT
 0x0000002ê

	)

1206 
	#ETHTOOL_GRXCLSRULE
 0x0000002‡

	)

1207 
	#ETHTOOL_GRXCLSRLALL
 0x00000030

	)

1208 
	#ETHTOOL_SRXCLSRLDEL
 0x00000031

	)

1209 
	#ETHTOOL_SRXCLSRLINS
 0x00000032

	)

1210 
	#ETHTOOL_FLASHDEV
 0x00000033

	)

1211 
	#ETHTOOL_RESET
 0x00000034

	)

1212 
	#ETHTOOL_SRXNTUPLE
 0x00000035

	)

1213 
	#ETHTOOL_GRXNTUPLE
 0x00000036

	)

1214 
	#ETHTOOL_GSSET_INFO
 0x00000037

	)

1215 
	#ETHTOOL_GRXFHINDIR
 0x00000038

	)

1216 
	#ETHTOOL_SRXFHINDIR
 0x00000039

	)

1218 
	#ETHTOOL_GFEATURES
 0x0000003®

	)

1219 
	#ETHTOOL_SFEATURES
 0x0000003b

	)

1220 
	#ETHTOOL_GCHANNELS
 0x0000003¯

	)

1221 
	#ETHTOOL_SCHANNELS
 0x0000003d

	)

1222 
	#ETHTOOL_SET_DUMP
 0x0000003ê

	)

1223 
	#ETHTOOL_GET_DUMP_FLAG
 0x0000003‡

	)

1224 
	#ETHTOOL_GET_DUMP_DATA
 0x00000040

	)

1225 
	#ETHTOOL_GET_TS_INFO
 0x00000041

	)

1226 
	#ETHTOOL_GMODULEINFO
 0x00000042

	)

1227 
	#ETHTOOL_GMODULEEEPROM
 0x00000043

	)

1228 
	#ETHTOOL_GEEE
 0x00000044

	)

1229 
	#ETHTOOL_SEEE
 0x00000045

	)

1231 
	#ETHTOOL_GRSSH
 0x00000046

	)

1232 
	#ETHTOOL_SRSSH
 0x00000047

	)

1233 
	#ETHTOOL_GTUNABLE
 0x00000048

	)

1234 
	#ETHTOOL_STUNABLE
 0x00000049

	)

1236 
	#ETHTOOL_GLINKSETTINGS
 0x0000004¯

	)

1237 
	#ETHTOOL_SLINKSETTINGS
 0x0000004d

	)

1241 
	#SPARC_ETH_GSET
 
ETHTOOL_GSET


	)

1242 
	#SPARC_ETH_SSET
 
ETHTOOL_SSET


	)

1245 
	eëhtoﬁ_lök_mode_bô_ödi˚s
 {

1246 
	mETHTOOL_LINK_MODE_10ba£T_HÆf_BIT
 = 0,

1247 
	mETHTOOL_LINK_MODE_10ba£T_FuŒ_BIT
 = 1,

1248 
	mETHTOOL_LINK_MODE_100ba£T_HÆf_BIT
 = 2,

1249 
	mETHTOOL_LINK_MODE_100ba£T_FuŒ_BIT
 = 3,

1250 
	mETHTOOL_LINK_MODE_1000ba£T_HÆf_BIT
 = 4,

1251 
	mETHTOOL_LINK_MODE_1000ba£T_FuŒ_BIT
 = 5,

1252 
	mETHTOOL_LINK_MODE_Aut⁄eg_BIT
 = 6,

1253 
	mETHTOOL_LINK_MODE_TP_BIT
 = 7,

1254 
	mETHTOOL_LINK_MODE_AUI_BIT
 = 8,

1255 
	mETHTOOL_LINK_MODE_MII_BIT
 = 9,

1256 
	mETHTOOL_LINK_MODE_FIBRE_BIT
 = 10,

1257 
	mETHTOOL_LINK_MODE_BNC_BIT
 = 11,

1258 
	mETHTOOL_LINK_MODE_10000ba£T_FuŒ_BIT
 = 12,

1259 
	mETHTOOL_LINK_MODE_Pau£_BIT
 = 13,

1260 
	mETHTOOL_LINK_MODE_Asym_Pau£_BIT
 = 14,

1261 
	mETHTOOL_LINK_MODE_2500ba£X_FuŒ_BIT
 = 15,

1262 
	mETHTOOL_LINK_MODE_Back∂™e_BIT
 = 16,

1263 
	mETHTOOL_LINK_MODE_1000ba£KX_FuŒ_BIT
 = 17,

1264 
	mETHTOOL_LINK_MODE_10000ba£KX4_FuŒ_BIT
 = 18,

1265 
	mETHTOOL_LINK_MODE_10000ba£KR_FuŒ_BIT
 = 19,

1266 
	mETHTOOL_LINK_MODE_10000ba£R_FEC_BIT
 = 20,

1267 
	mETHTOOL_LINK_MODE_20000ba£MLD2_FuŒ_BIT
 = 21,

1268 
	mETHTOOL_LINK_MODE_20000ba£KR2_FuŒ_BIT
 = 22,

1269 
	mETHTOOL_LINK_MODE_40000ba£KR4_FuŒ_BIT
 = 23,

1270 
	mETHTOOL_LINK_MODE_40000ba£CR4_FuŒ_BIT
 = 24,

1271 
	mETHTOOL_LINK_MODE_40000ba£SR4_FuŒ_BIT
 = 25,

1272 
	mETHTOOL_LINK_MODE_40000ba£LR4_FuŒ_BIT
 = 26,

1273 
	mETHTOOL_LINK_MODE_56000ba£KR4_FuŒ_BIT
 = 27,

1274 
	mETHTOOL_LINK_MODE_56000ba£CR4_FuŒ_BIT
 = 28,

1275 
	mETHTOOL_LINK_MODE_56000ba£SR4_FuŒ_BIT
 = 29,

1276 
	mETHTOOL_LINK_MODE_56000ba£LR4_FuŒ_BIT
 = 30,

1284 
	m__ETHTOOL_LINK_MODE_LAST


1285 
ETHTOOL_LINK_MODE_56000ba£LR4_FuŒ_BIT
,

1288 
	#__ETHTOOL_LINK_MODE_LEGACY_MASK
(
ba£_«me
) \

1289 (1UL << (
ETHTOOL_LINK_MODE_
 ## 
ba£_«me
 ## 
_BIT
))

	)

1295 
	#SUPPORTED_10ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10ba
£T_HÆf
)

	)

1296 
	#SUPPORTED_10ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10ba
£T_FuŒ
)

	)

1297 
	#SUPPORTED_100ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(100ba
£T_HÆf
)

	)

1298 
	#SUPPORTED_100ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(100ba
£T_FuŒ
)

	)

1299 
	#SUPPORTED_1000ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£T_HÆf
)

	)

1300 
	#SUPPORTED_1000ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£T_FuŒ
)

	)

1301 
	#SUPPORTED_Aut⁄eg
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Aut⁄eg
)

	)

1302 
	#SUPPORTED_TP
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
TP
)

	)

1303 
	#SUPPORTED_AUI
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
AUI
)

	)

1304 
	#SUPPORTED_MII
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
MII
)

	)

1305 
	#SUPPORTED_FIBRE
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
FIBRE
)

	)

1306 
	#SUPPORTED_BNC
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
BNC
)

	)

1307 
	#SUPPORTED_10000ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£T_FuŒ
)

	)

1308 
	#SUPPORTED_Pau£
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Pau£
)

	)

1309 
	#SUPPORTED_Asym_Pau£
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Asym_Pau£
)

	)

1310 
	#SUPPORTED_2500ba£X_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(2500ba
£X_FuŒ
)

	)

1311 
	#SUPPORTED_Back∂™e
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Back∂™e
)

	)

1312 
	#SUPPORTED_1000ba£KX_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£KX_FuŒ
)

	)

1313 
	#SUPPORTED_10000ba£KX4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£KX4_FuŒ
)

	)

1314 
	#SUPPORTED_10000ba£KR_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£KR_FuŒ
)

	)

1315 
	#SUPPORTED_10000ba£R_FEC
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£R_FEC
)

	)

1316 
	#SUPPORTED_20000ba£MLD2_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(20000ba
£MLD2_FuŒ
)

	)

1317 
	#SUPPORTED_20000ba£KR2_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(20000ba
£KR2_FuŒ
)

	)

1318 
	#SUPPORTED_40000ba£KR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£KR4_FuŒ
)

	)

1319 
	#SUPPORTED_40000ba£CR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£CR4_FuŒ
)

	)

1320 
	#SUPPORTED_40000ba£SR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£SR4_FuŒ
)

	)

1321 
	#SUPPORTED_40000ba£LR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£LR4_FuŒ
)

	)

1322 
	#SUPPORTED_56000ba£KR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£KR4_FuŒ
)

	)

1323 
	#SUPPORTED_56000ba£CR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£CR4_FuŒ
)

	)

1324 
	#SUPPORTED_56000ba£SR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£SR4_FuŒ
)

	)

1325 
	#SUPPORTED_56000ba£LR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£LR4_FuŒ
)

	)

1335 
	#ADVERTISED_10ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10ba
£T_HÆf
)

	)

1336 
	#ADVERTISED_10ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10ba
£T_FuŒ
)

	)

1337 
	#ADVERTISED_100ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(100ba
£T_HÆf
)

	)

1338 
	#ADVERTISED_100ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(100ba
£T_FuŒ
)

	)

1339 
	#ADVERTISED_1000ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£T_HÆf
)

	)

1340 
	#ADVERTISED_1000ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£T_FuŒ
)

	)

1341 
	#ADVERTISED_Aut⁄eg
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Aut⁄eg
)

	)

1342 
	#ADVERTISED_TP
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
TP
)

	)

1343 
	#ADVERTISED_AUI
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
AUI
)

	)

1344 
	#ADVERTISED_MII
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
MII
)

	)

1345 
	#ADVERTISED_FIBRE
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
FIBRE
)

	)

1346 
	#ADVERTISED_BNC
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
BNC
)

	)

1347 
	#ADVERTISED_10000ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£T_FuŒ
)

	)

1348 
	#ADVERTISED_Pau£
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Pau£
)

	)

1349 
	#ADVERTISED_Asym_Pau£
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Asym_Pau£
)

	)

1350 
	#ADVERTISED_2500ba£X_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(2500ba
£X_FuŒ
)

	)

1351 
	#ADVERTISED_Back∂™e
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Back∂™e
)

	)

1352 
	#ADVERTISED_1000ba£KX_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£KX_FuŒ
)

	)

1353 
	#ADVERTISED_10000ba£KX4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£KX4_FuŒ
)

	)

1354 
	#ADVERTISED_10000ba£KR_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£KR_FuŒ
)

	)

1355 
	#ADVERTISED_10000ba£R_FEC
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£R_FEC
)

	)

1356 
	#ADVERTISED_20000ba£MLD2_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(20000ba
£MLD2_FuŒ
)

	)

1357 
	#ADVERTISED_20000ba£KR2_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(20000ba
£KR2_FuŒ
)

	)

1358 
	#ADVERTISED_40000ba£KR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£KR4_FuŒ
)

	)

1359 
	#ADVERTISED_40000ba£CR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£CR4_FuŒ
)

	)

1360 
	#ADVERTISED_40000ba£SR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£SR4_FuŒ
)

	)

1361 
	#ADVERTISED_40000ba£LR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£LR4_FuŒ
)

	)

1362 
	#ADVERTISED_56000ba£KR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£KR4_FuŒ
)

	)

1363 
	#ADVERTISED_56000ba£CR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£CR4_FuŒ
)

	)

1364 
	#ADVERTISED_56000ba£SR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£SR4_FuŒ
)

	)

1365 
	#ADVERTISED_56000ba£LR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£LR4_FuŒ
)

	)

1377 
	#SPEED_10
 10

	)

1378 
	#SPEED_100
 100

	)

1379 
	#SPEED_1000
 1000

	)

1380 
	#SPEED_2500
 2500

	)

1381 
	#SPEED_5000
 5000

	)

1382 
	#SPEED_10000
 10000

	)

1383 
	#SPEED_20000
 20000

	)

1384 
	#SPEED_25000
 25000

	)

1385 
	#SPEED_40000
 40000

	)

1386 
	#SPEED_50000
 50000

	)

1387 
	#SPEED_56000
 56000

	)

1388 
	#SPEED_100000
 100000

	)

1390 
	#SPEED_UNKNOWN
 -1

	)

1392 
__ölöe__
 
	$ëhtoﬁ_vÆid©e_•ìd
(
__u32
 
•ìd
)

1394  
•ìd
 <
INT_MAX
 || s≥ed =
SPEED_UNKNOWN
;

1395 
	}
}

1398 
	#DUPLEX_HALF
 0x00

	)

1399 
	#DUPLEX_FULL
 0x01

	)

1400 
	#DUPLEX_UNKNOWN
 0xff

	)

1402 
__ölöe__
 
	$ëhtoﬁ_vÆid©e_du∂ex
(
__u8
 
du∂ex
)

1404 
du∂ex
) {

1405 
DUPLEX_HALF
:

1406 
DUPLEX_FULL
:

1407 
DUPLEX_UNKNOWN
:

1412 
	}
}

1415 
	#PORT_TP
 0x00

	)

1416 
	#PORT_AUI
 0x01

	)

1417 
	#PORT_MII
 0x02

	)

1418 
	#PORT_FIBRE
 0x03

	)

1419 
	#PORT_BNC
 0x04

	)

1420 
	#PORT_DA
 0x05

	)

1421 
	#PORT_NONE
 0xef

	)

1422 
	#PORT_OTHER
 0xff

	)

1425 
	#XCVR_INTERNAL
 0x00

	)

1426 
	#XCVR_EXTERNAL
 0x01

	)

1427 
	#XCVR_DUMMY1
 0x02

	)

1428 
	#XCVR_DUMMY2
 0x03

	)

1429 
	#XCVR_DUMMY3
 0x04

	)

1432 
	#AUTONEG_DISABLE
 0x00

	)

1433 
	#AUTONEG_ENABLE
 0x01

	)

1438 
	#ETH_TP_MDI_INVALID
 0x00

	)

1439 
	#ETH_TP_MDI
 0x01

	)

1440 
	#ETH_TP_MDI_X
 0x02

	)

1441 
	#ETH_TP_MDI_AUTO
 0x03

	)

1444 
	#WAKE_PHY
 (1 << 0)

	)

1445 
	#WAKE_UCAST
 (1 << 1)

	)

1446 
	#WAKE_MCAST
 (1 << 2)

	)

1447 
	#WAKE_BCAST
 (1 << 3)

	)

1448 
	#WAKE_ARP
 (1 << 4)

	)

1449 
	#WAKE_MAGIC
 (1 << 5)

	)

1450 
	#WAKE_MAGICSECURE
 (1 << 6Ë

	)

1453 
	#TCP_V4_FLOW
 0x01

	)

1454 
	#UDP_V4_FLOW
 0x02

	)

1455 
	#SCTP_V4_FLOW
 0x03

	)

1456 
	#AH_ESP_V4_FLOW
 0x04

	)

1457 
	#TCP_V6_FLOW
 0x05

	)

1458 
	#UDP_V6_FLOW
 0x06

	)

1459 
	#SCTP_V6_FLOW
 0x07

	)

1460 
	#AH_ESP_V6_FLOW
 0x08

	)

1461 
	#AH_V4_FLOW
 0x09

	)

1462 
	#ESP_V4_FLOW
 0x0®

	)

1463 
	#AH_V6_FLOW
 0x0b

	)

1464 
	#ESP_V6_FLOW
 0x0¯

	)

1465 
	#IP_USER_FLOW
 0x0d

	)

1466 
	#IPV4_FLOW
 0x10

	)

1467 
	#IPV6_FLOW
 0x11

	)

1468 
	#ETHER_FLOW
 0x12

	)

1470 
	#FLOW_EXT
 0x80000000

	)

1471 
	#FLOW_MAC_EXT
 0x40000000

	)

1474 
	#RXH_L2DA
 (1 << 1)

	)

1475 
	#RXH_VLAN
 (1 << 2)

	)

1476 
	#RXH_L3_PROTO
 (1 << 3)

	)

1477 
	#RXH_IP_SRC
 (1 << 4)

	)

1478 
	#RXH_IP_DST
 (1 << 5)

	)

1479 
	#RXH_L4_B_0_1
 (1 << 6Ë

	)

1480 
	#RXH_L4_B_2_3
 (1 << 7Ë

	)

1481 
	#RXH_DISCARD
 (1 << 31)

	)

1483 
	#RX_CLS_FLOW_DISC
 0xffffffffffffffffULL

	)

1486 
	#RX_CLS_LOC_SPECIAL
 0x80000000

	)

1487 
	#RX_CLS_LOC_ANY
 0xffffffff

	)

1488 
	#RX_CLS_LOC_FIRST
 0xffffff„

	)

1489 
	#RX_CLS_LOC_LAST
 0xfffffffd

	)

1492 
	#ETH_MODULE_SFF_8079
 0x1

	)

1493 
	#ETH_MODULE_SFF_8079_LEN
 256

	)

1494 
	#ETH_MODULE_SFF_8472
 0x2

	)

1495 
	#ETH_MODULE_SFF_8472_LEN
 512

	)

1496 
	#ETH_MODULE_SFF_8636
 0x3

	)

1497 
	#ETH_MODULE_SFF_8636_LEN
 256

	)

1498 
	#ETH_MODULE_SFF_8436
 0x4

	)

1499 
	#ETH_MODULE_SFF_8436_LEN
 256

	)

1508 
	eëhtoﬁ_ª£t_Êags
 {

1514 
	mETH_RESET_MGMT
 = 1 << 0,

1515 
	mETH_RESET_IRQ
 = 1 << 1,

1516 
	mETH_RESET_DMA
 = 1 << 2,

1517 
	mETH_RESET_FILTER
 = 1 << 3,

1518 
	mETH_RESET_OFFLOAD
 = 1 << 4,

1519 
	mETH_RESET_MAC
 = 1 << 5,

1520 
	mETH_RESET_PHY
 = 1 << 6,

1521 
	mETH_RESET_RAM
 = 1 << 7,

1524 
	mETH_RESET_DEDICATED
 = 0x0000ffff,

1526 
	mETH_RESET_ALL
 = 0xffffffff,

1529 
	#ETH_RESET_SHARED_SHIFT
 16

	)

1631 
	sëhtoﬁ_lök_£âögs
 {

1632 
__u32
 
	mcmd
;

1633 
__u32
 
	m•ìd
;

1634 
__u8
 
	mdu∂ex
;

1635 
__u8
 
	mp‹t
;

1636 
__u8
 
	mphy_addªss
;

1637 
__u8
 
	maut⁄eg
;

1638 
__u8
 
	mmdio_suµ‹t
;

1639 
__u8
 
	mëh_ç_mdix
;

1640 
__u8
 
	mëh_ç_mdix_˘æ
;

1641 
__s8
 
	mlök_mode_masks_nw‹ds
;

1642 
__u32
 
	mª£rved
[8];

1643 
__u32
 
	mlök_mode_masks
[0];

	@/usr/include/linux/fib_rules.h

1 #i‚de‡
__LINUX_FIB_RULES_H


2 
	#__LINUX_FIB_RULES_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/π√éök.h
>

8 
	#FIB_RULE_PERMANENT
 0x00000001

	)

9 
	#FIB_RULE_INVERT
 0x00000002

	)

10 
	#FIB_RULE_UNRESOLVED
 0x00000004

	)

11 
	#FIB_RULE_IIF_DETACHED
 0x00000008

	)

12 
	#FIB_RULE_DEV_DETACHED
 
FIB_RULE_IIF_DETACHED


	)

13 
	#FIB_RULE_OIF_DETACHED
 0x00000010

	)

16 
	#FIB_RULE_FIND_SADDR
 0x00010000

	)

18 
	sfib_ruÀ_hdr
 {

19 
__u8
 
	mÁmûy
;

20 
__u8
 
	md°_Àn
;

21 
__u8
 
	m§c_Àn
;

22 
__u8
 
	mtos
;

24 
__u8
 
	mèbÀ
;

25 
__u8
 
	mªs1
;

26 
__u8
 
	mªs2
;

27 
__u8
 
	ma˘i⁄
;

29 
__u32
 
	mÊags
;

33 
	mFRA_UNSPEC
,

34 
	mFRA_DST
,

35 
	mFRA_SRC
,

36 
	mFRA_IIFNAME
,

37 
	#FRA_IFNAME
 
FRA_IIFNAME


	)

38 
	mFRA_GOTO
,

39 
	mFRA_UNUSED2
,

40 
	mFRA_PRIORITY
,

41 
	mFRA_UNUSED3
,

42 
	mFRA_UNUSED4
,

43 
	mFRA_UNUSED5
,

44 
	mFRA_FWMARK
,

45 
	mFRA_FLOW
,

46 
	mFRA_TUN_ID
,

47 
	mFRA_SUPPRESS_IFGROUP
,

48 
	mFRA_SUPPRESS_PREFIXLEN
,

49 
	mFRA_TABLE
,

50 
	mFRA_FWMASK
,

51 
	mFRA_OIFNAME
,

52 
	m__FRA_MAX


55 
	#FRA_MAX
 (
__FRA_MAX
 - 1)

	)

58 
	mFR_ACT_UNSPEC
,

59 
	mFR_ACT_TO_TBL
,

60 
	mFR_ACT_GOTO
,

61 
	mFR_ACT_NOP
,

62 
	mFR_ACT_RES3
,

63 
	mFR_ACT_RES4
,

64 
	mFR_ACT_BLACKHOLE
,

65 
	mFR_ACT_UNREACHABLE
,

66 
	mFR_ACT_PROHIBIT
,

67 
	m__FR_ACT_MAX
,

70 
	#FR_ACT_MAX
 (
__FR_ACT_MAX
 - 1)

	)

	@/usr/include/linux/gen_stats.h

1 #i‚de‡
__LINUX_GEN_STATS_H


2 
	#__LINUX_GEN_STATS_H


	)

4 
	~<löux/ty≥s.h
>

7 
	mTCA_STATS_UNSPEC
,

8 
	mTCA_STATS_BASIC
,

9 
	mTCA_STATS_RATE_EST
,

10 
	mTCA_STATS_QUEUE
,

11 
	mTCA_STATS_APP
,

12 
	mTCA_STATS_RATE_EST64
,

13 
	m__TCA_STATS_MAX
,

15 
	#TCA_STATS_MAX
 (
__TCA_STATS_MAX
 - 1)

	)

22 
	sg√t_°©s_basic
 {

23 
__u64
 
	mbyãs
;

24 
__u32
 
	m∑ckës
;

26 
	sg√t_°©s_basic_∑cked
 {

27 
__u64
 
	mbyãs
;

28 
__u32
 
	m∑ckës
;

29 } 
__©åibuã__
 ((
∑cked
));

36 
	sg√t_°©s_øã_e°
 {

37 
__u32
 
	mbps
;

38 
__u32
 
	mµs
;

46 
	sg√t_°©s_øã_e°64
 {

47 
__u64
 
	mbps
;

48 
__u64
 
	mµs
;

59 
	sg√t_°©s_queue
 {

60 
__u32
 
	mqÀn
;

61 
__u32
 
	mbacklog
;

62 
__u32
 
	mdr›s
;

63 
__u32
 
	mªqueues
;

64 
__u32
 
	movîlimôs
;

72 
	sg√t_e°im©‹
 {

73 sig√d 
	möãrvÆ
;

74 
	mewma_log
;

	@/usr/include/linux/genetlink.h

1 #i‚de‡
__LINUX_GENERIC_NETLINK_H


2 
	#__LINUX_GENERIC_NETLINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	#GENL_NAMSIZ
 16

	)

9 
	#GENL_MIN_ID
 
NLMSG_MIN_TYPE


	)

10 
	#GENL_MAX_ID
 1023

	)

12 
	sgílmsghdr
 {

13 
__u8
 
	mcmd
;

14 
__u8
 
	mvîsi⁄
;

15 
__u16
 
	mª£rved
;

18 
	#GENL_HDRLEN
 
	`NLMSG_ALIGN
((
gílmsghdr
))

	)

20 
	#GENL_ADMIN_PERM
 0x01

	)

21 
	#GENL_CMD_CAP_DO
 0x02

	)

22 
	#GENL_CMD_CAP_DUMP
 0x04

	)

23 
	#GENL_CMD_CAP_HASPOL
 0x08

	)

24 
	#GENL_UNS_ADMIN_PERM
 0x10

	)

29 
	#GENL_ID_GENERATE
 0

	)

30 
	#GENL_ID_CTRL
 
NLMSG_MIN_TYPE


	)

31 
	#GENL_ID_VFS_DQUOT
 (
NLMSG_MIN_TYPE
 + 1)

	)

32 
	#GENL_ID_PMCRAID
 (
NLMSG_MIN_TYPE
 + 2)

	)

39 
	mCTRL_CMD_UNSPEC
,

40 
	mCTRL_CMD_NEWFAMILY
,

41 
	mCTRL_CMD_DELFAMILY
,

42 
	mCTRL_CMD_GETFAMILY
,

43 
	mCTRL_CMD_NEWOPS
,

44 
	mCTRL_CMD_DELOPS
,

45 
	mCTRL_CMD_GETOPS
,

46 
	mCTRL_CMD_NEWMCAST_GRP
,

47 
	mCTRL_CMD_DELMCAST_GRP
,

48 
	mCTRL_CMD_GETMCAST_GRP
,

49 
	m__CTRL_CMD_MAX
,

52 
	#CTRL_CMD_MAX
 (
__CTRL_CMD_MAX
 - 1)

	)

55 
	mCTRL_ATTR_UNSPEC
,

56 
	mCTRL_ATTR_FAMILY_ID
,

57 
	mCTRL_ATTR_FAMILY_NAME
,

58 
	mCTRL_ATTR_VERSION
,

59 
	mCTRL_ATTR_HDRSIZE
,

60 
	mCTRL_ATTR_MAXATTR
,

61 
	mCTRL_ATTR_OPS
,

62 
	mCTRL_ATTR_MCAST_GROUPS
,

63 
	m__CTRL_ATTR_MAX
,

66 
	#CTRL_ATTR_MAX
 (
__CTRL_ATTR_MAX
 - 1)

	)

69 
	mCTRL_ATTR_OP_UNSPEC
,

70 
	mCTRL_ATTR_OP_ID
,

71 
	mCTRL_ATTR_OP_FLAGS
,

72 
	m__CTRL_ATTR_OP_MAX
,

75 
	#CTRL_ATTR_OP_MAX
 (
__CTRL_ATTR_OP_MAX
 - 1)

	)

78 
	mCTRL_ATTR_MCAST_GRP_UNSPEC
,

79 
	mCTRL_ATTR_MCAST_GRP_NAME
,

80 
	mCTRL_ATTR_MCAST_GRP_ID
,

81 
	m__CTRL_ATTR_MCAST_GRP_MAX
,

84 
	#CTRL_ATTR_MCAST_GRP_MAX
 (
__CTRL_ATTR_MCAST_GRP_MAX
 - 1)

	)

	@/usr/include/linux/if.h

19 #i‚de‡
_LINUX_IF_H


20 
	#_LINUX_IF_H


	)

22 
	~<löux/libc-com∑t.h
>

23 
	~<löux/ty≥s.h
>

24 
	~<löux/sockë.h
>

27 #i‡
__UAPI_DEF_IF_IFNAMSIZ


28 
	#IFNAMSIZ
 16

	)

30 
	#IFALIASZ
 256

	)

31 
	~<löux/hdlc/io˘l.h
>

34 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 != 0 && \

35 
	g__UAPI_DEF_IF_NET_DEVICE_FLAGS
 != 0

76 
	e√t_devi˚_Êags
 {

78 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS


79 
IFF_UP
 = 1<<0,

80 
	mIFF_BROADCAST
 = 1<<1,

81 
	mIFF_DEBUG
 = 1<<2,

82 
	mIFF_LOOPBACK
 = 1<<3,

83 
	mIFF_POINTOPOINT
 = 1<<4,

84 
	mIFF_NOTRAILERS
 = 1<<5,

85 
	mIFF_RUNNING
 = 1<<6,

86 
	mIFF_NOARP
 = 1<<7,

87 
	mIFF_PROMISC
 = 1<<8,

88 
	mIFF_ALLMULTI
 = 1<<9,

89 
	mIFF_MASTER
 = 1<<10,

90 
	mIFF_SLAVE
 = 1<<11,

91 
	mIFF_MULTICAST
 = 1<<12,

92 
	mIFF_PORTSEL
 = 1<<13,

93 
	mIFF_AUTOMEDIA
 = 1<<14,

94 
	mIFF_DYNAMIC
 = 1<<15,

96 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


97 
	mIFF_LOWER_UP
 = 1<<16,

98 
	mIFF_DORMANT
 = 1<<17,

99 
	mIFF_ECHO
 = 1<<18,

105 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS


106 
	#IFF_UP
 
IFF_UP


	)

107 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

108 
	#IFF_DEBUG
 
IFF_DEBUG


	)

109 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

110 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

111 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

112 
	#IFF_RUNNING
 
IFF_RUNNING


	)

113 
	#IFF_NOARP
 
IFF_NOARP


	)

114 
	#IFF_PROMISC
 
IFF_PROMISC


	)

115 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

116 
	#IFF_MASTER
 
IFF_MASTER


	)

117 
	#IFF_SLAVE
 
IFF_SLAVE


	)

118 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

119 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

120 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

121 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

124 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


125 
	#IFF_LOWER_UP
 
IFF_LOWER_UP


	)

126 
	#IFF_DORMANT
 
IFF_DORMANT


	)

127 
	#IFF_ECHO
 
IFF_ECHO


	)

130 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|
IFF_ECHO
|\

131 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

133 
	#IF_GET_IFACE
 0x0001

	)

134 
	#IF_GET_PROTO
 0x0002

	)

137 
	#IF_IFACE_V35
 0x1000

	)

138 
	#IF_IFACE_V24
 0x1001

	)

139 
	#IF_IFACE_X21
 0x1002

	)

140 
	#IF_IFACE_T1
 0x1003

	)

141 
	#IF_IFACE_E1
 0x1004

	)

142 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

143 
	#IF_IFACE_X21D
 0x1006

	)

146 
	#IF_PROTO_HDLC
 0x2000

	)

147 
	#IF_PROTO_PPP
 0x2001

	)

148 
	#IF_PROTO_CISCO
 0x2002

	)

149 
	#IF_PROTO_FR
 0x2003

	)

150 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

151 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

152 
	#IF_PROTO_X25
 0x2006

	)

153 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

154 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

155 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

156 
	#IF_PROTO_FR_PVC
 0x200A

	)

157 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

158 
	#IF_PROTO_RAW
 0x200C

	)

162 
	mIF_OPER_UNKNOWN
,

163 
	mIF_OPER_NOTPRESENT
,

164 
	mIF_OPER_DOWN
,

165 
	mIF_OPER_LOWERLAYERDOWN
,

166 
	mIF_OPER_TESTING
,

167 
	mIF_OPER_DORMANT
,

168 
	mIF_OPER_UP
,

173 
	mIF_LINK_MODE_DEFAULT
,

174 
	mIF_LINK_MODE_DORMANT
,

188 #i‡
__UAPI_DEF_IF_IFMAP


189 
	sifm≠
 {

190 
	mmem_°¨t
;

191 
	mmem_íd
;

192 
	mba£_addr
;

193 
	múq
;

194 
	mdma
;

195 
	mp‹t
;

200 
	sif_£âögs
 {

201 
	mty≥
;

202 
	msize
;

205 
øw_hdlc_¥Ÿo
 *
	møw_hdlc
;

206 
cisco_¥Ÿo
 *
	mcisco
;

207 
‰_¥Ÿo
 *
	m‰
;

208 
‰_¥Ÿo_pvc
 *
	m‰_pvc
;

209 
‰_¥Ÿo_pvc_öfo
 *
	m‰_pvc_öfo
;

212 
sync_£rül_£âögs
 *
	msync
;

213 
ã1_£âögs
 *
	mã1
;

214 } 
	mifs_ifsu
;

225 #i‡
__UAPI_DEF_IF_IFREQ


226 
	si‰eq
 {

227 
	#IFHWADDRLEN
 6

	)

230 
	mi‰n_«me
[
IFNAMSIZ
];

231 } 
	mi‰_i‰n
;

234 
sockaddr
 
	mi‰u_addr
;

235 
sockaddr
 
	mi‰u_d°addr
;

236 
sockaddr
 
	mi‰u_brﬂdaddr
;

237 
sockaddr
 
	mi‰u_√tmask
;

238 
sockaddr
 
	mi‰u_hwaddr
;

239 
	mi‰u_Êags
;

240 
	mi‰u_ivÆue
;

241 
	mi‰u_mtu
;

242 
ifm≠
 
	mi‰u_m≠
;

243 
	mi‰u_¶ave
[
IFNAMSIZ
];

244 
	mi‰u_√w«me
[
IFNAMSIZ
];

245 * 
	mi‰u_d©a
;

246 
if_£âögs
 
	mi‰u_£âögs
;

247 } 
	mi‰_i‰u
;

251 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

252 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

253 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

254 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

255 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

256 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

257 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

258 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

259 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

260 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

261 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

262 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

263 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

264 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

265 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

266 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

267 
	#i‰_£âögs
 
i‰_i‰u
.
i‰u_£âögs


	)

277 #i‡
__UAPI_DEF_IF_IFCONF


278 
	sifc⁄f
 {

279 
	mifc_Àn
;

281 *
	mifcu_buf
;

282 
i‰eq
 *
	mifcu_ªq
;

283 } 
	mifc_ifcu
;

287 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

288 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@/usr/include/linux/if_addr.h

1 #i‚de‡
__LINUX_IF_ADDR_H


2 
	#__LINUX_IF_ADDR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	siÁddrmsg
 {

8 
__u8
 
	miÁ_Ámûy
;

9 
__u8
 
	miÁ_¥efixÀn
;

10 
__u8
 
	miÁ_Êags
;

11 
__u8
 
	miÁ_sc›e
;

12 
__u32
 
	miÁ_ödex
;

26 
	mIFA_UNSPEC
,

27 
	mIFA_ADDRESS
,

28 
	mIFA_LOCAL
,

29 
	mIFA_LABEL
,

30 
	mIFA_BROADCAST
,

31 
	mIFA_ANYCAST
,

32 
	mIFA_CACHEINFO
,

33 
	mIFA_MULTICAST
,

34 
	mIFA_FLAGS
,

35 
	m__IFA_MAX
,

38 
	#IFA_MAX
 (
__IFA_MAX
 - 1)

	)

41 
	#IFA_F_SECONDARY
 0x01

	)

42 
	#IFA_F_TEMPORARY
 
IFA_F_SECONDARY


	)

44 
	#IFA_F_NODAD
 0x02

	)

45 
	#IFA_F_OPTIMISTIC
 0x04

	)

46 
	#IFA_F_DADFAILED
 0x08

	)

47 
	#IFA_F_HOMEADDRESS
 0x10

	)

48 
	#IFA_F_DEPRECATED
 0x20

	)

49 
	#IFA_F_TENTATIVE
 0x40

	)

50 
	#IFA_F_PERMANENT
 0x80

	)

51 
	#IFA_F_MANAGETEMPADDR
 0x100

	)

52 
	#IFA_F_NOPREFIXROUTE
 0x200

	)

53 
	#IFA_F_MCAUTOJOIN
 0x400

	)

54 
	#IFA_F_STABLE_PRIVACY
 0x800

	)

56 
	siÁ_ˇcheöfo
 {

57 
__u32
 
	miÁ_¥e„ªd
;

58 
__u32
 
	miÁ_vÆid
;

59 
__u32
 
	mc°amp
;

60 
__u32
 
	mt°amp
;

64 
	#IFA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iÁddrmsg
))))

	)

65 
	#IFA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iÁddrmsg
))

	)

	@/usr/include/linux/if_arp.h

23 #i‚de‡
_LINUX_IF_ARP_H


24 
	#_LINUX_IF_ARP_H


	)

26 
	~<löux/√tdevi˚.h
>

29 
	#ARPHRD_NETROM
 0

	)

30 
	#ARPHRD_ETHER
 1

	)

31 
	#ARPHRD_EETHER
 2

	)

32 
	#ARPHRD_AX25
 3

	)

33 
	#ARPHRD_PRONET
 4

	)

34 
	#ARPHRD_CHAOS
 5

	)

35 
	#ARPHRD_IEEE802
 6

	)

36 
	#ARPHRD_ARCNET
 7

	)

37 
	#ARPHRD_APPLETLK
 8

	)

38 
	#ARPHRD_DLCI
 15

	)

39 
	#ARPHRD_ATM
 19

	)

40 
	#ARPHRD_METRICOM
 23

	)

41 
	#ARPHRD_IEEE1394
 24

	)

42 
	#ARPHRD_EUI64
 27

	)

43 
	#ARPHRD_INFINIBAND
 32

	)

46 
	#ARPHRD_SLIP
 256

	)

47 
	#ARPHRD_CSLIP
 257

	)

48 
	#ARPHRD_SLIP6
 258

	)

49 
	#ARPHRD_CSLIP6
 259

	)

50 
	#ARPHRD_RSRVD
 260

	)

51 
	#ARPHRD_ADAPT
 264

	)

52 
	#ARPHRD_ROSE
 270

	)

53 
	#ARPHRD_X25
 271

	)

54 
	#ARPHRD_HWX25
 272

	)

55 
	#ARPHRD_CAN
 280

	)

56 
	#ARPHRD_PPP
 512

	)

57 
	#ARPHRD_CISCO
 513

	)

58 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

59 
	#ARPHRD_LAPB
 516

	)

60 
	#ARPHRD_DDCMP
 517

	)

61 
	#ARPHRD_RAWHDLC
 518

	)

63 
	#ARPHRD_TUNNEL
 768

	)

64 
	#ARPHRD_TUNNEL6
 769

	)

65 
	#ARPHRD_FRAD
 770

	)

66 
	#ARPHRD_SKIP
 771

	)

67 
	#ARPHRD_LOOPBACK
 772

	)

68 
	#ARPHRD_LOCALTLK
 773

	)

69 
	#ARPHRD_FDDI
 774

	)

70 
	#ARPHRD_BIF
 775

	)

71 
	#ARPHRD_SIT
 776

	)

72 
	#ARPHRD_IPDDP
 777

	)

73 
	#ARPHRD_IPGRE
 778

	)

74 
	#ARPHRD_PIMREG
 779

	)

75 
	#ARPHRD_HIPPI
 780

	)

76 
	#ARPHRD_ASH
 781

	)

77 
	#ARPHRD_ECONET
 782

	)

78 
	#ARPHRD_IRDA
 783

	)

80 
	#ARPHRD_FCPP
 784

	)

81 
	#ARPHRD_FCAL
 785

	)

82 
	#ARPHRD_FCPL
 786

	)

83 
	#ARPHRD_FCFABRIC
 787

	)

85 
	#ARPHRD_IEEE802_TR
 800

	)

86 
	#ARPHRD_IEEE80211
 801

	)

87 
	#ARPHRD_IEEE80211_PRISM
 802

	)

88 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

89 
	#ARPHRD_IEEE802154
 804

	)

90 
	#ARPHRD_IEEE802154_MONITOR
 805

	)

92 
	#ARPHRD_PHONET
 820

	)

93 
	#ARPHRD_PHONET_PIPE
 821

	)

94 
	#ARPHRD_CAIF
 822

	)

95 
	#ARPHRD_IP6GRE
 823

	)

96 
	#ARPHRD_NETLINK
 824

	)

97 
	#ARPHRD_6LOWPAN
 825

	)

99 
	#ARPHRD_VOID
 0xFFFF

	)

100 
	#ARPHRD_NONE
 0xFFFE

	)

103 
	#ARPOP_REQUEST
 1

	)

104 
	#ARPOP_REPLY
 2

	)

105 
	#ARPOP_RREQUEST
 3

	)

106 
	#ARPOP_RREPLY
 4

	)

107 
	#ARPOP_InREQUEST
 8

	)

108 
	#ARPOP_InREPLY
 9

	)

109 
	#ARPOP_NAK
 10

	)

113 
	s¨¥eq
 {

114 
sockaddr
 
	m¨p_∑
;

115 
sockaddr
 
	m¨p_ha
;

116 
	m¨p_Êags
;

117 
sockaddr
 
	m¨p_√tmask
;

118 
	m¨p_dev
[16];

121 
	s¨¥eq_ﬁd
 {

122 
sockaddr
 
	m¨p_∑
;

123 
sockaddr
 
	m¨p_ha
;

124 
	m¨p_Êags
;

125 
sockaddr
 
	m¨p_√tmask
;

129 
	#ATF_COM
 0x02

	)

130 
	#ATF_PERM
 0x04

	)

131 
	#ATF_PUBL
 0x08

	)

132 
	#ATF_USETRAILERS
 0x10

	)

133 
	#ATF_NETMASK
 0x20

	)

135 
	#ATF_DONTPUB
 0x40

	)

141 
	s¨phdr
 {

142 
__be16
 
	m¨_hrd
;

143 
__be16
 
	m¨_¥o
;

144 
	m¨_h 
;

145 
	m¨_∂n
;

146 
__be16
 
	m¨_›
;

152 
	m¨_sha
[
ETH_ALEN
];

153 
	m¨_sù
[4];

154 
	m¨_tha
[
ETH_ALEN
];

155 
	m¨_tù
[4];

	@/usr/include/linux/if_bridge.h

13 #i‚de‡
_LINUX_IF_BRIDGE_H


14 
	#_LINUX_IF_BRIDGE_H


	)

16 
	~<löux/ty≥s.h
>

17 
	~<löux/if_ëhî.h
>

18 
	~<löux/ö6.h
>

20 
	#SYSFS_BRIDGE_ATTR
 "bridge"

	)

21 
	#SYSFS_BRIDGE_FDB
 "brf‹w¨d"

	)

22 
	#SYSFS_BRIDGE_PORT_SUBDIR
 "brif"

	)

23 
	#SYSFS_BRIDGE_PORT_ATTR
 "bΩ‹t"

	)

24 
	#SYSFS_BRIDGE_PORT_LINK
 "bridge"

	)

26 
	#BRCTL_VERSION
 1

	)

28 
	#BRCTL_GET_VERSION
 0

	)

29 
	#BRCTL_GET_BRIDGES
 1

	)

30 
	#BRCTL_ADD_BRIDGE
 2

	)

31 
	#BRCTL_DEL_BRIDGE
 3

	)

32 
	#BRCTL_ADD_IF
 4

	)

33 
	#BRCTL_DEL_IF
 5

	)

34 
	#BRCTL_GET_BRIDGE_INFO
 6

	)

35 
	#BRCTL_GET_PORT_LIST
 7

	)

36 
	#BRCTL_SET_BRIDGE_FORWARD_DELAY
 8

	)

37 
	#BRCTL_SET_BRIDGE_HELLO_TIME
 9

	)

38 
	#BRCTL_SET_BRIDGE_MAX_AGE
 10

	)

39 
	#BRCTL_SET_AGEING_TIME
 11

	)

40 
	#BRCTL_SET_GC_INTERVAL
 12

	)

41 
	#BRCTL_GET_PORT_INFO
 13

	)

42 
	#BRCTL_SET_BRIDGE_STP_STATE
 14

	)

43 
	#BRCTL_SET_BRIDGE_PRIORITY
 15

	)

44 
	#BRCTL_SET_PORT_PRIORITY
 16

	)

45 
	#BRCTL_SET_PATH_COST
 17

	)

46 
	#BRCTL_GET_FDB_ENTRIES
 18

	)

48 
	#BR_STATE_DISABLED
 0

	)

49 
	#BR_STATE_LISTENING
 1

	)

50 
	#BR_STATE_LEARNING
 2

	)

51 
	#BR_STATE_FORWARDING
 3

	)

52 
	#BR_STATE_BLOCKING
 4

	)

54 
	s__bridge_öfo
 {

55 
__u64
 
	mdesig«ãd_roŸ
;

56 
__u64
 
	mbridge_id
;

57 
__u32
 
	mroŸ_∑th_co°
;

58 
__u32
 
	mmax_age
;

59 
__u32
 
	mhñlo_time
;

60 
__u32
 
	mf‹w¨d_dñay
;

61 
__u32
 
	mbridge_max_age
;

62 
__u32
 
	mbridge_hñlo_time
;

63 
__u32
 
	mbridge_f‹w¨d_dñay
;

64 
__u8
 
	mt›ﬁogy_ch™ge
;

65 
__u8
 
	mt›ﬁogy_ch™ge_dëe˘ed
;

66 
__u8
 
	mroŸ_p‹t
;

67 
__u8
 
	m°p_íabÀd
;

68 
__u32
 
	mageög_time
;

69 
__u32
 
	mgc_öãrvÆ
;

70 
__u32
 
	mhñlo_timî_vÆue
;

71 
__u32
 
	mt˙_timî_vÆue
;

72 
__u32
 
	mt›ﬁogy_ch™ge_timî_vÆue
;

73 
__u32
 
	mgc_timî_vÆue
;

76 
	s__p‹t_öfo
 {

77 
__u64
 
	mdesig«ãd_roŸ
;

78 
__u64
 
	mdesig«ãd_bridge
;

79 
__u16
 
	mp‹t_id
;

80 
__u16
 
	mdesig«ãd_p‹t
;

81 
__u32
 
	m∑th_co°
;

82 
__u32
 
	mdesig«ãd_co°
;

83 
__u8
 
	m°©e
;

84 
__u8
 
	mt›_ch™ge_ack
;

85 
__u8
 
	mc⁄fig_≥ndög
;

86 
__u8
 
	munu£d0
;

87 
__u32
 
	mmesßge_age_timî_vÆue
;

88 
__u32
 
	mf‹w¨d_dñay_timî_vÆue
;

89 
__u32
 
	mhﬁd_timî_vÆue
;

92 
	s__fdb_íåy
 {

93 
__u8
 
	mmac_addr
[
ETH_ALEN
];

94 
__u8
 
	mp‹t_no
;

95 
__u8
 
	mis_loˇl
;

96 
__u32
 
	mageög_timî_vÆue
;

97 
__u8
 
	mp‹t_hi
;

98 
__u8
 
	m∑d0
;

99 
__u16
 
	munu£d
;

103 
	#BRIDGE_FLAGS_MASTER
 1

	)

104 
	#BRIDGE_FLAGS_SELF
 2

	)

106 
	#BRIDGE_MODE_VEB
 0

	)

107 
	#BRIDGE_MODE_VEPA
 1

	)

108 
	#BRIDGE_MODE_UNDEF
 0xFFFF

	)

118 
	mIFLA_BRIDGE_FLAGS
,

119 
	mIFLA_BRIDGE_MODE
,

120 
	mIFLA_BRIDGE_VLAN_INFO
,

121 
	m__IFLA_BRIDGE_MAX
,

123 
	#IFLA_BRIDGE_MAX
 (
__IFLA_BRIDGE_MAX
 - 1)

	)

125 
	#BRIDGE_VLAN_INFO_MASTER
 (1<<0Ë

	)

126 
	#BRIDGE_VLAN_INFO_PVID
 (1<<1Ë

	)

127 
	#BRIDGE_VLAN_INFO_UNTAGGED
 (1<<2Ë

	)

128 
	#BRIDGE_VLAN_INFO_RANGE_BEGIN
 (1<<3Ë

	)

129 
	#BRIDGE_VLAN_INFO_RANGE_END
 (1<<4Ë

	)

130 
	#BRIDGE_VLAN_INFO_BRENTRY
 (1<<5Ë

	)

132 
	sbridge_vœn_öfo
 {

133 
__u16
 
	mÊags
;

134 
__u16
 
	mvid
;

148 
	mMDBA_UNSPEC
,

149 
	mMDBA_MDB
,

150 
	mMDBA_ROUTER
,

151 
	m__MDBA_MAX
,

153 
	#MDBA_MAX
 (
__MDBA_MAX
 - 1)

	)

156 
	mMDBA_MDB_UNSPEC
,

157 
	mMDBA_MDB_ENTRY
,

158 
	m__MDBA_MDB_MAX
,

160 
	#MDBA_MDB_MAX
 (
__MDBA_MDB_MAX
 - 1)

	)

163 
	mMDBA_MDB_ENTRY_UNSPEC
,

164 
	mMDBA_MDB_ENTRY_INFO
,

165 
	m__MDBA_MDB_ENTRY_MAX
,

167 
	#MDBA_MDB_ENTRY_MAX
 (
__MDBA_MDB_ENTRY_MAX
 - 1)

	)

170 
	mMDBA_ROUTER_UNSPEC
,

171 
	mMDBA_ROUTER_PORT
,

172 
	m__MDBA_ROUTER_MAX
,

174 
	#MDBA_ROUTER_MAX
 (
__MDBA_ROUTER_MAX
 - 1)

	)

176 
	sbr_p‹t_msg
 {

177 
__u8
 
	mÁmûy
;

178 
__u32
 
	mifödex
;

181 
	sbr_mdb_íåy
 {

182 
__u32
 
	mifödex
;

183 
	#MDB_TEMPORARY
 0

	)

184 
	#MDB_PERMANENT
 1

	)

185 
__u8
 
	m°©e
;

186 
__u16
 
	mvid
;

189 
__be32
 
	mù4
;

190 
ö6_addr
 
	mù6
;

191 } 
	mu
;

192 
__be16
 
	m¥Ÿo
;

193 } 
	maddr
;

197 
	mMDBA_SET_ENTRY_UNSPEC
,

198 
	mMDBA_SET_ENTRY
,

199 
	m__MDBA_SET_ENTRY_MAX
,

201 
	#MDBA_SET_ENTRY_MAX
 (
__MDBA_SET_ENTRY_MAX
 - 1)

	)

	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_TSN
 0x22F0

	)

46 
	#ETH_P_IP
 0x0800

	)

47 
	#ETH_P_X25
 0x0805

	)

48 
	#ETH_P_ARP
 0x0806

	)

49 
	#ETH_P_BPQ
 0x08FF

	)

50 
	#ETH_P_IEEEPUP
 0x0a00

	)

51 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

52 
	#ETH_P_BATMAN
 0x4305

	)

53 
	#ETH_P_DEC
 0x6000

	)

54 
	#ETH_P_DNA_DL
 0x6001

	)

55 
	#ETH_P_DNA_RC
 0x6002

	)

56 
	#ETH_P_DNA_RT
 0x6003

	)

57 
	#ETH_P_LAT
 0x6004

	)

58 
	#ETH_P_DIAG
 0x6005

	)

59 
	#ETH_P_CUST
 0x6006

	)

60 
	#ETH_P_SCA
 0x6007

	)

61 
	#ETH_P_TEB
 0x6558

	)

62 
	#ETH_P_RARP
 0x8035

	)

63 
	#ETH_P_ATALK
 0x809B

	)

64 
	#ETH_P_AARP
 0x80F3

	)

65 
	#ETH_P_8021Q
 0x8100

	)

66 
	#ETH_P_IPX
 0x8137

	)

67 
	#ETH_P_IPV6
 0x86DD

	)

68 
	#ETH_P_PAUSE
 0x8808

	)

69 
	#ETH_P_SLOW
 0x8809

	)

70 
	#ETH_P_WCCP
 0x883E

	)

72 
	#ETH_P_MPLS_UC
 0x8847

	)

73 
	#ETH_P_MPLS_MC
 0x8848

	)

74 
	#ETH_P_ATMMPOA
 0x884¯

	)

75 
	#ETH_P_PPP_DISC
 0x8863

	)

76 
	#ETH_P_PPP_SES
 0x8864

	)

77 
	#ETH_P_LINK_CTL
 0x886¯

	)

78 
	#ETH_P_ATMFATE
 0x8884

	)

81 
	#ETH_P_PAE
 0x888E

	)

82 
	#ETH_P_AOE
 0x88A2

	)

83 
	#ETH_P_8021AD
 0x88A8

	)

84 
	#ETH_P_802_EX1
 0x88B5

	)

85 
	#ETH_P_TIPC
 0x88CA

	)

86 
	#ETH_P_8021AH
 0x88E7

	)

87 
	#ETH_P_MVRP
 0x88F5

	)

88 
	#ETH_P_1588
 0x88F7

	)

89 
	#ETH_P_PRP
 0x88FB

	)

90 
	#ETH_P_FCOE
 0x8906

	)

91 
	#ETH_P_TDLS
 0x890D

	)

92 
	#ETH_P_FIP
 0x8914

	)

93 
	#ETH_P_80221
 0x8917

	)

94 
	#ETH_P_LOOPBACK
 0x9000

	)

95 
	#ETH_P_QINQ1
 0x9100

	)

96 
	#ETH_P_QINQ2
 0x9200

	)

97 
	#ETH_P_QINQ3
 0x9300

	)

98 
	#ETH_P_EDSA
 0xDADA

	)

99 
	#ETH_P_AF_IUCV
 0xFBFB

	)

101 
	#ETH_P_802_3_MIN
 0x0600

	)

108 
	#ETH_P_802_3
 0x0001

	)

109 
	#ETH_P_AX25
 0x0002

	)

110 
	#ETH_P_ALL
 0x0003

	)

111 
	#ETH_P_802_2
 0x0004

	)

112 
	#ETH_P_SNAP
 0x0005

	)

113 
	#ETH_P_DDCMP
 0x0006

	)

114 
	#ETH_P_WAN_PPP
 0x0007

	)

115 
	#ETH_P_PPP_MP
 0x0008

	)

116 
	#ETH_P_LOCALTALK
 0x0009

	)

117 
	#ETH_P_CAN
 0x000C

	)

118 
	#ETH_P_CANFD
 0x000D

	)

119 
	#ETH_P_PPPTALK
 0x0010

	)

120 
	#ETH_P_TR_802_2
 0x0011

	)

121 
	#ETH_P_MOBITEX
 0x0015

	)

122 
	#ETH_P_CONTROL
 0x0016

	)

123 
	#ETH_P_IRDA
 0x0017

	)

124 
	#ETH_P_ECONET
 0x0018

	)

125 
	#ETH_P_HDLC
 0x0019

	)

126 
	#ETH_P_ARCNET
 0x001A

	)

127 
	#ETH_P_DSA
 0x001B

	)

128 
	#ETH_P_TRAILER
 0x001C

	)

129 
	#ETH_P_PHONET
 0x00F5

	)

130 
	#ETH_P_IEEE802154
 0x00F6

	)

131 
	#ETH_P_CAIF
 0x00F7

	)

132 
	#ETH_P_XDSA
 0x00F8

	)

138 
	sëhhdr
 {

139 
	mh_de°
[
ETH_ALEN
];

140 
	mh_sour˚
[
ETH_ALEN
];

141 
__be16
 
	mh_¥Ÿo
;

142 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_fddi.h

24 #i‚de‡
_LINUX_IF_FDDI_H


25 
	#_LINUX_IF_FDDI_H


	)

27 
	~<löux/ty≥s.h
>

33 
	#FDDI_K_ALEN
 6

	)

34 
	#FDDI_K_8022_HLEN
 16

	)

35 
	#FDDI_K_SNAP_HLEN
 21

	)

36 
	#FDDI_K_8022_ZLEN
 16

	)

38 
	#FDDI_K_SNAP_ZLEN
 21

	)

40 
	#FDDI_K_8022_DLEN
 4475

	)

41 
	#FDDI_K_SNAP_DLEN
 4470

	)

42 
	#FDDI_K_LLC_ZLEN
 13

	)

43 
	#FDDI_K_LLC_LEN
 4491

	)

44 
	#FDDI_K_OUI_LEN
 3

	)

48 
	#FDDI_FC_K_VOID
 0x00

	)

49 
	#FDDI_FC_K_NON_RESTRICTED_TOKEN
 0x80

	)

50 
	#FDDI_FC_K_RESTRICTED_TOKEN
 0xC0

	)

51 
	#FDDI_FC_K_SMT_MIN
 0x41

	)

52 
	#FDDI_FC_K_SMT_MAX
 0x4F

	)

53 
	#FDDI_FC_K_MAC_MIN
 0xC1

	)

54 
	#FDDI_FC_K_MAC_MAX
 0xCF

	)

55 
	#FDDI_FC_K_ASYNC_LLC_MIN
 0x50

	)

56 
	#FDDI_FC_K_ASYNC_LLC_DEF
 0x54

	)

57 
	#FDDI_FC_K_ASYNC_LLC_MAX
 0x5F

	)

58 
	#FDDI_FC_K_SYNC_LLC_MIN
 0xD0

	)

59 
	#FDDI_FC_K_SYNC_LLC_MAX
 0xD7

	)

60 
	#FDDI_FC_K_IMPLEMENTOR_MIN
 0x60

	)

61 
	#FDDI_FC_K_IMPLEMENTOR_MAX
 0x6F

	)

62 
	#FDDI_FC_K_RESERVED_MIN
 0x70

	)

63 
	#FDDI_FC_K_RESERVED_MAX
 0x7F

	)

66 
	#FDDI_EXTENDED_SAP
 0xAA

	)

67 
	#FDDI_UI_CMD
 0x03

	)

70 
	sfddi_8022_1_hdr
 {

71 
__u8
 
	mdßp
;

72 
__u8
 
	msßp
;

73 
__u8
 
	m˘æ
;

74 } 
__©åibuã__
((
∑cked
));

77 
	sfddi_8022_2_hdr
 {

78 
__u8
 
	mdßp
;

79 
__u8
 
	msßp
;

80 
__u8
 
	m˘æ_1
;

81 
__u8
 
	m˘æ_2
;

82 } 
__©åibuã__
((
∑cked
));

85 
	sfddi_¢≠_hdr
 {

86 
__u8
 
	mdßp
;

87 
__u8
 
	msßp
;

88 
__u8
 
	m˘æ
;

89 
__u8
 
	moui
[
FDDI_K_OUI_LEN
];

90 
__be16
 
	mëhîty≥
;

91 } 
__©åibuã__
((
∑cked
));

94 
	sfddihdr
 {

95 
__u8
 
	mfc
;

96 
__u8
 
	mdaddr
[
FDDI_K_ALEN
];

97 
__u8
 
	mßddr
[
FDDI_K_ALEN
];

99 
fddi_8022_1_hdr
 
	mŒc_8022_1
;

100 
fddi_8022_2_hdr
 
	mŒc_8022_2
;

101 
fddi_¢≠_hdr
 
	mŒc_¢≠
;

102 } 
	mhdr
;

103 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_infiniband.h

24 #i‚de‡
_LINUX_IF_INFINIBAND_H


25 
	#_LINUX_IF_INFINIBAND_H


	)

27 
	#INFINIBAND_ALEN
 20

	)

	@/usr/include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s
 {

9 
__u32
 
	mrx_∑ckës
;

10 
__u32
 
	mtx_∑ckës
;

11 
__u32
 
	mrx_byãs
;

12 
__u32
 
	mtx_byãs
;

13 
__u32
 
	mrx_îr‹s
;

14 
__u32
 
	mtx_îr‹s
;

15 
__u32
 
	mrx_dr›≥d
;

16 
__u32
 
	mtx_dr›≥d
;

17 
__u32
 
	mmu…iˇ°
;

18 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

41 
	sπ∆_lök_°©s64
 {

42 
__u64
 
	mrx_∑ckës
;

43 
__u64
 
	mtx_∑ckës
;

44 
__u64
 
	mrx_byãs
;

45 
__u64
 
	mtx_byãs
;

46 
__u64
 
	mrx_îr‹s
;

47 
__u64
 
	mtx_îr‹s
;

48 
__u64
 
	mrx_dr›≥d
;

49 
__u64
 
	mtx_dr›≥d
;

50 
__u64
 
	mmu…iˇ°
;

51 
__u64
 
	mcﬁlisi⁄s
;

54 
__u64
 
	mrx_Àngth_îr‹s
;

55 
__u64
 
	mrx_ovî_îr‹s
;

56 
__u64
 
	mrx_¸c_îr‹s
;

57 
__u64
 
	mrx_‰ame_îr‹s
;

58 
__u64
 
	mrx_fifo_îr‹s
;

59 
__u64
 
	mrx_mis£d_îr‹s
;

62 
__u64
 
	mtx_ab‹ãd_îr‹s
;

63 
__u64
 
	mtx_ˇºõr_îr‹s
;

64 
__u64
 
	mtx_fifo_îr‹s
;

65 
__u64
 
	mtx_hóπbót_îr‹s
;

66 
__u64
 
	mtx_wödow_îr‹s
;

69 
__u64
 
	mrx_com¥es£d
;

70 
__u64
 
	mtx_com¥es£d
;

74 
	sπ∆_lök_ifm≠
 {

75 
__u64
 
	mmem_°¨t
;

76 
__u64
 
	mmem_íd
;

77 
__u64
 
	mba£_addr
;

78 
__u16
 
	múq
;

79 
__u8
 
	mdma
;

80 
__u8
 
	mp‹t
;

102 
	mIFLA_UNSPEC
,

103 
	mIFLA_ADDRESS
,

104 
	mIFLA_BROADCAST
,

105 
	mIFLA_IFNAME
,

106 
	mIFLA_MTU
,

107 
	mIFLA_LINK
,

108 
	mIFLA_QDISC
,

109 
	mIFLA_STATS
,

110 
	mIFLA_COST
,

111 
	#IFLA_COST
 
IFLA_COST


	)

112 
	mIFLA_PRIORITY
,

113 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

114 
	mIFLA_MASTER
,

115 
	#IFLA_MASTER
 
IFLA_MASTER


	)

116 
	mIFLA_WIRELESS
,

117 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

118 
	mIFLA_PROTINFO
,

119 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

120 
	mIFLA_TXQLEN
,

121 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

122 
	mIFLA_MAP
,

123 
	#IFLA_MAP
 
IFLA_MAP


	)

124 
	mIFLA_WEIGHT
,

125 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

126 
	mIFLA_OPERSTATE
,

127 
	mIFLA_LINKMODE
,

128 
	mIFLA_LINKINFO
,

129 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

130 
	mIFLA_NET_NS_PID
,

131 
	mIFLA_IFALIAS
,

132 
	mIFLA_NUM_VF
,

133 
	mIFLA_VFINFO_LIST
,

134 
	mIFLA_STATS64
,

135 
	mIFLA_VF_PORTS
,

136 
	mIFLA_PORT_SELF
,

137 
	mIFLA_AF_SPEC
,

138 
	mIFLA_GROUP
,

139 
	mIFLA_NET_NS_FD
,

140 
	mIFLA_EXT_MASK
,

141 
	mIFLA_PROMISCUITY
,

142 
	#IFLA_PROMISCUITY
 
IFLA_PROMISCUITY


	)

143 
	mIFLA_NUM_TX_QUEUES
,

144 
	mIFLA_NUM_RX_QUEUES
,

145 
	mIFLA_CARRIER
,

146 
	mIFLA_PHYS_PORT_ID
,

147 
	mIFLA_CARRIER_CHANGES
,

148 
	mIFLA_PHYS_SWITCH_ID
,

149 
	mIFLA_LINK_NETNSID
,

150 
	mIFLA_PHYS_PORT_NAME
,

151 
	mIFLA_PROTO_DOWN
,

152 
	m__IFLA_MAX


156 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

159 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

160 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

163 
	mIFLA_INET_UNSPEC
,

164 
	mIFLA_INET_CONF
,

165 
	m__IFLA_INET_MAX
,

168 
	#IFLA_INET_MAX
 (
__IFLA_INET_MAX
 - 1)

	)

201 
	mIFLA_INET6_UNSPEC
,

202 
	mIFLA_INET6_FLAGS
,

203 
	mIFLA_INET6_CONF
,

204 
	mIFLA_INET6_STATS
,

205 
	mIFLA_INET6_MCAST
,

206 
	mIFLA_INET6_CACHEINFO
,

207 
	mIFLA_INET6_ICMP6STATS
,

208 
	mIFLA_INET6_TOKEN
,

209 
	mIFLA_INET6_ADDR_GEN_MODE
,

210 
	m__IFLA_INET6_MAX


213 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

215 
	eö6_addr_gí_mode
 {

216 
	mIN6_ADDR_GEN_MODE_EUI64
,

217 
	mIN6_ADDR_GEN_MODE_NONE
,

218 
	mIN6_ADDR_GEN_MODE_STABLE_PRIVACY
,

224 
	mIFLA_BR_UNSPEC
,

225 
	mIFLA_BR_FORWARD_DELAY
,

226 
	mIFLA_BR_HELLO_TIME
,

227 
	mIFLA_BR_MAX_AGE
,

228 
	mIFLA_BR_AGEING_TIME
,

229 
	mIFLA_BR_STP_STATE
,

230 
	mIFLA_BR_PRIORITY
,

231 
	mIFLA_BR_VLAN_FILTERING
,

232 
	mIFLA_BR_VLAN_PROTOCOL
,

233 
	mIFLA_BR_GROUP_FWD_MASK
,

234 
	mIFLA_BR_ROOT_ID
,

235 
	mIFLA_BR_BRIDGE_ID
,

236 
	mIFLA_BR_ROOT_PORT
,

237 
	mIFLA_BR_ROOT_PATH_COST
,

238 
	mIFLA_BR_TOPOLOGY_CHANGE
,

239 
	mIFLA_BR_TOPOLOGY_CHANGE_DETECTED
,

240 
	mIFLA_BR_HELLO_TIMER
,

241 
	mIFLA_BR_TCN_TIMER
,

242 
	mIFLA_BR_TOPOLOGY_CHANGE_TIMER
,

243 
	mIFLA_BR_GC_TIMER
,

244 
	mIFLA_BR_GROUP_ADDR
,

245 
	mIFLA_BR_FDB_FLUSH
,

246 
	mIFLA_BR_MCAST_ROUTER
,

247 
	mIFLA_BR_MCAST_SNOOPING
,

248 
	mIFLA_BR_MCAST_QUERY_USE_IFADDR
,

249 
	mIFLA_BR_MCAST_QUERIER
,

250 
	mIFLA_BR_MCAST_HASH_ELASTICITY
,

251 
	mIFLA_BR_MCAST_HASH_MAX
,

252 
	mIFLA_BR_MCAST_LAST_MEMBER_CNT
,

253 
	mIFLA_BR_MCAST_STARTUP_QUERY_CNT
,

254 
	mIFLA_BR_MCAST_LAST_MEMBER_INTVL
,

255 
	mIFLA_BR_MCAST_MEMBERSHIP_INTVL
,

256 
	mIFLA_BR_MCAST_QUERIER_INTVL
,

257 
	mIFLA_BR_MCAST_QUERY_INTVL
,

258 
	mIFLA_BR_MCAST_QUERY_RESPONSE_INTVL
,

259 
	mIFLA_BR_MCAST_STARTUP_QUERY_INTVL
,

260 
	mIFLA_BR_NF_CALL_IPTABLES
,

261 
	mIFLA_BR_NF_CALL_IP6TABLES
,

262 
	mIFLA_BR_NF_CALL_ARPTABLES
,

263 
	mIFLA_BR_VLAN_DEFAULT_PVID
,

264 
	m__IFLA_BR_MAX
,

267 
	#IFLA_BR_MAX
 (
__IFLA_BR_MAX
 - 1)

	)

269 
	siÊa_bridge_id
 {

270 
__u8
 
	m¥io
[2];

271 
__u8
 
	maddr
[6];

275 
	mBRIDGE_MODE_UNSPEC
,

276 
	mBRIDGE_MODE_HAIRPIN
,

280 
	mIFLA_BRPORT_UNSPEC
,

281 
	mIFLA_BRPORT_STATE
,

282 
	mIFLA_BRPORT_PRIORITY
,

283 
	mIFLA_BRPORT_COST
,

284 
	mIFLA_BRPORT_MODE
,

285 
	mIFLA_BRPORT_GUARD
,

286 
	mIFLA_BRPORT_PROTECT
,

287 
	mIFLA_BRPORT_FAST_LEAVE
,

288 
	mIFLA_BRPORT_LEARNING
,

289 
	mIFLA_BRPORT_UNICAST_FLOOD
,

290 
	mIFLA_BRPORT_PROXYARP
,

291 
	mIFLA_BRPORT_LEARNING_SYNC
,

292 
	mIFLA_BRPORT_PROXYARP_WIFI
,

293 
	mIFLA_BRPORT_ROOT_ID
,

294 
	mIFLA_BRPORT_BRIDGE_ID
,

295 
	mIFLA_BRPORT_DESIGNATED_PORT
,

296 
	mIFLA_BRPORT_DESIGNATED_COST
,

297 
	mIFLA_BRPORT_ID
,

298 
	mIFLA_BRPORT_NO
,

299 
	mIFLA_BRPORT_TOPOLOGY_CHANGE_ACK
,

300 
	mIFLA_BRPORT_CONFIG_PENDING
,

301 
	mIFLA_BRPORT_MESSAGE_AGE_TIMER
,

302 
	mIFLA_BRPORT_FORWARD_DELAY_TIMER
,

303 
	mIFLA_BRPORT_HOLD_TIMER
,

304 
	mIFLA_BRPORT_FLUSH
,

305 
	mIFLA_BRPORT_MULTICAST_ROUTER
,

306 
	m__IFLA_BRPORT_MAX


308 
	#IFLA_BRPORT_MAX
 (
__IFLA_BRPORT_MAX
 - 1)

	)

310 
	siÊa_ˇcheöfo
 {

311 
__u32
 
	mmax_ªasm_Àn
;

312 
__u32
 
	mt°amp
;

313 
__u32
 
	mªachabÀ_time
;

314 
__u32
 
	mªå™s_time
;

318 
	mIFLA_INFO_UNSPEC
,

319 
	mIFLA_INFO_KIND
,

320 
	mIFLA_INFO_DATA
,

321 
	mIFLA_INFO_XSTATS
,

322 
	mIFLA_INFO_SLAVE_KIND
,

323 
	mIFLA_INFO_SLAVE_DATA
,

324 
	m__IFLA_INFO_MAX
,

327 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

332 
	mIFLA_VLAN_UNSPEC
,

333 
	mIFLA_VLAN_ID
,

334 
	mIFLA_VLAN_FLAGS
,

335 
	mIFLA_VLAN_EGRESS_QOS
,

336 
	mIFLA_VLAN_INGRESS_QOS
,

337 
	mIFLA_VLAN_PROTOCOL
,

338 
	m__IFLA_VLAN_MAX
,

341 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

343 
	siÊa_vœn_Êags
 {

344 
__u32
 
	mÊags
;

345 
__u32
 
	mmask
;

349 
	mIFLA_VLAN_QOS_UNSPEC
,

350 
	mIFLA_VLAN_QOS_MAPPING
,

351 
	m__IFLA_VLAN_QOS_MAX


354 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

356 
	siÊa_vœn_qos_m≠pög
 {

357 
__u32
 
	m‰om
;

358 
__u32
 
	mto
;

363 
	mIFLA_MACVLAN_UNSPEC
,

364 
	mIFLA_MACVLAN_MODE
,

365 
	mIFLA_MACVLAN_FLAGS
,

366 
	mIFLA_MACVLAN_MACADDR_MODE
,

367 
	mIFLA_MACVLAN_MACADDR
,

368 
	mIFLA_MACVLAN_MACADDR_DATA
,

369 
	mIFLA_MACVLAN_MACADDR_COUNT
,

370 
	m__IFLA_MACVLAN_MAX
,

373 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

375 
	emacvœn_mode
 {

376 
	mMACVLAN_MODE_PRIVATE
 = 1,

377 
	mMACVLAN_MODE_VEPA
 = 2,

378 
	mMACVLAN_MODE_BRIDGE
 = 4,

379 
	mMACVLAN_MODE_PASSTHRU
 = 8,

380 
	mMACVLAN_MODE_SOURCE
 = 16,

383 
	emacvœn_maˇddr_mode
 {

384 
	mMACVLAN_MACADDR_ADD
,

385 
	mMACVLAN_MACADDR_DEL
,

386 
	mMACVLAN_MACADDR_FLUSH
,

387 
	mMACVLAN_MACADDR_SET
,

390 
	#MACVLAN_FLAG_NOPROMISC
 1

	)

394 
	mIFLA_VRF_UNSPEC
,

395 
	mIFLA_VRF_TABLE
,

396 
	m__IFLA_VRF_MAX


399 
	#IFLA_VRF_MAX
 (
__IFLA_VRF_MAX
 - 1)

	)

403 
	mIFLA_IPVLAN_UNSPEC
,

404 
	mIFLA_IPVLAN_MODE
,

405 
	m__IFLA_IPVLAN_MAX


408 
	#IFLA_IPVLAN_MAX
 (
__IFLA_IPVLAN_MAX
 - 1)

	)

410 
	eùvœn_mode
 {

411 
	mIPVLAN_MODE_L2
 = 0,

412 
	mIPVLAN_MODE_L3
,

413 
	mIPVLAN_MODE_MAX


418 
	mIFLA_VXLAN_UNSPEC
,

419 
	mIFLA_VXLAN_ID
,

420 
	mIFLA_VXLAN_GROUP
,

421 
	mIFLA_VXLAN_LINK
,

422 
	mIFLA_VXLAN_LOCAL
,

423 
	mIFLA_VXLAN_TTL
,

424 
	mIFLA_VXLAN_TOS
,

425 
	mIFLA_VXLAN_LEARNING
,

426 
	mIFLA_VXLAN_AGEING
,

427 
	mIFLA_VXLAN_LIMIT
,

428 
	mIFLA_VXLAN_PORT_RANGE
,

429 
	mIFLA_VXLAN_PROXY
,

430 
	mIFLA_VXLAN_RSC
,

431 
	mIFLA_VXLAN_L2MISS
,

432 
	mIFLA_VXLAN_L3MISS
,

433 
	mIFLA_VXLAN_PORT
,

434 
	mIFLA_VXLAN_GROUP6
,

435 
	mIFLA_VXLAN_LOCAL6
,

436 
	mIFLA_VXLAN_UDP_CSUM
,

437 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_TX
,

438 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_RX
,

439 
	mIFLA_VXLAN_REMCSUM_TX
,

440 
	mIFLA_VXLAN_REMCSUM_RX
,

441 
	mIFLA_VXLAN_GBP
,

442 
	mIFLA_VXLAN_REMCSUM_NOPARTIAL
,

443 
	mIFLA_VXLAN_COLLECT_METADATA
,

444 
	mIFLA_VXLAN_FAN_MAP
 = 33,

445 
	m__IFLA_VXLAN_MAX


447 
	#IFLA_VXLAN_MAX
 (
__IFLA_VXLAN_MAX
 - 1)

	)

449 
	siÊa_vxœn_p‹t_ønge
 {

450 
__be16
 
	mlow
;

451 
__be16
 
	mhigh
;

456 
	mIFLA_GENEVE_UNSPEC
,

457 
	mIFLA_GENEVE_ID
,

458 
	mIFLA_GENEVE_REMOTE
,

459 
	mIFLA_GENEVE_TTL
,

460 
	mIFLA_GENEVE_TOS
,

461 
	mIFLA_GENEVE_PORT
,

462 
	mIFLA_GENEVE_COLLECT_METADATA
,

463 
	mIFLA_GENEVE_REMOTE6
,

464 
	mIFLA_GENEVE_UDP_CSUM
,

465 
	mIFLA_GENEVE_UDP_ZERO_CSUM6_TX
,

466 
	mIFLA_GENEVE_UDP_ZERO_CSUM6_RX
,

467 
	m__IFLA_GENEVE_MAX


469 
	#IFLA_GENEVE_MAX
 (
__IFLA_GENEVE_MAX
 - 1)

	)

474 
	mIFLA_BOND_UNSPEC
,

475 
	mIFLA_BOND_MODE
,

476 
	mIFLA_BOND_ACTIVE_SLAVE
,

477 
	mIFLA_BOND_MIIMON
,

478 
	mIFLA_BOND_UPDELAY
,

479 
	mIFLA_BOND_DOWNDELAY
,

480 
	mIFLA_BOND_USE_CARRIER
,

481 
	mIFLA_BOND_ARP_INTERVAL
,

482 
	mIFLA_BOND_ARP_IP_TARGET
,

483 
	mIFLA_BOND_ARP_VALIDATE
,

484 
	mIFLA_BOND_ARP_ALL_TARGETS
,

485 
	mIFLA_BOND_PRIMARY
,

486 
	mIFLA_BOND_PRIMARY_RESELECT
,

487 
	mIFLA_BOND_FAIL_OVER_MAC
,

488 
	mIFLA_BOND_XMIT_HASH_POLICY
,

489 
	mIFLA_BOND_RESEND_IGMP
,

490 
	mIFLA_BOND_NUM_PEER_NOTIF
,

491 
	mIFLA_BOND_ALL_SLAVES_ACTIVE
,

492 
	mIFLA_BOND_MIN_LINKS
,

493 
	mIFLA_BOND_LP_INTERVAL
,

494 
	mIFLA_BOND_PACKETS_PER_SLAVE
,

495 
	mIFLA_BOND_AD_LACP_RATE
,

496 
	mIFLA_BOND_AD_SELECT
,

497 
	mIFLA_BOND_AD_INFO
,

498 
	mIFLA_BOND_AD_ACTOR_SYS_PRIO
,

499 
	mIFLA_BOND_AD_USER_PORT_KEY
,

500 
	mIFLA_BOND_AD_ACTOR_SYSTEM
,

501 
	mIFLA_BOND_TLB_DYNAMIC_LB
,

502 
	m__IFLA_BOND_MAX
,

505 
	#IFLA_BOND_MAX
 (
__IFLA_BOND_MAX
 - 1)

	)

508 
	mIFLA_BOND_AD_INFO_UNSPEC
,

509 
	mIFLA_BOND_AD_INFO_AGGREGATOR
,

510 
	mIFLA_BOND_AD_INFO_NUM_PORTS
,

511 
	mIFLA_BOND_AD_INFO_ACTOR_KEY
,

512 
	mIFLA_BOND_AD_INFO_PARTNER_KEY
,

513 
	mIFLA_BOND_AD_INFO_PARTNER_MAC
,

514 
	m__IFLA_BOND_AD_INFO_MAX
,

517 
	#IFLA_BOND_AD_INFO_MAX
 (
__IFLA_BOND_AD_INFO_MAX
 - 1)

	)

520 
	mIFLA_BOND_SLAVE_UNSPEC
,

521 
	mIFLA_BOND_SLAVE_STATE
,

522 
	mIFLA_BOND_SLAVE_MII_STATUS
,

523 
	mIFLA_BOND_SLAVE_LINK_FAILURE_COUNT
,

524 
	mIFLA_BOND_SLAVE_PERM_HWADDR
,

525 
	mIFLA_BOND_SLAVE_QUEUE_ID
,

526 
	mIFLA_BOND_SLAVE_AD_AGGREGATOR_ID
,

527 
	mIFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE
,

528 
	mIFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE
,

529 
	m__IFLA_BOND_SLAVE_MAX
,

532 
	#IFLA_BOND_SLAVE_MAX
 (
__IFLA_BOND_SLAVE_MAX
 - 1)

	)

537 
	mIFLA_VF_INFO_UNSPEC
,

538 
	mIFLA_VF_INFO
,

539 
	m__IFLA_VF_INFO_MAX
,

542 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

545 
	mIFLA_VF_UNSPEC
,

546 
	mIFLA_VF_MAC
,

547 
	mIFLA_VF_VLAN
,

548 
	mIFLA_VF_TX_RATE
,

549 
	mIFLA_VF_SPOOFCHK
,

550 
	mIFLA_VF_LINK_STATE
,

551 
	mIFLA_VF_RATE
,

552 
	mIFLA_VF_RSS_QUERY_EN
,

555 
	mIFLA_VF_STATS
,

556 
	mIFLA_VF_TRUST
,

557 
	m__IFLA_VF_MAX
,

560 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

562 
	siÊa_vf_mac
 {

563 
__u32
 
	mvf
;

564 
__u8
 
	mmac
[32];

567 
	siÊa_vf_vœn
 {

568 
__u32
 
	mvf
;

569 
__u32
 
	mvœn
;

570 
__u32
 
	mqos
;

573 
	siÊa_vf_tx_øã
 {

574 
__u32
 
	mvf
;

575 
__u32
 
	møã
;

578 
	siÊa_vf_øã
 {

579 
__u32
 
	mvf
;

580 
__u32
 
	mmö_tx_øã
;

581 
__u32
 
	mmax_tx_øã
;

584 
	siÊa_vf_•oofchk
 {

585 
__u32
 
	mvf
;

586 
__u32
 
	m£âög
;

590 
	mIFLA_VF_LINK_STATE_AUTO
,

591 
	mIFLA_VF_LINK_STATE_ENABLE
,

592 
	mIFLA_VF_LINK_STATE_DISABLE
,

593 
	m__IFLA_VF_LINK_STATE_MAX
,

596 
	siÊa_vf_lök_°©e
 {

597 
__u32
 
	mvf
;

598 
__u32
 
	mlök_°©e
;

601 
	siÊa_vf_rss_quîy_í
 {

602 
__u32
 
	mvf
;

603 
__u32
 
	m£âög
;

607 
	mIFLA_VF_STATS_RX_PACKETS
,

608 
	mIFLA_VF_STATS_TX_PACKETS
,

609 
	mIFLA_VF_STATS_RX_BYTES
,

610 
	mIFLA_VF_STATS_TX_BYTES
,

611 
	mIFLA_VF_STATS_BROADCAST
,

612 
	mIFLA_VF_STATS_MULTICAST
,

613 
	m__IFLA_VF_STATS_MAX
,

616 
	#IFLA_VF_STATS_MAX
 (
__IFLA_VF_STATS_MAX
 - 1)

	)

618 
	siÊa_vf_åu°
 {

619 
__u32
 
	mvf
;

620 
__u32
 
	m£âög
;

639 
	mIFLA_VF_PORT_UNSPEC
,

640 
	mIFLA_VF_PORT
,

641 
	m__IFLA_VF_PORT_MAX
,

644 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

647 
	mIFLA_PORT_UNSPEC
,

648 
	mIFLA_PORT_VF
,

649 
	mIFLA_PORT_PROFILE
,

650 
	mIFLA_PORT_VSI_TYPE
,

651 
	mIFLA_PORT_INSTANCE_UUID
,

652 
	mIFLA_PORT_HOST_UUID
,

653 
	mIFLA_PORT_REQUEST
,

654 
	mIFLA_PORT_RESPONSE
,

655 
	m__IFLA_PORT_MAX
,

658 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

660 
	#PORT_PROFILE_MAX
 40

	)

661 
	#PORT_UUID_MAX
 16

	)

662 
	#PORT_SELF_VF
 -1

	)

665 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

666 
	mPORT_REQUEST_PREASSOCIATE_RR
,

667 
	mPORT_REQUEST_ASSOCIATE
,

668 
	mPORT_REQUEST_DISASSOCIATE
,

672 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

673 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

674 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

675 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

676 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

677 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

678 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

680 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

681 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

682 
	mPORT_PROFILE_RESPONSE_INVALID
,

683 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

684 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

685 
	mPORT_PROFILE_RESPONSE_ERROR
,

688 
	siÊa_p‹t_vsi
 {

689 
__u8
 
	mvsi_mgr_id
;

690 
__u8
 
	mvsi_ty≥_id
[3];

691 
__u8
 
	mvsi_ty≥_vîsi⁄
;

692 
__u8
 
	m∑d
[3];

699 
	mIFLA_IPOIB_UNSPEC
,

700 
	mIFLA_IPOIB_PKEY
,

701 
	mIFLA_IPOIB_MODE
,

702 
	mIFLA_IPOIB_UMCAST
,

703 
	m__IFLA_IPOIB_MAX


707 
	mIPOIB_MODE_DATAGRAM
 = 0,

708 
	mIPOIB_MODE_CONNECTED
 = 1,

711 
	#IFLA_IPOIB_MAX
 (
__IFLA_IPOIB_MAX
 - 1)

	)

717 
	mIFLA_HSR_UNSPEC
,

718 
	mIFLA_HSR_SLAVE1
,

719 
	mIFLA_HSR_SLAVE2
,

720 
	mIFLA_HSR_MULTICAST_SPEC
,

721 
	mIFLA_HSR_SUPERVISION_ADDR
,

722 
	mIFLA_HSR_SEQ_NR
,

723 
	m__IFLA_HSR_MAX
,

726 
	#IFLA_HSR_MAX
 (
__IFLA_HSR_MAX
 - 1)

	)

	@/usr/include/linux/if_plip.h

11 #i‚de‡
_LINUX_IF_PLIP_H


12 
	#_LINUX_IF_PLIP_H


	)

14 
	~<löux/sockios.h
>

16 
	#SIOCDEVPLIP
 
SIOCDEVPRIVATE


	)

18 
	s∂ùc⁄f
 {

19 
	mpcmd
;

20 
	mnibbÀ
;

21 
	måiggî
;

24 
	#PLIP_GET_TIMEOUT
 0x1

	)

25 
	#PLIP_SET_TIMEOUT
 0x2

	)

	@/usr/include/linux/if_slip.h

8 #i‚de‡
__LINUX_SLIP_H


9 
	#__LINUX_SLIP_H


	)

11 
	#SL_MODE_SLIP
 0

	)

12 
	#SL_MODE_CSLIP
 1

	)

13 
	#SL_MODE_KISS
 4

	)

15 
	#SL_OPT_SIXBIT
 2

	)

16 
	#SL_OPT_ADAPTIVE
 8

	)

22 
	#SIOCSKEEPALIVE
 (
SIOCDEVPRIVATE
Ë

	)

23 
	#SIOCGKEEPALIVE
 (
SIOCDEVPRIVATE
+1Ë

	)

24 
	#SIOCSOUTFILL
 (
SIOCDEVPRIVATE
+2Ë

	)

25 
	#SIOCGOUTFILL
 (
SIOCDEVPRIVATE
+3Ë

	)

26 
	#SIOCSLEASE
 (
SIOCDEVPRIVATE
+4Ë

	)

27 
	#SIOCGLEASE
 (
SIOCDEVPRIVATE
+5Ë

	)

	@/usr/include/linux/if_tunnel.h

1 #i‚de‡
_IF_TUNNEL_H_


2 
	#_IF_TUNNEL_H_


	)

4 
	~<löux/ty≥s.h
>

5 
	~<asm/byã‹dî.h
>

8 
	#SIOCGETTUNNEL
 (
SIOCDEVPRIVATE
 + 0)

	)

9 
	#SIOCADDTUNNEL
 (
SIOCDEVPRIVATE
 + 1)

	)

10 
	#SIOCDELTUNNEL
 (
SIOCDEVPRIVATE
 + 2)

	)

11 
	#SIOCCHGTUNNEL
 (
SIOCDEVPRIVATE
 + 3)

	)

12 
	#SIOCGETPRL
 (
SIOCDEVPRIVATE
 + 4)

	)

13 
	#SIOCADDPRL
 (
SIOCDEVPRIVATE
 + 5)

	)

14 
	#SIOCDELPRL
 (
SIOCDEVPRIVATE
 + 6)

	)

15 
	#SIOCCHGPRL
 (
SIOCDEVPRIVATE
 + 7)

	)

16 
	#SIOCGET6RD
 (
SIOCDEVPRIVATE
 + 8)

	)

17 
	#SIOCADD6RD
 (
SIOCDEVPRIVATE
 + 9)

	)

18 
	#SIOCDEL6RD
 (
SIOCDEVPRIVATE
 + 10)

	)

19 
	#SIOCCHG6RD
 (
SIOCDEVPRIVATE
 + 11)

	)

21 
	#GRE_CSUM
 
	`__˝u_to_be16
(0x8000)

	)

22 
	#GRE_ROUTING
 
	`__˝u_to_be16
(0x4000)

	)

23 
	#GRE_KEY
 
	`__˝u_to_be16
(0x2000)

	)

24 
	#GRE_SEQ
 
	`__˝u_to_be16
(0x1000)

	)

25 
	#GRE_STRICT
 
	`__˝u_to_be16
(0x0800)

	)

26 
	#GRE_REC
 
	`__˝u_to_be16
(0x0700)

	)

27 
	#GRE_FLAGS
 
	`__˝u_to_be16
(0x00F8)

	)

28 
	#GRE_VERSION
 
	`__˝u_to_be16
(0x0007)

	)

30 
	sù_tu¬ñ_∑rm
 {

31 
	m«me
[
IFNAMSIZ
];

32 
	mlök
;

33 
__be16
 
	mi_Êags
;

34 
__be16
 
	mo_Êags
;

35 
__be32
 
	mi_key
;

36 
__be32
 
	mo_key
;

37 
ùhdr
 
	mùh
;

41 
	mIFLA_IPTUN_UNSPEC
,

42 
	mIFLA_IPTUN_LINK
,

43 
	mIFLA_IPTUN_LOCAL
,

44 
	mIFLA_IPTUN_REMOTE
,

45 
	mIFLA_IPTUN_TTL
,

46 
	mIFLA_IPTUN_TOS
,

47 
	mIFLA_IPTUN_ENCAP_LIMIT
,

48 
	mIFLA_IPTUN_FLOWINFO
,

49 
	mIFLA_IPTUN_FLAGS
,

50 
	mIFLA_IPTUN_PROTO
,

51 
	mIFLA_IPTUN_PMTUDISC
,

52 
	mIFLA_IPTUN_6RD_PREFIX
,

53 
	mIFLA_IPTUN_6RD_RELAY_PREFIX
,

54 
	mIFLA_IPTUN_6RD_PREFIXLEN
,

55 
	mIFLA_IPTUN_6RD_RELAY_PREFIXLEN
,

56 
	mIFLA_IPTUN_ENCAP_TYPE
,

57 
	mIFLA_IPTUN_ENCAP_FLAGS
,

58 
	mIFLA_IPTUN_ENCAP_SPORT
,

59 
	mIFLA_IPTUN_ENCAP_DPORT
,

61 
	m__IFLA_IPTUN_VENDOR_BREAK
,

62 
	mIFLA_IPTUN_FAN_MAP
 = 33,

64 
	m__IFLA_IPTUN_MAX
,

66 
	#IFLA_IPTUN_MAX
 (
__IFLA_IPTUN_MAX
 - 1)

	)

68 
	etu¬ñ_íˇp_ty≥s
 {

69 
	mTUNNEL_ENCAP_NONE
,

70 
	mTUNNEL_ENCAP_FOU
,

71 
	mTUNNEL_ENCAP_GUE
,

74 
	#TUNNEL_ENCAP_FLAG_CSUM
 (1<<0)

	)

75 
	#TUNNEL_ENCAP_FLAG_CSUM6
 (1<<1)

	)

76 
	#TUNNEL_ENCAP_FLAG_REMCSUM
 (1<<2)

	)

79 
	#SIT_ISATAP
 0x0001

	)

81 
	sù_tu¬ñ_¥l
 {

82 
__be32
 
	maddr
;

83 
__u16
 
	mÊags
;

84 
__u16
 
	m__ª£rved
;

85 
__u32
 
	md©Æí
;

86 
__u32
 
	m__ª£rved2
;

91 
	#PRL_DEFAULT
 0x0001

	)

93 
	sù_tu¬ñ_6rd
 {

94 
ö6_addr
 
	m¥efix
;

95 
__be32
 
	mªœy_¥efix
;

96 
__u16
 
	m¥efixÀn
;

97 
__u16
 
	mªœy_¥efixÀn
;

101 
	mIFLA_GRE_UNSPEC
,

102 
	mIFLA_GRE_LINK
,

103 
	mIFLA_GRE_IFLAGS
,

104 
	mIFLA_GRE_OFLAGS
,

105 
	mIFLA_GRE_IKEY
,

106 
	mIFLA_GRE_OKEY
,

107 
	mIFLA_GRE_LOCAL
,

108 
	mIFLA_GRE_REMOTE
,

109 
	mIFLA_GRE_TTL
,

110 
	mIFLA_GRE_TOS
,

111 
	mIFLA_GRE_PMTUDISC
,

112 
	mIFLA_GRE_ENCAP_LIMIT
,

113 
	mIFLA_GRE_FLOWINFO
,

114 
	mIFLA_GRE_FLAGS
,

115 
	mIFLA_GRE_ENCAP_TYPE
,

116 
	mIFLA_GRE_ENCAP_FLAGS
,

117 
	mIFLA_GRE_ENCAP_SPORT
,

118 
	mIFLA_GRE_ENCAP_DPORT
,

119 
	mIFLA_GRE_COLLECT_METADATA
,

120 
	m__IFLA_GRE_MAX
,

123 
	#IFLA_GRE_MAX
 (
__IFLA_GRE_MAX
 - 1)

	)

126 
	#VTI_ISVTI
 ((
__be16
)0x0001)

	)

129 
	mIFLA_VTI_UNSPEC
,

130 
	mIFLA_VTI_LINK
,

131 
	mIFLA_VTI_IKEY
,

132 
	mIFLA_VTI_OKEY
,

133 
	mIFLA_VTI_LOCAL
,

134 
	mIFLA_VTI_REMOTE
,

135 
	m__IFLA_VTI_MAX
,

138 
	#IFLA_VTI_MAX
 (
__IFLA_VTI_MAX
 - 1)

	)

141 
	mIFLA_FAN_UNSPEC
,

142 
	mIFLA_FAN_MAPPING
,

143 
	m__IFLA_FAN_MAX
,

146 
	#IFLA_FAN_MAX
 (
__IFLA_FAN_MAX
 - 1)

	)

148 
	siÊa_Án_m≠
 {

149 
__be32
 
	mundîœy
;

150 
__be32
 
	movîœy
;

151 
__u16
 
	mundîœy_¥efix
;

152 
__u16
 
	movîœy_¥efix
;

	@/usr/include/linux/if_vlan.h

13 #i‚de‡
_LINUX_IF_VLAN_H_


14 
	#_LINUX_IF_VLAN_H_


	)

20 
	evœn_io˘l_cmds
 {

21 
	mADD_VLAN_CMD
,

22 
	mDEL_VLAN_CMD
,

23 
	mSET_VLAN_INGRESS_PRIORITY_CMD
,

24 
	mSET_VLAN_EGRESS_PRIORITY_CMD
,

25 
	mGET_VLAN_INGRESS_PRIORITY_CMD
,

26 
	mGET_VLAN_EGRESS_PRIORITY_CMD
,

27 
	mSET_VLAN_NAME_TYPE_CMD
,

28 
	mSET_VLAN_FLAG_CMD
,

29 
	mGET_VLAN_REALDEV_NAME_CMD
,

30 
	mGET_VLAN_VID_CMD


33 
	evœn_Êags
 {

34 
	mVLAN_FLAG_REORDER_HDR
 = 0x1,

35 
	mVLAN_FLAG_GVRP
 = 0x2,

36 
	mVLAN_FLAG_LOOSE_BINDING
 = 0x4,

37 
	mVLAN_FLAG_MVRP
 = 0x8,

40 
	evœn_«me_ty≥s
 {

41 
	mVLAN_NAME_TYPE_PLUS_VID
,

42 
	mVLAN_NAME_TYPE_RAW_PLUS_VID
,

43 
	mVLAN_NAME_TYPE_PLUS_VID_NO_PAD
,

44 
	mVLAN_NAME_TYPE_RAW_PLUS_VID_NO_PAD
,

45 
	mVLAN_NAME_TYPE_HIGHEST


48 
	svœn_io˘l_¨gs
 {

49 
	mcmd
;

50 
	mdevi˚1
[24];

53 
	mdevi˚2
[24];

54 
	mVID
;

55 
	mskb_¥i‹ôy
;

56 
	m«me_ty≥
;

57 
	mböd_ty≥
;

58 
	mÊag
;

59 } 
	mu
;

61 
	mvœn_qos
;

	@/usr/include/linux/in_route.h

1 #i‚de‡
_LINUX_IN_ROUTE_H


2 
	#_LINUX_IN_ROUTE_H


	)

6 
	#RTCF_DEAD
 
RTNH_F_DEAD


	)

7 
	#RTCF_ONLINK
 
RTNH_F_ONLINK


	)

10 
	#RTCF_NOPMTUDISC
 
RTM_F_NOPMTUDISC


	)

12 
	#RTCF_NOTIFY
 0x00010000

	)

13 
	#RTCF_DIRECTDST
 0x00020000

	)

14 
	#RTCF_REDIRECTED
 0x00040000

	)

15 
	#RTCF_TPROXY
 0x00080000

	)

17 
	#RTCF_FAST
 0x00200000

	)

18 
	#RTCF_MASQ
 0x00400000

	)

19 
	#RTCF_SNAT
 0x00800000

	)

20 
	#RTCF_DOREDIRECT
 0x01000000

	)

21 
	#RTCF_DIRECTSRC
 0x04000000

	)

22 
	#RTCF_DNAT
 0x08000000

	)

23 
	#RTCF_BROADCAST
 0x10000000

	)

24 
	#RTCF_MULTICAST
 0x20000000

	)

25 
	#RTCF_REJECT
 0x40000000

	)

26 
	#RTCF_LOCAL
 0x80000000

	)

28 
	#RTCF_NAT
 (
RTCF_DNAT
|
RTCF_SNAT
)

	)

30 
	#RT_TOS
(
tos
Ë(—os)&
IPTOS_TOS_MASK
)

	)

	@/usr/include/linux/inet_diag.h

1 #i‚de‡
_INET_DIAG_H_


2 
	#_INET_DIAG_H_


	)

4 
	~<löux/ty≥s.h
>

7 
	#TCPDIAG_GETSOCK
 18

	)

8 
	#DCCPDIAG_GETSOCK
 19

	)

10 
	#INET_DIAG_GETSOCK_MAX
 24

	)

13 
	söë_düg_sockid
 {

14 
__be16
 
	midüg_•‹t
;

15 
__be16
 
	midüg_dp‹t
;

16 
__be32
 
	midüg_§c
[4];

17 
__be32
 
	midüg_d°
[4];

18 
__u32
 
	midüg_if
;

19 
__u32
 
	midüg_cookõ
[2];

20 
	#INET_DIAG_NOCOOKIE
 (~0U)

	)

25 
	söë_düg_ªq
 {

26 
__u8
 
	midüg_Ámûy
;

27 
__u8
 
	midüg_§c_Àn
;

28 
__u8
 
	midüg_d°_Àn
;

29 
__u8
 
	midüg_ext
;

31 
öë_düg_sockid
 
	mid
;

33 
__u32
 
	midüg_°©es
;

34 
__u32
 
	midüg_dbs
;

37 
	söë_düg_ªq_v2
 {

38 
__u8
 
	msdüg_Ámûy
;

39 
__u8
 
	msdüg_¥Ÿocﬁ
;

40 
__u8
 
	midüg_ext
;

41 
__u8
 
	m∑d
;

42 
__u32
 
	midüg_°©es
;

43 
öë_düg_sockid
 
	mid
;

47 
	mINET_DIAG_REQ_NONE
,

48 
	mINET_DIAG_REQ_BYTECODE
,

51 
	#INET_DIAG_REQ_MAX
 
INET_DIAG_REQ_BYTECODE


	)

59 
	söë_düg_bc_›
 {

60 
	mcode
;

61 
	myes
;

62 
	mno
;

66 
	mINET_DIAG_BC_NOP
,

67 
	mINET_DIAG_BC_JMP
,

68 
	mINET_DIAG_BC_S_GE
,

69 
	mINET_DIAG_BC_S_LE
,

70 
	mINET_DIAG_BC_D_GE
,

71 
	mINET_DIAG_BC_D_LE
,

72 
	mINET_DIAG_BC_AUTO
,

73 
	mINET_DIAG_BC_S_COND
,

74 
	mINET_DIAG_BC_D_COND
,

77 
	söë_düg_ho°c⁄d
 {

78 
__u8
 
	mÁmûy
;

79 
__u8
 
	m¥efix_Àn
;

80 
	mp‹t
;

81 
__be32
 
	maddr
[0];

86 
	söë_düg_msg
 {

87 
__u8
 
	midüg_Ámûy
;

88 
__u8
 
	midüg_°©e
;

89 
__u8
 
	midüg_timî
;

90 
__u8
 
	midüg_ªå™s
;

92 
öë_düg_sockid
 
	mid
;

94 
__u32
 
	midüg_expúes
;

95 
__u32
 
	midüg_rqueue
;

96 
__u32
 
	midüg_wqueue
;

97 
__u32
 
	midüg_uid
;

98 
__u32
 
	midüg_öode
;

104 
	mINET_DIAG_NONE
,

105 
	mINET_DIAG_MEMINFO
,

106 
	mINET_DIAG_INFO
,

107 
	mINET_DIAG_VEGASINFO
,

108 
	mINET_DIAG_CONG
,

109 
	mINET_DIAG_TOS
,

110 
	mINET_DIAG_TCLASS
,

111 
	mINET_DIAG_SKMEMINFO
,

112 
	mINET_DIAG_SHUTDOWN
,

113 
	mINET_DIAG_DCTCPINFO
,

114 
	mINET_DIAG_PROTOCOL
,

115 
	mINET_DIAG_SKV6ONLY
,

118 
	#INET_DIAG_MAX
 
INET_DIAG_SKV6ONLY


	)

122 
	söë_düg_memöfo
 {

123 
__u32
 
	midüg_rmem
;

124 
__u32
 
	midüg_wmem
;

125 
__u32
 
	midüg_fmem
;

126 
__u32
 
	midüg_tmem
;

131 
	st˝vegas_öfo
 {

132 
__u32
 
	mt˝v_íabÀd
;

133 
__u32
 
	mt˝v_πt˙t
;

134 
__u32
 
	mt˝v_πt
;

135 
__u32
 
	mt˝v_möπt
;

140 
	st˝_d˘˝_öfo
 {

141 
__u16
 
	md˘˝_íabÀd
;

142 
__u16
 
	md˘˝_˚_°©e
;

143 
__u32
 
	md˘˝_Æpha
;

144 
__u32
 
	md˘˝_ab_e˙
;

145 
__u32
 
	md˘˝_ab_tŸ
;

148 
	ut˝_cc_öfo
 {

149 
t˝vegas_öfo
 
	mvegas
;

150 
t˝_d˘˝_öfo
 
	md˘˝
;

	@/usr/include/linux/ip.h

17 #i‚de‡
_LINUX_IP_H


18 
	#_LINUX_IP_H


	)

19 
	~<löux/ty≥s.h
>

20 
	~<asm/byã‹dî.h
>

22 
	#IPTOS_TOS_MASK
 0x1E

	)

23 
	#IPTOS_TOS
(
tos
Ë(—os)&
IPTOS_TOS_MASK
)

	)

24 
	#IPTOS_LOWDELAY
 0x10

	)

25 
	#IPTOS_THROUGHPUT
 0x08

	)

26 
	#IPTOS_RELIABILITY
 0x04

	)

27 
	#IPTOS_MINCOST
 0x02

	)

29 
	#IPTOS_PREC_MASK
 0xE0

	)

30 
	#IPTOS_PREC
(
tos
Ë(—os)&
IPTOS_PREC_MASK
)

	)

31 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

32 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

33 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

34 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

35 
	#IPTOS_PREC_FLASH
 0x60

	)

36 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

37 
	#IPTOS_PREC_PRIORITY
 0x20

	)

38 
	#IPTOS_PREC_ROUTINE
 0x00

	)

42 
	#IPOPT_COPY
 0x80

	)

43 
	#IPOPT_CLASS_MASK
 0x60

	)

44 
	#IPOPT_NUMBER_MASK
 0x1f

	)

46 
	#IPOPT_COPIED
(
o
Ë((o)&
IPOPT_COPY
)

	)

47 
	#IPOPT_CLASS
(
o
Ë((o)&
IPOPT_CLASS_MASK
)

	)

48 
	#IPOPT_NUMBER
(
o
Ë((o)&
IPOPT_NUMBER_MASK
)

	)

50 
	#IPOPT_CONTROL
 0x00

	)

51 
	#IPOPT_RESERVED1
 0x20

	)

52 
	#IPOPT_MEASUREMENT
 0x40

	)

53 
	#IPOPT_RESERVED2
 0x60

	)

55 
	#IPOPT_END
 (0 |
IPOPT_CONTROL
)

	)

56 
	#IPOPT_NOOP
 (1 |
IPOPT_CONTROL
)

	)

57 
	#IPOPT_SEC
 (2 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

58 
	#IPOPT_LSRR
 (3 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

59 
	#IPOPT_TIMESTAMP
 (4 |
IPOPT_MEASUREMENT
)

	)

60 
	#IPOPT_CIPSO
 (6 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

61 
	#IPOPT_RR
 (7 |
IPOPT_CONTROL
)

	)

62 
	#IPOPT_SID
 (8 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

63 
	#IPOPT_SSRR
 (9 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

64 
	#IPOPT_RA
 (20|
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

66 
	#IPVERSION
 4

	)

67 
	#MAXTTL
 255

	)

68 
	#IPDEFTTL
 64

	)

70 
	#IPOPT_OPTVAL
 0

	)

71 
	#IPOPT_OLEN
 1

	)

72 
	#IPOPT_OFFSET
 2

	)

73 
	#IPOPT_MINOFF
 4

	)

74 
	#MAX_IPOPTLEN
 40

	)

75 
	#IPOPT_NOP
 
IPOPT_NOOP


	)

76 
	#IPOPT_EOL
 
IPOPT_END


	)

77 
	#IPOPT_TS
 
IPOPT_TIMESTAMP


	)

79 
	#IPOPT_TS_TSONLY
 0

	)

80 
	#IPOPT_TS_TSANDADDR
 1

	)

81 
	#IPOPT_TS_PRESPEC
 3

	)

83 
	#IPV4_BEET_PHMAXLEN
 8

	)

85 
	sùhdr
 {

86 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

87 
__u8
 
	mihl
:4,

88 
	mvîsi⁄
:4;

89 #ñi‡
deföed
 (
__BIG_ENDIAN_BITFIELD
)

90 
__u8
 
	mvîsi⁄
:4,

91 
	mihl
:4;

95 
__u8
 
	mtos
;

96 
__be16
 
	mtŸ_Àn
;

97 
__be16
 
	mid
;

98 
__be16
 
	m‰ag_off
;

99 
__u8
 
	mâl
;

100 
__u8
 
	m¥Ÿocﬁ
;

101 
__sum16
 
	mcheck
;

102 
__be32
 
	mßddr
;

103 
__be32
 
	mdaddr
;

108 
	sù_auth_hdr
 {

109 
__u8
 
	m√xthdr
;

110 
__u8
 
	mhdæí
;

111 
__be16
 
	mª£rved
;

112 
__be32
 
	m•i
;

113 
__be32
 
	m£q_no
;

114 
__u8
 
	mauth_d©a
[0];

117 
	sù_e•_hdr
 {

118 
__be32
 
	m•i
;

119 
__be32
 
	m£q_no
;

120 
__u8
 
	míc_d©a
[0];

123 
	sù_comp_hdr
 {

124 
__u8
 
	m√xthdr
;

125 
__u8
 
	mÊags
;

126 
__be16
 
	m˝i
;

129 
	sù_bìt_phdr
 {

130 
__u8
 
	m√xthdr
;

131 
__u8
 
	mhdæí
;

132 
__u8
 
	m∑dÀn
;

133 
__u8
 
	mª£rved
;

139 
	mIPV4_DEVCONF_FORWARDING
=1,

140 
	mIPV4_DEVCONF_MC_FORWARDING
,

141 
	mIPV4_DEVCONF_PROXY_ARP
,

142 
	mIPV4_DEVCONF_ACCEPT_REDIRECTS
,

143 
	mIPV4_DEVCONF_SECURE_REDIRECTS
,

144 
	mIPV4_DEVCONF_SEND_REDIRECTS
,

145 
	mIPV4_DEVCONF_SHARED_MEDIA
,

146 
	mIPV4_DEVCONF_RP_FILTER
,

147 
	mIPV4_DEVCONF_ACCEPT_SOURCE_ROUTE
,

148 
	mIPV4_DEVCONF_BOOTP_RELAY
,

149 
	mIPV4_DEVCONF_LOG_MARTIANS
,

150 
	mIPV4_DEVCONF_TAG
,

151 
	mIPV4_DEVCONF_ARPFILTER
,

152 
	mIPV4_DEVCONF_MEDIUM_ID
,

153 
	mIPV4_DEVCONF_NOXFRM
,

154 
	mIPV4_DEVCONF_NOPOLICY
,

155 
	mIPV4_DEVCONF_FORCE_IGMP_VERSION
,

156 
	mIPV4_DEVCONF_ARP_ANNOUNCE
,

157 
	mIPV4_DEVCONF_ARP_IGNORE
,

158 
	mIPV4_DEVCONF_PROMOTE_SECONDARIES
,

159 
	mIPV4_DEVCONF_ARP_ACCEPT
,

160 
	mIPV4_DEVCONF_ARP_NOTIFY
,

161 
	mIPV4_DEVCONF_ACCEPT_LOCAL
,

162 
	mIPV4_DEVCONF_SRC_VMARK
,

163 
	mIPV4_DEVCONF_PROXY_ARP_PVLAN
,

164 
	mIPV4_DEVCONF_ROUTE_LOCALNET
,

165 
	mIPV4_DEVCONF_IGMPV2_UNSOLICITED_REPORT_INTERVAL
,

166 
	mIPV4_DEVCONF_IGMPV3_UNSOLICITED_REPORT_INTERVAL
,

167 
	mIPV4_DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN
,

168 
	m__IPV4_DEVCONF_MAX


171 
	#IPV4_DEVCONF_MAX
 (
__IPV4_DEVCONF_MAX
 - 1)

	)

	@/usr/include/linux/ipv6.h

1 #i‚de‡
_IPV6_H


2 
	#_IPV6_H


	)

4 
	~<löux/libc-com∑t.h
>

5 
	~<löux/ty≥s.h
>

6 
	~<löux/ö6.h
>

7 
	~<asm/byã‹dî.h
>

11 
	#IPV6_MIN_MTU
 1280

	)

19 #i‡
__UAPI_DEF_IN6_PKTINFO


20 
	sö6_pktöfo
 {

21 
ö6_addr
 
	mùi6_addr
;

22 
	mùi6_ifödex
;

26 #i‡
__UAPI_DEF_IP6_MTUINFO


27 
	sù6_mtuöfo
 {

28 
sockaddr_ö6
 
	mù6m_addr
;

29 
__u32
 
	mù6m_mtu
;

33 
	sö6_i‰eq
 {

34 
ö6_addr
 
	mi‰6_addr
;

35 
__u32
 
	mi‰6_¥efixÀn
;

36 
	mi‰6_ifödex
;

39 
	#IPV6_SRCRT_STRICT
 0x01

	)

40 
	#IPV6_SRCRT_TYPE_0
 0

	)

41 
	#IPV6_SRCRT_TYPE_2
 2

	)

46 
	sùv6_π_hdr
 {

47 
__u8
 
	m√xthdr
;

48 
__u8
 
	mhdæí
;

49 
__u8
 
	mty≥
;

50 
__u8
 
	m£gmíts_À·
;

59 
	sùv6_›t_hdr
 {

60 
__u8
 
	m√xthdr
;

61 
__u8
 
	mhdæí
;

65 } 
__©åibuã__
((
∑cked
));

67 
	#ùv6_de°›t_hdr
 
ùv6_›t_hdr


	)

68 
	#ùv6_h››t_hdr
 
ùv6_›t_hdr


	)

71 
	#IPV6_OPT_ROUTERALERT_MLD
 0x0000

	)

77 
	sπ0_hdr
 {

78 
ùv6_π_hdr
 
	mπ_hdr
;

79 
__u32
 
	mª£rved
;

80 
ö6_addr
 
	maddr
[0];

82 
	#π0_ty≥
 
π_hdr
.
ty≥


	)

89 
	sπ2_hdr
 {

90 
ùv6_π_hdr
 
	mπ_hdr
;

91 
__u32
 
	mª£rved
;

92 
ö6_addr
 
	maddr
;

94 
	#π2_ty≥
 
π_hdr
.
ty≥


	)

101 
	sùv6_de°›t_hao
 {

102 
__u8
 
	mty≥
;

103 
__u8
 
	mÀngth
;

104 
ö6_addr
 
	maddr
;

105 } 
__©åibuã__
((
∑cked
));

114 
	sùv6hdr
 {

115 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

116 
__u8
 
	m¥i‹ôy
:4,

117 
	mvîsi⁄
:4;

118 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

119 
__u8
 
	mvîsi⁄
:4,

120 
	m¥i‹ôy
:4;

124 
__u8
 
	mÊow_lbl
[3];

126 
__be16
 
	m∑ylﬂd_Àn
;

127 
__u8
 
	m√xthdr
;

128 
__u8
 
	mh›_limô
;

130 
ö6_addr
 
	mßddr
;

131 
ö6_addr
 
	mdaddr
;

137 
	mDEVCONF_FORWARDING
 = 0,

138 
	mDEVCONF_HOPLIMIT
,

139 
	mDEVCONF_MTU6
,

140 
	mDEVCONF_ACCEPT_RA
,

141 
	mDEVCONF_ACCEPT_REDIRECTS
,

142 
	mDEVCONF_AUTOCONF
,

143 
	mDEVCONF_DAD_TRANSMITS
,

144 
	mDEVCONF_RTR_SOLICITS
,

145 
	mDEVCONF_RTR_SOLICIT_INTERVAL
,

146 
	mDEVCONF_RTR_SOLICIT_DELAY
,

147 
	mDEVCONF_USE_TEMPADDR
,

148 
	mDEVCONF_TEMP_VALID_LFT
,

149 
	mDEVCONF_TEMP_PREFERED_LFT
,

150 
	mDEVCONF_REGEN_MAX_RETRY
,

151 
	mDEVCONF_MAX_DESYNC_FACTOR
,

152 
	mDEVCONF_MAX_ADDRESSES
,

153 
	mDEVCONF_FORCE_MLD_VERSION
,

154 
	mDEVCONF_ACCEPT_RA_DEFRTR
,

155 
	mDEVCONF_ACCEPT_RA_PINFO
,

156 
	mDEVCONF_ACCEPT_RA_RTR_PREF
,

157 
	mDEVCONF_RTR_PROBE_INTERVAL
,

158 
	mDEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN
,

159 
	mDEVCONF_PROXY_NDP
,

160 
	mDEVCONF_OPTIMISTIC_DAD
,

161 
	mDEVCONF_ACCEPT_SOURCE_ROUTE
,

162 
	mDEVCONF_MC_FORWARDING
,

163 
	mDEVCONF_DISABLE_IPV6
,

164 
	mDEVCONF_ACCEPT_DAD
,

165 
	mDEVCONF_FORCE_TLLAO
,

166 
	mDEVCONF_NDISC_NOTIFY
,

167 
	mDEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL
,

168 
	mDEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL
,

169 
	mDEVCONF_SUPPRESS_FRAG_NDISC
,

170 
	mDEVCONF_ACCEPT_RA_FROM_LOCAL
,

171 
	mDEVCONF_USE_OPTIMISTIC
,

172 
	mDEVCONF_ACCEPT_RA_MTU
,

173 
	mDEVCONF_STABLE_SECRET
,

174 
	mDEVCONF_USE_OIF_ADDRS_ONLY
,

175 
	mDEVCONF_ACCEPT_RA_MIN_HOP_LIMIT
,

176 
	mDEVCONF_IGNORE_ROUTES_WITH_LINKDOWN
,

177 
	mDEVCONF_MAX


	@/usr/include/linux/neighbour.h

1 #i‚de‡
__LINUX_NEIGHBOUR_H


2 
	#__LINUX_NEIGHBOUR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	sndmsg
 {

8 
__u8
 
	mndm_Ámûy
;

9 
__u8
 
	mndm_∑d1
;

10 
__u16
 
	mndm_∑d2
;

11 
__s32
 
	mndm_ifödex
;

12 
__u16
 
	mndm_°©e
;

13 
__u8
 
	mndm_Êags
;

14 
__u8
 
	mndm_ty≥
;

18 
	mNDA_UNSPEC
,

19 
	mNDA_DST
,

20 
	mNDA_LLADDR
,

21 
	mNDA_CACHEINFO
,

22 
	mNDA_PROBES
,

23 
	mNDA_VLAN
,

24 
	mNDA_PORT
,

25 
	mNDA_VNI
,

26 
	mNDA_IFINDEX
,

27 
	mNDA_MASTER
,

28 
	mNDA_LINK_NETNSID
,

29 
	m__NDA_MAX


32 
	#NDA_MAX
 (
__NDA_MAX
 - 1)

	)

38 
	#NTF_USE
 0x01

	)

39 
	#NTF_SELF
 0x02

	)

40 
	#NTF_MASTER
 0x04

	)

41 
	#NTF_PROXY
 0x08

	)

42 
	#NTF_EXT_LEARNED
 0x10

	)

43 
	#NTF_ROUTER
 0x80

	)

49 
	#NUD_INCOMPLETE
 0x01

	)

50 
	#NUD_REACHABLE
 0x02

	)

51 
	#NUD_STALE
 0x04

	)

52 
	#NUD_DELAY
 0x08

	)

53 
	#NUD_PROBE
 0x10

	)

54 
	#NUD_FAILED
 0x20

	)

57 
	#NUD_NOARP
 0x40

	)

58 
	#NUD_PERMANENT
 0x80

	)

59 
	#NUD_NONE
 0x00

	)

66 
	snda_ˇcheöfo
 {

67 
__u32
 
	mndm_c⁄fúmed
;

68 
__u32
 
	mndm_u£d
;

69 
__u32
 
	mndm_upd©ed
;

70 
__u32
 
	mndm_ªf˙t
;

98 
	sndt_°©s
 {

99 
__u64
 
	mndts_Ælocs
;

100 
__u64
 
	mndts_de°roys
;

101 
__u64
 
	mndts_hash_grows
;

102 
__u64
 
	mndts_ªs_Áûed
;

103 
__u64
 
	mndts_lookups
;

104 
__u64
 
	mndts_hôs
;

105 
__u64
 
	mndts_rcv_¥obes_mˇ°
;

106 
__u64
 
	mndts_rcv_¥obes_uˇ°
;

107 
__u64
 
	mndts_≥riodic_gc_runs
;

108 
__u64
 
	mndts_f‹˚d_gc_runs
;

109 
__u64
 
	mndts_èbÀ_fuŒs
;

113 
	mNDTPA_UNSPEC
,

114 
	mNDTPA_IFINDEX
,

115 
	mNDTPA_REFCNT
,

116 
	mNDTPA_REACHABLE_TIME
,

117 
	mNDTPA_BASE_REACHABLE_TIME
,

118 
	mNDTPA_RETRANS_TIME
,

119 
	mNDTPA_GC_STALETIME
,

120 
	mNDTPA_DELAY_PROBE_TIME
,

121 
	mNDTPA_QUEUE_LEN
,

122 
	mNDTPA_APP_PROBES
,

123 
	mNDTPA_UCAST_PROBES
,

124 
	mNDTPA_MCAST_PROBES
,

125 
	mNDTPA_ANYCAST_DELAY
,

126 
	mNDTPA_PROXY_DELAY
,

127 
	mNDTPA_PROXY_QLEN
,

128 
	mNDTPA_LOCKTIME
,

129 
	mNDTPA_QUEUE_LENBYTES
,

130 
	mNDTPA_MCAST_REPROBES
,

131 
	m__NDTPA_MAX


133 
	#NDTPA_MAX
 (
__NDTPA_MAX
 - 1)

	)

135 
	sndtmsg
 {

136 
__u8
 
	mndtm_Ámûy
;

137 
__u8
 
	mndtm_∑d1
;

138 
__u16
 
	mndtm_∑d2
;

141 
	sndt_c⁄fig
 {

142 
__u16
 
	mndtc_key_Àn
;

143 
__u16
 
	mndtc_íåy_size
;

144 
__u32
 
	mndtc_íåõs
;

145 
__u32
 
	mndtc_œ°_Êush
;

146 
__u32
 
	mndtc_œ°_ønd
;

147 
__u32
 
	mndtc_hash_∫d
;

148 
__u32
 
	mndtc_hash_mask
;

149 
__u32
 
	mndtc_hash_chaö_gc
;

150 
__u32
 
	mndtc_¥oxy_qÀn
;

154 
	mNDTA_UNSPEC
,

155 
	mNDTA_NAME
,

156 
	mNDTA_THRESH1
,

157 
	mNDTA_THRESH2
,

158 
	mNDTA_THRESH3
,

159 
	mNDTA_CONFIG
,

160 
	mNDTA_PARMS
,

161 
	mNDTA_STATS
,

162 
	mNDTA_GC_INTERVAL
,

163 
	m__NDTA_MAX


165 
	#NDTA_MAX
 (
__NDTA_MAX
 - 1)

	)

	@/usr/include/linux/netdevice.h

25 #i‚de‡
_LINUX_NETDEVICE_H


26 
	#_LINUX_NETDEVICE_H


	)

28 
	~<löux/if.h
>

29 
	~<löux/if_ëhî.h
>

30 
	~<löux/if_∑ckë.h
>

31 
	~<löux/if_lök.h
>

34 
	#MAX_ADDR_LEN
 32

	)

37 
	#INIT_NETDEV_GROUP
 0

	)

41 
	#NET_NAME_UNKNOWN
 0

	)

42 
	#NET_NAME_ENUM
 1

	)

43 
	#NET_NAME_PREDICTABLE
 2

	)

44 
	#NET_NAME_USER
 3

	)

45 
	#NET_NAME_RENAMED
 4

	)

49 
	mIF_PORT_UNKNOWN
 = 0,

50 
	mIF_PORT_10BASE2
,

51 
	mIF_PORT_10BASET
,

52 
	mIF_PORT_AUI
,

53 
	mIF_PORT_100BASET
,

54 
	mIF_PORT_100BASETX
,

55 
	mIF_PORT_100BASEFX


59 
	#NET_ADDR_PERM
 0

	)

60 
	#NET_ADDR_RANDOM
 1

	)

61 
	#NET_ADDR_STOLEN
 2

	)

62 
	#NET_ADDR_SET
 3

	)

	@/usr/include/linux/netfilter.h

1 #i‚de‡
__LINUX_NETFILTER_H


2 
	#__LINUX_NETFILTER_H


	)

4 
	~<löux/ty≥s.h
>

6 
	~<löux/sys˘l.h
>

7 
	~<löux/ö.h
>

8 
	~<löux/ö6.h
>

11 
	#NF_DROP
 0

	)

12 
	#NF_ACCEPT
 1

	)

13 
	#NF_STOLEN
 2

	)

14 
	#NF_QUEUE
 3

	)

15 
	#NF_REPEAT
 4

	)

16 
	#NF_STOP
 5

	)

17 
	#NF_MAX_VERDICT
 
NF_STOP


	)

22 
	#NF_VERDICT_MASK
 0x000000ff

	)

25 
	#NF_VERDICT_FLAG_QUEUE_BYPASS
 0x00008000

	)

28 
	#NF_VERDICT_QMASK
 0xffff0000

	)

29 
	#NF_VERDICT_QBITS
 16

	)

31 
	#NF_QUEUE_NR
(
x
Ë((((xË<< 16Ë& 
NF_VERDICT_QMASK
Ë| 
NF_QUEUE
)

	)

33 
	#NF_DROP_ERR
(
x
Ë(((-xË<< 16Ë| 
NF_DROP
)

	)

38 
	#NFC_UNKNOWN
 0x4000

	)

39 
	#NFC_ALTERED
 0x8000

	)

42 
	#NF_VERDICT_BITS
 16

	)

44 
	enf_öë_hooks
 {

45 
	mNF_INET_PRE_ROUTING
,

46 
	mNF_INET_LOCAL_IN
,

47 
	mNF_INET_FORWARD
,

48 
	mNF_INET_LOCAL_OUT
,

49 
	mNF_INET_POST_ROUTING
,

50 
	mNF_INET_NUMHOOKS


53 
	enf_dev_hooks
 {

54 
	mNF_NETDEV_INGRESS
,

55 
	mNF_NETDEV_NUMHOOKS


59 
	mNFPROTO_UNSPEC
 = 0,

60 
	mNFPROTO_INET
 = 1,

61 
	mNFPROTO_IPV4
 = 2,

62 
	mNFPROTO_ARP
 = 3,

63 
	mNFPROTO_NETDEV
 = 5,

64 
	mNFPROTO_BRIDGE
 = 7,

65 
	mNFPROTO_IPV6
 = 10,

66 
	mNFPROTO_DECNET
 = 12,

67 
	mNFPROTO_NUMPROTO
,

70 
	unf_öë_addr
 {

71 
__u32
 
	mÆl
[4];

72 
__be32
 
	mù
;

73 
__be32
 
	mù6
[4];

74 
ö_addr
 
	mö
;

75 
ö6_addr
 
	mö6
;

	@/usr/include/linux/netfilter/nf_conntrack_common.h

1 #i‚de‡
_NF_CONNTRACK_COMMON_H


2 
	#_NF_CONNTRACK_COMMON_H


	)

6 
	eù_c⁄¡øck_öfo
 {

8 
	mIP_CT_ESTABLISHED
,

12 
	mIP_CT_RELATED
,

16 
	mIP_CT_NEW
,

19 
	mIP_CT_IS_REPLY
,

21 
	mIP_CT_ESTABLISHED_REPLY
 = 
IP_CT_ESTABLISHED
 + 
IP_CT_IS_REPLY
,

22 
	mIP_CT_RELATED_REPLY
 = 
IP_CT_RELATED
 + 
IP_CT_IS_REPLY
,

23 
	mIP_CT_NEW_REPLY
 = 
IP_CT_NEW
 + 
IP_CT_IS_REPLY
,

25 
	mIP_CT_NUMBER
 = 
IP_CT_IS_REPLY
 * 2 - 1

28 
	#NF_CT_STATE_INVALID_BIT
 (1 << 0)

	)

29 
	#NF_CT_STATE_BIT
(
˘öfo
Ë(1 << ((˘öfoË% 
IP_CT_IS_REPLY
 + 1))

	)

30 
	#NF_CT_STATE_UNTRACKED_BIT
 (1 << (
IP_CT_NUMBER
 + 1))

	)

33 
	eù_c⁄¡øck_°©us
 {

35 
	mIPS_EXPECTED_BIT
 = 0,

36 
	mIPS_EXPECTED
 = (1 << 
IPS_EXPECTED_BIT
),

39 
	mIPS_SEEN_REPLY_BIT
 = 1,

40 
	mIPS_SEEN_REPLY
 = (1 << 
IPS_SEEN_REPLY_BIT
),

43 
	mIPS_ASSURED_BIT
 = 2,

44 
	mIPS_ASSURED
 = (1 << 
IPS_ASSURED_BIT
),

47 
	mIPS_CONFIRMED_BIT
 = 3,

48 
	mIPS_CONFIRMED
 = (1 << 
IPS_CONFIRMED_BIT
),

51 
	mIPS_SRC_NAT_BIT
 = 4,

52 
	mIPS_SRC_NAT
 = (1 << 
IPS_SRC_NAT_BIT
),

55 
	mIPS_DST_NAT_BIT
 = 5,

56 
	mIPS_DST_NAT
 = (1 << 
IPS_DST_NAT_BIT
),

59 
	mIPS_NAT_MASK
 = (
IPS_DST_NAT
 | 
IPS_SRC_NAT
),

62 
	mIPS_SEQ_ADJUST_BIT
 = 6,

63 
	mIPS_SEQ_ADJUST
 = (1 << 
IPS_SEQ_ADJUST_BIT
),

66 
	mIPS_SRC_NAT_DONE_BIT
 = 7,

67 
	mIPS_SRC_NAT_DONE
 = (1 << 
IPS_SRC_NAT_DONE_BIT
),

69 
	mIPS_DST_NAT_DONE_BIT
 = 8,

70 
	mIPS_DST_NAT_DONE
 = (1 << 
IPS_DST_NAT_DONE_BIT
),

73 
	mIPS_NAT_DONE_MASK
 = (
IPS_DST_NAT_DONE
 | 
IPS_SRC_NAT_DONE
),

76 
	mIPS_DYING_BIT
 = 9,

77 
	mIPS_DYING
 = (1 << 
IPS_DYING_BIT
),

80 
	mIPS_FIXED_TIMEOUT_BIT
 = 10,

81 
	mIPS_FIXED_TIMEOUT
 = (1 << 
IPS_FIXED_TIMEOUT_BIT
),

84 
	mIPS_TEMPLATE_BIT
 = 11,

85 
	mIPS_TEMPLATE
 = (1 << 
IPS_TEMPLATE_BIT
),

88 
	mIPS_UNTRACKED_BIT
 = 12,

89 
	mIPS_UNTRACKED
 = (1 << 
IPS_UNTRACKED_BIT
),

92 
	mIPS_HELPER_BIT
 = 13,

93 
	mIPS_HELPER
 = (1 << 
IPS_HELPER_BIT
),

97 
	eù_c⁄¡øck_evíts
 {

98 
	mIPCT_NEW
,

99 
	mIPCT_RELATED
,

100 
	mIPCT_DESTROY
,

101 
	mIPCT_REPLY
,

102 
	mIPCT_ASSURED
,

103 
	mIPCT_PROTOINFO
,

104 
	mIPCT_HELPER
,

105 
	mIPCT_MARK
,

106 
	mIPCT_SEQADJ
,

107 
	mIPCT_NATSEQADJ
 = 
IPCT_SEQADJ
,

108 
	mIPCT_SECMARK
,

109 
	mIPCT_LABEL
,

112 
	eù_c⁄¡øck_ex≥˘_evíts
 {

113 
	mIPEXP_NEW
,

114 
	mIPEXP_DESTROY
,

118 
	#NF_CT_EXPECT_PERMANENT
 0x1

	)

119 
	#NF_CT_EXPECT_INACTIVE
 0x2

	)

120 
	#NF_CT_EXPECT_USERSPACE
 0x4

	)

	@/usr/include/linux/netfilter/nf_conntrack_tcp.h

1 #i‚de‡
_NF_CONNTRACK_TCP_H


2 
	#_NF_CONNTRACK_TCP_H


	)

5 
	~<löux/ty≥s.h
>

8 
	et˝_c⁄¡øck
 {

9 
	mTCP_CONNTRACK_NONE
,

10 
	mTCP_CONNTRACK_SYN_SENT
,

11 
	mTCP_CONNTRACK_SYN_RECV
,

12 
	mTCP_CONNTRACK_ESTABLISHED
,

13 
	mTCP_CONNTRACK_FIN_WAIT
,

14 
	mTCP_CONNTRACK_CLOSE_WAIT
,

15 
	mTCP_CONNTRACK_LAST_ACK
,

16 
	mTCP_CONNTRACK_TIME_WAIT
,

17 
	mTCP_CONNTRACK_CLOSE
,

18 
	mTCP_CONNTRACK_LISTEN
,

19 
	#TCP_CONNTRACK_SYN_SENT2
 
TCP_CONNTRACK_LISTEN


	)

20 
	mTCP_CONNTRACK_MAX
,

21 
	mTCP_CONNTRACK_IGNORE
,

22 
	mTCP_CONNTRACK_RETRANS
,

23 
	mTCP_CONNTRACK_UNACK
,

24 
	mTCP_CONNTRACK_TIMEOUT_MAX


28 
	#IP_CT_TCP_FLAG_WINDOW_SCALE
 0x01

	)

31 
	#IP_CT_TCP_FLAG_SACK_PERM
 0x02

	)

34 
	#IP_CT_TCP_FLAG_CLOSE_INIT
 0x04

	)

37 
	#IP_CT_TCP_FLAG_BE_LIBERAL
 0x08

	)

40 
	#IP_CT_TCP_FLAG_DATA_UNACKNOWLEDGED
 0x10

	)

43 
	#IP_CT_TCP_FLAG_MAXACK_SET
 0x20

	)

46 
	#IP_CT_EXP_CHALLENGE_ACK
 0x40

	)

48 
	snf_˘_t˝_Êags
 {

49 
__u8
 
	mÊags
;

50 
__u8
 
	mmask
;

	@/usr/include/linux/netfilter/nfnetlink.h

1 #i‚de‡
_NFNETLINK_H


2 
	#_NFNETLINK_H


	)

3 
	~<löux/ty≥s.h
>

4 
	~<löux/√tfûãr/n‚ëlök_com∑t.h
>

6 
	en‚ëlök_groups
 {

7 
	mNFNLGRP_NONE
,

8 
	#NFNLGRP_NONE
 
NFNLGRP_NONE


	)

9 
	mNFNLGRP_CONNTRACK_NEW
,

10 
	#NFNLGRP_CONNTRACK_NEW
 
NFNLGRP_CONNTRACK_NEW


	)

11 
	mNFNLGRP_CONNTRACK_UPDATE
,

12 
	#NFNLGRP_CONNTRACK_UPDATE
 
NFNLGRP_CONNTRACK_UPDATE


	)

13 
	mNFNLGRP_CONNTRACK_DESTROY
,

14 
	#NFNLGRP_CONNTRACK_DESTROY
 
NFNLGRP_CONNTRACK_DESTROY


	)

15 
	mNFNLGRP_CONNTRACK_EXP_NEW
,

16 
	#NFNLGRP_CONNTRACK_EXP_NEW
 
NFNLGRP_CONNTRACK_EXP_NEW


	)

17 
	mNFNLGRP_CONNTRACK_EXP_UPDATE
,

18 
	#NFNLGRP_CONNTRACK_EXP_UPDATE
 
NFNLGRP_CONNTRACK_EXP_UPDATE


	)

19 
	mNFNLGRP_CONNTRACK_EXP_DESTROY
,

20 
	#NFNLGRP_CONNTRACK_EXP_DESTROY
 
NFNLGRP_CONNTRACK_EXP_DESTROY


	)

21 
	mNFNLGRP_NFTABLES
,

22 
	#NFNLGRP_NFTABLES
 
NFNLGRP_NFTABLES


	)

23 
	mNFNLGRP_ACCT_QUOTA
,

24 
	#NFNLGRP_ACCT_QUOTA
 
NFNLGRP_ACCT_QUOTA


	)

25 
	m__NFNLGRP_MAX
,

27 
	#NFNLGRP_MAX
 (
__NFNLGRP_MAX
 - 1)

	)

31 
	snfgímsg
 {

32 
__u8
 
	mnfgí_Ámûy
;

33 
__u8
 
	mvîsi⁄
;

34 
__be16
 
	mªs_id
;

37 
	#NFNETLINK_V0
 0

	)

43 
	#NFNL_SUBSYS_ID
(
x
Ë((x & 0xff00Ë>> 8)

	)

44 
	#NFNL_MSG_TYPE
(
x
Ë(x & 0x00ff)

	)

48 
	#NFNL_SUBSYS_NONE
 0

	)

49 
	#NFNL_SUBSYS_CTNETLINK
 1

	)

50 
	#NFNL_SUBSYS_CTNETLINK_EXP
 2

	)

51 
	#NFNL_SUBSYS_QUEUE
 3

	)

52 
	#NFNL_SUBSYS_ULOG
 4

	)

53 
	#NFNL_SUBSYS_OSF
 5

	)

54 
	#NFNL_SUBSYS_IPSET
 6

	)

55 
	#NFNL_SUBSYS_ACCT
 7

	)

56 
	#NFNL_SUBSYS_CTNETLINK_TIMEOUT
 8

	)

57 
	#NFNL_SUBSYS_CTHELPER
 9

	)

58 
	#NFNL_SUBSYS_NFTABLES
 10

	)

59 
	#NFNL_SUBSYS_NFT_COMPAT
 11

	)

60 
	#NFNL_SUBSYS_COUNT
 12

	)

63 
	#NFNL_MSG_BATCH_BEGIN
 
NLMSG_MIN_TYPE


	)

64 
	#NFNL_MSG_BATCH_END
 
NLMSG_MIN_TYPE
+1

	)

	@/usr/include/linux/netfilter/nfnetlink_compat.h

1 #i‚de‡
_NFNETLINK_COMPAT_H


2 
	#_NFNETLINK_COMPAT_H


	)

4 
	~<löux/ty≥s.h
>

9 
	#NF_NETLINK_CONNTRACK_NEW
 0x00000001

	)

10 
	#NF_NETLINK_CONNTRACK_UPDATE
 0x00000002

	)

11 
	#NF_NETLINK_CONNTRACK_DESTROY
 0x00000004

	)

12 
	#NF_NETLINK_CONNTRACK_EXP_NEW
 0x00000008

	)

13 
	#NF_NETLINK_CONNTRACK_EXP_UPDATE
 0x00000010

	)

14 
	#NF_NETLINK_CONNTRACK_EXP_DESTROY
 0x00000020

	)

23 
	snÁâr
 {

24 
__u16
 
	mnÁ_Àn
;

25 
__u16
 
	mnÁ_ty≥
;

32 
	#NFNL_NFA_NEST
 0x8000

	)

33 
	#NFA_TYPE
(
©å
Ë(◊âr)->
nÁ_ty≥
 & 0x7fff)

	)

35 
	#NFA_ALIGNTO
 4

	)

36 
	#NFA_ALIGN
(
Àn
Ë((÷íË+ 
NFA_ALIGNTO
 - 1Ë& ~(NFA_ALIGNTO - 1))

	)

37 
	#NFA_OK
(
nÁ
,
Àn
Ë(÷íË> 0 && (nÁ)->
nÁ_Àn
 >(
nÁâr
) \

38 && (
nÁ
)->
nÁ_Àn
 <(
Àn
))

	)

39 
	#NFA_NEXT
(
nÁ
,
©åÀn
Ë(◊âæíË-
	`NFA_ALIGN
(“Á)->
nÁ_Àn
), \

40 (
nÁâr
 *)(((*)(
nÁ
)Ë+ 
	`NFA_ALIGN
(“Á)->
nÁ_Àn
)))

	)

41 
	#NFA_LENGTH
(
Àn
Ë(
	`NFA_ALIGN
((
nÁâr
)Ë+ (Àn))

	)

42 
	#NFA_SPACE
(
Àn
Ë
	`NFA_ALIGN
(
	`NFA_LENGTH
÷í))

	)

43 
	#NFA_DATA
(
nÁ
Ë((*)(((*)“Á)Ë+ 
	`NFA_LENGTH
(0)))

	)

44 
	#NFA_PAYLOAD
(
nÁ
Ë(()(“Á)->
nÁ_Àn
Ë- 
	`NFA_LENGTH
(0))

	)

45 
	#NFA_NEST
(
skb
, 
ty≥
) \

46 ({ 
nÁâr
 *
__°¨t
 = (nÁâ∏*)
	`skb_èû_poöãr
(
skb
); \

47 
	`NFA_PUT
(
skb
, (
NFNL_NFA_NEST
 | 
ty≥
), 0, 
NULL
); \

48 
__°¨t
; })

	)

49 
	#NFA_NEST_END
(
skb
, 
°¨t
) \

50 ({ (
°¨t
)->
nÁ_Àn
 = 
	`skb_èû_poöãr
(
skb
) - (*)(start); \

51 (
skb
)->
Àn
; })

	)

52 
	#NFA_NEST_CANCEL
(
skb
, 
°¨t
) \

53 ({ i‡(
°¨t
) \

54 
	`skb_åim
(
skb
, (*Ë(
°¨t
Ë- (skb)->
d©a
); \

55 -1; })

	)

57 
	#NFM_NFA
(
n
Ë((
nÁâr
 *)(((*)(n)) \

58 + 
	`NLMSG_ALIGN
((
nfgímsg
))))

	)

59 
	#NFM_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“, (
nfgímsg
))

	)

	@/usr/include/linux/netfilter/nfnetlink_conntrack.h

1 #i‚de‡
_IPCONNTRACK_NETLINK_H


2 
	#_IPCONNTRACK_NETLINK_H


	)

3 
	~<löux/√tfûãr/n‚ëlök.h
>

5 
	e˙é_msg_ty≥s
 {

6 
	mIPCTNL_MSG_CT_NEW
,

7 
	mIPCTNL_MSG_CT_GET
,

8 
	mIPCTNL_MSG_CT_DELETE
,

9 
	mIPCTNL_MSG_CT_GET_CTRZERO
,

10 
	mIPCTNL_MSG_CT_GET_STATS_CPU
,

11 
	mIPCTNL_MSG_CT_GET_STATS
,

12 
	mIPCTNL_MSG_CT_GET_DYING
,

13 
	mIPCTNL_MSG_CT_GET_UNCONFIRMED
,

15 
	mIPCTNL_MSG_MAX


18 
	e˘∆_exp_msg_ty≥s
 {

19 
	mIPCTNL_MSG_EXP_NEW
,

20 
	mIPCTNL_MSG_EXP_GET
,

21 
	mIPCTNL_MSG_EXP_DELETE
,

22 
	mIPCTNL_MSG_EXP_GET_STATS_CPU
,

24 
	mIPCTNL_MSG_EXP_MAX


28 
	e˘©å_ty≥
 {

29 
	mCTA_UNSPEC
,

30 
	mCTA_TUPLE_ORIG
,

31 
	mCTA_TUPLE_REPLY
,

32 
	mCTA_STATUS
,

33 
	mCTA_PROTOINFO
,

34 
	mCTA_HELP
,

35 
	mCTA_NAT_SRC
,

36 
	#CTA_NAT
 
CTA_NAT_SRC


	)

37 
	mCTA_TIMEOUT
,

38 
	mCTA_MARK
,

39 
	mCTA_COUNTERS_ORIG
,

40 
	mCTA_COUNTERS_REPLY
,

41 
	mCTA_USE
,

42 
	mCTA_ID
,

43 
	mCTA_NAT_DST
,

44 
	mCTA_TUPLE_MASTER
,

45 
	mCTA_SEQ_ADJ_ORIG
,

46 
	mCTA_NAT_SEQ_ADJ_ORIG
 = 
CTA_SEQ_ADJ_ORIG
,

47 
	mCTA_SEQ_ADJ_REPLY
,

48 
	mCTA_NAT_SEQ_ADJ_REPLY
 = 
CTA_SEQ_ADJ_REPLY
,

49 
	mCTA_SECMARK
,

50 
	mCTA_ZONE
,

51 
	mCTA_SECCTX
,

52 
	mCTA_TIMESTAMP
,

53 
	mCTA_MARK_MASK
,

54 
	mCTA_LABELS
,

55 
	mCTA_LABELS_MASK
,

56 
	m__CTA_MAX


58 
	#CTA_MAX
 (
__CTA_MAX
 - 1)

	)

60 
	e˘©å_tu∂e
 {

61 
	mCTA_TUPLE_UNSPEC
,

62 
	mCTA_TUPLE_IP
,

63 
	mCTA_TUPLE_PROTO
,

64 
	mCTA_TUPLE_ZONE
,

65 
	m__CTA_TUPLE_MAX


67 
	#CTA_TUPLE_MAX
 (
__CTA_TUPLE_MAX
 - 1)

	)

69 
	e˘©å_ù
 {

70 
	mCTA_IP_UNSPEC
,

71 
	mCTA_IP_V4_SRC
,

72 
	mCTA_IP_V4_DST
,

73 
	mCTA_IP_V6_SRC
,

74 
	mCTA_IP_V6_DST
,

75 
	m__CTA_IP_MAX


77 
	#CTA_IP_MAX
 (
__CTA_IP_MAX
 - 1)

	)

79 
	e˘©å_l4¥Ÿo
 {

80 
	mCTA_PROTO_UNSPEC
,

81 
	mCTA_PROTO_NUM
,

82 
	mCTA_PROTO_SRC_PORT
,

83 
	mCTA_PROTO_DST_PORT
,

84 
	mCTA_PROTO_ICMP_ID
,

85 
	mCTA_PROTO_ICMP_TYPE
,

86 
	mCTA_PROTO_ICMP_CODE
,

87 
	mCTA_PROTO_ICMPV6_ID
,

88 
	mCTA_PROTO_ICMPV6_TYPE
,

89 
	mCTA_PROTO_ICMPV6_CODE
,

90 
	m__CTA_PROTO_MAX


92 
	#CTA_PROTO_MAX
 (
__CTA_PROTO_MAX
 - 1)

	)

94 
	e˘©å_¥Ÿoöfo
 {

95 
	mCTA_PROTOINFO_UNSPEC
,

96 
	mCTA_PROTOINFO_TCP
,

97 
	mCTA_PROTOINFO_DCCP
,

98 
	mCTA_PROTOINFO_SCTP
,

99 
	m__CTA_PROTOINFO_MAX


101 
	#CTA_PROTOINFO_MAX
 (
__CTA_PROTOINFO_MAX
 - 1)

	)

103 
	e˘©å_¥Ÿoöfo_t˝
 {

104 
	mCTA_PROTOINFO_TCP_UNSPEC
,

105 
	mCTA_PROTOINFO_TCP_STATE
,

106 
	mCTA_PROTOINFO_TCP_WSCALE_ORIGINAL
,

107 
	mCTA_PROTOINFO_TCP_WSCALE_REPLY
,

108 
	mCTA_PROTOINFO_TCP_FLAGS_ORIGINAL
,

109 
	mCTA_PROTOINFO_TCP_FLAGS_REPLY
,

110 
	m__CTA_PROTOINFO_TCP_MAX


112 
	#CTA_PROTOINFO_TCP_MAX
 (
__CTA_PROTOINFO_TCP_MAX
 - 1)

	)

114 
	e˘©å_¥Ÿoöfo_dc˝
 {

115 
	mCTA_PROTOINFO_DCCP_UNSPEC
,

116 
	mCTA_PROTOINFO_DCCP_STATE
,

117 
	mCTA_PROTOINFO_DCCP_ROLE
,

118 
	mCTA_PROTOINFO_DCCP_HANDSHAKE_SEQ
,

119 
	m__CTA_PROTOINFO_DCCP_MAX
,

121 
	#CTA_PROTOINFO_DCCP_MAX
 (
__CTA_PROTOINFO_DCCP_MAX
 - 1)

	)

123 
	e˘©å_¥Ÿoöfo_s˘p
 {

124 
	mCTA_PROTOINFO_SCTP_UNSPEC
,

125 
	mCTA_PROTOINFO_SCTP_STATE
,

126 
	mCTA_PROTOINFO_SCTP_VTAG_ORIGINAL
,

127 
	mCTA_PROTOINFO_SCTP_VTAG_REPLY
,

128 
	m__CTA_PROTOINFO_SCTP_MAX


130 
	#CTA_PROTOINFO_SCTP_MAX
 (
__CTA_PROTOINFO_SCTP_MAX
 - 1)

	)

132 
	e˘©å_cou¡îs
 {

133 
	mCTA_COUNTERS_UNSPEC
,

134 
	mCTA_COUNTERS_PACKETS
,

135 
	mCTA_COUNTERS_BYTES
,

136 
	mCTA_COUNTERS32_PACKETS
,

137 
	mCTA_COUNTERS32_BYTES
,

138 
	m__CTA_COUNTERS_MAX


140 
	#CTA_COUNTERS_MAX
 (
__CTA_COUNTERS_MAX
 - 1)

	)

142 
	e˘©å_t°amp
 {

143 
	mCTA_TIMESTAMP_UNSPEC
,

144 
	mCTA_TIMESTAMP_START
,

145 
	mCTA_TIMESTAMP_STOP
,

146 
	m__CTA_TIMESTAMP_MAX


148 
	#CTA_TIMESTAMP_MAX
 (
__CTA_TIMESTAMP_MAX
 - 1)

	)

150 
	e˘©å_«t
 {

151 
	mCTA_NAT_UNSPEC
,

152 
	mCTA_NAT_V4_MINIP
,

153 
	#CTA_NAT_MINIP
 
CTA_NAT_V4_MINIP


	)

154 
	mCTA_NAT_V4_MAXIP
,

155 
	#CTA_NAT_MAXIP
 
CTA_NAT_V4_MAXIP


	)

156 
	mCTA_NAT_PROTO
,

157 
	mCTA_NAT_V6_MINIP
,

158 
	mCTA_NAT_V6_MAXIP
,

159 
	m__CTA_NAT_MAX


161 
	#CTA_NAT_MAX
 (
__CTA_NAT_MAX
 - 1)

	)

163 
	e˘©å_¥Ÿ⁄©
 {

164 
	mCTA_PROTONAT_UNSPEC
,

165 
	mCTA_PROTONAT_PORT_MIN
,

166 
	mCTA_PROTONAT_PORT_MAX
,

167 
	m__CTA_PROTONAT_MAX


169 
	#CTA_PROTONAT_MAX
 (
__CTA_PROTONAT_MAX
 - 1)

	)

171 
	e˘©å_£qadj
 {

172 
	mCTA_SEQADJ_UNSPEC
,

173 
	mCTA_SEQADJ_CORRECTION_POS
,

174 
	mCTA_SEQADJ_OFFSET_BEFORE
,

175 
	mCTA_SEQADJ_OFFSET_AFTER
,

176 
	m__CTA_SEQADJ_MAX


178 
	#CTA_SEQADJ_MAX
 (
__CTA_SEQADJ_MAX
 - 1)

	)

180 
	e˘©å_«t£q
 {

181 
	mCTA_NAT_SEQ_UNSPEC
,

182 
	mCTA_NAT_SEQ_CORRECTION_POS
,

183 
	mCTA_NAT_SEQ_OFFSET_BEFORE
,

184 
	mCTA_NAT_SEQ_OFFSET_AFTER
,

185 
	m__CTA_NAT_SEQ_MAX


187 
	#CTA_NAT_SEQ_MAX
 (
__CTA_NAT_SEQ_MAX
 - 1)

	)

189 
	e˘©å_ex≥˘
 {

190 
	mCTA_EXPECT_UNSPEC
,

191 
	mCTA_EXPECT_MASTER
,

192 
	mCTA_EXPECT_TUPLE
,

193 
	mCTA_EXPECT_MASK
,

194 
	mCTA_EXPECT_TIMEOUT
,

195 
	mCTA_EXPECT_ID
,

196 
	mCTA_EXPECT_HELP_NAME
,

197 
	mCTA_EXPECT_ZONE
,

198 
	mCTA_EXPECT_FLAGS
,

199 
	mCTA_EXPECT_CLASS
,

200 
	mCTA_EXPECT_NAT
,

201 
	mCTA_EXPECT_FN
,

202 
	m__CTA_EXPECT_MAX


204 
	#CTA_EXPECT_MAX
 (
__CTA_EXPECT_MAX
 - 1)

	)

206 
	e˘©å_ex≥˘_«t
 {

207 
	mCTA_EXPECT_NAT_UNSPEC
,

208 
	mCTA_EXPECT_NAT_DIR
,

209 
	mCTA_EXPECT_NAT_TUPLE
,

210 
	m__CTA_EXPECT_NAT_MAX


212 
	#CTA_EXPECT_NAT_MAX
 (
__CTA_EXPECT_NAT_MAX
 - 1)

	)

214 
	e˘©å_hñp
 {

215 
	mCTA_HELP_UNSPEC
,

216 
	mCTA_HELP_NAME
,

217 
	mCTA_HELP_INFO
,

218 
	m__CTA_HELP_MAX


220 
	#CTA_HELP_MAX
 (
__CTA_HELP_MAX
 - 1)

	)

222 
	e˘©å_£c˘x
 {

223 
	mCTA_SECCTX_UNSPEC
,

224 
	mCTA_SECCTX_NAME
,

225 
	m__CTA_SECCTX_MAX


227 
	#CTA_SECCTX_MAX
 (
__CTA_SECCTX_MAX
 - 1)

	)

229 
	e˘©å_°©s_˝u
 {

230 
	mCTA_STATS_UNSPEC
,

231 
	mCTA_STATS_SEARCHED
,

232 
	mCTA_STATS_FOUND
,

233 
	mCTA_STATS_NEW
,

234 
	mCTA_STATS_INVALID
,

235 
	mCTA_STATS_IGNORE
,

236 
	mCTA_STATS_DELETE
,

237 
	mCTA_STATS_DELETE_LIST
,

238 
	mCTA_STATS_INSERT
,

239 
	mCTA_STATS_INSERT_FAILED
,

240 
	mCTA_STATS_DROP
,

241 
	mCTA_STATS_EARLY_DROP
,

242 
	mCTA_STATS_ERROR
,

243 
	mCTA_STATS_SEARCH_RESTART
,

244 
	m__CTA_STATS_MAX
,

246 
	#CTA_STATS_MAX
 (
__CTA_STATS_MAX
 - 1)

	)

248 
	e˘©å_°©s_globÆ
 {

249 
	mCTA_STATS_GLOBAL_UNSPEC
,

250 
	mCTA_STATS_GLOBAL_ENTRIES
,

251 
	m__CTA_STATS_GLOBAL_MAX
,

253 
	#CTA_STATS_GLOBAL_MAX
 (
__CTA_STATS_GLOBAL_MAX
 - 1)

	)

255 
	e˘©å_ex≥˘_°©s
 {

256 
	mCTA_STATS_EXP_UNSPEC
,

257 
	mCTA_STATS_EXP_NEW
,

258 
	mCTA_STATS_EXP_CREATE
,

259 
	mCTA_STATS_EXP_DELETE
,

260 
	m__CTA_STATS_EXP_MAX
,

262 
	#CTA_STATS_EXP_MAX
 (
__CTA_STATS_EXP_MAX
 - 1)

	)

	@/usr/include/linux/netfilter/nfnetlink_log.h

1 #i‚de‡
_NFNETLINK_LOG_H


2 
	#_NFNETLINK_LOG_H


	)

8 
	~<löux/ty≥s.h
>

9 
	~<löux/√tfûãr/n‚ëlök.h
>

11 
	enfu l_msg_ty≥s
 {

12 
	mNFULNL_MSG_PACKET
,

13 
	mNFULNL_MSG_CONFIG
,

15 
	mNFULNL_MSG_MAX


18 
	snfu l_msg_∑ckë_hdr
 {

19 
__be16
 
	mhw_¥Ÿocﬁ
;

20 
__u8
 
	mhook
;

21 
__u8
 
	m_∑d
;

24 
	snfu l_msg_∑ckë_hw
 {

25 
__be16
 
	mhw_addæí
;

26 
__u16
 
	m_∑d
;

27 
__u8
 
	mhw_addr
[8];

30 
	snfu l_msg_∑ckë_time°amp
 {

31 
__Æig√d_be64
 
	m£c
;

32 
__Æig√d_be64
 
	mu£c
;

35 
	enfu l_©å_ty≥
 {

36 
	mNFULA_UNSPEC
,

37 
	mNFULA_PACKET_HDR
,

38 
	mNFULA_MARK
,

39 
	mNFULA_TIMESTAMP
,

40 
	mNFULA_IFINDEX_INDEV
,

41 
	mNFULA_IFINDEX_OUTDEV
,

42 
	mNFULA_IFINDEX_PHYSINDEV
,

43 
	mNFULA_IFINDEX_PHYSOUTDEV
,

44 
	mNFULA_HWADDR
,

45 
	mNFULA_PAYLOAD
,

46 
	mNFULA_PREFIX
,

47 
	mNFULA_UID
,

48 
	mNFULA_SEQ
,

49 
	mNFULA_SEQ_GLOBAL
,

50 
	mNFULA_GID
,

51 
	mNFULA_HWTYPE
,

52 
	mNFULA_HWHEADER
,

53 
	mNFULA_HWLEN
,

54 
	mNFULA_CT
,

55 
	mNFULA_CT_INFO
,

57 
	m__NFULA_MAX


59 
	#NFULA_MAX
 (
__NFULA_MAX
 - 1)

	)

61 
	enfu l_msg_c⁄fig_cmds
 {

62 
	mNFULNL_CFG_CMD_NONE
,

63 
	mNFULNL_CFG_CMD_BIND
,

64 
	mNFULNL_CFG_CMD_UNBIND
,

65 
	mNFULNL_CFG_CMD_PF_BIND
,

66 
	mNFULNL_CFG_CMD_PF_UNBIND
,

69 
	snfu l_msg_c⁄fig_cmd
 {

70 
__u8
 
	mcomm™d
;

71 } 
__©åibuã__
 ((
∑cked
));

73 
	snfu l_msg_c⁄fig_mode
 {

74 
__be32
 
	mc›y_ønge
;

75 
__u8
 
	mc›y_mode
;

76 
__u8
 
	m_∑d
;

77 } 
__©åibuã__
 ((
∑cked
));

79 
	enfu l_©å_c⁄fig
 {

80 
	mNFULA_CFG_UNSPEC
,

81 
	mNFULA_CFG_CMD
,

82 
	mNFULA_CFG_MODE
,

83 
	mNFULA_CFG_NLBUFSIZ
,

84 
	mNFULA_CFG_TIMEOUT
,

85 
	mNFULA_CFG_QTHRESH
,

86 
	mNFULA_CFG_FLAGS
,

87 
	m__NFULA_CFG_MAX


89 
	#NFULA_CFG_MAX
 (
__NFULA_CFG_MAX
 -1)

	)

91 
	#NFULNL_COPY_NONE
 0x00

	)

92 
	#NFULNL_COPY_META
 0x01

	)

93 
	#NFULNL_COPY_PACKET
 0x02

	)

96 
	#NFULNL_CFG_F_SEQ
 0x0001

	)

97 
	#NFULNL_CFG_F_SEQ_GLOBAL
 0x0002

	)

98 
	#NFULNL_CFG_F_CONNTRACK
 0x0004

	)

	@/usr/include/linux/netfilter/nfnetlink_queue.h

1 #i‚de‡
_NFNETLINK_QUEUE_H


2 
	#_NFNETLINK_QUEUE_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√tfûãr/n‚ëlök.h
>

7 
	enfq∆_msg_ty≥s
 {

8 
	mNFQNL_MSG_PACKET
,

9 
	mNFQNL_MSG_VERDICT
,

10 
	mNFQNL_MSG_CONFIG
,

11 
	mNFQNL_MSG_VERDICT_BATCH
,

13 
	mNFQNL_MSG_MAX


16 
	snfq∆_msg_∑ckë_hdr
 {

17 
__be32
 
	m∑ckë_id
;

18 
__be16
 
	mhw_¥Ÿocﬁ
;

19 
__u8
 
	mhook
;

20 } 
__©åibuã__
 ((
∑cked
));

22 
	snfq∆_msg_∑ckë_hw
 {

23 
__be16
 
	mhw_addæí
;

24 
__u16
 
	m_∑d
;

25 
__u8
 
	mhw_addr
[8];

28 
	snfq∆_msg_∑ckë_time°amp
 {

29 
__Æig√d_be64
 
	m£c
;

30 
__Æig√d_be64
 
	mu£c
;

33 
	enfq∆_©å_ty≥
 {

34 
	mNFQA_UNSPEC
,

35 
	mNFQA_PACKET_HDR
,

36 
	mNFQA_VERDICT_HDR
,

37 
	mNFQA_MARK
,

38 
	mNFQA_TIMESTAMP
,

39 
	mNFQA_IFINDEX_INDEV
,

40 
	mNFQA_IFINDEX_OUTDEV
,

41 
	mNFQA_IFINDEX_PHYSINDEV
,

42 
	mNFQA_IFINDEX_PHYSOUTDEV
,

43 
	mNFQA_HWADDR
,

44 
	mNFQA_PAYLOAD
,

45 
	mNFQA_CT
,

46 
	mNFQA_CT_INFO
,

47 
	mNFQA_CAP_LEN
,

48 
	mNFQA_SKB_INFO
,

49 
	mNFQA_EXP
,

50 
	mNFQA_UID
,

51 
	mNFQA_GID
,

52 
	mNFQA_SECCTX
,

54 
	m__NFQA_MAX


56 
	#NFQA_MAX
 (
__NFQA_MAX
 - 1)

	)

58 
	snfq∆_msg_vîdi˘_hdr
 {

59 
__be32
 
	mvîdi˘
;

60 
__be32
 
	mid
;

64 
	enfq∆_msg_c⁄fig_cmds
 {

65 
	mNFQNL_CFG_CMD_NONE
,

66 
	mNFQNL_CFG_CMD_BIND
,

67 
	mNFQNL_CFG_CMD_UNBIND
,

68 
	mNFQNL_CFG_CMD_PF_BIND
,

69 
	mNFQNL_CFG_CMD_PF_UNBIND
,

72 
	snfq∆_msg_c⁄fig_cmd
 {

73 
__u8
 
	mcomm™d
;

74 
__u8
 
	m_∑d
;

75 
__be16
 
	mpf
;

78 
	enfq∆_c⁄fig_mode
 {

79 
	mNFQNL_COPY_NONE
,

80 
	mNFQNL_COPY_META
,

81 
	mNFQNL_COPY_PACKET
,

84 
	snfq∆_msg_c⁄fig_∑øms
 {

85 
__be32
 
	mc›y_ønge
;

86 
__u8
 
	mc›y_mode
;

87 } 
__©åibuã__
 ((
∑cked
));

90 
	enfq∆_©å_c⁄fig
 {

91 
	mNFQA_CFG_UNSPEC
,

92 
	mNFQA_CFG_CMD
,

93 
	mNFQA_CFG_PARAMS
,

94 
	mNFQA_CFG_QUEUE_MAXLEN
,

95 
	mNFQA_CFG_MASK
,

96 
	mNFQA_CFG_FLAGS
,

97 
	m__NFQA_CFG_MAX


99 
	#NFQA_CFG_MAX
 (
__NFQA_CFG_MAX
-1)

	)

102 
	#NFQA_CFG_F_FAIL_OPEN
 (1 << 0)

	)

103 
	#NFQA_CFG_F_CONNTRACK
 (1 << 1)

	)

104 
	#NFQA_CFG_F_GSO
 (1 << 2)

	)

105 
	#NFQA_CFG_F_UID_GID
 (1 << 3)

	)

106 
	#NFQA_CFG_F_SECCTX
 (1 << 4)

	)

107 
	#NFQA_CFG_F_MAX
 (1 << 5)

	)

111 
	#NFQA_SKB_CSUMNOTREADY
 (1 << 0)

	)

113 
	#NFQA_SKB_GSO
 (1 << 1)

	)

115 
	#NFQA_SKB_CSUM_NOTVERIFIED
 (1 << 2)

	)

	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/kî√l.h
>

5 
	~<löux/sockë.h
>

6 
	~<löux/ty≥s.h
>

8 
	#NETLINK_ROUTE
 0

	)

9 
	#NETLINK_UNUSED
 1

	)

10 
	#NETLINK_USERSOCK
 2

	)

11 
	#NETLINK_FIREWALL
 3

	)

12 
	#NETLINK_SOCK_DIAG
 4

	)

13 
	#NETLINK_NFLOG
 5

	)

14 
	#NETLINK_XFRM
 6

	)

15 
	#NETLINK_SELINUX
 7

	)

16 
	#NETLINK_ISCSI
 8

	)

17 
	#NETLINK_AUDIT
 9

	)

18 
	#NETLINK_FIB_LOOKUP
 10

	)

19 
	#NETLINK_CONNECTOR
 11

	)

20 
	#NETLINK_NETFILTER
 12

	)

21 
	#NETLINK_IP6_FW
 13

	)

22 
	#NETLINK_DNRTMSG
 14

	)

23 
	#NETLINK_KOBJECT_UEVENT
 15

	)

24 
	#NETLINK_GENERIC
 16

	)

26 
	#NETLINK_SCSITRANSPORT
 18

	)

27 
	#NETLINK_ECRYPTFS
 19

	)

28 
	#NETLINK_RDMA
 20

	)

29 
	#NETLINK_CRYPTO
 21

	)

31 
	#NETLINK_INET_DIAG
 
NETLINK_SOCK_DIAG


	)

33 
	#MAX_LINKS
 32

	)

35 
	ssockaddr_∆
 {

36 
__kî√l_ß_Ámûy_t
 
	m∆_Ámûy
;

37 
	m∆_∑d
;

38 
__u32
 
	m∆_pid
;

39 
__u32
 
	m∆_groups
;

42 
	s∆msghdr
 {

43 
__u32
 
	m∆msg_Àn
;

44 
__u16
 
	m∆msg_ty≥
;

45 
__u16
 
	m∆msg_Êags
;

46 
__u32
 
	m∆msg_£q
;

47 
__u32
 
	m∆msg_pid
;

52 
	#NLM_F_REQUEST
 1

	)

53 
	#NLM_F_MULTI
 2

	)

54 
	#NLM_F_ACK
 4

	)

55 
	#NLM_F_ECHO
 8

	)

56 
	#NLM_F_DUMP_INTR
 16

	)

57 
	#NLM_F_DUMP_FILTERED
 32

	)

60 
	#NLM_F_ROOT
 0x100

	)

61 
	#NLM_F_MATCH
 0x200

	)

62 
	#NLM_F_ATOMIC
 0x400

	)

63 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

66 
	#NLM_F_REPLACE
 0x100

	)

67 
	#NLM_F_EXCL
 0x200

	)

68 
	#NLM_F_CREATE
 0x400

	)

69 
	#NLM_F_APPEND
 0x800

	)

80 
	#NLMSG_ALIGNTO
 4U

	)

81 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

82 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

83 
	#NLMSG_LENGTH
(
Àn
Ë(÷íË+ 
NLMSG_HDRLEN
)

	)

84 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

85 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

86 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

87 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

88 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

89 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

90 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

91 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

93 
	#NLMSG_NOOP
 0x1

	)

94 
	#NLMSG_ERROR
 0x2

	)

95 
	#NLMSG_DONE
 0x3

	)

96 
	#NLMSG_OVERRUN
 0x4

	)

98 
	#NLMSG_MIN_TYPE
 0x10

	)

100 
	s∆msgîr
 {

101 
	mîr‹
;

102 
∆msghdr
 
	mmsg
;

105 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

106 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

107 
	#NETLINK_PKTINFO
 3

	)

108 
	#NETLINK_BROADCAST_ERROR
 4

	)

109 
	#NETLINK_NO_ENOBUFS
 5

	)

110 
	#NETLINK_RX_RING
 6

	)

111 
	#NETLINK_TX_RING
 7

	)

112 
	#NETLINK_LISTEN_ALL_NSID
 8

	)

113 
	#NETLINK_LIST_MEMBERSHIPS
 9

	)

114 
	#NETLINK_CAP_ACK
 10

	)

116 
	s∆_pktöfo
 {

117 
__u32
 
	mgroup
;

120 
	s∆_mm≠_ªq
 {

121 
	mnm_block_size
;

122 
	mnm_block_ƒ
;

123 
	mnm_‰ame_size
;

124 
	mnm_‰ame_ƒ
;

127 
	s∆_mm≠_hdr
 {

128 
	mnm_°©us
;

129 
	mnm_Àn
;

130 
__u32
 
	mnm_group
;

132 
__u32
 
	mnm_pid
;

133 
__u32
 
	mnm_uid
;

134 
__u32
 
	mnm_gid
;

137 
	e∆_mm≠_°©us
 {

138 
	mNL_MMAP_STATUS_UNUSED
,

139 
	mNL_MMAP_STATUS_RESERVED
,

140 
	mNL_MMAP_STATUS_VALID
,

141 
	mNL_MMAP_STATUS_COPY
,

142 
	mNL_MMAP_STATUS_SKIP
,

145 
	#NL_MMAP_MSG_ALIGNMENT
 
NLMSG_ALIGNTO


	)

146 
	#NL_MMAP_MSG_ALIGN
(
sz
Ë
	`__ALIGN_KERNEL
(sz, 
NL_MMAP_MSG_ALIGNMENT
)

	)

147 
	#NL_MMAP_HDRLEN
 
	`NL_MMAP_MSG_ALIGN
((
∆_mm≠_hdr
))

	)

149 
	#NET_MAJOR
 36

	)

152 
	mNETLINK_UNCONNECTED
 = 0,

153 
	mNETLINK_CONNECTED
,

165 
	s∆©å
 {

166 
__u16
 
	m∆a_Àn
;

167 
__u16
 
	m∆a_ty≥
;

180 
	#NLA_F_NESTED
 (1 << 15)

	)

181 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

182 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

184 
	#NLA_ALIGNTO
 4

	)

185 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

186 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@/usr/include/linux/nl80211.h

1 #i‚de‡
__LINUX_NL80211_H


2 
	#__LINUX_NL80211_H


	)

42 
	~<löux/ty≥s.h
>

44 
	#NL80211_GENL_NAME
 "∆80211"

	)

46 
	#NL80211_MULTICAST_GROUP_CONFIG
 "c⁄fig"

	)

47 
	#NL80211_MULTICAST_GROUP_SCAN
 "sˇn"

	)

48 
	#NL80211_MULTICAST_GROUP_REG
 "ªguœt‹y"

	)

49 
	#NL80211_MULTICAST_GROUP_MLME
 "mlme"

	)

50 
	#NL80211_MULTICAST_GROUP_VENDOR
 "víd‹"

	)

51 
	#NL80211_MULTICAST_GROUP_TESTMODE
 "ã°mode"

	)

826 
	e∆80211_comm™ds
 {

828 
	mNL80211_CMD_UNSPEC
,

830 
	mNL80211_CMD_GET_WIPHY
,

831 
	mNL80211_CMD_SET_WIPHY
,

832 
	mNL80211_CMD_NEW_WIPHY
,

833 
	mNL80211_CMD_DEL_WIPHY
,

835 
	mNL80211_CMD_GET_INTERFACE
,

836 
	mNL80211_CMD_SET_INTERFACE
,

837 
	mNL80211_CMD_NEW_INTERFACE
,

838 
	mNL80211_CMD_DEL_INTERFACE
,

840 
	mNL80211_CMD_GET_KEY
,

841 
	mNL80211_CMD_SET_KEY
,

842 
	mNL80211_CMD_NEW_KEY
,

843 
	mNL80211_CMD_DEL_KEY
,

845 
	mNL80211_CMD_GET_BEACON
,

846 
	mNL80211_CMD_SET_BEACON
,

847 
	mNL80211_CMD_START_AP
,

848 
	mNL80211_CMD_NEW_BEACON
 = 
NL80211_CMD_START_AP
,

849 
	mNL80211_CMD_STOP_AP
,

850 
	mNL80211_CMD_DEL_BEACON
 = 
NL80211_CMD_STOP_AP
,

852 
	mNL80211_CMD_GET_STATION
,

853 
	mNL80211_CMD_SET_STATION
,

854 
	mNL80211_CMD_NEW_STATION
,

855 
	mNL80211_CMD_DEL_STATION
,

857 
	mNL80211_CMD_GET_MPATH
,

858 
	mNL80211_CMD_SET_MPATH
,

859 
	mNL80211_CMD_NEW_MPATH
,

860 
	mNL80211_CMD_DEL_MPATH
,

862 
	mNL80211_CMD_SET_BSS
,

864 
	mNL80211_CMD_SET_REG
,

865 
	mNL80211_CMD_REQ_SET_REG
,

867 
	mNL80211_CMD_GET_MESH_CONFIG
,

868 
	mNL80211_CMD_SET_MESH_CONFIG
,

870 
	mNL80211_CMD_SET_MGMT_EXTRA_IE
 ,

872 
	mNL80211_CMD_GET_REG
,

874 
	mNL80211_CMD_GET_SCAN
,

875 
	mNL80211_CMD_TRIGGER_SCAN
,

876 
	mNL80211_CMD_NEW_SCAN_RESULTS
,

877 
	mNL80211_CMD_SCAN_ABORTED
,

879 
	mNL80211_CMD_REG_CHANGE
,

881 
	mNL80211_CMD_AUTHENTICATE
,

882 
	mNL80211_CMD_ASSOCIATE
,

883 
	mNL80211_CMD_DEAUTHENTICATE
,

884 
	mNL80211_CMD_DISASSOCIATE
,

886 
	mNL80211_CMD_MICHAEL_MIC_FAILURE
,

888 
	mNL80211_CMD_REG_BEACON_HINT
,

890 
	mNL80211_CMD_JOIN_IBSS
,

891 
	mNL80211_CMD_LEAVE_IBSS
,

893 
	mNL80211_CMD_TESTMODE
,

895 
	mNL80211_CMD_CONNECT
,

896 
	mNL80211_CMD_ROAM
,

897 
	mNL80211_CMD_DISCONNECT
,

899 
	mNL80211_CMD_SET_WIPHY_NETNS
,

901 
	mNL80211_CMD_GET_SURVEY
,

902 
	mNL80211_CMD_NEW_SURVEY_RESULTS
,

904 
	mNL80211_CMD_SET_PMKSA
,

905 
	mNL80211_CMD_DEL_PMKSA
,

906 
	mNL80211_CMD_FLUSH_PMKSA
,

908 
	mNL80211_CMD_REMAIN_ON_CHANNEL
,

909 
	mNL80211_CMD_CANCEL_REMAIN_ON_CHANNEL
,

911 
	mNL80211_CMD_SET_TX_BITRATE_MASK
,

913 
	mNL80211_CMD_REGISTER_FRAME
,

914 
	mNL80211_CMD_REGISTER_ACTION
 = 
NL80211_CMD_REGISTER_FRAME
,

915 
	mNL80211_CMD_FRAME
,

916 
	mNL80211_CMD_ACTION
 = 
NL80211_CMD_FRAME
,

917 
	mNL80211_CMD_FRAME_TX_STATUS
,

918 
	mNL80211_CMD_ACTION_TX_STATUS
 = 
NL80211_CMD_FRAME_TX_STATUS
,

920 
	mNL80211_CMD_SET_POWER_SAVE
,

921 
	mNL80211_CMD_GET_POWER_SAVE
,

923 
	mNL80211_CMD_SET_CQM
,

924 
	mNL80211_CMD_NOTIFY_CQM
,

926 
	mNL80211_CMD_SET_CHANNEL
,

927 
	mNL80211_CMD_SET_WDS_PEER
,

929 
	mNL80211_CMD_FRAME_WAIT_CANCEL
,

931 
	mNL80211_CMD_JOIN_MESH
,

932 
	mNL80211_CMD_LEAVE_MESH
,

934 
	mNL80211_CMD_UNPROT_DEAUTHENTICATE
,

935 
	mNL80211_CMD_UNPROT_DISASSOCIATE
,

937 
	mNL80211_CMD_NEW_PEER_CANDIDATE
,

939 
	mNL80211_CMD_GET_WOWLAN
,

940 
	mNL80211_CMD_SET_WOWLAN
,

942 
	mNL80211_CMD_START_SCHED_SCAN
,

943 
	mNL80211_CMD_STOP_SCHED_SCAN
,

944 
	mNL80211_CMD_SCHED_SCAN_RESULTS
,

945 
	mNL80211_CMD_SCHED_SCAN_STOPPED
,

947 
	mNL80211_CMD_SET_REKEY_OFFLOAD
,

949 
	mNL80211_CMD_PMKSA_CANDIDATE
,

951 
	mNL80211_CMD_TDLS_OPER
,

952 
	mNL80211_CMD_TDLS_MGMT
,

954 
	mNL80211_CMD_UNEXPECTED_FRAME
,

956 
	mNL80211_CMD_PROBE_CLIENT
,

958 
	mNL80211_CMD_REGISTER_BEACONS
,

960 
	mNL80211_CMD_UNEXPECTED_4ADDR_FRAME
,

962 
	mNL80211_CMD_SET_NOACK_MAP
,

964 
	mNL80211_CMD_CH_SWITCH_NOTIFY
,

966 
	mNL80211_CMD_START_P2P_DEVICE
,

967 
	mNL80211_CMD_STOP_P2P_DEVICE
,

969 
	mNL80211_CMD_CONN_FAILED
,

971 
	mNL80211_CMD_SET_MCAST_RATE
,

973 
	mNL80211_CMD_SET_MAC_ACL
,

975 
	mNL80211_CMD_RADAR_DETECT
,

977 
	mNL80211_CMD_GET_PROTOCOL_FEATURES
,

979 
	mNL80211_CMD_UPDATE_FT_IES
,

980 
	mNL80211_CMD_FT_EVENT
,

982 
	mNL80211_CMD_CRIT_PROTOCOL_START
,

983 
	mNL80211_CMD_CRIT_PROTOCOL_STOP
,

985 
	mNL80211_CMD_GET_COALESCE
,

986 
	mNL80211_CMD_SET_COALESCE
,

988 
	mNL80211_CMD_CHANNEL_SWITCH
,

990 
	mNL80211_CMD_VENDOR
,

992 
	mNL80211_CMD_SET_QOS_MAP
,

994 
	mNL80211_CMD_ADD_TX_TS
,

995 
	mNL80211_CMD_DEL_TX_TS
,

997 
	mNL80211_CMD_GET_MPP
,

999 
	mNL80211_CMD_JOIN_OCB
,

1000 
	mNL80211_CMD_LEAVE_OCB
,

1002 
	mNL80211_CMD_CH_SWITCH_STARTED_NOTIFY
,

1004 
	mNL80211_CMD_TDLS_CHANNEL_SWITCH
,

1005 
	mNL80211_CMD_TDLS_CANCEL_CHANNEL_SWITCH
,

1007 
	mNL80211_CMD_WIPHY_REG_CHANGE
,

1012 
	m__NL80211_CMD_AFTER_LAST
,

1013 
	mNL80211_CMD_MAX
 = 
__NL80211_CMD_AFTER_LAST
 - 1

1020 
	#NL80211_CMD_SET_BSS
 
NL80211_CMD_SET_BSS


	)

1021 
	#NL80211_CMD_SET_MGMT_EXTRA_IE
 
NL80211_CMD_SET_MGMT_EXTRA_IE


	)

1022 
	#NL80211_CMD_REG_CHANGE
 
NL80211_CMD_REG_CHANGE


	)

1023 
	#NL80211_CMD_AUTHENTICATE
 
NL80211_CMD_AUTHENTICATE


	)

1024 
	#NL80211_CMD_ASSOCIATE
 
NL80211_CMD_ASSOCIATE


	)

1025 
	#NL80211_CMD_DEAUTHENTICATE
 
NL80211_CMD_DEAUTHENTICATE


	)

1026 
	#NL80211_CMD_DISASSOCIATE
 
NL80211_CMD_DISASSOCIATE


	)

1027 
	#NL80211_CMD_REG_BEACON_HINT
 
NL80211_CMD_REG_BEACON_HINT


	)

1029 
	#NL80211_ATTR_FEATURE_FLAGS
 
NL80211_ATTR_FEATURE_FLAGS


	)

1032 
	#NL80211_CMD_GET_MESH_PARAMS
 
NL80211_CMD_GET_MESH_CONFIG


	)

1033 
	#NL80211_CMD_SET_MESH_PARAMS
 
NL80211_CMD_SET_MESH_CONFIG


	)

1034 
	#NL80211_MESH_SETUP_VENDOR_PATH_SEL_IE
 
NL80211_MESH_SETUP_IE


	)

1790 
	e∆80211_©ås
 {

1792 
	mNL80211_ATTR_UNSPEC
,

1794 
	mNL80211_ATTR_WIPHY
,

1795 
	mNL80211_ATTR_WIPHY_NAME
,

1797 
	mNL80211_ATTR_IFINDEX
,

1798 
	mNL80211_ATTR_IFNAME
,

1799 
	mNL80211_ATTR_IFTYPE
,

1801 
	mNL80211_ATTR_MAC
,

1803 
	mNL80211_ATTR_KEY_DATA
,

1804 
	mNL80211_ATTR_KEY_IDX
,

1805 
	mNL80211_ATTR_KEY_CIPHER
,

1806 
	mNL80211_ATTR_KEY_SEQ
,

1807 
	mNL80211_ATTR_KEY_DEFAULT
,

1809 
	mNL80211_ATTR_BEACON_INTERVAL
,

1810 
	mNL80211_ATTR_DTIM_PERIOD
,

1811 
	mNL80211_ATTR_BEACON_HEAD
,

1812 
	mNL80211_ATTR_BEACON_TAIL
,

1814 
	mNL80211_ATTR_STA_AID
,

1815 
	mNL80211_ATTR_STA_FLAGS
,

1816 
	mNL80211_ATTR_STA_LISTEN_INTERVAL
,

1817 
	mNL80211_ATTR_STA_SUPPORTED_RATES
,

1818 
	mNL80211_ATTR_STA_VLAN
,

1819 
	mNL80211_ATTR_STA_INFO
,

1821 
	mNL80211_ATTR_WIPHY_BANDS
,

1823 
	mNL80211_ATTR_MNTR_FLAGS
,

1825 
	mNL80211_ATTR_MESH_ID
,

1826 
	mNL80211_ATTR_STA_PLINK_ACTION
,

1827 
	mNL80211_ATTR_MPATH_NEXT_HOP
,

1828 
	mNL80211_ATTR_MPATH_INFO
,

1830 
	mNL80211_ATTR_BSS_CTS_PROT
,

1831 
	mNL80211_ATTR_BSS_SHORT_PREAMBLE
,

1832 
	mNL80211_ATTR_BSS_SHORT_SLOT_TIME
,

1834 
	mNL80211_ATTR_HT_CAPABILITY
,

1836 
	mNL80211_ATTR_SUPPORTED_IFTYPES
,

1838 
	mNL80211_ATTR_REG_ALPHA2
,

1839 
	mNL80211_ATTR_REG_RULES
,

1841 
	mNL80211_ATTR_MESH_CONFIG
,

1843 
	mNL80211_ATTR_BSS_BASIC_RATES
,

1845 
	mNL80211_ATTR_WIPHY_TXQ_PARAMS
,

1846 
	mNL80211_ATTR_WIPHY_FREQ
,

1847 
	mNL80211_ATTR_WIPHY_CHANNEL_TYPE
,

1849 
	mNL80211_ATTR_KEY_DEFAULT_MGMT
,

1851 
	mNL80211_ATTR_MGMT_SUBTYPE
,

1852 
	mNL80211_ATTR_IE
,

1854 
	mNL80211_ATTR_MAX_NUM_SCAN_SSIDS
,

1856 
	mNL80211_ATTR_SCAN_FREQUENCIES
,

1857 
	mNL80211_ATTR_SCAN_SSIDS
,

1858 
	mNL80211_ATTR_GENERATION
,

1859 
	mNL80211_ATTR_BSS
,

1861 
	mNL80211_ATTR_REG_INITIATOR
,

1862 
	mNL80211_ATTR_REG_TYPE
,

1864 
	mNL80211_ATTR_SUPPORTED_COMMANDS
,

1866 
	mNL80211_ATTR_FRAME
,

1867 
	mNL80211_ATTR_SSID
,

1868 
	mNL80211_ATTR_AUTH_TYPE
,

1869 
	mNL80211_ATTR_REASON_CODE
,

1871 
	mNL80211_ATTR_KEY_TYPE
,

1873 
	mNL80211_ATTR_MAX_SCAN_IE_LEN
,

1874 
	mNL80211_ATTR_CIPHER_SUITES
,

1876 
	mNL80211_ATTR_FREQ_BEFORE
,

1877 
	mNL80211_ATTR_FREQ_AFTER
,

1879 
	mNL80211_ATTR_FREQ_FIXED
,

1882 
	mNL80211_ATTR_WIPHY_RETRY_SHORT
,

1883 
	mNL80211_ATTR_WIPHY_RETRY_LONG
,

1884 
	mNL80211_ATTR_WIPHY_FRAG_THRESHOLD
,

1885 
	mNL80211_ATTR_WIPHY_RTS_THRESHOLD
,

1887 
	mNL80211_ATTR_TIMED_OUT
,

1889 
	mNL80211_ATTR_USE_MFP
,

1891 
	mNL80211_ATTR_STA_FLAGS2
,

1893 
	mNL80211_ATTR_CONTROL_PORT
,

1895 
	mNL80211_ATTR_TESTDATA
,

1897 
	mNL80211_ATTR_PRIVACY
,

1899 
	mNL80211_ATTR_DISCONNECTED_BY_AP
,

1900 
	mNL80211_ATTR_STATUS_CODE
,

1902 
	mNL80211_ATTR_CIPHER_SUITES_PAIRWISE
,

1903 
	mNL80211_ATTR_CIPHER_SUITE_GROUP
,

1904 
	mNL80211_ATTR_WPA_VERSIONS
,

1905 
	mNL80211_ATTR_AKM_SUITES
,

1907 
	mNL80211_ATTR_REQ_IE
,

1908 
	mNL80211_ATTR_RESP_IE
,

1910 
	mNL80211_ATTR_PREV_BSSID
,

1912 
	mNL80211_ATTR_KEY
,

1913 
	mNL80211_ATTR_KEYS
,

1915 
	mNL80211_ATTR_PID
,

1917 
	mNL80211_ATTR_4ADDR
,

1919 
	mNL80211_ATTR_SURVEY_INFO
,

1921 
	mNL80211_ATTR_PMKID
,

1922 
	mNL80211_ATTR_MAX_NUM_PMKIDS
,

1924 
	mNL80211_ATTR_DURATION
,

1926 
	mNL80211_ATTR_COOKIE
,

1928 
	mNL80211_ATTR_WIPHY_COVERAGE_CLASS
,

1930 
	mNL80211_ATTR_TX_RATES
,

1932 
	mNL80211_ATTR_FRAME_MATCH
,

1934 
	mNL80211_ATTR_ACK
,

1936 
	mNL80211_ATTR_PS_STATE
,

1938 
	mNL80211_ATTR_CQM
,

1940 
	mNL80211_ATTR_LOCAL_STATE_CHANGE
,

1942 
	mNL80211_ATTR_AP_ISOLATE
,

1944 
	mNL80211_ATTR_WIPHY_TX_POWER_SETTING
,

1945 
	mNL80211_ATTR_WIPHY_TX_POWER_LEVEL
,

1947 
	mNL80211_ATTR_TX_FRAME_TYPES
,

1948 
	mNL80211_ATTR_RX_FRAME_TYPES
,

1949 
	mNL80211_ATTR_FRAME_TYPE
,

1951 
	mNL80211_ATTR_CONTROL_PORT_ETHERTYPE
,

1952 
	mNL80211_ATTR_CONTROL_PORT_NO_ENCRYPT
,

1954 
	mNL80211_ATTR_SUPPORT_IBSS_RSN
,

1956 
	mNL80211_ATTR_WIPHY_ANTENNA_TX
,

1957 
	mNL80211_ATTR_WIPHY_ANTENNA_RX
,

1959 
	mNL80211_ATTR_MCAST_RATE
,

1961 
	mNL80211_ATTR_OFFCHANNEL_TX_OK
,

1963 
	mNL80211_ATTR_BSS_HT_OPMODE
,

1965 
	mNL80211_ATTR_KEY_DEFAULT_TYPES
,

1967 
	mNL80211_ATTR_MAX_REMAIN_ON_CHANNEL_DURATION
,

1969 
	mNL80211_ATTR_MESH_SETUP
,

1971 
	mNL80211_ATTR_WIPHY_ANTENNA_AVAIL_TX
,

1972 
	mNL80211_ATTR_WIPHY_ANTENNA_AVAIL_RX
,

1974 
	mNL80211_ATTR_SUPPORT_MESH_AUTH
,

1975 
	mNL80211_ATTR_STA_PLINK_STATE
,

1977 
	mNL80211_ATTR_WOWLAN_TRIGGERS
,

1978 
	mNL80211_ATTR_WOWLAN_TRIGGERS_SUPPORTED
,

1980 
	mNL80211_ATTR_SCHED_SCAN_INTERVAL
,

1982 
	mNL80211_ATTR_INTERFACE_COMBINATIONS
,

1983 
	mNL80211_ATTR_SOFTWARE_IFTYPES
,

1985 
	mNL80211_ATTR_REKEY_DATA
,

1987 
	mNL80211_ATTR_MAX_NUM_SCHED_SCAN_SSIDS
,

1988 
	mNL80211_ATTR_MAX_SCHED_SCAN_IE_LEN
,

1990 
	mNL80211_ATTR_SCAN_SUPP_RATES
,

1992 
	mNL80211_ATTR_HIDDEN_SSID
,

1994 
	mNL80211_ATTR_IE_PROBE_RESP
,

1995 
	mNL80211_ATTR_IE_ASSOC_RESP
,

1997 
	mNL80211_ATTR_STA_WME
,

1998 
	mNL80211_ATTR_SUPPORT_AP_UAPSD
,

2000 
	mNL80211_ATTR_ROAM_SUPPORT
,

2002 
	mNL80211_ATTR_SCHED_SCAN_MATCH
,

2003 
	mNL80211_ATTR_MAX_MATCH_SETS
,

2005 
	mNL80211_ATTR_PMKSA_CANDIDATE
,

2007 
	mNL80211_ATTR_TX_NO_CCK_RATE
,

2009 
	mNL80211_ATTR_TDLS_ACTION
,

2010 
	mNL80211_ATTR_TDLS_DIALOG_TOKEN
,

2011 
	mNL80211_ATTR_TDLS_OPERATION
,

2012 
	mNL80211_ATTR_TDLS_SUPPORT
,

2013 
	mNL80211_ATTR_TDLS_EXTERNAL_SETUP
,

2015 
	mNL80211_ATTR_DEVICE_AP_SME
,

2017 
	mNL80211_ATTR_DONT_WAIT_FOR_ACK
,

2019 
	mNL80211_ATTR_FEATURE_FLAGS
,

2021 
	mNL80211_ATTR_PROBE_RESP_OFFLOAD
,

2023 
	mNL80211_ATTR_PROBE_RESP
,

2025 
	mNL80211_ATTR_DFS_REGION
,

2027 
	mNL80211_ATTR_DISABLE_HT
,

2028 
	mNL80211_ATTR_HT_CAPABILITY_MASK
,

2030 
	mNL80211_ATTR_NOACK_MAP
,

2032 
	mNL80211_ATTR_INACTIVITY_TIMEOUT
,

2034 
	mNL80211_ATTR_RX_SIGNAL_DBM
,

2036 
	mNL80211_ATTR_BG_SCAN_PERIOD
,

2038 
	mNL80211_ATTR_WDEV
,

2040 
	mNL80211_ATTR_USER_REG_HINT_TYPE
,

2042 
	mNL80211_ATTR_CONN_FAILED_REASON
,

2044 
	mNL80211_ATTR_SAE_DATA
,

2046 
	mNL80211_ATTR_VHT_CAPABILITY
,

2048 
	mNL80211_ATTR_SCAN_FLAGS
,

2050 
	mNL80211_ATTR_CHANNEL_WIDTH
,

2051 
	mNL80211_ATTR_CENTER_FREQ1
,

2052 
	mNL80211_ATTR_CENTER_FREQ2
,

2054 
	mNL80211_ATTR_P2P_CTWINDOW
,

2055 
	mNL80211_ATTR_P2P_OPPPS
,

2057 
	mNL80211_ATTR_LOCAL_MESH_POWER_MODE
,

2059 
	mNL80211_ATTR_ACL_POLICY
,

2061 
	mNL80211_ATTR_MAC_ADDRS
,

2063 
	mNL80211_ATTR_MAC_ACL_MAX
,

2065 
	mNL80211_ATTR_RADAR_EVENT
,

2067 
	mNL80211_ATTR_EXT_CAPA
,

2068 
	mNL80211_ATTR_EXT_CAPA_MASK
,

2070 
	mNL80211_ATTR_STA_CAPABILITY
,

2071 
	mNL80211_ATTR_STA_EXT_CAPABILITY
,

2073 
	mNL80211_ATTR_PROTOCOL_FEATURES
,

2074 
	mNL80211_ATTR_SPLIT_WIPHY_DUMP
,

2076 
	mNL80211_ATTR_DISABLE_VHT
,

2077 
	mNL80211_ATTR_VHT_CAPABILITY_MASK
,

2079 
	mNL80211_ATTR_MDID
,

2080 
	mNL80211_ATTR_IE_RIC
,

2082 
	mNL80211_ATTR_CRIT_PROT_ID
,

2083 
	mNL80211_ATTR_MAX_CRIT_PROT_DURATION
,

2085 
	mNL80211_ATTR_PEER_AID
,

2087 
	mNL80211_ATTR_COALESCE_RULE
,

2089 
	mNL80211_ATTR_CH_SWITCH_COUNT
,

2090 
	mNL80211_ATTR_CH_SWITCH_BLOCK_TX
,

2091 
	mNL80211_ATTR_CSA_IES
,

2092 
	mNL80211_ATTR_CSA_C_OFF_BEACON
,

2093 
	mNL80211_ATTR_CSA_C_OFF_PRESP
,

2095 
	mNL80211_ATTR_RXMGMT_FLAGS
,

2097 
	mNL80211_ATTR_STA_SUPPORTED_CHANNELS
,

2099 
	mNL80211_ATTR_STA_SUPPORTED_OPER_CLASSES
,

2101 
	mNL80211_ATTR_HANDLE_DFS
,

2103 
	mNL80211_ATTR_SUPPORT_5_MHZ
,

2104 
	mNL80211_ATTR_SUPPORT_10_MHZ
,

2106 
	mNL80211_ATTR_OPMODE_NOTIF
,

2108 
	mNL80211_ATTR_VENDOR_ID
,

2109 
	mNL80211_ATTR_VENDOR_SUBCMD
,

2110 
	mNL80211_ATTR_VENDOR_DATA
,

2111 
	mNL80211_ATTR_VENDOR_EVENTS
,

2113 
	mNL80211_ATTR_QOS_MAP
,

2115 
	mNL80211_ATTR_MAC_HINT
,

2116 
	mNL80211_ATTR_WIPHY_FREQ_HINT
,

2118 
	mNL80211_ATTR_MAX_AP_ASSOC_STA
,

2120 
	mNL80211_ATTR_TDLS_PEER_CAPABILITY
,

2122 
	mNL80211_ATTR_SOCKET_OWNER
,

2124 
	mNL80211_ATTR_CSA_C_OFFSETS_TX
,

2125 
	mNL80211_ATTR_MAX_CSA_COUNTERS
,

2127 
	mNL80211_ATTR_TDLS_INITIATOR
,

2129 
	mNL80211_ATTR_USE_RRM
,

2131 
	mNL80211_ATTR_WIPHY_DYN_ACK
,

2133 
	mNL80211_ATTR_TSID
,

2134 
	mNL80211_ATTR_USER_PRIO
,

2135 
	mNL80211_ATTR_ADMITTED_TIME
,

2137 
	mNL80211_ATTR_SMPS_MODE
,

2139 
	mNL80211_ATTR_OPER_CLASS
,

2141 
	mNL80211_ATTR_MAC_MASK
,

2143 
	mNL80211_ATTR_WIPHY_SELF_MANAGED_REG
,

2145 
	mNL80211_ATTR_EXT_FEATURES
,

2147 
	mNL80211_ATTR_SURVEY_RADIO_STATS
,

2149 
	mNL80211_ATTR_NETNS_FD
,

2151 
	mNL80211_ATTR_SCHED_SCAN_DELAY
,

2153 
	mNL80211_ATTR_REG_INDOOR
,

2155 
	mNL80211_ATTR_MAX_NUM_SCHED_SCAN_PLANS
,

2156 
	mNL80211_ATTR_MAX_SCAN_PLAN_INTERVAL
,

2157 
	mNL80211_ATTR_MAX_SCAN_PLAN_ITERATIONS
,

2158 
	mNL80211_ATTR_SCHED_SCAN_PLANS
,

2162 
	m__NL80211_ATTR_AFTER_LAST
,

2163 
	mNUM_NL80211_ATTR
 = 
__NL80211_ATTR_AFTER_LAST
,

2164 
	mNL80211_ATTR_MAX
 = 
__NL80211_ATTR_AFTER_LAST
 - 1

2168 
	#NL80211_ATTR_SCAN_GENERATION
 
NL80211_ATTR_GENERATION


	)

2169 
	#NL80211_ATTR_MESH_PARAMS
 
NL80211_ATTR_MESH_CONFIG


	)

2170 
	#NL80211_ATTR_IFACE_SOCKET_OWNER
 
NL80211_ATTR_SOCKET_OWNER


	)

2176 
	#NL80211_CMD_CONNECT
 
NL80211_CMD_CONNECT


	)

2177 
	#NL80211_ATTR_HT_CAPABILITY
 
NL80211_ATTR_HT_CAPABILITY


	)

2178 
	#NL80211_ATTR_BSS_BASIC_RATES
 
NL80211_ATTR_BSS_BASIC_RATES


	)

2179 
	#NL80211_ATTR_WIPHY_TXQ_PARAMS
 
NL80211_ATTR_WIPHY_TXQ_PARAMS


	)

2180 
	#NL80211_ATTR_WIPHY_FREQ
 
NL80211_ATTR_WIPHY_FREQ


	)

2181 
	#NL80211_ATTR_WIPHY_CHANNEL_TYPE
 
NL80211_ATTR_WIPHY_CHANNEL_TYPE


	)

2182 
	#NL80211_ATTR_MGMT_SUBTYPE
 
NL80211_ATTR_MGMT_SUBTYPE


	)

2183 
	#NL80211_ATTR_IE
 
NL80211_ATTR_IE


	)

2184 
	#NL80211_ATTR_REG_INITIATOR
 
NL80211_ATTR_REG_INITIATOR


	)

2185 
	#NL80211_ATTR_REG_TYPE
 
NL80211_ATTR_REG_TYPE


	)

2186 
	#NL80211_ATTR_FRAME
 
NL80211_ATTR_FRAME


	)

2187 
	#NL80211_ATTR_SSID
 
NL80211_ATTR_SSID


	)

2188 
	#NL80211_ATTR_AUTH_TYPE
 
NL80211_ATTR_AUTH_TYPE


	)

2189 
	#NL80211_ATTR_REASON_CODE
 
NL80211_ATTR_REASON_CODE


	)

2190 
	#NL80211_ATTR_CIPHER_SUITES_PAIRWISE
 
NL80211_ATTR_CIPHER_SUITES_PAIRWISE


	)

2191 
	#NL80211_ATTR_CIPHER_SUITE_GROUP
 
NL80211_ATTR_CIPHER_SUITE_GROUP


	)

2192 
	#NL80211_ATTR_WPA_VERSIONS
 
NL80211_ATTR_WPA_VERSIONS


	)

2193 
	#NL80211_ATTR_AKM_SUITES
 
NL80211_ATTR_AKM_SUITES


	)

2194 
	#NL80211_ATTR_KEY
 
NL80211_ATTR_KEY


	)

2195 
	#NL80211_ATTR_KEYS
 
NL80211_ATTR_KEYS


	)

2196 
	#NL80211_ATTR_FEATURE_FLAGS
 
NL80211_ATTR_FEATURE_FLAGS


	)

2198 
	#NL80211_MAX_SUPP_RATES
 32

	)

2199 
	#NL80211_MAX_SUPP_HT_RATES
 77

	)

2200 
	#NL80211_MAX_SUPP_REG_RULES
 64

	)

2201 
	#NL80211_TKIP_DATA_OFFSET_ENCR_KEY
 0

	)

2202 
	#NL80211_TKIP_DATA_OFFSET_TX_MIC_KEY
 16

	)

2203 
	#NL80211_TKIP_DATA_OFFSET_RX_MIC_KEY
 24

	)

2204 
	#NL80211_HT_CAPABILITY_LEN
 26

	)

2205 
	#NL80211_VHT_CAPABILITY_LEN
 12

	)

2207 
	#NL80211_MAX_NR_CIPHER_SUITES
 5

	)

2208 
	#NL80211_MAX_NR_AKM_SUITES
 2

	)

2210 
	#NL80211_MIN_REMAIN_ON_CHANNEL_TIME
 10

	)

2213 
	#NL80211_SCAN_RSSI_THOLD_OFF
 -300

	)

2215 
	#NL80211_CQM_TXE_MAX_INTVL
 1800

	)

2245 
	e∆80211_i·y≥
 {

2246 
	mNL80211_IFTYPE_UNSPECIFIED
,

2247 
	mNL80211_IFTYPE_ADHOC
,

2248 
	mNL80211_IFTYPE_STATION
,

2249 
	mNL80211_IFTYPE_AP
,

2250 
	mNL80211_IFTYPE_AP_VLAN
,

2251 
	mNL80211_IFTYPE_WDS
,

2252 
	mNL80211_IFTYPE_MONITOR
,

2253 
	mNL80211_IFTYPE_MESH_POINT
,

2254 
	mNL80211_IFTYPE_P2P_CLIENT
,

2255 
	mNL80211_IFTYPE_P2P_GO
,

2256 
	mNL80211_IFTYPE_P2P_DEVICE
,

2257 
	mNL80211_IFTYPE_OCB
,

2260 
	mNUM_NL80211_IFTYPES
,

2261 
	mNL80211_IFTYPE_MAX
 = 
NUM_NL80211_IFTYPES
 - 1

2288 
	e∆80211_°a_Êags
 {

2289 
	m__NL80211_STA_FLAG_INVALID
,

2290 
	mNL80211_STA_FLAG_AUTHORIZED
,

2291 
	mNL80211_STA_FLAG_SHORT_PREAMBLE
,

2292 
	mNL80211_STA_FLAG_WME
,

2293 
	mNL80211_STA_FLAG_MFP
,

2294 
	mNL80211_STA_FLAG_AUTHENTICATED
,

2295 
	mNL80211_STA_FLAG_TDLS_PEER
,

2296 
	mNL80211_STA_FLAG_ASSOCIATED
,

2299 
	m__NL80211_STA_FLAG_AFTER_LAST
,

2300 
	mNL80211_STA_FLAG_MAX
 = 
__NL80211_STA_FLAG_AFTER_LAST
 - 1

2303 
	#NL80211_STA_FLAG_MAX_OLD_API
 
NL80211_STA_FLAG_TDLS_PEER


	)

2312 
	s∆80211_°a_Êag_upd©e
 {

2313 
__u32
 
	mmask
;

2314 
__u32
 
	m£t
;

2315 } 
__©åibuã__
((
∑cked
));

2351 
	e∆80211_øã_öfo
 {

2352 
	m__NL80211_RATE_INFO_INVALID
,

2353 
	mNL80211_RATE_INFO_BITRATE
,

2354 
	mNL80211_RATE_INFO_MCS
,

2355 
	mNL80211_RATE_INFO_40_MHZ_WIDTH
,

2356 
	mNL80211_RATE_INFO_SHORT_GI
,

2357 
	mNL80211_RATE_INFO_BITRATE32
,

2358 
	mNL80211_RATE_INFO_VHT_MCS
,

2359 
	mNL80211_RATE_INFO_VHT_NSS
,

2360 
	mNL80211_RATE_INFO_80_MHZ_WIDTH
,

2361 
	mNL80211_RATE_INFO_80P80_MHZ_WIDTH
,

2362 
	mNL80211_RATE_INFO_160_MHZ_WIDTH
,

2363 
	mNL80211_RATE_INFO_10_MHZ_WIDTH
,

2364 
	mNL80211_RATE_INFO_5_MHZ_WIDTH
,

2367 
	m__NL80211_RATE_INFO_AFTER_LAST
,

2368 
	mNL80211_RATE_INFO_MAX
 = 
__NL80211_RATE_INFO_AFTER_LAST
 - 1

2388 
	e∆80211_°a_bss_∑øm
 {

2389 
	m__NL80211_STA_BSS_PARAM_INVALID
,

2390 
	mNL80211_STA_BSS_PARAM_CTS_PROT
,

2391 
	mNL80211_STA_BSS_PARAM_SHORT_PREAMBLE
,

2392 
	mNL80211_STA_BSS_PARAM_SHORT_SLOT_TIME
,

2393 
	mNL80211_STA_BSS_PARAM_DTIM_PERIOD
,

2394 
	mNL80211_STA_BSS_PARAM_BEACON_INTERVAL
,

2397 
	m__NL80211_STA_BSS_PARAM_AFTER_LAST
,

2398 
	mNL80211_STA_BSS_PARAM_MAX
 = 
__NL80211_STA_BSS_PARAM_AFTER_LAST
 - 1

2463 
	e∆80211_°a_öfo
 {

2464 
	m__NL80211_STA_INFO_INVALID
,

2465 
	mNL80211_STA_INFO_INACTIVE_TIME
,

2466 
	mNL80211_STA_INFO_RX_BYTES
,

2467 
	mNL80211_STA_INFO_TX_BYTES
,

2468 
	mNL80211_STA_INFO_LLID
,

2469 
	mNL80211_STA_INFO_PLID
,

2470 
	mNL80211_STA_INFO_PLINK_STATE
,

2471 
	mNL80211_STA_INFO_SIGNAL
,

2472 
	mNL80211_STA_INFO_TX_BITRATE
,

2473 
	mNL80211_STA_INFO_RX_PACKETS
,

2474 
	mNL80211_STA_INFO_TX_PACKETS
,

2475 
	mNL80211_STA_INFO_TX_RETRIES
,

2476 
	mNL80211_STA_INFO_TX_FAILED
,

2477 
	mNL80211_STA_INFO_SIGNAL_AVG
,

2478 
	mNL80211_STA_INFO_RX_BITRATE
,

2479 
	mNL80211_STA_INFO_BSS_PARAM
,

2480 
	mNL80211_STA_INFO_CONNECTED_TIME
,

2481 
	mNL80211_STA_INFO_STA_FLAGS
,

2482 
	mNL80211_STA_INFO_BEACON_LOSS
,

2483 
	mNL80211_STA_INFO_T_OFFSET
,

2484 
	mNL80211_STA_INFO_LOCAL_PM
,

2485 
	mNL80211_STA_INFO_PEER_PM
,

2486 
	mNL80211_STA_INFO_NONPEER_PM
,

2487 
	mNL80211_STA_INFO_RX_BYTES64
,

2488 
	mNL80211_STA_INFO_TX_BYTES64
,

2489 
	mNL80211_STA_INFO_CHAIN_SIGNAL
,

2490 
	mNL80211_STA_INFO_CHAIN_SIGNAL_AVG
,

2491 
	mNL80211_STA_INFO_EXPECTED_THROUGHPUT
,

2492 
	mNL80211_STA_INFO_RX_DROP_MISC
,

2493 
	mNL80211_STA_INFO_BEACON_RX
,

2494 
	mNL80211_STA_INFO_BEACON_SIGNAL_AVG
,

2495 
	mNL80211_STA_INFO_TID_STATS
,

2498 
	m__NL80211_STA_INFO_AFTER_LAST
,

2499 
	mNL80211_STA_INFO_MAX
 = 
__NL80211_STA_INFO_AFTER_LAST
 - 1

2515 
	e∆80211_tid_°©s
 {

2516 
	m__NL80211_TID_STATS_INVALID
,

2517 
	mNL80211_TID_STATS_RX_MSDU
,

2518 
	mNL80211_TID_STATS_TX_MSDU
,

2519 
	mNL80211_TID_STATS_TX_MSDU_RETRIES
,

2520 
	mNL80211_TID_STATS_TX_MSDU_FAILED
,

2523 
	mNUM_NL80211_TID_STATS
,

2524 
	mNL80211_TID_STATS_MAX
 = 
NUM_NL80211_TID_STATS
 - 1

2536 
	e∆80211_m∑th_Êags
 {

2537 
	mNL80211_MPATH_FLAG_ACTIVE
 = 1<<0,

2538 
	mNL80211_MPATH_FLAG_RESOLVING
 = 1<<1,

2539 
	mNL80211_MPATH_FLAG_SN_VALID
 = 1<<2,

2540 
	mNL80211_MPATH_FLAG_FIXED
 = 1<<3,

2541 
	mNL80211_MPATH_FLAG_RESOLVED
 = 1<<4,

2563 
	e∆80211_m∑th_öfo
 {

2564 
	m__NL80211_MPATH_INFO_INVALID
,

2565 
	mNL80211_MPATH_INFO_FRAME_QLEN
,

2566 
	mNL80211_MPATH_INFO_SN
,

2567 
	mNL80211_MPATH_INFO_METRIC
,

2568 
	mNL80211_MPATH_INFO_EXPTIME
,

2569 
	mNL80211_MPATH_INFO_FLAGS
,

2570 
	mNL80211_MPATH_INFO_DISCOVERY_TIMEOUT
,

2571 
	mNL80211_MPATH_INFO_DISCOVERY_RETRIES
,

2574 
	m__NL80211_MPATH_INFO_AFTER_LAST
,

2575 
	mNL80211_MPATH_INFO_MAX
 = 
__NL80211_MPATH_INFO_AFTER_LAST
 - 1

2596 
	e∆80211_b™d_©å
 {

2597 
	m__NL80211_BAND_ATTR_INVALID
,

2598 
	mNL80211_BAND_ATTR_FREQS
,

2599 
	mNL80211_BAND_ATTR_RATES
,

2601 
	mNL80211_BAND_ATTR_HT_MCS_SET
,

2602 
	mNL80211_BAND_ATTR_HT_CAPA
,

2603 
	mNL80211_BAND_ATTR_HT_AMPDU_FACTOR
,

2604 
	mNL80211_BAND_ATTR_HT_AMPDU_DENSITY
,

2606 
	mNL80211_BAND_ATTR_VHT_MCS_SET
,

2607 
	mNL80211_BAND_ATTR_VHT_CAPA
,

2610 
	m__NL80211_BAND_ATTR_AFTER_LAST
,

2611 
	mNL80211_BAND_ATTR_MAX
 = 
__NL80211_BAND_ATTR_AFTER_LAST
 - 1

2614 
	#NL80211_BAND_ATTR_HT_CAPA
 
NL80211_BAND_ATTR_HT_CAPA


	)

2674 
	e∆80211_‰equícy_©å
 {

2675 
	m__NL80211_FREQUENCY_ATTR_INVALID
,

2676 
	mNL80211_FREQUENCY_ATTR_FREQ
,

2677 
	mNL80211_FREQUENCY_ATTR_DISABLED
,

2678 
	mNL80211_FREQUENCY_ATTR_NO_IR
,

2679 
	m__NL80211_FREQUENCY_ATTR_NO_IBSS
,

2680 
	mNL80211_FREQUENCY_ATTR_RADAR
,

2681 
	mNL80211_FREQUENCY_ATTR_MAX_TX_POWER
,

2682 
	mNL80211_FREQUENCY_ATTR_DFS_STATE
,

2683 
	mNL80211_FREQUENCY_ATTR_DFS_TIME
,

2684 
	mNL80211_FREQUENCY_ATTR_NO_HT40_MINUS
,

2685 
	mNL80211_FREQUENCY_ATTR_NO_HT40_PLUS
,

2686 
	mNL80211_FREQUENCY_ATTR_NO_80MHZ
,

2687 
	mNL80211_FREQUENCY_ATTR_NO_160MHZ
,

2688 
	mNL80211_FREQUENCY_ATTR_DFS_CAC_TIME
,

2689 
	mNL80211_FREQUENCY_ATTR_INDOOR_ONLY
,

2690 
	mNL80211_FREQUENCY_ATTR_IR_CONCURRENT
,

2691 
	mNL80211_FREQUENCY_ATTR_NO_20MHZ
,

2692 
	mNL80211_FREQUENCY_ATTR_NO_10MHZ
,

2695 
	m__NL80211_FREQUENCY_ATTR_AFTER_LAST
,

2696 
	mNL80211_FREQUENCY_ATTR_MAX
 = 
__NL80211_FREQUENCY_ATTR_AFTER_LAST
 - 1

2699 
	#NL80211_FREQUENCY_ATTR_MAX_TX_POWER
 
NL80211_FREQUENCY_ATTR_MAX_TX_POWER


	)

2700 
	#NL80211_FREQUENCY_ATTR_PASSIVE_SCAN
 
NL80211_FREQUENCY_ATTR_NO_IR


	)

2701 
	#NL80211_FREQUENCY_ATTR_NO_IBSS
 
NL80211_FREQUENCY_ATTR_NO_IR


	)

2702 
	#NL80211_FREQUENCY_ATTR_NO_IR
 
NL80211_FREQUENCY_ATTR_NO_IR


	)

2703 
	#NL80211_FREQUENCY_ATTR_GO_CONCURRENT
 \

2704 
NL80211_FREQUENCY_ATTR_IR_CONCURRENT


	)

2716 
	e∆80211_bôøã_©å
 {

2717 
	m__NL80211_BITRATE_ATTR_INVALID
,

2718 
	mNL80211_BITRATE_ATTR_RATE
,

2719 
	mNL80211_BITRATE_ATTR_2GHZ_SHORTPREAMBLE
,

2722 
	m__NL80211_BITRATE_ATTR_AFTER_LAST
,

2723 
	mNL80211_BITRATE_ATTR_MAX
 = 
__NL80211_BITRATE_ATTR_AFTER_LAST
 - 1

2742 
	e∆80211_ªg_öôüt‹
 {

2743 
	mNL80211_REGDOM_SET_BY_CORE
,

2744 
	mNL80211_REGDOM_SET_BY_USER
,

2745 
	mNL80211_REGDOM_SET_BY_DRIVER
,

2746 
	mNL80211_REGDOM_SET_BY_COUNTRY_IE
,

2765 
	e∆80211_ªg_ty≥
 {

2766 
	mNL80211_REGDOM_TYPE_COUNTRY
,

2767 
	mNL80211_REGDOM_TYPE_WORLD
,

2768 
	mNL80211_REGDOM_TYPE_CUSTOM_WORLD
,

2769 
	mNL80211_REGDOM_TYPE_INTERSECTION
,

2797 
	e∆80211_ªg_ruÀ_©å
 {

2798 
	m__NL80211_REG_RULE_ATTR_INVALID
,

2799 
	mNL80211_ATTR_REG_RULE_FLAGS
,

2801 
	mNL80211_ATTR_FREQ_RANGE_START
,

2802 
	mNL80211_ATTR_FREQ_RANGE_END
,

2803 
	mNL80211_ATTR_FREQ_RANGE_MAX_BW
,

2805 
	mNL80211_ATTR_POWER_RULE_MAX_ANT_GAIN
,

2806 
	mNL80211_ATTR_POWER_RULE_MAX_EIRP
,

2808 
	mNL80211_ATTR_DFS_CAC_TIME
,

2811 
	m__NL80211_REG_RULE_ATTR_AFTER_LAST
,

2812 
	mNL80211_REG_RULE_ATTR_MAX
 = 
__NL80211_REG_RULE_ATTR_AFTER_LAST
 - 1

2832 
	e∆80211_sched_sˇn_m©ch_©å
 {

2833 
	m__NL80211_SCHED_SCAN_MATCH_ATTR_INVALID
,

2835 
	mNL80211_SCHED_SCAN_MATCH_ATTR_SSID
,

2836 
	mNL80211_SCHED_SCAN_MATCH_ATTR_RSSI
,

2839 
	m__NL80211_SCHED_SCAN_MATCH_ATTR_AFTER_LAST
,

2840 
	mNL80211_SCHED_SCAN_MATCH_ATTR_MAX
 =

2841 
__NL80211_SCHED_SCAN_MATCH_ATTR_AFTER_LAST
 - 1

2845 
	#NL80211_ATTR_SCHED_SCAN_MATCH_SSID
 
NL80211_SCHED_SCAN_MATCH_ATTR_SSID


	)

2869 
	e∆80211_ªg_ruÀ_Êags
 {

2870 
	mNL80211_RRF_NO_OFDM
 = 1<<0,

2871 
	mNL80211_RRF_NO_CCK
 = 1<<1,

2872 
	mNL80211_RRF_NO_INDOOR
 = 1<<2,

2873 
	mNL80211_RRF_NO_OUTDOOR
 = 1<<3,

2874 
	mNL80211_RRF_DFS
 = 1<<4,

2875 
	mNL80211_RRF_PTP_ONLY
 = 1<<5,

2876 
	mNL80211_RRF_PTMP_ONLY
 = 1<<6,

2877 
	mNL80211_RRF_NO_IR
 = 1<<7,

2878 
	m__NL80211_RRF_NO_IBSS
 = 1<<8,

2879 
	mNL80211_RRF_AUTO_BW
 = 1<<11,

2880 
	mNL80211_RRF_IR_CONCURRENT
 = 1<<12,

2881 
	mNL80211_RRF_NO_HT40MINUS
 = 1<<13,

2882 
	mNL80211_RRF_NO_HT40PLUS
 = 1<<14,

2883 
	mNL80211_RRF_NO_80MHZ
 = 1<<15,

2884 
	mNL80211_RRF_NO_160MHZ
 = 1<<16,

2887 
	#NL80211_RRF_PASSIVE_SCAN
 
NL80211_RRF_NO_IR


	)

2888 
	#NL80211_RRF_NO_IBSS
 
NL80211_RRF_NO_IR


	)

2889 
	#NL80211_RRF_NO_IR
 
NL80211_RRF_NO_IR


	)

2890 
	#NL80211_RRF_NO_HT40
 (
NL80211_RRF_NO_HT40MINUS
 |\

2891 
NL80211_RRF_NO_HT40PLUS
)

	)

2892 
	#NL80211_RRF_GO_CONCURRENT
 
NL80211_RRF_IR_CONCURRENT


	)

2895 
	#NL80211_RRF_NO_IR_ALL
 (
NL80211_RRF_NO_IR
 | 
__NL80211_RRF_NO_IBSS
)

	)

2905 
	e∆80211_dfs_ªgi⁄s
 {

2906 
	mNL80211_DFS_UNSET
 = 0,

2907 
	mNL80211_DFS_FCC
 = 1,

2908 
	mNL80211_DFS_ETSI
 = 2,

2909 
	mNL80211_DFS_JP
 = 3,

2929 
	e∆80211_u£r_ªg_höt_ty≥
 {

2930 
	mNL80211_USER_REG_HINT_USER
 = 0,

2931 
	mNL80211_USER_REG_HINT_CELL_BASE
 = 1,

2932 
	mNL80211_USER_REG_HINT_INDOOR
 = 2,

2961 
	e∆80211_survey_öfo
 {

2962 
	m__NL80211_SURVEY_INFO_INVALID
,

2963 
	mNL80211_SURVEY_INFO_FREQUENCY
,

2964 
	mNL80211_SURVEY_INFO_NOISE
,

2965 
	mNL80211_SURVEY_INFO_IN_USE
,

2966 
	mNL80211_SURVEY_INFO_TIME
,

2967 
	mNL80211_SURVEY_INFO_TIME_BUSY
,

2968 
	mNL80211_SURVEY_INFO_TIME_EXT_BUSY
,

2969 
	mNL80211_SURVEY_INFO_TIME_RX
,

2970 
	mNL80211_SURVEY_INFO_TIME_TX
,

2971 
	mNL80211_SURVEY_INFO_TIME_SCAN
,

2974 
	m__NL80211_SURVEY_INFO_AFTER_LAST
,

2975 
	mNL80211_SURVEY_INFO_MAX
 = 
__NL80211_SURVEY_INFO_AFTER_LAST
 - 1

2979 
	#NL80211_SURVEY_INFO_CHANNEL_TIME
 
NL80211_SURVEY_INFO_TIME


	)

2980 
	#NL80211_SURVEY_INFO_CHANNEL_TIME_BUSY
 
NL80211_SURVEY_INFO_TIME_BUSY


	)

2981 
	#NL80211_SURVEY_INFO_CHANNEL_TIME_EXT_BUSY
 
NL80211_SURVEY_INFO_TIME_EXT_BUSY


	)

2982 
	#NL80211_SURVEY_INFO_CHANNEL_TIME_RX
 
NL80211_SURVEY_INFO_TIME_RX


	)

2983 
	#NL80211_SURVEY_INFO_CHANNEL_TIME_TX
 
NL80211_SURVEY_INFO_TIME_TX


	)

3004 
	e∆80211_m¡r_Êags
 {

3005 
	m__NL80211_MNTR_FLAG_INVALID
,

3006 
	mNL80211_MNTR_FLAG_FCSFAIL
,

3007 
	mNL80211_MNTR_FLAG_PLCPFAIL
,

3008 
	mNL80211_MNTR_FLAG_CONTROL
,

3009 
	mNL80211_MNTR_FLAG_OTHER_BSS
,

3010 
	mNL80211_MNTR_FLAG_COOK_FRAMES
,

3011 
	mNL80211_MNTR_FLAG_ACTIVE
,

3014 
	m__NL80211_MNTR_FLAG_AFTER_LAST
,

3015 
	mNL80211_MNTR_FLAG_MAX
 = 
__NL80211_MNTR_FLAG_AFTER_LAST
 - 1

3036 
	e∆80211_mesh_powî_mode
 {

3037 
	mNL80211_MESH_POWER_UNKNOWN
,

3038 
	mNL80211_MESH_POWER_ACTIVE
,

3039 
	mNL80211_MESH_POWER_LIGHT_SLEEP
,

3040 
	mNL80211_MESH_POWER_DEEP_SLEEP
,

3042 
	m__NL80211_MESH_POWER_AFTER_LAST
,

3043 
	mNL80211_MESH_POWER_MAX
 = 
__NL80211_MESH_POWER_AFTER_LAST
 - 1

3154 
	e∆80211_meshc⁄f_∑øms
 {

3155 
	m__NL80211_MESHCONF_INVALID
,

3156 
	mNL80211_MESHCONF_RETRY_TIMEOUT
,

3157 
	mNL80211_MESHCONF_CONFIRM_TIMEOUT
,

3158 
	mNL80211_MESHCONF_HOLDING_TIMEOUT
,

3159 
	mNL80211_MESHCONF_MAX_PEER_LINKS
,

3160 
	mNL80211_MESHCONF_MAX_RETRIES
,

3161 
	mNL80211_MESHCONF_TTL
,

3162 
	mNL80211_MESHCONF_AUTO_OPEN_PLINKS
,

3163 
	mNL80211_MESHCONF_HWMP_MAX_PREQ_RETRIES
,

3164 
	mNL80211_MESHCONF_PATH_REFRESH_TIME
,

3165 
	mNL80211_MESHCONF_MIN_DISCOVERY_TIMEOUT
,

3166 
	mNL80211_MESHCONF_HWMP_ACTIVE_PATH_TIMEOUT
,

3167 
	mNL80211_MESHCONF_HWMP_PREQ_MIN_INTERVAL
,

3168 
	mNL80211_MESHCONF_HWMP_NET_DIAM_TRVS_TIME
,

3169 
	mNL80211_MESHCONF_HWMP_ROOTMODE
,

3170 
	mNL80211_MESHCONF_ELEMENT_TTL
,

3171 
	mNL80211_MESHCONF_HWMP_RANN_INTERVAL
,

3172 
	mNL80211_MESHCONF_GATE_ANNOUNCEMENTS
,

3173 
	mNL80211_MESHCONF_HWMP_PERR_MIN_INTERVAL
,

3174 
	mNL80211_MESHCONF_FORWARDING
,

3175 
	mNL80211_MESHCONF_RSSI_THRESHOLD
,

3176 
	mNL80211_MESHCONF_SYNC_OFFSET_MAX_NEIGHBOR
,

3177 
	mNL80211_MESHCONF_HT_OPMODE
,

3178 
	mNL80211_MESHCONF_HWMP_PATH_TO_ROOT_TIMEOUT
,

3179 
	mNL80211_MESHCONF_HWMP_ROOT_INTERVAL
,

3180 
	mNL80211_MESHCONF_HWMP_CONFIRMATION_INTERVAL
,

3181 
	mNL80211_MESHCONF_POWER_MODE
,

3182 
	mNL80211_MESHCONF_AWAKE_WINDOW
,

3183 
	mNL80211_MESHCONF_PLINK_TIMEOUT
,

3186 
	m__NL80211_MESHCONF_ATTR_AFTER_LAST
,

3187 
	mNL80211_MESHCONF_ATTR_MAX
 = 
__NL80211_MESHCONF_ATTR_AFTER_LAST
 - 1

3239 
	e∆80211_mesh_£tup_∑øms
 {

3240 
	m__NL80211_MESH_SETUP_INVALID
,

3241 
	mNL80211_MESH_SETUP_ENABLE_VENDOR_PATH_SEL
,

3242 
	mNL80211_MESH_SETUP_ENABLE_VENDOR_METRIC
,

3243 
	mNL80211_MESH_SETUP_IE
,

3244 
	mNL80211_MESH_SETUP_USERSPACE_AUTH
,

3245 
	mNL80211_MESH_SETUP_USERSPACE_AMPE
,

3246 
	mNL80211_MESH_SETUP_ENABLE_VENDOR_SYNC
,

3247 
	mNL80211_MESH_SETUP_USERSPACE_MPM
,

3248 
	mNL80211_MESH_SETUP_AUTH_PROTOCOL
,

3251 
	m__NL80211_MESH_SETUP_ATTR_AFTER_LAST
,

3252 
	mNL80211_MESH_SETUP_ATTR_MAX
 = 
__NL80211_MESH_SETUP_ATTR_AFTER_LAST
 - 1

3269 
	e∆80211_txq_©å
 {

3270 
	m__NL80211_TXQ_ATTR_INVALID
,

3271 
	mNL80211_TXQ_ATTR_AC
,

3272 
	mNL80211_TXQ_ATTR_TXOP
,

3273 
	mNL80211_TXQ_ATTR_CWMIN
,

3274 
	mNL80211_TXQ_ATTR_CWMAX
,

3275 
	mNL80211_TXQ_ATTR_AIFS
,

3278 
	m__NL80211_TXQ_ATTR_AFTER_LAST
,

3279 
	mNL80211_TXQ_ATTR_MAX
 = 
__NL80211_TXQ_ATTR_AFTER_LAST
 - 1

3282 
	e∆80211_ac
 {

3283 
	mNL80211_AC_VO
,

3284 
	mNL80211_AC_VI
,

3285 
	mNL80211_AC_BE
,

3286 
	mNL80211_AC_BK
,

3287 
	mNL80211_NUM_ACS


3291 
	#NL80211_TXQ_ATTR_QUEUE
 
NL80211_TXQ_ATTR_AC


	)

3292 
	#NL80211_TXQ_Q_VO
 
NL80211_AC_VO


	)

3293 
	#NL80211_TXQ_Q_VI
 
NL80211_AC_VI


	)

3294 
	#NL80211_TXQ_Q_BE
 
NL80211_AC_BE


	)

3295 
	#NL80211_TXQ_Q_BK
 
NL80211_AC_BK


	)

3306 
	e∆80211_ch™√l_ty≥
 {

3307 
	mNL80211_CHAN_NO_HT
,

3308 
	mNL80211_CHAN_HT20
,

3309 
	mNL80211_CHAN_HT40MINUS
,

3310 
	mNL80211_CHAN_HT40PLUS


3332 
	e∆80211_ch™_width
 {

3333 
	mNL80211_CHAN_WIDTH_20_NOHT
,

3334 
	mNL80211_CHAN_WIDTH_20
,

3335 
	mNL80211_CHAN_WIDTH_40
,

3336 
	mNL80211_CHAN_WIDTH_80
,

3337 
	mNL80211_CHAN_WIDTH_80P80
,

3338 
	mNL80211_CHAN_WIDTH_160
,

3339 
	mNL80211_CHAN_WIDTH_5
,

3340 
	mNL80211_CHAN_WIDTH_10
,

3352 
	e∆80211_bss_sˇn_width
 {

3353 
	mNL80211_BSS_CHAN_WIDTH_20
,

3354 
	mNL80211_BSS_CHAN_WIDTH_10
,

3355 
	mNL80211_BSS_CHAN_WIDTH_5
,

3400 
	e∆80211_bss
 {

3401 
	m__NL80211_BSS_INVALID
,

3402 
	mNL80211_BSS_BSSID
,

3403 
	mNL80211_BSS_FREQUENCY
,

3404 
	mNL80211_BSS_TSF
,

3405 
	mNL80211_BSS_BEACON_INTERVAL
,

3406 
	mNL80211_BSS_CAPABILITY
,

3407 
	mNL80211_BSS_INFORMATION_ELEMENTS
,

3408 
	mNL80211_BSS_SIGNAL_MBM
,

3409 
	mNL80211_BSS_SIGNAL_UNSPEC
,

3410 
	mNL80211_BSS_STATUS
,

3411 
	mNL80211_BSS_SEEN_MS_AGO
,

3412 
	mNL80211_BSS_BEACON_IES
,

3413 
	mNL80211_BSS_CHAN_WIDTH
,

3414 
	mNL80211_BSS_BEACON_TSF
,

3415 
	mNL80211_BSS_PRESP_DATA
,

3416 
	mNL80211_BSS_LAST_SEEN_BOOTTIME
,

3419 
	m__NL80211_BSS_AFTER_LAST
,

3420 
	mNL80211_BSS_MAX
 = 
__NL80211_BSS_AFTER_LAST
 - 1

3435 
	e∆80211_bss_°©us
 {

3436 
	mNL80211_BSS_STATUS_AUTHENTICATED
,

3437 
	mNL80211_BSS_STATUS_ASSOCIATED
,

3438 
	mNL80211_BSS_STATUS_IBSS_JOINED
,

3455 
	e∆80211_auth_ty≥
 {

3456 
	mNL80211_AUTHTYPE_OPEN_SYSTEM
,

3457 
	mNL80211_AUTHTYPE_SHARED_KEY
,

3458 
	mNL80211_AUTHTYPE_FT
,

3459 
	mNL80211_AUTHTYPE_NETWORK_EAP
,

3460 
	mNL80211_AUTHTYPE_SAE
,

3463 
	m__NL80211_AUTHTYPE_NUM
,

3464 
	mNL80211_AUTHTYPE_MAX
 = 
__NL80211_AUTHTYPE_NUM
 - 1,

3465 
	mNL80211_AUTHTYPE_AUTOMATIC


3475 
	e∆80211_key_ty≥
 {

3476 
	mNL80211_KEYTYPE_GROUP
,

3477 
	mNL80211_KEYTYPE_PAIRWISE
,

3478 
	mNL80211_KEYTYPE_PEERKEY
,

3480 
	mNUM_NL80211_KEYTYPES


3488 
	e∆80211_mÂ
 {

3489 
	mNL80211_MFP_NO
,

3490 
	mNL80211_MFP_REQUIRED
,

3493 
	e∆80211_w∑_vîsi⁄s
 {

3494 
	mNL80211_WPA_VERSION_1
 = 1 << 0,

3495 
	mNL80211_WPA_VERSION_2
 = 1 << 1,

3507 
	e∆80211_key_deÁu…_ty≥s
 {

3508 
	m__NL80211_KEY_DEFAULT_TYPE_INVALID
,

3509 
	mNL80211_KEY_DEFAULT_TYPE_UNICAST
,

3510 
	mNL80211_KEY_DEFAULT_TYPE_MULTICAST
,

3512 
	mNUM_NL80211_KEY_DEFAULT_TYPES


3537 
	e∆80211_key_©åibuãs
 {

3538 
	m__NL80211_KEY_INVALID
,

3539 
	mNL80211_KEY_DATA
,

3540 
	mNL80211_KEY_IDX
,

3541 
	mNL80211_KEY_CIPHER
,

3542 
	mNL80211_KEY_SEQ
,

3543 
	mNL80211_KEY_DEFAULT
,

3544 
	mNL80211_KEY_DEFAULT_MGMT
,

3545 
	mNL80211_KEY_TYPE
,

3546 
	mNL80211_KEY_DEFAULT_TYPES
,

3549 
	m__NL80211_KEY_AFTER_LAST
,

3550 
	mNL80211_KEY_MAX
 = 
__NL80211_KEY_AFTER_LAST
 - 1

3568 
	e∆80211_tx_øã_©åibuãs
 {

3569 
	m__NL80211_TXRATE_INVALID
,

3570 
	mNL80211_TXRATE_LEGACY
,

3571 
	mNL80211_TXRATE_HT
,

3572 
	mNL80211_TXRATE_VHT
,

3573 
	mNL80211_TXRATE_GI
,

3576 
	m__NL80211_TXRATE_AFTER_LAST
,

3577 
	mNL80211_TXRATE_MAX
 = 
__NL80211_TXRATE_AFTER_LAST
 - 1

3580 
	#NL80211_TXRATE_MCS
 
NL80211_TXRATE_HT


	)

3581 
	#NL80211_VHT_NSS_MAX
 8

	)

3587 
	s∆80211_txøã_vht
 {

3588 
__u16
 
	mmcs
[
NL80211_VHT_NSS_MAX
];

3591 
	e∆80211_txøã_gi
 {

3592 
	mNL80211_TXRATE_DEFAULT_GI
,

3593 
	mNL80211_TXRATE_FORCE_SGI
,

3594 
	mNL80211_TXRATE_FORCE_LGI
,

3603 
	e∆80211_b™d
 {

3604 
	mNL80211_BAND_2GHZ
,

3605 
	mNL80211_BAND_5GHZ
,

3606 
	mNL80211_BAND_60GHZ
,

3614 
	e∆80211_ps_°©e
 {

3615 
	mNL80211_PS_DISABLED
,

3616 
	mNL80211_PS_ENABLED
,

3647 
	e∆80211_©å_cqm
 {

3648 
	m__NL80211_ATTR_CQM_INVALID
,

3649 
	mNL80211_ATTR_CQM_RSSI_THOLD
,

3650 
	mNL80211_ATTR_CQM_RSSI_HYST
,

3651 
	mNL80211_ATTR_CQM_RSSI_THRESHOLD_EVENT
,

3652 
	mNL80211_ATTR_CQM_PKT_LOSS_EVENT
,

3653 
	mNL80211_ATTR_CQM_TXE_RATE
,

3654 
	mNL80211_ATTR_CQM_TXE_PKTS
,

3655 
	mNL80211_ATTR_CQM_TXE_INTVL
,

3656 
	mNL80211_ATTR_CQM_BEACON_LOSS_EVENT
,

3659 
	m__NL80211_ATTR_CQM_AFTER_LAST
,

3660 
	mNL80211_ATTR_CQM_MAX
 = 
__NL80211_ATTR_CQM_AFTER_LAST
 - 1

3671 
	e∆80211_cqm_rssi_thªshﬁd_evít
 {

3672 
	mNL80211_CQM_RSSI_THRESHOLD_EVENT_LOW
,

3673 
	mNL80211_CQM_RSSI_THRESHOLD_EVENT_HIGH
,

3674 
	mNL80211_CQM_RSSI_BEACON_LOSS_EVENT
,

3684 
	e∆80211_tx_powî_£âög
 {

3685 
	mNL80211_TX_POWER_AUTOMATIC
,

3686 
	mNL80211_TX_POWER_LIMITED
,

3687 
	mNL80211_TX_POWER_FIXED
,

3711 
	e∆80211_∑ckë_∑âîn_©å
 {

3712 
	m__NL80211_PKTPAT_INVALID
,

3713 
	mNL80211_PKTPAT_MASK
,

3714 
	mNL80211_PKTPAT_PATTERN
,

3715 
	mNL80211_PKTPAT_OFFSET
,

3717 
	mNUM_NL80211_PKTPAT
,

3718 
	mMAX_NL80211_PKTPAT
 = 
NUM_NL80211_PKTPAT
 - 1,

3734 
	s∆80211_∑âîn_suµ‹t
 {

3735 
__u32
 
	mmax_∑âîns
;

3736 
__u32
 
	mmö_∑âîn_Àn
;

3737 
__u32
 
	mmax_∑âîn_Àn
;

3738 
__u32
 
	mmax_pkt_off£t
;

3739 } 
__©åibuã__
((
∑cked
));

3742 
	#__NL80211_WOWLAN_PKTPAT_INVALID
 
__NL80211_PKTPAT_INVALID


	)

3743 
	#NL80211_WOWLAN_PKTPAT_MASK
 
NL80211_PKTPAT_MASK


	)

3744 
	#NL80211_WOWLAN_PKTPAT_PATTERN
 
NL80211_PKTPAT_PATTERN


	)

3745 
	#NL80211_WOWLAN_PKTPAT_OFFSET
 
NL80211_PKTPAT_OFFSET


	)

3746 
	#NUM_NL80211_WOWLAN_PKTPAT
 
NUM_NL80211_PKTPAT


	)

3747 
	#MAX_NL80211_WOWLAN_PKTPAT
 
MAX_NL80211_PKTPAT


	)

3748 
	#∆80211_wowœn_∑âîn_suµ‹t
 
∆80211_∑âîn_suµ‹t


	)

3839 
	e∆80211_wowœn_åiggîs
 {

3840 
	m__NL80211_WOWLAN_TRIG_INVALID
,

3841 
	mNL80211_WOWLAN_TRIG_ANY
,

3842 
	mNL80211_WOWLAN_TRIG_DISCONNECT
,

3843 
	mNL80211_WOWLAN_TRIG_MAGIC_PKT
,

3844 
	mNL80211_WOWLAN_TRIG_PKT_PATTERN
,

3845 
	mNL80211_WOWLAN_TRIG_GTK_REKEY_SUPPORTED
,

3846 
	mNL80211_WOWLAN_TRIG_GTK_REKEY_FAILURE
,

3847 
	mNL80211_WOWLAN_TRIG_EAP_IDENT_REQUEST
,

3848 
	mNL80211_WOWLAN_TRIG_4WAY_HANDSHAKE
,

3849 
	mNL80211_WOWLAN_TRIG_RFKILL_RELEASE
,

3850 
	mNL80211_WOWLAN_TRIG_WAKEUP_PKT_80211
,

3851 
	mNL80211_WOWLAN_TRIG_WAKEUP_PKT_80211_LEN
,

3852 
	mNL80211_WOWLAN_TRIG_WAKEUP_PKT_8023
,

3853 
	mNL80211_WOWLAN_TRIG_WAKEUP_PKT_8023_LEN
,

3854 
	mNL80211_WOWLAN_TRIG_TCP_CONNECTION
,

3855 
	mNL80211_WOWLAN_TRIG_WAKEUP_TCP_MATCH
,

3856 
	mNL80211_WOWLAN_TRIG_WAKEUP_TCP_CONNLOST
,

3857 
	mNL80211_WOWLAN_TRIG_WAKEUP_TCP_NOMORETOKENS
,

3858 
	mNL80211_WOWLAN_TRIG_NET_DETECT
,

3859 
	mNL80211_WOWLAN_TRIG_NET_DETECT_RESULTS
,

3862 
	mNUM_NL80211_WOWLAN_TRIG
,

3863 
	mMAX_NL80211_WOWLAN_TRIG
 = 
NUM_NL80211_WOWLAN_TRIG
 - 1

3899 
	s∆80211_wowœn_t˝_d©a_£q
 {

3900 
__u32
 
	m°¨t
, 
	moff£t
, 
	mÀn
;

3910 
	s∆80211_wowœn_t˝_d©a_tokí
 {

3911 
__u32
 
	moff£t
, 
	mÀn
;

3912 
__u8
 
	mtokí_°ªam
[];

3921 
	s∆80211_wowœn_t˝_d©a_tokí_„©uª
 {

3922 
__u32
 
	mmö_Àn
, 
	mmax_Àn
, 
	mbufsize
;

3957 
	e∆80211_wowœn_t˝_©ås
 {

3958 
	m__NL80211_WOWLAN_TCP_INVALID
,

3959 
	mNL80211_WOWLAN_TCP_SRC_IPV4
,

3960 
	mNL80211_WOWLAN_TCP_DST_IPV4
,

3961 
	mNL80211_WOWLAN_TCP_DST_MAC
,

3962 
	mNL80211_WOWLAN_TCP_SRC_PORT
,

3963 
	mNL80211_WOWLAN_TCP_DST_PORT
,

3964 
	mNL80211_WOWLAN_TCP_DATA_PAYLOAD
,

3965 
	mNL80211_WOWLAN_TCP_DATA_PAYLOAD_SEQ
,

3966 
	mNL80211_WOWLAN_TCP_DATA_PAYLOAD_TOKEN
,

3967 
	mNL80211_WOWLAN_TCP_DATA_INTERVAL
,

3968 
	mNL80211_WOWLAN_TCP_WAKE_PAYLOAD
,

3969 
	mNL80211_WOWLAN_TCP_WAKE_MASK
,

3972 
	mNUM_NL80211_WOWLAN_TCP
,

3973 
	mMAX_NL80211_WOWLAN_TCP
 = 
NUM_NL80211_WOWLAN_TCP
 - 1

3985 
	s∆80211_cﬂÀs˚_ruÀ_suµ‹t
 {

3986 
__u32
 
	mmax_ruÀs
;

3987 
∆80211_∑âîn_suµ‹t
 
	m∑t
;

3988 
__u32
 
	mmax_dñay
;

3989 } 
__©åibuã__
((
∑cked
));

4002 
	e∆80211_©å_cﬂÀs˚_ruÀ
 {

4003 
	m__NL80211_COALESCE_RULE_INVALID
,

4004 
	mNL80211_ATTR_COALESCE_RULE_DELAY
,

4005 
	mNL80211_ATTR_COALESCE_RULE_CONDITION
,

4006 
	mNL80211_ATTR_COALESCE_RULE_PKT_PATTERN
,

4009 
	mNUM_NL80211_ATTR_COALESCE_RULE
,

4010 
	mNL80211_ATTR_COALESCE_RULE_MAX
 = 
NUM_NL80211_ATTR_COALESCE_RULE
 - 1

4020 
	e∆80211_cﬂÀs˚_c⁄dôi⁄
 {

4021 
	mNL80211_COALESCE_CONDITION_MATCH
,

4022 
	mNL80211_COALESCE_CONDITION_NO_MATCH


4035 
	e∆80211_iÁ˚_limô_©ås
 {

4036 
	mNL80211_IFACE_LIMIT_UNSPEC
,

4037 
	mNL80211_IFACE_LIMIT_MAX
,

4038 
	mNL80211_IFACE_LIMIT_TYPES
,

4041 
	mNUM_NL80211_IFACE_LIMIT
,

4042 
	mMAX_NL80211_IFACE_LIMIT
 = 
NUM_NL80211_IFACE_LIMIT
 - 1

4091 
	e∆80211_if_combö©i⁄_©ås
 {

4092 
	mNL80211_IFACE_COMB_UNSPEC
,

4093 
	mNL80211_IFACE_COMB_LIMITS
,

4094 
	mNL80211_IFACE_COMB_MAXNUM
,

4095 
	mNL80211_IFACE_COMB_STA_AP_BI_MATCH
,

4096 
	mNL80211_IFACE_COMB_NUM_CHANNELS
,

4097 
	mNL80211_IFACE_COMB_RADAR_DETECT_WIDTHS
,

4098 
	mNL80211_IFACE_COMB_RADAR_DETECT_REGIONS
,

4101 
	mNUM_NL80211_IFACE_COMB
,

4102 
	mMAX_NL80211_IFACE_COMB
 = 
NUM_NL80211_IFACE_COMB
 - 1

4124 
	e∆80211_∂ök_°©e
 {

4125 
	mNL80211_PLINK_LISTEN
,

4126 
	mNL80211_PLINK_OPN_SNT
,

4127 
	mNL80211_PLINK_OPN_RCVD
,

4128 
	mNL80211_PLINK_CNF_RCVD
,

4129 
	mNL80211_PLINK_ESTAB
,

4130 
	mNL80211_PLINK_HOLDING
,

4131 
	mNL80211_PLINK_BLOCKED
,

4134 
	mNUM_NL80211_PLINK_STATES
,

4135 
	mMAX_NL80211_PLINK_STATES
 = 
NUM_NL80211_PLINK_STATES
 - 1

4146 
	e∂ök_a˘i⁄s
 {

4147 
	mNL80211_PLINK_ACTION_NO_ACTION
,

4148 
	mNL80211_PLINK_ACTION_OPEN
,

4149 
	mNL80211_PLINK_ACTION_BLOCK
,

4151 
	mNUM_NL80211_PLINK_ACTIONS
,

4155 
	#NL80211_KCK_LEN
 16

	)

4156 
	#NL80211_KEK_LEN
 16

	)

4157 
	#NL80211_REPLAY_CTR_LEN
 8

	)

4168 
	e∆80211_ªkey_d©a
 {

4169 
	m__NL80211_REKEY_DATA_INVALID
,

4170 
	mNL80211_REKEY_DATA_KEK
,

4171 
	mNL80211_REKEY_DATA_KCK
,

4172 
	mNL80211_REKEY_DATA_REPLAY_CTR
,

4175 
	mNUM_NL80211_REKEY_DATA
,

4176 
	mMAX_NL80211_REKEY_DATA
 = 
NUM_NL80211_REKEY_DATA
 - 1

4188 
	e∆80211_hiddí_ssid
 {

4189 
	mNL80211_HIDDEN_SSID_NOT_IN_USE
,

4190 
	mNL80211_HIDDEN_SSID_ZERO_LEN
,

4191 
	mNL80211_HIDDEN_SSID_ZERO_CONTENTS


4204 
	e∆80211_°a_wme_©å
 {

4205 
	m__NL80211_STA_WME_INVALID
,

4206 
	mNL80211_STA_WME_UAPSD_QUEUES
,

4207 
	mNL80211_STA_WME_MAX_SP
,

4210 
	m__NL80211_STA_WME_AFTER_LAST
,

4211 
	mNL80211_STA_WME_MAX
 = 
__NL80211_STA_WME_AFTER_LAST
 - 1

4226 
	e∆80211_pmkß_ˇndid©e_©å
 {

4227 
	m__NL80211_PMKSA_CANDIDATE_INVALID
,

4228 
	mNL80211_PMKSA_CANDIDATE_INDEX
,

4229 
	mNL80211_PMKSA_CANDIDATE_BSSID
,

4230 
	mNL80211_PMKSA_CANDIDATE_PREAUTH
,

4233 
	mNUM_NL80211_PMKSA_CANDIDATE
,

4234 
	mMAX_NL80211_PMKSA_CANDIDATE
 = 
NUM_NL80211_PMKSA_CANDIDATE
 - 1

4245 
	e∆80211_tdls_›î©i⁄
 {

4246 
	mNL80211_TDLS_DISCOVERY_REQ
,

4247 
	mNL80211_TDLS_SETUP
,

4248 
	mNL80211_TDLS_TEARDOWN
,

4249 
	mNL80211_TDLS_ENABLE_LINK
,

4250 
	mNL80211_TDLS_DISABLE_LINK
,

4354 
	e∆80211_„©uª_Êags
 {

4355 
	mNL80211_FEATURE_SK_TX_STATUS
 = 1 << 0,

4356 
	mNL80211_FEATURE_HT_IBSS
 = 1 << 1,

4357 
	mNL80211_FEATURE_INACTIVITY_TIMER
 = 1 << 2,

4358 
	mNL80211_FEATURE_CELL_BASE_REG_HINTS
 = 1 << 3,

4359 
	mNL80211_FEATURE_P2P_DEVICE_NEEDS_CHANNEL
 = 1 << 4,

4360 
	mNL80211_FEATURE_SAE
 = 1 << 5,

4361 
	mNL80211_FEATURE_LOW_PRIORITY_SCAN
 = 1 << 6,

4362 
	mNL80211_FEATURE_SCAN_FLUSH
 = 1 << 7,

4363 
	mNL80211_FEATURE_AP_SCAN
 = 1 << 8,

4364 
	mNL80211_FEATURE_VIF_TXPOWER
 = 1 << 9,

4365 
	mNL80211_FEATURE_NEED_OBSS_SCAN
 = 1 << 10,

4366 
	mNL80211_FEATURE_P2P_GO_CTWIN
 = 1 << 11,

4367 
	mNL80211_FEATURE_P2P_GO_OPPPS
 = 1 << 12,

4369 
	mNL80211_FEATURE_ADVERTISE_CHAN_LIMITS
 = 1 << 14,

4370 
	mNL80211_FEATURE_FULL_AP_CLIENT_STATE
 = 1 << 15,

4371 
	mNL80211_FEATURE_USERSPACE_MPM
 = 1 << 16,

4372 
	mNL80211_FEATURE_ACTIVE_MONITOR
 = 1 << 17,

4373 
	mNL80211_FEATURE_AP_MODE_CHAN_WIDTH_CHANGE
 = 1 << 18,

4374 
	mNL80211_FEATURE_DS_PARAM_SET_IE_IN_PROBES
 = 1 << 19,

4375 
	mNL80211_FEATURE_WFA_TPC_IE_IN_PROBES
 = 1 << 20,

4376 
	mNL80211_FEATURE_QUIET
 = 1 << 21,

4377 
	mNL80211_FEATURE_TX_POWER_INSERTION
 = 1 << 22,

4378 
	mNL80211_FEATURE_ACKTO_ESTIMATION
 = 1 << 23,

4379 
	mNL80211_FEATURE_STATIC_SMPS
 = 1 << 24,

4380 
	mNL80211_FEATURE_DYNAMIC_SMPS
 = 1 << 25,

4381 
	mNL80211_FEATURE_SUPPORTS_WMM_ADMISSION
 = 1 << 26,

4382 
	mNL80211_FEATURE_MAC_ON_CREATE
 = 1 << 27,

4383 
	mNL80211_FEATURE_TDLS_CHANNEL_SWITCH
 = 1 << 28,

4384 
	mNL80211_FEATURE_SCAN_RANDOM_MAC_ADDR
 = 1 << 29,

4385 
	mNL80211_FEATURE_SCHED_SCAN_RANDOM_MAC_ADDR
 = 1 << 30,

4386 
	mNL80211_FEATURE_ND_RANDOM_MAC_ADDR
 = 1 << 31,

4396 
	e∆80211_ext_„©uª_ödex
 {

4397 
	mNL80211_EXT_FEATURE_VHT_IBSS
,

4400 
	mNUM_NL80211_EXT_FEATURES
,

4401 
	mMAX_NL80211_EXT_FEATURES
 = 
NUM_NL80211_EXT_FEATURES
 - 1

4418 
	e∆80211_¥obe_ª•_ofÊﬂd_suµ‹t_©å
 {

4419 
	mNL80211_PROBE_RESP_OFFLOAD_SUPPORT_WPS
 = 1<<0,

4420 
	mNL80211_PROBE_RESP_OFFLOAD_SUPPORT_WPS2
 = 1<<1,

4421 
	mNL80211_PROBE_RESP_OFFLOAD_SUPPORT_P2P
 = 1<<2,

4422 
	mNL80211_PROBE_RESP_OFFLOAD_SUPPORT_80211U
 = 1<<3,

4431 
	e∆80211_c⁄√˘_Áûed_ªas⁄
 {

4432 
	mNL80211_CONN_FAIL_MAX_CLIENTS
,

4433 
	mNL80211_CONN_FAIL_BLOCKED_CLIENT
,

4460 
	e∆80211_sˇn_Êags
 {

4461 
	mNL80211_SCAN_FLAG_LOW_PRIORITY
 = 1<<0,

4462 
	mNL80211_SCAN_FLAG_FLUSH
 = 1<<1,

4463 
	mNL80211_SCAN_FLAG_AP
 = 1<<2,

4464 
	mNL80211_SCAN_FLAG_RANDOM_ADDR
 = 1<<3,

4480 
	e∆80211_a˛_pﬁicy
 {

4481 
	mNL80211_ACL_POLICY_ACCEPT_UNLESS_LISTED
,

4482 
	mNL80211_ACL_POLICY_DENY_UNLESS_LISTED
,

4495 
	e∆80211_smps_mode
 {

4496 
	mNL80211_SMPS_OFF
,

4497 
	mNL80211_SMPS_STATIC
,

4498 
	mNL80211_SMPS_DYNAMIC
,

4500 
	m__NL80211_SMPS_AFTER_LAST
,

4501 
	mNL80211_SMPS_MAX
 = 
__NL80211_SMPS_AFTER_LAST
 - 1

4519 
	e∆80211_ød¨_evít
 {

4520 
	mNL80211_RADAR_DETECTED
,

4521 
	mNL80211_RADAR_CAC_FINISHED
,

4522 
	mNL80211_RADAR_CAC_ABORTED
,

4523 
	mNL80211_RADAR_NOP_FINISHED
,

4537 
	e∆80211_dfs_°©e
 {

4538 
	mNL80211_DFS_USABLE
,

4539 
	mNL80211_DFS_UNAVAILABLE
,

4540 
	mNL80211_DFS_AVAILABLE
,

4551 
	e∆80211_¥Ÿocﬁ_„©uªs
 {

4552 
	mNL80211_PROTOCOL_FEATURE_SPLIT_WIPHY_DUMP
 = 1 << 0,

4564 
	e∆80211_¸ô_¥Ÿo_id
 {

4565 
	mNL80211_CRIT_PROTO_UNSPEC
,

4566 
	mNL80211_CRIT_PROTO_DHCP
,

4567 
	mNL80211_CRIT_PROTO_EAPOL
,

4568 
	mNL80211_CRIT_PROTO_APIPA
,

4570 
	mNUM_NL80211_CRIT_PROTO


4574 
	#NL80211_CRIT_PROTO_MAX_DURATION
 5000

	)

4583 
	e∆80211_rxmgmt_Êags
 {

4584 
	mNL80211_RXMGMT_FLAG_ANSWERED
 = 1 << 0,

4592 
	#NL80211_VENDOR_ID_IS_LINUX
 0x80000000

	)

4602 
	s∆80211_víd‹_cmd_öfo
 {

4603 
__u32
 
	mvíd‹_id
;

4604 
__u32
 
	msubcmd
;

4617 
	e∆80211_tdls_≥î_ˇ∑bûôy
 {

4618 
	mNL80211_TDLS_PEER_HT
 = 1<<0,

4619 
	mNL80211_TDLS_PEER_VHT
 = 1<<1,

4620 
	mNL80211_TDLS_PEER_WMM
 = 1<<2,

4636 
	e∆80211_sched_sˇn_∂™
 {

4637 
	m__NL80211_SCHED_SCAN_PLAN_INVALID
,

4638 
	mNL80211_SCHED_SCAN_PLAN_INTERVAL
,

4639 
	mNL80211_SCHED_SCAN_PLAN_ITERATIONS
,

4642 
	m__NL80211_SCHED_SCAN_PLAN_AFTER_LAST
,

4643 
	mNL80211_SCHED_SCAN_PLAN_MAX
 =

4644 
__NL80211_SCHED_SCAN_PLAN_AFTER_LAST
 - 1

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/linux/pkt_cls.h

1 #i‚de‡
__LINUX_PKT_CLS_H


2 
	#__LINUX_PKT_CLS_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_sched.h
>

10 
	mTCA_ACT_UNSPEC
,

11 
	mTCA_ACT_KIND
,

12 
	mTCA_ACT_OPTIONS
,

13 
	mTCA_ACT_INDEX
,

14 
	mTCA_ACT_STATS
,

15 
	m__TCA_ACT_MAX


18 
	#TCA_ACT_MAX
 
__TCA_ACT_MAX


	)

19 
	#TCA_OLD_COMPAT
 (
TCA_ACT_MAX
+1)

	)

20 
	#TCA_ACT_MAX_PRIO
 32

	)

21 
	#TCA_ACT_BIND
 1

	)

22 
	#TCA_ACT_NOBIND
 0

	)

23 
	#TCA_ACT_UNBIND
 1

	)

24 
	#TCA_ACT_NOUNBIND
 0

	)

25 
	#TCA_ACT_REPLACE
 1

	)

26 
	#TCA_ACT_NOREPLACE
 0

	)

28 
	#TC_ACT_UNSPEC
 (-1)

	)

29 
	#TC_ACT_OK
 0

	)

30 
	#TC_ACT_RECLASSIFY
 1

	)

31 
	#TC_ACT_SHOT
 2

	)

32 
	#TC_ACT_PIPE
 3

	)

33 
	#TC_ACT_STOLEN
 4

	)

34 
	#TC_ACT_QUEUED
 5

	)

35 
	#TC_ACT_REPEAT
 6

	)

36 
	#TC_ACT_REDIRECT
 7

	)

37 
	#TC_ACT_JUMP
 0x10000000

	)

41 
	mTCA_ID_UNSPEC
=0,

42 
	mTCA_ID_POLICE
=1,

44 
	m__TCA_ID_MAX
=255

47 
	#TCA_ID_MAX
 
__TCA_ID_MAX


	)

49 
	stc_pﬁi˚
 {

50 
__u32
 
	mödex
;

51 
	ma˘i⁄
;

52 
	#TC_POLICE_UNSPEC
 
TC_ACT_UNSPEC


	)

53 
	#TC_POLICE_OK
 
TC_ACT_OK


	)

54 
	#TC_POLICE_RECLASSIFY
 
TC_ACT_RECLASSIFY


	)

55 
	#TC_POLICE_SHOT
 
TC_ACT_SHOT


	)

56 
	#TC_POLICE_PIPE
 
TC_ACT_PIPE


	)

58 
__u32
 
	mlimô
;

59 
__u32
 
	mbur°
;

60 
__u32
 
	mmtu
;

61 
tc_øã•ec
 
	møã
;

62 
tc_øã•ec
 
	m≥akøã
;

63 
	mªf˙t
;

64 
	mböd˙t
;

65 
__u32
 
	mˇ∑b
;

68 
	stcf_t
 {

69 
__u64
 
	mö°Æl
;

70 
__u64
 
	mœ°u£
;

71 
__u64
 
	mexpúes
;

74 
	stc_˙t
 {

75 
	mªf˙t
;

76 
	mböd˙t
;

79 
	#tc_gí
 \

80 
__u32
 
ödex
; \

81 
__u32
 
ˇ∑b
; \

82 
a˘i⁄
; \

83 
ªf˙t
; \

84 
böd˙t


	)

87 
	mTCA_POLICE_UNSPEC
,

88 
	mTCA_POLICE_TBF
,

89 
	mTCA_POLICE_RATE
,

90 
	mTCA_POLICE_PEAKRATE
,

91 
	mTCA_POLICE_AVRATE
,

92 
	mTCA_POLICE_RESULT
,

93 
	m__TCA_POLICE_MAX


94 
	#TCA_POLICE_RESULT
 
TCA_POLICE_RESULT


	)

97 
	#TCA_POLICE_MAX
 (
__TCA_POLICE_MAX
 - 1)

	)

101 
	#TC_U32_HTID
(
h
Ë((h)&0xFFF00000)

	)

102 
	#TC_U32_USERHTID
(
h
Ë(
	`TC_U32_HTID
(h)>>20)

	)

103 
	#TC_U32_HASH
(
h
Ë(((h)>>12)&0xFF)

	)

104 
	#TC_U32_NODE
(
h
Ë((h)&0xFFF)

	)

105 
	#TC_U32_KEY
(
h
Ë((h)&0xFFFFF)

	)

106 
	#TC_U32_UNSPEC
 0

	)

107 
	#TC_U32_ROOT
 (0xFFF00000)

	)

110 
	mTCA_U32_UNSPEC
,

111 
	mTCA_U32_CLASSID
,

112 
	mTCA_U32_HASH
,

113 
	mTCA_U32_LINK
,

114 
	mTCA_U32_DIVISOR
,

115 
	mTCA_U32_SEL
,

116 
	mTCA_U32_POLICE
,

117 
	mTCA_U32_ACT
,

118 
	mTCA_U32_INDEV
,

119 
	mTCA_U32_PCNT
,

120 
	mTCA_U32_MARK
,

121 
	m__TCA_U32_MAX


124 
	#TCA_U32_MAX
 (
__TCA_U32_MAX
 - 1)

	)

126 
	stc_u32_key
 {

127 
__be32
 
	mmask
;

128 
__be32
 
	mvÆ
;

129 
	moff
;

130 
	moffmask
;

133 
	stc_u32_£l
 {

134 
	mÊags
;

135 
	moffshi·
;

136 
	mnkeys
;

138 
__be16
 
	moffmask
;

139 
__u16
 
	moff
;

140 
	moffoff
;

142 
	mhoff
;

143 
__be32
 
	mhmask
;

144 
tc_u32_key
 
	mkeys
[0];

147 
	stc_u32_m¨k
 {

148 
__u32
 
	mvÆ
;

149 
__u32
 
	mmask
;

150 
__u32
 
	msuc˚ss
;

153 
	stc_u32_p˙t
 {

154 
__u64
 
	mr˙t
;

155 
__u64
 
	mrhô
;

156 
__u64
 
	mk˙ts
[0];

161 
	#TC_U32_TERMINAL
 1

	)

162 
	#TC_U32_OFFSET
 2

	)

163 
	#TC_U32_VAROFFSET
 4

	)

164 
	#TC_U32_EAT
 8

	)

166 
	#TC_U32_MAXDEPTH
 8

	)

172 
	mTCA_RSVP_UNSPEC
,

173 
	mTCA_RSVP_CLASSID
,

174 
	mTCA_RSVP_DST
,

175 
	mTCA_RSVP_SRC
,

176 
	mTCA_RSVP_PINFO
,

177 
	mTCA_RSVP_POLICE
,

178 
	mTCA_RSVP_ACT
,

179 
	m__TCA_RSVP_MAX


182 
	#TCA_RSVP_MAX
 (
__TCA_RSVP_MAX
 - 1 )

	)

184 
	stc_rsvp_gpi
 {

185 
__u32
 
	mkey
;

186 
__u32
 
	mmask
;

187 
	moff£t
;

190 
	stc_rsvp_pöfo
 {

191 
tc_rsvp_gpi
 
	mdpi
;

192 
tc_rsvp_gpi
 
	m•i
;

193 
__u8
 
	m¥Ÿocﬁ
;

194 
__u8
 
	mtu¬ñid
;

195 
__u8
 
	mtu¬ñhdr
;

196 
__u8
 
	m∑d
;

202 
	mTCA_ROUTE4_UNSPEC
,

203 
	mTCA_ROUTE4_CLASSID
,

204 
	mTCA_ROUTE4_TO
,

205 
	mTCA_ROUTE4_FROM
,

206 
	mTCA_ROUTE4_IIF
,

207 
	mTCA_ROUTE4_POLICE
,

208 
	mTCA_ROUTE4_ACT
,

209 
	m__TCA_ROUTE4_MAX


212 
	#TCA_ROUTE4_MAX
 (
__TCA_ROUTE4_MAX
 - 1)

	)

218 
	mTCA_FW_UNSPEC
,

219 
	mTCA_FW_CLASSID
,

220 
	mTCA_FW_POLICE
,

221 
	mTCA_FW_INDEV
,

222 
	mTCA_FW_ACT
,

223 
	mTCA_FW_MASK
,

224 
	m__TCA_FW_MAX


227 
	#TCA_FW_MAX
 (
__TCA_FW_MAX
 - 1)

	)

232 
	mTCA_TCINDEX_UNSPEC
,

233 
	mTCA_TCINDEX_HASH
,

234 
	mTCA_TCINDEX_MASK
,

235 
	mTCA_TCINDEX_SHIFT
,

236 
	mTCA_TCINDEX_FALL_THROUGH
,

237 
	mTCA_TCINDEX_CLASSID
,

238 
	mTCA_TCINDEX_POLICE
,

239 
	mTCA_TCINDEX_ACT
,

240 
	m__TCA_TCINDEX_MAX


243 
	#TCA_TCINDEX_MAX
 (
__TCA_TCINDEX_MAX
 - 1)

	)

248 
	mFLOW_KEY_SRC
,

249 
	mFLOW_KEY_DST
,

250 
	mFLOW_KEY_PROTO
,

251 
	mFLOW_KEY_PROTO_SRC
,

252 
	mFLOW_KEY_PROTO_DST
,

253 
	mFLOW_KEY_IIF
,

254 
	mFLOW_KEY_PRIORITY
,

255 
	mFLOW_KEY_MARK
,

256 
	mFLOW_KEY_NFCT
,

257 
	mFLOW_KEY_NFCT_SRC
,

258 
	mFLOW_KEY_NFCT_DST
,

259 
	mFLOW_KEY_NFCT_PROTO_SRC
,

260 
	mFLOW_KEY_NFCT_PROTO_DST
,

261 
	mFLOW_KEY_RTCLASSID
,

262 
	mFLOW_KEY_SKUID
,

263 
	mFLOW_KEY_SKGID
,

264 
	mFLOW_KEY_VLAN_TAG
,

265 
	mFLOW_KEY_RXHASH
,

266 
	m__FLOW_KEY_MAX
,

269 
	#FLOW_KEY_MAX
 (
__FLOW_KEY_MAX
 - 1)

	)

272 
	mFLOW_MODE_MAP
,

273 
	mFLOW_MODE_HASH
,

277 
	mTCA_FLOW_UNSPEC
,

278 
	mTCA_FLOW_KEYS
,

279 
	mTCA_FLOW_MODE
,

280 
	mTCA_FLOW_BASECLASS
,

281 
	mTCA_FLOW_RSHIFT
,

282 
	mTCA_FLOW_ADDEND
,

283 
	mTCA_FLOW_MASK
,

284 
	mTCA_FLOW_XOR
,

285 
	mTCA_FLOW_DIVISOR
,

286 
	mTCA_FLOW_ACT
,

287 
	mTCA_FLOW_POLICE
,

288 
	mTCA_FLOW_EMATCHES
,

289 
	mTCA_FLOW_PERTURB
,

290 
	m__TCA_FLOW_MAX


293 
	#TCA_FLOW_MAX
 (
__TCA_FLOW_MAX
 - 1)

	)

298 
	mTCA_BASIC_UNSPEC
,

299 
	mTCA_BASIC_CLASSID
,

300 
	mTCA_BASIC_EMATCHES
,

301 
	mTCA_BASIC_ACT
,

302 
	mTCA_BASIC_POLICE
,

303 
	m__TCA_BASIC_MAX


306 
	#TCA_BASIC_MAX
 (
__TCA_BASIC_MAX
 - 1)

	)

312 
	mTCA_CGROUP_UNSPEC
,

313 
	mTCA_CGROUP_ACT
,

314 
	mTCA_CGROUP_POLICE
,

315 
	mTCA_CGROUP_EMATCHES
,

316 
	m__TCA_CGROUP_MAX
,

319 
	#TCA_CGROUP_MAX
 (
__TCA_CGROUP_MAX
 - 1)

	)

323 
	#TCA_BPF_FLAG_ACT_DIRECT
 (1 << 0)

	)

326 
	mTCA_BPF_UNSPEC
,

327 
	mTCA_BPF_ACT
,

328 
	mTCA_BPF_POLICE
,

329 
	mTCA_BPF_CLASSID
,

330 
	mTCA_BPF_OPS_LEN
,

331 
	mTCA_BPF_OPS
,

332 
	mTCA_BPF_FD
,

333 
	mTCA_BPF_NAME
,

334 
	mTCA_BPF_FLAGS
,

335 
	m__TCA_BPF_MAX
,

338 
	#TCA_BPF_MAX
 (
__TCA_BPF_MAX
 - 1)

	)

343 
	mTCA_FLOWER_UNSPEC
,

344 
	mTCA_FLOWER_CLASSID
,

345 
	mTCA_FLOWER_INDEV
,

346 
	mTCA_FLOWER_ACT
,

347 
	mTCA_FLOWER_KEY_ETH_DST
,

348 
	mTCA_FLOWER_KEY_ETH_DST_MASK
,

349 
	mTCA_FLOWER_KEY_ETH_SRC
,

350 
	mTCA_FLOWER_KEY_ETH_SRC_MASK
,

351 
	mTCA_FLOWER_KEY_ETH_TYPE
,

352 
	mTCA_FLOWER_KEY_IP_PROTO
,

353 
	mTCA_FLOWER_KEY_IPV4_SRC
,

354 
	mTCA_FLOWER_KEY_IPV4_SRC_MASK
,

355 
	mTCA_FLOWER_KEY_IPV4_DST
,

356 
	mTCA_FLOWER_KEY_IPV4_DST_MASK
,

357 
	mTCA_FLOWER_KEY_IPV6_SRC
,

358 
	mTCA_FLOWER_KEY_IPV6_SRC_MASK
,

359 
	mTCA_FLOWER_KEY_IPV6_DST
,

360 
	mTCA_FLOWER_KEY_IPV6_DST_MASK
,

361 
	mTCA_FLOWER_KEY_TCP_SRC
,

362 
	mTCA_FLOWER_KEY_TCP_DST
,

363 
	mTCA_FLOWER_KEY_UDP_SRC
,

364 
	mTCA_FLOWER_KEY_UDP_DST
,

365 
	m__TCA_FLOWER_MAX
,

368 
	#TCA_FLOWER_MAX
 (
__TCA_FLOWER_MAX
 - 1)

	)

373 
	mTCA_MATCHALL_UNSPEC
,

374 
	mTCA_MATCHALL_CLASSID
,

375 
	mTCA_MATCHALL_ACT
,

376 
	m__TCA_MATCHALL_MAX
,

379 
	#TCA_MATCHALL_MAX
 (
__TCA_MATCHALL_MAX
 - 1)

	)

383 
	stcf_em©ch_åì_hdr
 {

384 
__u16
 
	mnm©ches
;

385 
__u16
 
	m¥ogid
;

389 
	mTCA_EMATCH_TREE_UNSPEC
,

390 
	mTCA_EMATCH_TREE_HDR
,

391 
	mTCA_EMATCH_TREE_LIST
,

392 
	m__TCA_EMATCH_TREE_MAX


394 
	#TCA_EMATCH_TREE_MAX
 (
__TCA_EMATCH_TREE_MAX
 - 1)

	)

396 
	stcf_em©ch_hdr
 {

397 
__u16
 
	mm©chid
;

398 
__u16
 
	mköd
;

399 
__u16
 
	mÊags
;

400 
__u16
 
	m∑d
;

417 
	#TCF_EM_REL_END
 0

	)

418 
	#TCF_EM_REL_AND
 (1<<0)

	)

419 
	#TCF_EM_REL_OR
 (1<<1)

	)

420 
	#TCF_EM_INVERT
 (1<<2)

	)

421 
	#TCF_EM_SIMPLE
 (1<<3)

	)

423 
	#TCF_EM_REL_MASK
 3

	)

424 
	#TCF_EM_REL_VALID
(
v
Ë(((vË& 
TCF_EM_REL_MASK
Ë!TCF_EM_REL_MASK)

	)

427 
	mTCF_LAYER_LINK
,

428 
	mTCF_LAYER_NETWORK
,

429 
	mTCF_LAYER_TRANSPORT
,

430 
	m__TCF_LAYER_MAX


432 
	#TCF_LAYER_MAX
 (
__TCF_LAYER_MAX
 - 1)

	)

438 
	#TCF_EM_CONTAINER
 0

	)

439 
	#TCF_EM_CMP
 1

	)

440 
	#TCF_EM_NBYTE
 2

	)

441 
	#TCF_EM_U32
 3

	)

442 
	#TCF_EM_META
 4

	)

443 
	#TCF_EM_TEXT
 5

	)

444 
	#TCF_EM_VLAN
 6

	)

445 
	#TCF_EM_CANID
 7

	)

446 
	#TCF_EM_IPSET
 8

	)

447 
	#TCF_EM_MAX
 8

	)

450 
	mTCF_EM_PROG_TC


454 
	mTCF_EM_OPND_EQ
,

455 
	mTCF_EM_OPND_GT
,

456 
	mTCF_EM_OPND_LT


	@/usr/include/linux/pkt_sched.h

1 #i‚de‡
__LINUX_PKT_SCHED_H


2 
	#__LINUX_PKT_SCHED_H


	)

4 
	~<löux/ty≥s.h
>

19 
	#TC_PRIO_BESTEFFORT
 0

	)

20 
	#TC_PRIO_FILLER
 1

	)

21 
	#TC_PRIO_BULK
 2

	)

22 
	#TC_PRIO_INTERACTIVE_BULK
 4

	)

23 
	#TC_PRIO_INTERACTIVE
 6

	)

24 
	#TC_PRIO_CONTROL
 7

	)

26 
	#TC_PRIO_MAX
 15

	)

32 
	stc_°©s
 {

33 
__u64
 
	mbyãs
;

34 
__u32
 
	m∑ckës
;

35 
__u32
 
	mdr›s
;

36 
__u32
 
	movîlimôs
;

38 
__u32
 
	mbps
;

39 
__u32
 
	mµs
;

40 
__u32
 
	mqÀn
;

41 
__u32
 
	mbacklog
;

44 
	stc_e°im©‹
 {

45 sig√d 
	möãrvÆ
;

46 
	mewma_log
;

66 
	#TC_H_MAJ_MASK
 (0xFFFF0000U)

	)

67 
	#TC_H_MIN_MASK
 (0x0000FFFFU)

	)

68 
	#TC_H_MAJ
(
h
Ë((h)&
TC_H_MAJ_MASK
)

	)

69 
	#TC_H_MIN
(
h
Ë((h)&
TC_H_MIN_MASK
)

	)

70 
	#TC_H_MAKE
(
maj
,
mö
Ë(((maj)&
TC_H_MAJ_MASK
)|((mö)&
TC_H_MIN_MASK
))

	)

72 
	#TC_H_UNSPEC
 (0U)

	)

73 
	#TC_H_ROOT
 (0xFFFFFFFFU)

	)

74 
	#TC_H_INGRESS
 (0xFFFFFFF1U)

	)

77 
	etc_lök_œyî
 {

78 
	mTC_LINKLAYER_UNAWARE
,

79 
	mTC_LINKLAYER_ETHERNET
,

80 
	mTC_LINKLAYER_ATM
,

82 
	#TC_LINKLAYER_MASK
 0x0F

	)

84 
	stc_øã•ec
 {

85 
	m˚Œ_log
;

86 
__u8
 
	mlökœyî
;

87 
	movîhód
;

88 
	m˚Œ_Æign
;

89 
	mmpu
;

90 
__u32
 
	møã
;

93 
	#TC_RTAB_SIZE
 1024

	)

95 
	stc_size•ec
 {

96 
	m˚Œ_log
;

97 
	msize_log
;

98 
	m˚Œ_Æign
;

99 
	movîhód
;

100 
	mlökœyî
;

101 
	mmpu
;

102 
	mmtu
;

103 
	mtsize
;

107 
	mTCA_STAB_UNSPEC
,

108 
	mTCA_STAB_BASE
,

109 
	mTCA_STAB_DATA
,

110 
	m__TCA_STAB_MAX


113 
	#TCA_STAB_MAX
 (
__TCA_STAB_MAX
 - 1)

	)

117 
	stc_fifo_q›t
 {

118 
__u32
 
	mlimô
;

123 
	#TCQ_PRIO_BANDS
 16

	)

124 
	#TCQ_MIN_PRIO_BANDS
 2

	)

126 
	stc_¥io_q›t
 {

127 
	mb™ds
;

128 
__u8
 
	m¥iom≠
[
TC_PRIO_MAX
+1];

133 
	stc_mu…iq_q›t
 {

134 
__u16
 
	mb™ds
;

135 
__u16
 
	mmax_b™ds
;

140 
	#TCQ_PLUG_BUFFER
 0

	)

141 
	#TCQ_PLUG_RELEASE_ONE
 1

	)

142 
	#TCQ_PLUG_RELEASE_INDEFINITE
 2

	)

143 
	#TCQ_PLUG_LIMIT
 3

	)

145 
	stc_∂ug_q›t
 {

155 
	ma˘i⁄
;

156 
__u32
 
	mlimô
;

161 
	stc_tbf_q›t
 {

162 
tc_øã•ec
 
	møã
;

163 
tc_øã•ec
 
	m≥akøã
;

164 
__u32
 
	mlimô
;

165 
__u32
 
	mbuf„r
;

166 
__u32
 
	mmtu
;

170 
	mTCA_TBF_UNSPEC
,

171 
	mTCA_TBF_PARMS
,

172 
	mTCA_TBF_RTAB
,

173 
	mTCA_TBF_PTAB
,

174 
	mTCA_TBF_RATE64
,

175 
	mTCA_TBF_PRATE64
,

176 
	mTCA_TBF_BURST
,

177 
	mTCA_TBF_PBURST
,

178 
	m__TCA_TBF_MAX
,

181 
	#TCA_TBF_MAX
 (
__TCA_TBF_MAX
 - 1)

	)

190 
	stc_sfq_q›t
 {

191 
	mqu™tum
;

192 
	m≥πurb_≥riod
;

193 
__u32
 
	mlimô
;

194 
	mdivis‹
;

195 
	mÊows
;

198 
	stc_sfqªd_°©s
 {

199 
__u32
 
	m¥ob_dr›
;

200 
__u32
 
	mf‹˚d_dr›
;

201 
__u32
 
	m¥ob_m¨k
;

202 
__u32
 
	mf‹˚d_m¨k
;

203 
__u32
 
	m¥ob_m¨k_hód
;

204 
__u32
 
	mf‹˚d_m¨k_hód
;

207 
	stc_sfq_q›t_v1
 {

208 
tc_sfq_q›t
 
	mv0
;

209 
	mdïth
;

210 
	mhóddr›
;

212 
__u32
 
	mlimô
;

213 
__u32
 
	mqth_mö
;

214 
__u32
 
	mqth_max
;

215 
	mWlog
;

216 
	mPlog
;

217 
	mS˚Œ_log
;

218 
	mÊags
;

219 
__u32
 
	mmax_P
;

221 
tc_sfqªd_°©s
 
	m°©s
;

225 
	stc_sfq_x°©s
 {

226 
__s32
 
	mÆlŸ
;

232 
	mTCA_RED_UNSPEC
,

233 
	mTCA_RED_PARMS
,

234 
	mTCA_RED_STAB
,

235 
	mTCA_RED_MAX_P
,

236 
	m__TCA_RED_MAX
,

239 
	#TCA_RED_MAX
 (
__TCA_RED_MAX
 - 1)

	)

241 
	stc_ªd_q›t
 {

242 
__u32
 
	mlimô
;

243 
__u32
 
	mqth_mö
;

244 
__u32
 
	mqth_max
;

245 
	mWlog
;

246 
	mPlog
;

247 
	mS˚Œ_log
;

248 
	mÊags
;

249 
	#TC_RED_ECN
 1

	)

250 
	#TC_RED_HARDDROP
 2

	)

251 
	#TC_RED_ADAPTATIVE
 4

	)

254 
	stc_ªd_x°©s
 {

255 
__u32
 
	móæy
;

256 
__u32
 
	mpdr›
;

257 
__u32
 
	mŸhî
;

258 
__u32
 
	mm¨ked
;

263 
	#MAX_DPs
 16

	)

266 
	mTCA_GRED_UNSPEC
,

267 
	mTCA_GRED_PARMS
,

268 
	mTCA_GRED_STAB
,

269 
	mTCA_GRED_DPS
,

270 
	mTCA_GRED_MAX_P
,

271 
	mTCA_GRED_LIMIT
,

272 
	m__TCA_GRED_MAX
,

275 
	#TCA_GRED_MAX
 (
__TCA_GRED_MAX
 - 1)

	)

277 
	stc_gªd_q›t
 {

278 
__u32
 
	mlimô
;

279 
__u32
 
	mqth_mö
;

280 
__u32
 
	mqth_max
;

281 
__u32
 
	mDP
;

282 
__u32
 
	mbacklog
;

283 
__u32
 
	mqave
;

284 
__u32
 
	mf‹˚d
;

285 
__u32
 
	móæy
;

286 
__u32
 
	mŸhî
;

287 
__u32
 
	mpdr›
;

288 
__u8
 
	mWlog
;

289 
__u8
 
	mPlog
;

290 
__u8
 
	mS˚Œ_log
;

291 
__u8
 
	m¥io
;

292 
__u32
 
	m∑ckës
;

293 
__u32
 
	mbyãsö
;

297 
	stc_gªd_s›t
 {

298 
__u32
 
	mDPs
;

299 
__u32
 
	mdef_DP
;

300 
__u8
 
	mgrio
;

301 
__u8
 
	mÊags
;

302 
__u16
 
	m∑d1
;

308 
	mTCA_CHOKE_UNSPEC
,

309 
	mTCA_CHOKE_PARMS
,

310 
	mTCA_CHOKE_STAB
,

311 
	mTCA_CHOKE_MAX_P
,

312 
	m__TCA_CHOKE_MAX
,

315 
	#TCA_CHOKE_MAX
 (
__TCA_CHOKE_MAX
 - 1)

	)

317 
	stc_choke_q›t
 {

318 
__u32
 
	mlimô
;

319 
__u32
 
	mqth_mö
;

320 
__u32
 
	mqth_max
;

321 
	mWlog
;

322 
	mPlog
;

323 
	mS˚Œ_log
;

324 
	mÊags
;

327 
	stc_choke_x°©s
 {

328 
__u32
 
	móæy
;

329 
__u32
 
	mpdr›
;

330 
__u32
 
	mŸhî
;

331 
__u32
 
	mm¨ked
;

332 
__u32
 
	mm©ched
;

336 
	#TC_HTB_NUMPRIO
 8

	)

337 
	#TC_HTB_MAXDEPTH
 8

	)

338 
	#TC_HTB_PROTOVER
 3

	)

340 
	stc_htb_›t
 {

341 
tc_øã•ec
 
	møã
;

342 
tc_øã•ec
 
	m˚û
;

343 
__u32
 
	mbuf„r
;

344 
__u32
 
	mcbuf„r
;

345 
__u32
 
	mqu™tum
;

346 
__u32
 
	mÀvñ
;

347 
__u32
 
	m¥io
;

349 
	stc_htb_glob
 {

350 
__u32
 
	mvîsi⁄
;

351 
__u32
 
	møã2qu™tum
;

352 
__u32
 
	mdef˛s
;

353 
__u32
 
	mdebug
;

356 
__u32
 
	mdúe˘_pkts
;

359 
	mTCA_HTB_UNSPEC
,

360 
	mTCA_HTB_PARMS
,

361 
	mTCA_HTB_INIT
,

362 
	mTCA_HTB_CTAB
,

363 
	mTCA_HTB_RTAB
,

364 
	mTCA_HTB_DIRECT_QLEN
,

365 
	mTCA_HTB_RATE64
,

366 
	mTCA_HTB_CEIL64
,

367 
	m__TCA_HTB_MAX
,

370 
	#TCA_HTB_MAX
 (
__TCA_HTB_MAX
 - 1)

	)

372 
	stc_htb_x°©s
 {

373 
__u32
 
	mÀnds
;

374 
__u32
 
	mb‹rows
;

375 
__u32
 
	mgü¡s
;

376 
__u32
 
	mtokís
;

377 
__u32
 
	m˘okís
;

382 
	stc_hfsc_q›t
 {

383 
__u16
 
	mdef˛s
;

386 
	stc_£rvi˚_curve
 {

387 
__u32
 
	mm1
;

388 
__u32
 
	md
;

389 
__u32
 
	mm2
;

392 
	stc_hfsc_°©s
 {

393 
__u64
 
	mw‹k
;

394 
__u64
 
	mπw‹k
;

395 
__u32
 
	m≥riod
;

396 
__u32
 
	mÀvñ
;

400 
	mTCA_HFSC_UNSPEC
,

401 
	mTCA_HFSC_RSC
,

402 
	mTCA_HFSC_FSC
,

403 
	mTCA_HFSC_USC
,

404 
	m__TCA_HFSC_MAX
,

407 
	#TCA_HFSC_MAX
 (
__TCA_HFSC_MAX
 - 1)

	)

412 
	#TC_CBQ_MAXPRIO
 8

	)

413 
	#TC_CBQ_MAXLEVEL
 8

	)

414 
	#TC_CBQ_DEF_EWMA
 5

	)

416 
	stc_cbq_lss›t
 {

417 
	mch™ge
;

418 
	mÊags
;

419 
	#TCF_CBQ_LSS_BOUNDED
 1

	)

420 
	#TCF_CBQ_LSS_ISOLATED
 2

	)

421 
	mewma_log
;

422 
	mÀvñ
;

423 
	#TCF_CBQ_LSS_FLAGS
 1

	)

424 
	#TCF_CBQ_LSS_EWMA
 2

	)

425 
	#TCF_CBQ_LSS_MAXIDLE
 4

	)

426 
	#TCF_CBQ_LSS_MINIDLE
 8

	)

427 
	#TCF_CBQ_LSS_OFFTIME
 0x10

	)

428 
	#TCF_CBQ_LSS_AVPKT
 0x20

	)

429 
__u32
 
	mmaxidÀ
;

430 
__u32
 
	mmöidÀ
;

431 
__u32
 
	mof·ime
;

432 
__u32
 
	mavpkt
;

435 
	stc_cbq_wº›t
 {

436 
	mÊags
;

437 
	m¥i‹ôy
;

438 
	m˝ri‹ôy
;

439 
	m__ª£rved
;

440 
__u32
 
	mÆlŸ
;

441 
__u32
 
	mweight
;

444 
	stc_cbq_ovl
 {

445 
	m°øãgy
;

446 
	#TC_CBQ_OVL_CLASSIC
 0

	)

447 
	#TC_CBQ_OVL_DELAY
 1

	)

448 
	#TC_CBQ_OVL_LOWPRIO
 2

	)

449 
	#TC_CBQ_OVL_DROP
 3

	)

450 
	#TC_CBQ_OVL_RCLASSIC
 4

	)

451 
	m¥i‹ôy2
;

452 
__u16
 
	m∑d
;

453 
__u32
 
	m≥«…y
;

456 
	stc_cbq_pﬁi˚
 {

457 
	mpﬁi˚
;

458 
	m__ªs1
;

459 
	m__ªs2
;

462 
	stc_cbq_f›t
 {

463 
__u32
 
	m•lô
;

464 
__u32
 
	mdefm≠
;

465 
__u32
 
	mdefch™ge
;

468 
	stc_cbq_x°©s
 {

469 
__u32
 
	mb‹rows
;

470 
__u32
 
	movîa˘i⁄s
;

471 
__s32
 
	mavgidÀ
;

472 
__s32
 
	mundîtime
;

476 
	mTCA_CBQ_UNSPEC
,

477 
	mTCA_CBQ_LSSOPT
,

478 
	mTCA_CBQ_WRROPT
,

479 
	mTCA_CBQ_FOPT
,

480 
	mTCA_CBQ_OVL_STRATEGY
,

481 
	mTCA_CBQ_RATE
,

482 
	mTCA_CBQ_RTAB
,

483 
	mTCA_CBQ_POLICE
,

484 
	m__TCA_CBQ_MAX
,

487 
	#TCA_CBQ_MAX
 (
__TCA_CBQ_MAX
 - 1)

	)

492 
	mTCA_DSMARK_UNSPEC
,

493 
	mTCA_DSMARK_INDICES
,

494 
	mTCA_DSMARK_DEFAULT_INDEX
,

495 
	mTCA_DSMARK_SET_TC_INDEX
,

496 
	mTCA_DSMARK_MASK
,

497 
	mTCA_DSMARK_VALUE
,

498 
	m__TCA_DSMARK_MAX
,

501 
	#TCA_DSMARK_MAX
 (
__TCA_DSMARK_MAX
 - 1)

	)

506 
	mTCA_ATM_UNSPEC
,

507 
	mTCA_ATM_FD
,

508 
	mTCA_ATM_PTR
,

509 
	mTCA_ATM_HDR
,

510 
	mTCA_ATM_EXCESS
,

511 
	mTCA_ATM_ADDR
,

512 
	mTCA_ATM_STATE
,

513 
	m__TCA_ATM_MAX
,

516 
	#TCA_ATM_MAX
 (
__TCA_ATM_MAX
 - 1)

	)

521 
	mTCA_NETEM_UNSPEC
,

522 
	mTCA_NETEM_CORR
,

523 
	mTCA_NETEM_DELAY_DIST
,

524 
	mTCA_NETEM_REORDER
,

525 
	mTCA_NETEM_CORRUPT
,

526 
	mTCA_NETEM_LOSS
,

527 
	mTCA_NETEM_RATE
,

528 
	mTCA_NETEM_ECN
,

529 
	mTCA_NETEM_RATE64
,

530 
	m__TCA_NETEM_MAX
,

533 
	#TCA_NETEM_MAX
 (
__TCA_NETEM_MAX
 - 1)

	)

535 
	stc_√ãm_q›t
 {

536 
__u32
 
	mœãncy
;

537 
__u32
 
	mlimô
;

538 
__u32
 
	mloss
;

539 
__u32
 
	mg≠
;

540 
__u32
 
	mdu∂iˇã
;

541 
__u32
 
	mjôãr
;

544 
	stc_√ãm_c‹r
 {

545 
__u32
 
	mdñay_c‹r
;

546 
__u32
 
	mloss_c‹r
;

547 
__u32
 
	mdup_c‹r
;

550 
	stc_√ãm_ª‹dî
 {

551 
__u32
 
	m¥obabûôy
;

552 
__u32
 
	mc‹ªœti⁄
;

555 
	stc_√ãm_c‹ru±
 {

556 
__u32
 
	m¥obabûôy
;

557 
__u32
 
	mc‹ªœti⁄
;

560 
	stc_√ãm_øã
 {

561 
__u32
 
	møã
;

562 
__s32
 
	m∑ckë_ovîhód
;

563 
__u32
 
	m˚Œ_size
;

564 
__s32
 
	m˚Œ_ovîhód
;

568 
	mNETEM_LOSS_UNSPEC
,

569 
	mNETEM_LOSS_GI
,

570 
	mNETEM_LOSS_GE
,

571 
	m__NETEM_LOSS_MAX


573 
	#NETEM_LOSS_MAX
 (
__NETEM_LOSS_MAX
 - 1)

	)

576 
	stc_√ãm_gimodñ
 {

577 
__u32
 
	mp13
;

578 
__u32
 
	mp31
;

579 
__u32
 
	mp32
;

580 
__u32
 
	mp14
;

581 
__u32
 
	mp23
;

585 
	stc_√ãm_gemodñ
 {

586 
__u32
 
	mp
;

587 
__u32
 
	mr
;

588 
__u32
 
	mh
;

589 
__u32
 
	mk1
;

592 
	#NETEM_DIST_SCALE
 8192

	)

593 
	#NETEM_DIST_MAX
 16384

	)

598 
	mTCA_DRR_UNSPEC
,

599 
	mTCA_DRR_QUANTUM
,

600 
	m__TCA_DRR_MAX


603 
	#TCA_DRR_MAX
 (
__TCA_DRR_MAX
 - 1)

	)

605 
	stc_dº_°©s
 {

606 
__u32
 
	mdeficô
;

610 
	#TC_QOPT_BITMASK
 15

	)

611 
	#TC_QOPT_MAX_QUEUE
 16

	)

613 
	stc_mq¥io_q›t
 {

614 
__u8
 
	mnum_tc
;

615 
__u8
 
	m¥io_tc_m≠
[
TC_QOPT_BITMASK
 + 1];

616 
__u8
 
	mhw
;

617 
__u16
 
	mcou¡
[
TC_QOPT_MAX_QUEUE
];

618 
__u16
 
	moff£t
[
TC_QOPT_MAX_QUEUE
];

624 
	mTCA_SFB_UNSPEC
,

625 
	mTCA_SFB_PARMS
,

626 
	m__TCA_SFB_MAX
,

629 
	#TCA_SFB_MAX
 (
__TCA_SFB_MAX
 - 1)

	)

634 
	stc_sfb_q›t
 {

635 
__u32
 
	mªhash_öãrvÆ
;

636 
__u32
 
	mw¨mup_time
;

637 
__u32
 
	mmax
;

638 
__u32
 
	mbö_size
;

639 
__u32
 
	mö¸emít
;

640 
__u32
 
	mde¸emít
;

641 
__u32
 
	mlimô
;

642 
__u32
 
	m≥«…y_øã
;

643 
__u32
 
	m≥«…y_bur°
;

646 
	stc_sfb_x°©s
 {

647 
__u32
 
	móæydr›
;

648 
__u32
 
	m≥«…ydr›
;

649 
__u32
 
	mbuckëdr›
;

650 
__u32
 
	mqueuedr›
;

651 
__u32
 
	mchûddr›
;

652 
__u32
 
	mm¨ked
;

653 
__u32
 
	mmaxqÀn
;

654 
__u32
 
	mmax¥ob
;

655 
__u32
 
	mavg¥ob
;

658 
	#SFB_MAX_PROB
 0xFFFF

	)

662 
	mTCA_QFQ_UNSPEC
,

663 
	mTCA_QFQ_WEIGHT
,

664 
	mTCA_QFQ_LMAX
,

665 
	m__TCA_QFQ_MAX


668 
	#TCA_QFQ_MAX
 (
__TCA_QFQ_MAX
 - 1)

	)

670 
	stc_qfq_°©s
 {

671 
__u32
 
	mweight
;

672 
__u32
 
	mlmax
;

678 
	mTCA_CODEL_UNSPEC
,

679 
	mTCA_CODEL_TARGET
,

680 
	mTCA_CODEL_LIMIT
,

681 
	mTCA_CODEL_INTERVAL
,

682 
	mTCA_CODEL_ECN
,

683 
	mTCA_CODEL_CE_THRESHOLD
,

684 
	m__TCA_CODEL_MAX


687 
	#TCA_CODEL_MAX
 (
__TCA_CODEL_MAX
 - 1)

	)

689 
	stc_codñ_x°©s
 {

690 
__u32
 
	mmax∑ckë
;

691 
__u32
 
	mcou¡
;

694 
__u32
 
	mœ°cou¡
;

695 
__u32
 
	mldñay
;

696 
__s32
 
	mdr›_√xt
;

697 
__u32
 
	mdr›_ovîlimô
;

698 
__u32
 
	me˙_m¨k
;

699 
__u32
 
	mdr›pög
;

700 
__u32
 
	m˚_m¨k
;

706 
	mTCA_FQ_CODEL_UNSPEC
,

707 
	mTCA_FQ_CODEL_TARGET
,

708 
	mTCA_FQ_CODEL_LIMIT
,

709 
	mTCA_FQ_CODEL_INTERVAL
,

710 
	mTCA_FQ_CODEL_ECN
,

711 
	mTCA_FQ_CODEL_FLOWS
,

712 
	mTCA_FQ_CODEL_QUANTUM
,

713 
	mTCA_FQ_CODEL_CE_THRESHOLD
,

714 
	m__TCA_FQ_CODEL_MAX


717 
	#TCA_FQ_CODEL_MAX
 (
__TCA_FQ_CODEL_MAX
 - 1)

	)

720 
	mTCA_FQ_CODEL_XSTATS_QDISC
,

721 
	mTCA_FQ_CODEL_XSTATS_CLASS
,

724 
	stc_fq_codñ_qd_°©s
 {

725 
__u32
 
	mmax∑ckë
;

726 
__u32
 
	mdr›_ovîlimô
;

729 
__u32
 
	me˙_m¨k
;

732 
__u32
 
	m√w_Êow_cou¡
;

735 
__u32
 
	m√w_Êows_Àn
;

736 
__u32
 
	mﬁd_Êows_Àn
;

737 
__u32
 
	m˚_m¨k
;

740 
	stc_fq_codñ_˛_°©s
 {

741 
__s32
 
	mdeficô
;

742 
__u32
 
	mldñay
;

745 
__u32
 
	mcou¡
;

746 
__u32
 
	mœ°cou¡
;

747 
__u32
 
	mdr›pög
;

748 
__s32
 
	mdr›_√xt
;

751 
	stc_fq_codñ_x°©s
 {

752 
__u32
 
	mty≥
;

754 
tc_fq_codñ_qd_°©s
 
	mqdisc_°©s
;

755 
tc_fq_codñ_˛_°©s
 
	m˛ass_°©s
;

762 
	mTCA_FQ_UNSPEC
,

764 
	mTCA_FQ_PLIMIT
,

766 
	mTCA_FQ_FLOW_PLIMIT
,

768 
	mTCA_FQ_QUANTUM
,

770 
	mTCA_FQ_INITIAL_QUANTUM
,

772 
	mTCA_FQ_RATE_ENABLE
,

774 
	mTCA_FQ_FLOW_DEFAULT_RATE
,

776 
	mTCA_FQ_FLOW_MAX_RATE
,

778 
	mTCA_FQ_BUCKETS_LOG
,

780 
	mTCA_FQ_FLOW_REFILL_DELAY
,

782 
	mTCA_FQ_ORPHAN_MASK
,

784 
	m__TCA_FQ_MAX


787 
	#TCA_FQ_MAX
 (
__TCA_FQ_MAX
 - 1)

	)

789 
	stc_fq_qd_°©s
 {

790 
__u64
 
	mgc_Êows
;

791 
__u64
 
	mhigh¥io_∑ckës
;

792 
__u64
 
	mt˝_ªå™s
;

793 
__u64
 
	mthrŸéed
;

794 
__u64
 
	mÊows_∂imô
;

795 
__u64
 
	mpkts_too_l⁄g
;

796 
__u64
 
	mÆloˇti⁄_îr‹s
;

797 
__s64
 
	mtime_√xt_dñayed_Êow
;

798 
__u32
 
	mÊows
;

799 
__u32
 
	möa˘ive_Êows
;

800 
__u32
 
	mthrŸéed_Êows
;

801 
__u32
 
	m∑d
;

807 
	mTCA_HHF_UNSPEC
,

808 
	mTCA_HHF_BACKLOG_LIMIT
,

809 
	mTCA_HHF_QUANTUM
,

810 
	mTCA_HHF_HH_FLOWS_LIMIT
,

811 
	mTCA_HHF_RESET_TIMEOUT
,

812 
	mTCA_HHF_ADMIT_BYTES
,

813 
	mTCA_HHF_EVICT_TIMEOUT
,

814 
	mTCA_HHF_NON_HH_WEIGHT
,

815 
	m__TCA_HHF_MAX


818 
	#TCA_HHF_MAX
 (
__TCA_HHF_MAX
 - 1)

	)

820 
	stc_hhf_x°©s
 {

821 
__u32
 
	mdr›_ovîlimô
;

824 
__u32
 
	mhh_ovîlimô
;

825 
__u32
 
	mhh_tŸ_cou¡
;

826 
__u32
 
	mhh_cur_cou¡
;

831 
	mTCA_PIE_UNSPEC
,

832 
	mTCA_PIE_TARGET
,

833 
	mTCA_PIE_LIMIT
,

834 
	mTCA_PIE_TUPDATE
,

835 
	mTCA_PIE_ALPHA
,

836 
	mTCA_PIE_BETA
,

837 
	mTCA_PIE_ECN
,

838 
	mTCA_PIE_BYTEMODE
,

839 
	m__TCA_PIE_MAX


841 
	#TCA_PIE_MAX
 (
__TCA_PIE_MAX
 - 1)

	)

843 
	stc_põ_x°©s
 {

844 
__u32
 
	m¥ob
;

845 
__u32
 
	mdñay
;

846 
__u32
 
	mavg_dq_øã
;

847 
__u32
 
	m∑ckës_ö
;

848 
__u32
 
	mdr›≥d
;

849 
__u32
 
	movîlimô
;

850 
__u32
 
	mmaxq
;

851 
__u32
 
	me˙_m¨k
;

	@/usr/include/linux/rose.h

7 #i‚def 
ROSE_KERNEL_H


8 
	#ROSE_KERNEL_H


	)

10 
	~<löux/sockë.h
>

11 
	~<löux/ax25.h
>

13 
	#ROSE_MTU
 251

	)

15 
	#ROSE_MAX_DIGIS
 6

	)

17 
	#ROSE_DEFER
 1

	)

18 
	#ROSE_T1
 2

	)

19 
	#ROSE_T2
 3

	)

20 
	#ROSE_T3
 4

	)

21 
	#ROSE_IDLE
 5

	)

22 
	#ROSE_QBITINCL
 6

	)

23 
	#ROSE_HOLDBACK
 7

	)

25 
	#SIOCRSGCAUSE
 (
SIOCPROTOPRIVATE
+0)

	)

26 
	#SIOCRSSCAUSE
 (
SIOCPROTOPRIVATE
+1)

	)

27 
	#SIOCRSL2CALL
 (
SIOCPROTOPRIVATE
+2)

	)

28 
	#SIOCRSSL2CALL
 (
SIOCPROTOPRIVATE
+2)

	)

29 
	#SIOCRSACCEPT
 (
SIOCPROTOPRIVATE
+3)

	)

30 
	#SIOCRSCLRRT
 (
SIOCPROTOPRIVATE
+4)

	)

31 
	#SIOCRSGL2CALL
 (
SIOCPROTOPRIVATE
+5)

	)

32 
	#SIOCRSGFACILITIES
 (
SIOCPROTOPRIVATE
+6)

	)

34 
	#ROSE_DTE_ORIGINATED
 0x00

	)

35 
	#ROSE_NUMBER_BUSY
 0x01

	)

36 
	#ROSE_INVALID_FACILITY
 0x03

	)

37 
	#ROSE_NETWORK_CONGESTION
 0x05

	)

38 
	#ROSE_OUT_OF_ORDER
 0x09

	)

39 
	#ROSE_ACCESS_BARRED
 0x0B

	)

40 
	#ROSE_NOT_OBTAINABLE
 0x0D

	)

41 
	#ROSE_REMOTE_PROCEDURE
 0x11

	)

42 
	#ROSE_LOCAL_PROCEDURE
 0x13

	)

43 
	#ROSE_SHIP_ABSENT
 0x39

	)

46 
	mro£_addr
[5];

47 } 
	tro£_addªss
;

49 
	ssockaddr_ro£
 {

50 
__kî√l_ß_Ámûy_t
 
	m§o£_Ámûy
;

51 
ro£_addªss
 
	m§o£_addr
;

52 
ax25_addªss
 
	m§o£_ˇŒ
;

53 
	m§o£_ndigis
;

54 
ax25_addªss
 
	m§o£_digi
;

57 
	sfuŒ_sockaddr_ro£
 {

58 
__kî√l_ß_Ámûy_t
 
	m§o£_Ámûy
;

59 
ro£_addªss
 
	m§o£_addr
;

60 
ax25_addªss
 
	m§o£_ˇŒ
;

61 
	m§o£_ndigis
;

62 
ax25_addªss
 
	m§o£_digis
[
ROSE_MAX_DIGIS
];

65 
	sro£_rouã_°ru˘
 {

66 
ro£_addªss
 
	maddªss
;

67 
	mmask
;

68 
ax25_addªss
 
	m√ighbour
;

69 
	mdevi˚
[16];

70 
	mndigis
;

71 
ax25_addªss
 
	mdigùóãrs
[
AX25_MAX_DIGIS
];

74 
	sro£_ˇu£_°ru˘
 {

75 
	mˇu£
;

76 
	mdügno°ic
;

79 
	sro£_Ácûôõs_°ru˘
 {

80 
ro£_addªss
 
	msour˚_addr
, 
	mde°_addr
;

81 
ax25_addªss
 
	msour˚_ˇŒ
, 
	mde°_ˇŒ
;

82 
	msour˚_ndigis
, 
	mde°_ndigis
;

83 
ax25_addªss
 
	msour˚_digis
[
ROSE_MAX_DIGIS
];

84 
ax25_addªss
 
	mde°_digis
[
ROSE_MAX_DIGIS
];

85 
	mønd
;

86 
ro£_addªss
 
	mÁû_addr
;

87 
ax25_addªss
 
	mÁû_ˇŒ
;

	@/usr/include/linux/rtnetlink.h

1 #i‚de‡
__LINUX_RTNETLINK_H


2 
	#__LINUX_RTNETLINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

6 
	~<löux/if_lök.h
>

7 
	~<löux/if_addr.h
>

8 
	~<löux/√ighbour.h
>

13 
	#RTNL_FAMILY_IPMR
 128

	)

14 
	#RTNL_FAMILY_IP6MR
 129

	)

15 
	#RTNL_FAMILY_MAX
 129

	)

24 
	mRTM_BASE
 = 16,

25 
	#RTM_BASE
 
RTM_BASE


	)

27 
	mRTM_NEWLINK
 = 16,

28 
	#RTM_NEWLINK
 
RTM_NEWLINK


	)

29 
	mRTM_DELLINK
,

30 
	#RTM_DELLINK
 
RTM_DELLINK


	)

31 
	mRTM_GETLINK
,

32 
	#RTM_GETLINK
 
RTM_GETLINK


	)

33 
	mRTM_SETLINK
,

34 
	#RTM_SETLINK
 
RTM_SETLINK


	)

36 
	mRTM_NEWADDR
 = 20,

37 
	#RTM_NEWADDR
 
RTM_NEWADDR


	)

38 
	mRTM_DELADDR
,

39 
	#RTM_DELADDR
 
RTM_DELADDR


	)

40 
	mRTM_GETADDR
,

41 
	#RTM_GETADDR
 
RTM_GETADDR


	)

43 
	mRTM_NEWROUTE
 = 24,

44 
	#RTM_NEWROUTE
 
RTM_NEWROUTE


	)

45 
	mRTM_DELROUTE
,

46 
	#RTM_DELROUTE
 
RTM_DELROUTE


	)

47 
	mRTM_GETROUTE
,

48 
	#RTM_GETROUTE
 
RTM_GETROUTE


	)

50 
	mRTM_NEWNEIGH
 = 28,

51 
	#RTM_NEWNEIGH
 
RTM_NEWNEIGH


	)

52 
	mRTM_DELNEIGH
,

53 
	#RTM_DELNEIGH
 
RTM_DELNEIGH


	)

54 
	mRTM_GETNEIGH
,

55 
	#RTM_GETNEIGH
 
RTM_GETNEIGH


	)

57 
	mRTM_NEWRULE
 = 32,

58 
	#RTM_NEWRULE
 
RTM_NEWRULE


	)

59 
	mRTM_DELRULE
,

60 
	#RTM_DELRULE
 
RTM_DELRULE


	)

61 
	mRTM_GETRULE
,

62 
	#RTM_GETRULE
 
RTM_GETRULE


	)

64 
	mRTM_NEWQDISC
 = 36,

65 
	#RTM_NEWQDISC
 
RTM_NEWQDISC


	)

66 
	mRTM_DELQDISC
,

67 
	#RTM_DELQDISC
 
RTM_DELQDISC


	)

68 
	mRTM_GETQDISC
,

69 
	#RTM_GETQDISC
 
RTM_GETQDISC


	)

71 
	mRTM_NEWTCLASS
 = 40,

72 
	#RTM_NEWTCLASS
 
RTM_NEWTCLASS


	)

73 
	mRTM_DELTCLASS
,

74 
	#RTM_DELTCLASS
 
RTM_DELTCLASS


	)

75 
	mRTM_GETTCLASS
,

76 
	#RTM_GETTCLASS
 
RTM_GETTCLASS


	)

78 
	mRTM_NEWTFILTER
 = 44,

79 
	#RTM_NEWTFILTER
 
RTM_NEWTFILTER


	)

80 
	mRTM_DELTFILTER
,

81 
	#RTM_DELTFILTER
 
RTM_DELTFILTER


	)

82 
	mRTM_GETTFILTER
,

83 
	#RTM_GETTFILTER
 
RTM_GETTFILTER


	)

85 
	mRTM_NEWACTION
 = 48,

86 
	#RTM_NEWACTION
 
RTM_NEWACTION


	)

87 
	mRTM_DELACTION
,

88 
	#RTM_DELACTION
 
RTM_DELACTION


	)

89 
	mRTM_GETACTION
,

90 
	#RTM_GETACTION
 
RTM_GETACTION


	)

92 
	mRTM_NEWPREFIX
 = 52,

93 
	#RTM_NEWPREFIX
 
RTM_NEWPREFIX


	)

95 
	mRTM_GETMULTICAST
 = 58,

96 
	#RTM_GETMULTICAST
 
RTM_GETMULTICAST


	)

98 
	mRTM_GETANYCAST
 = 62,

99 
	#RTM_GETANYCAST
 
RTM_GETANYCAST


	)

101 
	mRTM_NEWNEIGHTBL
 = 64,

102 
	#RTM_NEWNEIGHTBL
 
RTM_NEWNEIGHTBL


	)

103 
	mRTM_GETNEIGHTBL
 = 66,

104 
	#RTM_GETNEIGHTBL
 
RTM_GETNEIGHTBL


	)

105 
	mRTM_SETNEIGHTBL
,

106 
	#RTM_SETNEIGHTBL
 
RTM_SETNEIGHTBL


	)

108 
	mRTM_NEWNDUSEROPT
 = 68,

109 
	#RTM_NEWNDUSEROPT
 
RTM_NEWNDUSEROPT


	)

111 
	mRTM_NEWADDRLABEL
 = 72,

112 
	#RTM_NEWADDRLABEL
 
RTM_NEWADDRLABEL


	)

113 
	mRTM_DELADDRLABEL
,

114 
	#RTM_DELADDRLABEL
 
RTM_DELADDRLABEL


	)

115 
	mRTM_GETADDRLABEL
,

116 
	#RTM_GETADDRLABEL
 
RTM_GETADDRLABEL


	)

118 
	mRTM_GETDCB
 = 78,

119 
	#RTM_GETDCB
 
RTM_GETDCB


	)

120 
	mRTM_SETDCB
,

121 
	#RTM_SETDCB
 
RTM_SETDCB


	)

123 
	mRTM_NEWNETCONF
 = 80,

124 
	#RTM_NEWNETCONF
 
RTM_NEWNETCONF


	)

125 
	mRTM_GETNETCONF
 = 82,

126 
	#RTM_GETNETCONF
 
RTM_GETNETCONF


	)

128 
	mRTM_NEWMDB
 = 84,

129 
	#RTM_NEWMDB
 
RTM_NEWMDB


	)

130 
	mRTM_DELMDB
 = 85,

131 
	#RTM_DELMDB
 
RTM_DELMDB


	)

132 
	mRTM_GETMDB
 = 86,

133 
	#RTM_GETMDB
 
RTM_GETMDB


	)

135 
	mRTM_NEWNSID
 = 88,

136 
	#RTM_NEWNSID
 
RTM_NEWNSID


	)

137 
	mRTM_DELNSID
 = 89,

138 
	#RTM_DELNSID
 
RTM_DELNSID


	)

139 
	mRTM_GETNSID
 = 90,

140 
	#RTM_GETNSID
 
RTM_GETNSID


	)

142 
	m__RTM_MAX
,

143 
	#RTM_MAX
 (((
__RTM_MAX
 + 3Ë& ~3Ë- 1)

	)

146 
	#RTM_NR_MSGTYPES
 (
RTM_MAX
 + 1 - 
RTM_BASE
)

	)

147 
	#RTM_NR_FAMILIES
 (
RTM_NR_MSGTYPES
 >> 2)

	)

148 
	#RTM_FAM
(
cmd
Ë(((cmdË- 
RTM_BASE
Ë>> 2)

	)

156 
	sπ©å
 {

157 
	mπa_Àn
;

158 
	mπa_ty≥
;

163 
	#RTA_ALIGNTO
 4U

	)

164 
	#RTA_ALIGN
(
Àn
Ë–(÷í)+
RTA_ALIGNTO
-1Ë& ~(RTA_ALIGNTO-1Ë)

	)

165 
	#RTA_OK
(
πa
,
Àn
Ë(÷íË>()(
π©å
) && \

166 (
πa
)->
πa_Àn
 >(
π©å
) && \

167 (
πa
)->
πa_Àn
 <(
Àn
))

	)

168 
	#RTA_NEXT
(
πa
,
©åÀn
Ë(◊âæíË-
	`RTA_ALIGN
(‘è)->
πa_Àn
), \

169 (
π©å
*)(((*)(
πa
)Ë+ 
	`RTA_ALIGN
(‘è)->
πa_Àn
)))

	)

170 
	#RTA_LENGTH
(
Àn
Ë(
	`RTA_ALIGN
((
π©å
)Ë+ (Àn))

	)

171 
	#RTA_SPACE
(
Àn
Ë
	`RTA_ALIGN
(
	`RTA_LENGTH
÷í))

	)

172 
	#RTA_DATA
(
πa
Ë((*)(((*)‘è)Ë+ 
	`RTA_LENGTH
(0)))

	)

173 
	#RTA_PAYLOAD
(
πa
Ë(()(‘è)->
πa_Àn
Ë- 
	`RTA_LENGTH
(0))

	)

182 
	sπmsg
 {

183 
	mπm_Ámûy
;

184 
	mπm_d°_Àn
;

185 
	mπm_§c_Àn
;

186 
	mπm_tos
;

188 
	mπm_èbÀ
;

189 
	mπm_¥Ÿocﬁ
;

190 
	mπm_sc›e
;

191 
	mπm_ty≥
;

193 
	mπm_Êags
;

199 
	mRTN_UNSPEC
,

200 
	mRTN_UNICAST
,

201 
	mRTN_LOCAL
,

202 
	mRTN_BROADCAST
,

204 
	mRTN_ANYCAST
,

206 
	mRTN_MULTICAST
,

207 
	mRTN_BLACKHOLE
,

208 
	mRTN_UNREACHABLE
,

209 
	mRTN_PROHIBIT
,

210 
	mRTN_THROW
,

211 
	mRTN_NAT
,

212 
	mRTN_XRESOLVE
,

213 
	m__RTN_MAX


216 
	#RTN_MAX
 (
__RTN_MAX
 - 1)

	)

221 
	#RTPROT_UNSPEC
 0

	)

222 
	#RTPROT_REDIRECT
 1

	)

224 
	#RTPROT_KERNEL
 2

	)

225 
	#RTPROT_BOOT
 3

	)

226 
	#RTPROT_STATIC
 4

	)

235 
	#RTPROT_GATED
 8

	)

236 
	#RTPROT_RA
 9

	)

237 
	#RTPROT_MRT
 10

	)

238 
	#RTPROT_ZEBRA
 11

	)

239 
	#RTPROT_BIRD
 12

	)

240 
	#RTPROT_DNROUTED
 13

	)

241 
	#RTPROT_XORP
 14

	)

242 
	#RTPROT_NTK
 15

	)

243 
	#RTPROT_DHCP
 16

	)

244 
	#RTPROT_MROUTED
 17

	)

245 
	#RTPROT_BABEL
 42

	)

258 
	eπ_sc›e_t
 {

259 
	mRT_SCOPE_UNIVERSE
=0,

261 
	mRT_SCOPE_SITE
=200,

262 
	mRT_SCOPE_LINK
=253,

263 
	mRT_SCOPE_HOST
=254,

264 
	mRT_SCOPE_NOWHERE
=255

269 
	#RTM_F_NOTIFY
 0x100

	)

270 
	#RTM_F_CLONED
 0x200

	)

271 
	#RTM_F_EQUALIZE
 0x400

	)

272 
	#RTM_F_PREFIX
 0x800

	)

273 
	#RTM_F_LOOKUP_TABLE
 0x1000

	)

277 
	eπ_˛ass_t
 {

278 
	mRT_TABLE_UNSPEC
=0,

280 
	mRT_TABLE_COMPAT
=252,

281 
	mRT_TABLE_DEFAULT
=253,

282 
	mRT_TABLE_MAIN
=254,

283 
	mRT_TABLE_LOCAL
=255,

284 
	mRT_TABLE_MAX
=0xFFFFFFFF

290 
	eπ©å_ty≥_t
 {

291 
	mRTA_UNSPEC
,

292 
	mRTA_DST
,

293 
	mRTA_SRC
,

294 
	mRTA_IIF
,

295 
	mRTA_OIF
,

296 
	mRTA_GATEWAY
,

297 
	mRTA_PRIORITY
,

298 
	mRTA_PREFSRC
,

299 
	mRTA_METRICS
,

300 
	mRTA_MULTIPATH
,

301 
	mRTA_PROTOINFO
,

302 
	mRTA_FLOW
,

303 
	mRTA_CACHEINFO
,

304 
	mRTA_SESSION
,

305 
	mRTA_MP_ALGO
,

306 
	mRTA_TABLE
,

307 
	mRTA_MARK
,

308 
	mRTA_MFC_STATS
,

309 
	mRTA_VIA
,

310 
	mRTA_NEWDST
,

311 
	mRTA_PREF
,

312 
	mRTA_ENCAP_TYPE
,

313 
	mRTA_ENCAP
,

314 
	m__RTA_MAX


317 
	#RTA_MAX
 (
__RTA_MAX
 - 1)

	)

319 
	#RTM_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
πmsg
))))

	)

320 
	#RTM_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
πmsg
))

	)

331 
	sπ√xth›
 {

332 
	mπnh_Àn
;

333 
	mπnh_Êags
;

334 
	mπnh_h›s
;

335 
	mπnh_ifödex
;

340 
	#RTNH_F_DEAD
 1

	)

341 
	#RTNH_F_PERVASIVE
 2

	)

342 
	#RTNH_F_ONLINK
 4

	)

343 
	#RTNH_F_OFFLOAD
 8

	)

344 
	#RTNH_F_LINKDOWN
 16

	)

346 
	#RTNH_COMPARE_MASK
 (
RTNH_F_DEAD
 | 
RTNH_F_LINKDOWN
 | 
RTNH_F_OFFLOAD
)

	)

350 
	#RTNH_ALIGNTO
 4

	)

351 
	#RTNH_ALIGN
(
Àn
Ë–(÷í)+
RTNH_ALIGNTO
-1Ë& ~(RTNH_ALIGNTO-1Ë)

	)

352 
	#RTNH_OK
(
πnh
,
Àn
Ë(‘äh)->
πnh_Àn
 >(
π√xth›
) && \

353 (()(
πnh
)->
πnh_Àn
Ë<(
Àn
))

	)

354 
	#RTNH_NEXT
(
πnh
Ë((
π√xth›
*)(((*)‘äh)Ë+ 
	`RTNH_ALIGN
(‘äh)->
πnh_Àn
)))

	)

355 
	#RTNH_LENGTH
(
Àn
Ë(
	`RTNH_ALIGN
((
π√xth›
)Ë+ (Àn))

	)

356 
	#RTNH_SPACE
(
Àn
Ë
	`RTNH_ALIGN
(
	`RTNH_LENGTH
÷í))

	)

357 
	#RTNH_DATA
(
πnh
Ë((
π©å
*)(((*)‘äh)Ë+ 
	`RTNH_LENGTH
(0)))

	)

360 
	sπvü
 {

361 
__kî√l_ß_Ámûy_t
 
	mπvü_Ámûy
;

362 
__u8
 
	mπvü_addr
[0];

367 
	sπa_ˇcheöfo
 {

368 
__u32
 
	mπa_˛¡ªf
;

369 
__u32
 
	mπa_œ°u£
;

370 
__s32
 
	mπa_expúes
;

371 
__u32
 
	mπa_îr‹
;

372 
__u32
 
	mπa_u£d
;

374 
	#RTNETLINK_HAVE_PEERINFO
 1

	)

375 
__u32
 
	mπa_id
;

376 
__u32
 
	mπa_ts
;

377 
__u32
 
	mπa_tßge
;

383 
	mRTAX_UNSPEC
,

384 
	#RTAX_UNSPEC
 
RTAX_UNSPEC


	)

385 
	mRTAX_LOCK
,

386 
	#RTAX_LOCK
 
RTAX_LOCK


	)

387 
	mRTAX_MTU
,

388 
	#RTAX_MTU
 
RTAX_MTU


	)

389 
	mRTAX_WINDOW
,

390 
	#RTAX_WINDOW
 
RTAX_WINDOW


	)

391 
	mRTAX_RTT
,

392 
	#RTAX_RTT
 
RTAX_RTT


	)

393 
	mRTAX_RTTVAR
,

394 
	#RTAX_RTTVAR
 
RTAX_RTTVAR


	)

395 
	mRTAX_SSTHRESH
,

396 
	#RTAX_SSTHRESH
 
RTAX_SSTHRESH


	)

397 
	mRTAX_CWND
,

398 
	#RTAX_CWND
 
RTAX_CWND


	)

399 
	mRTAX_ADVMSS
,

400 
	#RTAX_ADVMSS
 
RTAX_ADVMSS


	)

401 
	mRTAX_REORDERING
,

402 
	#RTAX_REORDERING
 
RTAX_REORDERING


	)

403 
	mRTAX_HOPLIMIT
,

404 
	#RTAX_HOPLIMIT
 
RTAX_HOPLIMIT


	)

405 
	mRTAX_INITCWND
,

406 
	#RTAX_INITCWND
 
RTAX_INITCWND


	)

407 
	mRTAX_FEATURES
,

408 
	#RTAX_FEATURES
 
RTAX_FEATURES


	)

409 
	mRTAX_RTO_MIN
,

410 
	#RTAX_RTO_MIN
 
RTAX_RTO_MIN


	)

411 
	mRTAX_INITRWND
,

412 
	#RTAX_INITRWND
 
RTAX_INITRWND


	)

413 
	mRTAX_QUICKACK
,

414 
	#RTAX_QUICKACK
 
RTAX_QUICKACK


	)

415 
	mRTAX_CC_ALGO
,

416 
	#RTAX_CC_ALGO
 
RTAX_CC_ALGO


	)

417 
	m__RTAX_MAX


420 
	#RTAX_MAX
 (
__RTAX_MAX
 - 1)

	)

422 
	#RTAX_FEATURE_ECN
 (1 << 0)

	)

423 
	#RTAX_FEATURE_SACK
 (1 << 1)

	)

424 
	#RTAX_FEATURE_TIMESTAMP
 (1 << 2)

	)

425 
	#RTAX_FEATURE_ALLFRAG
 (1 << 3)

	)

427 
	#RTAX_FEATURE_MASK
 (
RTAX_FEATURE_ECN
 | 
RTAX_FEATURE_SACK
 | \

428 
RTAX_FEATURE_TIMESTAMP
 | 
RTAX_FEATURE_ALLFRAG
)

	)

430 
	sπa_£ssi⁄
 {

431 
__u8
 
	m¥Ÿo
;

432 
__u8
 
	m∑d1
;

433 
__u16
 
	m∑d2
;

437 
__u16
 
	m•‹t
;

438 
__u16
 
	mdp‹t
;

439 } 
	mp‹ts
;

442 
__u8
 
	mty≥
;

443 
__u8
 
	mcode
;

444 
__u16
 
	midít
;

445 } 
	micm±
;

447 
__u32
 
	m•i
;

448 } 
	mu
;

451 
	sπa_mfc_°©s
 {

452 
__u64
 
	mmfcs_∑ckës
;

453 
__u64
 
	mmfcs_byãs
;

454 
__u64
 
	mmfcs_wr⁄g_if
;

461 
	sπgímsg
 {

462 
	mπgí_Ámûy
;

474 
	siföfomsg
 {

475 
	mifi_Ámûy
;

476 
	m__ifi_∑d
;

477 
	mifi_ty≥
;

478 
	mifi_ödex
;

479 
	mifi_Êags
;

480 
	mifi_ch™ge
;

487 
	s¥efixmsg
 {

488 
	m¥efix_Ámûy
;

489 
	m¥efix_∑d1
;

490 
	m¥efix_∑d2
;

491 
	m¥efix_ifödex
;

492 
	m¥efix_ty≥
;

493 
	m¥efix_Àn
;

494 
	m¥efix_Êags
;

495 
	m¥efix_∑d3
;

500 
	mPREFIX_UNSPEC
,

501 
	mPREFIX_ADDRESS
,

502 
	mPREFIX_CACHEINFO
,

503 
	m__PREFIX_MAX


506 
	#PREFIX_MAX
 (
__PREFIX_MAX
 - 1)

	)

508 
	s¥efix_ˇcheöfo
 {

509 
__u32
 
	m¥e„ºed_time
;

510 
__u32
 
	mvÆid_time
;

518 
	stcmsg
 {

519 
	mtcm_Ámûy
;

520 
	mtcm__∑d1
;

521 
	mtcm__∑d2
;

522 
	mtcm_ifödex
;

523 
__u32
 
	mtcm_h™dÀ
;

524 
__u32
 
	mtcm_∑ª¡
;

525 
__u32
 
	mtcm_öfo
;

529 
	mTCA_UNSPEC
,

530 
	mTCA_KIND
,

531 
	mTCA_OPTIONS
,

532 
	mTCA_STATS
,

533 
	mTCA_XSTATS
,

534 
	mTCA_RATE
,

535 
	mTCA_FCNT
,

536 
	mTCA_STATS2
,

537 
	mTCA_STAB
,

538 
	m__TCA_MAX


541 
	#TCA_MAX
 (
__TCA_MAX
 - 1)

	)

543 
	#TCA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tcmsg
))))

	)

544 
	#TCA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tcmsg
))

	)

550 
	sndu£r›tmsg
 {

551 
	mndu£r›t_Ámûy
;

552 
	mndu£r›t_∑d1
;

553 
	mndu£r›t_›ts_Àn
;

554 
	mndu£r›t_ifödex
;

555 
__u8
 
	mndu£r›t_icmp_ty≥
;

556 
__u8
 
	mndu£r›t_icmp_code
;

557 
	mndu£r›t_∑d2
;

558 
	mndu£r›t_∑d3
;

563 
	mNDUSEROPT_UNSPEC
,

564 
	mNDUSEROPT_SRCADDR
,

565 
	m__NDUSEROPT_MAX


568 
	#NDUSEROPT_MAX
 (
__NDUSEROPT_MAX
 - 1)

	)

571 
	#RTMGRP_LINK
 1

	)

572 
	#RTMGRP_NOTIFY
 2

	)

573 
	#RTMGRP_NEIGH
 4

	)

574 
	#RTMGRP_TC
 8

	)

576 
	#RTMGRP_IPV4_IFADDR
 0x10

	)

577 
	#RTMGRP_IPV4_MROUTE
 0x20

	)

578 
	#RTMGRP_IPV4_ROUTE
 0x40

	)

579 
	#RTMGRP_IPV4_RULE
 0x80

	)

581 
	#RTMGRP_IPV6_IFADDR
 0x100

	)

582 
	#RTMGRP_IPV6_MROUTE
 0x200

	)

583 
	#RTMGRP_IPV6_ROUTE
 0x400

	)

584 
	#RTMGRP_IPV6_IFINFO
 0x800

	)

586 
	#RTMGRP_DEC√t_IFADDR
 0x1000

	)

587 
	#RTMGRP_DEC√t_ROUTE
 0x4000

	)

589 
	#RTMGRP_IPV6_PREFIX
 0x20000

	)

592 
	eπ√éök_groups
 {

593 
	mRTNLGRP_NONE
,

594 
	#RTNLGRP_NONE
 
RTNLGRP_NONE


	)

595 
	mRTNLGRP_LINK
,

596 
	#RTNLGRP_LINK
 
RTNLGRP_LINK


	)

597 
	mRTNLGRP_NOTIFY
,

598 
	#RTNLGRP_NOTIFY
 
RTNLGRP_NOTIFY


	)

599 
	mRTNLGRP_NEIGH
,

600 
	#RTNLGRP_NEIGH
 
RTNLGRP_NEIGH


	)

601 
	mRTNLGRP_TC
,

602 
	#RTNLGRP_TC
 
RTNLGRP_TC


	)

603 
	mRTNLGRP_IPV4_IFADDR
,

604 
	#RTNLGRP_IPV4_IFADDR
 
RTNLGRP_IPV4_IFADDR


	)

605 
	mRTNLGRP_IPV4_MROUTE
,

606 
	#RTNLGRP_IPV4_MROUTE
 
RTNLGRP_IPV4_MROUTE


	)

607 
	mRTNLGRP_IPV4_ROUTE
,

608 
	#RTNLGRP_IPV4_ROUTE
 
RTNLGRP_IPV4_ROUTE


	)

609 
	mRTNLGRP_IPV4_RULE
,

610 
	#RTNLGRP_IPV4_RULE
 
RTNLGRP_IPV4_RULE


	)

611 
	mRTNLGRP_IPV6_IFADDR
,

612 
	#RTNLGRP_IPV6_IFADDR
 
RTNLGRP_IPV6_IFADDR


	)

613 
	mRTNLGRP_IPV6_MROUTE
,

614 
	#RTNLGRP_IPV6_MROUTE
 
RTNLGRP_IPV6_MROUTE


	)

615 
	mRTNLGRP_IPV6_ROUTE
,

616 
	#RTNLGRP_IPV6_ROUTE
 
RTNLGRP_IPV6_ROUTE


	)

617 
	mRTNLGRP_IPV6_IFINFO
,

618 
	#RTNLGRP_IPV6_IFINFO
 
RTNLGRP_IPV6_IFINFO


	)

619 
	mRTNLGRP_DEC√t_IFADDR
,

620 
	#RTNLGRP_DEC√t_IFADDR
 
RTNLGRP_DEC√t_IFADDR


	)

621 
	mRTNLGRP_NOP2
,

622 
	mRTNLGRP_DEC√t_ROUTE
,

623 
	#RTNLGRP_DEC√t_ROUTE
 
RTNLGRP_DEC√t_ROUTE


	)

624 
	mRTNLGRP_DEC√t_RULE
,

625 
	#RTNLGRP_DEC√t_RULE
 
RTNLGRP_DEC√t_RULE


	)

626 
	mRTNLGRP_NOP4
,

627 
	mRTNLGRP_IPV6_PREFIX
,

628 
	#RTNLGRP_IPV6_PREFIX
 
RTNLGRP_IPV6_PREFIX


	)

629 
	mRTNLGRP_IPV6_RULE
,

630 
	#RTNLGRP_IPV6_RULE
 
RTNLGRP_IPV6_RULE


	)

631 
	mRTNLGRP_ND_USEROPT
,

632 
	#RTNLGRP_ND_USEROPT
 
RTNLGRP_ND_USEROPT


	)

633 
	mRTNLGRP_PHONET_IFADDR
,

634 
	#RTNLGRP_PHONET_IFADDR
 
RTNLGRP_PHONET_IFADDR


	)

635 
	mRTNLGRP_PHONET_ROUTE
,

636 
	#RTNLGRP_PHONET_ROUTE
 
RTNLGRP_PHONET_ROUTE


	)

637 
	mRTNLGRP_DCB
,

638 
	#RTNLGRP_DCB
 
RTNLGRP_DCB


	)

639 
	mRTNLGRP_IPV4_NETCONF
,

640 
	#RTNLGRP_IPV4_NETCONF
 
RTNLGRP_IPV4_NETCONF


	)

641 
	mRTNLGRP_IPV6_NETCONF
,

642 
	#RTNLGRP_IPV6_NETCONF
 
RTNLGRP_IPV6_NETCONF


	)

643 
	mRTNLGRP_MDB
,

644 
	#RTNLGRP_MDB
 
RTNLGRP_MDB


	)

645 
	mRTNLGRP_MPLS_ROUTE
,

646 
	#RTNLGRP_MPLS_ROUTE
 
RTNLGRP_MPLS_ROUTE


	)

647 
	mRTNLGRP_NSID
,

648 
	#RTNLGRP_NSID
 
RTNLGRP_NSID


	)

649 
	m__RTNLGRP_MAX


651 
	#RTNLGRP_MAX
 (
__RTNLGRP_MAX
 - 1)

	)

654 
	stˇmsg
 {

655 
	mtˇ_Ámûy
;

656 
	mtˇ__∑d1
;

657 
	mtˇ__∑d2
;

659 
	#TA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tˇmsg
))))

	)

660 
	#TA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tˇmsg
))

	)

661 
	#TCA_ACT_TAB
 1

	)

662 
	#TCAA_MAX
 1

	)

665 
	#RTEXT_FILTER_VF
 (1 << 0)

	)

666 
	#RTEXT_FILTER_BRVLAN
 (1 << 1)

	)

667 
	#RTEXT_FILTER_BRVLAN_COMPRESSED
 (1 << 2)

	)

668 
	#RTEXT_FILTER_SKIP_STATS
 (1 << 3)

	)

	@/usr/include/linux/snmp.h

7 #i‚de‡
_LINUX_SNMP_H


8 
	#_LINUX_SNMP_H


	)

20 
	mIPSTATS_MIB_NUM
 = 0,

22 
	mIPSTATS_MIB_INPKTS
,

23 
	mIPSTATS_MIB_INOCTETS
,

24 
	mIPSTATS_MIB_INDELIVERS
,

25 
	mIPSTATS_MIB_OUTFORWDATAGRAMS
,

26 
	mIPSTATS_MIB_OUTPKTS
,

27 
	mIPSTATS_MIB_OUTOCTETS
,

29 
	mIPSTATS_MIB_INHDRERRORS
,

30 
	mIPSTATS_MIB_INTOOBIGERRORS
,

31 
	mIPSTATS_MIB_INNOROUTES
,

32 
	mIPSTATS_MIB_INADDRERRORS
,

33 
	mIPSTATS_MIB_INUNKNOWNPROTOS
,

34 
	mIPSTATS_MIB_INTRUNCATEDPKTS
,

35 
	mIPSTATS_MIB_INDISCARDS
,

36 
	mIPSTATS_MIB_OUTDISCARDS
,

37 
	mIPSTATS_MIB_OUTNOROUTES
,

38 
	mIPSTATS_MIB_REASMTIMEOUT
,

39 
	mIPSTATS_MIB_REASMREQDS
,

40 
	mIPSTATS_MIB_REASMOKS
,

41 
	mIPSTATS_MIB_REASMFAILS
,

42 
	mIPSTATS_MIB_FRAGOKS
,

43 
	mIPSTATS_MIB_FRAGFAILS
,

44 
	mIPSTATS_MIB_FRAGCREATES
,

45 
	mIPSTATS_MIB_INMCASTPKTS
,

46 
	mIPSTATS_MIB_OUTMCASTPKTS
,

47 
	mIPSTATS_MIB_INBCASTPKTS
,

48 
	mIPSTATS_MIB_OUTBCASTPKTS
,

49 
	mIPSTATS_MIB_INMCASTOCTETS
,

50 
	mIPSTATS_MIB_OUTMCASTOCTETS
,

51 
	mIPSTATS_MIB_INBCASTOCTETS
,

52 
	mIPSTATS_MIB_OUTBCASTOCTETS
,

53 
	mIPSTATS_MIB_CSUMERRORS
,

54 
	mIPSTATS_MIB_NOECTPKTS
,

55 
	mIPSTATS_MIB_ECT1PKTS
,

56 
	mIPSTATS_MIB_ECT0PKTS
,

57 
	mIPSTATS_MIB_CEPKTS
,

58 
	m__IPSTATS_MIB_MAX


68 
	mICMP_MIB_NUM
 = 0,

69 
	mICMP_MIB_INMSGS
,

70 
	mICMP_MIB_INERRORS
,

71 
	mICMP_MIB_INDESTUNREACHS
,

72 
	mICMP_MIB_INTIMEEXCDS
,

73 
	mICMP_MIB_INPARMPROBS
,

74 
	mICMP_MIB_INSRCQUENCHS
,

75 
	mICMP_MIB_INREDIRECTS
,

76 
	mICMP_MIB_INECHOS
,

77 
	mICMP_MIB_INECHOREPS
,

78 
	mICMP_MIB_INTIMESTAMPS
,

79 
	mICMP_MIB_INTIMESTAMPREPS
,

80 
	mICMP_MIB_INADDRMASKS
,

81 
	mICMP_MIB_INADDRMASKREPS
,

82 
	mICMP_MIB_OUTMSGS
,

83 
	mICMP_MIB_OUTERRORS
,

84 
	mICMP_MIB_OUTDESTUNREACHS
,

85 
	mICMP_MIB_OUTTIMEEXCDS
,

86 
	mICMP_MIB_OUTPARMPROBS
,

87 
	mICMP_MIB_OUTSRCQUENCHS
,

88 
	mICMP_MIB_OUTREDIRECTS
,

89 
	mICMP_MIB_OUTECHOS
,

90 
	mICMP_MIB_OUTECHOREPS
,

91 
	mICMP_MIB_OUTTIMESTAMPS
,

92 
	mICMP_MIB_OUTTIMESTAMPREPS
,

93 
	mICMP_MIB_OUTADDRMASKS
,

94 
	mICMP_MIB_OUTADDRMASKREPS
,

95 
	mICMP_MIB_CSUMERRORS
,

96 
	m__ICMP_MIB_MAX


99 
	#__ICMPMSG_MIB_MAX
 512

	)

107 
	mICMP6_MIB_NUM
 = 0,

108 
	mICMP6_MIB_INMSGS
,

109 
	mICMP6_MIB_INERRORS
,

110 
	mICMP6_MIB_OUTMSGS
,

111 
	mICMP6_MIB_OUTERRORS
,

112 
	mICMP6_MIB_CSUMERRORS
,

113 
	m__ICMP6_MIB_MAX


116 
	#__ICMP6MSG_MIB_MAX
 512

	)

125 
	mTCP_MIB_NUM
 = 0,

126 
	mTCP_MIB_RTOALGORITHM
,

127 
	mTCP_MIB_RTOMIN
,

128 
	mTCP_MIB_RTOMAX
,

129 
	mTCP_MIB_MAXCONN
,

130 
	mTCP_MIB_ACTIVEOPENS
,

131 
	mTCP_MIB_PASSIVEOPENS
,

132 
	mTCP_MIB_ATTEMPTFAILS
,

133 
	mTCP_MIB_ESTABRESETS
,

134 
	mTCP_MIB_CURRESTAB
,

135 
	mTCP_MIB_INSEGS
,

136 
	mTCP_MIB_OUTSEGS
,

137 
	mTCP_MIB_RETRANSSEGS
,

138 
	mTCP_MIB_INERRS
,

139 
	mTCP_MIB_OUTRSTS
,

140 
	mTCP_MIB_CSUMERRORS
,

141 
	m__TCP_MIB_MAX


151 
	mUDP_MIB_NUM
 = 0,

152 
	mUDP_MIB_INDATAGRAMS
,

153 
	mUDP_MIB_NOPORTS
,

154 
	mUDP_MIB_INERRORS
,

155 
	mUDP_MIB_OUTDATAGRAMS
,

156 
	mUDP_MIB_RCVBUFERRORS
,

157 
	mUDP_MIB_SNDBUFERRORS
,

158 
	mUDP_MIB_CSUMERRORS
,

159 
	mUDP_MIB_IGNOREDMULTI
,

160 
	m__UDP_MIB_MAX


166 
	mLINUX_MIB_NUM
 = 0,

167 
	mLINUX_MIB_SYNCOOKIESSENT
,

168 
	mLINUX_MIB_SYNCOOKIESRECV
,

169 
	mLINUX_MIB_SYNCOOKIESFAILED
,

170 
	mLINUX_MIB_EMBRYONICRSTS
,

171 
	mLINUX_MIB_PRUNECALLED
,

172 
	mLINUX_MIB_RCVPRUNED
,

173 
	mLINUX_MIB_OFOPRUNED
,

174 
	mLINUX_MIB_OUTOFWINDOWICMPS
,

175 
	mLINUX_MIB_LOCKDROPPEDICMPS
,

176 
	mLINUX_MIB_ARPFILTER
,

177 
	mLINUX_MIB_TIMEWAITED
,

178 
	mLINUX_MIB_TIMEWAITRECYCLED
,

179 
	mLINUX_MIB_TIMEWAITKILLED
,

180 
	mLINUX_MIB_PAWSPASSIVEREJECTED
,

181 
	mLINUX_MIB_PAWSACTIVEREJECTED
,

182 
	mLINUX_MIB_PAWSESTABREJECTED
,

183 
	mLINUX_MIB_DELAYEDACKS
,

184 
	mLINUX_MIB_DELAYEDACKLOCKED
,

185 
	mLINUX_MIB_DELAYEDACKLOST
,

186 
	mLINUX_MIB_LISTENOVERFLOWS
,

187 
	mLINUX_MIB_LISTENDROPS
,

188 
	mLINUX_MIB_TCPPREQUEUED
,

189 
	mLINUX_MIB_TCPDIRECTCOPYFROMBACKLOG
,

190 
	mLINUX_MIB_TCPDIRECTCOPYFROMPREQUEUE
,

191 
	mLINUX_MIB_TCPPREQUEUEDROPPED
,

192 
	mLINUX_MIB_TCPHPHITS
,

193 
	mLINUX_MIB_TCPHPHITSTOUSER
,

194 
	mLINUX_MIB_TCPPUREACKS
,

195 
	mLINUX_MIB_TCPHPACKS
,

196 
	mLINUX_MIB_TCPRENORECOVERY
,

197 
	mLINUX_MIB_TCPSACKRECOVERY
,

198 
	mLINUX_MIB_TCPSACKRENEGING
,

199 
	mLINUX_MIB_TCPFACKREORDER
,

200 
	mLINUX_MIB_TCPSACKREORDER
,

201 
	mLINUX_MIB_TCPRENOREORDER
,

202 
	mLINUX_MIB_TCPTSREORDER
,

203 
	mLINUX_MIB_TCPFULLUNDO
,

204 
	mLINUX_MIB_TCPPARTIALUNDO
,

205 
	mLINUX_MIB_TCPDSACKUNDO
,

206 
	mLINUX_MIB_TCPLOSSUNDO
,

207 
	mLINUX_MIB_TCPLOSTRETRANSMIT
,

208 
	mLINUX_MIB_TCPRENOFAILURES
,

209 
	mLINUX_MIB_TCPSACKFAILURES
,

210 
	mLINUX_MIB_TCPLOSSFAILURES
,

211 
	mLINUX_MIB_TCPFASTRETRANS
,

212 
	mLINUX_MIB_TCPFORWARDRETRANS
,

213 
	mLINUX_MIB_TCPSLOWSTARTRETRANS
,

214 
	mLINUX_MIB_TCPTIMEOUTS
,

215 
	mLINUX_MIB_TCPLOSSPROBES
,

216 
	mLINUX_MIB_TCPLOSSPROBERECOVERY
,

217 
	mLINUX_MIB_TCPRENORECOVERYFAIL
,

218 
	mLINUX_MIB_TCPSACKRECOVERYFAIL
,

219 
	mLINUX_MIB_TCPSCHEDULERFAILED
,

220 
	mLINUX_MIB_TCPRCVCOLLAPSED
,

221 
	mLINUX_MIB_TCPDSACKOLDSENT
,

222 
	mLINUX_MIB_TCPDSACKOFOSENT
,

223 
	mLINUX_MIB_TCPDSACKRECV
,

224 
	mLINUX_MIB_TCPDSACKOFORECV
,

225 
	mLINUX_MIB_TCPABORTONDATA
,

226 
	mLINUX_MIB_TCPABORTONCLOSE
,

227 
	mLINUX_MIB_TCPABORTONMEMORY
,

228 
	mLINUX_MIB_TCPABORTONTIMEOUT
,

229 
	mLINUX_MIB_TCPABORTONLINGER
,

230 
	mLINUX_MIB_TCPABORTFAILED
,

231 
	mLINUX_MIB_TCPMEMORYPRESSURES
,

232 
	mLINUX_MIB_TCPSACKDISCARD
,

233 
	mLINUX_MIB_TCPDSACKIGNOREDOLD
,

234 
	mLINUX_MIB_TCPDSACKIGNOREDNOUNDO
,

235 
	mLINUX_MIB_TCPSPURIOUSRTOS
,

236 
	mLINUX_MIB_TCPMD5NOTFOUND
,

237 
	mLINUX_MIB_TCPMD5UNEXPECTED
,

238 
	mLINUX_MIB_SACKSHIFTED
,

239 
	mLINUX_MIB_SACKMERGED
,

240 
	mLINUX_MIB_SACKSHIFTFALLBACK
,

241 
	mLINUX_MIB_TCPBACKLOGDROP
,

242 
	mLINUX_MIB_TCPMINTTLDROP
,

243 
	mLINUX_MIB_TCPDEFERACCEPTDROP
,

244 
	mLINUX_MIB_IPRPFILTER
,

245 
	mLINUX_MIB_TCPTIMEWAITOVERFLOW
,

246 
	mLINUX_MIB_TCPREQQFULLDOCOOKIES
,

247 
	mLINUX_MIB_TCPREQQFULLDROP
,

248 
	mLINUX_MIB_TCPRETRANSFAIL
,

249 
	mLINUX_MIB_TCPRCVCOALESCE
,

250 
	mLINUX_MIB_TCPOFOQUEUE
,

251 
	mLINUX_MIB_TCPOFODROP
,

252 
	mLINUX_MIB_TCPOFOMERGE
,

253 
	mLINUX_MIB_TCPCHALLENGEACK
,

254 
	mLINUX_MIB_TCPSYNCHALLENGE
,

255 
	mLINUX_MIB_TCPFASTOPENACTIVE
,

256 
	mLINUX_MIB_TCPFASTOPENACTIVEFAIL
,

257 
	mLINUX_MIB_TCPFASTOPENPASSIVE
,

258 
	mLINUX_MIB_TCPFASTOPENPASSIVEFAIL
,

259 
	mLINUX_MIB_TCPFASTOPENLISTENOVERFLOW
,

260 
	mLINUX_MIB_TCPFASTOPENCOOKIEREQD
,

261 
	mLINUX_MIB_TCPSPURIOUS_RTX_HOSTQUEUES
,

262 
	mLINUX_MIB_BUSYPOLLRXPACKETS
,

263 
	mLINUX_MIB_TCPAUTOCORKING
,

264 
	mLINUX_MIB_TCPFROMZEROWINDOWADV
,

265 
	mLINUX_MIB_TCPTOZEROWINDOWADV
,

266 
	mLINUX_MIB_TCPWANTZEROWINDOWADV
,

267 
	mLINUX_MIB_TCPSYNRETRANS
,

268 
	mLINUX_MIB_TCPORIGDATASENT
,

269 
	mLINUX_MIB_TCPHYSTARTTRAINDETECT
,

270 
	mLINUX_MIB_TCPHYSTARTTRAINCWND
,

271 
	mLINUX_MIB_TCPHYSTARTDELAYDETECT
,

272 
	mLINUX_MIB_TCPHYSTARTDELAYCWND
,

273 
	mLINUX_MIB_TCPACKSKIPPEDSYNRECV
,

274 
	mLINUX_MIB_TCPACKSKIPPEDPAWS
,

275 
	mLINUX_MIB_TCPACKSKIPPEDSEQ
,

276 
	mLINUX_MIB_TCPACKSKIPPEDFINWAIT2
,

277 
	mLINUX_MIB_TCPACKSKIPPEDTIMEWAIT
,

278 
	mLINUX_MIB_TCPACKSKIPPEDCHALLENGE
,

279 
	mLINUX_MIB_TCPWINPROBE
,

280 
	mLINUX_MIB_TCPKEEPALIVE
,

281 
	mLINUX_MIB_TCPMTUPFAIL
,

282 
	mLINUX_MIB_TCPMTUPSUCCESS
,

283 
	m__LINUX_MIB_MAX


289 
	mLINUX_MIB_XFRMNUM
 = 0,

290 
	mLINUX_MIB_XFRMINERROR
,

291 
	mLINUX_MIB_XFRMINBUFFERERROR
,

292 
	mLINUX_MIB_XFRMINHDRERROR
,

293 
	mLINUX_MIB_XFRMINNOSTATES
,

294 
	mLINUX_MIB_XFRMINSTATEPROTOERROR
,

295 
	mLINUX_MIB_XFRMINSTATEMODEERROR
,

296 
	mLINUX_MIB_XFRMINSTATESEQERROR
,

297 
	mLINUX_MIB_XFRMINSTATEEXPIRED
,

298 
	mLINUX_MIB_XFRMINSTATEMISMATCH
,

299 
	mLINUX_MIB_XFRMINSTATEINVALID
,

300 
	mLINUX_MIB_XFRMINTMPLMISMATCH
,

301 
	mLINUX_MIB_XFRMINNOPOLS
,

302 
	mLINUX_MIB_XFRMINPOLBLOCK
,

303 
	mLINUX_MIB_XFRMINPOLERROR
,

304 
	mLINUX_MIB_XFRMOUTERROR
,

305 
	mLINUX_MIB_XFRMOUTBUNDLEGENERROR
,

306 
	mLINUX_MIB_XFRMOUTBUNDLECHECKERROR
,

307 
	mLINUX_MIB_XFRMOUTNOSTATES
,

308 
	mLINUX_MIB_XFRMOUTSTATEPROTOERROR
,

309 
	mLINUX_MIB_XFRMOUTSTATEMODEERROR
,

310 
	mLINUX_MIB_XFRMOUTSTATESEQERROR
,

311 
	mLINUX_MIB_XFRMOUTSTATEEXPIRED
,

312 
	mLINUX_MIB_XFRMOUTPOLBLOCK
,

313 
	mLINUX_MIB_XFRMOUTPOLDEAD
,

314 
	mLINUX_MIB_XFRMOUTPOLERROR
,

315 
	mLINUX_MIB_XFRMFWDHDRERROR
,

316 
	mLINUX_MIB_XFRMOUTSTATEINVALID
,

317 
	mLINUX_MIB_XFRMACQUIREERROR
,

318 
	m__LINUX_MIB_XFRMMAX


	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	t__kî√l_ß_Ámûy_t
;

13 
	s__kî√l_sockaddr_°‹age
 {

14 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

16 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

19 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/linux/sockios.h

18 #i‚de‡
_LINUX_SOCKIOS_H


19 
	#_LINUX_SOCKIOS_H


	)

21 
	~<asm/sockios.h
>

24 
	#SIOCINQ
 
FIONREAD


	)

25 
	#SIOCOUTQ
 
TIOCOUTQ


	)

28 
	#SIOCADDRT
 0x890B

	)

29 
	#SIOCDELRT
 0x890C

	)

30 
	#SIOCRTMSG
 0x890D

	)

33 
	#SIOCGIFNAME
 0x8910

	)

34 
	#SIOCSIFLINK
 0x8911

	)

35 
	#SIOCGIFCONF
 0x8912

	)

36 
	#SIOCGIFFLAGS
 0x8913

	)

37 
	#SIOCSIFFLAGS
 0x8914

	)

38 
	#SIOCGIFADDR
 0x8915

	)

39 
	#SIOCSIFADDR
 0x8916

	)

40 
	#SIOCGIFDSTADDR
 0x8917

	)

41 
	#SIOCSIFDSTADDR
 0x8918

	)

42 
	#SIOCGIFBRDADDR
 0x8919

	)

43 
	#SIOCSIFBRDADDR
 0x891®

	)

44 
	#SIOCGIFNETMASK
 0x891b

	)

45 
	#SIOCSIFNETMASK
 0x891¯

	)

46 
	#SIOCGIFMETRIC
 0x891d

	)

47 
	#SIOCSIFMETRIC
 0x891ê

	)

48 
	#SIOCGIFMEM
 0x891‡

	)

49 
	#SIOCSIFMEM
 0x8920

	)

50 
	#SIOCGIFMTU
 0x8921

	)

51 
	#SIOCSIFMTU
 0x8922

	)

52 
	#SIOCSIFNAME
 0x8923

	)

53 
	#SIOCSIFHWADDR
 0x8924

	)

54 
	#SIOCGIFENCAP
 0x8925

	)

55 
	#SIOCSIFENCAP
 0x8926

	)

56 
	#SIOCGIFHWADDR
 0x8927

	)

57 
	#SIOCGIFSLAVE
 0x8929

	)

58 
	#SIOCSIFSLAVE
 0x8930

	)

59 
	#SIOCADDMULTI
 0x8931

	)

60 
	#SIOCDELMULTI
 0x8932

	)

61 
	#SIOCGIFINDEX
 0x8933

	)

62 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

63 
	#SIOCSIFPFLAGS
 0x8934

	)

64 
	#SIOCGIFPFLAGS
 0x8935

	)

65 
	#SIOCDIFADDR
 0x8936

	)

66 
	#SIOCSIFHWBROADCAST
 0x8937

	)

67 
	#SIOCGIFCOUNT
 0x8938

	)

69 
	#SIOCGIFBR
 0x8940

	)

70 
	#SIOCSIFBR
 0x8941

	)

72 
	#SIOCGIFTXQLEN
 0x8942

	)

73 
	#SIOCSIFTXQLEN
 0x8943

	)

78 
	#SIOCETHTOOL
 0x8946

	)

80 
	#SIOCGMIIPHY
 0x8947

	)

81 
	#SIOCGMIIREG
 0x8948

	)

82 
	#SIOCSMIIREG
 0x8949

	)

84 
	#SIOCWANDEV
 0x894A

	)

86 
	#SIOCOUTQNSD
 0x894B

	)

90 
	#SIOCDARP
 0x8953

	)

91 
	#SIOCGARP
 0x8954

	)

92 
	#SIOCSARP
 0x8955

	)

95 
	#SIOCDRARP
 0x8960

	)

96 
	#SIOCGRARP
 0x8961

	)

97 
	#SIOCSRARP
 0x8962

	)

101 
	#SIOCGIFMAP
 0x8970

	)

102 
	#SIOCSIFMAP
 0x8971

	)

106 
	#SIOCADDDLCI
 0x8980

	)

107 
	#SIOCDELDLCI
 0x8981

	)

109 
	#SIOCGIFVLAN
 0x8982

	)

110 
	#SIOCSIFVLAN
 0x8983

	)

114 
	#SIOCBONDENSLAVE
 0x8990

	)

115 
	#SIOCBONDRELEASE
 0x8991

	)

116 
	#SIOCBONDSETHWADDR
 0x8992

	)

117 
	#SIOCBONDSLAVEINFOQUERY
 0x8993

	)

118 
	#SIOCBONDINFOQUERY
 0x8994

	)

119 
	#SIOCBONDCHANGEACTIVE
 0x8995

	)

122 
	#SIOCBRADDBR
 0x89a0

	)

123 
	#SIOCBRDELBR
 0x89a1

	)

124 
	#SIOCBRADDIF
 0x89a2

	)

125 
	#SIOCBRDELIF
 0x89a3

	)

128 
	#SIOCSHWTSTAMP
 0x89b0

	)

129 
	#SIOCGHWTSTAMP
 0x89b1

	)

142 
	#SIOCDEVPRIVATE
 0x89F0

	)

148 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/linux/taskstats.h

16 #i‚de‡
_LINUX_TASKSTATS_H


17 
	#_LINUX_TASKSTATS_H


	)

19 
	~<löux/ty≥s.h
>

36 
	#TASKSTATS_VERSION
 8

	)

37 
	#TS_COMM_LEN
 32

	)

40 
	sèsk°©s
 {

46 
__u16
 
	mvîsi⁄
;

47 
__u32
 
	mac_exôcode
;

52 
__u8
 
	mac_Êag
;

53 
__u8
 
	mac_ni˚
;

71 
__u64
 
˝u_cou¡
 
__©åibuã__
((
Æig√d
(8)));

72 
__u64
 
	m˝u_dñay_tŸÆ
;

79 
__u64
 
	mblkio_cou¡
;

80 
__u64
 
	mblkio_dñay_tŸÆ
;

83 
__u64
 
	msw≠ö_cou¡
;

84 
__u64
 
	msw≠ö_dñay_tŸÆ
;

92 
__u64
 
	m˝u_run_ªÆ_tŸÆ
;

100 
__u64
 
	m˝u_run_vútuÆ_tŸÆ
;

105 
	mac_comm
[
TS_COMM_LEN
];

106 
__u8
 
ac_sched
 
__©åibuã__
((
Æig√d
(8)));

108 
__u8
 
	mac_∑d
[3];

109 
__u32
 
ac_uid
 
__©åibuã__
((
Æig√d
(8)));

111 
__u32
 
	mac_gid
;

112 
__u32
 
	mac_pid
;

113 
__u32
 
	mac_µid
;

114 
__u32
 
	mac_btime
;

115 
__u64
 
ac_ëime
 
__©åibuã__
((
Æig√d
(8)));

117 
__u64
 
	mac_utime
;

118 
__u64
 
	mac_°ime
;

119 
__u64
 
	mac_möÊt
;

120 
__u64
 
	mac_majÊt
;

130 
__u64
 
	mc‹emem
;

134 
__u64
 
	mvútmem
;

139 
__u64
 
	mhiw©î_rss
;

140 
__u64
 
	mhiw©î_vm
;

143 
__u64
 
	mªad_ch¨
;

144 
__u64
 
	mwrôe_ch¨
;

145 
__u64
 
	mªad_sysˇŒs
;

146 
__u64
 
	mwrôe_sysˇŒs
;

149 
	#TASKSTATS_HAS_IO_ACCOUNTING


	)

151 
__u64
 
	mªad_byãs
;

152 
__u64
 
	mwrôe_byãs
;

153 
__u64
 
	mˇn˚Œed_wrôe_byãs
;

155 
__u64
 
	mnvcsw
;

156 
__u64
 
	mnivcsw
;

159 
__u64
 
	mac_utimesˇÀd
;

160 
__u64
 
	mac_°imesˇÀd
;

161 
__u64
 
	m˝u_sˇÀd_run_ªÆ_tŸÆ
;

164 
__u64
 
	m‰ì∑ges_cou¡
;

165 
__u64
 
	m‰ì∑ges_dñay_tŸÆ
;

176 
	mTASKSTATS_CMD_UNSPEC
 = 0,

177 
	mTASKSTATS_CMD_GET
,

178 
	mTASKSTATS_CMD_NEW
,

179 
	m__TASKSTATS_CMD_MAX
,

182 
	#TASKSTATS_CMD_MAX
 (
__TASKSTATS_CMD_MAX
 - 1)

	)

185 
	mTASKSTATS_TYPE_UNSPEC
 = 0,

186 
	mTASKSTATS_TYPE_PID
,

187 
	mTASKSTATS_TYPE_TGID
,

188 
	mTASKSTATS_TYPE_STATS
,

189 
	mTASKSTATS_TYPE_AGGR_PID
,

190 
	mTASKSTATS_TYPE_AGGR_TGID
,

191 
	mTASKSTATS_TYPE_NULL
,

192 
	m__TASKSTATS_TYPE_MAX
,

195 
	#TASKSTATS_TYPE_MAX
 (
__TASKSTATS_TYPE_MAX
 - 1)

	)

198 
	mTASKSTATS_CMD_ATTR_UNSPEC
 = 0,

199 
	mTASKSTATS_CMD_ATTR_PID
,

200 
	mTASKSTATS_CMD_ATTR_TGID
,

201 
	mTASKSTATS_CMD_ATTR_REGISTER_CPUMASK
,

202 
	mTASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK
,

203 
	m__TASKSTATS_CMD_ATTR_MAX
,

206 
	#TASKSTATS_CMD_ATTR_MAX
 (
__TASKSTATS_CMD_ATTR_MAX
 - 1)

	)

210 
	#TASKSTATS_GENL_NAME
 "TASKSTATS"

	)

211 
	#TASKSTATS_GENL_VERSION
 0x1

	)

	@/usr/include/linux/tc_act/tc_mirred.h

1 #i‚de‡
__LINUX_TC_MIR_H


2 
	#__LINUX_TC_MIR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

7 
	#TCA_ACT_MIRRED
 8

	)

8 
	#TCA_EGRESS_REDIR
 1

	)

9 
	#TCA_EGRESS_MIRROR
 2

	)

10 
	#TCA_INGRESS_REDIR
 3

	)

11 
	#TCA_INGRESS_MIRROR
 4

	)

13 
	stc_múªd
 {

14 
	mtc_gí
;

15 
	mó˘i⁄
;

16 
__u32
 
	mifödex
;

20 
	mTCA_MIRRED_UNSPEC
,

21 
	mTCA_MIRRED_TM
,

22 
	mTCA_MIRRED_PARMS
,

23 
	m__TCA_MIRRED_MAX


25 
	#TCA_MIRRED_MAX
 (
__TCA_MIRRED_MAX
 - 1)

	)

	@/usr/include/linux/tc_ematch/tc_em_cmp.h

1 #i‚de‡
__LINUX_TC_EM_CMP_H


2 
	#__LINUX_TC_EM_CMP_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

7 
	stcf_em_cmp
 {

8 
__u32
 
	mvÆ
;

9 
__u32
 
	mmask
;

10 
__u16
 
	moff
;

11 
__u8
 
	mÆign
:4;

12 
__u8
 
	mÊags
:4;

13 
__u8
 
	mœyî
:4;

14 
__u8
 
	m›nd
:4;

18 
	mTCF_EM_ALIGN_U8
 = 1,

19 
	mTCF_EM_ALIGN_U16
 = 2,

20 
	mTCF_EM_ALIGN_U32
 = 4

23 
	#TCF_EM_CMP_TRANS
 1

	)

	@/usr/include/linux/tc_ematch/tc_em_meta.h

1 #i‚de‡
__LINUX_TC_EM_META_H


2 
	#__LINUX_TC_EM_META_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

8 
	mTCA_EM_META_UNSPEC
,

9 
	mTCA_EM_META_HDR
,

10 
	mTCA_EM_META_LVALUE
,

11 
	mTCA_EM_META_RVALUE
,

12 
	m__TCA_EM_META_MAX


14 
	#TCA_EM_META_MAX
 (
__TCA_EM_META_MAX
 - 1)

	)

16 
	stcf_mëa_vÆ
 {

17 
__u16
 
	mköd
;

18 
__u8
 
	mshi·
;

19 
__u8
 
	m›
;

22 
	#TCF_META_TYPE_MASK
 (0x‡<< 12)

	)

23 
	#TCF_META_TYPE
(
köd
Ë(((ködË& 
TCF_META_TYPE_MASK
Ë>> 12)

	)

24 
	#TCF_META_ID_MASK
 0x7ff

	)

25 
	#TCF_META_ID
(
köd
Ë((ködË& 
TCF_META_ID_MASK
)

	)

28 
	mTCF_META_TYPE_VAR
,

29 
	mTCF_META_TYPE_INT
,

30 
	m__TCF_META_TYPE_MAX


32 
	#TCF_META_TYPE_MAX
 (
__TCF_META_TYPE_MAX
 - 1)

	)

35 
	mTCF_META_ID_VALUE
,

36 
	mTCF_META_ID_RANDOM
,

37 
	mTCF_META_ID_LOADAVG_0
,

38 
	mTCF_META_ID_LOADAVG_1
,

39 
	mTCF_META_ID_LOADAVG_2
,

40 
	mTCF_META_ID_DEV
,

41 
	mTCF_META_ID_PRIORITY
,

42 
	mTCF_META_ID_PROTOCOL
,

43 
	mTCF_META_ID_PKTTYPE
,

44 
	mTCF_META_ID_PKTLEN
,

45 
	mTCF_META_ID_DATALEN
,

46 
	mTCF_META_ID_MACLEN
,

47 
	mTCF_META_ID_NFMARK
,

48 
	mTCF_META_ID_TCINDEX
,

49 
	mTCF_META_ID_RTCLASSID
,

50 
	mTCF_META_ID_RTIIF
,

51 
	mTCF_META_ID_SK_FAMILY
,

52 
	mTCF_META_ID_SK_STATE
,

53 
	mTCF_META_ID_SK_REUSE
,

54 
	mTCF_META_ID_SK_BOUND_IF
,

55 
	mTCF_META_ID_SK_REFCNT
,

56 
	mTCF_META_ID_SK_SHUTDOWN
,

57 
	mTCF_META_ID_SK_PROTO
,

58 
	mTCF_META_ID_SK_TYPE
,

59 
	mTCF_META_ID_SK_RCVBUF
,

60 
	mTCF_META_ID_SK_RMEM_ALLOC
,

61 
	mTCF_META_ID_SK_WMEM_ALLOC
,

62 
	mTCF_META_ID_SK_OMEM_ALLOC
,

63 
	mTCF_META_ID_SK_WMEM_QUEUED
,

64 
	mTCF_META_ID_SK_RCV_QLEN
,

65 
	mTCF_META_ID_SK_SND_QLEN
,

66 
	mTCF_META_ID_SK_ERR_QLEN
,

67 
	mTCF_META_ID_SK_FORWARD_ALLOCS
,

68 
	mTCF_META_ID_SK_SNDBUF
,

69 
	mTCF_META_ID_SK_ALLOCS
,

70 
	m__TCF_META_ID_SK_ROUTE_CAPS
,

71 
	mTCF_META_ID_SK_HASH
,

72 
	mTCF_META_ID_SK_LINGERTIME
,

73 
	mTCF_META_ID_SK_ACK_BACKLOG
,

74 
	mTCF_META_ID_SK_MAX_ACK_BACKLOG
,

75 
	mTCF_META_ID_SK_PRIO
,

76 
	mTCF_META_ID_SK_RCVLOWAT
,

77 
	mTCF_META_ID_SK_RCVTIMEO
,

78 
	mTCF_META_ID_SK_SNDTIMEO
,

79 
	mTCF_META_ID_SK_SENDMSG_OFF
,

80 
	mTCF_META_ID_SK_WRITE_PENDING
,

81 
	mTCF_META_ID_VLAN_TAG
,

82 
	mTCF_META_ID_RXHASH
,

83 
	m__TCF_META_ID_MAX


85 
	#TCF_META_ID_MAX
 (
__TCF_META_ID_MAX
 - 1)

	)

87 
	stcf_mëa_hdr
 {

88 
tcf_mëa_vÆ
 
	mÀ·
;

89 
tcf_mëa_vÆ
 
	mright
;

	@/usr/include/linux/tc_ematch/tc_em_nbyte.h

1 #i‚de‡
__LINUX_TC_EM_NBYTE_H


2 
	#__LINUX_TC_EM_NBYTE_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

7 
	stcf_em_nbyã
 {

8 
__u16
 
	moff
;

9 
__u16
 
	mÀn
:12;

10 
__u8
 
	mœyî
:4;

	@/usr/include/linux/tc_ematch/tc_em_text.h

1 #i‚de‡
__LINUX_TC_EM_TEXT_H


2 
	#__LINUX_TC_EM_TEXT_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/pkt_˛s.h
>

7 
	#TC_EM_TEXT_ALGOSIZ
 16

	)

9 
	stcf_em_ãxt
 {

10 
	mÆgo
[
TC_EM_TEXT_ALGOSIZ
];

11 
__u16
 
	m‰om_off£t
;

12 
__u16
 
	mto_off£t
;

13 
__u16
 
	m∑âîn_Àn
;

14 
__u8
 
	m‰om_œyî
:4;

15 
__u8
 
	mto_œyî
:4;

16 
__u8
 
	m∑d
;

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 263244

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/linux/x25.h

11 #i‚def 
X25_KERNEL_H


12 
	#X25_KERNEL_H


	)

14 
	~<löux/ty≥s.h
>

15 
	~<löux/sockë.h
>

17 
	#SIOCX25GSUBSCRIP
 (
SIOCPROTOPRIVATE
 + 0)

	)

18 
	#SIOCX25SSUBSCRIP
 (
SIOCPROTOPRIVATE
 + 1)

	)

19 
	#SIOCX25GFACILITIES
 (
SIOCPROTOPRIVATE
 + 2)

	)

20 
	#SIOCX25SFACILITIES
 (
SIOCPROTOPRIVATE
 + 3)

	)

21 
	#SIOCX25GCALLUSERDATA
 (
SIOCPROTOPRIVATE
 + 4)

	)

22 
	#SIOCX25SCALLUSERDATA
 (
SIOCPROTOPRIVATE
 + 5)

	)

23 
	#SIOCX25GCAUSEDIAG
 (
SIOCPROTOPRIVATE
 + 6)

	)

24 
	#SIOCX25SCUDMATCHLEN
 (
SIOCPROTOPRIVATE
 + 7)

	)

25 
	#SIOCX25CALLACCPTAPPRV
 (
SIOCPROTOPRIVATE
 + 8)

	)

26 
	#SIOCX25SENDCALLACCPT
 (
SIOCPROTOPRIVATE
 + 9)

	)

27 
	#SIOCX25GDTEFACILITIES
 (
SIOCPROTOPRIVATE
 + 10)

	)

28 
	#SIOCX25SDTEFACILITIES
 (
SIOCPROTOPRIVATE
 + 11)

	)

29 
	#SIOCX25SCAUSEDIAG
 (
SIOCPROTOPRIVATE
 + 12)

	)

34 
	#X25_QBITINCL
 1

	)

39 
	#X25_PS16
 4

	)

40 
	#X25_PS32
 5

	)

41 
	#X25_PS64
 6

	)

42 
	#X25_PS128
 7

	)

43 
	#X25_PS256
 8

	)

44 
	#X25_PS512
 9

	)

45 
	#X25_PS1024
 10

	)

46 
	#X25_PS2048
 11

	)

47 
	#X25_PS4096
 12

	)

53 
	sx25_addªss
 {

54 
	mx25_addr
[16];

60 
	ssockaddr_x25
 {

61 
__kî√l_ß_Ámûy_t
 
	msx25_Ámûy
;

62 
x25_addªss
 
	msx25_addr
;

73 
	sx25_subs¸ù_°ru˘
 {

74 
	mdevi˚
[200-()];

75 
	mglobÆ_Ácû_mask
;

76 
	mexãnded
;

81 
	#X25_MASK_REVERSE
 0x01

	)

82 
	#X25_MASK_THROUGHPUT
 0x02

	)

83 
	#X25_MASK_PACKET_SIZE
 0x04

	)

84 
	#X25_MASK_WINDOW_SIZE
 0x08

	)

86 
	#X25_MASK_CALLING_AE
 0x10

	)

87 
	#X25_MASK_CALLED_AE
 0x20

	)

93 
	sx25_rouã_°ru˘
 {

94 
x25_addªss
 
	maddªss
;

95 
	msigdigôs
;

96 
	mdevi˚
[200];

102 
	sx25_Ácûôõs
 {

103 
	mwösize_ö
, 
	mwösize_out
;

104 
	m∑csize_ö
, 
	m∑csize_out
;

105 
	mthroughput
;

106 
	mªvî£
;

117 
	sx25_dã_Ácûôõs
 {

118 
__u16
 
	mdñay_cumul
;

119 
__u16
 
	mdñay_èrgë
;

120 
__u16
 
	mdñay_max
;

121 
__u8
 
	mmö_throughput
;

122 
__u8
 
	mex≥dôed
;

123 
__u8
 
	mˇŒög_Àn
;

124 
__u8
 
	mˇŒed_Àn
;

125 
__u8
 
	mˇŒög_´
[20];

126 
__u8
 
	mˇŒed_´
[20];

132 
	sx25_ˇŒu£rd©a
 {

133 
	mcudÀngth
;

134 
	mcudd©a
[128];

140 
	sx25_ˇu£düg
 {

141 
	mˇu£
;

142 
	mdügno°ic
;

148 
	sx25_subaddr
 {

149 
	mcudm©chÀngth
;

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

50 
__BEGIN_NAMESPACE_STD


53 
	slc⁄v


57 *
	mdecimÆ_poöt
;

58 *
	mthoußnds_£p
;

64 *
	mgroupög
;

70 *
	möt_cuº_symbﬁ
;

71 *
	mcuºícy_symbﬁ
;

72 *
	mm⁄_decimÆ_poöt
;

73 *
	mm⁄_thoußnds_£p
;

74 *
	mm⁄_groupög
;

75 *
	mposôive_sign
;

76 *
	m√g©ive_sign
;

77 
	möt_‰ac_digôs
;

78 
	m‰ac_digôs
;

80 
	mp_cs_¥e˚des
;

82 
	mp_£p_by_•a˚
;

84 
	mn_cs_¥e˚des
;

86 
	mn_£p_by_•a˚
;

93 
	mp_sign_po¢
;

94 
	mn_sign_po¢
;

95 #ifde‡
__USE_ISOC99


97 
	möt_p_cs_¥e˚des
;

99 
	möt_p_£p_by_•a˚
;

101 
	möt_n_cs_¥e˚des
;

103 
	möt_n_£p_by_•a˚
;

110 
	möt_p_sign_po¢
;

111 
	möt_n_sign_po¢
;

113 
	m__öt_p_cs_¥e˚des
;

114 
	m__öt_p_£p_by_•a˚
;

115 
	m__öt_n_cs_¥e˚des
;

116 
	m__öt_n_£p_by_•a˚
;

117 
	m__öt_p_sign_po¢
;

118 
	m__öt_n_sign_po¢
;

124 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

127 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

129 
__END_NAMESPACE_STD


132 #ifdef 
__USE_XOPEN2K8


145 
	~<xloˇÀ.h
>

151 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

152 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

158 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

159 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

160 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

161 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

162 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

163 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

164 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

165 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

166 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

167 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

168 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

169 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

170 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

171 | 
LC_NUMERIC_MASK
 \

172 | 
LC_TIME_MASK
 \

173 | 
LC_COLLATE_MASK
 \

174 | 
LC_MONETARY_MASK
 \

175 | 
LC_MESSAGES_MASK
 \

176 | 
LC_PAPER_MASK
 \

177 | 
LC_NAME_MASK
 \

178 | 
LC_ADDRESS_MASK
 \

179 | 
LC_TELEPHONE_MASK
 \

180 | 
LC_MEASUREMENT_MASK
 \

181 | 
LC_IDENTIFICATION_MASK
 \

182 )

	)

186 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

190 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

197 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

201 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

205 
__END_DECLS


	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

147 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

148 
__MALLOC_DEPRECATED
;

150 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

155 
__MALLOC_DEPRECATED
;

156 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

157 
size_t
 
__size
,

159 
__MALLOC_DEPRECATED
;

160 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

161 
size_t
 
__size
,

163 
__MALLOC_DEPRECATED
;

164 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

167 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

170 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


32 
	~<bôs/huge_vÆ.h
>

33 #ifde‡
__USE_ISOC99


34 
	~<bôs/huge_vÆf.h
>

35 
	~<bôs/huge_vÆl.h
>

38 
	~<bôs/öf.h
>

41 
	~<bôs/«n.h
>

45 
	~<bôs/m©hdef.h
>

52 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

53 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

54 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

56 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

57 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

58 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

59 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

61 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

62 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

63 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

65 
	#_MdoubÀ_
 

	)

66 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

67 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

68 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

69 
	~<bôs/m©hˇŒs.h
>

70 #unde‡
_MdoubÀ_


71 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


72 #unde‡
_MdoubÀ_END_NAMESPACE


73 #unde‡
__MATH_PRECNAME


75 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


81 #i‚de‡
_MÊﬂt_


82 
	#_MÊﬂt_
 

	)

84 
	#_MdoubÀ_
 
_MÊﬂt_


	)

85 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

86 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

87 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

88 
	~<bôs/m©hˇŒs.h
>

89 #unde‡
_MdoubÀ_


90 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


91 #unde‡
_MdoubÀ_END_NAMESPACE


92 #unde‡
__MATH_PRECNAME


94 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

95 || 
deföed
 
__LDBL_COMPAT


96 #ifde‡
__LDBL_COMPAT


98 #ifde‡
__USE_ISOC99


99 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

100 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

101 #ifde‡
__REDIRECT_NTH


102 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

103 
__∆dbl_√xâow¨df
)

104 
	`__©åibuã__
 ((
__c⁄°__
));

105 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

106 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

107 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

108 (
__x
, 
__y
),

109 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

113 #unde‡
__MATHDECL_1


114 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

115 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

116 
¨gs
, 
Æüs
)

	)

117 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

118 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

124 #i‚de‡
_Ml⁄g_doubÀ_


125 
	#_Ml⁄g_doubÀ_
 

	)

127 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

128 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

129 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

130 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

131 
	#__MATH_DECLARE_LDOUBLE
 1

	)

132 
	~<bôs/m©hˇŒs.h
>

133 #unde‡
_MdoubÀ_


134 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


135 #unde‡
_MdoubÀ_END_NAMESPACE


136 #unde‡
__MATH_PRECNAME


141 #unde‡
__MATHDECL_1


142 #unde‡
__MATHDECL


143 #unde‡
__MATHCALL


146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


148 
signgam
;

153 #ifde‡
__USE_ISOC99


191 
FP_NAN
 =

192 
	#FP_NAN
 0

	)

193 
FP_NAN
,

194 
FP_INFINITE
 =

195 
	#FP_INFINITE
 1

	)

196 
FP_INFINITE
,

197 
FP_ZERO
 =

198 
	#FP_ZERO
 2

	)

199 
FP_ZERO
,

200 
FP_SUBNORMAL
 =

201 
	#FP_SUBNORMAL
 3

	)

202 
FP_SUBNORMAL
,

203 
FP_NORMAL
 =

204 
	#FP_NORMAL
 4

	)

205 
FP_NORMAL


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
	#Â˛assify
(
x
) \

211 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

213 
	#Â˛assify
(
x
) \

214 ( (
x
) ==  () \

215 ? 
	`__Â˛assifyf
 (
x
) \

216 :  (
x
) ==  () \

217 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

221 #ifde‡
__NO_LONG_DOUBLE_MATH


222 
	#signbô
(
x
) \

223 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

225 
	#signbô
(
x
) \

226 ( (
x
) ==  () \

227 ? 
	`__signbôf
 (
x
) \

228 :  (
x
) ==  () \

229 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

233 #ifde‡
__NO_LONG_DOUBLE_MATH


234 
	#isföôe
(
x
) \

235 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

237 
	#isföôe
(
x
) \

238 ( (
x
) ==  () \

239 ? 
	`__föôef
 (
x
) \

240 :  (
x
) ==  () \

241 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

245 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

249 #ifde‡
__NO_LONG_DOUBLE_MATH


250 
	#i¢™
(
x
) \

251 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

253 
	#i¢™
(
x
) \

254 ( (
x
) ==  () \

255 ? 
	`__i¢™f
 (
x
) \

256 :  (
x
) ==  () \

257 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

261 #ifde‡
__NO_LONG_DOUBLE_MATH


262 
	#isöf
(
x
) \

263 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

265 
	#isöf
(
x
) \

266 ( (
x
) ==  () \

267 ? 
	`__isöff
 (
x
) \

268 :  (
x
) ==  () \

269 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

273 
	#MATH_ERRNO
 1

	)

274 
	#MATH_ERREXCEPT
 2

	)

279 #i‚de‡
__FAST_MATH__


280 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

285 #ifde‡
__USE_GNU


287 #ifde‡
__NO_LONG_DOUBLE_MATH


288 
	#issig«lög
(
x
) \

289 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

291 
	#issig«lög
(
x
) \

292 ( (
x
) ==  () \

293 ? 
	`__issig«lögf
 (
x
) \

294 :  (
x
) ==  () \

295 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

299 #ifdef 
__USE_MISC


303 
_IEEE_
 = -1,

304 
_SVID_
,

305 
_XOPEN_
,

306 
_POSIX_
,

307 
_ISOC_


308 } 
	t_LIB_VERSION_TYPE
;

313 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

317 #ifde‡
__USE_SVID


323 #ifde‡
__˝lu•lus


324 
__ex˚±i⁄


326 
ex˚±i⁄


329 
ty≥
;

330 *
«me
;

331 
¨g1
;

332 
¨g2
;

333 
ªtvÆ
;

334 
	}
};

336 #ifde‡
__˝lu•lus


337 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

339 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

342 
	#X_TLOSS
 1.41484755040568800000e+16

	)

345 
	#DOMAIN
 1

	)

346 
	#SING
 2

	)

347 
	#OVERFLOW
 3

	)

348 
	#UNDERFLOW
 4

	)

349 
	#TLOSS
 5

	)

350 
	#PLOSS
 6

	)

353 
	#HUGE
 3.40282347e+38F

	)

357 #ifde‡
__USE_XOPEN


359 
	#MAXFLOAT
 3.40282347e+38F

	)

366 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


367 
	#M_E
 2.7182818284590452354

	)

368 
	#M_LOG2E
 1.4426950408889634074

	)

369 
	#M_LOG10E
 0.43429448190325182765

	)

370 
	#M_LN2
 0.69314718055994530942

	)

371 
	#M_LN10
 2.30258509299404568402

	)

372 
	#M_PI
 3.14159265358979323846

	)

373 
	#M_PI_2
 1.57079632679489661923

	)

374 
	#M_PI_4
 0.78539816339744830962

	)

375 
	#M_1_PI
 0.31830988618379067154

	)

376 
	#M_2_PI
 0.63661977236758134308

	)

377 
	#M_2_SQRTPI
 1.12837916709551257390

	)

378 
	#M_SQRT2
 1.41421356237309504880

	)

379 
	#M_SQRT1_2
 0.70710678118654752440

	)

385 #ifde‡
__USE_GNU


386 
	#M_El
 2.718281828459045235360287471352662498L

	)

387 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

388 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

389 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

390 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

391 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

392 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

393 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

394 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

395 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

396 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

397 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

398 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

405 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


406 
	#__NO_MATH_INLINES
 1

	)

409 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

416 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

417 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

418 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

419 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

420 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

421 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

425 #ifde‡
__USE_EXTERN_INLINES


426 
	~<bôs/m©hölöe.h
>

431 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

432 
	~<bôs/m©h-föôe.h
>

435 #ifde‡
__USE_ISOC99


439 #i‚de‡
isgª©î


440 
	#isgª©î
(
x
, 
y
) \

441 (
__exãnsi⁄__
 \

442 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

443 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

447 #i‚de‡
isgª©îequÆ


448 
	#isgª©îequÆ
(
x
, 
y
) \

449 (
__exãnsi⁄__
 \

450 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

451 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

455 #i‚de‡
i¶ess


456 
	#i¶ess
(
x
, 
y
) \

457 (
__exãnsi⁄__
 \

458 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

459 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

463 #i‚de‡
i¶es£quÆ


464 
	#i¶es£quÆ
(
x
, 
y
) \

465 (
__exãnsi⁄__
 \

466 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

467 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

471 #i‚de‡
i¶essgª©î


472 
	#i¶essgª©î
(
x
, 
y
) \

473 (
__exãnsi⁄__
 \

474 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

475 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

479 #i‚de‡
isun‹dîed


480 
	#isun‹dîed
(
u
, 
v
) \

481 (
__exãnsi⁄__
 \

482 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

483 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

488 
	g__END_DECLS


	@/usr/include/net/ethernet.h

21 #i‚de‡
__NET_ETHERNET_H


22 
	#__NET_ETHERNET_H
 1

	)

24 
	~<sys/cdefs.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<löux/if_ëhî.h
>

28 
__BEGIN_DECLS


32 
	sëhî_addr


34 
u_öt8_t
 
	mëhî_addr_o˘ë
[
ETH_ALEN
];

35 } 
__©åibuã__
 ((
__∑cked__
));

38 
	sëhî_hódî


40 
u_öt8_t
 
	mëhî_dho°
[
ETH_ALEN
];

41 
u_öt8_t
 
	mëhî_sho°
[
ETH_ALEN
];

42 
u_öt16_t
 
	mëhî_ty≥
;

43 } 
__©åibuã__
 ((
__∑cked__
));

46 
	#ETHERTYPE_PUP
 0x0200

	)

47 
	#ETHERTYPE_SPRITE
 0x0500

	)

48 
	#ETHERTYPE_IP
 0x0800

	)

49 
	#ETHERTYPE_ARP
 0x0806

	)

50 
	#ETHERTYPE_REVARP
 0x8035

	)

51 
	#ETHERTYPE_AT
 0x809B

	)

52 
	#ETHERTYPE_AARP
 0x80F3

	)

53 
	#ETHERTYPE_VLAN
 0x8100

	)

54 
	#ETHERTYPE_IPX
 0x8137

	)

55 
	#ETHERTYPE_IPV6
 0x86dd

	)

56 
	#ETHERTYPE_LOOPBACK
 0x9000

	)

59 
	#ETHER_ADDR_LEN
 
ETH_ALEN


	)

60 
	#ETHER_TYPE_LEN
 2

	)

61 
	#ETHER_CRC_LEN
 4

	)

62 
	#ETHER_HDR_LEN
 
ETH_HLEN


	)

63 
	#ETHER_MIN_LEN
 (
ETH_ZLEN
 + 
ETHER_CRC_LEN
Ë

	)

64 
	#ETHER_MAX_LEN
 (
ETH_FRAME_LEN
 + 
ETHER_CRC_LEN
Ë

	)

67 
	#ETHER_IS_VALID_LEN
(
foo
) \

68 ((
foo
Ë>
ETHER_MIN_LEN
 && (fooË<
ETHER_MAX_LEN
)

	)

75 
	#ETHERTYPE_TRAIL
 0x1000

	)

76 
	#ETHERTYPE_NTRAILER
 16

	)

78 
	#ETHERMTU
 
ETH_DATA_LEN


	)

79 
	#ETHERMIN
 (
ETHER_MIN_LEN
 - 
ETHER_HDR_LEN
 - 
ETHER_CRC_LEN
)

	)

81 
	g__END_DECLS


	@/usr/include/net/if.h

19 #i‚de‡
_NET_IF_H


20 
	#_NET_IF_H
 1

	)

22 
	~<„©uªs.h
>

24 #ifde‡
__USE_MISC


25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

31 
	#IF_NAMESIZE
 16

	)

33 
	sif_«meödex


35 
	mif_ödex
;

36 *
	mif_«me
;

40 #ifde‡
__USE_MISC


44 
	mIFF_UP
 = 0x1,

45 
	#IFF_UP
 
IFF_UP


	)

46 
	mIFF_BROADCAST
 = 0x2,

47 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

48 
	mIFF_DEBUG
 = 0x4,

49 
	#IFF_DEBUG
 
IFF_DEBUG


	)

50 
	mIFF_LOOPBACK
 = 0x8,

51 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

52 
	mIFF_POINTOPOINT
 = 0x10,

53 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

54 
	mIFF_NOTRAILERS
 = 0x20,

55 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

56 
	mIFF_RUNNING
 = 0x40,

57 
	#IFF_RUNNING
 
IFF_RUNNING


	)

58 
	mIFF_NOARP
 = 0x80,

59 
	#IFF_NOARP
 
IFF_NOARP


	)

60 
	mIFF_PROMISC
 = 0x100,

61 
	#IFF_PROMISC
 
IFF_PROMISC


	)

64 
	mIFF_ALLMULTI
 = 0x200,

65 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

67 
	mIFF_MASTER
 = 0x400,

68 
	#IFF_MASTER
 
IFF_MASTER


	)

69 
	mIFF_SLAVE
 = 0x800,

70 
	#IFF_SLAVE
 
IFF_SLAVE


	)

72 
	mIFF_MULTICAST
 = 0x1000,

73 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

75 
	mIFF_PORTSEL
 = 0x2000,

76 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

77 
	mIFF_AUTOMEDIA
 = 0x4000,

78 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

79 
	mIFF_DYNAMIC
 = 0x8000

80 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

88 
	siÁddr


90 
sockaddr
 
	miÁ_addr
;

93 
sockaddr
 
	mifu_brﬂdaddr
;

94 
sockaddr
 
	mifu_d°addr
;

95 } 
	miÁ_ifu
;

96 
iÁ˚
 *
	miÁ_iÂ
;

97 
iÁddr
 *
	miÁ_√xt
;

100 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

101 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

111 
	sifm≠


113 
	mmem_°¨t
;

114 
	mmem_íd
;

115 
	mba£_addr
;

116 
	múq
;

117 
	mdma
;

118 
	mp‹t
;

126 
	si‰eq


128 
	#IFHWADDRLEN
 6

	)

129 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

132 
	mi‰n_«me
[
IFNAMSIZ
];

133 } 
	mi‰_i‰n
;

137 
sockaddr
 
	mi‰u_addr
;

138 
sockaddr
 
	mi‰u_d°addr
;

139 
sockaddr
 
	mi‰u_brﬂdaddr
;

140 
sockaddr
 
	mi‰u_√tmask
;

141 
sockaddr
 
	mi‰u_hwaddr
;

142 
	mi‰u_Êags
;

143 
	mi‰u_ivÆue
;

144 
	mi‰u_mtu
;

145 
ifm≠
 
	mi‰u_m≠
;

146 
	mi‰u_¶ave
[
IFNAMSIZ
];

147 
	mi‰u_√w«me
[
IFNAMSIZ
];

148 
__ˇddr_t
 
	mi‰u_d©a
;

149 } 
	mi‰_i‰u
;

151 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

152 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

153 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

154 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

155 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

156 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

157 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

158 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

159 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

160 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

161 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

162 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

163 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

164 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

167 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

168 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

169 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

176 
	sifc⁄f


178 
	mifc_Àn
;

181 
__ˇddr_t
 
	mifcu_buf
;

182 
i‰eq
 *
	mifcu_ªq
;

183 } 
	mifc_ifcu
;

185 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

186 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

187 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

190 
__BEGIN_DECLS


193 
	$if_«mëoödex
 (c⁄° *
__i‚ame
Ë
__THROW
;

194 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

197 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

200 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

202 
__END_DECLS


	@/usr/include/net/if_arp.h

22 #i‚de‡
_NET_IF_ARP_H


24 
	#_NET_IF_ARP_H
 1

	)

25 
	~<sys/cdefs.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/sockë.h
>

30 
	g__BEGIN_DECLS


33 
	#MAX_ADDR_LEN
 7

	)

39 
	#ARPOP_REQUEST
 1

	)

40 
	#ARPOP_REPLY
 2

	)

41 
	#ARPOP_RREQUEST
 3

	)

42 
	#ARPOP_RREPLY
 4

	)

43 
	#ARPOP_InREQUEST
 8

	)

44 
	#ARPOP_InREPLY
 9

	)

45 
	#ARPOP_NAK
 10

	)

54 
	s¨phdr


56 
	m¨_hrd
;

57 
	m¨_¥o
;

58 
	m¨_h 
;

59 
	m¨_∂n
;

60 
	m¨_›
;

64 
	m__¨_sha
[
ETH_ALEN
];

65 
	m__¨_sù
[4];

66 
	m__¨_tha
[
ETH_ALEN
];

67 
	m__¨_tù
[4];

73 
	#ARPHRD_NETROM
 0

	)

74 
	#ARPHRD_ETHER
 1

	)

75 
	#ARPHRD_EETHER
 2

	)

76 
	#ARPHRD_AX25
 3

	)

77 
	#ARPHRD_PRONET
 4

	)

78 
	#ARPHRD_CHAOS
 5

	)

79 
	#ARPHRD_IEEE802
 6

	)

80 
	#ARPHRD_ARCNET
 7

	)

81 
	#ARPHRD_APPLETLK
 8

	)

82 
	#ARPHRD_DLCI
 15

	)

83 
	#ARPHRD_ATM
 19

	)

84 
	#ARPHRD_METRICOM
 23

	)

85 
	#ARPHRD_IEEE1394
 24

	)

86 
	#ARPHRD_EUI64
 27

	)

87 
	#ARPHRD_INFINIBAND
 32

	)

90 
	#ARPHRD_SLIP
 256

	)

91 
	#ARPHRD_CSLIP
 257

	)

92 
	#ARPHRD_SLIP6
 258

	)

93 
	#ARPHRD_CSLIP6
 259

	)

94 
	#ARPHRD_RSRVD
 260

	)

95 
	#ARPHRD_ADAPT
 264

	)

96 
	#ARPHRD_ROSE
 270

	)

97 
	#ARPHRD_X25
 271

	)

98 
	#ARPHRD_HWX25
 272

	)

99 
	#ARPHRD_PPP
 512

	)

100 
	#ARPHRD_CISCO
 513

	)

101 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

102 
	#ARPHRD_LAPB
 516

	)

103 
	#ARPHRD_DDCMP
 517

	)

104 
	#ARPHRD_RAWHDLC
 518

	)

106 
	#ARPHRD_TUNNEL
 768

	)

107 
	#ARPHRD_TUNNEL6
 769

	)

108 
	#ARPHRD_FRAD
 770

	)

109 
	#ARPHRD_SKIP
 771

	)

110 
	#ARPHRD_LOOPBACK
 772

	)

111 
	#ARPHRD_LOCALTLK
 773

	)

112 
	#ARPHRD_FDDI
 774

	)

113 
	#ARPHRD_BIF
 775

	)

114 
	#ARPHRD_SIT
 776

	)

115 
	#ARPHRD_IPDDP
 777

	)

116 
	#ARPHRD_IPGRE
 778

	)

117 
	#ARPHRD_PIMREG
 779

	)

118 
	#ARPHRD_HIPPI
 780

	)

119 
	#ARPHRD_ASH
 781

	)

120 
	#ARPHRD_ECONET
 782

	)

121 
	#ARPHRD_IRDA
 783

	)

122 
	#ARPHRD_FCPP
 784

	)

123 
	#ARPHRD_FCAL
 785

	)

124 
	#ARPHRD_FCPL
 786

	)

125 
	#ARPHRD_FCFABRIC
 787

	)

126 
	#ARPHRD_IEEE802_TR
 800

	)

127 
	#ARPHRD_IEEE80211
 801

	)

128 
	#ARPHRD_IEEE80211_PRISM
 802

	)

129 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

130 
	#ARPHRD_IEEE802154
 804

	)

131 
	#ARPHRD_IEEE802154_PHY
 805

	)

133 
	#ARPHRD_VOID
 0xFFFF

	)

134 
	#ARPHRD_NONE
 0xFFFE

	)

138 
	s¨¥eq


140 
sockaddr
 
	m¨p_∑
;

141 
sockaddr
 
	m¨p_ha
;

142 
	m¨p_Êags
;

143 
sockaddr
 
	m¨p_√tmask
;

144 
	m¨p_dev
[16];

147 
	s¨¥eq_ﬁd


149 
sockaddr
 
	m¨p_∑
;

150 
sockaddr
 
	m¨p_ha
;

151 
	m¨p_Êags
;

152 
sockaddr
 
	m¨p_√tmask
;

156 
	#ATF_COM
 0x02

	)

157 
	#ATF_PERM
 0x04

	)

158 
	#ATF_PUBL
 0x08

	)

159 
	#ATF_USETRAILERS
 0x10

	)

160 
	#ATF_NETMASK
 0x20

	)

162 
	#ATF_DONTPUB
 0x40

	)

163 
	#ATF_MAGIC
 0x80

	)

167 
	#ARPD_UPDATE
 0x01

	)

168 
	#ARPD_LOOKUP
 0x02

	)

169 
	#ARPD_FLUSH
 0x03

	)

171 
	s¨pd_ªque°


173 
	mªq
;

174 
u_öt32_t
 
	mù
;

175 
	mdev
;

176 
	m°amp
;

177 
	mupd©ed
;

178 
	mha
[
MAX_ADDR_LEN
];

181 
	g__END_DECLS


	@/usr/include/net/route.h

20 #i‚de‡
_NET_ROUTE_H


21 
	#_NET_ROUTE_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<sys/sockë.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<√töë/ö.h
>

27 
	~<bôs/w‹dsize.h
>

31 
	sπíåy


33 
	mπ_∑d1
;

34 
sockaddr
 
	mπ_d°
;

35 
sockaddr
 
	mπ_g©eway
;

36 
sockaddr
 
	mπ_gímask
;

37 
	mπ_Êags
;

38 
	mπ_∑d2
;

39 
	mπ_∑d3
;

40 
	mπ_tos
;

41 
	mπ_˛ass
;

42 #i‡
__WORDSIZE
 == 64

43 
	mπ_∑d4
[3];

45 
	mπ_∑d4
;

47 
	mπ_mëric
;

48 *
	mπ_dev
;

49 
	mπ_mtu
;

50 
	mπ_wödow
;

51 
	mπ_úâ
;

54 
	#π_mss
 
π_mtu


	)

57 
	sö6_πmsg


59 
ö6_addr
 
	mπmsg_d°
;

60 
ö6_addr
 
	mπmsg_§c
;

61 
ö6_addr
 
	mπmsg_g©eway
;

62 
u_öt32_t
 
	mπmsg_ty≥
;

63 
u_öt16_t
 
	mπmsg_d°_Àn
;

64 
u_öt16_t
 
	mπmsg_§c_Àn
;

65 
u_öt32_t
 
	mπmsg_mëric
;

66 
	mπmsg_öfo
;

67 
u_öt32_t
 
	mπmsg_Êags
;

68 
	mπmsg_ifödex
;

72 
	#RTF_UP
 0x0001

	)

73 
	#RTF_GATEWAY
 0x0002

	)

75 
	#RTF_HOST
 0x0004

	)

76 
	#RTF_REINSTATE
 0x0008

	)

77 
	#RTF_DYNAMIC
 0x0010

	)

78 
	#RTF_MODIFIED
 0x0020

	)

79 
	#RTF_MTU
 0x0040

	)

80 
	#RTF_MSS
 
RTF_MTU


	)

81 
	#RTF_WINDOW
 0x0080

	)

82 
	#RTF_IRTT
 0x0100

	)

83 
	#RTF_REJECT
 0x0200

	)

84 
	#RTF_STATIC
 0x0400

	)

85 
	#RTF_XRESOLVE
 0x0800

	)

86 
	#RTF_NOFORWARD
 0x1000

	)

87 
	#RTF_THROW
 0x2000

	)

88 
	#RTF_NOPMTUDISC
 0x4000

	)

91 
	#RTF_DEFAULT
 0x00010000

	)

92 
	#RTF_ALLONLINK
 0x00020000

	)

93 
	#RTF_ADDRCONF
 0x00040000

	)

95 
	#RTF_LINKRT
 0x00100000

	)

96 
	#RTF_NONEXTHOP
 0x00200000

	)

98 
	#RTF_CACHE
 0x01000000

	)

99 
	#RTF_FLOW
 0x02000000

	)

100 
	#RTF_POLICY
 0x04000000

	)

102 
	#RTCF_VALVE
 0x00200000

	)

103 
	#RTCF_MASQ
 0x00400000

	)

104 
	#RTCF_NAT
 0x00800000

	)

105 
	#RTCF_DOREDIRECT
 0x01000000

	)

106 
	#RTCF_LOG
 0x02000000

	)

107 
	#RTCF_DIRECTSRC
 0x04000000

	)

109 
	#RTF_LOCAL
 0x80000000

	)

110 
	#RTF_INTERFACE
 0x40000000

	)

111 
	#RTF_MULTICAST
 0x20000000

	)

112 
	#RTF_BROADCAST
 0x10000000

	)

113 
	#RTF_NAT
 0x08000000

	)

115 
	#RTF_ADDRCLASSMASK
 0xF8000000

	)

116 
	#RT_ADDRCLASS
(
Êags
Ë((
__u_öt32_t
ËÊag†>> 23)

	)

118 
	#RT_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

120 
	#RT_LOCALADDR
(
Êags
Ë((Êag†& 
RTF_ADDRCLASSMASK
) \

121 =(
RTF_LOCAL
|
RTF_INTERFACE
))

	)

123 
	#RT_CLASS_UNSPEC
 0

	)

124 
	#RT_CLASS_DEFAULT
 253

	)

126 
	#RT_CLASS_MAIN
 254

	)

127 
	#RT_CLASS_LOCAL
 255

	)

128 
	#RT_CLASS_MAX
 255

	)

131 
	#RTMSG_ACK
 
NLMSG_ACK


	)

132 
	#RTMSG_OVERRUN
 
NLMSG_OVERRUN


	)

134 
	#RTMSG_NEWDEVICE
 0x11

	)

135 
	#RTMSG_DELDEVICE
 0x12

	)

136 
	#RTMSG_NEWROUTE
 0x21

	)

137 
	#RTMSG_DELROUTE
 0x22

	)

138 
	#RTMSG_NEWRULE
 0x31

	)

139 
	#RTMSG_DELRULE
 0x32

	)

140 
	#RTMSG_CONTROL
 0x40

	)

142 
	#RTMSG_AR_FAILED
 0x51

	)

	@/usr/include/netax25/ax25.h

18 #i‚de‡
_NETAX25_AX25_H


19 
	#_NETAX25_AX25_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<bôs/sockaddr.h
>

25 
	#SOL_AX25
 257

	)

28 
	#AX25_WINDOW
 1

	)

29 
	#AX25_T1
 2

	)

30 
	#AX25_T2
 5

	)

31 
	#AX25_T3
 4

	)

32 
	#AX25_N2
 3

	)

33 
	#AX25_BACKOFF
 6

	)

34 
	#AX25_EXTSEQ
 7

	)

35 
	#AX25_PIDINCL
 8

	)

36 
	#AX25_IDLE
 9

	)

37 
	#AX25_PACLEN
 10

	)

38 
	#AX25_IPMAXQUEUE
 11

	)

39 
	#AX25_IAMDIGI
 12

	)

40 
	#AX25_KILL
 99

	)

43 
	#SIOCAX25GETUID
 (
SIOCPROTOPRIVATE
)

	)

44 
	#SIOCAX25ADDUID
 (
SIOCPROTOPRIVATE
+1)

	)

45 
	#SIOCAX25DELUID
 (
SIOCPROTOPRIVATE
+2)

	)

46 
	#SIOCAX25NOUID
 (
SIOCPROTOPRIVATE
+3)

	)

47 
	#SIOCAX25BPQADDR
 (
SIOCPROTOPRIVATE
+4)

	)

48 
	#SIOCAX25GETPARMS
 (
SIOCPROTOPRIVATE
+5)

	)

49 
	#SIOCAX25SETPARMS
 (
SIOCPROTOPRIVATE
+6)

	)

50 
	#SIOCAX25OPTRT
 (
SIOCPROTOPRIVATE
+7)

	)

51 
	#SIOCAX25CTLCON
 (
SIOCPROTOPRIVATE
+8)

	)

52 
	#SIOCAX25GETINFO
 (
SIOCPROTOPRIVATE
+9)

	)

53 
	#SIOCAX25ADDFWD
 (
SIOCPROTOPRIVATE
+10)

	)

54 
	#SIOCAX25DELFWD
 (
SIOCPROTOPRIVATE
+11)

	)

57 
	#AX25_NOUID_DEFAULT
 0

	)

58 
	#AX25_NOUID_BLOCK
 1

	)

59 
	#AX25_SET_RT_IPMODE
 2

	)

62 
	#AX25_DIGI_INBAND
 0x01

	)

63 
	#AX25_DIGI_XBAND
 0x02

	)

66 
	#AX25_MAX_DIGIS
 8

	)

71 
	max25_ˇŒ
[7];

73 
	tax25_addªss
;

75 
	ssockaddr_ax25


77 
ß_Ámûy_t
 
	mßx25_Ámûy
;

78 
ax25_addªss
 
	mßx25_ˇŒ
;

79 
	mßx25_ndigis
;

85 
	sfuŒ_sockaddr_ax25


87 
sockaddr_ax25
 
	mfß_ax25
;

88 
ax25_addªss
 
	mfß_digùóãr
[
AX25_MAX_DIGIS
];

90 
	#ßx25_uid
 
ßx25_ndigis


	)

92 
	sax25_rouãs_°ru˘


94 
ax25_addªss
 
	mp‹t_addr
;

95 
ax25_addªss
 
	mde°_addr
;

96 
	mdigi_cou¡
;

97 
ax25_addªss
 
	mdigi_addr
[
AX25_MAX_DIGIS
];

101 
	sax25_˘l_°ru˘


103 
ax25_addªss
 
	mp‹t_addr
;

104 
ax25_addªss
 
	msour˚_addr
;

105 
ax25_addªss
 
	mde°_addr
;

106 
	mcmd
;

107 
	m¨g
;

108 
	mdigi_cou¡
;

109 
ax25_addªss
 
	mdigi_addr
[
AX25_MAX_DIGIS
];

112 
	sax25_öfo_°ru˘


114 
	mn2
, 
	mn2cou¡
;

115 
	mt1
, 
	mt1timî
;

116 
	mt2
, 
	mt2timî
;

117 
	mt3
, 
	mt3timî
;

118 
	midÀ
, 
	midÀtimî
;

119 
	m°©e
;

120 
	mrcv_q
, 
	m¢d_q
;

123 
	sax25_fwd_°ru˘


125 
ax25_addªss
 
	mp‹t_‰om
;

126 
ax25_addªss
 
	mp‹t_to
;

130 
	sax25_rouã_›t_°ru˘


132 
ax25_addªss
 
	mp‹t_addr
;

133 
ax25_addªss
 
	mde°_addr
;

134 
	mcmd
;

135 
	m¨g
;

139 
	sax25_bpqaddr_°ru˘


141 
	mdev
[16];

142 
ax25_addªss
 
	maddr
;

146 
	#AX25_VALUES_IPDEFMODE
 0

	)

147 
	#AX25_VALUES_AXDEFMODE
 1

	)

148 
	#AX25_VALUES_NETROM
 2

	)

149 
	#AX25_VALUES_TEXT
 3

	)

150 
	#AX25_VALUES_BACKOFF
 4

	)

151 
	#AX25_VALUES_CONMODE
 5

	)

152 
	#AX25_VALUES_WINDOW
 6

	)

153 
	#AX25_VALUES_EWINDOW
 7

	)

154 
	#AX25_VALUES_T1
 8

	)

155 
	#AX25_VALUES_T2
 9

	)

156 
	#AX25_VALUES_T3
 10

	)

157 
	#AX25_VALUES_N2
 11

	)

158 
	#AX25_VALUES_DIGI
 12

	)

159 
	#AX25_VALUES_IDLE
 13

	)

160 
	#AX25_VALUES_PACLEN
 14

	)

161 
	#AX25_VALUES_IPMAXQUEUE
 15

	)

162 
	#AX25_MAX_VALUES
 20

	)

164 
	sax25_∑rms_°ru˘


166 
ax25_addªss
 
	mp‹t_addr
;

167 
	mvÆues
[
AX25_MAX_VALUES
];

	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_BSD


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifdef 
__USE_POSIX


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__glibc_ª£rved
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/neteconet/ec.h

19 #i‚de‡
_NETECONET_EC_H


20 
	#_NETECONET_EC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/sockaddr.h
>

25 
	sec_addr


27 
	m°©i⁄
;

28 
	m√t
;

31 
	ssockaddr_ec


33 
__SOCKADDR_COMMON
 (
£c_
);

34 
	mp‹t
;

35 
	mcb
;

36 
	mty≥
;

37 
ec_addr
 
	maddr
;

38 
	mcookõ
;

41 
	#ECTYPE_PACKET_RECEIVED
 0

	)

42 
	#ECTYPE_TRANSMIT_STATUS
 0x10

	)

44 
	#ECTYPE_TRANSMIT_OK
 1

	)

45 
	#ECTYPE_TRANSMIT_NOT_LISTENING
 2

	)

46 
	#ECTYPE_TRANSMIT_NET_ERROR
 3

	)

47 
	#ECTYPE_TRANSMIT_NO_CLOCK
 4

	)

48 
	#ECTYPE_TRANSMIT_LINE_JAMMED
 5

	)

49 
	#ECTYPE_TRANSMIT_NOT_PRESENT
 6

	)

	@/usr/include/netinet/if_fddi.h

18 #i‚de‡
_NETINET_IF_FDDI_H


19 
	#_NETINET_IF_FDDI_H
 1

	)

21 
	~<sys/cdefs.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<asm/ty≥s.h
>

25 
	~<löux/if_fddi.h
>

27 #ifde‡
__USE_BSD


29 
	sfddi_hódî
 {

30 
u_öt8_t
 
	mfddi_fc
;

31 
u_öt8_t
 
	mfddi_dho°
[
FDDI_K_ALEN
];

32 
u_öt8_t
 
	mfddi_sho°
[
FDDI_K_ALEN
];

	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_RAW
 = 255,

89 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

90 
	mIPPROTO_MAX


96 #i‚de‡
__USE_KERNEL_IPV6_DEFS


99 
	mIPPROTO_HOPOPTS
 = 0,

100 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

101 
	mIPPROTO_ROUTING
 = 43,

102 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

103 
	mIPPROTO_FRAGMENT
 = 44,

104 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

105 
	mIPPROTO_ICMPV6
 = 58,

106 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

107 
	mIPPROTO_NONE
 = 59,

108 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

109 
	mIPPROTO_DSTOPTS
 = 60,

110 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

111 
	mIPPROTO_MH
 = 135

112 
	#IPPROTO_MH
 
IPPROTO_MH


	)

117 
uöt16_t
 
	tö_p‹t_t
;

122 
	mIPPORT_ECHO
 = 7,

123 
	mIPPORT_DISCARD
 = 9,

124 
	mIPPORT_SYSTAT
 = 11,

125 
	mIPPORT_DAYTIME
 = 13,

126 
	mIPPORT_NETSTAT
 = 15,

127 
	mIPPORT_FTP
 = 21,

128 
	mIPPORT_TELNET
 = 23,

129 
	mIPPORT_SMTP
 = 25,

130 
	mIPPORT_TIMESERVER
 = 37,

131 
	mIPPORT_NAMESERVER
 = 42,

132 
	mIPPORT_WHOIS
 = 43,

133 
	mIPPORT_MTP
 = 57,

135 
	mIPPORT_TFTP
 = 69,

136 
	mIPPORT_RJE
 = 77,

137 
	mIPPORT_FINGER
 = 79,

138 
	mIPPORT_TTYLINK
 = 87,

139 
	mIPPORT_SUPDUP
 = 95,

142 
	mIPPORT_EXECSERVER
 = 512,

143 
	mIPPORT_LOGINSERVER
 = 513,

144 
	mIPPORT_CMDSERVER
 = 514,

145 
	mIPPORT_EFSSERVER
 = 520,

148 
	mIPPORT_BIFFUDP
 = 512,

149 
	mIPPORT_WHOSERVER
 = 513,

150 
	mIPPORT_ROUTESERVER
 = 520,

153 
	mIPPORT_RESERVED
 = 1024,

156 
	mIPPORT_USERRESERVED
 = 5000

164 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

165 
	#IN_CLASSA_NET
 0xff000000

	)

166 
	#IN_CLASSA_NSHIFT
 24

	)

167 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

168 
	#IN_CLASSA_MAX
 128

	)

170 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

171 
	#IN_CLASSB_NET
 0xffff0000

	)

172 
	#IN_CLASSB_NSHIFT
 16

	)

173 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

174 
	#IN_CLASSB_MAX
 65536

	)

176 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

177 
	#IN_CLASSC_NET
 0xffffff00

	)

178 
	#IN_CLASSC_NSHIFT
 8

	)

179 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

181 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

182 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

184 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

185 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

188 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

190 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

192 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

195 
	#IN_LOOPBACKNET
 127

	)

197 #i‚de‡
INADDR_LOOPBACK


198 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

202 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

203 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

204 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

205 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

207 #i‚de‡
__USE_KERNEL_IPV6_DEFS


209 
	sö6_addr


213 
uöt8_t
 
	m__u6_addr8
[16];

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


215 
uöt16_t
 
	m__u6_addr16
[8];

216 
uöt32_t
 
	m__u6_addr32
[4];

218 } 
	m__ö6_u
;

219 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

220 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


221 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

222 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

227 c⁄° 
ö6_addr
 
ö6addr_™y
;

228 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

229 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

230 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

232 
	#INET_ADDRSTRLEN
 16

	)

233 
	#INET6_ADDRSTRLEN
 46

	)

237 
	ssockaddr_ö


239 
__SOCKADDR_COMMON
 (
sö_
);

240 
ö_p‹t_t
 
	msö_p‹t
;

241 
ö_addr
 
	msö_addr
;

244 
	msö_zîo
[ (
sockaddr
) -

245 
__SOCKADDR_COMMON_SIZE
 -

246  (
ö_p‹t_t
) -

247  (
ö_addr
)];

250 #i‚de‡
__USE_KERNEL_IPV6_DEFS


252 
	ssockaddr_ö6


254 
__SOCKADDR_COMMON
 (
sö6_
);

255 
ö_p‹t_t
 
	msö6_p‹t
;

256 
uöt32_t
 
	msö6_Êowöfo
;

257 
ö6_addr
 
	msö6_addr
;

258 
uöt32_t
 
	msö6_sc›e_id
;

262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


264 
	sù_mªq


267 
ö_addr
 
	mimr_mu…üddr
;

270 
ö_addr
 
	mimr_öãrÁ˚
;

273 
	sù_mªq_sour˚


276 
ö_addr
 
	mimr_mu…üddr
;

279 
ö_addr
 
	mimr_öãrÁ˚
;

282 
ö_addr
 
	mimr_sour˚addr
;

286 #i‚de‡
__USE_KERNEL_IPV6_DEFS


288 
	sùv6_mªq


291 
ö6_addr
 
	mùv6mr_mu…üddr
;

294 
	mùv6mr_öãrÁ˚
;

298 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


300 
	sgroup_ªq


303 
uöt32_t
 
	mgr_öãrÁ˚
;

306 
sockaddr_°‹age
 
	mgr_group
;

309 
	sgroup_sour˚_ªq


312 
uöt32_t
 
	mg§_öãrÁ˚
;

315 
sockaddr_°‹age
 
	mg§_group
;

318 
sockaddr_°‹age
 
	mg§_sour˚
;

323 
	sù_msfûãr


326 
ö_addr
 
	mimsf_mu…üddr
;

329 
ö_addr
 
	mimsf_öãrÁ˚
;

332 
uöt32_t
 
	mimsf_fmode
;

335 
uöt32_t
 
	mimsf_num§c
;

337 
ö_addr
 
	mimsf_¶i°
[1];

340 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

341 -  (
ö_addr
) \

342 + (
num§c
Ë*  (
ö_addr
))

	)

344 
	sgroup_fûãr


347 
uöt32_t
 
	mgf_öãrÁ˚
;

350 
sockaddr_°‹age
 
	mgf_group
;

353 
uöt32_t
 
	mgf_fmode
;

356 
uöt32_t
 
	mgf_num§c
;

358 
sockaddr_°‹age
 
	mgf_¶i°
[1];

361 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

362 -  (
sockaddr_°‹age
) \

363 + ((
num§c
) \

364 *  (
sockaddr_°‹age
)))

	)

374 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

375 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

376 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

382 
	~<ídün.h
>

385 
	~<bôs/byãsw≠.h
>

387 #ifde‡
__OPTIMIZE__


391 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


394 
	#¡ohl
(
x
Ë(x)

	)

395 
	#¡ohs
(
x
Ë(x)

	)

396 
	#ht⁄l
(
x
Ë(x)

	)

397 
	#ht⁄s
(
x
Ë(x)

	)

399 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


400 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

401 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

402 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

408 #ifde‡
__GNUC__


409 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

410 (
__exãnsi⁄__
 \

411 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

412 
__a
->
s6_addr32
[0] == 0 \

413 && 
__a
->
s6_addr32
[1] == 0 \

414 && 
__a
->
s6_addr32
[2] == 0 \

415 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

417 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

418 (
__exãnsi⁄__
 \

419 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

420 
__a
->
s6_addr32
[0] == 0 \

421 && 
__a
->
s6_addr32
[1] == 0 \

422 && 
__a
->
s6_addr32
[2] == 0 \

423 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

425 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

426 (
__exãnsi⁄__
 \

427 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

428 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

430 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

431 (
__exãnsi⁄__
 \

432 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

433 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

435 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

436 (
__exãnsi⁄__
 \

437 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

438 
__a
->
s6_addr32
[0] == 0 \

439 && 
__a
->
s6_addr32
[1] == 0 \

440 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

442 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

443 (
__exãnsi⁄__
 \

444 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

445 
__a
->
s6_addr32
[0] == 0 \

446 && 
__a
->
s6_addr32
[1] == 0 \

447 && 
__a
->
s6_addr32
[2] == 0 \

448 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

450 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

451 (
__exãnsi⁄__
 \

452 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

453 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

454 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

455 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

456 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

457 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

459 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

460 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

461 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

462 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

465 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

466 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

467 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

468 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

471 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

472 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

473 =
	`ht⁄l
 (0x„800000))

	)

475 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

476 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

477 =
	`ht⁄l
 (0x„c00000))

	)

479 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

480 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

481 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

484 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

485 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

486 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

487 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

488 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

490 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

491 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

492 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

493 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

497 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

499 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


501 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

504 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

505 
__THROW
;

509 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

510 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

511 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

513 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

514 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

515 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

517 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

518 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

519 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

521 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

522 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

523 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

525 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

526 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

527 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

530 #ifde‡
__USE_GNU


531 
cmsghdr
;

534 
	sö6_pktöfo


536 
ö6_addr
 
ùi6_addr
;

537 
ùi6_ifödex
;

541 
	sù6_mtuöfo


543 
sockaddr_ö6
 
ù6m_addr
;

544 
uöt32_t
 
ù6m_mtu
;

549 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

552 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

553 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

554 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

555 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

557 
__mu…x
, 
__∂usy
)

558 
__THROW
 
__©åibuã_dïªˇãd__
;

559 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

560 
uöt8_t
 **
__çåp
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
, 
__ty≥
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

568 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

569 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

570 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

571 **
__d©abuÂ
Ë
__THROW
;

572 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

573 
__THROW
;

574 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

575 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

577 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

578 **
__d©abuÂ
Ë
__THROW
;

579 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

583 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

587 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

588 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

589 
__£gmíts
Ë
__THROW
;

590 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

591 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

592 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

593 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

594 
__THROW
;

600 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

601 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

602 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

603 
__THROW
;

606 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

607 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

608 
uöt32_t
 
__num§c
,

609 c⁄° 
ö_addr
 *
__¶i°
)

610 
__THROW
;

614 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

615 c⁄° 
sockaddr
 *
__group
,

616 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

617 
uöt32_t
 *
__num§c
,

618 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

621 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

622 c⁄° 
sockaddr
 *
__group
,

623 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

624 
uöt32_t
 
__num§c
,

625 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

628 
__END_DECLS


	@/usr/include/netinet/ip.h

18 #i‚de‡
__NETINET_IP_H


19 
	#__NETINET_IP_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<√töë/ö.h
>

26 
__BEGIN_DECLS


28 
	stime°amp


30 
u_öt8_t
 
	mÀn
;

31 
u_öt8_t
 
	m±r
;

32 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


33 
	mÊags
:4;

34 
	movîÊow
:4;

35 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


36 
	movîÊow
:4;

37 
	mÊags
:4;

41 
u_öt32_t
 
	md©a
[9];

44 
	sùhdr


46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	mihl
:4;

48 
	mvîsi⁄
:4;

49 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


50 
	mvîsi⁄
:4;

51 
	mihl
:4;

55 
u_öt8_t
 
	mtos
;

56 
u_öt16_t
 
	mtŸ_Àn
;

57 
u_öt16_t
 
	mid
;

58 
u_öt16_t
 
	m‰ag_off
;

59 
u_öt8_t
 
	mâl
;

60 
u_öt8_t
 
	m¥Ÿocﬁ
;

61 
u_öt16_t
 
	mcheck
;

62 
u_öt32_t
 
	mßddr
;

63 
u_öt32_t
 
	mdaddr
;

67 #ifde‡
__USE_BSD


107 
	sù


109 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


110 
	mù_hl
:4;

111 
	mù_v
:4;

113 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


114 
	mù_v
:4;

115 
	mù_hl
:4;

117 
u_öt8_t
 
	mù_tos
;

118 
u_sh‹t
 
	mù_Àn
;

119 
u_sh‹t
 
	mù_id
;

120 
u_sh‹t
 
	mù_off
;

121 
	#IP_RF
 0x8000

	)

122 
	#IP_DF
 0x4000

	)

123 
	#IP_MF
 0x2000

	)

124 
	#IP_OFFMASK
 0x1ff‡

	)

125 
u_öt8_t
 
	mù_âl
;

126 
u_öt8_t
 
	mù_p
;

127 
u_sh‹t
 
	mù_sum
;

128 
ö_addr
 
	mù_§c
, 
	mù_d°
;

134 
	sù_time°amp


136 
u_öt8_t
 
	mùt_code
;

137 
u_öt8_t
 
	mùt_Àn
;

138 
u_öt8_t
 
	mùt_±r
;

139 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


140 
	mùt_Êg
:4;

141 
	mùt_oÊw
:4;

143 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


144 
	mùt_oÊw
:4;

145 
	mùt_Êg
:4;

147 
u_öt32_t
 
	md©a
[9];

151 
	#IPVERSION
 4

	)

152 
	#IP_MAXPACKET
 65535

	)

160 
	#IPTOS_ECN_MASK
 0x03

	)

161 
	#IPTOS_ECN
(
x
Ë((xË& 
IPTOS_ECN_MASK
)

	)

162 
	#IPTOS_ECN_NOT_ECT
 0x00

	)

163 
	#IPTOS_ECN_ECT1
 0x01

	)

164 
	#IPTOS_ECN_ECT0
 0x02

	)

165 
	#IPTOS_ECN_CE
 0x03

	)

173 
	#IPTOS_DSCP_MASK
 0xfc

	)

174 
	#IPTOS_DSCP
(
x
Ë((xË& 
IPTOS_DSCP_MASK
)

	)

175 
	#IPTOS_DSCP_AF11
 0x28

	)

176 
	#IPTOS_DSCP_AF12
 0x30

	)

177 
	#IPTOS_DSCP_AF13
 0x38

	)

178 
	#IPTOS_DSCP_AF21
 0x48

	)

179 
	#IPTOS_DSCP_AF22
 0x50

	)

180 
	#IPTOS_DSCP_AF23
 0x58

	)

181 
	#IPTOS_DSCP_AF31
 0x68

	)

182 
	#IPTOS_DSCP_AF32
 0x70

	)

183 
	#IPTOS_DSCP_AF33
 0x78

	)

184 
	#IPTOS_DSCP_AF41
 0x88

	)

185 
	#IPTOS_DSCP_AF42
 0x90

	)

186 
	#IPTOS_DSCP_AF43
 0x98

	)

187 
	#IPTOS_DSCP_EF
 0xb8

	)

194 
	#IPTOS_CLASS_MASK
 0xe0

	)

195 
	#IPTOS_CLASS
(
˛ass
Ë((˛assË& 
IPTOS_CLASS_MASK
)

	)

196 
	#IPTOS_CLASS_CS0
 0x00

	)

197 
	#IPTOS_CLASS_CS1
 0x20

	)

198 
	#IPTOS_CLASS_CS2
 0x40

	)

199 
	#IPTOS_CLASS_CS3
 0x60

	)

200 
	#IPTOS_CLASS_CS4
 0x80

	)

201 
	#IPTOS_CLASS_CS5
 0xa0

	)

202 
	#IPTOS_CLASS_CS6
 0xc0

	)

203 
	#IPTOS_CLASS_CS7
 0xe0

	)

205 
	#IPTOS_CLASS_DEFAULT
 
IPTOS_CLASS_CS0


	)

211 
	#IPTOS_TOS_MASK
 0x1E

	)

212 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

213 
	#IPTOS_LOWDELAY
 0x10

	)

214 
	#IPTOS_THROUGHPUT
 0x08

	)

215 
	#IPTOS_RELIABILITY
 0x04

	)

216 
	#IPTOS_LOWCOST
 0x02

	)

217 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

222 
	#IPTOS_PREC_MASK
 
IPTOS_CLASS_MASK


	)

223 
	#IPTOS_PREC
(
tos
Ë
	`IPTOS_CLASS
—os)

	)

224 
	#IPTOS_PREC_NETCONTROL
 
IPTOS_CLASS_CS7


	)

225 
	#IPTOS_PREC_INTERNETCONTROL
 
IPTOS_CLASS_CS6


	)

226 
	#IPTOS_PREC_CRITIC_ECP
 
IPTOS_CLASS_CS5


	)

227 
	#IPTOS_PREC_FLASHOVERRIDE
 
IPTOS_CLASS_CS4


	)

228 
	#IPTOS_PREC_FLASH
 
IPTOS_CLASS_CS3


	)

229 
	#IPTOS_PREC_IMMEDIATE
 
IPTOS_CLASS_CS2


	)

230 
	#IPTOS_PREC_PRIORITY
 
IPTOS_CLASS_CS1


	)

231 
	#IPTOS_PREC_ROUTINE
 
IPTOS_CLASS_CS0


	)

236 
	#IPOPT_COPY
 0x80

	)

237 
	#IPOPT_CLASS_MASK
 0x60

	)

238 
	#IPOPT_NUMBER_MASK
 0x1f

	)

240 
	#IPOPT_COPIED
(
o
Ë((oË& 
IPOPT_COPY
)

	)

241 
	#IPOPT_CLASS
(
o
Ë((oË& 
IPOPT_CLASS_MASK
)

	)

242 
	#IPOPT_NUMBER
(
o
Ë((oË& 
IPOPT_NUMBER_MASK
)

	)

244 
	#IPOPT_CONTROL
 0x00

	)

245 
	#IPOPT_RESERVED1
 0x20

	)

246 
	#IPOPT_DEBMEAS
 0x40

	)

247 
	#IPOPT_MEASUREMENT
 
IPOPT_DEBMEAS


	)

248 
	#IPOPT_RESERVED2
 0x60

	)

250 
	#IPOPT_EOL
 0

	)

251 
	#IPOPT_END
 
IPOPT_EOL


	)

252 
	#IPOPT_NOP
 1

	)

253 
	#IPOPT_NOOP
 
IPOPT_NOP


	)

255 
	#IPOPT_RR
 7

	)

256 
	#IPOPT_TS
 68

	)

257 
	#IPOPT_TIMESTAMP
 
IPOPT_TS


	)

258 
	#IPOPT_SECURITY
 130

	)

259 
	#IPOPT_SEC
 
IPOPT_SECURITY


	)

260 
	#IPOPT_LSRR
 131

	)

261 
	#IPOPT_SATID
 136

	)

262 
	#IPOPT_SID
 
IPOPT_SATID


	)

263 
	#IPOPT_SSRR
 137

	)

264 
	#IPOPT_RA
 148

	)

269 
	#IPOPT_OPTVAL
 0

	)

270 
	#IPOPT_OLEN
 1

	)

271 
	#IPOPT_OFFSET
 2

	)

272 
	#IPOPT_MINOFF
 4

	)

274 
	#MAX_IPOPTLEN
 40

	)

277 
	#IPOPT_TS_TSONLY
 0

	)

278 
	#IPOPT_TS_TSANDADDR
 1

	)

279 
	#IPOPT_TS_PRESPEC
 3

	)

282 
	#IPOPT_SECUR_UNCLASS
 0x0000

	)

283 
	#IPOPT_SECUR_CONFID
 0xf135

	)

284 
	#IPOPT_SECUR_EFTO
 0x789a

	)

285 
	#IPOPT_SECUR_MMMM
 0xbc4d

	)

286 
	#IPOPT_SECUR_RESTR
 0xaf13

	)

287 
	#IPOPT_SECUR_SECRET
 0xd788

	)

288 
	#IPOPT_SECUR_TOPSECRET
 0x6bc5

	)

293 
	#MAXTTL
 255

	)

294 
	#IPDEFTTL
 64

	)

295 
	#IPFRAGTTL
 60

	)

296 
	#IPTTLDEC
 1

	)

298 
	#IP_MSS
 576

	)

300 
	g__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

65 #ifde‡
__USE_MISC


66 
	~<sys/ty≥s.h
>

67 
	~<sys/sockë.h
>

69 
u_öt32_t
 
	tt˝_£q
;

74 
	st˝hdr


76 
__exãnsi⁄__
 union

80 
u_öt16_t
 
	mth_•‹t
;

81 
u_öt16_t
 
	mth_dp‹t
;

82 
t˝_£q
 
	mth_£q
;

83 
t˝_£q
 
	mth_ack
;

84 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


85 
u_öt8_t
 
	mth_x2
:4;

86 
u_öt8_t
 
	mth_off
:4;

88 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


89 
u_öt8_t
 
	mth_off
:4;

90 
u_öt8_t
 
	mth_x2
:4;

92 
u_öt8_t
 
	mth_Êags
;

93 
	#TH_FIN
 0x01

	)

94 
	#TH_SYN
 0x02

	)

95 
	#TH_RST
 0x04

	)

96 
	#TH_PUSH
 0x08

	)

97 
	#TH_ACK
 0x10

	)

98 
	#TH_URG
 0x20

	)

99 
u_öt16_t
 
	mth_wö
;

100 
u_öt16_t
 
	mth_sum
;

101 
u_öt16_t
 
	mth_uΩ
;

105 
u_öt16_t
 
	msour˚
;

106 
u_öt16_t
 
	mde°
;

107 
u_öt32_t
 
	m£q
;

108 
u_öt32_t
 
	mack_£q
;

109 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


110 
u_öt16_t
 
	mªs1
:4;

111 
u_öt16_t
 
	mdoff
:4;

112 
u_öt16_t
 
	mfö
:1;

113 
u_öt16_t
 
	msyn
:1;

114 
u_öt16_t
 
	mr°
:1;

115 
u_öt16_t
 
	mpsh
:1;

116 
u_öt16_t
 
	mack
:1;

117 
u_öt16_t
 
	murg
:1;

118 
u_öt16_t
 
	mªs2
:2;

119 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


120 
u_öt16_t
 
	mdoff
:4;

121 
u_öt16_t
 
	mªs1
:4;

122 
u_öt16_t
 
	mªs2
:2;

123 
u_öt16_t
 
	murg
:1;

124 
u_öt16_t
 
	mack
:1;

125 
u_öt16_t
 
	mpsh
:1;

126 
u_öt16_t
 
	mr°
:1;

127 
u_öt16_t
 
	msyn
:1;

128 
u_öt16_t
 
	mfö
:1;

132 
u_öt16_t
 
	mwödow
;

133 
u_öt16_t
 
	mcheck
;

134 
u_öt16_t
 
	murg_±r
;

141 
	mTCP_ESTABLISHED
 = 1,

142 
	mTCP_SYN_SENT
,

143 
	mTCP_SYN_RECV
,

144 
	mTCP_FIN_WAIT1
,

145 
	mTCP_FIN_WAIT2
,

146 
	mTCP_TIME_WAIT
,

147 
	mTCP_CLOSE
,

148 
	mTCP_CLOSE_WAIT
,

149 
	mTCP_LAST_ACK
,

150 
	mTCP_LISTEN
,

151 
	mTCP_CLOSING


154 
	#TCPOPT_EOL
 0

	)

155 
	#TCPOPT_NOP
 1

	)

156 
	#TCPOPT_MAXSEG
 2

	)

157 
	#TCPOLEN_MAXSEG
 4

	)

158 
	#TCPOPT_WINDOW
 3

	)

159 
	#TCPOLEN_WINDOW
 3

	)

160 
	#TCPOPT_SACK_PERMITTED
 4

	)

161 
	#TCPOLEN_SACK_PERMITTED
 2

	)

162 
	#TCPOPT_SACK
 5

	)

163 
	#TCPOPT_TIMESTAMP
 8

	)

164 
	#TCPOLEN_TIMESTAMP
 10

	)

165 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

167 
	#TCPOPT_TSTAMP_HDR
 \

168 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

176 
	#TCP_MSS
 512

	)

178 
	#TCP_MAXWIN
 65535

	)

180 
	#TCP_MAX_WINSHIFT
 14

	)

182 
	#SOL_TCP
 6

	)

185 
	#TCPI_OPT_TIMESTAMPS
 1

	)

186 
	#TCPI_OPT_SACK
 2

	)

187 
	#TCPI_OPT_WSCALE
 4

	)

188 
	#TCPI_OPT_ECN
 8

	)

189 
	#TCPI_OPT_ECN_SEEN
 16

	)

190 
	#TCPI_OPT_SYN_DATA
 32

	)

193 
	et˝_ˇ_°©e


195 
	mTCP_CA_O≥n
 = 0,

196 
	mTCP_CA_Dis‹dî
 = 1,

197 
	mTCP_CA_CWR
 = 2,

198 
	mTCP_CA_Recovîy
 = 3,

199 
	mTCP_CA_Loss
 = 4

202 
	st˝_öfo


204 
u_öt8_t
 
	mt˝i_°©e
;

205 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

206 
u_öt8_t
 
	mt˝i_ªå™smôs
;

207 
u_öt8_t
 
	mt˝i_¥obes
;

208 
u_öt8_t
 
	mt˝i_backoff
;

209 
u_öt8_t
 
	mt˝i_›ti⁄s
;

210 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

212 
u_öt32_t
 
	mt˝i_πo
;

213 
u_öt32_t
 
	mt˝i_©o
;

214 
u_öt32_t
 
	mt˝i_¢d_mss
;

215 
u_öt32_t
 
	mt˝i_rcv_mss
;

217 
u_öt32_t
 
	mt˝i_u«cked
;

218 
u_öt32_t
 
	mt˝i_ßcked
;

219 
u_öt32_t
 
	mt˝i_lo°
;

220 
u_öt32_t
 
	mt˝i_ªå™s
;

221 
u_öt32_t
 
	mt˝i_Áckës
;

224 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

225 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

226 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

227 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

230 
u_öt32_t
 
	mt˝i_pmtu
;

231 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

232 
u_öt32_t
 
	mt˝i_πt
;

233 
u_öt32_t
 
	mt˝i_πtv¨
;

234 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

235 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

236 
u_öt32_t
 
	mt˝i_advmss
;

237 
u_öt32_t
 
	mt˝i_ª‹dîög
;

239 
u_öt32_t
 
	mt˝i_rcv_πt
;

240 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

242 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

247 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

249 
	st˝_md5sig


251 
sockaddr_°‹age
 
	mt˝m_addr
;

252 
u_öt16_t
 
	m__t˝m_∑d1
;

253 
u_öt16_t
 
	mt˝m_keyÀn
;

254 
u_öt32_t
 
	m__t˝m_∑d2
;

255 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

259 
	st˝_ª∑ú_›t


261 
u_öt32_t
 
	m›t_code
;

262 
u_öt32_t
 
	m›t_vÆ
;

268 
	mTCP_NO_QUEUE
,

269 
	mTCP_RECV_QUEUE
,

270 
	mTCP_SEND_QUEUE
,

271 
	mTCP_QUEUES_NR
,

275 
	#TCP_COOKIE_MIN
 8

	)

276 
	#TCP_COOKIE_MAX
 16

	)

277 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

280 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

281 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

285 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

286 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

288 
	#TCP_MSS_DEFAULT
 536U

	)

289 
	#TCP_MSS_DESIRED
 1220U

	)

291 
	st˝_cookõ_å™ß˘i⁄s


293 
u_öt16_t
 
	mt˝˘_Êags
;

294 
u_öt8_t
 
	m__t˝˘_∑d1
;

295 
u_öt8_t
 
	mt˝˘_cookõ_desúed
;

296 
u_öt16_t
 
	mt˝˘_s_d©a_desúed
;

297 
u_öt16_t
 
	mt˝˘_u£d
;

298 
u_öt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

	@/usr/include/netipx/ipx.h

18 #i‚de‡
__NETIPX_IPX_H


19 
	#__NETIPX_IPX_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<bôs/sockaddr.h
>

26 
	g__BEGIN_DECLS


28 
	#SOL_IPX
 256

	)

30 
	#IPX_TYPE
 1

	)

31 
	#IPX_NODE_LEN
 6

	)

32 
	#IPX_MTU
 576

	)

34 
	ssockaddr_ùx


36 
ß_Ámûy_t
 
	msùx_Ámûy
;

37 
u_öt16_t
 
	msùx_p‹t
;

38 
u_öt32_t
 
	msùx_√tw‹k
;

39 
	msùx_node
[
IPX_NODE_LEN
];

40 
u_öt8_t
 
	msùx_ty≥
;

41 
	msùx_zîo
;

48 
	#sùx_•ecül
 
sùx_p‹t


	)

49 
	#sùx_a˘i⁄
 
sùx_zîo


	)

50 
	#IPX_DLTITF
 0

	)

51 
	#IPX_CRTITF
 1

	)

53 
	sùx_rouã_deföôi⁄


55 
	mùx_√tw‹k
;

56 
	mùx_rouãr_√tw‹k
;

57 
	mùx_rouãr_node
[
IPX_NODE_LEN
];

59 
	tùx_rouã_deföôi⁄
;

61 
	sùx_öãrÁ˚_deföôi⁄


63 
	mùx_√tw‹k
;

64 
	mùx_devi˚
[16];

65 
	mùx_dlök_ty≥
;

66 
	#IPX_FRAME_NONE
 0

	)

67 
	#IPX_FRAME_SNAP
 1

	)

68 
	#IPX_FRAME_8022
 2

	)

69 
	#IPX_FRAME_ETHERII
 3

	)

70 
	#IPX_FRAME_8023
 4

	)

71 
	#IPX_FRAME_TR_8022
 5

	)

72 
	mùx_•ecül
;

73 
	#IPX_SPECIAL_NONE
 0

	)

74 
	#IPX_PRIMARY
 1

	)

75 
	#IPX_INTERNAL
 2

	)

76 
	mùx_node
[
IPX_NODE_LEN
];

78 
	tùx_öãrÁ˚_deföôi⁄
;

80 
	sùx_c⁄fig_d©a


82 
	mùxcfg_auto_£À˘_¥im¨y
;

83 
	mùxcfg_auto_¸óã_öãrÁ˚s
;

85 
	tùx_c⁄fig_d©a
;

91 
	sùx_rouã_def


93 
	mùx_√tw‹k
;

94 
	mùx_rouãr_√tw‹k
;

95 
	#IPX_ROUTE_NO_ROUTER
 0

	)

96 
	mùx_rouãr_node
[
IPX_NODE_LEN
];

97 
	mùx_devi˚
[16];

98 
	mùx_Êags
;

99 
	#IPX_RT_SNAP
 8

	)

100 
	#IPX_RT_8022
 4

	)

101 
	#IPX_RT_BLUEBOOK
 2

	)

102 
	#IPX_RT_ROUTED
 1

	)

105 
	#SIOCAIPXITFCRT
 (
SIOCPROTOPRIVATE
)

	)

106 
	#SIOCAIPXPRISLT
 (
SIOCPROTOPRIVATE
 + 1)

	)

107 
	#SIOCIPXCFGDATA
 (
SIOCPROTOPRIVATE
 + 2)

	)

108 
	#SIOCIPXNCPCONN
 (
SIOCPROTOPRIVATE
 + 3)

	)

110 
	g__END_DECLS


	@/usr/include/paths.h

32 #i‚de‡
_PATHS_H_


33 
	#_PATHS_H_


	)

36 
	#_PATH_DEFPATH
 "/u§/bö:/bö"

	)

38 
	#_PATH_STDPATH
 \

39 "/u§/bö:/bö:/u§/sbö:/sbö"

	)

41 
	#_PATH_BSHELL
 "/bö/sh"

	)

42 
	#_PATH_CONSOLE
 "/dev/c⁄sﬁe"

	)

43 
	#_PATH_CSHELL
 "/bö/csh"

	)

44 
	#_PATH_DEVDB
 "/v¨/run/dev.db"

	)

45 
	#_PATH_DEVNULL
 "/dev/nuŒ"

	)

46 
	#_PATH_DRUM
 "/dev/drum"

	)

47 
	#_PATH_GSHADOW
 "/ëc/gshadow"

	)

48 
	#_PATH_KLOG
 "/¥oc/kmsg"

	)

49 
	#_PATH_KMEM
 "/dev/kmem"

	)

50 
	#_PATH_LASTLOG
 "/v¨/log/œ°log"

	)

51 
	#_PATH_MAILDIR
 "/v¨/maû"

	)

52 
	#_PATH_MAN
 "/u§/sh¨e/m™"

	)

53 
	#_PATH_MEM
 "/dev/mem"

	)

54 
	#_PATH_MNTTAB
 "/ëc/f°ab"

	)

55 
	#_PATH_MOUNTED
 "/ëc/mèb"

	)

56 
	#_PATH_NOLOGIN
 "/ëc/nﬁogö"

	)

57 
	#_PATH_PRESERVE
 "/v¨/lib"

	)

58 
	#_PATH_RWHODIR
 "/v¨/•oﬁ/rwho"

	)

59 
	#_PATH_SENDMAIL
 "/u§/sbö/£ndmaû"

	)

60 
	#_PATH_SHADOW
 "/ëc/shadow"

	)

61 
	#_PATH_SHELLS
 "/ëc/shñls"

	)

62 
	#_PATH_TTY
 "/dev/ây"

	)

63 
	#_PATH_UNIX
 "/boŸ/vmlöux"

	)

64 
	#_PATH_UTMP
 "/v¨/run/utmp"

	)

65 
	#_PATH_VI
 "/u§/bö/vi"

	)

66 
	#_PATH_WTMP
 "/v¨/log/wtmp"

	)

69 
	#_PATH_DEV
 "/dev/"

	)

70 
	#_PATH_TMP
 "/tmp/"

	)

71 
	#_PATH_VARDB
 "/v¨/lib/misc/"

	)

72 
	#_PATH_VARRUN
 "/v¨/run/"

	)

73 
	#_PATH_VARTMP
 "/v¨/tmp/"

	)

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 1

87 
	#__PTHREAD_SPINS
 0, 0

	)

88 #ñi‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 2

89 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

91 
	#__PTHREAD_SPINS
 0

	)

94 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


95 
	#PTHREAD_MUTEX_INITIALIZER
 \

96 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

97 #ifde‡
__USE_GNU


98 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

101 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

102 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

104 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

109 
	#PTHREAD_MUTEX_INITIALIZER
 \

110 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

111 #ifde‡
__USE_GNU


112 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

113 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

115 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

116 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

117 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

124 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


127 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

128 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

129 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

130 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


136 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 #i‡
__WORDSIZE
 == 64

138 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

143 
	#PTHREAD_RWLOCK_INITIALIZER
 \

144 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

145 #ifde‡
__USE_GNU


146 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

149 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

151 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


152 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

153 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

154 0, 0, 0, 0 } }

	)

156 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

157 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

158 0 } }

	)

168 
	mPTHREAD_INHERIT_SCHED
,

169 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

170 
	mPTHREAD_EXPLICIT_SCHED


171 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

178 
	mPTHREAD_SCOPE_SYSTEM
,

179 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

180 
	mPTHREAD_SCOPE_PROCESS


181 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

188 
	mPTHREAD_PROCESS_PRIVATE
,

189 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

190 
	mPTHREAD_PROCESS_SHARED


191 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

197 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

201 
	s_±hªad_˛ónup_buf„r


203 (*
	m__routöe
) (*);

204 *
	m__¨g
;

205 
	m__ˇn˚…y≥
;

206 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

212 
	mPTHREAD_CANCEL_ENABLE
,

213 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

214 
	mPTHREAD_CANCEL_DISABLE


215 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

219 
	mPTHREAD_CANCEL_DEFERRED
,

220 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

221 
	mPTHREAD_CANCEL_ASYNCHRONOUS


222 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

224 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

228 
	#PTHREAD_ONCE_INIT
 0

	)

231 #ifde‡
__USE_XOPEN2K


235 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

239 
__BEGIN_DECLS


244 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

245 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

246 *(*
__°¨t_routöe
) (*),

247 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

253 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

261 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

263 #ifde‡
__USE_GNU


266 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

274 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

275 c⁄° 
time•ec
 *
__ab°ime
);

282 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

286 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

290 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

298 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

301 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 *
__dëach°©e
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

311 
__dëach°©e
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

317 
size_t
 *
__gu¨dsize
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

322 
size_t
 
__gu¨dsize
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

328 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

333 c⁄° 
sched_∑øm
 *
__ª°ri˘


334 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

337 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


347 
__©å
, *
__ª°ri˘
 
__öhîô
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

352 
__öhîô
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 *
__ª°ri˘
 
__sc›e
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1));

366 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

374 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

375 *
__°ackaddr
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

379 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


380 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

387 
size_t
 
__°acksize
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 #ifde‡
__USE_XOPEN2K


392 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

393 **
__ª°ri˘
 
__°ackaddr
,

394 
size_t
 *
__ª°ri˘
 
__°acksize
)

395 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

400 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

401 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

404 #ifde‡
__USE_GNU


407 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

408 
size_t
 
__˝u£tsize
,

409 c⁄° 
˝u_£t_t
 *
__˝u£t
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

415 
size_t
 
__˝u£tsize
,

416 
˝u_£t_t
 *
__˝u£t
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

420 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((1));

425 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

426 
__THROW
 
	`__n⁄nuŒ
 ((1));

431 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

441 c⁄° 
sched_∑øm
 *
__∑øm
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3));

445 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

446 *
__ª°ri˘
 
__pﬁicy
,

447 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

451 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

452 
__THROW
;

455 #ifde‡
__USE_GNU


457 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

458 
size_t
 
__buÊí
)

459 
__THROW
 
	`__n⁄nuŒ
 ((2));

462 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

463 
__THROW
 
	`__n⁄nuŒ
 ((2));

467 #ifde‡
__USE_UNIX98


469 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

472 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

475 #ifde‡
__USE_GNU


480 
	$±hªad_yõld
 (Ë
__THROW
;

485 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

486 c⁄° 
˝u_£t_t
 *
__˝u£t
)

487 
__THROW
 
	`__n⁄nuŒ
 ((3));

490 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

491 
˝u_£t_t
 *
__˝u£t
)

492 
__THROW
 
	`__n⁄nuŒ
 ((3));

505 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

506 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

517 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

521 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

524 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

529 
	`±hªad_ã°ˇn˚l
 ();

538 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

539 
__mask_was_ßved
;

540 } 
__ˇn˚l_jmp_buf
[1];

541 *
__∑d
[4];

542 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

545 #i‚de‡
__˛ónup_f˘_©åibuã


546 
	#__˛ónup_f˘_©åibuã


	)

551 
	s__±hªad_˛ónup_‰ame


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

559 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


560 #ifde‡
__˝lu•lus


562 ˛as†
	c__±hªad_˛ónup_˛ass


564 (*
__ˇn˚l_routöe
) (*);

565 *
__ˇn˚l_¨g
;

566 
__do_ô
;

567 
__ˇn˚l_ty≥
;

569 
public
:

570 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

571 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

572 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

573 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

574 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

575 &
__ˇn˚l_ty≥
); 
	}
}

576 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

586 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

588 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

592 
	#±hªad_˛ónup_p›
(
execuã
) \

593 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

594 } 0)

	)

596 #ifde‡
__USE_GNU


600 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

602 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

603 
__˛‰ame
.
	`__de„r
 ()

	)

608 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

609 
__˛‰ame
.
	`__ª°‹e
 (); \

610 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

611 } 0)

	)

618 
__exã∫_ölöe
 

619 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

621 i‡(
__‰ame
->
__do_ô
)

622 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

623 
	}
}

632 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

634 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

635 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

636 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

637 .
__do_ô
 = 1 };

	)

641 
	#±hªad_˛ónup_p›
(
execuã
) \

642 
__˛‰ame
.
__do_ô
 = (
execuã
); \

643 } 0)

	)

645 #ifde‡
__USE_GNU


649 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

651 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

652 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

653 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

654 .
__do_ô
 = 1 }; \

655 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

656 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

661 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

662 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

663 
__˛‰ame
.
__do_ô
 = (
execuã
); \

664 } 0)

	)

675 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

696 
	#±hªad_˛ónup_p›
(
execuã
) \

699 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

700 i‡(
execuã
) \

701 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

702 } 0)

	)

703 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

704 
__˛ónup_f˘_©åibuã
;

706 #ifde‡
__USE_GNU


710 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

712 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

713 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

714 *
__ˇn˚l_¨g
 = (
¨g
); \

715 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

716 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

717 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

719 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

720 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

724 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

725 dÿ{

	)

726 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

727 
__˛ónup_f˘_©åibuã
;

732 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

735 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

736 i‡(
execuã
) \

737 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

738 
	}
} 0)

	)

739 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

740 
__˛ónup_f˘_©åibuã
;

744 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

745 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

746 #i‚de‡
SHARED


747 
	`__©åibuã__
 ((
__wók__
))

753 
__jmp_buf_èg
;

754 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

760 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

761 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

762 
__THROW
 
	`__n⁄nuŒ
 ((1));

765 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

766 
__THROW
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

773 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

776 #ifde‡
__USE_XOPEN2K


778 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

779 c⁄° 
time•ec
 *
__ª°ri˘


780 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

784 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

790 
__ª°ri˘
 
__muãx
,

791 *
__ª°ri˘
 
__¥io˚ûög
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

797 
__¥io˚ûög
,

798 *
__ª°ri˘
 
__ﬁd_˚ûög
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

802 #ifde‡
__USE_XOPEN2K8


804 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 #ifde‡
__USE_GNU


807 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

817 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__psh¨ed
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__psh¨ed
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

835 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


837 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


838 
__©å
, *
__ª°ri˘
 
__köd
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

844 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

845 
__THROW
 
	`__n⁄nuŒ
 ((1));

849 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

850 
__ª°ri˘
 
__©å
,

851 *
__ª°ri˘
 
__¥Ÿocﬁ
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥Ÿocﬁ
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

862 
__ª°ri˘
 
__©å
,

863 *
__ª°ri˘
 
__¥io˚ûög
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

867 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__¥io˚ûög
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

871 #ifde‡
__USE_XOPEN2K


873 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

874 *
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

878 *
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

883 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

884 
__robu°√ss
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #ifde‡
__USE_GNU


887 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

888 
__robu°√ss
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

894 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


899 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

900 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


901 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

904 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1));

908 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

909 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

912 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

915 #ifde‡
__USE_XOPEN2K


917 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 c⁄° 
time•ec
 *
__ª°ri˘


919 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

923 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

924 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

927 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

930 #ifde‡
__USE_XOPEN2K


932 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

933 c⁄° 
time•ec
 *
__ª°ri˘


934 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

938 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

939 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

945 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__psh¨ed
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__psh¨ed
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

965 
__ª°ri˘
 
__©å
,

966 *
__ª°ri˘
 
__¥ef
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

970 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

971 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

979 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

980 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

981 
__THROW
 
	`__n⁄nuŒ
 ((1));

984 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

989 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

993 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1002 
	`__n⁄nuŒ
 ((1, 2));

1011 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1012 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 3));

1019 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1024 
__THROW
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 *
__ª°ri˘
 
__psh¨ed
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 #ifde‡
__USE_XOPEN2K


1038 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1039 
__ª°ri˘
 
__©å
,

1040 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1044 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1045 
__˛ockid_t
 
__˛ock_id
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 #ifde‡
__USE_XOPEN2K


1055 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1056 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1064 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1068 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1080 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1081 
__©å
, 
__cou¡
)

1082 
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1086 
__THROW
 
	`__n⁄nuŒ
 ((1));

1089 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1090 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1094 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1));

1098 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1103 
__ª°ri˘
 
__©å
,

1104 *
__ª°ri˘
 
__psh¨ed
)

1105 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1108 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1109 
__psh¨ed
)

1110 
__THROW
 
	`__n⁄nuŒ
 ((1));

1122 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1123 (*
__de°r_fun˘i⁄
) (*))

1124 
__THROW
 
	`__n⁄nuŒ
 ((1));

1127 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1130 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1133 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1134 c⁄° *
__poöãr
Ë
__THROW
 ;

1137 #ifde‡
__USE_XOPEN2K


1139 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1140 
__˛ockid_t
 *
__˛ock_id
)

1141 
__THROW
 
	`__n⁄nuŒ
 ((2));

1156 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1157 (*
__∑ª¡
) (),

1158 (*
__chûd
Ë()Ë
__THROW
;

1161 #ifde‡
__USE_EXTERN_INLINES


1163 
__exã∫_ölöe
 

1164 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1166  
__thªad1
 =
__thªad2
;

1167 
	}
}

1170 
	g__END_DECLS


	@/usr/include/pwd.h

22 #i‚def 
_PWD_H


23 
	#_PWD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

34 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__uid_t_deföed


43 
__uid_t
 
	tuid_t
;

44 
	#__uid_t_deföed


	)

49 
	s∑sswd


51 *
	mpw_«me
;

52 *
	mpw_∑sswd
;

53 
__uid_t
 
	mpw_uid
;

54 
__gid_t
 
	mpw_gid
;

55 *
	mpw_gecos
;

56 *
	mpw_dú
;

57 *
	mpw_shñl
;

61 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


62 
	#__√ed_FILE


	)

63 
	~<°dio.h
>

67 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


72 
£çwít
 ();

78 
ídpwít
 ();

84 
∑sswd
 *
gëpwít
 ();

87 #ifdef 
__USE_SVID


94 
∑sswd
 *
fgëpwít
 (
FILE
 *
__°ªam
);

102 
puçwít
 (c⁄° 
∑sswd
 *
__ª°ri˘
 
__p
,

103 
FILE
 *
__ª°ri˘
 
__f
);

110 
∑sswd
 *
gëpwuid
 (
__uid_t
 
__uid
);

116 
∑sswd
 *
gëpw«m
 (c⁄° *
__«me
);

118 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


120 #ifde‡
__USE_MISC


123 
	#NSS_BUFLEN_PASSWD
 1024

	)

134 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


139 
gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

140 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

141 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

144 
gëpwuid_r
 (
__uid_t
 
__uid
,

145 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

146 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

147 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

149 
gëpw«m_r
 (c⁄° *
__ª°ri˘
 
__«me
,

150 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

151 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

152 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

155 #ifdef 
__USE_SVID


163 
fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

164 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

165 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

166 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

171 #ifde‡
__USE_GNU


180 
gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

183 
	g__END_DECLS


	@/usr/include/regex.h

20 #i‚de‡
_REGEX_H


21 
	#_REGEX_H
 1

	)

23 
	~<sys/ty≥s.h
>

24 
	~<gnu/›ti⁄-groups.h
>

27 #ifde‡
__˝lu•lus


35 
	ts_ªg_t
;

36 
	ta˘ive_ªg_t
;

43 
	tªg_sy¡ax_t
;

45 #ifde‡
__USE_GNU


48 
	#RE_BACKSLASH_ESCAPE_IN_LISTS
 ((Ë1)

	)

53 
	#RE_BK_PLUS_QM
 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 << 1)

	)

59 
	#RE_CHAR_CLASSES
 (
RE_BK_PLUS_QM
 << 1)

	)

73 
	#RE_CONTEXT_INDEP_ANCHORS
 (
RE_CHAR_CLASSES
 << 1)

	)

81 
	#RE_CONTEXT_INDEP_OPS
 (
RE_CONTEXT_INDEP_ANCHORS
 << 1)

	)

85 
	#RE_CONTEXT_INVALID_OPS
 (
RE_CONTEXT_INDEP_OPS
 << 1)

	)

89 
	#RE_DOT_NEWLINE
 (
RE_CONTEXT_INVALID_OPS
 << 1)

	)

93 
	#RE_DOT_NOT_NULL
 (
RE_DOT_NEWLINE
 << 1)

	)

97 
	#RE_HAT_LISTS_NOT_NEWLINE
 (
RE_DOT_NOT_NULL
 << 1)

	)

102 
	#RE_INTERVALS
 (
RE_HAT_LISTS_NOT_NEWLINE
 << 1)

	)

106 
	#RE_LIMITED_OPS
 (
RE_INTERVALS
 << 1)

	)

110 
	#RE_NEWLINE_ALT
 (
RE_LIMITED_OPS
 << 1)

	)

115 
	#RE_NO_BK_BRACES
 (
RE_NEWLINE_ALT
 << 1)

	)

119 
	#RE_NO_BK_PARENS
 (
RE_NO_BK_BRACES
 << 1)

	)

123 
	#RE_NO_BK_REFS
 (
RE_NO_BK_PARENS
 << 1)

	)

127 
	#RE_NO_BK_VBAR
 (
RE_NO_BK_REFS
 << 1)

	)

133 
	#RE_NO_EMPTY_RANGES
 (
RE_NO_BK_VBAR
 << 1)

	)

137 
	#RE_UNMATCHED_RIGHT_PAREN_ORD
 (
RE_NO_EMPTY_RANGES
 << 1)

	)

141 
	#RE_NO_POSIX_BACKTRACKING
 (
RE_UNMATCHED_RIGHT_PAREN_ORD
 << 1)

	)

145 
	#RE_NO_GNU_OPS
 (
RE_NO_POSIX_BACKTRACKING
 << 1)

	)

153 
	#RE_DEBUG
 (
RE_NO_GNU_OPS
 << 1)

	)

158 
	#RE_INVALID_INTERVAL_ORD
 (
RE_DEBUG
 << 1)

	)

161 #ifde‡
__OPTION_POSIX_REGEXP_GLIBC


164 
	#RE_ICASE
 (
RE_INVALID_INTERVAL_ORD
 << 1)

	)

169 
	#RE_CARET_ANCHORS_HERE
 (
RE_ICASE
 << 1)

	)

173 
	#RE_CONTEXT_INVALID_DUP
 (
RE_CARET_ANCHORS_HERE
 << 1)

	)

177 
	#RE_NO_SUB
 (
RE_CONTEXT_INVALID_DUP
 << 1)

	)

185 
ªg_sy¡ax_t
 
ª_sy¡ax_›ti⁄s
;

187 #ifde‡
__USE_GNU


192 
	#RE_SYNTAX_EMACS
 0

	)

194 
	#RE_SYNTAX_AWK
 \

195 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 | 
RE_DOT_NOT_NULL
 \

196 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

197 | 
RE_NO_BK_VBAR
 | 
RE_NO_EMPTY_RANGES
 \

198 | 
RE_DOT_NEWLINE
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

199 | 
RE_CHAR_CLASSES
 \

200 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
 | 
RE_NO_GNU_OPS
)

	)

202 
	#RE_SYNTAX_GNU_AWK
 \

203 ((
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 \

204 | 
RE_INVALID_INTERVAL_ORD
) \

205 & ~(
RE_DOT_NOT_NULL
 | 
RE_CONTEXT_INDEP_OPS
 \

206 | 
RE_CONTEXT_INVALID_OPS
 ))

	)

208 
	#RE_SYNTAX_POSIX_AWK
 \

209 (
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 \

210 | 
RE_INTERVALS
 | 
RE_NO_GNU_OPS
 \

211 | 
RE_INVALID_INTERVAL_ORD
)

	)

213 
	#RE_SYNTAX_GREP
 \

214 (
RE_BK_PLUS_QM
 | 
RE_CHAR_CLASSES
 \

215 | 
RE_HAT_LISTS_NOT_NEWLINE
 | 
RE_INTERVALS
 \

216 | 
RE_NEWLINE_ALT
)

	)

218 
	#RE_SYNTAX_EGREP
 \

219 (
RE_CHAR_CLASSES
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

220 | 
RE_CONTEXT_INDEP_OPS
 | 
RE_HAT_LISTS_NOT_NEWLINE
 \

221 | 
RE_NEWLINE_ALT
 | 
RE_NO_BK_PARENS
 \

222 | 
RE_NO_BK_VBAR
)

	)

224 
	#RE_SYNTAX_POSIX_EGREP
 \

225 (
RE_SYNTAX_EGREP
 | 
RE_INTERVALS
 | 
RE_NO_BK_BRACES
 \

226 | 
RE_INVALID_INTERVAL_ORD
)

	)

229 
	#RE_SYNTAX_ED
 
RE_SYNTAX_POSIX_BASIC


	)

231 
	#RE_SYNTAX_SED
 
RE_SYNTAX_POSIX_BASIC


	)

234 
	#_RE_SYNTAX_POSIX_COMMON
 \

235 (
RE_CHAR_CLASSES
 | 
RE_DOT_NEWLINE
 | 
RE_DOT_NOT_NULL
 \

236 | 
RE_INTERVALS
 | 
RE_NO_EMPTY_RANGES
)

	)

238 #ifde‡
__OPTION_POSIX_REGEXP_GLIBC


239 
	#RE_SYNTAX_POSIX_BASIC
 \

240 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_BK_PLUS_QM
 | 
RE_CONTEXT_INVALID_DUP
)

	)

242 
	#RE_SYNTAX_POSIX_BASIC
 \

243 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_BK_PLUS_QM
)

	)

249 
	#RE_SYNTAX_POSIX_MINIMAL_BASIC
 \

250 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_LIMITED_OPS
)

	)

252 
	#RE_SYNTAX_POSIX_EXTENDED
 \

253 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

254 | 
RE_CONTEXT_INDEP_OPS
 | 
RE_NO_BK_BRACES
 \

255 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_VBAR
 \

256 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

260 
	#RE_SYNTAX_POSIX_MINIMAL_EXTENDED
 \

261 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

262 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_NO_BK_BRACES
 \

263 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

264 | 
RE_NO_BK_VBAR
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

270 #ifde‡
RE_DUP_MAX


271 #unde‡
RE_DUP_MAX


274 
	#RE_DUP_MAX
 (0x7fff)

	)

282 
	#REG_EXTENDED
 1

	)

286 
	#REG_ICASE
 (
REG_EXTENDED
 << 1)

	)

291 
	#REG_NEWLINE
 (
REG_ICASE
 << 1)

	)

295 
	#REG_NOSUB
 (
REG_NEWLINE
 << 1)

	)

305 
	#REG_NOTBOL
 1

	)

308 
	#REG_NOTEOL
 (1 << 1)

	)

310 #ifde‡
__OPTION_POSIX_REGEXP_GLIBC


313 
	#REG_STARTEND
 (1 << 2)

	)

321 #i‡
deföed
 
_XOPEN_SOURCE
 || deföed 
__USE_XOPEN2K


322 
	gREG_ENOSYS
 = -1,

325 
	gREG_NOERROR
 = 0,

326 
	gREG_NOMATCH
,

330 
	gREG_BADPAT
,

331 
	gREG_ECOLLATE
,

332 
	gREG_ECTYPE
,

333 
	gREG_EESCAPE
,

334 
	gREG_ESUBREG
,

335 
	gREG_EBRACK
,

336 
	gREG_EPAREN
,

337 
	gREG_EBRACE
,

338 
	gREG_BADBR
,

339 
	gREG_ERANGE
,

340 
	gREG_ESPACE
,

341 
	gREG_BADRPT
,

344 
	gREG_EEND
,

345 
	gREG_ESIZE
,

346 
	gREG_ERPAREN


347 } 
	tªg_îrcode_t
;

355 #i‚de‡
RE_TRANSLATE_TYPE


356 
	#__RE_TRANSLATE_TYPE
 *

	)

357 #ifde‡
__USE_GNU


358 
	#RE_TRANSLATE_TYPE
 
__RE_TRANSLATE_TYPE


	)

362 #ifde‡
__USE_GNU


363 
	#__REPB_PREFIX
(
«me
Ë
	)
«me

365 
	#__REPB_PREFIX
(
«me
Ë
__
##
	)
«me

368 
	sª_∑âîn_buf„r


373 *
__REPB_PREFIX
(
buf„r
);

376 
__REPB_PREFIX
(
Æloˇãd
);

379 
__REPB_PREFIX
(
u£d
);

382 
ªg_sy¡ax_t
 
__REPB_PREFIX
(
sy¡ax
);

387 *
__REPB_PREFIX
(
Á°m≠
);

393 
__RE_TRANSLATE_TYPE
 
__REPB_PREFIX
(
å™¶©e
);

396 
size_t
 
	gª_nsub
;

402 
__REPB_PREFIX
(
ˇn_be_nuŒ
) : 1;

408 #ifde‡
__USE_GNU


409 
	#REGS_UNALLOCATED
 0

	)

410 
	#REGS_REALLOCATE
 1

	)

411 
	#REGS_FIXED
 2

	)

413 
__REPB_PREFIX
(
ªgs_Æloˇãd
) : 2;

417 
__REPB_PREFIX
(
Á°m≠_accuøã
) : 1;

421 
__REPB_PREFIX
(
no_sub
) : 1;

425 
__REPB_PREFIX
(
nŸ_bﬁ
) : 1;

428 
__REPB_PREFIX
(
nŸ_eﬁ
) : 1;

431 
__REPB_PREFIX
(
√wlöe_™ch‹
) : 1;

434 
ª_∑âîn_buf„r
 
	tªgex_t
;

437 
	tªgoff_t
;

440 #ifde‡
__USE_GNU


443 
	sª_ªgi°îs


445 
	gnum_ªgs
;

446 
ªgoff_t
 *
	g°¨t
;

447 
ªgoff_t
 *
	gíd
;

454 #i‚de‡
RE_NREGS


455 
	#RE_NREGS
 30

	)

465 
ªgoff_t
 
	grm_so
;

466 
ªgoff_t
 
	grm_eo
;

467 } 
	tªgm©ch_t
;

471 #ifde‡
__USE_GNU


474 
ªg_sy¡ax_t
 
ª_£t_sy¡ax
 (ªg_sy¡ax_à
__sy¡ax
);

484 c⁄° *
ª_compûe_∑âîn
 (c⁄° *
__∑âîn
, 
size_t
 
__Àngth
,

485 
ª_∑âîn_buf„r
 *
__buf„r
);

491 
ª_compûe_Á°m≠
 (
ª_∑âîn_buf„r
 *
__buf„r
);

499 
ª_£¨ch
 (
ª_∑âîn_buf„r
 *
__buf„r
, c⁄° *
__°rög
,

500 
__Àngth
, 
__°¨t
, 
__ønge
,

501 
ª_ªgi°îs
 *
__ªgs
);

506 
ª_£¨ch_2
 (
ª_∑âîn_buf„r
 *
__buf„r
,

507 c⁄° *
__°rög1
, 
__Àngth1
,

508 c⁄° *
__°rög2
, 
__Àngth2
, 
__°¨t
,

509 
__ønge
, 
ª_ªgi°îs
 *
__ªgs
, 
__°›
);

514 
ª_m©ch
 (
ª_∑âîn_buf„r
 *
__buf„r
, c⁄° *
__°rög
,

515 
__Àngth
, 
__°¨t
, 
ª_ªgi°îs
 *
__ªgs
);

519 
ª_m©ch_2
 (
ª_∑âîn_buf„r
 *
__buf„r
,

520 c⁄° *
__°rög1
, 
__Àngth1
,

521 c⁄° *
__°rög2
, 
__Àngth2
, 
__°¨t
,

522 
ª_ªgi°îs
 *
__ªgs
, 
__°›
);

537 
ª_£t_ªgi°îs
 (
ª_∑âîn_buf„r
 *
__buf„r
,

538 
ª_ªgi°îs
 *
__ªgs
,

539 
__num_ªgs
,

540 
ªgoff_t
 *
__°¨ts
,Ñegoff_à*
__íds
);

543 #i‡
deföed
 
_REGEX_RE_COMP
 || (deföed 
_LIBC
 && deföed 
__USE_BSD
)

544 #i‚de‡
_CRAY


546 *
ª_comp
 (const *);

547 
ª_exec
 (const *);

553 #i‚de‡
__ª°ri˘


554 #i‡! (2 < 
__GNUC__
 || (2 =__GNUC__ && 95 <
__GNUC_MINOR__
))

555 #i‡
deföed
 
ª°ri˘
 || 199901L <
__STDC_VERSION__


556 
	#__ª°ri˘
 
ª°ri˘


	)

558 
	#__ª°ri˘


	)

563 #i‚de‡
__ª°ri˘_¨r


564 #i‡(
__GNUC__
 > 3 || (__GNUC__ =3 && 
__GNUC_MINOR__
 >= 1)) \

565 && !
deföed
 
	g__GNUG__


566 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

568 
	#__ª°ri˘_¨r


	)

573 
ªgcomp
 (
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

574 c⁄° *
__ª°ri˘
 
__∑âîn
,

575 
__cÊags
);

577 
ªgexec
 (c⁄° 
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

578 c⁄° *
__ª°ri˘
 
__°rög
, 
size_t
 
__nm©ch
,

579 
ªgm©ch_t
 
__pm©ch
[
__ª°ri˘_¨r
],

580 
__eÊags
);

582 
size_t
 
ªgîr‹
 (
__îrcode
, c⁄° 
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

583 *
__ª°ri˘
 
__îrbuf
, 
size_t
 
__îrbuf_size
);

585 
ªg‰ì
 (
ªgex_t
 *
__¥eg
);

588 #ifde‡
__˝lu•lus


	@/usr/include/resolv.h

52 #i‚de‡
_RESOLV_H_


56 
	~<sys/ty≥s.h
>

57 
	~<√töë/ö.h
>

59 #i‚de‡
__√ed_ªs_°©e


60 
	#_RESOLV_H_


	)

62 
	~<sys/∑øm.h
>

63 
	~<sys/cdefs.h
>

64 
	~<°dio.h
>

65 
	~<¨∑/«me£r.h
>

68 #i‚de‡
__ªs_°©e_deföed


69 
	#__ªs_°©e_deföed


	)

71 íum { 
	mªs_gﬂhód
, 
	mªs_√xäs
, 
	mªs_modifõd
, 
	mªs_d⁄e
, 
	mªs_îr‹
 }

72 
	tªs_£ndhooka˘
;

74 
	$ªs_£ndhooka˘
 (*
	tªs_£nd_qhook
Ë(
	tsockaddr_ö
 * c⁄° *
	t__ns
,

75 c⁄° 
	tu_ch¨
 **
	t__quîy
,

76 *
	t__quîyÀn
,

77 
	tu_ch¨
 *
	t__™s
,

78 
	t__™ssiz
,

79 *
	t__ª•Àn
);

81 
	$ªs_£ndhooka˘
 (*
	tªs_£nd_rhook
Ë(c⁄° 
	tsockaddr_ö
 *
	t__ns
,

82 c⁄° 
	tu_ch¨
 *
	t__quîy
,

83 
	t__quîyÀn
,

84 
	tu_ch¨
 *
	t__™s
,

85 
	t__™ssiz
,

86 *
	t__ª•Àn
);

91 
	#MAXNS
 3

	)

92 
	#MAXDFLSRCH
 3

	)

93 
	#MAXDNSRCH
 6

	)

94 
	#LOCALDOMAINPARTS
 2

	)

96 
	#RES_TIMEOUT
 5

	)

97 
	#MAXRESOLVSORT
 10

	)

98 
	#RES_MAXNDOTS
 15

	)

99 
	#RES_MAXRETRANS
 30

	)

100 
	#RES_MAXRETRY
 5

	)

101 
	#RES_DFLRETRY
 2

	)

102 
	#RES_MAXTIME
 65535

	)

104 
	s__ªs_°©e
 {

105 
ªå™s
;

106 
ªåy
;

107 
u_l⁄g
 
›ti⁄s
;

108 
nscou¡
;

109 
sockaddr_ö


110 
nßddr_li°
[
MAXNS
];

111 
	#nßddr
 
nßddr_li°
[0]

	)

112 
u_sh‹t
 
id
;

114 *
dn§ch
[
MAXDNSRCH
+1];

115 
defd«me
[256];

116 
u_l⁄g
 
pfcode
;

117 
ndŸs
:4;

118 
ns‹t
:4;

119 
ùv6_u«vaû
:1;

120 
unu£d
:23;

122 
ö_addr
 
addr
;

123 
u_öt32_t
 
mask
;

124 } 
s‹t_li°
[
MAXRESOLVSORT
];

126 
ªs_£nd_qhook
 
qhook
;

127 
ªs_£nd_rhook
 
rhook
;

128 
ªs_h_î∫o
;

129 
_vcsock
;

130 
u_öt
 
_Êags
;

133 
∑d
[52];

135 
u_öt16_t
 
nscou¡
;

136 
u_öt16_t
 
nsm≠
[
MAXNS
];

137 
nssocks
[
MAXNS
];

138 
u_öt16_t
 
nscou¡6
;

139 
u_öt16_t
 
nsöô
;

140 
sockaddr_ö6
 *
nßddrs
[
MAXNS
];

141 #ifde‡
_LIBC


142 
öô°amp


143 
	`__©åibuã__
((
∑cked
));

145 
_öô°amp
[2];

147 } 
_ext
;

148 } 
_u
;

151 
__ªs_°©e
 *
	tªs_°©e
;

152 #unde‡
__√ed_ªs_°©e


155 #ifde‡
_RESOLV_H_


164 
	#__RES
 19991006

	)

172 #i‚de‡
_PATH_RESCONF


173 
	#_PATH_RESCONF
 "/ëc/ªsﬁv.c⁄f"

	)

176 
	sªs_sym
 {

177 
numbî
;

178 * 
«me
;

179 * 
hum™«me
;

185 
	#RES_F_VC
 0x00000001

	)

186 
	#RES_F_CONN
 0x00000002

	)

187 
	#RES_F_EDNS0ERR
 0x00000004

	)

190 
	#RES_EXHAUSTIVE
 0x00000001

	)

195 
	#RES_INIT
 0x00000001

	)

196 
	#RES_DEBUG
 0x00000002

	)

197 
	#RES_AAONLY
 0x00000004

	)

198 
	#RES_USEVC
 0x00000008

	)

199 
	#RES_PRIMARY
 0x00000010

	)

200 
	#RES_IGNTC
 0x00000020

	)

201 
	#RES_RECURSE
 0x00000040

	)

202 
	#RES_DEFNAMES
 0x00000080

	)

203 
	#RES_STAYOPEN
 0x00000100

	)

204 
	#RES_DNSRCH
 0x00000200

	)

205 
	#RES_INSECURE1
 0x00000400

	)

206 
	#RES_INSECURE2
 0x00000800

	)

207 
	#RES_NOALIASES
 0x00001000

	)

208 
	#RES_USE_INET6
 0x00002000

	)

209 
	#RES_ROTATE
 0x00004000

	)

210 
	#RES_NOCHECKNAME
 0x00008000

	)

211 
	#RES_KEEPTSIG
 0x00010000

	)

212 
	#RES_BLAST
 0x00020000

	)

213 
	#RES_USEBSTRING
 0x00040000

	)

215 
	#RES_NOIP6DOTINT
 0x00080000

	)

217 
	#RES_USE_EDNS0
 0x00100000

	)

218 
	#RES_SNGLKUP
 0x00200000

	)

219 
	#RES_SNGLKUPREOP
 0x00400000

	)

221 
	#RES_USE_DNSSEC
 0x00800000

	)

222 
	#RES_NOTLDQUERY
 0x01000000

	)

225 
	#RES_DEFAULT
 (
RES_RECURSE
|
RES_DEFNAMES
|
RES_DNSRCH
|
RES_NOIP6DOTINT
)

	)

230 
	#RES_PRF_STATS
 0x00000001

	)

231 
	#RES_PRF_UPDATE
 0x00000002

	)

232 
	#RES_PRF_CLASS
 0x00000004

	)

233 
	#RES_PRF_CMD
 0x00000008

	)

234 
	#RES_PRF_QUES
 0x00000010

	)

235 
	#RES_PRF_ANS
 0x00000020

	)

236 
	#RES_PRF_AUTH
 0x00000040

	)

237 
	#RES_PRF_ADD
 0x00000080

	)

238 
	#RES_PRF_HEAD1
 0x00000100

	)

239 
	#RES_PRF_HEAD2
 0x00000200

	)

240 
	#RES_PRF_TTLID
 0x00000400

	)

241 
	#RES_PRF_HEADX
 0x00000800

	)

242 
	#RES_PRF_QUERY
 0x00001000

	)

243 
	#RES_PRF_REPLY
 0x00002000

	)

244 
	#RES_PRF_INIT
 0x00004000

	)

248 
__BEGIN_DECLS


249 
__ªs_°©e
 *
	$__ªs_°©e
(Ë
	`__©åibuã__
 ((
__c⁄°__
));

250 
__END_DECLS


251 
	#_ªs
 (*
	`__ªs_°©e
())

	)

253 #i‚de‡
__BIND_NOSTATIC


254 
	#Â_nquîy
 
__Â_nquîy


	)

255 
	#Â_quîy
 
__Â_quîy


	)

256 
	#ho°Æüs
 
__ho°Æüs


	)

257 
	#p_quîy
 
__p_quîy


	)

258 
	#ªs_˛o£
 
__ªs_˛o£


	)

259 
	#ªs_öô
 
__ªs_öô


	)

260 
	#ªs_isour£rvî
 
__ªs_isour£rvî


	)

261 
	#ªs_mkquîy
 
__ªs_mkquîy


	)

262 
	#ªs_quîy
 
__ªs_quîy


	)

263 
	#ªs_quîydomaö
 
__ªs_quîydomaö


	)

264 
	#ªs_£¨ch
 
__ªs_£¨ch


	)

265 
	#ªs_£nd
 
__ªs_£nd


	)

267 
__BEGIN_DECLS


268 
	$Â_nquîy
 (c⁄° 
u_ch¨
 *, , 
FILE
 *Ë
__THROW
;

269 
	$Â_quîy
 (c⁄° 
u_ch¨
 *, 
FILE
 *Ë
__THROW
;

270 c⁄° * 
	$ho°Æüs
 (c⁄° *Ë
__THROW
;

271 
	$p_quîy
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

272 
	$ªs_˛o£
 (Ë
__THROW
;

273 
	$ªs_öô
 (Ë
__THROW
;

274 
	$ªs_isour£rvî
 (c⁄° 
sockaddr_ö
 *Ë
__THROW
;

275 
	$ªs_mkquîy
 (, c⁄° *, , , c⁄° 
u_ch¨
 *,

276 , c⁄° 
u_ch¨
 *, u_ch¨ *, Ë
__THROW
;

277 
	$ªs_quîy
 (c⁄° *, , , 
u_ch¨
 *, Ë
__THROW
;

278 
	$ªs_quîydomaö
 (const *, const *, , ,

279 
u_ch¨
 *, Ë
__THROW
;

280 
	$ªs_£¨ch
 (c⁄° *, , , 
u_ch¨
 *, Ë
__THROW
;

281 
	$ªs_£nd
 (c⁄° 
u_ch¨
 *, , u_ch¨ *, Ë
__THROW
;

282 
__END_DECLS


285 
	#b64_¡›
 
__b64_¡›


	)

286 
	#b64_±⁄
 
__b64_±⁄


	)

287 
	#dn_comp
 
__dn_comp


	)

288 
	#dn_cou¡_œbñs
 
__dn_cou¡_œbñs


	)

289 
	#dn_ex∑nd
 
__dn_ex∑nd


	)

290 
	#dn_skù«me
 
__dn_skù«me


	)

291 
	#Â_ªs°©
 
__Â_ªs°©


	)

292 
	#loc_©⁄
 
__loc_©⁄


	)

293 
	#loc_¡ﬂ
 
__loc_¡ﬂ


	)

294 
	#p_cd«me
 
__p_cd«me


	)

295 
	#p_cd¬ame
 
__p_cd¬ame


	)

296 
	#p_˛ass
 
__p_˛ass


	)

297 
	#p_fq«me
 
__p_fq«me


	)

298 
	#p_fq¬ame
 
__p_fq¬ame


	)

299 
	#p_›ti⁄
 
__p_›ti⁄


	)

300 
	#p_£c°od©e
 
__p_£c°od©e


	)

301 
	#p_£˘i⁄
 
__p_£˘i⁄


	)

302 
	#p_time
 
__p_time


	)

303 
	#p_ty≥
 
__p_ty≥


	)

304 
	#p_rcode
 
__p_rcode


	)

305 
	#pué⁄g
 
__pué⁄g


	)

306 
	#putsh‹t
 
__putsh‹t


	)

307 
	#ªs_dnok
 
__ªs_dnok


	)

308 
	#ªs_hnok
 
__ªs_hnok


	)

309 
	#ªs_ho°Æüs
 
__ªs_ho°Æüs


	)

310 
	#ªs_maûok
 
__ªs_maûok


	)

311 
	#ªs_«meöquîy
 
__ªs_«meöquîy


	)

312 
	#ªs_n˛o£
 
__ªs_n˛o£


	)

313 
	#ªs_nöô
 
__ªs_nöô


	)

314 
	#ªs_nmkquîy
 
__ªs_nmkquîy


	)

315 
	#ªs_≈quîy
 
__ªs_≈quîy


	)

316 
	#ªs_nquîy
 
__ªs_nquîy


	)

317 
	#ªs_nquîydomaö
 
__ªs_nquîydomaö


	)

318 
	#ªs_n£¨ch
 
__ªs_n£¨ch


	)

319 
	#ªs_n£nd
 
__ªs_n£nd


	)

320 
	#ªs_nisour£rvî
 
__ªs_nisour£rvî


	)

321 
	#ªs_ownok
 
__ªs_ownok


	)

322 
	#ªs_quîõsm©ch
 
__ªs_quîõsm©ch


	)

323 
	#ªs_øndomid
 
__ªs_øndomid


	)

324 
	#sym_¡›
 
__sym_¡›


	)

325 
	#sym_¡os
 
__sym_¡os


	)

326 
	#sym_°⁄
 
__sym_°⁄


	)

327 
__BEGIN_DECLS


328 
	$ªs_hnok
 (c⁄° *Ë
__THROW
;

329 
	$ªs_ownok
 (c⁄° *Ë
__THROW
;

330 
	$ªs_maûok
 (c⁄° *Ë
__THROW
;

331 
	$ªs_dnok
 (c⁄° *Ë
__THROW
;

332 
	$sym_°⁄
 (c⁄° 
ªs_sym
 *, c⁄° *, *Ë
__THROW
;

333 c⁄° * 
	$sym_¡os
 (c⁄° 
ªs_sym
 *, , *Ë
__THROW
;

334 c⁄° * 
	$sym_¡›
 (c⁄° 
ªs_sym
 *, , *Ë
__THROW
;

335 
	$b64_¡›
 (
u_ch¨
 c⁄° *, 
size_t
, *, size_tË
__THROW
;

336 
	$b64_±⁄
 (c⁄° *, 
u_ch¨
 *, 
size_t
Ë
__THROW
;

337 
	$loc_©⁄
 (c⁄° *
__ascii
, 
u_ch¨
 *
__bö¨y
Ë
__THROW
;

338 c⁄° * 
	$loc_¡ﬂ
 (c⁄° 
u_ch¨
 *
__bö¨y
, *
__ascii
Ë
__THROW
;

339 
	$dn_skù«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

340 
	$pué⁄g
 (
u_öt32_t
, 
u_ch¨
 *Ë
__THROW
;

341 
	$putsh‹t
 (
u_öt16_t
, 
u_ch¨
 *Ë
__THROW
;

342 c⁄° * 
	$p_˛ass
 (Ë
__THROW
;

343 c⁄° * 
	$p_time
 (
u_öt32_t
Ë
__THROW
;

344 c⁄° * 
	$p_ty≥
 (Ë
__THROW
;

345 c⁄° * 
	$p_rcode
 (Ë
__THROW
;

346 c⁄° 
u_ch¨
 * 
	$p_cd¬ame
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, , 
FILE
 *)

347 
__THROW
;

348 c⁄° 
u_ch¨
 * 
	$p_cd«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
FILE
 *Ë
__THROW
;

349 c⁄° 
u_ch¨
 * 
	$p_fq¬ame
 (c⁄° 
u_ch¨
 *
__˝
, c⁄° u_ch¨ *
__msg
,

350 , *, Ë
__THROW
;

351 c⁄° 
u_ch¨
 * 
	$p_fq«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
FILE
 *Ë
__THROW
;

352 c⁄° * 
	$p_›ti⁄
 (
u_l⁄g
 
__›ti⁄
Ë
__THROW
;

353 * 
	$p_£c°od©e
 (
u_l⁄g
Ë
__THROW
;

354 
	$dn_cou¡_œbñs
 (c⁄° *Ë
__THROW
;

355 
	$dn_comp
 (c⁄° *, 
u_ch¨
 *, , u_char **, u_char **)

356 
__THROW
;

357 
	$dn_ex∑nd
 (c⁄° 
u_ch¨
 *, const u_char *, const u_char *,

358 *, Ë
__THROW
;

359 
u_öt
 
	$ªs_øndomid
 (Ë
__THROW
;

360 
	$ªs_«meöquîy
 (const *, , ,

361 c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

362 
	$ªs_quîõsm©ch
 (c⁄° 
u_ch¨
 *, const u_char *,

363 c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

364 c⁄° * 
	$p_£˘i⁄
 (
__£˘i⁄
, 
__›code
Ë
__THROW
;

366 
	$ªs_nöô
 (
ªs_°©e
Ë
__THROW
;

367 
	$ªs_nisour£rvî
 (c⁄° 
ªs_°©e
,

368 c⁄° 
sockaddr_ö
 *Ë
__THROW
;

369 
	$Â_ªs°©
 (c⁄° 
ªs_°©e
, 
FILE
 *Ë
__THROW
;

370 
	$ªs_≈quîy
 (c⁄° 
ªs_°©e
, c⁄° 
u_ch¨
 *, , 
FILE
 *)

371 
__THROW
;

372 c⁄° * 
	$ªs_ho°Æüs
 (c⁄° 
ªs_°©e
, c⁄° *, *, 
size_t
)

373 
__THROW
;

374 
	$ªs_nquîy
 (
ªs_°©e
, c⁄° *, , , 
u_ch¨
 *, )

375 
__THROW
;

376 
	$ªs_n£¨ch
 (
ªs_°©e
, c⁄° *, , , 
u_ch¨
 *, )

377 
__THROW
;

378 
	$ªs_nquîydomaö
 (
ªs_°©e
, const *, const *, ,

379 , 
u_ch¨
 *, Ë
__THROW
;

380 
	$ªs_nmkquîy
 (
ªs_°©e
, , const *, , ,

381 c⁄° 
u_ch¨
 *, , const u_char *, u_char *,

382 Ë
__THROW
;

383 
	$ªs_n£nd
 (
ªs_°©e
, c⁄° 
u_ch¨
 *, , u_char *, )

384 
__THROW
;

385 
	$ªs_n˛o£
 (
ªs_°©e
Ë
__THROW
;

386 
__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 
	#__√ed_time_t


	)

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

34 #i‚de‡
__pid_t_deföed


35 
__pid_t
 
	tpid_t
;

36 
	#__pid_t_deföed


	)

41 
	~<bôs/sched.h
>

43 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

46 
__BEGIN_DECLS


49 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

50 
__THROW
;

53 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

56 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

57 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

60 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

63 
	$sched_yõld
 (Ë
__THROW
;

66 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

69 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

72 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

75 #ifde‡
__USE_GNU


77 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

78 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

81 
˝u£ç
)

	)

82 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

83 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

86 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

88 
˝u£ç
)

	)

89 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

90 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

93 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

94 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

97 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

103 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

105 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

107 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

110 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

111 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

112 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

116 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

117 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

120 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

121 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

124 
__END_DECLS


	@/usr/include/search.h

19 #i‚de‡
_SEARCH_H


20 
	#_SEARCH_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


29 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


33 #ifde‡
__USE_GNU


34 
	sqñem


36 
qñem
 *
	mq_f‹w
;

37 
qñem
 *
	mq_back
;

38 
	mq_d©a
[1];

44 
	$ösque
 (*
__ñem
, *
__¥ev
Ë
__THROW
;

47 
	$ªmque
 (*
__ñem
Ë
__THROW
;

52 #i‚de‡
__COMPAR_FN_T


53 
	#__COMPAR_FN_T


	)

54 (*
	t__com∑r_‚_t
) (const *, const *);

56 #ifdef 
__USE_GNU


57 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

64 
FIND
,

65 
ENTER


67 
	tACTION
;

69 
	síåy


71 *
key
;

72 *
d©a
;

74 
	tENTRY
;

77 
_ENTRY
;

87 
ENTRY
 *
	$h£¨ch
 (
ENTRY
 
__ôem
, 
ACTION
 
__a˘i⁄
Ë
__THROW
;

90 
	$h¸óã
 (
size_t
 
__√l
Ë
__THROW
;

93 
	$hde°roy
 (Ë
__THROW
;

95 #ifde‡
__USE_GNU


97 
	sh£¨ch_d©a


99 
_ENTRY
 *
èbÀ
;

100 
size
;

101 
fûÀd
;

106 
	$h£¨ch_r
 (
ENTRY
 
__ôem
, 
ACTION
 
__a˘i⁄
, ENTRY **
__ªtvÆ
,

107 
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

108 
	$h¸óã_r
 (
size_t
 
__√l
, 
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

109 
	$hde°roy_r
 (
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

120 
¥e‹dî
,

121 
po°‹dî
,

122 
íd‹dî
,

123 
Àaf


125 
	tVISIT
;

129 *
	`t£¨ch
 (c⁄° *
__key
, **
__roŸp
,

130 
__com∑r_‚_t
 
__com∑r
);

134 *
	`tföd
 (c⁄° *
__key
, *c⁄° *
__roŸp
,

135 
__com∑r_‚_t
 
__com∑r
);

138 *
	`tdñëe
 (c⁄° *
__ª°ri˘
 
__key
,

139 **
__ª°ri˘
 
__roŸp
,

140 
__com∑r_‚_t
 
__com∑r
);

142 #i‚de‡
__ACTION_FN_T


143 
	#__ACTION_FN_T


	)

144 (*
	t__a˘i⁄_‚_t
Ë(c⁄° *
	t__nodï
, 
	tVISIT
 
	t__vÆue
,

145 
	t__Àvñ
);

150 
	`twÆk
 (c⁄° *
__roŸ
, 
__a˘i⁄_‚_t
 
__a˘i⁄
);

152 #ifde‡
__USE_GNU


155 (*
	t__‰ì_‚_t
Ë(*
	t__nodï
);

158 
	`tde°roy
 (*
__roŸ
, 
__‰ì_‚_t
 
__‰ìf˘
);

164 *
	`lföd
 (c⁄° *
__key
, c⁄° *
__ba£
,

165 
size_t
 *
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
);

169 *
	`l£¨ch
 (c⁄° *
__key
, *
__ba£
,

170 
size_t
 *
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
);

172 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

167 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

169 #ifde‡
__USE_XOPEN


170 #ifde‡
__GNUC__


171 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

174 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

179 #ifde‡
__USE_BSD


186 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

189 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

192 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

195 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 #ifde‡
__USE_MISC


200 
	#NSIG
 
_NSIG


	)

203 #ifde‡
__USE_GNU


204 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

208 #ifde‡
__USE_BSD


209 
__sigh™dÀr_t
 
	tsig_t
;

212 #ifde‡
__USE_POSIX


215 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__USE_GNU


232 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

236 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

239 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

240 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

245 
	~<bôs/siga˘i⁄.h
>

248 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

249 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

256 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

259 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

260 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

263 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 #ifde‡
__USE_POSIX199309


278 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

279 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

286 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

288 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

289 
	`__n⁄nuŒ
 ((1));

293 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

294 
__THROW
;

299 #ifde‡
__USE_BSD


303 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

304 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

307 
	ssigvec


309 
__sigh™dÀr_t
 
sv_h™dÀr
;

310 
sv_mask
;

312 
sv_Êags
;

313 
	#sv_⁄°ack
 
sv_Êags


	)

317 
	#SV_ONSTACK
 (1 << 0)

	)

318 
	#SV_INTERRUPT
 (1 << 1)

	)

319 
	#SV_RESETHAND
 (1 << 2)

	)

327 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

328 
sigvec
 *
__ovec
Ë
__THROW
;

332 
	~<bôs/sigc⁄ãxt.h
>

335 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

340 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


341 
	#__√ed_size_t


	)

342 
	~<°ddef.h
>

347 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

349 
	~<bôs/sig°ack.h
>

350 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


352 
	~<sys/uc⁄ãxt.h
>

358 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

359 
__THROW
 
__©åibuã_dïªˇãd__
;

363 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

364 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

368 #ifde‡
__USE_XOPEN_EXTENDED


372 
	$sighﬁd
 (
__sig
Ë
__THROW
;

375 
	$sigªl£
 (
__sig
Ë
__THROW
;

378 
	$sigign‹e
 (
__sig
Ë
__THROW
;

381 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

384 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


387 
	~<bôs/±hªadty≥s.h
>

388 
	~<bôs/sigthªad.h
>

395 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

397 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

401 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

24 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


26 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

36 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

39 
	g__BEGIN_DECLS


41 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


43 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

44 
__THROW
 
__©åibuã_puª__
;

47 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

50 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

53 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


56 *
	`ödex
 (*
__s
, 
__c
)

57 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

58 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

59 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

61 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


62 
__exã∫_Æways_ölöe
 *

63 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


65  
	`__buûtö_ödex
 (
__s
, 
__c
);

68 
__exã∫_Æways_ölöe
 const *

69 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


71  
	`__buûtö_ödex
 (
__s
, 
__c
);

74 
	}
}

76 *
	$ödex
 (c⁄° *
__s
, 
__c
)

77 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


84 *
	`rödex
 (*
__s
, 
__c
)

85 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

86 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

87 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

89 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


90 
__exã∫_Æways_ölöe
 *

91 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


93  
	`__buûtö_rödex
 (
__s
, 
__c
);

96 
__exã∫_Æways_ölöe
 const *

97 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


99  
	`__buûtö_rödex
 (
__s
, 
__c
);

102 
	}
}

104 *
	$rödex
 (c⁄° *
__s
, 
__c
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


112 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
;

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
;

123 #ifdef 
__USE_XOPEN2K8


127 
	~<xloˇÀ.h
>

131 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__loc
)

132 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

134 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

135 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

136 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

139 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_BSD


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_BSD


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_BSD


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_BSD


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_BSD


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_BSD
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_BSD


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/include/arpa/nameser_compat.h

34 #i‚de‡
_ARPA_NAMESER_COMPAT_


35 
	#_ARPA_NAMESER_COMPAT_


	)

37 
	#__BIND
 19950621

	)

39 
	~<ídün.h
>

49 
	mid
 :16;

50 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


52 
	mqr
: 1;

53 
	m›code
: 4;

54 
	mØ
: 1;

55 
	mtc
: 1;

56 
	mrd
: 1;

58 
	mø
: 1;

59 
	munu£d
 :1;

60 
	mad
: 1;

61 
	mcd
: 1;

62 
	mrcode
 :4;

64 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN
 || BYTE_ORDER =
PDP_ENDIAN


66 
	mrd
 :1;

67 
	mtc
 :1;

68 
	mØ
 :1;

69 
	m›code
 :4;

70 
	mqr
 :1;

72 
	mrcode
 :4;

73 
	mcd
: 1;

74 
	mad
: 1;

75 
	munu£d
 :1;

76 
	mø
 :1;

79 
	mqdcou¡
 :16;

80 
	m™cou¡
 :16;

81 
	mnscou¡
 :16;

82 
	m¨cou¡
 :16;

83 } 
	tHEADER
;

85 
	#PACKETSZ
 
NS_PACKETSZ


	)

86 
	#MAXDNAME
 
NS_MAXDNAME


	)

87 
	#MAXCDNAME
 
NS_MAXCDNAME


	)

88 
	#MAXLABEL
 
NS_MAXLABEL


	)

89 
	#HFIXEDSZ
 
NS_HFIXEDSZ


	)

90 
	#QFIXEDSZ
 
NS_QFIXEDSZ


	)

91 
	#RRFIXEDSZ
 
NS_RRFIXEDSZ


	)

92 
	#INT32SZ
 
NS_INT32SZ


	)

93 
	#INT16SZ
 
NS_INT16SZ


	)

94 
	#INT8SZ
 
NS_INT8SZ


	)

95 
	#INADDRSZ
 
NS_INADDRSZ


	)

96 
	#IN6ADDRSZ
 
NS_IN6ADDRSZ


	)

97 
	#INDIR_MASK
 
NS_CMPRSFLGS


	)

98 
	#NAMESERVER_PORT
 
NS_DEFAULTPORT


	)

100 
	#S_ZONE
 
ns_s_zn


	)

101 
	#S_PREREQ
 
ns_s_¥


	)

102 
	#S_UPDATE
 
ns_s_ud


	)

103 
	#S_ADDT
 
ns_s_¨


	)

105 
	#QUERY
 
ns_o_quîy


	)

106 
	#IQUERY
 
ns_o_iquîy


	)

107 
	#STATUS
 
ns_o_°©us


	)

108 
	#NS_NOTIFY_OP
 
ns_o_nŸify


	)

109 
	#NS_UPDATE_OP
 
ns_o_upd©e


	)

111 
	#NOERROR
 
ns_r_n€º‹


	)

112 
	#FORMERR
 
ns_r_f‹mîr


	)

113 
	#SERVFAIL
 
ns_r_£rvÁû


	)

114 
	#NXDOMAIN
 
ns_r_nxdomaö


	)

115 
	#NOTIMP
 
ns_r_nŸim∂


	)

116 
	#REFUSED
 
ns_r_ªfu£d


	)

117 
	#YXDOMAIN
 
ns_r_yxdomaö


	)

118 
	#YXRRSET
 
ns_r_yxº£t


	)

119 
	#NXRRSET
 
ns_r_nxº£t


	)

120 
	#NOTAUTH
 
ns_r_nŸauth


	)

121 
	#NOTZONE
 
ns_r_nŸz⁄e


	)

127 
	#DELETE
 
ns_u›_dñëe


	)

128 
	#ADD
 
ns_u›_add


	)

130 
	#T_A
 
ns_t_a


	)

131 
	#T_NS
 
ns_t_ns


	)

132 
	#T_MD
 
ns_t_md


	)

133 
	#T_MF
 
ns_t_mf


	)

134 
	#T_CNAME
 
ns_t_˙ame


	)

135 
	#T_SOA
 
ns_t_sﬂ


	)

136 
	#T_MB
 
ns_t_mb


	)

137 
	#T_MG
 
ns_t_mg


	)

138 
	#T_MR
 
ns_t_mr


	)

139 
	#T_NULL
 
ns_t_nuŒ


	)

140 
	#T_WKS
 
ns_t_wks


	)

141 
	#T_PTR
 
ns_t_±r


	)

142 
	#T_HINFO
 
ns_t_höfo


	)

143 
	#T_MINFO
 
ns_t_möfo


	)

144 
	#T_MX
 
ns_t_mx


	)

145 
	#T_TXT
 
ns_t_txt


	)

146 
	#T_RP
 
ns_t_Ω


	)

147 
	#T_AFSDB
 
ns_t_afsdb


	)

148 
	#T_X25
 
ns_t_x25


	)

149 
	#T_ISDN
 
ns_t_isdn


	)

150 
	#T_RT
 
ns_t_π


	)

151 
	#T_NSAP
 
ns_t_nßp


	)

152 
	#T_NSAP_PTR
 
ns_t_nßp_±r


	)

153 
	#T_SIG
 
ns_t_sig


	)

154 
	#T_KEY
 
ns_t_key


	)

155 
	#T_PX
 
ns_t_px


	)

156 
	#T_GPOS
 
ns_t_gpos


	)

157 
	#T_AAAA
 
ns_t_ØØ


	)

158 
	#T_LOC
 
ns_t_loc


	)

159 
	#T_NXT
 
ns_t_nxt


	)

160 
	#T_EID
 
ns_t_eid


	)

161 
	#T_NIMLOC
 
ns_t_nimloc


	)

162 
	#T_SRV
 
ns_t_§v


	)

163 
	#T_ATMA
 
ns_t_©ma


	)

164 
	#T_NAPTR
 
ns_t_«±r


	)

165 
	#T_A6
 
ns_t_a6


	)

166 
	#T_DNAME
 
ns_t_d«me


	)

167 
	#T_TSIG
 
ns_t_tsig


	)

168 
	#T_IXFR
 
ns_t_ix‰


	)

169 
	#T_AXFR
 
ns_t_ax‰


	)

170 
	#T_MAILB
 
ns_t_maûb


	)

171 
	#T_MAILA
 
ns_t_maûa


	)

172 
	#T_ANY
 
ns_t_™y


	)

174 
	#C_IN
 
ns_c_ö


	)

175 
	#C_CHAOS
 
ns_c_chaos


	)

176 
	#C_HS
 
ns_c_hs


	)

178 
	#C_NONE
 
ns_c_n⁄e


	)

179 
	#C_ANY
 
ns_c_™y


	)

181 
	#GETSHORT
 
NS_GET16


	)

182 
	#GETLONG
 
NS_GET32


	)

183 
	#PUTSHORT
 
NS_PUT16


	)

184 
	#PUTLONG
 
NS_PUT32


	)

	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/linux/atmapi.h

6 #i‚de‡
_LINUX_ATMAPI_H


7 
	#_LINUX_ATMAPI_H


	)

9 #i‡
deföed
(
__•¨c__
Ë|| deföed(
__ü64__
)

12 
	#__ATM_API_ALIGN
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

14 
	#__ATM_API_ALIGN


	)

27 °ru˘ { 
	m_
[8]; } 
	t__ATM_API_ALIGN
 
	t©m_k±r_t
;

	@/usr/include/linux/atmioc.h

12 #i‚de‡
_LINUX_ATMIOC_H


13 
	#_LINUX_ATMIOC_H


	)

15 
	~<asm/io˘l.h
>

18 
	#ATMIOC_PHYCOM
 0x00

	)

19 
	#ATMIOC_PHYCOM_END
 0x0f

	)

20 
	#ATMIOC_PHYTYP
 0x10

	)

21 
	#ATMIOC_PHYTYP_END
 0x2f

	)

22 
	#ATMIOC_PHYPRV
 0x30

	)

23 
	#ATMIOC_PHYPRV_END
 0x4f

	)

24 
	#ATMIOC_SARCOM
 0x50

	)

25 
	#ATMIOC_SARCOM_END
 0x50

	)

26 
	#ATMIOC_SARPRV
 0x60

	)

27 
	#ATMIOC_SARPRV_END
 0x7f

	)

28 
	#ATMIOC_ITF
 0x80

	)

29 
	#ATMIOC_ITF_END
 0x8f

	)

30 
	#ATMIOC_BACKEND
 0x90

	)

31 
	#ATMIOC_BACKEND_END
 0xaf

	)

33 
	#ATMIOC_AREQUIPA
 0xc0

	)

34 
	#ATMIOC_LANE
 0xd0

	)

35 
	#ATMIOC_MPOA
 0xd8

	)

36 
	#ATMIOC_CLIP
 0xe0

	)

37 
	#ATMIOC_CLIP_END
 0xef

	)

38 
	#ATMIOC_SPECIAL
 0xf0

	)

39 
	#ATMIOC_SPECIAL_END
 0xff

	)

	@/usr/include/linux/atmsap.h

6 #i‚de‡
_LINUX_ATMSAP_H


7 
	#_LINUX_ATMSAP_H


	)

9 
	~<löux/©m≠i.h
>

22 
	#ATM_L2_NONE
 0

	)

23 
	#ATM_L2_ISO1745
 0x01

	)

24 
	#ATM_L2_Q291
 0x02

	)

25 
	#ATM_L2_X25_LL
 0x06

	)

26 
	#ATM_L2_X25_ML
 0x07

	)

27 
	#ATM_L2_LAPB
 0x08

	)

28 
	#ATM_L2_HDLC_ARM
 0x09

	)

29 
	#ATM_L2_HDLC_NRM
 0x0®

	)

30 
	#ATM_L2_HDLC_ABM
 0x0b

	)

31 
	#ATM_L2_ISO8802
 0x0¯

	)

32 
	#ATM_L2_X75
 0x0d

	)

33 
	#ATM_L2_Q922
 0x0ê

	)

34 
	#ATM_L2_USER
 0x10

	)

35 
	#ATM_L2_ISO7776
 0x11

	)

44 
	#ATM_L3_NONE
 0

	)

45 
	#ATM_L3_X25
 0x06

	)

46 
	#ATM_L3_ISO8208
 0x07

	)

47 
	#ATM_L3_X223
 0x08

	)

48 
	#ATM_L3_ISO8473
 0x09

	)

49 
	#ATM_L3_T70
 0x0®

	)

50 
	#ATM_L3_TR9577
 0x0b

	)

51 
	#ATM_L3_H310
 0x0¯

	)

52 
	#ATM_L3_H321
 0x0d

	)

53 
	#ATM_L3_USER
 0x10

	)

62 
	#ATM_HL_NONE
 0

	)

63 
	#ATM_HL_ISO
 0x01

	)

64 
	#ATM_HL_USER
 0x02

	)

65 
	#ATM_HL_HLP
 0x03

	)

66 
	#ATM_HL_VENDOR
 0x04

	)

75 
	#ATM_IMD_NONE
 0

	)

76 
	#ATM_IMD_NORMAL
 1

	)

77 
	#ATM_IMD_EXTENDED
 2

	)

84 
	#ATM_TT_NONE
 0

	)

85 
	#ATM_TT_RX
 1

	)

86 
	#ATM_TT_TX
 2

	)

87 
	#ATM_TT_RXTX
 3

	)

89 
	#ATM_MC_NONE
 0

	)

90 
	#ATM_MC_TS
 1

	)

91 
	#ATM_MC_TS_FEC
 2

	)

92 
	#ATM_MC_PS
 3

	)

93 
	#ATM_MC_PS_FEC
 4

	)

94 
	#ATM_MC_H221
 5

	)

100 
	#ATM_MAX_HLI
 8

	)

103 
	s©m_bŒi
 {

104 
	ml2_¥Ÿo
;

107 
	mmode
;

109 
	mwödow
;

110 } 
	môu
;

111 
	mu£r
;

112 } 
	ml2
;

113 
	ml3_¥Ÿo
;

116 
	mmode
;

118 
	mdef_size
;

120 
	mwödow
;

121 } 
	môu
;

122 
	mu£r
;

124 
	mãrm_ty≥
;

125 
	mfw_mpx_ˇp
;

127 
	mbw_mpx_ˇp
;

129 } 
	mh310
;

131 
	mùi
;

132 
	m¢≠
[5];

134 } 
	må9577
;

135 } 
	ml3
;

136 } 
	g__ATM_API_ALIGN
;

139 
	s©m_bhli
 {

140 
	mhl_ty≥
;

141 
	mhl_Àngth
;

143 
	mhl_öfo
[
ATM_MAX_HLI
];

147 
	#ATM_MAX_BLLI
 3

	)

150 
	s©m_ßp
 {

151 
©m_bhli
 
	mbhli
;

152 
©m_bŒi
 
	mbŒi
[
ATM_MAX_BLLI
] 
	m__ATM_API_ALIGN
;

157 
__ölöe__
 
	$bŒi_ö_u£
(
©m_bŒi
 
bŒi
)

159  
bŒi
.
l2_¥Ÿo
 || bŒi.
l3_¥Ÿo
;

160 
	}
}

	@/usr/include/linux/hdlc/ioctl.h

1 #i‚de‡
__HDLC_IOCTL_H__


2 
	#__HDLC_IOCTL_H__


	)

5 
	#GENERIC_HDLC_VERSION
 4

	)

7 
	#CLOCK_DEFAULT
 0

	)

8 
	#CLOCK_EXT
 1

	)

9 
	#CLOCK_INT
 2

	)

10 
	#CLOCK_TXINT
 3

	)

11 
	#CLOCK_TXFROMRX
 4

	)

14 
	#ENCODING_DEFAULT
 0

	)

15 
	#ENCODING_NRZ
 1

	)

16 
	#ENCODING_NRZI
 2

	)

17 
	#ENCODING_FM_MARK
 3

	)

18 
	#ENCODING_FM_SPACE
 4

	)

19 
	#ENCODING_MANCHESTER
 5

	)

22 
	#PARITY_DEFAULT
 0

	)

23 
	#PARITY_NONE
 1

	)

24 
	#PARITY_CRC16_PR0
 2

	)

25 
	#PARITY_CRC16_PR1
 3

	)

26 
	#PARITY_CRC16_PR0_CCITT
 4

	)

27 
	#PARITY_CRC16_PR1_CCITT
 5

	)

28 
	#PARITY_CRC32_PR0_CCITT
 6

	)

29 
	#PARITY_CRC32_PR1_CCITT
 7

	)

31 
	#LMI_DEFAULT
 0

	)

32 
	#LMI_NONE
 1

	)

33 
	#LMI_ANSI
 2

	)

34 
	#LMI_CCITT
 3

	)

35 
	#LMI_CISCO
 4

	)

37 #i‚de‡
__ASSEMBLY__


40 
	m˛ock_øã
;

41 
	m˛ock_ty≥
;

42 
	mlo›back
;

43 } 
	tsync_£rül_£âögs
;

46 
	m˛ock_øã
;

47 
	m˛ock_ty≥
;

48 
	mlo›back
;

49 
	m¶Ÿ_m≠
;

50 } 
	tã1_£âögs
;

53 
	mícodög
;

54 
	m∑rôy
;

55 } 
	tøw_hdlc_¥Ÿo
;

58 
	mt391
;

59 
	mt392
;

60 
	mn391
;

61 
	mn392
;

62 
	mn393
;

63 
	mlmi
;

64 
	md˚
;

65 } 
	t‰_¥Ÿo
;

68 
	mdlci
;

69 } 
	t‰_¥Ÿo_pvc
;

72 
	mdlci
;

73 
	mma°î
[
IFNAMSIZ
];

74 }
	t‰_¥Ÿo_pvc_öfo
;

77 
	möãrvÆ
;

78 
	mtimeout
;

79 } 
	tcisco_¥Ÿo
;

	@/usr/include/linux/if_packet.h

1 #i‚de‡
__LINUX_IF_PACKET_H


2 
	#__LINUX_IF_PACKET_H


	)

4 
	~<löux/ty≥s.h
>

6 
	ssockaddr_pkt
 {

7 
	m•kt_Ámûy
;

8 
	m•kt_devi˚
[14];

9 
__be16
 
	m•kt_¥Ÿocﬁ
;

12 
	ssockaddr_Œ
 {

13 
	m¶l_Ámûy
;

14 
__be16
 
	m¶l_¥Ÿocﬁ
;

15 
	m¶l_ifödex
;

16 
	m¶l_h©y≥
;

17 
	m¶l_pkây≥
;

18 
	m¶l_hÆí
;

19 
	m¶l_addr
[8];

24 
	#PACKET_HOST
 0

	)

25 
	#PACKET_BROADCAST
 1

	)

26 
	#PACKET_MULTICAST
 2

	)

27 
	#PACKET_OTHERHOST
 3

	)

28 
	#PACKET_OUTGOING
 4

	)

29 
	#PACKET_LOOPBACK
 5

	)

30 
	#PACKET_USER
 6

	)

31 
	#PACKET_KERNEL
 7

	)

33 
	#PACKET_FASTROUTE
 6

	)

37 
	#PACKET_ADD_MEMBERSHIP
 1

	)

38 
	#PACKET_DROP_MEMBERSHIP
 2

	)

39 
	#PACKET_RECV_OUTPUT
 3

	)

41 
	#PACKET_RX_RING
 5

	)

42 
	#PACKET_STATISTICS
 6

	)

43 
	#PACKET_COPY_THRESH
 7

	)

44 
	#PACKET_AUXDATA
 8

	)

45 
	#PACKET_ORIGDEV
 9

	)

46 
	#PACKET_VERSION
 10

	)

47 
	#PACKET_HDRLEN
 11

	)

48 
	#PACKET_RESERVE
 12

	)

49 
	#PACKET_TX_RING
 13

	)

50 
	#PACKET_LOSS
 14

	)

51 
	#PACKET_VNET_HDR
 15

	)

52 
	#PACKET_TX_TIMESTAMP
 16

	)

53 
	#PACKET_TIMESTAMP
 17

	)

54 
	#PACKET_FANOUT
 18

	)

55 
	#PACKET_TX_HAS_OFF
 19

	)

56 
	#PACKET_QDISC_BYPASS
 20

	)

57 
	#PACKET_ROLLOVER_STATS
 21

	)

58 
	#PACKET_FANOUT_DATA
 22

	)

60 
	#PACKET_FANOUT_HASH
 0

	)

61 
	#PACKET_FANOUT_LB
 1

	)

62 
	#PACKET_FANOUT_CPU
 2

	)

63 
	#PACKET_FANOUT_ROLLOVER
 3

	)

64 
	#PACKET_FANOUT_RND
 4

	)

65 
	#PACKET_FANOUT_QM
 5

	)

66 
	#PACKET_FANOUT_CBPF
 6

	)

67 
	#PACKET_FANOUT_EBPF
 7

	)

68 
	#PACKET_FANOUT_FLAG_ROLLOVER
 0x1000

	)

69 
	#PACKET_FANOUT_FLAG_DEFRAG
 0x8000

	)

71 
	sçackë_°©s
 {

72 
	mç_∑ckës
;

73 
	mç_dr›s
;

76 
	sçackë_°©s_v3
 {

77 
	mç_∑ckës
;

78 
	mç_dr›s
;

79 
	mç_‰ìze_q_˙t
;

82 
	sçackë_rﬁlovî_°©s
 {

83 
__Æig√d_u64
 
	mç_Æl
;

84 
__Æig√d_u64
 
	mç_huge
;

85 
__Æig√d_u64
 
	mç_Áûed
;

88 
	uçackë_°©s_u
 {

89 
çackë_°©s
 
	m°©s1
;

90 
çackë_°©s_v3
 
	m°©s3
;

93 
	sçackë_auxd©a
 {

94 
__u32
 
	mç_°©us
;

95 
__u32
 
	mç_Àn
;

96 
__u32
 
	mç_¢≠Àn
;

97 
__u16
 
	mç_mac
;

98 
__u16
 
	mç_√t
;

99 
__u16
 
	mç_vœn_tci
;

100 
__u16
 
	mç_vœn_çid
;

104 
	#TP_STATUS_KERNEL
 0

	)

105 
	#TP_STATUS_USER
 (1 << 0)

	)

106 
	#TP_STATUS_COPY
 (1 << 1)

	)

107 
	#TP_STATUS_LOSING
 (1 << 2)

	)

108 
	#TP_STATUS_CSUMNOTREADY
 (1 << 3)

	)

109 
	#TP_STATUS_VLAN_VALID
 (1 << 4Ë

	)

110 
	#TP_STATUS_BLK_TMO
 (1 << 5)

	)

111 
	#TP_STATUS_VLAN_TPID_VALID
 (1 << 6Ë

	)

112 
	#TP_STATUS_CSUM_VALID
 (1 << 7)

	)

115 
	#TP_STATUS_AVAILABLE
 0

	)

116 
	#TP_STATUS_SEND_REQUEST
 (1 << 0)

	)

117 
	#TP_STATUS_SENDING
 (1 << 1)

	)

118 
	#TP_STATUS_WRONG_FORMAT
 (1 << 2)

	)

121 
	#TP_STATUS_TS_SOFTWARE
 (1 << 29)

	)

122 
	#TP_STATUS_TS_SYS_HARDWARE
 (1 << 30Ë

	)

123 
	#TP_STATUS_TS_RAW_HARDWARE
 (1 << 31)

	)

126 
	#TP_FT_REQ_FILL_RXHASH
 0x1

	)

128 
	sçackë_hdr
 {

129 
	mç_°©us
;

130 
	mç_Àn
;

131 
	mç_¢≠Àn
;

132 
	mç_mac
;

133 
	mç_√t
;

134 
	mç_£c
;

135 
	mç_u£c
;

138 
	#TPACKET_ALIGNMENT
 16

	)

139 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

140 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

142 
	sçackë2_hdr
 {

143 
__u32
 
	mç_°©us
;

144 
__u32
 
	mç_Àn
;

145 
__u32
 
	mç_¢≠Àn
;

146 
__u16
 
	mç_mac
;

147 
__u16
 
	mç_√t
;

148 
__u32
 
	mç_£c
;

149 
__u32
 
	mç_n£c
;

150 
__u16
 
	mç_vœn_tci
;

151 
__u16
 
	mç_vœn_çid
;

152 
__u8
 
	mç_∑ddög
[4];

155 
	sçackë_hdr_v¨ü¡1
 {

156 
__u32
 
	mç_rxhash
;

157 
__u32
 
	mç_vœn_tci
;

158 
__u16
 
	mç_vœn_çid
;

159 
__u16
 
	mç_∑ddög
;

162 
	sçackë3_hdr
 {

163 
__u32
 
	mç_√xt_off£t
;

164 
__u32
 
	mç_£c
;

165 
__u32
 
	mç_n£c
;

166 
__u32
 
	mç_¢≠Àn
;

167 
__u32
 
	mç_Àn
;

168 
__u32
 
	mç_°©us
;

169 
__u16
 
	mç_mac
;

170 
__u16
 
	mç_√t
;

173 
çackë_hdr_v¨ü¡1
 
	mhv1
;

175 
__u8
 
	mç_∑ddög
[8];

178 
	sçackë_bd_ts
 {

179 
	mts_£c
;

181 
	mts_u£c
;

182 
	mts_n£c
;

186 
	sçackë_hdr_v1
 {

187 
__u32
 
	mblock_°©us
;

188 
__u32
 
	mnum_pkts
;

189 
__u32
 
	moff£t_to_fú°_pkt
;

194 
__u32
 
	mblk_Àn
;

205 
__Æig√d_u64
 
	m£q_num
;

232 
çackë_bd_ts
 
	mts_fú°_pkt
, 
	mts_œ°_pkt
;

235 
	uçackë_bd_hódî_u
 {

236 
çackë_hdr_v1
 
	mbh1
;

239 
	sçackë_block_desc
 {

240 
__u32
 
	mvîsi⁄
;

241 
__u32
 
	moff£t_to_¥iv
;

242 
çackë_bd_hódî_u
 
	mhdr
;

245 
	#TPACKET2_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë2_hdr
)Ë+ (
sockaddr_Œ
))

	)

246 
	#TPACKET3_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë3_hdr
)Ë+ (
sockaddr_Œ
))

	)

248 
	eçackë_vîsi⁄s
 {

249 
	mTPACKET_V1
,

250 
	mTPACKET_V2
,

251 
	mTPACKET_V3


267 
	sçackë_ªq
 {

268 
	mç_block_size
;

269 
	mç_block_ƒ
;

270 
	mç_‰ame_size
;

271 
	mç_‰ame_ƒ
;

274 
	sçackë_ªq3
 {

275 
	mç_block_size
;

276 
	mç_block_ƒ
;

277 
	mç_‰ame_size
;

278 
	mç_‰ame_ƒ
;

279 
	mç_ªtúe_blk_tov
;

280 
	mç_sizeof_¥iv
;

281 
	mç_„©uª_ªq_w‹d
;

284 
	uçackë_ªq_u
 {

285 
çackë_ªq
 
	mªq
;

286 
çackë_ªq3
 
	mªq3
;

289 
	s∑ckë_mªq
 {

290 
	mmr_ifödex
;

291 
	mmr_ty≥
;

292 
	mmr_Æí
;

293 
	mmr_addªss
[8];

296 
	#PACKET_MR_MULTICAST
 0

	)

297 
	#PACKET_MR_PROMISC
 1

	)

298 
	#PACKET_MR_ALLMULTI
 2

	)

299 
	#PACKET_MR_UNICAST
 3

	)

	@/usr/include/linux/in.h

18 #i‚de‡
_LINUX_IN_H


19 
	#_LINUX_IN_H


	)

21 
	~<löux/ty≥s.h
>

22 
	~<löux/libc-com∑t.h
>

23 
	~<löux/sockë.h
>

25 #i‡
__UAPI_DEF_IN_IPPROTO


28 
	mIPPROTO_IP
 = 0,

29 
	#IPPROTO_IP
 
IPPROTO_IP


	)

30 
	mIPPROTO_ICMP
 = 1,

31 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

32 
	mIPPROTO_IGMP
 = 2,

33 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

34 
	mIPPROTO_IPIP
 = 4,

35 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

36 
	mIPPROTO_TCP
 = 6,

37 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

38 
	mIPPROTO_EGP
 = 8,

39 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

40 
	mIPPROTO_PUP
 = 12,

41 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

42 
	mIPPROTO_UDP
 = 17,

43 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

44 
	mIPPROTO_IDP
 = 22,

45 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

46 
	mIPPROTO_TP
 = 29,

47 
	#IPPROTO_TP
 
IPPROTO_TP


	)

48 
	mIPPROTO_DCCP
 = 33,

49 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

50 
	mIPPROTO_IPV6
 = 41,

51 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

52 
	mIPPROTO_RSVP
 = 46,

53 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

54 
	mIPPROTO_GRE
 = 47,

55 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

56 
	mIPPROTO_ESP
 = 50,

57 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

58 
	mIPPROTO_AH
 = 51,

59 
	#IPPROTO_AH
 
IPPROTO_AH


	)

60 
	mIPPROTO_MTP
 = 92,

61 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

62 
	mIPPROTO_BEETPH
 = 94,

63 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

64 
	mIPPROTO_ENCAP
 = 98,

65 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

66 
	mIPPROTO_PIM
 = 103,

67 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

68 
	mIPPROTO_COMP
 = 108,

69 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

70 
	mIPPROTO_SCTP
 = 132,

71 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

72 
	mIPPROTO_UDPLITE
 = 136,

73 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

74 
	mIPPROTO_MPLS
 = 137,

75 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

76 
	mIPPROTO_RAW
 = 255,

77 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

78 
	mIPPROTO_MAX


82 #i‡
__UAPI_DEF_IN_ADDR


84 
	sö_addr
 {

85 
__be32
 
	ms_addr
;

89 
	#IP_TOS
 1

	)

90 
	#IP_TTL
 2

	)

91 
	#IP_HDRINCL
 3

	)

92 
	#IP_OPTIONS
 4

	)

93 
	#IP_ROUTER_ALERT
 5

	)

94 
	#IP_RECVOPTS
 6

	)

95 
	#IP_RETOPTS
 7

	)

96 
	#IP_PKTINFO
 8

	)

97 
	#IP_PKTOPTIONS
 9

	)

98 
	#IP_MTU_DISCOVER
 10

	)

99 
	#IP_RECVERR
 11

	)

100 
	#IP_RECVTTL
 12

	)

101 
	#IP_RECVTOS
 13

	)

102 
	#IP_MTU
 14

	)

103 
	#IP_FREEBIND
 15

	)

104 
	#IP_IPSEC_POLICY
 16

	)

105 
	#IP_XFRM_POLICY
 17

	)

106 
	#IP_PASSSEC
 18

	)

107 
	#IP_TRANSPARENT
 19

	)

110 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

113 
	#IP_ORIGDSTADDR
 20

	)

114 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

116 
	#IP_MINTTL
 21

	)

117 
	#IP_NODEFRAG
 22

	)

118 
	#IP_CHECKSUM
 23

	)

119 
	#IP_BIND_ADDRESS_NO_PORT
 24

	)

122 
	#IP_PMTUDISC_DONT
 0

	)

123 
	#IP_PMTUDISC_WANT
 1

	)

124 
	#IP_PMTUDISC_DO
 2

	)

125 
	#IP_PMTUDISC_PROBE
 3

	)

130 
	#IP_PMTUDISC_INTERFACE
 4

	)

134 
	#IP_PMTUDISC_OMIT
 5

	)

136 
	#IP_MULTICAST_IF
 32

	)

137 
	#IP_MULTICAST_TTL
 33

	)

138 
	#IP_MULTICAST_LOOP
 34

	)

139 
	#IP_ADD_MEMBERSHIP
 35

	)

140 
	#IP_DROP_MEMBERSHIP
 36

	)

141 
	#IP_UNBLOCK_SOURCE
 37

	)

142 
	#IP_BLOCK_SOURCE
 38

	)

143 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

144 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

145 
	#IP_MSFILTER
 41

	)

146 
	#MCAST_JOIN_GROUP
 42

	)

147 
	#MCAST_BLOCK_SOURCE
 43

	)

148 
	#MCAST_UNBLOCK_SOURCE
 44

	)

149 
	#MCAST_LEAVE_GROUP
 45

	)

150 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

151 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

152 
	#MCAST_MSFILTER
 48

	)

153 
	#IP_MULTICAST_ALL
 49

	)

154 
	#IP_UNICAST_IF
 50

	)

156 
	#MCAST_EXCLUDE
 0

	)

157 
	#MCAST_INCLUDE
 1

	)

160 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

161 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

165 #i‡
__UAPI_DEF_IP_MREQ


166 
	sù_mªq
 {

167 
ö_addr
 
	mimr_mu…üddr
;

168 
ö_addr
 
	mimr_öãrÁ˚
;

171 
	sù_mªqn
 {

172 
ö_addr
 
	mimr_mu…üddr
;

173 
ö_addr
 
	mimr_addªss
;

174 
	mimr_ifödex
;

177 
	sù_mªq_sour˚
 {

178 
__be32
 
	mimr_mu…üddr
;

179 
__be32
 
	mimr_öãrÁ˚
;

180 
__be32
 
	mimr_sour˚addr
;

183 
	sù_msfûãr
 {

184 
__be32
 
	mimsf_mu…üddr
;

185 
__be32
 
	mimsf_öãrÁ˚
;

186 
__u32
 
	mimsf_fmode
;

187 
__u32
 
	mimsf_num§c
;

188 
__be32
 
	mimsf_¶i°
[1];

191 
	#IP_MSFILTER_SIZE
(
num§c
) \

192 ((
ù_msfûãr
Ë- (
__u32
) \

193 + (
num§c
Ë* (
__u32
))

	)

195 
	sgroup_ªq
 {

196 
__u32
 
	mgr_öãrÁ˚
;

197 
__kî√l_sockaddr_°‹age
 
	mgr_group
;

200 
	sgroup_sour˚_ªq
 {

201 
__u32
 
	mg§_öãrÁ˚
;

202 
__kî√l_sockaddr_°‹age
 
	mg§_group
;

203 
__kî√l_sockaddr_°‹age
 
	mg§_sour˚
;

206 
	sgroup_fûãr
 {

207 
__u32
 
	mgf_öãrÁ˚
;

208 
__kî√l_sockaddr_°‹age
 
	mgf_group
;

209 
__u32
 
	mgf_fmode
;

210 
__u32
 
	mgf_num§c
;

211 
__kî√l_sockaddr_°‹age
 
	mgf_¶i°
[1];

214 
	#GROUP_FILTER_SIZE
(
num§c
) \

215 ((
group_fûãr
Ë- (
__kî√l_sockaddr_°‹age
) \

216 + (
num§c
Ë* (
__kî√l_sockaddr_°‹age
))

	)

219 #i‡
__UAPI_DEF_IN_PKTINFO


220 
	sö_pktöfo
 {

221 
	mùi_ifödex
;

222 
ö_addr
 
	mùi_•ec_d°
;

223 
ö_addr
 
	mùi_addr
;

228 #i‡ 
__UAPI_DEF_SOCKADDR_IN


229 
	#__SOCK_SIZE__
 16

	)

230 
	ssockaddr_ö
 {

231 
__kî√l_ß_Ámûy_t
 
	msö_Ámûy
;

232 
__be16
 
	msö_p‹t
;

233 
ö_addr
 
	msö_addr
;

236 
	m__∑d
[
__SOCK_SIZE__
 - () -

237 (Ë- (
ö_addr
)];

239 
	#sö_zîo
 
__∑d


	)

242 #i‡
__UAPI_DEF_IN_CLASS


248 
	#IN_CLASSA
(
a
Ë((((Ë◊)Ë& 0x80000000Ë=0)

	)

249 
	#IN_CLASSA_NET
 0xff000000

	)

250 
	#IN_CLASSA_NSHIFT
 24

	)

251 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

252 
	#IN_CLASSA_MAX
 128

	)

254 
	#IN_CLASSB
(
a
Ë((((Ë◊)Ë& 0xc0000000Ë=0x80000000)

	)

255 
	#IN_CLASSB_NET
 0xffff0000

	)

256 
	#IN_CLASSB_NSHIFT
 16

	)

257 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

258 
	#IN_CLASSB_MAX
 65536

	)

260 
	#IN_CLASSC
(
a
Ë((((Ë◊)Ë& 0xe0000000Ë=0xc0000000)

	)

261 
	#IN_CLASSC_NET
 0xffffff00

	)

262 
	#IN_CLASSC_NSHIFT
 8

	)

263 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

265 
	#IN_CLASSD
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xe0000000)

	)

266 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

267 
	#IN_MULTICAST_NET
 0xF0000000

	)

269 
	#IN_EXPERIMENTAL
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xf0000000)

	)

270 
	#IN_BADCLASS
(
a
Ë
	`IN_EXPERIMENTAL
(◊))

	)

273 
	#INADDR_ANY
 ((Ë0x00000000)

	)

276 
	#INADDR_BROADCAST
 ((Ë0xffffffff)

	)

279 
	#INADDR_NONE
 ((Ë0xffffffff)

	)

282 
	#IN_LOOPBACKNET
 127

	)

285 
	#INADDR_LOOPBACK
 0x7f000001

	)

286 
	#IN_LOOPBACK
(
a
Ë((((Ë◊)Ë& 0xff000000Ë=0x7f000000)

	)

289 
	#INADDR_UNSPEC_GROUP
 0xe0000000U

	)

290 
	#INADDR_ALLHOSTS_GROUP
 0xe0000001U

	)

291 
	#INADDR_ALLRTRS_GROUP
 0xe0000002U

	)

292 
	#INADDR_MAX_LOCAL_GROUP
 0xe00000ffU

	)

296 
	~<asm/byã‹dî.h
>

	@/usr/include/linux/in6.h

21 #i‚de‡
_LINUX_IN6_H


22 
	#_LINUX_IN6_H


	)

24 
	~<löux/ty≥s.h
>

25 
	~<löux/libc-com∑t.h
>

31 #i‡
__UAPI_DEF_IN6_ADDR


32 
	sö6_addr
 {

34 
__u8
 
	mu6_addr8
[16];

35 #i‡
__UAPI_DEF_IN6_ADDR_ALT


36 
__be16
 
	mu6_addr16
[8];

37 
__be32
 
	mu6_addr32
[4];

39 } 
	mö6_u
;

40 
	#s6_addr
 
ö6_u
.
u6_addr8


	)

41 #i‡
__UAPI_DEF_IN6_ADDR_ALT


42 
	#s6_addr16
 
ö6_u
.
u6_addr16


	)

43 
	#s6_addr32
 
ö6_u
.
u6_addr32


	)

48 #i‡
__UAPI_DEF_SOCKADDR_IN6


49 
	ssockaddr_ö6
 {

50 
	msö6_Ámûy
;

51 
__be16
 
	msö6_p‹t
;

52 
__be32
 
	msö6_Êowöfo
;

53 
ö6_addr
 
	msö6_addr
;

54 
__u32
 
	msö6_sc›e_id
;

58 #i‡
__UAPI_DEF_IPV6_MREQ


59 
	sùv6_mªq
 {

61 
ö6_addr
 
	mùv6mr_mu…üddr
;

64 
	mùv6mr_ifödex
;

68 
	#ùv6mr_aˇddr
 
ùv6mr_mu…üddr


	)

70 
	sö6_Êowœbñ_ªq
 {

71 
ö6_addr
 
	mÊr_d°
;

72 
__be32
 
	mÊr_œbñ
;

73 
__u8
 
	mÊr_a˘i⁄
;

74 
__u8
 
	mÊr_sh¨e
;

75 
__u16
 
	mÊr_Êags
;

76 
__u16
 
	mÊr_expúes
;

77 
__u16
 
	mÊr_lögî
;

78 
__u32
 
	m__Êr_∑d
;

82 
	#IPV6_FL_A_GET
 0

	)

83 
	#IPV6_FL_A_PUT
 1

	)

84 
	#IPV6_FL_A_RENEW
 2

	)

86 
	#IPV6_FL_F_CREATE
 1

	)

87 
	#IPV6_FL_F_EXCL
 2

	)

88 
	#IPV6_FL_F_REFLECT
 4

	)

89 
	#IPV6_FL_F_REMOTE
 8

	)

91 
	#IPV6_FL_S_NONE
 0

	)

92 
	#IPV6_FL_S_EXCL
 1

	)

93 
	#IPV6_FL_S_PROCESS
 2

	)

94 
	#IPV6_FL_S_USER
 3

	)

95 
	#IPV6_FL_S_ANY
 255

	)

106 
	#IPV6_FLOWINFO_FLOWLABEL
 0x000fffff

	)

107 
	#IPV6_FLOWINFO_PRIORITY
 0x0ff00000

	)

110 
	#IPV6_PRIORITY_UNCHARACTERIZED
 0x0000

	)

111 
	#IPV6_PRIORITY_FILLER
 0x0100

	)

112 
	#IPV6_PRIORITY_UNATTENDED
 0x0200

	)

113 
	#IPV6_PRIORITY_RESERVED1
 0x0300

	)

114 
	#IPV6_PRIORITY_BULK
 0x0400

	)

115 
	#IPV6_PRIORITY_RESERVED2
 0x0500

	)

116 
	#IPV6_PRIORITY_INTERACTIVE
 0x0600

	)

117 
	#IPV6_PRIORITY_CONTROL
 0x0700

	)

118 
	#IPV6_PRIORITY_8
 0x0800

	)

119 
	#IPV6_PRIORITY_9
 0x0900

	)

120 
	#IPV6_PRIORITY_10
 0x0a00

	)

121 
	#IPV6_PRIORITY_11
 0x0b00

	)

122 
	#IPV6_PRIORITY_12
 0x0c00

	)

123 
	#IPV6_PRIORITY_13
 0x0d00

	)

124 
	#IPV6_PRIORITY_14
 0x0e00

	)

125 
	#IPV6_PRIORITY_15
 0x0f00

	)

130 #i‡
__UAPI_DEF_IPPROTO_V6


131 
	#IPPROTO_HOPOPTS
 0

	)

132 
	#IPPROTO_ROUTING
 43

	)

133 
	#IPPROTO_FRAGMENT
 44

	)

134 
	#IPPROTO_ICMPV6
 58

	)

135 
	#IPPROTO_NONE
 59

	)

136 
	#IPPROTO_DSTOPTS
 60

	)

137 
	#IPPROTO_MH
 135

	)

143 
	#IPV6_TLV_PAD1
 0

	)

144 
	#IPV6_TLV_PADN
 1

	)

145 
	#IPV6_TLV_ROUTERALERT
 5

	)

146 
	#IPV6_TLV_JUMBO
 194

	)

147 
	#IPV6_TLV_HAO
 201

	)

152 #i‡
__UAPI_DEF_IPV6_OPTIONS


153 
	#IPV6_ADDRFORM
 1

	)

154 
	#IPV6_2292PKTINFO
 2

	)

155 
	#IPV6_2292HOPOPTS
 3

	)

156 
	#IPV6_2292DSTOPTS
 4

	)

157 
	#IPV6_2292RTHDR
 5

	)

158 
	#IPV6_2292PKTOPTIONS
 6

	)

159 
	#IPV6_CHECKSUM
 7

	)

160 
	#IPV6_2292HOPLIMIT
 8

	)

161 
	#IPV6_NEXTHOP
 9

	)

162 
	#IPV6_AUTHHDR
 10

	)

163 
	#IPV6_FLOWINFO
 11

	)

165 
	#IPV6_UNICAST_HOPS
 16

	)

166 
	#IPV6_MULTICAST_IF
 17

	)

167 
	#IPV6_MULTICAST_HOPS
 18

	)

168 
	#IPV6_MULTICAST_LOOP
 19

	)

169 
	#IPV6_ADD_MEMBERSHIP
 20

	)

170 
	#IPV6_DROP_MEMBERSHIP
 21

	)

171 
	#IPV6_ROUTER_ALERT
 22

	)

172 
	#IPV6_MTU_DISCOVER
 23

	)

173 
	#IPV6_MTU
 24

	)

174 
	#IPV6_RECVERR
 25

	)

175 
	#IPV6_V6ONLY
 26

	)

176 
	#IPV6_JOIN_ANYCAST
 27

	)

177 
	#IPV6_LEAVE_ANYCAST
 28

	)

180 
	#IPV6_PMTUDISC_DONT
 0

	)

181 
	#IPV6_PMTUDISC_WANT
 1

	)

182 
	#IPV6_PMTUDISC_DO
 2

	)

183 
	#IPV6_PMTUDISC_PROBE
 3

	)

187 
	#IPV6_PMTUDISC_INTERFACE
 4

	)

191 
	#IPV6_PMTUDISC_OMIT
 5

	)

194 
	#IPV6_FLOWLABEL_MGR
 32

	)

195 
	#IPV6_FLOWINFO_SEND
 33

	)

197 
	#IPV6_IPSEC_POLICY
 34

	)

198 
	#IPV6_XFRM_POLICY
 35

	)

220 
	#IPV6_RECVPKTINFO
 49

	)

221 
	#IPV6_PKTINFO
 50

	)

222 
	#IPV6_RECVHOPLIMIT
 51

	)

223 
	#IPV6_HOPLIMIT
 52

	)

224 
	#IPV6_RECVHOPOPTS
 53

	)

225 
	#IPV6_HOPOPTS
 54

	)

226 
	#IPV6_RTHDRDSTOPTS
 55

	)

227 
	#IPV6_RECVRTHDR
 56

	)

228 
	#IPV6_RTHDR
 57

	)

229 
	#IPV6_RECVDSTOPTS
 58

	)

230 
	#IPV6_DSTOPTS
 59

	)

231 
	#IPV6_RECVPATHMTU
 60

	)

232 
	#IPV6_PATHMTU
 61

	)

233 
	#IPV6_DONTFRAG
 62

	)

235 
	#IPV6_USE_MIN_MTU
 63

	)

251 
	#IPV6_RECVTCLASS
 66

	)

252 
	#IPV6_TCLASS
 67

	)

265 
	#IPV6_AUTOFLOWLABEL
 70

	)

267 
	#IPV6_ADDR_PREFERENCES
 72

	)

269 
	#IPV6_PREFER_SRC_TMP
 0x0001

	)

270 
	#IPV6_PREFER_SRC_PUBLIC
 0x0002

	)

271 
	#IPV6_PREFER_SRC_PUBTMP_DEFAULT
 0x0100

	)

272 
	#IPV6_PREFER_SRC_COA
 0x0004

	)

273 
	#IPV6_PREFER_SRC_HOME
 0x0400

	)

274 
	#IPV6_PREFER_SRC_CGA
 0x0008

	)

275 
	#IPV6_PREFER_SRC_NONCGA
 0x0800

	)

278 
	#IPV6_MINHOPCOUNT
 73

	)

280 
	#IPV6_ORIGDSTADDR
 74

	)

281 
	#IPV6_RECVORIGDSTADDR
 
IPV6_ORIGDSTADDR


	)

282 
	#IPV6_TRANSPARENT
 75

	)

283 
	#IPV6_UNICAST_IF
 76

	)

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

	@/usr/include/linux/libc-compat.h

48 #i‚de‡
_LIBC_COMPAT_H


49 
	#_LIBC_COMPAT_H


	)

52 #i‡
deföed
(
__GLIBC__
)

55 #i‡
deföed
(
_NET_IF_H
Ë&& deföed(
__USE_MISC
)

60 
	#__UAPI_DEF_IF_IFCONF
 0

	)

61 
	#__UAPI_DEF_IF_IFMAP
 0

	)

62 
	#__UAPI_DEF_IF_IFNAMSIZ
 0

	)

63 
	#__UAPI_DEF_IF_IFREQ
 0

	)

65 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 0

	)

67 #i‚de‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


68 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

77 
	#__UAPI_DEF_IF_IFCONF
 1

	)

78 
	#__UAPI_DEF_IF_IFMAP
 1

	)

79 
	#__UAPI_DEF_IF_IFNAMSIZ
 1

	)

80 
	#__UAPI_DEF_IF_IFREQ
 1

	)

82 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 1

	)

84 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

89 #i‡
deföed
(
_NETINET_IN_H
)

93 
	#__UAPI_DEF_IN_ADDR
 0

	)

94 
	#__UAPI_DEF_IN_IPPROTO
 0

	)

95 
	#__UAPI_DEF_IN_PKTINFO
 0

	)

96 
	#__UAPI_DEF_IP_MREQ
 0

	)

97 
	#__UAPI_DEF_SOCKADDR_IN
 0

	)

98 
	#__UAPI_DEF_IN_CLASS
 0

	)

100 
	#__UAPI_DEF_IN6_ADDR
 0

	)

105 #i‡
deföed
(
__USE_MISC
Ë|| deföed (
__USE_GNU
)

106 
	#__UAPI_DEF_IN6_ADDR_ALT
 0

	)

108 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

110 
	#__UAPI_DEF_SOCKADDR_IN6
 0

	)

111 
	#__UAPI_DEF_IPV6_MREQ
 0

	)

112 
	#__UAPI_DEF_IPPROTO_V6
 0

	)

113 
	#__UAPI_DEF_IPV6_OPTIONS
 0

	)

114 
	#__UAPI_DEF_IN6_PKTINFO
 0

	)

115 
	#__UAPI_DEF_IP6_MTUINFO
 0

	)

122 
	#__UAPI_DEF_IN_ADDR
 1

	)

123 
	#__UAPI_DEF_IN_IPPROTO
 1

	)

124 
	#__UAPI_DEF_IN_PKTINFO
 1

	)

125 
	#__UAPI_DEF_IP_MREQ
 1

	)

126 
	#__UAPI_DEF_SOCKADDR_IN
 1

	)

127 
	#__UAPI_DEF_IN_CLASS
 1

	)

129 
	#__UAPI_DEF_IN6_ADDR
 1

	)

132 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

133 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

134 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

135 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

136 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

137 
	#__UAPI_DEF_IN6_PKTINFO
 1

	)

138 
	#__UAPI_DEF_IP6_MTUINFO
 1

	)

143 #i‡
deföed
(
_SYS_XATTR_H
)

144 
	#__UAPI_DEF_XATTR
 0

	)

146 
	#__UAPI_DEF_XATTR
 1

	)

155 
	#__UAPI_DEF_IF_IFCONF
 1

	)

156 
	#__UAPI_DEF_IF_IFMAP
 1

	)

157 
	#__UAPI_DEF_IF_IFNAMSIZ
 1

	)

158 
	#__UAPI_DEF_IF_IFREQ
 1

	)

160 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 1

	)

162 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

165 
	#__UAPI_DEF_IN_ADDR
 1

	)

166 
	#__UAPI_DEF_IN_IPPROTO
 1

	)

167 
	#__UAPI_DEF_IN_PKTINFO
 1

	)

168 
	#__UAPI_DEF_IP_MREQ
 1

	)

169 
	#__UAPI_DEF_SOCKADDR_IN
 1

	)

170 
	#__UAPI_DEF_IN_CLASS
 1

	)

173 
	#__UAPI_DEF_IN6_ADDR
 1

	)

174 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

175 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

176 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

177 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

178 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

179 
	#__UAPI_DEF_IN6_PKTINFO
 1

	)

180 
	#__UAPI_DEF_IP6_MTUINFO
 1

	)

183 
	#__UAPI_DEF_XATTR
 1

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/sysctl.h

22 #i‚de‡
_LINUX_SYSCTL_H


23 
	#_LINUX_SYSCTL_H


	)

25 
	~<löux/kî√l.h
>

26 
	~<löux/ty≥s.h
>

29 
	gcom∂ëi⁄
;

31 
	#CTL_MAXNAME
 10

	)

36 
	s__sys˘l_¨gs
 {

37 *
	m«me
;

38 
	m∆í
;

39 *
	mﬁdvÆ
;

40 
size_t
 *
	mﬁdÀ≈
;

41 *
	m√wvÆ
;

42 
size_t
 
	m√wÀn
;

43 
	m__unu£d
[4];

52 
	mCTL_KERN
=1,

53 
	mCTL_VM
=2,

54 
	mCTL_NET
=3,

55 
	mCTL_PROC
=4,

56 
	mCTL_FS
=5,

57 
	mCTL_DEBUG
=6,

58 
	mCTL_DEV
=7,

59 
	mCTL_BUS
=8,

60 
	mCTL_ABI
=9,

61 
	mCTL_CPU
=10,

62 
	mCTL_ARLAN
=254,

63 
	mCTL_S390DBF
=5677,

64 
	mCTL_SUNRPC
=7249,

65 
	mCTL_PM
=9899,

66 
	mCTL_FRV
=9898,

72 
	mCTL_BUS_ISA
=1

78 
	mINOTIFY_MAX_USER_INSTANCES
=1,

79 
	mINOTIFY_MAX_USER_WATCHES
=2,

80 
	mINOTIFY_MAX_QUEUED_EVENTS
=3

86 
	mKERN_OSTYPE
=1,

87 
	mKERN_OSRELEASE
=2,

88 
	mKERN_OSREV
=3,

89 
	mKERN_VERSION
=4,

90 
	mKERN_SECUREMASK
=5,

91 
	mKERN_PROF
=6,

92 
	mKERN_NODENAME
=7,

93 
	mKERN_DOMAINNAME
=8,

95 
	mKERN_PANIC
=15,

96 
	mKERN_REALROOTDEV
=16,

98 
	mKERN_SPARC_REBOOT
=21,

99 
	mKERN_CTLALTDEL
=22,

100 
	mKERN_PRINTK
=23,

101 
	mKERN_NAMETRANS
=24,

102 
	mKERN_PPC_HTABRECLAIM
=25,

103 
	mKERN_PPC_ZEROPAGED
=26,

104 
	mKERN_PPC_POWERSAVE_NAP
=27,

105 
	mKERN_MODPROBE
=28,

106 
	mKERN_SG_BIG_BUFF
=29,

107 
	mKERN_ACCT
=30,

108 
	mKERN_PPC_L2CR
=31,

110 
	mKERN_RTSIGNR
=32,

111 
	mKERN_RTSIGMAX
=33,

113 
	mKERN_SHMMAX
=34,

114 
	mKERN_MSGMAX
=35,

115 
	mKERN_MSGMNB
=36,

116 
	mKERN_MSGPOOL
=37,

117 
	mKERN_SYSRQ
=38,

118 
	mKERN_MAX_THREADS
=39,

119 
	mKERN_RANDOM
=40,

120 
	mKERN_SHMALL
=41,

121 
	mKERN_MSGMNI
=42,

122 
	mKERN_SEM
=43,

123 
	mKERN_SPARC_STOP_A
=44,

124 
	mKERN_SHMMNI
=45,

125 
	mKERN_OVERFLOWUID
=46,

126 
	mKERN_OVERFLOWGID
=47,

127 
	mKERN_SHMPATH
=48,

128 
	mKERN_HOTPLUG
=49,

129 
	mKERN_IEEE_EMULATION_WARNINGS
=50,

130 
	mKERN_S390_USER_DEBUG_LOGGING
=51,

131 
	mKERN_CORE_USES_PID
=52,

132 
	mKERN_TAINTED
=53,

133 
	mKERN_CADPID
=54,

134 
	mKERN_PIDMAX
=55,

135 
	mKERN_CORE_PATTERN
=56,

136 
	mKERN_PANIC_ON_OOPS
=57,

137 
	mKERN_HPPA_PWRSW
=58,

138 
	mKERN_HPPA_UNALIGNED
=59,

139 
	mKERN_PRINTK_RATELIMIT
=60,

140 
	mKERN_PRINTK_RATELIMIT_BURST
=61,

141 
	mKERN_PTY
=62,

142 
	mKERN_NGROUPS_MAX
=63,

143 
	mKERN_SPARC_SCONS_PWROFF
=64,

144 
	mKERN_HZ_TIMER
=65,

145 
	mKERN_UNKNOWN_NMI_PANIC
=66,

146 
	mKERN_BOOTLOADER_TYPE
=67,

147 
	mKERN_RANDOMIZE
=68,

148 
	mKERN_SETUID_DUMPABLE
=69,

149 
	mKERN_SPIN_RETRY
=70,

150 
	mKERN_ACPI_VIDEO_FLAGS
=71,

151 
	mKERN_IA64_UNALIGNED
=72,

152 
	mKERN_COMPAT_LOG
=73,

153 
	mKERN_MAX_LOCK_DEPTH
=74,

154 
	mKERN_NMI_WATCHDOG
=75,

155 
	mKERN_PANIC_ON_NMI
=76,

156 
	mKERN_PANIC_ON_WARN
=77,

164 
	mVM_UNUSED1
=1,

165 
	mVM_UNUSED2
=2,

166 
	mVM_UNUSED3
=3,

167 
	mVM_UNUSED4
=4,

168 
	mVM_OVERCOMMIT_MEMORY
=5,

169 
	mVM_UNUSED5
=6,

170 
	mVM_UNUSED7
=7,

171 
	mVM_UNUSED8
=8,

172 
	mVM_UNUSED9
=9,

173 
	mVM_PAGE_CLUSTER
=10,

174 
	mVM_DIRTY_BACKGROUND
=11,

175 
	mVM_DIRTY_RATIO
=12,

176 
	mVM_DIRTY_WB_CS
=13,

177 
	mVM_DIRTY_EXPIRE_CS
=14,

178 
	mVM_NR_PDFLUSH_THREADS
=15,

179 
	mVM_OVERCOMMIT_RATIO
=16,

180 
	mVM_PAGEBUF
=17,

181 
	mVM_HUGETLB_PAGES
=18,

182 
	mVM_SWAPPINESS
=19,

183 
	mVM_LOWMEM_RESERVE_RATIO
=20,

184 
	mVM_MIN_FREE_KBYTES
=21,

185 
	mVM_MAX_MAP_COUNT
=22,

186 
	mVM_LAPTOP_MODE
=23,

187 
	mVM_BLOCK_DUMP
=24,

188 
	mVM_HUGETLB_GROUP
=25,

189 
	mVM_VFS_CACHE_PRESSURE
=26,

190 
	mVM_LEGACY_VA_LAYOUT
=27,

191 
	mVM_SWAP_TOKEN_TIMEOUT
=28,

192 
	mVM_DROP_PAGECACHE
=29,

193 
	mVM_PERCPU_PAGELIST_FRACTION
=30,

194 
	mVM_ZONE_RECLAIM_MODE
=31,

195 
	mVM_MIN_UNMAPPED
=32,

196 
	mVM_PANIC_ON_OOM
=33,

197 
	mVM_VDSO_ENABLED
=34,

198 
	mVM_MIN_SLAB
=35,

205 
	mNET_CORE
=1,

206 
	mNET_ETHER
=2,

207 
	mNET_802
=3,

208 
	mNET_UNIX
=4,

209 
	mNET_IPV4
=5,

210 
	mNET_IPX
=6,

211 
	mNET_ATALK
=7,

212 
	mNET_NETROM
=8,

213 
	mNET_AX25
=9,

214 
	mNET_BRIDGE
=10,

215 
	mNET_ROSE
=11,

216 
	mNET_IPV6
=12,

217 
	mNET_X25
=13,

218 
	mNET_TR
=14,

219 
	mNET_DECNET
=15,

220 
	mNET_ECONET
=16,

221 
	mNET_SCTP
=17,

222 
	mNET_LLC
=18,

223 
	mNET_NETFILTER
=19,

224 
	mNET_DCCP
=20,

225 
	mNET_IRDA
=412,

231 
	mRANDOM_POOLSIZE
=1,

232 
	mRANDOM_ENTROPY_COUNT
=2,

233 
	mRANDOM_READ_THRESH
=3,

234 
	mRANDOM_WRITE_THRESH
=4,

235 
	mRANDOM_BOOT_ID
=5,

236 
	mRANDOM_UUID
=6

242 
	mPTY_MAX
=1,

243 
	mPTY_NR
=2

249 
	mBUS_ISA_MEM_BASE
=1,

250 
	mBUS_ISA_PORT_BASE
=2,

251 
	mBUS_ISA_PORT_SHIFT
=3

257 
	mNET_CORE_WMEM_MAX
=1,

258 
	mNET_CORE_RMEM_MAX
=2,

259 
	mNET_CORE_WMEM_DEFAULT
=3,

260 
	mNET_CORE_RMEM_DEFAULT
=4,

262 
	mNET_CORE_MAX_BACKLOG
=6,

263 
	mNET_CORE_FASTROUTE
=7,

264 
	mNET_CORE_MSG_COST
=8,

265 
	mNET_CORE_MSG_BURST
=9,

266 
	mNET_CORE_OPTMEM_MAX
=10,

267 
	mNET_CORE_HOT_LIST_LENGTH
=11,

268 
	mNET_CORE_DIVERT_VERSION
=12,

269 
	mNET_CORE_NO_CONG_THRESH
=13,

270 
	mNET_CORE_NO_CONG
=14,

271 
	mNET_CORE_LO_CONG
=15,

272 
	mNET_CORE_MOD_CONG
=16,

273 
	mNET_CORE_DEV_WEIGHT
=17,

274 
	mNET_CORE_SOMAXCONN
=18,

275 
	mNET_CORE_BUDGET
=19,

276 
	mNET_CORE_AEVENT_ETIME
=20,

277 
	mNET_CORE_AEVENT_RSEQTH
=21,

278 
	mNET_CORE_WARNINGS
=22,

289 
	mNET_UNIX_DESTROY_DELAY
=1,

290 
	mNET_UNIX_DELETE_DELAY
=2,

291 
	mNET_UNIX_MAX_DGRAM_QLEN
=3,

297 
	mNET_NF_CONNTRACK_MAX
=1,

298 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

299 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

300 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

301 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

302 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

303 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

304 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

305 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

306 
	mNET_NF_CONNTRACK_UDP_TIMEOUT
=10,

307 
	mNET_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

308 
	mNET_NF_CONNTRACK_ICMP_TIMEOUT
=12,

309 
	mNET_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

310 
	mNET_NF_CONNTRACK_BUCKETS
=14,

311 
	mNET_NF_CONNTRACK_LOG_INVALID
=15,

312 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

313 
	mNET_NF_CONNTRACK_TCP_LOOSE
=17,

314 
	mNET_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

315 
	mNET_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

316 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

317 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

318 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

319 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

320 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

321 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

322 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

323 
	mNET_NF_CONNTRACK_COUNT
=27,

324 
	mNET_NF_CONNTRACK_ICMPV6_TIMEOUT
=28,

325 
	mNET_NF_CONNTRACK_FRAG6_TIMEOUT
=29,

326 
	mNET_NF_CONNTRACK_FRAG6_LOW_THRESH
=30,

327 
	mNET_NF_CONNTRACK_FRAG6_HIGH_THRESH
=31,

328 
	mNET_NF_CONNTRACK_CHECKSUM
=32,

335 
	mNET_IPV4_FORWARD
=8,

336 
	mNET_IPV4_DYNADDR
=9,

338 
	mNET_IPV4_CONF
=16,

339 
	mNET_IPV4_NEIGH
=17,

340 
	mNET_IPV4_ROUTE
=18,

341 
	mNET_IPV4_FIB_HASH
=19,

342 
	mNET_IPV4_NETFILTER
=20,

344 
	mNET_IPV4_TCP_TIMESTAMPS
=33,

345 
	mNET_IPV4_TCP_WINDOW_SCALING
=34,

346 
	mNET_IPV4_TCP_SACK
=35,

347 
	mNET_IPV4_TCP_RETRANS_COLLAPSE
=36,

348 
	mNET_IPV4_DEFAULT_TTL
=37,

349 
	mNET_IPV4_AUTOCONFIG
=38,

350 
	mNET_IPV4_NO_PMTU_DISC
=39,

351 
	mNET_IPV4_TCP_SYN_RETRIES
=40,

352 
	mNET_IPV4_IPFRAG_HIGH_THRESH
=41,

353 
	mNET_IPV4_IPFRAG_LOW_THRESH
=42,

354 
	mNET_IPV4_IPFRAG_TIME
=43,

355 
	mNET_IPV4_TCP_MAX_KA_PROBES
=44,

356 
	mNET_IPV4_TCP_KEEPALIVE_TIME
=45,

357 
	mNET_IPV4_TCP_KEEPALIVE_PROBES
=46,

358 
	mNET_IPV4_TCP_RETRIES1
=47,

359 
	mNET_IPV4_TCP_RETRIES2
=48,

360 
	mNET_IPV4_TCP_FIN_TIMEOUT
=49,

361 
	mNET_IPV4_IP_MASQ_DEBUG
=50,

362 
	mNET_TCP_SYNCOOKIES
=51,

363 
	mNET_TCP_STDURG
=52,

364 
	mNET_TCP_RFC1337
=53,

365 
	mNET_TCP_SYN_TAILDROP
=54,

366 
	mNET_TCP_MAX_SYN_BACKLOG
=55,

367 
	mNET_IPV4_LOCAL_PORT_RANGE
=56,

368 
	mNET_IPV4_ICMP_ECHO_IGNORE_ALL
=57,

369 
	mNET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS
=58,

370 
	mNET_IPV4_ICMP_SOURCEQUENCH_RATE
=59,

371 
	mNET_IPV4_ICMP_DESTUNREACH_RATE
=60,

372 
	mNET_IPV4_ICMP_TIMEEXCEED_RATE
=61,

373 
	mNET_IPV4_ICMP_PARAMPROB_RATE
=62,

374 
	mNET_IPV4_ICMP_ECHOREPLY_RATE
=63,

375 
	mNET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES
=64,

376 
	mNET_IPV4_IGMP_MAX_MEMBERSHIPS
=65,

377 
	mNET_TCP_TW_RECYCLE
=66,

378 
	mNET_IPV4_ALWAYS_DEFRAG
=67,

379 
	mNET_IPV4_TCP_KEEPALIVE_INTVL
=68,

380 
	mNET_IPV4_INET_PEER_THRESHOLD
=69,

381 
	mNET_IPV4_INET_PEER_MINTTL
=70,

382 
	mNET_IPV4_INET_PEER_MAXTTL
=71,

383 
	mNET_IPV4_INET_PEER_GC_MINTIME
=72,

384 
	mNET_IPV4_INET_PEER_GC_MAXTIME
=73,

385 
	mNET_TCP_ORPHAN_RETRIES
=74,

386 
	mNET_TCP_ABORT_ON_OVERFLOW
=75,

387 
	mNET_TCP_SYNACK_RETRIES
=76,

388 
	mNET_TCP_MAX_ORPHANS
=77,

389 
	mNET_TCP_MAX_TW_BUCKETS
=78,

390 
	mNET_TCP_FACK
=79,

391 
	mNET_TCP_REORDERING
=80,

392 
	mNET_TCP_ECN
=81,

393 
	mNET_TCP_DSACK
=82,

394 
	mNET_TCP_MEM
=83,

395 
	mNET_TCP_WMEM
=84,

396 
	mNET_TCP_RMEM
=85,

397 
	mNET_TCP_APP_WIN
=86,

398 
	mNET_TCP_ADV_WIN_SCALE
=87,

399 
	mNET_IPV4_NONLOCAL_BIND
=88,

400 
	mNET_IPV4_ICMP_RATELIMIT
=89,

401 
	mNET_IPV4_ICMP_RATEMASK
=90,

402 
	mNET_TCP_TW_REUSE
=91,

403 
	mNET_TCP_FRTO
=92,

404 
	mNET_TCP_LOW_LATENCY
=93,

405 
	mNET_IPV4_IPFRAG_SECRET_INTERVAL
=94,

406 
	mNET_IPV4_IGMP_MAX_MSF
=96,

407 
	mNET_TCP_NO_METRICS_SAVE
=97,

408 
	mNET_TCP_DEFAULT_WIN_SCALE
=105,

409 
	mNET_TCP_MODERATE_RCVBUF
=106,

410 
	mNET_TCP_TSO_WIN_DIVISOR
=107,

411 
	mNET_TCP_BIC_BETA
=108,

412 
	mNET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR
=109,

413 
	mNET_TCP_CONG_CONTROL
=110,

414 
	mNET_TCP_ABC
=111,

415 
	mNET_IPV4_IPFRAG_MAX_DIST
=112,

416 
	mNET_TCP_MTU_PROBING
=113,

417 
	mNET_TCP_BASE_MSS
=114,

418 
	mNET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS
=115,

419 
	mNET_TCP_DMA_COPYBREAK
=116,

420 
	mNET_TCP_SLOW_START_AFTER_IDLE
=117,

421 
	mNET_CIPSOV4_CACHE_ENABLE
=118,

422 
	mNET_CIPSOV4_CACHE_BUCKET_SIZE
=119,

423 
	mNET_CIPSOV4_RBM_OPTFMT
=120,

424 
	mNET_CIPSOV4_RBM_STRICTVALID
=121,

425 
	mNET_TCP_AVAIL_CONG_CONTROL
=122,

426 
	mNET_TCP_ALLOWED_CONG_CONTROL
=123,

427 
	mNET_TCP_MAX_SSTHRESH
=124,

428 
	mNET_TCP_FRTO_RESPONSE
=125,

432 
	mNET_IPV4_ROUTE_FLUSH
=1,

433 
	mNET_IPV4_ROUTE_MIN_DELAY
=2,

434 
	mNET_IPV4_ROUTE_MAX_DELAY
=3,

435 
	mNET_IPV4_ROUTE_GC_THRESH
=4,

436 
	mNET_IPV4_ROUTE_MAX_SIZE
=5,

437 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL
=6,

438 
	mNET_IPV4_ROUTE_GC_TIMEOUT
=7,

439 
	mNET_IPV4_ROUTE_GC_INTERVAL
=8,

440 
	mNET_IPV4_ROUTE_REDIRECT_LOAD
=9,

441 
	mNET_IPV4_ROUTE_REDIRECT_NUMBER
=10,

442 
	mNET_IPV4_ROUTE_REDIRECT_SILENCE
=11,

443 
	mNET_IPV4_ROUTE_ERROR_COST
=12,

444 
	mNET_IPV4_ROUTE_ERROR_BURST
=13,

445 
	mNET_IPV4_ROUTE_GC_ELASTICITY
=14,

446 
	mNET_IPV4_ROUTE_MTU_EXPIRES
=15,

447 
	mNET_IPV4_ROUTE_MIN_PMTU
=16,

448 
	mNET_IPV4_ROUTE_MIN_ADVMSS
=17,

449 
	mNET_IPV4_ROUTE_SECRET_INTERVAL
=18,

450 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL_MS
=19,

455 
	mNET_PROTO_CONF_ALL
=-2,

456 
	mNET_PROTO_CONF_DEFAULT
=-3

463 
	mNET_IPV4_CONF_FORWARDING
=1,

464 
	mNET_IPV4_CONF_MC_FORWARDING
=2,

465 
	mNET_IPV4_CONF_PROXY_ARP
=3,

466 
	mNET_IPV4_CONF_ACCEPT_REDIRECTS
=4,

467 
	mNET_IPV4_CONF_SECURE_REDIRECTS
=5,

468 
	mNET_IPV4_CONF_SEND_REDIRECTS
=6,

469 
	mNET_IPV4_CONF_SHARED_MEDIA
=7,

470 
	mNET_IPV4_CONF_RP_FILTER
=8,

471 
	mNET_IPV4_CONF_ACCEPT_SOURCE_ROUTE
=9,

472 
	mNET_IPV4_CONF_BOOTP_RELAY
=10,

473 
	mNET_IPV4_CONF_LOG_MARTIANS
=11,

474 
	mNET_IPV4_CONF_TAG
=12,

475 
	mNET_IPV4_CONF_ARPFILTER
=13,

476 
	mNET_IPV4_CONF_MEDIUM_ID
=14,

477 
	mNET_IPV4_CONF_NOXFRM
=15,

478 
	mNET_IPV4_CONF_NOPOLICY
=16,

479 
	mNET_IPV4_CONF_FORCE_IGMP_VERSION
=17,

480 
	mNET_IPV4_CONF_ARP_ANNOUNCE
=18,

481 
	mNET_IPV4_CONF_ARP_IGNORE
=19,

482 
	mNET_IPV4_CONF_PROMOTE_SECONDARIES
=20,

483 
	mNET_IPV4_CONF_ARP_ACCEPT
=21,

484 
	mNET_IPV4_CONF_ARP_NOTIFY
=22,

490 
	mNET_IPV4_NF_CONNTRACK_MAX
=1,

491 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

492 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

493 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

494 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

495 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

496 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

497 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

498 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

499 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT
=10,

500 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

501 
	mNET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT
=12,

502 
	mNET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

503 
	mNET_IPV4_NF_CONNTRACK_BUCKETS
=14,

504 
	mNET_IPV4_NF_CONNTRACK_LOG_INVALID
=15,

505 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

506 
	mNET_IPV4_NF_CONNTRACK_TCP_LOOSE
=17,

507 
	mNET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

508 
	mNET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

509 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

510 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

511 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

512 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

513 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

514 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

515 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

516 
	mNET_IPV4_NF_CONNTRACK_COUNT
=27,

517 
	mNET_IPV4_NF_CONNTRACK_CHECKSUM
=28,

522 
	mNET_IPV6_CONF
=16,

523 
	mNET_IPV6_NEIGH
=17,

524 
	mNET_IPV6_ROUTE
=18,

525 
	mNET_IPV6_ICMP
=19,

526 
	mNET_IPV6_BINDV6ONLY
=20,

527 
	mNET_IPV6_IP6FRAG_HIGH_THRESH
=21,

528 
	mNET_IPV6_IP6FRAG_LOW_THRESH
=22,

529 
	mNET_IPV6_IP6FRAG_TIME
=23,

530 
	mNET_IPV6_IP6FRAG_SECRET_INTERVAL
=24,

531 
	mNET_IPV6_MLD_MAX_MSF
=25,

535 
	mNET_IPV6_ROUTE_FLUSH
=1,

536 
	mNET_IPV6_ROUTE_GC_THRESH
=2,

537 
	mNET_IPV6_ROUTE_MAX_SIZE
=3,

538 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL
=4,

539 
	mNET_IPV6_ROUTE_GC_TIMEOUT
=5,

540 
	mNET_IPV6_ROUTE_GC_INTERVAL
=6,

541 
	mNET_IPV6_ROUTE_GC_ELASTICITY
=7,

542 
	mNET_IPV6_ROUTE_MTU_EXPIRES
=8,

543 
	mNET_IPV6_ROUTE_MIN_ADVMSS
=9,

544 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL_MS
=10

548 
	mNET_IPV6_FORWARDING
=1,

549 
	mNET_IPV6_HOP_LIMIT
=2,

550 
	mNET_IPV6_MTU
=3,

551 
	mNET_IPV6_ACCEPT_RA
=4,

552 
	mNET_IPV6_ACCEPT_REDIRECTS
=5,

553 
	mNET_IPV6_AUTOCONF
=6,

554 
	mNET_IPV6_DAD_TRANSMITS
=7,

555 
	mNET_IPV6_RTR_SOLICITS
=8,

556 
	mNET_IPV6_RTR_SOLICIT_INTERVAL
=9,

557 
	mNET_IPV6_RTR_SOLICIT_DELAY
=10,

558 
	mNET_IPV6_USE_TEMPADDR
=11,

559 
	mNET_IPV6_TEMP_VALID_LFT
=12,

560 
	mNET_IPV6_TEMP_PREFERED_LFT
=13,

561 
	mNET_IPV6_REGEN_MAX_RETRY
=14,

562 
	mNET_IPV6_MAX_DESYNC_FACTOR
=15,

563 
	mNET_IPV6_MAX_ADDRESSES
=16,

564 
	mNET_IPV6_FORCE_MLD_VERSION
=17,

565 
	mNET_IPV6_ACCEPT_RA_DEFRTR
=18,

566 
	mNET_IPV6_ACCEPT_RA_PINFO
=19,

567 
	mNET_IPV6_ACCEPT_RA_RTR_PREF
=20,

568 
	mNET_IPV6_RTR_PROBE_INTERVAL
=21,

569 
	mNET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN
=22,

570 
	mNET_IPV6_PROXY_NDP
=23,

571 
	mNET_IPV6_ACCEPT_SOURCE_ROUTE
=25,

572 
	mNET_IPV6_ACCEPT_RA_FROM_LOCAL
=26,

573 
	m__NET_IPV6_MAX


578 
	mNET_IPV6_ICMP_RATELIMIT
=1

583 
	mNET_NEIGH_MCAST_SOLICIT
=1,

584 
	mNET_NEIGH_UCAST_SOLICIT
=2,

585 
	mNET_NEIGH_APP_SOLICIT
=3,

586 
	mNET_NEIGH_RETRANS_TIME
=4,

587 
	mNET_NEIGH_REACHABLE_TIME
=5,

588 
	mNET_NEIGH_DELAY_PROBE_TIME
=6,

589 
	mNET_NEIGH_GC_STALE_TIME
=7,

590 
	mNET_NEIGH_UNRES_QLEN
=8,

591 
	mNET_NEIGH_PROXY_QLEN
=9,

592 
	mNET_NEIGH_ANYCAST_DELAY
=10,

593 
	mNET_NEIGH_PROXY_DELAY
=11,

594 
	mNET_NEIGH_LOCKTIME
=12,

595 
	mNET_NEIGH_GC_INTERVAL
=13,

596 
	mNET_NEIGH_GC_THRESH1
=14,

597 
	mNET_NEIGH_GC_THRESH2
=15,

598 
	mNET_NEIGH_GC_THRESH3
=16,

599 
	mNET_NEIGH_RETRANS_TIME_MS
=17,

600 
	mNET_NEIGH_REACHABLE_TIME_MS
=18,

605 
	mNET_DCCP_DEFAULT
=1,

610 
	mNET_IPX_PPROP_BROADCASTING
=1,

611 
	mNET_IPX_FORWARDING
=2

616 
	mNET_LLC2
=1,

617 
	mNET_LLC_STATION
=2,

622 
	mNET_LLC2_TIMEOUT
=1,

627 
	mNET_LLC_STATION_ACK_TIMEOUT
=1,

632 
	mNET_LLC2_ACK_TIMEOUT
=1,

633 
	mNET_LLC2_P_TIMEOUT
=2,

634 
	mNET_LLC2_REJ_TIMEOUT
=3,

635 
	mNET_LLC2_BUSY_TIMEOUT
=4,

640 
	mNET_ATALK_AARP_EXPIRY_TIME
=1,

641 
	mNET_ATALK_AARP_TICK_TIME
=2,

642 
	mNET_ATALK_AARP_RETRANSMIT_LIMIT
=3,

643 
	mNET_ATALK_AARP_RESOLVE_TIME
=4

649 
	mNET_NETROM_DEFAULT_PATH_QUALITY
=1,

650 
	mNET_NETROM_OBSOLESCENCE_COUNT_INITIALISER
=2,

651 
	mNET_NETROM_NETWORK_TTL_INITIALISER
=3,

652 
	mNET_NETROM_TRANSPORT_TIMEOUT
=4,

653 
	mNET_NETROM_TRANSPORT_MAXIMUM_TRIES
=5,

654 
	mNET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY
=6,

655 
	mNET_NETROM_TRANSPORT_BUSY_DELAY
=7,

656 
	mNET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE
=8,

657 
	mNET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT
=9,

658 
	mNET_NETROM_ROUTING_CONTROL
=10,

659 
	mNET_NETROM_LINK_FAILS_COUNT
=11,

660 
	mNET_NETROM_RESET
=12

665 
	mNET_AX25_IP_DEFAULT_MODE
=1,

666 
	mNET_AX25_DEFAULT_MODE
=2,

667 
	mNET_AX25_BACKOFF_TYPE
=3,

668 
	mNET_AX25_CONNECT_MODE
=4,

669 
	mNET_AX25_STANDARD_WINDOW
=5,

670 
	mNET_AX25_EXTENDED_WINDOW
=6,

671 
	mNET_AX25_T1_TIMEOUT
=7,

672 
	mNET_AX25_T2_TIMEOUT
=8,

673 
	mNET_AX25_T3_TIMEOUT
=9,

674 
	mNET_AX25_IDLE_TIMEOUT
=10,

675 
	mNET_AX25_N2
=11,

676 
	mNET_AX25_PACLEN
=12,

677 
	mNET_AX25_PROTOCOL
=13,

678 
	mNET_AX25_DAMA_SLAVE_TIMEOUT
=14

683 
	mNET_ROSE_RESTART_REQUEST_TIMEOUT
=1,

684 
	mNET_ROSE_CALL_REQUEST_TIMEOUT
=2,

685 
	mNET_ROSE_RESET_REQUEST_TIMEOUT
=3,

686 
	mNET_ROSE_CLEAR_REQUEST_TIMEOUT
=4,

687 
	mNET_ROSE_ACK_HOLD_BACK_TIMEOUT
=5,

688 
	mNET_ROSE_ROUTING_CONTROL
=6,

689 
	mNET_ROSE_LINK_FAIL_TIMEOUT
=7,

690 
	mNET_ROSE_MAX_VCS
=8,

691 
	mNET_ROSE_WINDOW_SIZE
=9,

692 
	mNET_ROSE_NO_ACTIVITY_TIMEOUT
=10

697 
	mNET_X25_RESTART_REQUEST_TIMEOUT
=1,

698 
	mNET_X25_CALL_REQUEST_TIMEOUT
=2,

699 
	mNET_X25_RESET_REQUEST_TIMEOUT
=3,

700 
	mNET_X25_CLEAR_REQUEST_TIMEOUT
=4,

701 
	mNET_X25_ACK_HOLD_BACK_TIMEOUT
=5,

702 
	mNET_X25_FORWARD
=6

708 
	mNET_TR_RIF_TIMEOUT
=1

713 
	mNET_DECNET_NODE_TYPE
 = 1,

714 
	mNET_DECNET_NODE_ADDRESS
 = 2,

715 
	mNET_DECNET_NODE_NAME
 = 3,

716 
	mNET_DECNET_DEFAULT_DEVICE
 = 4,

717 
	mNET_DECNET_TIME_WAIT
 = 5,

718 
	mNET_DECNET_DN_COUNT
 = 6,

719 
	mNET_DECNET_DI_COUNT
 = 7,

720 
	mNET_DECNET_DR_COUNT
 = 8,

721 
	mNET_DECNET_DST_GC_INTERVAL
 = 9,

722 
	mNET_DECNET_CONF
 = 10,

723 
	mNET_DECNET_NO_FC_MAX_CWND
 = 11,

724 
	mNET_DECNET_MEM
 = 12,

725 
	mNET_DECNET_RMEM
 = 13,

726 
	mNET_DECNET_WMEM
 = 14,

727 
	mNET_DECNET_DEBUG_LEVEL
 = 255

732 
	mNET_DECNET_CONF_LOOPBACK
 = -2,

733 
	mNET_DECNET_CONF_DDCMP
 = -3,

734 
	mNET_DECNET_CONF_PPP
 = -4,

735 
	mNET_DECNET_CONF_X25
 = -5,

736 
	mNET_DECNET_CONF_GRE
 = -6,

737 
	mNET_DECNET_CONF_ETHER
 = -7

744 
	mNET_DECNET_CONF_DEV_PRIORITY
 = 1,

745 
	mNET_DECNET_CONF_DEV_T1
 = 2,

746 
	mNET_DECNET_CONF_DEV_T2
 = 3,

747 
	mNET_DECNET_CONF_DEV_T3
 = 4,

748 
	mNET_DECNET_CONF_DEV_FORWARDING
 = 5,

749 
	mNET_DECNET_CONF_DEV_BLKSIZE
 = 6,

750 
	mNET_DECNET_CONF_DEV_STATE
 = 7

755 
	mNET_SCTP_RTO_INITIAL
 = 1,

756 
	mNET_SCTP_RTO_MIN
 = 2,

757 
	mNET_SCTP_RTO_MAX
 = 3,

758 
	mNET_SCTP_RTO_ALPHA
 = 4,

759 
	mNET_SCTP_RTO_BETA
 = 5,

760 
	mNET_SCTP_VALID_COOKIE_LIFE
 = 6,

761 
	mNET_SCTP_ASSOCIATION_MAX_RETRANS
 = 7,

762 
	mNET_SCTP_PATH_MAX_RETRANS
 = 8,

763 
	mNET_SCTP_MAX_INIT_RETRANSMITS
 = 9,

764 
	mNET_SCTP_HB_INTERVAL
 = 10,

765 
	mNET_SCTP_PRESERVE_ENABLE
 = 11,

766 
	mNET_SCTP_MAX_BURST
 = 12,

767 
	mNET_SCTP_ADDIP_ENABLE
 = 13,

768 
	mNET_SCTP_PRSCTP_ENABLE
 = 14,

769 
	mNET_SCTP_SNDBUF_POLICY
 = 15,

770 
	mNET_SCTP_SACK_TIMEOUT
 = 16,

771 
	mNET_SCTP_RCVBUF_POLICY
 = 17,

776 
	mNET_BRIDGE_NF_CALL_ARPTABLES
 = 1,

777 
	mNET_BRIDGE_NF_CALL_IPTABLES
 = 2,

778 
	mNET_BRIDGE_NF_CALL_IP6TABLES
 = 3,

779 
	mNET_BRIDGE_NF_FILTER_VLAN_TAGGED
 = 4,

780 
	mNET_BRIDGE_NF_FILTER_PPPOE_TAGGED
 = 5,

785 
	mNET_IRDA_DISCOVERY
=1,

786 
	mNET_IRDA_DEVNAME
=2,

787 
	mNET_IRDA_DEBUG
=3,

788 
	mNET_IRDA_FAST_POLL
=4,

789 
	mNET_IRDA_DISCOVERY_SLOTS
=5,

790 
	mNET_IRDA_DISCOVERY_TIMEOUT
=6,

791 
	mNET_IRDA_SLOT_TIMEOUT
=7,

792 
	mNET_IRDA_MAX_BAUD_RATE
=8,

793 
	mNET_IRDA_MIN_TX_TURN_TIME
=9,

794 
	mNET_IRDA_MAX_TX_DATA_SIZE
=10,

795 
	mNET_IRDA_MAX_TX_WINDOW
=11,

796 
	mNET_IRDA_MAX_NOREPLY_TIME
=12,

797 
	mNET_IRDA_WARN_NOREPLY_TIME
=13,

798 
	mNET_IRDA_LAP_KEEPALIVE_TIME
=14,

805 
	mFS_NRINODE
=1,

806 
	mFS_STATINODE
=2,

807 
	mFS_MAXINODE
=3,

808 
	mFS_NRDQUOT
=4,

809 
	mFS_MAXDQUOT
=5,

810 
	mFS_NRFILE
=6,

811 
	mFS_MAXFILE
=7,

812 
	mFS_DENTRY
=8,

813 
	mFS_NRSUPER
=9,

814 
	mFS_MAXSUPER
=10,

815 
	mFS_OVERFLOWUID
=11,

816 
	mFS_OVERFLOWGID
=12,

817 
	mFS_LEASES
=13,

818 
	mFS_DIR_NOTIFY
=14,

819 
	mFS_LEASE_TIME
=15,

820 
	mFS_DQSTATS
=16,

821 
	mFS_XFS
=17,

822 
	mFS_AIO_NR
=18,

823 
	mFS_AIO_MAX_NR
=19,

824 
	mFS_INOTIFY
=20,

825 
	mFS_OCFS2
=988,

830 
	mFS_DQ_LOOKUPS
 = 1,

831 
	mFS_DQ_DROPS
 = 2,

832 
	mFS_DQ_READS
 = 3,

833 
	mFS_DQ_WRITES
 = 4,

834 
	mFS_DQ_CACHE_HITS
 = 5,

835 
	mFS_DQ_ALLOCATED
 = 6,

836 
	mFS_DQ_FREE
 = 7,

837 
	mFS_DQ_SYNCS
 = 8,

838 
	mFS_DQ_WARNINGS
 = 9,

845 
	mDEV_CDROM
=1,

846 
	mDEV_HWMON
=2,

847 
	mDEV_PARPORT
=3,

848 
	mDEV_RAID
=4,

849 
	mDEV_MAC_HID
=5,

850 
	mDEV_SCSI
=6,

851 
	mDEV_IPMI
=7,

856 
	mDEV_CDROM_INFO
=1,

857 
	mDEV_CDROM_AUTOCLOSE
=2,

858 
	mDEV_CDROM_AUTOEJECT
=3,

859 
	mDEV_CDROM_DEBUG
=4,

860 
	mDEV_CDROM_LOCK
=5,

861 
	mDEV_CDROM_CHECK_MEDIA
=6

866 
	mDEV_PARPORT_DEFAULT
=-3

871 
	mDEV_RAID_SPEED_LIMIT_MIN
=1,

872 
	mDEV_RAID_SPEED_LIMIT_MAX
=2

877 
	mDEV_PARPORT_DEFAULT_TIMESLICE
=1,

878 
	mDEV_PARPORT_DEFAULT_SPINTIME
=2

883 
	mDEV_PARPORT_SPINTIME
=1,

884 
	mDEV_PARPORT_BASE_ADDR
=2,

885 
	mDEV_PARPORT_IRQ
=3,

886 
	mDEV_PARPORT_DMA
=4,

887 
	mDEV_PARPORT_MODES
=5,

888 
	mDEV_PARPORT_DEVICES
=6,

889 
	mDEV_PARPORT_AUTOPROBE
=16

894 
	mDEV_PARPORT_DEVICES_ACTIVE
=-3,

899 
	mDEV_PARPORT_DEVICE_TIMESLICE
=1,

904 
	mDEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES
=1,

905 
	mDEV_MAC_HID_KEYBOARD_LOCK_KEYCODES
=2,

906 
	mDEV_MAC_HID_MOUSE_BUTTON_EMULATION
=3,

907 
	mDEV_MAC_HID_MOUSE_BUTTON2_KEYCODE
=4,

908 
	mDEV_MAC_HID_MOUSE_BUTTON3_KEYCODE
=5,

909 
	mDEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES
=6

914 
	mDEV_SCSI_LOGGING_LEVEL
=1,

919 
	mDEV_IPMI_POWEROFF_POWERCYCLE
=1,

925 
	mABI_DEFHANDLER_COFF
=1,

926 
	mABI_DEFHANDLER_ELF
=2,

927 
	mABI_DEFHANDLER_LCALL7
=3,

928 
	mABI_DEFHANDLER_LIBCSO
=4,

929 
	mABI_TRACE
=5,

930 
	mABI_FAKE_UTSNAME
=6,

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/linux/stddef.h

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
618
24017
code/iptable.c
code/iptable.h
code/main.c
code/network.c
code/network.h
code/nl.c
code/nl.h
get_eth0/interface.c
get_eth0/interface2.c
get_eth0/interface3.c
get_interface/interface.c
get_interface2/interface.c
get_interface3/getinterface.c
get_interface3/libtc/config.h
get_interface3/libtc/include/tc.h
get_interface3/libtc/include/tcalloc.h
get_interface3/libtc/include/tcbyteswap.h
get_interface3/libtc/include/tcconf.h
get_interface3/libtc/include/tcdirent.h
get_interface3/libtc/include/tcendian.h
get_interface3/libtc/include/tchash.h
get_interface3/libtc/include/tclist.h
get_interface3/libtc/include/tcmath.h
get_interface3/libtc/include/tcmempool.h
get_interface3/libtc/include/tcnet.h
get_interface3/libtc/include/tcprioq.h
get_interface3/libtc/include/tcstring.h
get_interface3/libtc/include/tctime.h
get_interface3/libtc/include/tctree.h
get_interface3/libtc/include/tctypes.h
get_interface3/libtc/src/alloc.c
get_interface3/libtc/src/conf-parse.c
get_interface3/libtc/src/conf-parse.l
get_interface3/libtc/src/conf.c
get_interface3/libtc/src/confdump.c
get_interface3/libtc/src/gethostaddr.c
get_interface3/libtc/src/gethostname.c
get_interface3/libtc/src/hash.c
get_interface3/libtc/src/list.c
get_interface3/libtc/src/math.c
get_interface3/libtc/src/mkpath.c
get_interface3/libtc/src/mpool.c
get_interface3/libtc/src/pathfind.c
get_interface3/libtc/src/prioq.c
get_interface3/libtc/src/regex.c
get_interface3/libtc/src/snprintf.c
get_interface3/libtc/src/string.c
get_interface3/libtc/src/strsep.c
get_interface3/libtc/src/strtotime.c
get_interface3/libtc/src/tcc-internal.h
get_interface3/libtc/src/tree.c
get_link/main.c
get_link/nl.c
get_link/nl.h
getaddr/getaddr.c
interface/net-tools/arp.c
interface/net-tools/config.h
interface/net-tools/hostname.c
interface/net-tools/ifconfig.c
interface/net-tools/include/interface.h
interface/net-tools/include/ipx.h
interface/net-tools/include/mii.h
interface/net-tools/include/sockets.h
interface/net-tools/include/util-ank.h
interface/net-tools/intl.h
interface/net-tools/ipmaddr.c
interface/net-tools/iptunnel.c
interface/net-tools/lib/activate.c
interface/net-tools/lib/af.c
interface/net-tools/lib/arcnet.c
interface/net-tools/lib/ash.c
interface/net-tools/lib/ax25.c
interface/net-tools/lib/ax25_gr.c
interface/net-tools/lib/ddp.c
interface/net-tools/lib/ddp_gr.c
interface/net-tools/lib/ec_hw.c
interface/net-tools/lib/econet.c
interface/net-tools/lib/ether.c
interface/net-tools/lib/eui64.c
interface/net-tools/lib/fddi.c
interface/net-tools/lib/frame.c
interface/net-tools/lib/getargs.c
interface/net-tools/lib/getroute.c
interface/net-tools/lib/hdlclapb.c
interface/net-tools/lib/hippi.c
interface/net-tools/lib/hw.c
interface/net-tools/lib/ib.c
interface/net-tools/lib/inet.c
interface/net-tools/lib/inet6.c
interface/net-tools/lib/inet6_gr.c
interface/net-tools/lib/inet6_sr.c
interface/net-tools/lib/inet_gr.c
interface/net-tools/lib/inet_sr.c
interface/net-tools/lib/interface.c
interface/net-tools/lib/ipx.c
interface/net-tools/lib/ipx_gr.c
interface/net-tools/lib/ipx_sr.c
interface/net-tools/lib/irda.c
interface/net-tools/lib/loopback.c
interface/net-tools/lib/masq_info.c
interface/net-tools/lib/net-features.h
interface/net-tools/lib/net-support.h
interface/net-tools/lib/netrom.c
interface/net-tools/lib/netrom_gr.c
interface/net-tools/lib/netrom_sr.c
interface/net-tools/lib/nstrcmp.c
interface/net-tools/lib/pathnames.h
interface/net-tools/lib/ppp.c
interface/net-tools/lib/ppp_ac.c
interface/net-tools/lib/proc.c
interface/net-tools/lib/proc.h
interface/net-tools/lib/rose.c
interface/net-tools/lib/rose_gr.c
interface/net-tools/lib/setroute.c
interface/net-tools/lib/sit.c
interface/net-tools/lib/slip.c
interface/net-tools/lib/slip_ac.c
interface/net-tools/lib/sockets.c
interface/net-tools/lib/strip.c
interface/net-tools/lib/tr.c
interface/net-tools/lib/tunnel.c
interface/net-tools/lib/unix.c
interface/net-tools/lib/util-ank.c
interface/net-tools/lib/util.c
interface/net-tools/lib/util.h
interface/net-tools/lib/x25.c
interface/net-tools/lib/x25_gr.c
interface/net-tools/lib/x25_sr.c
interface/net-tools/mii-tool.c
interface/net-tools/nameif.c
interface/net-tools/netstat.c
interface/net-tools/plipconfig.c
interface/net-tools/rarp.c
interface/net-tools/route.c
interface/net-tools/slattach.c
interface/net-tools/statistics.c
interface/net-tools/version.h
libnl/example_c/interface.c
libnl/example_c/scan_access_points.c
libnl/example_c/show_wifi_interface.c
mylibnl/libnl-3.2.25/include/linux/can/netlink.h
mylibnl/libnl-3.2.25/include/linux/fib_rules.h
mylibnl/libnl-3.2.25/include/linux/gen_stats.h
mylibnl/libnl-3.2.25/include/linux/genetlink.h
mylibnl/libnl-3.2.25/include/linux/if.h
mylibnl/libnl-3.2.25/include/linux/if_addr.h
mylibnl/libnl-3.2.25/include/linux/if_arp.h
mylibnl/libnl-3.2.25/include/linux/if_bridge.h
mylibnl/libnl-3.2.25/include/linux/if_ether.h
mylibnl/libnl-3.2.25/include/linux/if_link.h
mylibnl/libnl-3.2.25/include/linux/if_tunnel.h
mylibnl/libnl-3.2.25/include/linux/if_vlan.h
mylibnl/libnl-3.2.25/include/linux/ip.h
mylibnl/libnl-3.2.25/include/linux/ip_mp_alg.h
mylibnl/libnl-3.2.25/include/linux/ipv6.h
mylibnl/libnl-3.2.25/include/linux/neighbour.h
mylibnl/libnl-3.2.25/include/linux/netfilter.h
mylibnl/libnl-3.2.25/include/linux/netfilter/nf_conntrack_common.h
mylibnl/libnl-3.2.25/include/linux/netfilter/nfnetlink.h
mylibnl/libnl-3.2.25/include/linux/netfilter/nfnetlink_compat.h
mylibnl/libnl-3.2.25/include/linux/netfilter/nfnetlink_conntrack.h
mylibnl/libnl-3.2.25/include/linux/netfilter/nfnetlink_log.h
mylibnl/libnl-3.2.25/include/linux/netfilter/nfnetlink_queue.h
mylibnl/libnl-3.2.25/include/linux/netlink.h
mylibnl/libnl-3.2.25/include/linux/pkt_cls.h
mylibnl/libnl-3.2.25/include/linux/pkt_sched.h
mylibnl/libnl-3.2.25/include/linux/rtnetlink.h
mylibnl/libnl-3.2.25/include/linux/snmp.h
mylibnl/libnl-3.2.25/include/linux/tc_act/tc_mirred.h
mylibnl/libnl-3.2.25/include/linux/tc_ematch/tc_em_meta.h
mylibnl/libnl-3.2.25/include/netlink-private/cache-api.h
mylibnl/libnl-3.2.25/include/netlink-private/genl.h
mylibnl/libnl-3.2.25/include/netlink-private/netlink.h
mylibnl/libnl-3.2.25/include/netlink-private/object-api.h
mylibnl/libnl-3.2.25/include/netlink-private/route/link/api.h
mylibnl/libnl-3.2.25/include/netlink-private/route/tc-api.h
mylibnl/libnl-3.2.25/include/netlink-private/socket.h
mylibnl/libnl-3.2.25/include/netlink-private/tc.h
mylibnl/libnl-3.2.25/include/netlink-private/types.h
mylibnl/libnl-3.2.25/include/netlink/addr.h
mylibnl/libnl-3.2.25/include/netlink/attr.h
mylibnl/libnl-3.2.25/include/netlink/cache-api.h
mylibnl/libnl-3.2.25/include/netlink/cache.h
mylibnl/libnl-3.2.25/include/netlink/cli/addr.h
mylibnl/libnl-3.2.25/include/netlink/cli/class.h
mylibnl/libnl-3.2.25/include/netlink/cli/cls.h
mylibnl/libnl-3.2.25/include/netlink/cli/ct.h
mylibnl/libnl-3.2.25/include/netlink/cli/exp.h
mylibnl/libnl-3.2.25/include/netlink/cli/link.h
mylibnl/libnl-3.2.25/include/netlink/cli/neigh.h
mylibnl/libnl-3.2.25/include/netlink/cli/qdisc.h
mylibnl/libnl-3.2.25/include/netlink/cli/route.h
mylibnl/libnl-3.2.25/include/netlink/cli/rule.h
mylibnl/libnl-3.2.25/include/netlink/cli/tc.h
mylibnl/libnl-3.2.25/include/netlink/cli/utils.h
mylibnl/libnl-3.2.25/include/netlink/data.h
mylibnl/libnl-3.2.25/include/netlink/errno.h
mylibnl/libnl-3.2.25/include/netlink/fib_lookup/lookup.h
mylibnl/libnl-3.2.25/include/netlink/fib_lookup/request.h
mylibnl/libnl-3.2.25/include/netlink/genl/ctrl.h
mylibnl/libnl-3.2.25/include/netlink/genl/family.h
mylibnl/libnl-3.2.25/include/netlink/genl/genl.h
mylibnl/libnl-3.2.25/include/netlink/genl/mngt.h
mylibnl/libnl-3.2.25/include/netlink/handlers.h
mylibnl/libnl-3.2.25/include/netlink/hash.h
mylibnl/libnl-3.2.25/include/netlink/hashtable.h
mylibnl/libnl-3.2.25/include/netlink/idiag/idiagnl.h
mylibnl/libnl-3.2.25/include/netlink/idiag/meminfo.h
mylibnl/libnl-3.2.25/include/netlink/idiag/msg.h
mylibnl/libnl-3.2.25/include/netlink/idiag/req.h
mylibnl/libnl-3.2.25/include/netlink/idiag/vegasinfo.h
mylibnl/libnl-3.2.25/include/netlink/list.h
mylibnl/libnl-3.2.25/include/netlink/msg.h
mylibnl/libnl-3.2.25/include/netlink/netfilter/ct.h
mylibnl/libnl-3.2.25/include/netlink/netfilter/exp.h
mylibnl/libnl-3.2.25/include/netlink/netfilter/log.h
mylibnl/libnl-3.2.25/include/netlink/netfilter/log_msg.h
mylibnl/libnl-3.2.25/include/netlink/netfilter/netfilter.h
mylibnl/libnl-3.2.25/include/netlink/netfilter/nfnl.h
mylibnl/libnl-3.2.25/include/netlink/netfilter/queue.h
mylibnl/libnl-3.2.25/include/netlink/netfilter/queue_msg.h
mylibnl/libnl-3.2.25/include/netlink/netlink-compat.h
mylibnl/libnl-3.2.25/include/netlink/netlink-kernel.h
mylibnl/libnl-3.2.25/include/netlink/netlink.h
mylibnl/libnl-3.2.25/include/netlink/object-api.h
mylibnl/libnl-3.2.25/include/netlink/object.h
mylibnl/libnl-3.2.25/include/netlink/route/act/mirred.h
mylibnl/libnl-3.2.25/include/netlink/route/action.h
mylibnl/libnl-3.2.25/include/netlink/route/addr.h
mylibnl/libnl-3.2.25/include/netlink/route/class.h
mylibnl/libnl-3.2.25/include/netlink/route/classifier.h
mylibnl/libnl-3.2.25/include/netlink/route/cls/basic.h
mylibnl/libnl-3.2.25/include/netlink/route/cls/cgroup.h
mylibnl/libnl-3.2.25/include/netlink/route/cls/ematch.h
mylibnl/libnl-3.2.25/include/netlink/route/cls/ematch/cmp.h
mylibnl/libnl-3.2.25/include/netlink/route/cls/ematch/meta.h
mylibnl/libnl-3.2.25/include/netlink/route/cls/ematch/nbyte.h
mylibnl/libnl-3.2.25/include/netlink/route/cls/ematch/text.h
mylibnl/libnl-3.2.25/include/netlink/route/cls/fw.h
mylibnl/libnl-3.2.25/include/netlink/route/cls/police.h
mylibnl/libnl-3.2.25/include/netlink/route/cls/u32.h
mylibnl/libnl-3.2.25/include/netlink/route/link.h
mylibnl/libnl-3.2.25/include/netlink/route/link/api.h
mylibnl/libnl-3.2.25/include/netlink/route/link/bonding.h
mylibnl/libnl-3.2.25/include/netlink/route/link/bridge.h
mylibnl/libnl-3.2.25/include/netlink/route/link/can.h
mylibnl/libnl-3.2.25/include/netlink/route/link/inet.h
mylibnl/libnl-3.2.25/include/netlink/route/link/info-api.h
mylibnl/libnl-3.2.25/include/netlink/route/link/ip6tnl.h
mylibnl/libnl-3.2.25/include/netlink/route/link/ipgre.h
mylibnl/libnl-3.2.25/include/netlink/route/link/ipip.h
mylibnl/libnl-3.2.25/include/netlink/route/link/ipvti.h
mylibnl/libnl-3.2.25/include/netlink/route/link/macvlan.h
mylibnl/libnl-3.2.25/include/netlink/route/link/sit.h
mylibnl/libnl-3.2.25/include/netlink/route/link/veth.h
mylibnl/libnl-3.2.25/include/netlink/route/link/vlan.h
mylibnl/libnl-3.2.25/include/netlink/route/link/vxlan.h
mylibnl/libnl-3.2.25/include/netlink/route/neighbour.h
mylibnl/libnl-3.2.25/include/netlink/route/neightbl.h
mylibnl/libnl-3.2.25/include/netlink/route/nexthop.h
mylibnl/libnl-3.2.25/include/netlink/route/pktloc.h
mylibnl/libnl-3.2.25/include/netlink/route/qdisc.h
mylibnl/libnl-3.2.25/include/netlink/route/qdisc/cbq.h
mylibnl/libnl-3.2.25/include/netlink/route/qdisc/dsmark.h
mylibnl/libnl-3.2.25/include/netlink/route/qdisc/fifo.h
mylibnl/libnl-3.2.25/include/netlink/route/qdisc/fq_codel.h
mylibnl/libnl-3.2.25/include/netlink/route/qdisc/htb.h
mylibnl/libnl-3.2.25/include/netlink/route/qdisc/netem.h
mylibnl/libnl-3.2.25/include/netlink/route/qdisc/plug.h
mylibnl/libnl-3.2.25/include/netlink/route/qdisc/prio.h
mylibnl/libnl-3.2.25/include/netlink/route/qdisc/red.h
mylibnl/libnl-3.2.25/include/netlink/route/qdisc/sfq.h
mylibnl/libnl-3.2.25/include/netlink/route/qdisc/tbf.h
mylibnl/libnl-3.2.25/include/netlink/route/route.h
mylibnl/libnl-3.2.25/include/netlink/route/rtnl.h
mylibnl/libnl-3.2.25/include/netlink/route/rule.h
mylibnl/libnl-3.2.25/include/netlink/route/tc-api.h
mylibnl/libnl-3.2.25/include/netlink/route/tc.h
mylibnl/libnl-3.2.25/include/netlink/socket.h
mylibnl/libnl-3.2.25/include/netlink/types.h
mylibnl/libnl-3.2.25/include/netlink/utils.h
mylibnl/libnl-3.2.25/include/netlink/version.h
mylibnl/libnl-3.2.25/lib/addr.c
mylibnl/libnl-3.2.25/lib/attr.c
mylibnl/libnl-3.2.25/lib/cache.c
mylibnl/libnl-3.2.25/lib/cache_mngr.c
mylibnl/libnl-3.2.25/lib/cache_mngt.c
mylibnl/libnl-3.2.25/lib/cli/cls/basic.c
mylibnl/libnl-3.2.25/lib/cli/cls/cgroup.c
mylibnl/libnl-3.2.25/lib/cli/qdisc/bfifo.c
mylibnl/libnl-3.2.25/lib/cli/qdisc/blackhole.c
mylibnl/libnl-3.2.25/lib/cli/qdisc/fq_codel.c
mylibnl/libnl-3.2.25/lib/cli/qdisc/htb.c
mylibnl/libnl-3.2.25/lib/cli/qdisc/ingress.c
mylibnl/libnl-3.2.25/lib/cli/qdisc/pfifo.c
mylibnl/libnl-3.2.25/lib/cli/qdisc/plug.c
mylibnl/libnl-3.2.25/lib/data.c
mylibnl/libnl-3.2.25/lib/defs.h
mylibnl/libnl-3.2.25/lib/error.c
mylibnl/libnl-3.2.25/lib/fib_lookup/lookup.c
mylibnl/libnl-3.2.25/lib/fib_lookup/request.c
mylibnl/libnl-3.2.25/lib/genl/ctrl.c
mylibnl/libnl-3.2.25/lib/genl/family.c
mylibnl/libnl-3.2.25/lib/genl/genl.c
mylibnl/libnl-3.2.25/lib/genl/mngt.c
mylibnl/libnl-3.2.25/lib/handlers.c
mylibnl/libnl-3.2.25/lib/hash.c
mylibnl/libnl-3.2.25/lib/hashtable.c
mylibnl/libnl-3.2.25/lib/idiag/idiag.c
mylibnl/libnl-3.2.25/lib/idiag/idiag_meminfo_obj.c
mylibnl/libnl-3.2.25/lib/idiag/idiag_msg_obj.c
mylibnl/libnl-3.2.25/lib/idiag/idiag_req_obj.c
mylibnl/libnl-3.2.25/lib/idiag/idiag_vegasinfo_obj.c
mylibnl/libnl-3.2.25/lib/msg.c
mylibnl/libnl-3.2.25/lib/netfilter/ct.c
mylibnl/libnl-3.2.25/lib/netfilter/ct_obj.c
mylibnl/libnl-3.2.25/lib/netfilter/exp.c
mylibnl/libnl-3.2.25/lib/netfilter/exp_obj.c
mylibnl/libnl-3.2.25/lib/netfilter/log.c
mylibnl/libnl-3.2.25/lib/netfilter/log_msg.c
mylibnl/libnl-3.2.25/lib/netfilter/log_msg_obj.c
mylibnl/libnl-3.2.25/lib/netfilter/log_obj.c
mylibnl/libnl-3.2.25/lib/netfilter/netfilter.c
mylibnl/libnl-3.2.25/lib/netfilter/nfnl.c
mylibnl/libnl-3.2.25/lib/netfilter/queue.c
mylibnl/libnl-3.2.25/lib/netfilter/queue_msg.c
mylibnl/libnl-3.2.25/lib/netfilter/queue_msg_obj.c
mylibnl/libnl-3.2.25/lib/netfilter/queue_obj.c
mylibnl/libnl-3.2.25/lib/nl.c
mylibnl/libnl-3.2.25/lib/object.c
mylibnl/libnl-3.2.25/lib/route/act.c
mylibnl/libnl-3.2.25/lib/route/act/mirred.c
mylibnl/libnl-3.2.25/lib/route/addr.c
mylibnl/libnl-3.2.25/lib/route/class.c
mylibnl/libnl-3.2.25/lib/route/classid.c
mylibnl/libnl-3.2.25/lib/route/cls.c
mylibnl/libnl-3.2.25/lib/route/cls/basic.c
mylibnl/libnl-3.2.25/lib/route/cls/cgroup.c
mylibnl/libnl-3.2.25/lib/route/cls/ematch.c
mylibnl/libnl-3.2.25/lib/route/cls/ematch/cmp.c
mylibnl/libnl-3.2.25/lib/route/cls/ematch/container.c
mylibnl/libnl-3.2.25/lib/route/cls/ematch/meta.c
mylibnl/libnl-3.2.25/lib/route/cls/ematch/nbyte.c
mylibnl/libnl-3.2.25/lib/route/cls/ematch/text.c
mylibnl/libnl-3.2.25/lib/route/cls/ematch_grammar.c
mylibnl/libnl-3.2.25/lib/route/cls/ematch_grammar.h
mylibnl/libnl-3.2.25/lib/route/cls/ematch_grammar.l
mylibnl/libnl-3.2.25/lib/route/cls/ematch_syntax.c
mylibnl/libnl-3.2.25/lib/route/cls/ematch_syntax.h
mylibnl/libnl-3.2.25/lib/route/cls/ematch_syntax.y
mylibnl/libnl-3.2.25/lib/route/cls/fw.c
mylibnl/libnl-3.2.25/lib/route/cls/police.c
mylibnl/libnl-3.2.25/lib/route/cls/u32.c
mylibnl/libnl-3.2.25/lib/route/link.c
mylibnl/libnl-3.2.25/lib/route/link/api.c
mylibnl/libnl-3.2.25/lib/route/link/bonding.c
mylibnl/libnl-3.2.25/lib/route/link/bridge.c
mylibnl/libnl-3.2.25/lib/route/link/can.c
mylibnl/libnl-3.2.25/lib/route/link/dummy.c
mylibnl/libnl-3.2.25/lib/route/link/inet.c
mylibnl/libnl-3.2.25/lib/route/link/inet6.c
mylibnl/libnl-3.2.25/lib/route/link/ip6tnl.c
mylibnl/libnl-3.2.25/lib/route/link/ipgre.c
mylibnl/libnl-3.2.25/lib/route/link/ipip.c
mylibnl/libnl-3.2.25/lib/route/link/ipvti.c
mylibnl/libnl-3.2.25/lib/route/link/macvlan.c
mylibnl/libnl-3.2.25/lib/route/link/sit.c
mylibnl/libnl-3.2.25/lib/route/link/veth.c
mylibnl/libnl-3.2.25/lib/route/link/vlan.c
mylibnl/libnl-3.2.25/lib/route/link/vxlan.c
mylibnl/libnl-3.2.25/lib/route/neigh.c
mylibnl/libnl-3.2.25/lib/route/neightbl.c
mylibnl/libnl-3.2.25/lib/route/nexthop.c
mylibnl/libnl-3.2.25/lib/route/pktloc.c
mylibnl/libnl-3.2.25/lib/route/pktloc_grammar.c
mylibnl/libnl-3.2.25/lib/route/pktloc_grammar.h
mylibnl/libnl-3.2.25/lib/route/pktloc_grammar.l
mylibnl/libnl-3.2.25/lib/route/pktloc_syntax.c
mylibnl/libnl-3.2.25/lib/route/pktloc_syntax.h
mylibnl/libnl-3.2.25/lib/route/pktloc_syntax.y
mylibnl/libnl-3.2.25/lib/route/qdisc.c
mylibnl/libnl-3.2.25/lib/route/qdisc/blackhole.c
mylibnl/libnl-3.2.25/lib/route/qdisc/cbq.c
mylibnl/libnl-3.2.25/lib/route/qdisc/dsmark.c
mylibnl/libnl-3.2.25/lib/route/qdisc/fifo.c
mylibnl/libnl-3.2.25/lib/route/qdisc/fq_codel.c
mylibnl/libnl-3.2.25/lib/route/qdisc/htb.c
mylibnl/libnl-3.2.25/lib/route/qdisc/ingress.c
mylibnl/libnl-3.2.25/lib/route/qdisc/netem.c
mylibnl/libnl-3.2.25/lib/route/qdisc/plug.c
mylibnl/libnl-3.2.25/lib/route/qdisc/prio.c
mylibnl/libnl-3.2.25/lib/route/qdisc/red.c
mylibnl/libnl-3.2.25/lib/route/qdisc/sfq.c
mylibnl/libnl-3.2.25/lib/route/qdisc/tbf.c
mylibnl/libnl-3.2.25/lib/route/route.c
mylibnl/libnl-3.2.25/lib/route/route_obj.c
mylibnl/libnl-3.2.25/lib/route/route_utils.c
mylibnl/libnl-3.2.25/lib/route/rtnl.c
mylibnl/libnl-3.2.25/lib/route/rule.c
mylibnl/libnl-3.2.25/lib/route/tc.c
mylibnl/libnl-3.2.25/lib/socket.c
mylibnl/libnl-3.2.25/lib/utils.c
mylibnl/libnl-3.2.25/lib/version.c
mylibnl/libnl-3.2.25/python/netlink/fixes.h
mylibnl/libnl-3.2.25/python/netlink/utils.h
mylibnl/libnl-3.2.25/src/genl-ctrl-list.c
mylibnl/libnl-3.2.25/src/idiag-socket-details.c
mylibnl/libnl-3.2.25/src/lib/addr.c
mylibnl/libnl-3.2.25/src/lib/class.c
mylibnl/libnl-3.2.25/src/lib/cls.c
mylibnl/libnl-3.2.25/src/lib/ct.c
mylibnl/libnl-3.2.25/src/lib/exp.c
mylibnl/libnl-3.2.25/src/lib/link.c
mylibnl/libnl-3.2.25/src/lib/neigh.c
mylibnl/libnl-3.2.25/src/lib/qdisc.c
mylibnl/libnl-3.2.25/src/lib/route.c
mylibnl/libnl-3.2.25/src/lib/rule.c
mylibnl/libnl-3.2.25/src/lib/tc.c
mylibnl/libnl-3.2.25/src/lib/utils.c
mylibnl/libnl-3.2.25/src/nf-ct-add.c
mylibnl/libnl-3.2.25/src/nf-ct-list.c
mylibnl/libnl-3.2.25/src/nf-exp-add.c
mylibnl/libnl-3.2.25/src/nf-exp-delete.c
mylibnl/libnl-3.2.25/src/nf-exp-list.c
mylibnl/libnl-3.2.25/src/nf-log.c
mylibnl/libnl-3.2.25/src/nf-monitor.c
mylibnl/libnl-3.2.25/src/nf-queue.c
mylibnl/libnl-3.2.25/src/nl-addr-add.c
mylibnl/libnl-3.2.25/src/nl-addr-delete.c
mylibnl/libnl-3.2.25/src/nl-addr-list.c
mylibnl/libnl-3.2.25/src/nl-class-add.c
mylibnl/libnl-3.2.25/src/nl-class-delete.c
mylibnl/libnl-3.2.25/src/nl-class-list.c
mylibnl/libnl-3.2.25/src/nl-classid-lookup.c
mylibnl/libnl-3.2.25/src/nl-cls-add.c
mylibnl/libnl-3.2.25/src/nl-cls-delete.c
mylibnl/libnl-3.2.25/src/nl-cls-list.c
mylibnl/libnl-3.2.25/src/nl-fib-lookup.c
mylibnl/libnl-3.2.25/src/nl-link-enslave.c
mylibnl/libnl-3.2.25/src/nl-link-ifindex2name.c
mylibnl/libnl-3.2.25/src/nl-link-list.c
mylibnl/libnl-3.2.25/src/nl-link-name2ifindex.c
mylibnl/libnl-3.2.25/src/nl-link-release.c
mylibnl/libnl-3.2.25/src/nl-link-set.c
mylibnl/libnl-3.2.25/src/nl-link-stats.c
mylibnl/libnl-3.2.25/src/nl-list-caches.c
mylibnl/libnl-3.2.25/src/nl-list-sockets.c
mylibnl/libnl-3.2.25/src/nl-monitor.c
mylibnl/libnl-3.2.25/src/nl-neigh-add.c
mylibnl/libnl-3.2.25/src/nl-neigh-delete.c
mylibnl/libnl-3.2.25/src/nl-neigh-list.c
mylibnl/libnl-3.2.25/src/nl-neightbl-list.c
mylibnl/libnl-3.2.25/src/nl-pktloc-lookup.c
mylibnl/libnl-3.2.25/src/nl-qdisc-add.c
mylibnl/libnl-3.2.25/src/nl-qdisc-delete.c
mylibnl/libnl-3.2.25/src/nl-qdisc-list.c
mylibnl/libnl-3.2.25/src/nl-route-add.c
mylibnl/libnl-3.2.25/src/nl-route-delete.c
mylibnl/libnl-3.2.25/src/nl-route-get.c
mylibnl/libnl-3.2.25/src/nl-route-list.c
mylibnl/libnl-3.2.25/src/nl-rule-list.c
mylibnl/libnl-3.2.25/src/nl-tctree-list.c
mylibnl/libnl-3.2.25/src/nl-util-addr.c
mylibnl/libnl-3.2.25/tests/check-addr.c
mylibnl/libnl-3.2.25/tests/check-all.c
mylibnl/libnl-3.2.25/tests/check-attr.c
mylibnl/libnl-3.2.25/tests/test-cache-mngr.c
mylibnl/libnl-3.2.25/tests/test-complex-HTB-with-hash-filters.c
mylibnl/libnl-3.2.25/tests/test-create-bond.c
mylibnl/libnl-3.2.25/tests/test-create-bridge.c
mylibnl/libnl-3.2.25/tests/test-create-ip6tnl.c
mylibnl/libnl-3.2.25/tests/test-create-ipgre.c
mylibnl/libnl-3.2.25/tests/test-create-ipip.c
mylibnl/libnl-3.2.25/tests/test-create-ipvti.c
mylibnl/libnl-3.2.25/tests/test-create-sit.c
mylibnl/libnl-3.2.25/tests/test-create-veth.c
mylibnl/libnl-3.2.25/tests/test-create-vlan.c
mylibnl/libnl-3.2.25/tests/test-create-vxlan.c
mylibnl/libnl-3.2.25/tests/test-delete-link.c
mylibnl/libnl-3.2.25/tests/test-genl.c
mylibnl/libnl-3.2.25/tests/test-nf-cache-mngr.c
mylibnl/libnl-3.2.25/tests/test-socket-creation.c
mylibnl/libnl-3.2.25/tests/test-u32-filter-with-actions.c
mylibnl/libnl-3.2.25/tests/util.h
net_interface/interface.c
net_interface/interface.h
net_interface/main.c
net_interface/process_manager.h
net_space/net_space.c
route.c
server/network.c
server/queue.h
server/server.c
/usr/include/alloca.h
/usr/include/arpa/inet.h
/usr/include/arpa/nameser.h
/usr/include/assert.h
/usr/include/byteswap.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/endian.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/features.h
/usr/include/fnmatch.h
/usr/include/getopt.h
/usr/include/ifaddrs.h
/usr/include/inttypes.h
/usr/include/libintl.h
/usr/include/limits.h
/usr/include/linux/atalk.h
/usr/include/linux/atm.h
/usr/include/linux/ax25.h
/usr/include/linux/can/netlink.h
/usr/include/linux/ethtool.h
/usr/include/linux/fib_rules.h
/usr/include/linux/gen_stats.h
/usr/include/linux/genetlink.h
/usr/include/linux/if.h
/usr/include/linux/if_addr.h
/usr/include/linux/if_arp.h
/usr/include/linux/if_bridge.h
/usr/include/linux/if_ether.h
/usr/include/linux/if_fddi.h
/usr/include/linux/if_infiniband.h
/usr/include/linux/if_link.h
/usr/include/linux/if_plip.h
/usr/include/linux/if_slip.h
/usr/include/linux/if_tunnel.h
/usr/include/linux/if_vlan.h
/usr/include/linux/in_route.h
/usr/include/linux/inet_diag.h
/usr/include/linux/ip.h
/usr/include/linux/ipv6.h
/usr/include/linux/neighbour.h
/usr/include/linux/netdevice.h
/usr/include/linux/netfilter.h
/usr/include/linux/netfilter/nf_conntrack_common.h
/usr/include/linux/netfilter/nf_conntrack_tcp.h
/usr/include/linux/netfilter/nfnetlink.h
/usr/include/linux/netfilter/nfnetlink_compat.h
/usr/include/linux/netfilter/nfnetlink_conntrack.h
/usr/include/linux/netfilter/nfnetlink_log.h
/usr/include/linux/netfilter/nfnetlink_queue.h
/usr/include/linux/netlink.h
/usr/include/linux/nl80211.h
/usr/include/linux/param.h
/usr/include/linux/pkt_cls.h
/usr/include/linux/pkt_sched.h
/usr/include/linux/rose.h
/usr/include/linux/rtnetlink.h
/usr/include/linux/snmp.h
/usr/include/linux/socket.h
/usr/include/linux/sockios.h
/usr/include/linux/taskstats.h
/usr/include/linux/tc_act/tc_mirred.h
/usr/include/linux/tc_ematch/tc_em_cmp.h
/usr/include/linux/tc_ematch/tc_em_meta.h
/usr/include/linux/tc_ematch/tc_em_nbyte.h
/usr/include/linux/tc_ematch/tc_em_text.h
/usr/include/linux/types.h
/usr/include/linux/version.h
/usr/include/linux/x25.h
/usr/include/locale.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/net/ethernet.h
/usr/include/net/if.h
/usr/include/net/if_arp.h
/usr/include/net/route.h
/usr/include/netax25/ax25.h
/usr/include/netdb.h
/usr/include/neteconet/ec.h
/usr/include/netinet/if_fddi.h
/usr/include/netinet/in.h
/usr/include/netinet/ip.h
/usr/include/netinet/tcp.h
/usr/include/netipx/ipx.h
/usr/include/paths.h
/usr/include/pthread.h
/usr/include/pwd.h
/usr/include/regex.h
/usr/include/resolv.h
/usr/include/sched.h
/usr/include/search.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/syslog.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/arpa/nameser_compat.h
/usr/include/libio.h
/usr/include/linux/atmapi.h
/usr/include/linux/atmioc.h
/usr/include/linux/atmsap.h
/usr/include/linux/hdlc/ioctl.h
/usr/include/linux/if_packet.h
/usr/include/linux/in.h
/usr/include/linux/in6.h
/usr/include/linux/kernel.h
/usr/include/linux/libc-compat.h
/usr/include/linux/posix_types.h
/usr/include/linux/sysctl.h
/usr/include/rpc/netdb.h
/usr/include/stdc-predef.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/linux/stddef.h
/usr/include/linux/sysinfo.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
